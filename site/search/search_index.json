{"config":{"indexing":"full","lang":["en"],"min_search_length":3,"prebuild_index":false,"separator":"[\\s\\-]+"},"docs":[{"location":"","text":"","title":"Home"},{"location":"admin-system/ad_vp/","text":"Virtual portals View information on how you can scope your HCL Portal to have multiple virtual portals. Virtual portals can be of benefit if you want to serve multiple user groups by separate virtual portals for different purposes, but still want to keep your environment simple and limited to a single HCL Portal installation. Virtual portals allow a large extent of scoping and separating portal resources, user groups, and administration. Video : HCL Digital Experience - How to create a Virtual Portal","title":"Virtual portals"},{"location":"admin-system/ad_vp/#virtual-portals","text":"View information on how you can scope your HCL Portal to have multiple virtual portals. Virtual portals can be of benefit if you want to serve multiple user groups by separate virtual portals for different purposes, but still want to keep your environment simple and limited to a single HCL Portal installation. Virtual portals allow a large extent of scoping and separating portal resources, user groups, and administration. Video : HCL Digital Experience - How to create a Virtual Portal","title":"Virtual portals"},{"location":"admin-system/adauthflt/","text":"Configuring authentication filters The portal authentication filters are a set of plug-in points. You can use them to intercept or extend the portal login, logout, session timeout, and request processing by custom code, for example to redirect users to a specific URL. The authentication filter chain concept The authentication filters in the portal use the same pattern as defined by the J2EE servlet filter facility. For more information, see The Essentials of Filters . The following example shows how this pattern is applied to the authentication filters. Trigger of filter chain, | | for example explicit | CustomFilter1 | login or logout ---> next(..., chain){ | | | // do something #1a | CustomFilter2 | | chain.next(...) ---> next(..., chain){ | | | // do something #2a | DefaultFilter | | chain.next(...) ---> next(..., chain){ | | | // Execute the | | | default logic | | // do something #2b <--- } | // do something #1b <--- } | Redirect, exception, <--- } | or continue | A default filter performs the default logic for a particular use case, for example, login. You can chain a set of custom filters to be run before that default filter. When the filter chain is started, it calls the first element in the chain (in the example CustomFilter1 ) and passes a chain object as an argument to the call. The filter implementation can then perform some operations that it calls the appropriate method on the chain object to trigger the next element in the chain ( CustomFilter2 ). This filter again can implement some individual logic that is run before it calls the next element. The last element of the chain is the predefined DefaultFilter that makes sure that the default logic for the respective use case is run. After a filter is run or if an exception is thrown, each filter returns to the one that calls it, so it is possible to implement a customized exception handling or perform more operations after it calls the successor. Now you can chain a custom set of filters. Each custom filter can perform operations before and after the following element(s) in the chain. You can specify the order and the fully qualified class names of the custom filters by portal configuration properties. For details see the topic about the portal WP Authentication Service. The portal provides only the DefaultFilter implementations and enforces that they are always the last element in the chains; if there are no custom login filters defined, the default filters are the only element. Available authentication filter chains The filter chain concept that is described in the previous section is applied to six types of events that concern the flows of Portal login, logout, and session handling. This provides a flexible approach to plug custom logic to each of those flows. In particular, there are filter chains for the following events: Explicit login: This is a login by user name and password as represented by the interface com.ibm.portal.auth.ExplicitLoginFilter . For example, this can be a login by using the login portlet or the login URL. Implicit login: For example, this can be when a user is already authenticated by WAS, but not yet to Portal. This is represented by the interface com.ibm.portal.auth.ImplicitLoginFilter . Explicit logout: This means that the user triggers a logout action directly, for example by clicking Logout in the user interface, interface com.ibm.portal.auth.ExplicitLogoutFilter . Implicit logout: For example, this can be after a session timeout, or if an authenticated user accesses a public page, or if the user navigates to a virtual portal without being member of the associated user realm. This is represented by the interface com.ibm.portal.auth.ImplicitLogoutFilter . Session Timeout: This is called immediately after an idle timeout of the user session occurred. This is represented by the interface com.ibm.portal.auth.SessionTimeoutFilter . Session Validation: This is called for every request before actions are triggered and the page is rendered. This is represented by the interface com.ibm.portal.auth.SessionValidationFilter . Other than the session timeout filter, each of the previous filters has access to the HTTP request and response objects. A special context object can be used to share information between filters and set redirects that are run after the filter chain is processed. For more detailed information about each of the filter and the filter chain interfaces, see the documentation for both HCL Portal and the API JavaDoc. For a filter chain example, see the topic with the Example of a custom authentication filter. Configuring the filter chains You can specify the order of filters for each filter chain by setting the following properties in the portal WP Authentication Service: login.explicit.filterchain = colon or semicolon-separated list of fully qualified class names login.implicit.filterchain = colon or semicolon-separated list of fully qualified class names logout.explicit.filterchain = colon or semicolon-separated list of fully qualified class names logout.implicit.filterchain = colon or semicolon-separated list of fully qualified class names sessiontimeout.filterchain = colon or semicolon-separated list of fully qualified class names sessionvalidation.filterchain = colon or semicolon-separated list of fully qualified class names Note: Use the properties to specify only the custom filter elements, as the default filter implementation is added implicitly by the Portal infrastructure. Thus, by default no value is set for the properties. In addition, you can set properties in the portal WP Authentication Service according to the following pattern: filterchain.properties.fully qualified class name of the filter implementation.property name This makes the value of this property available in the filter configuration object of the specified class by using the key property name . For details about setting portal configuration properties see the topic about Setting service configuration properties. Example of a custom authentication filter The following gives an example of a custom filter plugged into the filter chain for the explicit Portal login. The custom filter holds properties that define particular redirect URLs for particular user IDs and triggers the corresponding redirect if one of those users who are logged in successfully. To implement such an example, proceed by the following steps: Implement the com.ibm.portal.auth.ExplicitLoginFilter interface and make your class available to the portal class path. See the topic Extending HCL Portal class path for where to place your compiled custom code on the Portal filesystem. Refer to the following sample code as an example to implement the methods of the interface: ``` package com.ibm.portal.example; public class UserRedirectLoginFilter implements ExplicitLoginFilter { // hash map to store the mappings from user id to redirect URL private java.util.Map userToRedirectURLs = new java.util.HashMap(); public void init(SecurityFilterConfig filterConfig) throws SecurityFilterInitException { // iterate the list of init parameters and store the mappings of user to redirect urls for (java.util.Iterator it = filterConfig.getInitParameterNames(); it.hasNext(); ) { String currentParameter = (String)it.next(); userToRedirectURLs.put(currentParameter, filterConfig.getInitParameter(currentParameter)); } } public void login(HttpServletRequest req, HttpServletResponse resp, String userID, char[] password, FilterChainContext portalLoginContext, Subject subject, String realm, ExplicitLoginFilterChain chain) throws LoginException, WSSecurityException, PasswordInvalidException, UserIDInvalidException, AuthenticationFailedException, AuthenticationException, SystemLoginException, com.ibm.portal.auth.exceptions.LoginException { // call the next element in the filter chain to trigger the default login chain.login(req, resp, userID, password, portalLoginContext, subject, realm); // if no exception occured, the login was successful if (userToRedirectURLs.containsKey(userID)) { // set the redirect url for the user if we have an entry portalLoginContext.setRedirectURL((String)userToRedirectURLs.get(userID)); } } public void destroy() { // nothing to do here } } ``` Specify the class name of the custom filter in the WP Authentication Service properties: login.explicit.filterchain=com.ibm.portal.example.UserRedirectLoginFilter To define the redirect URLs for individual user IDs, specify your custom set of properties for this class accordingly. Example: filterchain.properties.com.ibm.portal.example.UserRedirectLoginFilter.alice=/wps/myportal/pageA filterchain.properties.com.ibm.portal.example.UserRedirectLoginFilter.bob=/wps/myportal/pageB Restart the portal. The new filter for the explicit login is now available. Users who are defined in the properties will be redirected to the specified URL after they log in through the login portlet or login URL.","title":"Configuring authentication filters"},{"location":"admin-system/adauthflt/#configuring-authentication-filters","text":"The portal authentication filters are a set of plug-in points. You can use them to intercept or extend the portal login, logout, session timeout, and request processing by custom code, for example to redirect users to a specific URL.","title":"Configuring authentication filters"},{"location":"admin-system/adauthflt/#the-authentication-filter-chain-concept","text":"The authentication filters in the portal use the same pattern as defined by the J2EE servlet filter facility. For more information, see The Essentials of Filters . The following example shows how this pattern is applied to the authentication filters. Trigger of filter chain, | | for example explicit | CustomFilter1 | login or logout ---> next(..., chain){ | | | // do something #1a | CustomFilter2 | | chain.next(...) ---> next(..., chain){ | | | // do something #2a | DefaultFilter | | chain.next(...) ---> next(..., chain){ | | | // Execute the | | | default logic | | // do something #2b <--- } | // do something #1b <--- } | Redirect, exception, <--- } | or continue | A default filter performs the default logic for a particular use case, for example, login. You can chain a set of custom filters to be run before that default filter. When the filter chain is started, it calls the first element in the chain (in the example CustomFilter1 ) and passes a chain object as an argument to the call. The filter implementation can then perform some operations that it calls the appropriate method on the chain object to trigger the next element in the chain ( CustomFilter2 ). This filter again can implement some individual logic that is run before it calls the next element. The last element of the chain is the predefined DefaultFilter that makes sure that the default logic for the respective use case is run. After a filter is run or if an exception is thrown, each filter returns to the one that calls it, so it is possible to implement a customized exception handling or perform more operations after it calls the successor. Now you can chain a custom set of filters. Each custom filter can perform operations before and after the following element(s) in the chain. You can specify the order and the fully qualified class names of the custom filters by portal configuration properties. For details see the topic about the portal WP Authentication Service. The portal provides only the DefaultFilter implementations and enforces that they are always the last element in the chains; if there are no custom login filters defined, the default filters are the only element.","title":"The authentication filter chain concept"},{"location":"admin-system/adauthflt/#available-authentication-filter-chains","text":"The filter chain concept that is described in the previous section is applied to six types of events that concern the flows of Portal login, logout, and session handling. This provides a flexible approach to plug custom logic to each of those flows. In particular, there are filter chains for the following events: Explicit login: This is a login by user name and password as represented by the interface com.ibm.portal.auth.ExplicitLoginFilter . For example, this can be a login by using the login portlet or the login URL. Implicit login: For example, this can be when a user is already authenticated by WAS, but not yet to Portal. This is represented by the interface com.ibm.portal.auth.ImplicitLoginFilter . Explicit logout: This means that the user triggers a logout action directly, for example by clicking Logout in the user interface, interface com.ibm.portal.auth.ExplicitLogoutFilter . Implicit logout: For example, this can be after a session timeout, or if an authenticated user accesses a public page, or if the user navigates to a virtual portal without being member of the associated user realm. This is represented by the interface com.ibm.portal.auth.ImplicitLogoutFilter . Session Timeout: This is called immediately after an idle timeout of the user session occurred. This is represented by the interface com.ibm.portal.auth.SessionTimeoutFilter . Session Validation: This is called for every request before actions are triggered and the page is rendered. This is represented by the interface com.ibm.portal.auth.SessionValidationFilter . Other than the session timeout filter, each of the previous filters has access to the HTTP request and response objects. A special context object can be used to share information between filters and set redirects that are run after the filter chain is processed. For more detailed information about each of the filter and the filter chain interfaces, see the documentation for both HCL Portal and the API JavaDoc. For a filter chain example, see the topic with the Example of a custom authentication filter.","title":"Available authentication filter chains"},{"location":"admin-system/adauthflt/#configuring-the-filter-chains","text":"You can specify the order of filters for each filter chain by setting the following properties in the portal WP Authentication Service: login.explicit.filterchain = colon or semicolon-separated list of fully qualified class names login.implicit.filterchain = colon or semicolon-separated list of fully qualified class names logout.explicit.filterchain = colon or semicolon-separated list of fully qualified class names logout.implicit.filterchain = colon or semicolon-separated list of fully qualified class names sessiontimeout.filterchain = colon or semicolon-separated list of fully qualified class names sessionvalidation.filterchain = colon or semicolon-separated list of fully qualified class names Note: Use the properties to specify only the custom filter elements, as the default filter implementation is added implicitly by the Portal infrastructure. Thus, by default no value is set for the properties. In addition, you can set properties in the portal WP Authentication Service according to the following pattern: filterchain.properties.fully qualified class name of the filter implementation.property name This makes the value of this property available in the filter configuration object of the specified class by using the key property name . For details about setting portal configuration properties see the topic about Setting service configuration properties.","title":"Configuring the filter chains"},{"location":"admin-system/adauthflt/#example-of-a-custom-authentication-filter","text":"The following gives an example of a custom filter plugged into the filter chain for the explicit Portal login. The custom filter holds properties that define particular redirect URLs for particular user IDs and triggers the corresponding redirect if one of those users who are logged in successfully. To implement such an example, proceed by the following steps: Implement the com.ibm.portal.auth.ExplicitLoginFilter interface and make your class available to the portal class path. See the topic Extending HCL Portal class path for where to place your compiled custom code on the Portal filesystem. Refer to the following sample code as an example to implement the methods of the interface: ``` package com.ibm.portal.example; public class UserRedirectLoginFilter implements ExplicitLoginFilter { // hash map to store the mappings from user id to redirect URL private java.util.Map userToRedirectURLs = new java.util.HashMap(); public void init(SecurityFilterConfig filterConfig) throws SecurityFilterInitException { // iterate the list of init parameters and store the mappings of user to redirect urls for (java.util.Iterator it = filterConfig.getInitParameterNames(); it.hasNext(); ) { String currentParameter = (String)it.next(); userToRedirectURLs.put(currentParameter, filterConfig.getInitParameter(currentParameter)); } } public void login(HttpServletRequest req, HttpServletResponse resp, String userID, char[] password, FilterChainContext portalLoginContext, Subject subject, String realm, ExplicitLoginFilterChain chain) throws LoginException, WSSecurityException, PasswordInvalidException, UserIDInvalidException, AuthenticationFailedException, AuthenticationException, SystemLoginException, com.ibm.portal.auth.exceptions.LoginException { // call the next element in the filter chain to trigger the default login chain.login(req, resp, userID, password, portalLoginContext, subject, realm); // if no exception occured, the login was successful if (userToRedirectURLs.containsKey(userID)) { // set the redirect url for the user if we have an entry portalLoginContext.setRedirectURL((String)userToRedirectURLs.get(userID)); } } public void destroy() { // nothing to do here } } ``` Specify the class name of the custom filter in the WP Authentication Service properties: login.explicit.filterchain=com.ibm.portal.example.UserRedirectLoginFilter To define the redirect URLs for individual user IDs, specify your custom set of properties for this class accordingly. Example: filterchain.properties.com.ibm.portal.example.UserRedirectLoginFilter.alice=/wps/myportal/pageA filterchain.properties.com.ibm.portal.example.UserRedirectLoginFilter.bob=/wps/myportal/pageB Restart the portal. The new filter for the explicit login is now available. Users who are defined in the properties will be redirected to the specified URL after they log in through the login portlet or login URL.","title":"Example of a custom authentication filter"},{"location":"admin-system/admxmlai/","text":"The XML configuration interface Use the XML configuration interface (XML Access) for exchanging portal configurations.","title":"The XML configuration interface"},{"location":"admin-system/admxmlai/#the-xml-configuration-interface","text":"Use the XML configuration interface (XML Access) for exchanging portal configurations.","title":"The XML configuration interface"},{"location":"admin-system/adpltadm/","text":"Portal administration portlets Administration portlets are supplied with HCL Digital Experience. Use them to perform administration tasks and actions on portal resources, give other users limited access rights on selected resources, and deploy custom portlets, themes, or skins.","title":"Portal administration portlets"},{"location":"admin-system/adpltadm/#portal-administration-portlets","text":"Administration portlets are supplied with HCL Digital Experience. Use them to perform administration tasks and actions on portal resources, give other users limited access rights on selected resources, and deploy custom portlets, themes, or skins.","title":"Portal administration portlets"},{"location":"admin-system/adsetcfg/","text":"Setting service configuration properties HCL Digital Experience comprises a framework of services to accommodate the different scenarios that portals need to address. Services are available for both HCL Portal and HCL Web Content Manager. You can configure some of these services. Setting service configuration properties from the user interface The configuration for each service is stored in and accessible through the WebSphere\u00ae Integrated Solutions Console. Each service is registered as a separate resource environment provider with custom properties that represent the service configuration. Initially in a default installation, only the most common properties are shown as custom properties. You might need to add more properties with key and value as required. Or you might want to remove properties that can be used with their default values or are no longer required. Select the appropriate WebSphere Integrated Solutions Console, depending on your environment: If your portal runs stand-alone, use the local console. If your portal is installed in a cluster, use the console of the deployment manager. Start the WebSphere Integrated Solutions Console by entering the following string in the URL location field of a web browser: http://example.com:admin\\_port/ibm/console where example.com is the name of your server or node host name of your server when on z/OS\u00ae and admin\\_port is the port that is assigned to the WebSphere Integrated Solutions Console. Go to Resources > Resources Environment > Resource Environment Providers . In the Resource Environment Providers page, make the appropriate selection. Select the appropriate node or cluster from the scopes list, or clear the Show Scope check box and select one of the following options, depending on your portal environment: If your portal is running as a single server, select Browse Nodes and select the node. If your portal is installed in a cluster, select Browse Clusters and select the portal cluster. Select the service in which you want to change a property. Note: In the list, the service names are preceded by a product prefix and a blank space. For example, the HCL Portal configuration service is identified as WP ConfigService. The HCL Web Content Manager configuration service is identified as WCM WCMConfigService. Click Custom Properties . Do one of the following tasks as needed: To set a property, select that property and change its value. If the property that you want to set does not exist yet, create it new. When you create a new property, use java.lang.String as its type and do not mark the property as required . Otherwise, you might not be able to delete it later. Select one or more properties for removal. When you are done, click Save at the start of the page under Message(s) . Click Save again when prompted to confirm your changes. If you have a cluster configuration, replicate your changes to the cluster. Restart the server for the changes to become effective. Your service configuration properties updates are now in effect. Setting service configuration properties from the command line By alternative, you can also set the properties in the properties files and then enable them by running a configuration task. Notes: This option for setting service configuration properties is not available for all properties. Use this option only if you want to set service configuration properties from the command line. In all other cases, set service configuration properties through the Resource Environment Provider. To do so, use the procedure given earlier in this topic. If your portal is installed in a cluster, use this procedure on the primary node. The configuration task update-wcm-service-properties does not take effect on secondary nodes. Changes to properties configuration files do not affect runtime properties until you run the configuration tasks that are described in the following procedure. Locate the properties file for the appropriate Resource Environment Provider: The properties files for HCL Portal are in the directory [wp\\_profile\\_root](../reference/wpsdirstr.md#wp_profile_root)/PortalServer/config . The properties files for HCL Web Content Manager are in the directory [wp\\_profile\\_root](../reference/wpsdirstr.md#wp_profile_root)/PortalServer/wcm/shared/app/config/wcmservices . If there is no default properties file for a Resource Environment Provider, for example, for WP DynamicContentSpotMappings, create a new properties file as follows: Create a properties file by using a text editor. Give the file the name of the Resource Environment Provider without the WP prefix. Example: DynamicContentSpotMappings.properties . Save the file in the appropriate directory for the Resource Environment Provider as given earlier. Edit the properties file and modify or add configuration properties as needed. Example: newDynamicContent=res:/CustomThemeContext/themes/html/MyTheme/dynamicContent.jsp Save the updated properties file. Run the appropriate configuration task to update the configuration properties: For changes to HCL Portal properties files to take effect, run the following task from the [wp\\_profile\\_root](../reference/wpsdirstr.md#wp_profile_root)/ConfigEngine directory. Windows\u2122: ConfigEngine.bat update-properties -DPortalAdminPwd=password -DWasUserid=username -DWasPassword=password AIX\u00ae HP-UX Linux\u2122 Solaris: ./ConfigEngine.sh update-properties -DPortalAdminPwd=password -DWasUserid=username -DWasPassword=password IBM\u00ae i: ConfigEngine.sh update-properties -DPortalAdminPwd=password -DWasUserid=username -DWasPassword=password z/OS: ./ConfigEngine.sh update-properties -DPortalAdminPwd=password -DWasUserid=username -DWasPassword=password For changes to HCL Web Content Manager properties files, run the following task from the [wp\\_profile\\_root](../reference/wpsdirstr.md#wp_profile_root)/ConfigEngine directory. Windows: ConfigEngine.bat update-wcm-service-properties -DPortalAdminPwd=password -DWasUserid=username -DWasPassword=password AIX HP-UX Linux Solaris: ./ConfigEngine.sh update-wcm-service-properties -DPortalAdminPwd=password -DWasUserid=username -DWasPassword=password IBM i: ConfigEngine.sh update-wcm-service-properties -DPortalAdminPwd=password -DWasUserid=username -DWasPassword=password z/OS: ./ConfigEngine.sh update-wcm-service-properties -DPortalAdminPwd=password -DWasUserid=username -DWasPassword=password Your service configuration properties updates are now in effect.","title":"Setting service configuration properties"},{"location":"admin-system/adsetcfg/#setting-service-configuration-properties","text":"HCL Digital Experience comprises a framework of services to accommodate the different scenarios that portals need to address. Services are available for both HCL Portal and HCL Web Content Manager. You can configure some of these services.","title":"Setting service configuration properties"},{"location":"admin-system/adsetcfg/#setting-service-configuration-properties-from-the-user-interface","text":"The configuration for each service is stored in and accessible through the WebSphere\u00ae Integrated Solutions Console. Each service is registered as a separate resource environment provider with custom properties that represent the service configuration. Initially in a default installation, only the most common properties are shown as custom properties. You might need to add more properties with key and value as required. Or you might want to remove properties that can be used with their default values or are no longer required. Select the appropriate WebSphere Integrated Solutions Console, depending on your environment: If your portal runs stand-alone, use the local console. If your portal is installed in a cluster, use the console of the deployment manager. Start the WebSphere Integrated Solutions Console by entering the following string in the URL location field of a web browser: http://example.com:admin\\_port/ibm/console where example.com is the name of your server or node host name of your server when on z/OS\u00ae and admin\\_port is the port that is assigned to the WebSphere Integrated Solutions Console. Go to Resources > Resources Environment > Resource Environment Providers . In the Resource Environment Providers page, make the appropriate selection. Select the appropriate node or cluster from the scopes list, or clear the Show Scope check box and select one of the following options, depending on your portal environment: If your portal is running as a single server, select Browse Nodes and select the node. If your portal is installed in a cluster, select Browse Clusters and select the portal cluster. Select the service in which you want to change a property. Note: In the list, the service names are preceded by a product prefix and a blank space. For example, the HCL Portal configuration service is identified as WP ConfigService. The HCL Web Content Manager configuration service is identified as WCM WCMConfigService. Click Custom Properties . Do one of the following tasks as needed: To set a property, select that property and change its value. If the property that you want to set does not exist yet, create it new. When you create a new property, use java.lang.String as its type and do not mark the property as required . Otherwise, you might not be able to delete it later. Select one or more properties for removal. When you are done, click Save at the start of the page under Message(s) . Click Save again when prompted to confirm your changes. If you have a cluster configuration, replicate your changes to the cluster. Restart the server for the changes to become effective. Your service configuration properties updates are now in effect.","title":"Setting service configuration properties from the user interface"},{"location":"admin-system/adsetcfg/#setting-service-configuration-properties-from-the-command-line","text":"By alternative, you can also set the properties in the properties files and then enable them by running a configuration task. Notes: This option for setting service configuration properties is not available for all properties. Use this option only if you want to set service configuration properties from the command line. In all other cases, set service configuration properties through the Resource Environment Provider. To do so, use the procedure given earlier in this topic. If your portal is installed in a cluster, use this procedure on the primary node. The configuration task update-wcm-service-properties does not take effect on secondary nodes. Changes to properties configuration files do not affect runtime properties until you run the configuration tasks that are described in the following procedure. Locate the properties file for the appropriate Resource Environment Provider: The properties files for HCL Portal are in the directory [wp\\_profile\\_root](../reference/wpsdirstr.md#wp_profile_root)/PortalServer/config . The properties files for HCL Web Content Manager are in the directory [wp\\_profile\\_root](../reference/wpsdirstr.md#wp_profile_root)/PortalServer/wcm/shared/app/config/wcmservices . If there is no default properties file for a Resource Environment Provider, for example, for WP DynamicContentSpotMappings, create a new properties file as follows: Create a properties file by using a text editor. Give the file the name of the Resource Environment Provider without the WP prefix. Example: DynamicContentSpotMappings.properties . Save the file in the appropriate directory for the Resource Environment Provider as given earlier. Edit the properties file and modify or add configuration properties as needed. Example: newDynamicContent=res:/CustomThemeContext/themes/html/MyTheme/dynamicContent.jsp Save the updated properties file. Run the appropriate configuration task to update the configuration properties: For changes to HCL Portal properties files to take effect, run the following task from the [wp\\_profile\\_root](../reference/wpsdirstr.md#wp_profile_root)/ConfigEngine directory. Windows\u2122: ConfigEngine.bat update-properties -DPortalAdminPwd=password -DWasUserid=username -DWasPassword=password AIX\u00ae HP-UX Linux\u2122 Solaris: ./ConfigEngine.sh update-properties -DPortalAdminPwd=password -DWasUserid=username -DWasPassword=password IBM\u00ae i: ConfigEngine.sh update-properties -DPortalAdminPwd=password -DWasUserid=username -DWasPassword=password z/OS: ./ConfigEngine.sh update-properties -DPortalAdminPwd=password -DWasUserid=username -DWasPassword=password For changes to HCL Web Content Manager properties files, run the following task from the [wp\\_profile\\_root](../reference/wpsdirstr.md#wp_profile_root)/ConfigEngine directory. Windows: ConfigEngine.bat update-wcm-service-properties -DPortalAdminPwd=password -DWasUserid=username -DWasPassword=password AIX HP-UX Linux Solaris: ./ConfigEngine.sh update-wcm-service-properties -DPortalAdminPwd=password -DWasUserid=username -DWasPassword=password IBM i: ConfigEngine.sh update-wcm-service-properties -DPortalAdminPwd=password -DWasUserid=username -DWasPassword=password z/OS: ./ConfigEngine.sh update-wcm-service-properties -DPortalAdminPwd=password -DWasUserid=username -DWasPassword=password Your service configuration properties updates are now in effect.","title":"Setting service configuration properties from the command line"},{"location":"admin-system/adxmldam/","text":"Using XML Access to export and import Digital Asset Management assets Using XML Access with HCL DX CF19 and higher, to manage staging scenarios, administrators can import, export, and control Digital Asset Management access control data. This enables a Digital Asset Management staging scenario in which an administrator can copy the persistent volumes as deployed in Kubernetes or OpenShift platforms for Digital Asset Management, and the persistence layer from the source deployment system. The XML Access script will also export the Digital Asset Management assets access control information, and then import all artifacts it to the target deployment system. Note: This staging scenario presents some constraints: All Digital Asset Management access control assets will be copied from the source deployment (staging) to the target deployment system. The assets on the target system will be replaced. Access Control is matched between environments, though it is possible to manipulate the access control data after completing the export. Export Digital Asset Management Access Control Assets - Sample XML Access script <?xml version=\"1.0\" encoding=\"UTF-8\"?> <!-- ================================================================= * Licensed Materials - Property of IBM * (c) Copyright IBM Corp. 2003, 2006. All rights reserved. * * US Government Users Restricted Rights - Use, duplication or * disclosure restricted by GSA ADP Schedule Contract with IBM * Corp. * * DISCLAIMER OF WARRANTIES. The following [enclosed] code is * sample code created by IBM Corporation. This sample code is * not part of any standard or IBM product and is provided to you * solely for the purpose of assisting you in the development of * your applications. The code is provided \"AS IS\", without * warranty of any kind. IBM shall not be liable for any damages * arising out of your use of the sample code, even if they have * been advised of the possibility of such damages. * ================================================================= --> <request xmlns:xsi=\"http://www.w3.org/2001/XMLSchema-instance\" xsi:noNamespaceSchemaLocation=\"PortalConfig_8.5.0.xsd\" type=\"export\" dam-collections=\"true\"> <!-- Example for using the * wildcard to export all resources of a given type. This script exports all Web modules (and their contained portlets) that are defined in the portal. --> <portal action=\"locate\"> <dam-collection objectid=\"*\" action=\"export\"/> </portal> </request> Import Digital Asset Management Access Control Assets - Sample XML Access script <?xml version=\"1.0\" encoding=\"UTF-8\"?> <request type=\"update\" version=\"8.5.0.0\" xmlns:xsi=\"http://www.w3.org/2001/XMLSchema-instance\" xsi:noNamespaceSchemaLocation=\"PortalConfig_8.5.0.xsd\"> <portal action=\"locate\"> <dam-collection action=\"update\" domain=\"rel\" objectid=\"Z1UGeAeKBP67Q1\"> <access-control externalized=\"false\" owner=\"undefined\" private=\"false\"> <role actionset=\"Administrator\" update=\"set\"> <mapping subjectid=\"uid=wpsadmin,o=defaultWIMFileBasedRealm\" subjecttype=\"user\" update=\"set\"/> </role> <role actionset=\"Security Administrator\" update=\"set\"> <mapping subjectid=\"uid=wpsadmin,o=defaultWIMFileBasedRealm\" subjecttype=\"user\" update=\"set\"/> </role> </access-control> </dam-collection> </portal> <status element=\"all\" result=\"ok\"/> </request> Delete Digital Asset Management Access Control Assets - Sample XML Access script ?xml version=\"1.0\" encoding=\"UTF-8\"?> <request type=\"update\" version=\"8.5.0.0\" xmlns:xsi=\"http://www.w3.org/2001/XMLSchema-instance\" xsi:noNamespaceSchemaLocation=\"PortalConfig_8.5.0.xsd\"> <portal action=\"locate\"> <dam-collection action=\"delete\" domain=\"rel\" objectid=\"Z1UGeAeKBP67Q1\"> </dam-collection> </portal> <status element=\"all\" result=\"ok\"/> </request>","title":"Using XML Access to export and import Digital Asset Management assets"},{"location":"admin-system/adxmldam/#using-xml-access-to-export-and-import-digital-asset-management-assets","text":"Using XML Access with HCL DX CF19 and higher, to manage staging scenarios, administrators can import, export, and control Digital Asset Management access control data. This enables a Digital Asset Management staging scenario in which an administrator can copy the persistent volumes as deployed in Kubernetes or OpenShift platforms for Digital Asset Management, and the persistence layer from the source deployment system. The XML Access script will also export the Digital Asset Management assets access control information, and then import all artifacts it to the target deployment system. Note: This staging scenario presents some constraints: All Digital Asset Management access control assets will be copied from the source deployment (staging) to the target deployment system. The assets on the target system will be replaced. Access Control is matched between environments, though it is possible to manipulate the access control data after completing the export.","title":"Using XML Access to export and import Digital Asset Management assets"},{"location":"admin-system/adxmldam/#export-digital-asset-management-access-control-assets-sample-xml-access-script","text":"<?xml version=\"1.0\" encoding=\"UTF-8\"?> <!-- ================================================================= * Licensed Materials - Property of IBM * (c) Copyright IBM Corp. 2003, 2006. All rights reserved. * * US Government Users Restricted Rights - Use, duplication or * disclosure restricted by GSA ADP Schedule Contract with IBM * Corp. * * DISCLAIMER OF WARRANTIES. The following [enclosed] code is * sample code created by IBM Corporation. This sample code is * not part of any standard or IBM product and is provided to you * solely for the purpose of assisting you in the development of * your applications. The code is provided \"AS IS\", without * warranty of any kind. IBM shall not be liable for any damages * arising out of your use of the sample code, even if they have * been advised of the possibility of such damages. * ================================================================= --> <request xmlns:xsi=\"http://www.w3.org/2001/XMLSchema-instance\" xsi:noNamespaceSchemaLocation=\"PortalConfig_8.5.0.xsd\" type=\"export\" dam-collections=\"true\"> <!-- Example for using the * wildcard to export all resources of a given type. This script exports all Web modules (and their contained portlets) that are defined in the portal. --> <portal action=\"locate\"> <dam-collection objectid=\"*\" action=\"export\"/> </portal> </request>","title":"Export Digital Asset Management Access Control Assets - Sample XML Access script"},{"location":"admin-system/adxmldam/#import-digital-asset-management-access-control-assets-sample-xml-access-script","text":"<?xml version=\"1.0\" encoding=\"UTF-8\"?> <request type=\"update\" version=\"8.5.0.0\" xmlns:xsi=\"http://www.w3.org/2001/XMLSchema-instance\" xsi:noNamespaceSchemaLocation=\"PortalConfig_8.5.0.xsd\"> <portal action=\"locate\"> <dam-collection action=\"update\" domain=\"rel\" objectid=\"Z1UGeAeKBP67Q1\"> <access-control externalized=\"false\" owner=\"undefined\" private=\"false\"> <role actionset=\"Administrator\" update=\"set\"> <mapping subjectid=\"uid=wpsadmin,o=defaultWIMFileBasedRealm\" subjecttype=\"user\" update=\"set\"/> </role> <role actionset=\"Security Administrator\" update=\"set\"> <mapping subjectid=\"uid=wpsadmin,o=defaultWIMFileBasedRealm\" subjecttype=\"user\" update=\"set\"/> </role> </access-control> </dam-collection> </portal> <status element=\"all\" result=\"ok\"/> </request>","title":"Import Digital Asset Management Access Control Assets - Sample XML Access script"},{"location":"admin-system/adxmldam/#delete-digital-asset-management-access-control-assets-sample-xml-access-script","text":"?xml version=\"1.0\" encoding=\"UTF-8\"?> <request type=\"update\" version=\"8.5.0.0\" xmlns:xsi=\"http://www.w3.org/2001/XMLSchema-instance\" xsi:noNamespaceSchemaLocation=\"PortalConfig_8.5.0.xsd\"> <portal action=\"locate\"> <dam-collection action=\"delete\" domain=\"rel\" objectid=\"Z1UGeAeKBP67Q1\"> </dam-collection> </portal> <status element=\"all\" result=\"ok\"/> </request>","title":"Delete Digital Asset Management Access Control Assets - Sample XML Access script"},{"location":"admin-system/adxmlref_import_war/","text":"Importing WAR files To create new portlet applications, you need additional resources, the WAR files. You cannot include those WAR files in the XML input. Instead, you can add references to external URL locations to the XML input. See the following example: <web-app uid=\"MySpecialPortlet\" action=\"create\"> <url>file://localhost/C:/myportlets/Special.war</url> </web-app> The WAR files are not used in the running portal. However, when you process the XML request, the WAR files referenced in the XML script must be accessible to the portal. When you update a package and specify a URL subelement, the WAR file is re-deployed, just as if you had selected the update of a portlet application in the browser. If you intend to deploy the same configuration into several new portals, you can set the URL to http://deploymentserver/path/filename.war. This way there is no need to copy all WAR files to each server machine. The deploymentserver machine needs to be set up properly so that the WAR files can be accessed by HTTP. An XML export request does not create any archive files that might be required. Instead, it only creates pseudo-references in the form of file URLs that rely on the assumption that the file resides in the /installableApps/ sub-directory of the portal installation. If these assumptions are not met, an exported portal configuration cannot be successfully re-created without editing the generated URLs manually. A back up of a portal configuration requires that the WAR files required for redeployment are saved in addition to the XML export.","title":"Importing WAR files"},{"location":"admin-system/adxmlref_import_war/#importing-war-files","text":"To create new portlet applications, you need additional resources, the WAR files. You cannot include those WAR files in the XML input. Instead, you can add references to external URL locations to the XML input. See the following example: <web-app uid=\"MySpecialPortlet\" action=\"create\"> <url>file://localhost/C:/myportlets/Special.war</url> </web-app> The WAR files are not used in the running portal. However, when you process the XML request, the WAR files referenced in the XML script must be accessible to the portal. When you update a package and specify a URL subelement, the WAR file is re-deployed, just as if you had selected the update of a portlet application in the browser. If you intend to deploy the same configuration into several new portals, you can set the URL to http://deploymentserver/path/filename.war. This way there is no need to copy all WAR files to each server machine. The deploymentserver machine needs to be set up properly so that the WAR files can be accessed by HTTP. An XML export request does not create any archive files that might be required. Instead, it only creates pseudo-references in the form of file URLs that rely on the assumption that the file resides in the /installableApps/ sub-directory of the portal installation. If these assumptions are not met, an exported portal configuration cannot be successfully re-created without editing the generated URLs manually. A back up of a portal configuration requires that the WAR files required for redeployment are saved in addition to the XML export.","title":"Importing WAR files"},{"location":"admin-system/adxmltsk_cmdln/","text":"Using the XML configuration command line client You access the XML configuration interface using a command line tool. This command line client is a separate program that connects to the server. Connecting to a remote server makes it possible to configure the portal remotely. You use the command line syntax of the XML configuration interface. The remote connection can be either an HTTP connection, which is not secure, or a secure HTTPS connection. Apply care and use the appropriate type of connection that is required for your environment. Use an HTTP connection to connect to the XML configuration interface only from inside a protected intranet where you can be sure that the HTTP connection is not compromised. In all other networks use a secure HTTP S connection to connect to the XML configuration interface. For details about how to use an HTTPS connection refer to XML Syntax for using a secure connection with SSL. You invoke the command line client by using the following shell scripts in the directory [wp\\_profile\\_root](../reference/wpsdirstr.md#wp_profile_root)/PortalServer/bin : UNIX\u2122Linux\u2122: ./xmlaccess.sh IBM\u00ae i: xmlaccess.sh Windows\u2122: xmlaccess.bat z/OS\u00ae: ./xmlaccess.sh You can also use the XML configuration interface remotely from a machine that does not have portal installed. In this case copy the required files to the remote machine and configure the portal from there. All you need is a Java run time. However, you have to adapt the path settings in the shell scripts accordingly. These are the required files: [PortalServer\\_root](../reference/wpsdirstr.md#wp_root)/base/wp.xml.client/bin/wp.xml.client.jar [PortalServer\\_root](../reference/wpsdirstr.md#wp_root)/base/wp.base/shared/app/wp.base.jar [PortalServer\\_root](../reference/wpsdirstr.md#wp_root)/base/wp.base/shared/app/wp.engine.impl.jar [PortalServer\\_root](../reference/wpsdirstr.md#wp_root)/base/wp.base/shared/app/wp.utilities.streams.jar [AppServer\\_root](../reference/wpsdirstr.md#was_root)/lib/j2ee.jar [AppServer\\_root](../reference/wpsdirstr.md#was_root)/lib/bootstrap.jar [AppServer\\_root](../reference/wpsdirstr.md#was_root)/lib/com.ibm.ws.runtime.jar [AppServer\\_root](../reference/wpsdirstr.md#was_root)/plugins/j2ee.jar [AppServer\\_root](../reference/wpsdirstr.md#was_root)/plugins/com.ibm.wps.emf.jar [AppServer\\_root](../reference/wpsdirstr.md#was_root)/plugins/org.eclipse.emf.ecore.jar [AppServer\\_root](../reference/wpsdirstr.md#was_root)/plugins/org.eclipse.emf.common.jar [PortalServer\\_root](../reference/wpsdirstr.md#wp_root)/bin/xmlaccess.sh or [PortalServer\\_root](../reference/wpsdirstr.md#wp_root)\\bin\\xmlaccess.bat , depending on your operating system. [wp\\_profile\\_root](../reference/wpsdirstr.md#wp_profile_root)/PortalServer/bin/xmlaccess.sh Note: When you update your portal by installing fix packs, these files might be updated. In such cases make sure that you always use the most recent versions of these files.","title":"Using the XML configuration command line client"},{"location":"admin-system/adxmltsk_cmdln/#using-the-xml-configuration-command-line-client","text":"You access the XML configuration interface using a command line tool. This command line client is a separate program that connects to the server. Connecting to a remote server makes it possible to configure the portal remotely. You use the command line syntax of the XML configuration interface. The remote connection can be either an HTTP connection, which is not secure, or a secure HTTPS connection. Apply care and use the appropriate type of connection that is required for your environment. Use an HTTP connection to connect to the XML configuration interface only from inside a protected intranet where you can be sure that the HTTP connection is not compromised. In all other networks use a secure HTTP S connection to connect to the XML configuration interface. For details about how to use an HTTPS connection refer to XML Syntax for using a secure connection with SSL. You invoke the command line client by using the following shell scripts in the directory [wp\\_profile\\_root](../reference/wpsdirstr.md#wp_profile_root)/PortalServer/bin : UNIX\u2122Linux\u2122: ./xmlaccess.sh IBM\u00ae i: xmlaccess.sh Windows\u2122: xmlaccess.bat z/OS\u00ae: ./xmlaccess.sh You can also use the XML configuration interface remotely from a machine that does not have portal installed. In this case copy the required files to the remote machine and configure the portal from there. All you need is a Java run time. However, you have to adapt the path settings in the shell scripts accordingly. These are the required files: [PortalServer\\_root](../reference/wpsdirstr.md#wp_root)/base/wp.xml.client/bin/wp.xml.client.jar [PortalServer\\_root](../reference/wpsdirstr.md#wp_root)/base/wp.base/shared/app/wp.base.jar [PortalServer\\_root](../reference/wpsdirstr.md#wp_root)/base/wp.base/shared/app/wp.engine.impl.jar [PortalServer\\_root](../reference/wpsdirstr.md#wp_root)/base/wp.base/shared/app/wp.utilities.streams.jar [AppServer\\_root](../reference/wpsdirstr.md#was_root)/lib/j2ee.jar [AppServer\\_root](../reference/wpsdirstr.md#was_root)/lib/bootstrap.jar [AppServer\\_root](../reference/wpsdirstr.md#was_root)/lib/com.ibm.ws.runtime.jar [AppServer\\_root](../reference/wpsdirstr.md#was_root)/plugins/j2ee.jar [AppServer\\_root](../reference/wpsdirstr.md#was_root)/plugins/com.ibm.wps.emf.jar [AppServer\\_root](../reference/wpsdirstr.md#was_root)/plugins/org.eclipse.emf.ecore.jar [AppServer\\_root](../reference/wpsdirstr.md#was_root)/plugins/org.eclipse.emf.common.jar [PortalServer\\_root](../reference/wpsdirstr.md#wp_root)/bin/xmlaccess.sh or [PortalServer\\_root](../reference/wpsdirstr.md#wp_root)\\bin\\xmlaccess.bat , depending on your operating system. [wp\\_profile\\_root](../reference/wpsdirstr.md#wp_profile_root)/PortalServer/bin/xmlaccess.sh Note: When you update your portal by installing fix packs, these files might be updated. In such cases make sure that you always use the most recent versions of these files.","title":"Using the XML configuration command line client"},{"location":"admin-system/create_search_coll/","text":"Creating new search collections Before you can begin using remote search service, you must create two new search collections, one for JCR search, and one for Portal search. Manually create a JCR search collection by following the instructions that are outlined in Setting up a JCR search collection in the related links. Important: The steps that are outlined in Setting up a JCR search collection include instructions on how to create the new content source for the JCR search collection. Create the new content source for the JCR search collection before you create the Portal search collection. Manually create a Portal search collection by completing the following steps: To open the Manage Search portlet, click the Administration menu icon. Then, click Search Administration > Manage Search . Click Search collections. To create a new search collection, click New collection . Specify the following values for the parameters as required: Search Service Select Remote Search Service . Location of collection The directory location for the collection where you intend the search collection to be created. This parameter is to be specified as index directory location/collection name. Name of collection. Specify the name of the collection. Description of collection This parameter is optional. Specify Collection language Specify the collection language. By default this parameter is set to English (United States). Click OK . The collection displays in the Collections from All Services pane. Manually create new content sources for the Portal search collection.","title":"Creating new search collections"},{"location":"admin-system/create_search_coll/#creating-new-search-collections","text":"Before you can begin using remote search service, you must create two new search collections, one for JCR search, and one for Portal search. Manually create a JCR search collection by following the instructions that are outlined in Setting up a JCR search collection in the related links. Important: The steps that are outlined in Setting up a JCR search collection include instructions on how to create the new content source for the JCR search collection. Create the new content source for the JCR search collection before you create the Portal search collection. Manually create a Portal search collection by completing the following steps: To open the Manage Search portlet, click the Administration menu icon. Then, click Search Administration > Manage Search . Click Search collections. To create a new search collection, click New collection . Specify the following values for the parameters as required: Search Service Select Remote Search Service . Location of collection The directory location for the collection where you intend the search collection to be created. This parameter is to be specified as index directory location/collection name. Name of collection. Specify the name of the collection. Description of collection This parameter is optional. Specify Collection language Specify the collection language. By default this parameter is set to English (United States). Click OK . The collection displays in the Collections from All Services pane. Manually create new content sources for the Portal search collection.","title":"Creating new search collections"},{"location":"admin-system/enabling_presentation_of_locales_in_friendly_urls/","text":"Enabling presentation of Locales in friendly URLs Beginning with HCL DX Container Update CF193 and higher, enablement is provided to present friendly URL\u2019s which retain locale specific definitions when multi-lingual page versions are requested. This enablement can also improve SEO results when users search for language specific DX page topics. This new enablement improves capability for site managers to deliver language specific friendly URLs without URL specific encoding efforts. Follow the guidance below to enable locales in the prefix of the HCL DX page URL contexts, for example, /wps/portal/es/page1/page11 or /wps/portal/fr/page1/page11 , when a language specific version is requested. The enablement will support friendly and non-friendly URLs, and those supported with the Web Content Manager Multi-Lingual Solution . This enablement is not supported or executed during presentation of portlet resources such as portlets, REST API calls, or sites presented via Web Application Bridge. How the enablement to present locale specific pages with friendly URLs works When a DX user comes to site by either invoking a page with a locale in the URL, or makes a selection from a list of language page options, the enablement logic is invoked. If no language specific page is requested, the default language version is displayed. The new logic checks if the multi-lingual locale URLs support is enabled, and if the requested page has a locale that matches the list of locales configured to the DX site. Next, the request URL is modified to exclude the locale and request parameter is set. Once the request parameter is set, the DX State Decoding Plugin is invoked to retrieve a locale in the request parameter and sets the locale in the current state. All page rendering then has the right locale set, and the response is sent to the user\u2019s browser client. Whenever a new URL is created via state handling or by Web Content Manager content for presentation to users, these processes will be executed. When language specific URLs are requested, the DX State Decoding Plugin is invoked to manage the requested rendering of the language specific URL and page for the end user. Enabling the feature to present locale specific friendly URLs Use the configuration task or manual steps to enable presentation of language specific friendly URLs. Config Task Run the following configuration task on your primary HCL Digital Experience node, and restart the other JVMs. Replace the list defined in friendly-locale-list with the locales you would like to support. The following example lists the German, English, and Spanish locales ( \u201cdn,en,es\u201d ) to be supported: ConfigEngine.bat|sh enable-friendly-locale-urls -Dfriendly-locale-list=\"de,en,es\" -DWasPassword=wpsadmin -DPortalAdminPwd=wpsadmin Manual enablement In the WebSphere Application Server Admin Console, go to Resources > Resource Environment Providers > WP ConfigService , and create the following new properties: friendly-locale-enabled=true friendly-locale-list=de,es Adjust the friendly-locale-list as desired. Restart the HCL Digital Experience server. Note: In a cluster, synchronize the nodes and then restart all the HCL DX JVMs. Disabling the feature to present locale specific friendly URLs Use the configuration task or manual steps to disable the process to manage presentation of language specific friendly URLs. Config Task Run the following configuration task on your primary HCL Digital Experience node, and restart the other JVMs: ConfigEngine.bat|sh disable-friendly-locale-urls -DWasPassword=wpsadmin -DPortalAdminPwd=wpsadmin Restart the HCL Digital Experience server. Note: In a cluster, synch the nodes and then restart all Digital Experience JVMs. Manual disablement In the WAS Admin Console under Resources > Resource Environment Providers > WP ConfigService , remove the following properties: friendly-locale-enabled friendly-locale-list Restart the Digital Experience server. Note: In a cluster synchronize the nodes and then restart all Digital Experience JVMs. Expected Operating Results By default, the multi-lingual locale is not encoded into the DX site page URL. But if a request arrives (for example: http://localhost:10039/wps/portal/de/Home ), the entire page, and all links should be rendered in German and the browser URL should retain \u201c/de\u201d in it and in friendly format (if friendly URLs are enabled). When generating a URL with the ChangeLanguageCommand , or using the Navigational state SPI, the language does have the friendly locale in the URL. This works for friendly URLs and non-friendly URLs. It also works in the context of the Web Content Management Multi-Lingual Solution feature. When rendering a page, the correct MLS web content library for the requested language is being used. In this case, note that locales defined to the list should be specified and addressed via an underscore, for instance pt_BR for Brazilian Portuguese. Limitations When generating a Virtual Portal or DX page at the root level, a State Decoding check is not performed, to avoid conflicts with the defined URLs. The virtual Portal creation cannot not succeed; specifically, the page creation would proceed but the page cannot be accessed without the URL (i.e. having a locale of de and creating a root page of de , the URL to access the page would be /wps/portal/de/de , assuming a default context root). In the Web Content Management Authoring portlet , the Generate button and the according widgets are not translated if friendly locales or a locale in the state is used (known issue).","title":"Enabling presentation of Locales in friendly URLs"},{"location":"admin-system/enabling_presentation_of_locales_in_friendly_urls/#enabling-presentation-of-locales-in-friendly-urls","text":"Beginning with HCL DX Container Update CF193 and higher, enablement is provided to present friendly URL\u2019s which retain locale specific definitions when multi-lingual page versions are requested. This enablement can also improve SEO results when users search for language specific DX page topics. This new enablement improves capability for site managers to deliver language specific friendly URLs without URL specific encoding efforts. Follow the guidance below to enable locales in the prefix of the HCL DX page URL contexts, for example, /wps/portal/es/page1/page11 or /wps/portal/fr/page1/page11 , when a language specific version is requested. The enablement will support friendly and non-friendly URLs, and those supported with the Web Content Manager Multi-Lingual Solution . This enablement is not supported or executed during presentation of portlet resources such as portlets, REST API calls, or sites presented via Web Application Bridge.","title":"Enabling presentation of Locales in friendly URLs"},{"location":"admin-system/enabling_presentation_of_locales_in_friendly_urls/#how-the-enablement-to-present-locale-specific-pages-with-friendly-urls-works","text":"When a DX user comes to site by either invoking a page with a locale in the URL, or makes a selection from a list of language page options, the enablement logic is invoked. If no language specific page is requested, the default language version is displayed. The new logic checks if the multi-lingual locale URLs support is enabled, and if the requested page has a locale that matches the list of locales configured to the DX site. Next, the request URL is modified to exclude the locale and request parameter is set. Once the request parameter is set, the DX State Decoding Plugin is invoked to retrieve a locale in the request parameter and sets the locale in the current state. All page rendering then has the right locale set, and the response is sent to the user\u2019s browser client. Whenever a new URL is created via state handling or by Web Content Manager content for presentation to users, these processes will be executed. When language specific URLs are requested, the DX State Decoding Plugin is invoked to manage the requested rendering of the language specific URL and page for the end user.","title":"How the enablement to present locale specific pages with friendly URLs works"},{"location":"admin-system/enabling_presentation_of_locales_in_friendly_urls/#enabling-the-feature-to-present-locale-specific-friendly-urls","text":"Use the configuration task or manual steps to enable presentation of language specific friendly URLs. Config Task Run the following configuration task on your primary HCL Digital Experience node, and restart the other JVMs. Replace the list defined in friendly-locale-list with the locales you would like to support. The following example lists the German, English, and Spanish locales ( \u201cdn,en,es\u201d ) to be supported: ConfigEngine.bat|sh enable-friendly-locale-urls -Dfriendly-locale-list=\"de,en,es\" -DWasPassword=wpsadmin -DPortalAdminPwd=wpsadmin Manual enablement In the WebSphere Application Server Admin Console, go to Resources > Resource Environment Providers > WP ConfigService , and create the following new properties: friendly-locale-enabled=true friendly-locale-list=de,es Adjust the friendly-locale-list as desired. Restart the HCL Digital Experience server. Note: In a cluster, synchronize the nodes and then restart all the HCL DX JVMs.","title":"Enabling the feature to present locale specific friendly URLs"},{"location":"admin-system/enabling_presentation_of_locales_in_friendly_urls/#disabling-the-feature-to-present-locale-specific-friendly-urls","text":"Use the configuration task or manual steps to disable the process to manage presentation of language specific friendly URLs. Config Task Run the following configuration task on your primary HCL Digital Experience node, and restart the other JVMs: ConfigEngine.bat|sh disable-friendly-locale-urls -DWasPassword=wpsadmin -DPortalAdminPwd=wpsadmin Restart the HCL Digital Experience server. Note: In a cluster, synch the nodes and then restart all Digital Experience JVMs. Manual disablement In the WAS Admin Console under Resources > Resource Environment Providers > WP ConfigService , remove the following properties: friendly-locale-enabled friendly-locale-list Restart the Digital Experience server. Note: In a cluster synchronize the nodes and then restart all Digital Experience JVMs. Expected Operating Results By default, the multi-lingual locale is not encoded into the DX site page URL. But if a request arrives (for example: http://localhost:10039/wps/portal/de/Home ), the entire page, and all links should be rendered in German and the browser URL should retain \u201c/de\u201d in it and in friendly format (if friendly URLs are enabled). When generating a URL with the ChangeLanguageCommand , or using the Navigational state SPI, the language does have the friendly locale in the URL. This works for friendly URLs and non-friendly URLs. It also works in the context of the Web Content Management Multi-Lingual Solution feature. When rendering a page, the correct MLS web content library for the requested language is being used. In this case, note that locales defined to the list should be specified and addressed via an underscore, for instance pt_BR for Brazilian Portuguese.","title":"Disabling the feature to present locale specific friendly URLs"},{"location":"admin-system/enabling_presentation_of_locales_in_friendly_urls/#limitations","text":"When generating a Virtual Portal or DX page at the root level, a State Decoding check is not performed, to avoid conflicts with the defined URLs. The virtual Portal creation cannot not succeed; specifically, the page creation would proceed but the page cannot be accessed without the URL (i.e. having a locale of de and creating a root page of de , the URL to access the page would be /wps/portal/de/de , assuming a default context root). In the Web Content Management Authoring portlet , the Generate button and the according widgets are not translated if friendly locales or a locale in the state is used (known issue).","title":"Limitations"},{"location":"admin-system/i_wadm_c_bkup_restr_winlinux/","text":"Backup and restore Backup and recovery of data files and databases is an essential operation for any business system, particularly for data and applications that run in production environments. Create and follow a plan for backing up and recovering data on all tiers of your HCL Digital Experience deployment. IBM Installation Manager must also be included in backup and recovery planning. If you back up the HCL Portal file structure and then install a fix pack, your HCL Digital Experience and IBM Installation Manager become out of sync after you restore the HCL Portal file system. This condition is not recoverable. Backup and recovery include the HCL Portal file system and databases. Your backup and recovery plan needs to address each deployment tier: Complete system backup for catastrophic failures, back up of middleware such as HCL Portal and IBM\u00ae WebSphere\u00ae Application Server, and backup of individual applications that run on the middleware. Backup and recovery can be done on any or all of these tiers, depending on the needs of your portal deployment. When you create a backup and recovery plan, consider these general questions: What procedure will you use to back up data? How often will you back up data? What are the trade-offs between online and offline backups? How does the scope of your portal deployment affect the backup and recovery strategy? For example, the number of users and the volume and importance of the data that is stored and used in applications affect your decisions about backup and recovery practices. Will you use IBM Tivoli\u00ae Storage Manager or other utility to back up the file system? Attention: Backing up and recovering a HCL Digital Experience installation includes the WebSphere Application Server runtime environment and all applications that are deployed on HCL Portal. However, if applications use remote information sources outside of the HCL Portal databases and the LDAP directory, you need to consider these remote sources. Develop backup and recovery procedures for these remote sources as part of your comprehensive strategy. Video : HCL Digital Experience - How to backup HCL Portal","title":"Backup and restore"},{"location":"admin-system/i_wadm_c_bkup_restr_winlinux/#backup-and-restore","text":"Backup and recovery of data files and databases is an essential operation for any business system, particularly for data and applications that run in production environments. Create and follow a plan for backing up and recovering data on all tiers of your HCL Digital Experience deployment. IBM Installation Manager must also be included in backup and recovery planning. If you back up the HCL Portal file structure and then install a fix pack, your HCL Digital Experience and IBM Installation Manager become out of sync after you restore the HCL Portal file system. This condition is not recoverable. Backup and recovery include the HCL Portal file system and databases. Your backup and recovery plan needs to address each deployment tier: Complete system backup for catastrophic failures, back up of middleware such as HCL Portal and IBM\u00ae WebSphere\u00ae Application Server, and backup of individual applications that run on the middleware. Backup and recovery can be done on any or all of these tiers, depending on the needs of your portal deployment. When you create a backup and recovery plan, consider these general questions: What procedure will you use to back up data? How often will you back up data? What are the trade-offs between online and offline backups? How does the scope of your portal deployment affect the backup and recovery strategy? For example, the number of users and the volume and importance of the data that is stored and used in applications affect your decisions about backup and recovery practices. Will you use IBM Tivoli\u00ae Storage Manager or other utility to back up the file system? Attention: Backing up and recovering a HCL Digital Experience installation includes the WebSphere Application Server runtime environment and all applications that are deployed on HCL Portal. However, if applications use remote information sources outside of the HCL Portal databases and the LDAP directory, you need to consider these remote sources. Develop backup and recovery procedures for these remote sources as part of your comprehensive strategy. Video : HCL Digital Experience - How to backup HCL Portal","title":"Backup and restore"},{"location":"admin-system/mp_friendly_url/","text":"Using friendly URLs You can associate friendly URLs with portal pages and labels. You and your users can use these friendly URLs to access specific portal pages or labels by using a human readable path, which is easy to remember. For a friendly URL to work for a specific page, you must define a friendly URL name for every page or label in the path of the portal page hierarchy that leads to that page. You can do this in the page properties. Friendly URLs take the following general form: http://host\\_name:port\\_number/[PortalServer\\_root](../reference/wpsdirstr.md#wp_root)/portal/page\\_id/[!ut/p/encoded\\_portal\\_suffix] The page_id portion of the friendly URL is made up of the friendly URL names of all pages in the path of the page hierarchy. This path begins at the content root and ends with the page for which you want to give your users a friendly URL. Example: You have a portal page that is named Products in the user interface and has a friendly URL name products . Under this Products page you have another page, which is named Appliances and has a friendly URL name appliances . To access the Appliances page, users can type the following friendly URL into the browser address field: http://www.example.com:10039/wps/portal/products/appliances You can configure a friendly URL by using the portal toolbar or the Manage Pages administration portlet. To configure a friendly URL by using the Manage Pages portlet, use the following procedure. Note: When you define friendly URLs within a virtual portal, consider the name restrictions. For more information, read Human readable URL mappings for virtual portals . To open the Manage Pages portlet, click the Administration menu icon. Then, click Portal User Interface > Manage Pages . Locate the page for which you want to configure a friendly URL. Click the Edit Page Properties icon. In the field Friendly URL name , type the friendly name for the page. Click OK to save your changes. Repeat this procedure for every page or label in the path of the portal page hierarchy that leads to the target page. To make up the full HCL Portal URL, the portal appends a suffix to that friendly URL. This suffix represents the current state of the page and its components. Some scenarios require short and fully human readable URLs that omit the state information. For information about how to configure short stateless URLs see Using friendly URLs without state information .","title":"Using friendly URLs"},{"location":"admin-system/mp_friendly_url/#using-friendly-urls","text":"You can associate friendly URLs with portal pages and labels. You and your users can use these friendly URLs to access specific portal pages or labels by using a human readable path, which is easy to remember. For a friendly URL to work for a specific page, you must define a friendly URL name for every page or label in the path of the portal page hierarchy that leads to that page. You can do this in the page properties. Friendly URLs take the following general form: http://host\\_name:port\\_number/[PortalServer\\_root](../reference/wpsdirstr.md#wp_root)/portal/page\\_id/[!ut/p/encoded\\_portal\\_suffix] The page_id portion of the friendly URL is made up of the friendly URL names of all pages in the path of the page hierarchy. This path begins at the content root and ends with the page for which you want to give your users a friendly URL. Example: You have a portal page that is named Products in the user interface and has a friendly URL name products . Under this Products page you have another page, which is named Appliances and has a friendly URL name appliances . To access the Appliances page, users can type the following friendly URL into the browser address field: http://www.example.com:10039/wps/portal/products/appliances You can configure a friendly URL by using the portal toolbar or the Manage Pages administration portlet. To configure a friendly URL by using the Manage Pages portlet, use the following procedure. Note: When you define friendly URLs within a virtual portal, consider the name restrictions. For more information, read Human readable URL mappings for virtual portals . To open the Manage Pages portlet, click the Administration menu icon. Then, click Portal User Interface > Manage Pages . Locate the page for which you want to configure a friendly URL. Click the Edit Page Properties icon. In the field Friendly URL name , type the friendly name for the page. Click OK to save your changes. Repeat this procedure for every page or label in the path of the portal page hierarchy that leads to the target page. To make up the full HCL Portal URL, the portal appends a suffix to that friendly URL. This suffix represents the current state of the page and its components. Some scenarios require short and fully human readable URLs that omit the state information. For information about how to configure short stateless URLs see Using friendly URLs without state information .","title":"Using friendly URLs"},{"location":"admin-system/mp_manage_pages/","text":"Manage pages portlets Use Manage Pages to create, edit, activate, order, and delete pages and external web pages and labels. Use the Manage Pages portlet to complete the following tasks: Create, reorder, delete, and edit the properties of pages, labels, and URLs Reorder pages, labels, and URLs Assign access to pages, labels, and URLs Move pages to a new location in the portal hierarchy Available tasks depend on which item is selected. Each page can contain multiple pages. All pages on which you have the User or greater role are displayed in a navigation menu. You must expand pages to access nested pages. The options that you see are dependent upon your access level. Both administrators and users with appropriate access can create and delete pages. Users can delete only the pages that they create or the pages for which they have at least Manager access. User can create pages from the site toolbar.","title":"Manage pages portlets"},{"location":"admin-system/mp_manage_pages/#manage-pages-portlets","text":"Use Manage Pages to create, edit, activate, order, and delete pages and external web pages and labels. Use the Manage Pages portlet to complete the following tasks: Create, reorder, delete, and edit the properties of pages, labels, and URLs Reorder pages, labels, and URLs Assign access to pages, labels, and URLs Move pages to a new location in the portal hierarchy Available tasks depend on which item is selected. Each page can contain multiple pages. All pages on which you have the User or greater role are displayed in a navigation menu. You must expand pages to access nested pages. The options that you see are dependent upon your access level. Both administrators and users with appropriate access can create and delete pages. Users can delete only the pages that they create or the pages for which they have at least Manager access. User can create pages from the site toolbar.","title":"Manage pages portlets"},{"location":"admin-system/srccrwlindxsite/","text":"Configuring a crawler to search your local portal site | HCL Digital Experience Configure and run a search crawler on your local portal site to gather information and create a search collection that enables your users to search your portal site. Portal Search provides a default portal site search collection that enables your users to search your portal site. Before your users can search the portal site collection, configure the crawler. Set the crawler user ID. Set a dedicated crawler user ID for crawling the portal site content source: Define the crawler user ID by using the Manage Users and Groups portlet. Note: It is of benefit to define a dedicated crawler user ID. The pre-configured default portal site search uses the default administrator user ID wpsadmin with the default password of that user ID for the crawler. If you changed the default administrator user ID during your portal installation, the crawler uses that default user ID. Set the crawler user ID if any of the following items are true: You changed the password for the wpsadmin or other administrative user ID You changed the default administrator user ID to an ID other than wpsadmin You want to use a separate user ID Edit the portal site collection content source and enter the crawler user ID and its password: To open the Manage Search portlet, click the Administration menu icon. Then, click Search Administration > Manage Search . Click Search Collections. . Select Default Search Collection from the Search Collection list. In the Content Source Name list of the search collection, click the Portal Content Source search collection. Click the Edit icon next to the Portal Content Source collection name. Select the Security tab. Click the Edit icon next to the security realm that you want to modify. Type the crawler user ID and password into the appropriate fields. Click Update . Click Save to save your changes. When you save the content source settings, Manage Search appends the locale information of the collection to the content source URL, unless you already added locale information. For content sources of type Web Site , you can configure the crawler to follow external links from inside the portal. To do this task, modify the value in the field Levels of links to follow under the tab General Parameters . Set the level to a value higher than 1. In addition, you can configure filters for those external links from the Filters tab. The default filter suppresses all links that point back to portal pages. The default filter is displayed only after you save the configuration of the content source. Start the initial crawl. Start the initial crawl on the portal site content source: To open the Manage Search portlet, click the Administration menu icon. Then, click Search Administration > Manage Search .Then, click Search Collections . In the search collection list, click Default Search Collection . Click the Start Crawler icon next to the Portal content source name. Configure regular crawls. If you want regular crawls on the portal site content source, do either of the following tasks: Enable the default scheduler: Click the View Content Source Schedulers icon next to the collection name. In the Manage Schedulers page, click Disabled . This action changes the status of the scheduler to Enabled and displays a confirmation message. Set up your own scheduler: Click the Edit icon for the content source. Note: You can have only one schedule at a time. Therefore, to create your own schedule, you first must delete the existing schedule. Select the Schedulers tab. Configure your own scheduler as needed. For more information, see Manage Search portlet help . Click Save to save your changes. For more information about how to work with content sources, see Managing the content sources of a search collection and Manage Search portlet help . Notes: The local portal site is visible through a service that requires SSL. Therefore, if your portal is configured with a web server and you configure the content source root URL through the web server, you must configure the web server for SSL. By default, items in the result lists from portal site searches provide no summary information. If users use the Search and Browse portlet, they can refer to the information given under Description: for information about the search result list item. If you want to have the summary information that is added, configure the portlet with the summary parameter enabled as follows: PortalCollectionSummarizer=on. When you crawl a portal site, be aware that a Portal Search crawl can use extended memory and time, depending on your Portal Search environment and configuration. For details, see the topic about Hints and tips for Portal Search crawls. Do not change the default value of 1 for the option Levels of links to follow . Changing this value initiates web crawling logic and might result in unexpected results. For example, crawler might trigger unwanted in some of the administration portlets. The portal site search collection is created when an administrator goes to the Manage Search portlet. However, you must start the crawl for users to be able to search the portal site. Depending on your portal configuration and environment and possible customization, you might need to reset the portal site search collection that was created. For details about such scenarios and the necessary tasks to perform see the topic about Resetting the default search collection. If your users search the portal site search collection on a secured portal site, refer to the topic Enabling search on a secured portal site with the default configuration . The portal search crawler indexes static content pages and all pages that include portlets. When users search a portal site, they can access portal pages of two types: The Public or anonymous portal pages are pages that users can view without authentication by user ID and password. The crawler can crawl public pages on the portal site on which it is located, or on a remote portal. If you want anonymous users to be able to search the public pages of your portal site, see Enabling anonymous users to search public pages of your portal . The secured portal pages are pages that users can view only if they authenticate themselves to the portal by logging in to the portal with a user ID and password. For details, see configuring search on a secured portal site . Note: You can crawl, index, and search secured portal pages only on your local portal installation. For security reasons, you cannot crawl secured pages of one portal site from another portal site. If you customize search on your portal site, you might find useful information under the topics about configuring the default location for search collections and Resetting the default search collection. If your portal site is multilingual and your users use different languages to search your portal, see the topic about Crawling a multilingual portal site. Parent topic: Searching your local portal | HCL Digital Experience","title":"Configuring a crawler to search your local portal site \\| HCL Digital Experience"},{"location":"admin-system/srccrwlindxsite/#configuring-a-crawler-to-search-your-local-portal-site-hcl-digital-experience","text":"Configure and run a search crawler on your local portal site to gather information and create a search collection that enables your users to search your portal site. Portal Search provides a default portal site search collection that enables your users to search your portal site. Before your users can search the portal site collection, configure the crawler. Set the crawler user ID. Set a dedicated crawler user ID for crawling the portal site content source: Define the crawler user ID by using the Manage Users and Groups portlet. Note: It is of benefit to define a dedicated crawler user ID. The pre-configured default portal site search uses the default administrator user ID wpsadmin with the default password of that user ID for the crawler. If you changed the default administrator user ID during your portal installation, the crawler uses that default user ID. Set the crawler user ID if any of the following items are true: You changed the password for the wpsadmin or other administrative user ID You changed the default administrator user ID to an ID other than wpsadmin You want to use a separate user ID Edit the portal site collection content source and enter the crawler user ID and its password: To open the Manage Search portlet, click the Administration menu icon. Then, click Search Administration > Manage Search . Click Search Collections. . Select Default Search Collection from the Search Collection list. In the Content Source Name list of the search collection, click the Portal Content Source search collection. Click the Edit icon next to the Portal Content Source collection name. Select the Security tab. Click the Edit icon next to the security realm that you want to modify. Type the crawler user ID and password into the appropriate fields. Click Update . Click Save to save your changes. When you save the content source settings, Manage Search appends the locale information of the collection to the content source URL, unless you already added locale information. For content sources of type Web Site , you can configure the crawler to follow external links from inside the portal. To do this task, modify the value in the field Levels of links to follow under the tab General Parameters . Set the level to a value higher than 1. In addition, you can configure filters for those external links from the Filters tab. The default filter suppresses all links that point back to portal pages. The default filter is displayed only after you save the configuration of the content source. Start the initial crawl. Start the initial crawl on the portal site content source: To open the Manage Search portlet, click the Administration menu icon. Then, click Search Administration > Manage Search .Then, click Search Collections . In the search collection list, click Default Search Collection . Click the Start Crawler icon next to the Portal content source name. Configure regular crawls. If you want regular crawls on the portal site content source, do either of the following tasks: Enable the default scheduler: Click the View Content Source Schedulers icon next to the collection name. In the Manage Schedulers page, click Disabled . This action changes the status of the scheduler to Enabled and displays a confirmation message. Set up your own scheduler: Click the Edit icon for the content source. Note: You can have only one schedule at a time. Therefore, to create your own schedule, you first must delete the existing schedule. Select the Schedulers tab. Configure your own scheduler as needed. For more information, see Manage Search portlet help . Click Save to save your changes. For more information about how to work with content sources, see Managing the content sources of a search collection and Manage Search portlet help . Notes: The local portal site is visible through a service that requires SSL. Therefore, if your portal is configured with a web server and you configure the content source root URL through the web server, you must configure the web server for SSL. By default, items in the result lists from portal site searches provide no summary information. If users use the Search and Browse portlet, they can refer to the information given under Description: for information about the search result list item. If you want to have the summary information that is added, configure the portlet with the summary parameter enabled as follows: PortalCollectionSummarizer=on. When you crawl a portal site, be aware that a Portal Search crawl can use extended memory and time, depending on your Portal Search environment and configuration. For details, see the topic about Hints and tips for Portal Search crawls. Do not change the default value of 1 for the option Levels of links to follow . Changing this value initiates web crawling logic and might result in unexpected results. For example, crawler might trigger unwanted in some of the administration portlets. The portal site search collection is created when an administrator goes to the Manage Search portlet. However, you must start the crawl for users to be able to search the portal site. Depending on your portal configuration and environment and possible customization, you might need to reset the portal site search collection that was created. For details about such scenarios and the necessary tasks to perform see the topic about Resetting the default search collection. If your users search the portal site search collection on a secured portal site, refer to the topic Enabling search on a secured portal site with the default configuration . The portal search crawler indexes static content pages and all pages that include portlets. When users search a portal site, they can access portal pages of two types: The Public or anonymous portal pages are pages that users can view without authentication by user ID and password. The crawler can crawl public pages on the portal site on which it is located, or on a remote portal. If you want anonymous users to be able to search the public pages of your portal site, see Enabling anonymous users to search public pages of your portal . The secured portal pages are pages that users can view only if they authenticate themselves to the portal by logging in to the portal with a user ID and password. For details, see configuring search on a secured portal site . Note: You can crawl, index, and search secured portal pages only on your local portal installation. For security reasons, you cannot crawl secured pages of one portal site from another portal site. If you customize search on your portal site, you might find useful information under the topics about configuring the default location for search collections and Resetting the default search collection. If your portal site is multilingual and your users use different languages to search your portal, see the topic about Crawling a multilingual portal site. Parent topic: Searching your local portal | HCL Digital Experience","title":"Configuring a crawler to search your local portal site | HCL Digital Experience"},{"location":"admin-system/srcusgrmtsrchsrv/","text":"Remote search service You can configure the search portlets for local operation, or you can configure them for remote search service. Depending on your configuration, remote search service might have performance benefits by offloading and balancing system load. You can provide the remote search service as an EJB. Also, separate HCL Portal environments cannot use the same remote search server. Only multiple HCL Portal servers in the same cell can use the same remote search server. Note: SOAP support for remote search services was deprecated with HCL Digital Experience Version 8.0. When you want to index and search portal sites, search results are filtered according to the user security credentials. This filtering occurs independently of whether security is enabled on the remote search server or not. However, if security is not enabled, an unauthorized user can connect to the remote server and obtain unfiltered search results. If you want to prevent this issue, you must use EJB and enable security on the remote server. For information about enabling security on the remote search server, read Preparing security for remote search service in a single sign on domain .","title":"Remote search service"},{"location":"admin-system/srcusgrmtsrchsrv/#remote-search-service","text":"You can configure the search portlets for local operation, or you can configure them for remote search service. Depending on your configuration, remote search service might have performance benefits by offloading and balancing system load. You can provide the remote search service as an EJB. Also, separate HCL Portal environments cannot use the same remote search server. Only multiple HCL Portal servers in the same cell can use the same remote search server. Note: SOAP support for remote search services was deprecated with HCL Digital Experience Version 8.0. When you want to index and search portal sites, search results are filtered according to the user security credentials. This filtering occurs independently of whether security is enabled on the remote search server or not. However, if security is not enabled, an unauthorized user can connect to the remote server and obtain unfiltered search results. If you want to prevent this issue, you must use EJB and enable security on the remote server. For information about enabling security on the remote search server, read Preparing security for remote search service in a single sign on domain .","title":"Remote search service"},{"location":"admin-system/srtcfg_jcr_colls/","text":"Setting up a JCR search collection A JCR search collection is a special purpose search collection that is used by HCL Portal applications. It is not designed to be used alongside user-defined search collections. A JCR search collection requires a special setup. This setup includes the creation of a new content source for the search collection. Under normal circumstances, you do not need to re-create the JCR search collection. However, in rare cases you might need to re-create it, for example if you deleted the default JCR search collection. The portal installation has the JCR search collection that is created by default. It is named JCRCollection1. If this collection is removed or does not exist for other reasons, you can manually re-create the JCR search collection. The portal also re-creates the JCR search collection if you edit Web Content Manager content. Web Content Manager Authoring and its search capability are required to have the JCR search collection available, paired with the respective content source. If the JCR search collection gets deleted, a search is not possible by using the Authoring portlet. The JCR search collection can be used only by a search portlet that knows what to do with the search result in which the returned information is useless in a more generic context of search. This search collection is also flagged so that it does not participate in search by using the All Sources search scope. An administrator cannot manually add it. The JCR search collection is a special purpose search collection that the JCR requires to allow specialized application to do low-level searches in the repository. The JCR search collection is required to be available only once. Notes: For Web Content Manager: If you use Web Content Manager, the JCRCollection1 collection is created the first time that you create a web content item, if it does not exist. In this case, it might not be necessary to create the collection manually, although it is fine to create it manually first, if required. It is used by the search feature within the Web Content Manager authoring portlet. If you delete this search collection, you might not be able to search for items within the authoring portlet. For virtual portals: When you create a virtual portal, the creation of the JCR search collection depends on whether you create the virtual portal with or without content: If you create the virtual portal with content, the portal creates the JCR collection for the virtual portal by default. If you create only the virtual portal and add no content to it, the portal creates no JCR collection with it. It gets created only when content is added to the virtual portal. You can view the URL of the JCR search collection in the search administration portlet Manage Search of the virtual portal. The URL looks as follows: http://host_name:port_number/wps/seedlist/myserver?Action=GetDocuments&Format=ATOM&Locale=en_US&Range=100&Source=com.ibm.lotus.search.plugins.seedlist.retriever.jcr.JCRRetrieverFactory&Start=0&SeedlistId=wsid@ootb_crawlerwsid Where wsid is the actual workspace ID of the virtual portal. The workspace ID is the identifier of the workspace in which the content item is created, stored, and maintained. For example, if the workspace ID of the virtual portal is 10, then the URL looks as follows: http://host_name:port_number/wps/seedlist/myserver?Action=GetDocuments&Format=ATOM&Locale=en_US&Range=100&Source=com.ibm.lotus.search.plugins.seedlist.retriever.jcr.JCRRetrieverFactory&Start=0&SeedlistId=10@ootb_crawler10 If the JCR search collection was deleted, or if you added content to an originally empty virtual portal and the JCR search collection was not automatically created, complete the following steps: If you are using a virtual portal, go to the Security tab of the content source to verify that the workspace ID of the virtual portal is correct. If the JCR search collection was deleted, run the ConfigEngine task create-textsearch-collections to re-create the JCR search collection. If neither of the preceding options succeed in creating the JCR search collection, manually set up the JCR search collection. To set up a JCR search collection manually, proceed as follows: To open the Manage Search portlet, click the Administration menu icon. Then, click Search Administration > Manage Search . Click Search collections. To create a new search collection, click New collection . Specify the following values for the parameters: Search Service Select the required search service the JCR collection uses. If you have a stand-alone environment, select Default Portal Service . If you have a clustered environment, select Remote Search Service . Location of collection The directory location for the collection where you intend the search collection to be created. This parameter is to be specified as index directory location/collection name. For example, if the index directory is c:/JCR and the collection name is JCRCollection1, then the location of the collection must be specified as c:/JCR/JCRCollection1. Note: Verify that the jcr.textsearch.indexdirectory resource value is updated with c:/JCR. To view this resource and corresponding value, complete the following steps: Go to Resources > Resource Environment > Resource Environment Providers and select JCR ConfigService PortalContent . In the Additional Properties section of the Configuration window, select Custom properties . Find jcr.textsearch.indexdirectory and update the value if needed. Name of collection. The name of the collection must be JCRCollection1. Description of collection This parameter is optional. Specify JCR seedlist collection. Specify Collection language Specify the collection language. By default this parameter is set to English (United States). After you create the new collection, you can see the name of the collection you created in the list. Double-click the collection that you created. To create the content source for the new search collection, click New Content Source . Specify the collection parameters as follows: For the type of the content source, select Seedlist Provider . Provide the name for the new Content Source in the field Content Source Name . For example, you can specify JCRSource. Specify the value for the URL field Collect documents linked from this URL: as follows: http://server\\_name:port\\_number/wps/seedlist/myserver?Action=GetDocuments &Format=ATOM&Locale=en_US&Range=100 &Source=com.ibm.lotus.search.plugins.seedlist.retriever.jcr.JCRRetrieverFactory&Start=0 &SeedlistId=1@OOTB_CRAWLER1 In this URL the range parameter specifies 100 documents in one page of a session and the workspace ID of the base portal is 1. If you are working in a virtual portal, specify the content source URL for the virtual portal as follows: http://server\\_name:port\\_number/wps/seedlist/myserver/ **virtual\\_portal\\_context**?Action=GetDocuments &Format=ATOM&Locale=en_US&Range=100 &Source=com.ibm.lotus.search.plugins.seedlist.retriever.jcr.JCRRetrieverFactory&Start=0 &SeedlistId=1@OOTB_CRAWLERwsid Where wsid is the workspace ID of the virtual portal. To determine the workspace ID of the virtual portal, complete the following steps: Click the Administration menu icon. Then, click Portal Analysis > Enable Tracing . In the Append these trace settings: field, add com.ibm.icm.ts.*=finest to enable the JCR TextSearch trace. Save all Web Content Manager documents in the virtual portal. In trace.log, you can find trace information similar to the following: [6/5/13 18:51:04:337 IDT] 000001c3 BaseDBImpl 3 insertSeedlistEvents: Inserted event: Event: action='Update_Node(3)', timestamp='2013-06-05 18:51:04.337', document id=,<workspace: 3, itemid:AB001001N13F05B8320005B295>', parentID:<workspace: 3, itemid: >', wsid: 3 Go to the Security tab. Enter the user ID and password of the HCL Portal administrator. Click Create to create the new content source. If the Content Source was created successfully, the following message is displayed on the page: EJPJB0025I: Content source source\\_name in collection collection\\_name is OK. You can start the crawler manually or schedule it to run at regular intervals. To start the crawler manually, go to the content source and click Start Crawler for the content source. To schedule the seedlist crawler, click Edit Content Source , and click the Scheduler tab. Specify the date and time and the frequency for the crawl. The crawler is triggered automatically at the time that you scheduled.","title":"Setting up a JCR search collection"},{"location":"admin-system/srtcfg_jcr_colls/#setting-up-a-jcr-search-collection","text":"A JCR search collection is a special purpose search collection that is used by HCL Portal applications. It is not designed to be used alongside user-defined search collections. A JCR search collection requires a special setup. This setup includes the creation of a new content source for the search collection. Under normal circumstances, you do not need to re-create the JCR search collection. However, in rare cases you might need to re-create it, for example if you deleted the default JCR search collection. The portal installation has the JCR search collection that is created by default. It is named JCRCollection1. If this collection is removed or does not exist for other reasons, you can manually re-create the JCR search collection. The portal also re-creates the JCR search collection if you edit Web Content Manager content. Web Content Manager Authoring and its search capability are required to have the JCR search collection available, paired with the respective content source. If the JCR search collection gets deleted, a search is not possible by using the Authoring portlet. The JCR search collection can be used only by a search portlet that knows what to do with the search result in which the returned information is useless in a more generic context of search. This search collection is also flagged so that it does not participate in search by using the All Sources search scope. An administrator cannot manually add it. The JCR search collection is a special purpose search collection that the JCR requires to allow specialized application to do low-level searches in the repository. The JCR search collection is required to be available only once. Notes: For Web Content Manager: If you use Web Content Manager, the JCRCollection1 collection is created the first time that you create a web content item, if it does not exist. In this case, it might not be necessary to create the collection manually, although it is fine to create it manually first, if required. It is used by the search feature within the Web Content Manager authoring portlet. If you delete this search collection, you might not be able to search for items within the authoring portlet. For virtual portals: When you create a virtual portal, the creation of the JCR search collection depends on whether you create the virtual portal with or without content: If you create the virtual portal with content, the portal creates the JCR collection for the virtual portal by default. If you create only the virtual portal and add no content to it, the portal creates no JCR collection with it. It gets created only when content is added to the virtual portal. You can view the URL of the JCR search collection in the search administration portlet Manage Search of the virtual portal. The URL looks as follows: http://host_name:port_number/wps/seedlist/myserver?Action=GetDocuments&Format=ATOM&Locale=en_US&Range=100&Source=com.ibm.lotus.search.plugins.seedlist.retriever.jcr.JCRRetrieverFactory&Start=0&SeedlistId=wsid@ootb_crawlerwsid Where wsid is the actual workspace ID of the virtual portal. The workspace ID is the identifier of the workspace in which the content item is created, stored, and maintained. For example, if the workspace ID of the virtual portal is 10, then the URL looks as follows: http://host_name:port_number/wps/seedlist/myserver?Action=GetDocuments&Format=ATOM&Locale=en_US&Range=100&Source=com.ibm.lotus.search.plugins.seedlist.retriever.jcr.JCRRetrieverFactory&Start=0&SeedlistId=10@ootb_crawler10 If the JCR search collection was deleted, or if you added content to an originally empty virtual portal and the JCR search collection was not automatically created, complete the following steps: If you are using a virtual portal, go to the Security tab of the content source to verify that the workspace ID of the virtual portal is correct. If the JCR search collection was deleted, run the ConfigEngine task create-textsearch-collections to re-create the JCR search collection. If neither of the preceding options succeed in creating the JCR search collection, manually set up the JCR search collection. To set up a JCR search collection manually, proceed as follows: To open the Manage Search portlet, click the Administration menu icon. Then, click Search Administration > Manage Search . Click Search collections. To create a new search collection, click New collection . Specify the following values for the parameters: Search Service Select the required search service the JCR collection uses. If you have a stand-alone environment, select Default Portal Service . If you have a clustered environment, select Remote Search Service . Location of collection The directory location for the collection where you intend the search collection to be created. This parameter is to be specified as index directory location/collection name. For example, if the index directory is c:/JCR and the collection name is JCRCollection1, then the location of the collection must be specified as c:/JCR/JCRCollection1. Note: Verify that the jcr.textsearch.indexdirectory resource value is updated with c:/JCR. To view this resource and corresponding value, complete the following steps: Go to Resources > Resource Environment > Resource Environment Providers and select JCR ConfigService PortalContent . In the Additional Properties section of the Configuration window, select Custom properties . Find jcr.textsearch.indexdirectory and update the value if needed. Name of collection. The name of the collection must be JCRCollection1. Description of collection This parameter is optional. Specify JCR seedlist collection. Specify Collection language Specify the collection language. By default this parameter is set to English (United States). After you create the new collection, you can see the name of the collection you created in the list. Double-click the collection that you created. To create the content source for the new search collection, click New Content Source . Specify the collection parameters as follows: For the type of the content source, select Seedlist Provider . Provide the name for the new Content Source in the field Content Source Name . For example, you can specify JCRSource. Specify the value for the URL field Collect documents linked from this URL: as follows: http://server\\_name:port\\_number/wps/seedlist/myserver?Action=GetDocuments &Format=ATOM&Locale=en_US&Range=100 &Source=com.ibm.lotus.search.plugins.seedlist.retriever.jcr.JCRRetrieverFactory&Start=0 &SeedlistId=1@OOTB_CRAWLER1 In this URL the range parameter specifies 100 documents in one page of a session and the workspace ID of the base portal is 1. If you are working in a virtual portal, specify the content source URL for the virtual portal as follows: http://server\\_name:port\\_number/wps/seedlist/myserver/ **virtual\\_portal\\_context**?Action=GetDocuments &Format=ATOM&Locale=en_US&Range=100 &Source=com.ibm.lotus.search.plugins.seedlist.retriever.jcr.JCRRetrieverFactory&Start=0 &SeedlistId=1@OOTB_CRAWLERwsid Where wsid is the workspace ID of the virtual portal. To determine the workspace ID of the virtual portal, complete the following steps: Click the Administration menu icon. Then, click Portal Analysis > Enable Tracing . In the Append these trace settings: field, add com.ibm.icm.ts.*=finest to enable the JCR TextSearch trace. Save all Web Content Manager documents in the virtual portal. In trace.log, you can find trace information similar to the following: [6/5/13 18:51:04:337 IDT] 000001c3 BaseDBImpl 3 insertSeedlistEvents: Inserted event: Event: action='Update_Node(3)', timestamp='2013-06-05 18:51:04.337', document id=,<workspace: 3, itemid:AB001001N13F05B8320005B295>', parentID:<workspace: 3, itemid: >', wsid: 3 Go to the Security tab. Enter the user ID and password of the HCL Portal administrator. Click Create to create the new content source. If the Content Source was created successfully, the following message is displayed on the page: EJPJB0025I: Content source source\\_name in collection collection\\_name is OK. You can start the crawler manually or schedule it to run at regular intervals. To start the crawler manually, go to the content source and click Start Crawler for the content source. To schedule the seedlist crawler, click Edit Content Source , and click the Scheduler tab. Specify the date and time and the frequency for the crawl. The crawler is triggered automatically at the time that you scheduled.","title":"Setting up a JCR search collection"},{"location":"admin-system/srtprrmtsrchsrv/","text":"Preparing for remote search service Get an overview of how you prepare your portal system for remote search service. You can provide remote search service by either using EJB or SOAP. For SOAP: If you use SOAP, the following security and performance considerations apply: Application security: If you use SOAP over a secure server, the SOAP service itself is not secure. Java 2 security: If you use SOAP, you must disable Java 2 security. Note: SOAP support for remote search services was deprecated with HCL Digital Experience Version 8.0. EJB is still supported. For EJB: If you use EJB, complete the following security administration tasks: Prepare security for remote search service in a single sign-on domain (SSO). Add the signer certification of the remote search service server into the portal search server. To do this addition, proceed by the following steps: Access the WebSphere\u00ae Integrated Solutions Console of the portal search server. Click Security > SSL certificate and key management > Key stores and certificates > NodeDefaultTrustStore > Signer certificates > Retrieve from port . Cluster note: In a clustered environment, the path is Security > SSL certificate and key management > Key stores and certificates > CellDefaultTrustStore > Signer certificates > Retrieve from port . Enter the remote search service server host, its SOAP port, and an alias. Click OK . Copy the files WebScannerSoap.ear, WebScannerEjbEar.ear, and PseLibs.zip to the directory [AppServer\\_root](../reference/wpsdirstr.md#was_root)/installableApps on the computer on which you want to install the remote search service. You find these files in the following locations of your portal installation: The files WebScannerSoap.ear and WebScannerEjbEar.ear are in the directory [PortalServer\\_root](../reference/wpsdirstr.md#wp_root)/search/prereq.webscanner/installableApps The file PseLibs.zip is located under directory [PortalServer\\_root](../reference/wpsdirstr.md#wp_root)/search/wp.search.libs/installableApps Depending on the requirements of your environment, install one of the two applications WebScannerEJbEar.ear or WebScannerSoap.ear on a remote server. For example, this can be server1. Proceed by the following steps: Access the WebSphere Integrated Solutions Console. Click Applications > WebSphere Enterprise Application . Click Install . Browse and select WebScannerEjbEar.ear or WebScannerSoap.ear , depending on whether you are using EJB or web service through SOAP. Click Next . On the following panels, accept the default settings. A message confirms that the application PSEStandalone (for EJB) or the application WebScannerEar (for SOAP) was installed successfully. Click Save to Master Configuration . Click Save . This step is required if you use Document Conversion Services. Install remote document conversion services on the remote server. You do not need to delegate all conversion tasks from the HCL Digital Experience to the remote server. You must only install the remote conversion services. For more information, refer to the topic about Enabling remote document conversion. Start the WebSphere Integrated Solutions Console and select Environment > Shared Libraries . Create a new shared library that is named PSE with a class path as follows: $(APP_INSTALL_ROOT)/cell\\_name/dcs_war.ear/dcs.war/WEB-INF/lib/convertors.jar $(APP_INSTALL_ROOT)/cell\\_name/dcs_war.ear/dcs.war/WEB-INF/lib/Export.jar where cell_name is the IBM WebSphere Application Server cell name where DCS is installed. Click Apply > Save > Save to save your changes. Extract the Portal Search libraries to the remote server and add them to the class path on the remote server. To do this step, proceed as follows: Create a directory with the name extract under the directory installableApps . Locate the file PseLibs.zip in the directory installableApps and extract its content into the directory extract that you created in the previous step. Open the WebSphere Integrated Solutions Console. Click Environment > Shared Libraries . Create or modify the new shared library names PSE. When you create the library, check the option Use an isolated class loader for this shared library . Add the libraries extract/lib to the class path by adding a line to the class path and giving the full path: [AppServer\\_root](../reference/wpsdirstr.md#was_root)/installableApps/extract/lib . [AppServer\\_root](../reference/wpsdirstr.md#was_root) is the profile directory of your WebSphere Application Server installation. For example, this path can be: /usr/WebSphere/AppServer/profiles/profile\\_name For z/OS\u00ae this path can be: /WebSphere/VR1M0/AppServer/profiles/default Click Apply > Save to save your changes to the configuration. Add a reference from the application WebScannerEJbEar.ear to the shared library. To add a reference, proceed as follows: Access the WebSphere Integrated Solutions Console of the remote server. Navigate to Websphere enterprise applications . For EJB: Click the application PSEStandalone > Shared library references . For SOAP: Click the application WebScannerEar > Shared library references . For EJB: On the window that opens up click the check box for PSEStandalone , then click Reference shared library . For SOAP: On the window that opens up click the check box for WebScannerEar , then click Reference shared library . From the Available list, select PSE . Click the appropriate arrow so that PSE displays in the Selected list. Click OK > OK . Save the configuration. For EJB: Restart the application PSEStandalone. For SOAP: Restart the application WebScannerEar. On the WebSphere Integrated Solutions Console, determine the required values for configuring the portlet parameters, depending on whether you are using EJB or web service through SOAP: For EJB: Determine the value for the port under Servers > Server Types > WebSphere application servers > YourAppServer1 > Communications > Ports > BOOTSTRAP_ADDRESS . For SOAP: Determine the value for the port number for the SOAP URL parameter. The appropriate port number for the SOAP URL parameter is the port on which the application server runs, in other words, the HTTP transport on which the remote server is configured to run. Determine the correct port number from Application servers > server1 > Ports > WC_defaulthost . The WC_defaulthost value is 10014; therefore, if you did not change the default, you can use this value. Make sure that the port number that is set in the following file matches this port: [AppServer\\_root](../reference/wpsdirstr.md#was_root)/installedApps/cell/WebScannerEar.ear/WebScannerSoap.war/ wsdl/com/ibm/hrl/portlets/WsPSE/WebScannerLiteServerSOAPService.wsdl Replace the variables as follows: [AppServer\\_root](../reference/wpsdirstr.md#was_root) is the profile directory of your WebSphere Application Server installation. For example, this directory can be: /usr/WebSphere/AppServer/profiles/profile\\_name For z/OS this directory can be: /WebSphere/VR1M0/AppServer/profiles/default cell is the cell name of your remote search computer. WebScannerEar.ear is the name that you gave to the Enterprise Application when you installed the WebScannerSoap.war file. Edit the file and look for the port that is given in the value for the SOAP address location. Example: <soap: address location=\"http://localhost:**your\\_port\\_no**/WebScannerSOAP/servlet/rpcrouter\"/> . In the example the port is your\\_port\\_no . The default value for the WC_defaulthost is 10014. In the WebSphere Integrated Solutions Console, go to Resources > Asynchronous beans > Work managers , create a new Work manager who is named PSEWorkManager with the following attributes: WebSphere Application Server V9: If you upgraded to IBM\u00ae WebSphere Application Server Version 9.0, the WebSphere Integrated Solutions Console path is Resources > Concurency > Work managers . ``` Name: PSEWorkManager JNDI Name: wps/searchIndexWM Minimum Number of Threads: 20 Maximum number of Threads: 60 Growable = True (Ensure that the Growable check box is selected.) Service Names: Application Profiling Service, WorkArea, Security, Internationalization ``` Click Apply > Save to save your changes to the configuration. Start the application: Open the WebSphere Integrated Solutions Console. Click Applications > Application Types > WebSphere enterprise applications . Scroll to PSEStandalone or WebScannerEar . You can use the filter feature to search for these names. Click the check box and click Start . A message confirms that the application started successfully. This step is required only if you work with EJB on a secure server: Setting the search user ID . This step is required only if you disabled security or set the search user ID by one of the optional previous steps: Restart the WebSphere Application Server. In the portal server enable CSIv2 identity assertion. To complete this step, proceed as follows: Cluster note: In a clustered environment, complete these steps on the Deployment Manager WebSphere Integrated Solutions Console. Enable CSIv2 Identity Assertion on the outbound connection: Access the WebSphere Integrated Solutions Console of the portal server. Navigate to Security > Global Security > RMI/IIOP security > CSIv2 outbound communications . Check Use identity assertion . When you are done, restart the portal server. Enable CSIv2 Identity Assertion on the inbound connection: Access the WebSphere Integrated Solutions Console of the remote server. Navigate to Security > Global Security > RMI/IIOP security > CSIv2 inbound communications . Check Use identity assertion . Under Trusted identities , enter either an asterisk (*) or the identity of the portal server. When you are done, restart the remote server. For more detailed information, refer to the WebSphere Application Server information center. On the portal server, configure HTTP s for the Seedlist servlet. The Seedlist servlet requires HTTP s by default. Therefore, when you access the servlet through HTTP, then WebSphere Application Server redirects you to HTTPs. Proceed by the following steps: Open the following file with an editor: [PortalServer\\_root](../reference/wpsdirstr.md#portal_server_root_prod)/search/wp.search.servlets/seedlist/servletEAR/installableApps/wp.search.seedlist.ear/wp.search.servlets.seedlist.war/WEB-INF/web.xml Cluster note: In a clustered environment, complete this step on the primary node and all secondary nodes. Update the following code: Cluster note: In a clustered environment, complete this step on the primary node and all secondary nodes. <user-data-constraint> <transport-guarantee>CONFIDENTIAL</transport-guarantee> </user-data-constraint> Replace it by the following code: ``` NONE ``` Save the file. Cluster note: In a clustered environment, complete this step on the primary node and all secondary nodes. Run the following portal ConfigEngine script: Cluster note: In a clustered environment, complete this step on the primary node only. ./ConfigEngine.sh action-update-ear-wp.search.servlets/seedlist/servletEAR Restart all servers in your configuration for your updates to take effect. Back on your portal, configure Portal Search for remote search service. Cluster note: In a clustered environment, complete this step on the primary node only.","title":"Preparing for remote search service"},{"location":"admin-system/srtprrmtsrchsrv/#preparing-for-remote-search-service","text":"Get an overview of how you prepare your portal system for remote search service. You can provide remote search service by either using EJB or SOAP. For SOAP: If you use SOAP, the following security and performance considerations apply: Application security: If you use SOAP over a secure server, the SOAP service itself is not secure. Java 2 security: If you use SOAP, you must disable Java 2 security. Note: SOAP support for remote search services was deprecated with HCL Digital Experience Version 8.0. EJB is still supported. For EJB: If you use EJB, complete the following security administration tasks: Prepare security for remote search service in a single sign-on domain (SSO). Add the signer certification of the remote search service server into the portal search server. To do this addition, proceed by the following steps: Access the WebSphere\u00ae Integrated Solutions Console of the portal search server. Click Security > SSL certificate and key management > Key stores and certificates > NodeDefaultTrustStore > Signer certificates > Retrieve from port . Cluster note: In a clustered environment, the path is Security > SSL certificate and key management > Key stores and certificates > CellDefaultTrustStore > Signer certificates > Retrieve from port . Enter the remote search service server host, its SOAP port, and an alias. Click OK . Copy the files WebScannerSoap.ear, WebScannerEjbEar.ear, and PseLibs.zip to the directory [AppServer\\_root](../reference/wpsdirstr.md#was_root)/installableApps on the computer on which you want to install the remote search service. You find these files in the following locations of your portal installation: The files WebScannerSoap.ear and WebScannerEjbEar.ear are in the directory [PortalServer\\_root](../reference/wpsdirstr.md#wp_root)/search/prereq.webscanner/installableApps The file PseLibs.zip is located under directory [PortalServer\\_root](../reference/wpsdirstr.md#wp_root)/search/wp.search.libs/installableApps Depending on the requirements of your environment, install one of the two applications WebScannerEJbEar.ear or WebScannerSoap.ear on a remote server. For example, this can be server1. Proceed by the following steps: Access the WebSphere Integrated Solutions Console. Click Applications > WebSphere Enterprise Application . Click Install . Browse and select WebScannerEjbEar.ear or WebScannerSoap.ear , depending on whether you are using EJB or web service through SOAP. Click Next . On the following panels, accept the default settings. A message confirms that the application PSEStandalone (for EJB) or the application WebScannerEar (for SOAP) was installed successfully. Click Save to Master Configuration . Click Save . This step is required if you use Document Conversion Services. Install remote document conversion services on the remote server. You do not need to delegate all conversion tasks from the HCL Digital Experience to the remote server. You must only install the remote conversion services. For more information, refer to the topic about Enabling remote document conversion. Start the WebSphere Integrated Solutions Console and select Environment > Shared Libraries . Create a new shared library that is named PSE with a class path as follows: $(APP_INSTALL_ROOT)/cell\\_name/dcs_war.ear/dcs.war/WEB-INF/lib/convertors.jar $(APP_INSTALL_ROOT)/cell\\_name/dcs_war.ear/dcs.war/WEB-INF/lib/Export.jar where cell_name is the IBM WebSphere Application Server cell name where DCS is installed. Click Apply > Save > Save to save your changes. Extract the Portal Search libraries to the remote server and add them to the class path on the remote server. To do this step, proceed as follows: Create a directory with the name extract under the directory installableApps . Locate the file PseLibs.zip in the directory installableApps and extract its content into the directory extract that you created in the previous step. Open the WebSphere Integrated Solutions Console. Click Environment > Shared Libraries . Create or modify the new shared library names PSE. When you create the library, check the option Use an isolated class loader for this shared library . Add the libraries extract/lib to the class path by adding a line to the class path and giving the full path: [AppServer\\_root](../reference/wpsdirstr.md#was_root)/installableApps/extract/lib . [AppServer\\_root](../reference/wpsdirstr.md#was_root) is the profile directory of your WebSphere Application Server installation. For example, this path can be: /usr/WebSphere/AppServer/profiles/profile\\_name For z/OS\u00ae this path can be: /WebSphere/VR1M0/AppServer/profiles/default Click Apply > Save to save your changes to the configuration. Add a reference from the application WebScannerEJbEar.ear to the shared library. To add a reference, proceed as follows: Access the WebSphere Integrated Solutions Console of the remote server. Navigate to Websphere enterprise applications . For EJB: Click the application PSEStandalone > Shared library references . For SOAP: Click the application WebScannerEar > Shared library references . For EJB: On the window that opens up click the check box for PSEStandalone , then click Reference shared library . For SOAP: On the window that opens up click the check box for WebScannerEar , then click Reference shared library . From the Available list, select PSE . Click the appropriate arrow so that PSE displays in the Selected list. Click OK > OK . Save the configuration. For EJB: Restart the application PSEStandalone. For SOAP: Restart the application WebScannerEar. On the WebSphere Integrated Solutions Console, determine the required values for configuring the portlet parameters, depending on whether you are using EJB or web service through SOAP: For EJB: Determine the value for the port under Servers > Server Types > WebSphere application servers > YourAppServer1 > Communications > Ports > BOOTSTRAP_ADDRESS . For SOAP: Determine the value for the port number for the SOAP URL parameter. The appropriate port number for the SOAP URL parameter is the port on which the application server runs, in other words, the HTTP transport on which the remote server is configured to run. Determine the correct port number from Application servers > server1 > Ports > WC_defaulthost . The WC_defaulthost value is 10014; therefore, if you did not change the default, you can use this value. Make sure that the port number that is set in the following file matches this port: [AppServer\\_root](../reference/wpsdirstr.md#was_root)/installedApps/cell/WebScannerEar.ear/WebScannerSoap.war/ wsdl/com/ibm/hrl/portlets/WsPSE/WebScannerLiteServerSOAPService.wsdl Replace the variables as follows: [AppServer\\_root](../reference/wpsdirstr.md#was_root) is the profile directory of your WebSphere Application Server installation. For example, this directory can be: /usr/WebSphere/AppServer/profiles/profile\\_name For z/OS this directory can be: /WebSphere/VR1M0/AppServer/profiles/default cell is the cell name of your remote search computer. WebScannerEar.ear is the name that you gave to the Enterprise Application when you installed the WebScannerSoap.war file. Edit the file and look for the port that is given in the value for the SOAP address location. Example: <soap: address location=\"http://localhost:**your\\_port\\_no**/WebScannerSOAP/servlet/rpcrouter\"/> . In the example the port is your\\_port\\_no . The default value for the WC_defaulthost is 10014. In the WebSphere Integrated Solutions Console, go to Resources > Asynchronous beans > Work managers , create a new Work manager who is named PSEWorkManager with the following attributes: WebSphere Application Server V9: If you upgraded to IBM\u00ae WebSphere Application Server Version 9.0, the WebSphere Integrated Solutions Console path is Resources > Concurency > Work managers . ``` Name: PSEWorkManager JNDI Name: wps/searchIndexWM Minimum Number of Threads: 20 Maximum number of Threads: 60 Growable = True (Ensure that the Growable check box is selected.) Service Names: Application Profiling Service, WorkArea, Security, Internationalization ``` Click Apply > Save to save your changes to the configuration. Start the application: Open the WebSphere Integrated Solutions Console. Click Applications > Application Types > WebSphere enterprise applications . Scroll to PSEStandalone or WebScannerEar . You can use the filter feature to search for these names. Click the check box and click Start . A message confirms that the application started successfully. This step is required only if you work with EJB on a secure server: Setting the search user ID . This step is required only if you disabled security or set the search user ID by one of the optional previous steps: Restart the WebSphere Application Server. In the portal server enable CSIv2 identity assertion. To complete this step, proceed as follows: Cluster note: In a clustered environment, complete these steps on the Deployment Manager WebSphere Integrated Solutions Console. Enable CSIv2 Identity Assertion on the outbound connection: Access the WebSphere Integrated Solutions Console of the portal server. Navigate to Security > Global Security > RMI/IIOP security > CSIv2 outbound communications . Check Use identity assertion . When you are done, restart the portal server. Enable CSIv2 Identity Assertion on the inbound connection: Access the WebSphere Integrated Solutions Console of the remote server. Navigate to Security > Global Security > RMI/IIOP security > CSIv2 inbound communications . Check Use identity assertion . Under Trusted identities , enter either an asterisk (*) or the identity of the portal server. When you are done, restart the remote server. For more detailed information, refer to the WebSphere Application Server information center. On the portal server, configure HTTP s for the Seedlist servlet. The Seedlist servlet requires HTTP s by default. Therefore, when you access the servlet through HTTP, then WebSphere Application Server redirects you to HTTPs. Proceed by the following steps: Open the following file with an editor: [PortalServer\\_root](../reference/wpsdirstr.md#portal_server_root_prod)/search/wp.search.servlets/seedlist/servletEAR/installableApps/wp.search.seedlist.ear/wp.search.servlets.seedlist.war/WEB-INF/web.xml Cluster note: In a clustered environment, complete this step on the primary node and all secondary nodes. Update the following code: Cluster note: In a clustered environment, complete this step on the primary node and all secondary nodes. <user-data-constraint> <transport-guarantee>CONFIDENTIAL</transport-guarantee> </user-data-constraint> Replace it by the following code: ``` NONE ``` Save the file. Cluster note: In a clustered environment, complete this step on the primary node and all secondary nodes. Run the following portal ConfigEngine script: Cluster note: In a clustered environment, complete this step on the primary node only. ./ConfigEngine.sh action-update-ear-wp.search.servlets/seedlist/servletEAR Restart all servers in your configuration for your updates to take effect. Back on your portal, configure Portal Search for remote search service. Cluster note: In a clustered environment, complete this step on the primary node only.","title":"Preparing for remote search service"},{"location":"admin-system/srtsttusrid/","text":"Setting the search user ID If you work with EJB on a secure server, you need to set the search user ID on the remote search server. Ensure that your SearchAdminUser alias matches your HCL Digital Experience administrator information. Complete the following steps to view or change the information that is stored in your SearchAdminUser alias: Log in to the WebSphere\u00ae Integrated Solutions Console. Click Security > Global security . In the Authentication section, click Java Authentication and Authorization Service > J2C authentication data . Edit the SearchAdminUser alias. Update the user ID and/or password to match your HCL Digital Experience administrator information. If you are working in a clustered environment, you must synchronize the nodes of your cluster. To synchronize the nodes of your cluster, complete the following steps: Log on to the Deployment Manager. Go to System Administration > Nodes . Select the nodes to synchronize from the list. Click Full Resynchronize . Restart the portal servers. In a remote search environment, the remote search server must be configured for the same LDAP as HCL Digital Experience. Open the WebSphere Integrated Solutions Console. Click Applications > Application Types > WebSphere enterprise applications . Locate the application PSEStandalone . Enter this application and click Security roles to user/group mapping . Select the role SearchUser and click Map users . On the portal that accesses the EJB, search for the user ID that is set as the WebSphere Application Server Admin User. For example, you can find this ID by using the following procedure: Open the WebSphere Integrated Solutions Console. Click Global Security > Federated LDAP registry . Determine the primary administrative user ID. To continue installing remote search service manually, proceed by the following steps: Return to the WebSphere Integrated Solutions Console of the machine where the EJB is installed. Type the name that you found as the user ID in a previous step as the search string and click Search . As a result, the user ID and its configuration parameters are displayed in the Available box. Add this user ID to the Selected box by clicking the double-angled bracket > > button. Click OK to save your updates. Restart the WebSphere Application Server on which the PSEStandalone is installed.","title":"Setting the search user ID"},{"location":"admin-system/srtsttusrid/#setting-the-search-user-id","text":"If you work with EJB on a secure server, you need to set the search user ID on the remote search server. Ensure that your SearchAdminUser alias matches your HCL Digital Experience administrator information. Complete the following steps to view or change the information that is stored in your SearchAdminUser alias: Log in to the WebSphere\u00ae Integrated Solutions Console. Click Security > Global security . In the Authentication section, click Java Authentication and Authorization Service > J2C authentication data . Edit the SearchAdminUser alias. Update the user ID and/or password to match your HCL Digital Experience administrator information. If you are working in a clustered environment, you must synchronize the nodes of your cluster. To synchronize the nodes of your cluster, complete the following steps: Log on to the Deployment Manager. Go to System Administration > Nodes . Select the nodes to synchronize from the list. Click Full Resynchronize . Restart the portal servers. In a remote search environment, the remote search server must be configured for the same LDAP as HCL Digital Experience. Open the WebSphere Integrated Solutions Console. Click Applications > Application Types > WebSphere enterprise applications . Locate the application PSEStandalone . Enter this application and click Security roles to user/group mapping . Select the role SearchUser and click Map users . On the portal that accesses the EJB, search for the user ID that is set as the WebSphere Application Server Admin User. For example, you can find this ID by using the following procedure: Open the WebSphere Integrated Solutions Console. Click Global Security > Federated LDAP registry . Determine the primary administrative user ID. To continue installing remote search service manually, proceed by the following steps: Return to the WebSphere Integrated Solutions Console of the machine where the EJB is installed. Type the name that you found as the user ID in a previous step as the search string and click Search . As a result, the user ID and its configuration parameters are displayed in the Available box. Add this user ID to the Selected box by clicking the double-angled bracket > > button. Click OK to save your updates. Restart the WebSphere Application Server on which the PSEStandalone is installed.","title":"Setting the search user ID"},{"location":"admin-system/srvcfgref_config/","text":"Configuration Service The portal Configuration Service is responsible for collecting the most essential configuration data of the HCL Digital Experience engine. In the WebSphere\u00ae Integrated Solutions Console, the portal Configuration Service is listed as WP ConfigService . Notes: Many of the properties that are listed here are set by the installation procedure. Therefore, plan ahead and apply special care when you modify these properties. HCL Portal and the WebSphere Integrated Solutions Console also provide a CP Configuration Service; this service has properties for tagging and rating only. The Configuration Service also includes the configuration properties for WSRP services. They are listed and described in the context of the respective WSRP topics for which they are relevant. If a property does not exist, create the property in the WebSphere Integrated Solutions Console Resource Environment Provider. was.home = (${WAS_INSTALL_ROOT}) This path is the absolute path to the installation directory of WebSphere\u00ae Application Server. wps.home = (${WPS_INSTALL_ROOT}) This path is the home (or install) directory of HCL Portal. command.login = (LoginUserAuth) The name of the command that serves as the login command. command.logout = (LogoutUserAuth) The name of the command that serves as the logout command. command.sessionvalidator = (SessionValidatorAuth) The name of the command that serves as the session validator command. redirect.login = (true) Turns on user-defined redirection after successful login. If a URL is specified under redirect.login.url listed later, that URL is used as the URL for the redirection. If no URL is specified, the portal determines the default page for the current user and sends a redirect to that page in the protected portal area. redirect.login.ssl = (false) This property determines whether, after login, the portal continues to use the same communication protocol as before the login or enforces HTTPS instead. The default value is false . If this property is set to false , the portal uses the protocol that was initially requested before login. If you set this property to true , it turns on SSL in the system-defined redirection after successful login. If no URL is specified for the property redirect.login.url listed in the following, the redirect occurs to the page that was initially requested before login. redirect.login.url [optional] = <none> Specifies the URL for redirection after successful login. If no URL is specified, the portal determines the default page for the current user and sends a redirect to that page in the protected portal area. This setting does not affect implicit logins, such as single sign-on with LTPA token or through an external security manager. redirect.login.authenticated.url [optional] = <none> Specifies the URL for redirection after the first access to a protected page when the user is authenticated by an external security manager (TAI) and a portal session does not exist yet. If no URL is specified, the portal either displays the protected page that was originally requested, or, if session resume is enabled, the last page that the user accessed in the previous session. redirect.logout = (false) Turns on user-defined redirection after successful logout. If a URL is specified under redirect.logout.url listed later, that URL is used as the URL for the redirection. If no URL is specified, the portal determines the default page in the public portal area and sends a redirect to that page. redirect.logout.ssl = (false) Turns on SSL in system-defined redirection after successful logout. If no URL is specified, the redirect URL uses HTTPS. redirect.logout.url = <none> Specifies the URL for redirection after successful logout. If no URL is specified, the portal determines the default page in the public portal area and sends a redirect to that page. ldapserviceattributename.attribute [optional] = (uid) Use this property to determine that portal workflow integration uses a dedicated user attribute when individual users on IBM\u00ae Process Server are identified. Set this property to the user attribute that is used by IBM\u00ae Process Server during task authorization. IBM\u00ae Process Server uses the J2EE principal name for this purpose. By default the J2EE principal name maps to the uid user attribute in most LDAP servers, except for Domino servers. Domino LDAP servers use the cn attribute by default, therefore for such a configuration set the ldapserviceattributename.attribute to the value cn . This property is optional. multiple.realms.enabled = (false) Multiple Realms Support properties to allow login with uid@realm. multiple.realms.login.default.realm = <none> Multiple Realms Support properties to allow login with uid@realm. multiple.realms.user.dn.template = <none> Multiple Realms Support properties to allow login with uid@realm. host.name = <none> The default is that no value exists for host.name.. In this case, portal URLs start with the host name of the incoming request. If you want the host name in URLs be static, you enter a host name here. For example, in a cluster installation you can enter the name of the network traffic dispatcher here. If a host name is entered, this entry is used to create the portal URLs. host.port.http = <none> The HTTP port (normally 80). host.port.https = <none> The HTTP-SSL port (normally 443). security.css.protection = (true) This property determines whether Cross-Site-Scripting security protection is turned on. The default is true for enabling the protection. redirect.commands = (false) Specifies that a portal command is followed with an HTTP redirect. This way URLs can be bookmarked. Using this feature results in a certain performance. Therefore, it must be used only if needed. uri.context.path = (/wps) The context path under which the portal is running. uri.context.path.facade = (/wsrp) The context path for the additional WAR file that is used as a facade web application for your WSRP implementation. With this path, you can use Secure Socket Layer (SSL) with Client Authentication for WSRP and simultaneously use other means of authentication for the portal, for example form based authentication. This separation is required as J2EE allows only for one authentication mechanism per WAR file. uri.home.public = (/portal) The servlet context of the portal engine for public (or anonymous) pages, that is, pages that users can view without entering a user ID or password. uri.home.protected = (/myportal) The servlet context portal engine for protected (or personal) pages, that is, pages that users can view only by entering a user ID and password. uri.home.doc = (/doc) The servlet context of the portal engine for the documentation area. uri.home.substitution = (false) Determines whether a public URL must be translated to a protected URL if a user session exists. Important: To preserve the original behavior and design assumptions of HCL Portal URLs, set the value of the uri.home.substitution property to true. Uri.home.substitution controls the behavior of HCL Portal when a user who is already logged on to the IBM\u00ae WebSphere\u00ae Application Server environment on which HCL Portal is running uses a /portal URL to access HCL Portal. The original default behavior of HCL Portal when a logged-in user made a /portal request and the uri.home.substitution property was either not set or set to false was to log out the user and redirect them to the login page. Setting the uri.home.substitution property to true changes the behavior so that HCL Portal translates the public URL to a protected URL by redirecting the user to a /myportal URL version of the same request without logging out the user. This behavior is how most users want HCL Portal to function. A setting in WebSphere\u00ae Application Server security, called use available authentication, affected the behavior of HCL Portal URLs. The use available authentication setting is now set to true by default in WebSphere\u00ae Application Server. When set to true, this setting directs WebSphere\u00ae Application Server to build a security context for requests to unprotected URLs, specifically the /portal URL, if possible. More specifically, WebSphere\u00ae Application Server builds this security context when valid credentials such as an LtpaToken are recognized on the inbound request. In this case, a request to the /portal URL by a logged in user does not automatically log out the user and redirect them to the login page. Instead, the request is processed, but in an inconsistent manner. Many things appear to work properly as if the user was recognized as logged in. However, some subtle functional errors might occur, specifically when the rendering of the response embeds secondary requests to the HCL Portal contenthandler function. Therefore, to achieve the most correct operation, set the uri.home.substitution property in the WP ConfigService Resource Environment Provider to true. Setting the uri.home.substitution property to true ensures that even when a request to the /portal URL is forwarded by WebSphere\u00ae Application Server with a security context, HCL Portal still redirects the user to a /myportal version of that same URL. This behavior maintains the original design assumption of using two URL entry points into HCL Portal, one for anonymous access and one for authenticated access. Note: If you want to preserve the original behavior of HCL Portal when uri.home.substitution is not set or is set to false, see the property logout.user.onpublic and the following technote, Default triggers for implicit logouts changed in HCL Portal Version 8 . wsrp.resourceproxy.basic.auth.credentialslot = <none> On a WSRP Consumer portal, you can use this property to specify a credential vault slot that contains the user ID and password credentials. The resource proxy servlet uses the credentials from the credential vault slot when resources that are protected by HTTP basic authentication are fetched. The user ID and password are sent to all remote resources that are referenced in the markup of the remote WSRP portlet. wsrp.resourceproxy.no.header.forwarding = <none> On a WSRP Consumer portal, you can use this property to specify the list of HTTP headers that are not forwarded from the client request in addition to the host header and cookie headers. The host header and cookie headers are never forwarded independent of how this property is set. Persistent session properties Use these properties to configure session persistence for users. For more information about persistent session state and its possible options, see the topics about Configuring user session persistence . persistent.session.level = (0) Determines the level on which the persistent session must operate. If you set this property to a value of 3 , this setting does not affect implicit logins, such as single sign-on with LTPA token or through an external security manager. persistent.session.option = (0) Determines whether the user gets the option to resume the session. If you set this property to 0, the level setting for the property persistent.session.level is applied during login, and the user has no choice whether to resume the previous session or not. If you give users the resume option by setting this property to 1, you must configure the persistent session preservation level by setting the property persistent.session.level to 1 or 2. timeout.resume.session = (false) Determines whether resuming the session after a session timeout requires user authentication. The default value is false . If this property is set to false and the user tries to continue working after a session timeout, the portal shows an error message that states the session is timed out and the user must log in again. If you set this property to true, the portal ignores the session timeout and does not show the error message. The user can resume the previous session without authentication and continue to work. In both cases, the previous session is resumed according to the setting of the persisted.session.level property. session.security.use.errorcode = (true) Use this property to specify whether the portal does a redirect or displays an HTTP error, if session security support is enabled for the portal server and the user in the session does not correspond to the authenticated user in the request. Session security support is a hardening feature of WebSphere\u00ae Application Server. You can activate it for each application server in the WebSphere\u00ae Integrated Solutions Console under the Web Container Settings > Session Management section. If this session security support is active, the application server checks for each authenticated request whether the user who owns the current session matches the user who originated the request. For example, this authentication can be determined by the LTPA token. The portal service configuration property specifies how the portal behaves, if it detects a mismatch between the session user and the authenticated user. If you set this property to true , the portal returns the HTTP error code that you define by the property session.security.errorcode listed later. This typically results in an appropriate error message to be displayed. If you set this property to false , you can specify a redirect URL by using the property session.security.redirecturl listed later. For example, you can redirect to a specific error page, which is then displayed to the user. By default this property is set to true . For more information about session security support in general, see the appropriate version of the WebSphere\u00ae Application Server Help Center for your installation. session.security.errorcode = (409) Use this property to specify the HTTP error code that is returned if all of the following conditions apply: Session security support is enabled in the WebSphere\u00ae Application Server. The property session.security.use.errorcode listed earlier is set to true . A mismatch of the user in the session and the authenticated user is detected. You must specify a valid HTTP error code. The default is error code 409. session.security.redirecturl = <none> Use this property to specify the redirect URL to which portal redirects if all of the following conditions apply: Session security support is enabled in the WebSphere\u00ae Application Server. The property session.security.use.errorcode listed earlier is set to false . A mismatch of the user in the session and the authenticated user is detected. If the property session.security.use.errorcode listed earlier is set to false , you must specify a value for this property. This property has no default. portal.session.protection = (true) Use this property to specify that, for each authenticated portal request, portal checks whether the user in the portal session matches the calling user of the current request. If this portal check results in a mismatch, the portal invalidates the existing session and creates a new one for the calling user to make sure that both identities match. The portal provides this hardening feature, which is independent of the session security support that is provided by WebSphere\u00ae Application Server. By default this property is set to true , therefore the portal checks by default. portal.enable.filtering = (true) This flag determines whether the portal must use Portal Filtering or not. The default is true . portlet.url.find = <none> URL that is used for find and set in global settings portlet. portlets.unauthorized.visible = (false) Determines what a user sees whether they are not authorized to view a portlet. portletcontainer.std.custom.windowStates = <none> This property defines custom window states that are handled by the portal. This action allows portlets to specify custom window states as defined in the Java Portlet Specification 1.0. The portal allows portlets to generate URLs and so start other portlets with a custom window state if both of the following preconditions apply: The started portlet specifies a custom window state in its deployment descriptor (portlet.xml). That window state is registered by using this property. The property value is a comma-separated list of custom window states. For example, portletcontainer.std.custom.windowStates = winState1, myWinState . allow.derived.titles = (true) Determines whether the title and description of derived pages can be redefined by users. If the value is set to false, titles and description of pages can be changed only on non-derived pages. wps.mappingurl.portal_url_identifier = (/!ut/p) This property determines an identifier for Portal URLs. For the specification of the format of this property, refer to the topic about URL mapping. Note: With HCL Portal Version 8.5, URL mappings are deprecated. wps.mappingurl.enabled = (true) This property determines whether URL mapping is enabled or not. Possible values are true to enable URL mapping, or false to disable URL mapping. The default value is true . Note: With HCL Portal Version 8.5, URL mappings are deprecated. When you create a URL mapping or create or modify a page, make sure that URL mappings and friendly URLs in your portal do not match, partially overlap, or otherwise interfere with each other. For example, do not use strings such as home, ibm, ibm.com, and do not use strings that are used as URL mappings or friendly URLs in your portal already. Otherwise, several browser redirect loops might occur, sometimes without an error message. To determine such strings, create an export from your portal by using the XML configuration interface and scan the exported XML result output file for the string that you want to use for your URL mapping or for your friendly URL. wps.mappingurl.invalid = (false) This property determines how the portal responds to a URL mapping that contains path information. Specify one of the following two values: true If you set this property to true and the portal gets a request for a URL mapping that contains path information, the portal returns either an HTTP 404 error or redirects the user to the default portal page. false This value is the default value. If you set this property to false and the portal gets a request for a URL mapping that contains path information, the portal responds as defined by the property friendly.pathinfo.enabled . Notes: With HCL Portal Version 8.5, URL mappings are deprecated. The property friendly.pathinfo.enabled applies to both friendly URLs and URL mappings. The property state.decoding.fallback is not applied to URLs that the portal interprets as URL mappings or friendly URLs. If you use friendly URLs or URL mappings, consider setting the parameters state.decoding.fallback , wps.mappingurl.invalid , and friendly.pathinfo.invalid in a consistent way. This action can help provide a consistent user experience. Example: If you set state.decoding.fallback = false , consider setting wps.mappingurl.invalid = true and friendly.pathinfo.invalid = true . navigation.portletmenu.mode = (0) The navigation.portletmenu.mode property defines in which way portlet menus are integrated in the overall portal navigation menu structure. Portlet menus are navigation parts that are provided by the portlet itself. They can be added as a subtree to the navigation menu item that references the page in which the portlet is found. This property has the following three options: 0 Disabled: Portlet menus are not displayed in the navigation menu at all. This value is the default value. 1 Current selection: Only the portlet menus of the portlets that are found on the currently selected page are added under the navigation menu item for that page. 2 Everything: The portlet menus of all portlets on all pages are added under the appropriate navigation menu items in the navigation tree. navigation.expansion.defaultstate = (false) This value determines whether the nodes in the navigation tree are expanded or collapsed by default. The default is false, which means that the nodes are collapsed. Some exceptions apply; for example, the Portal Administration navigation tree is expanded by default. Note: Setting this value to true does not affect Web 2.0 themes, as the expansion state is not returned from the portal REST service. page.reload.interval = (0) This value defines the page reload interval for unauthenticated users. Use it to specify the interval in minutes after which the portal page hierarchy must be reloaded for an unauthenticated user. The reload respects the most current access control settings for that user. If this value is set to zero, no automatic reload occurs during the session. wsrp.caching.enabled = (true) Use this property to enable or disable WSRP markup caching. The default for this property is true . This value means that WSRP markup caching is enabled, if no value is specified for this property. For more information, see the topic about WSRP Markup Caching . friendly.enabled = (true) This property determines whether friendly URL names can be set for portal pages in the Manage Pages portlet. The default value is true. If you set this property to true, you can add friendly URLs for portal pages in the Manage Pages portlet. \"Friendly\" means that you can use a name that is concise and easy to remember to address a specific portal page. To add a friendly URL for a portal page, click the Edit Page Properties icon for the page for which you want to add a friendly URL. You can then give your portal users that URL, and they can access that page by entering the URL in the Address field of their browser. Note: When you create a URL mapping or create or modify a page, make sure that URL mappings and friendly URLs in your portal do not match, partially overlap, or otherwise interfere with each other. For example, do not use strings such as home, ibm, ibm.com, and do not use strings that are used as URL mappings or friendly URLs in your portal already. Otherwise, several browser redirect loops might occur, sometimes without an error message. To determine such strings, create an export from your portal by using the XML configuration interface and scan the exported XML result output file for the string that you want to use for your URL mapping or for your friendly URL. If this property is set to true , you can use the property friendly.redirect.enabled listed later to determine whether a redirect must be sent if the incoming URL did not contain the friendly URL prefix of the addressed page. friendly.redirect.enabled = (true) Use this property to determine whether a redirect must be sent if the incoming URL did not contain the friendly URL prefix of the addressed page. This property does not take any effect if friendly URLs are disabled by setting the property friendly.enabled to false. Valid values for this property are as follows: true Set this property to true if you use an External Security Manager in your portal deployment that is configured to protect URLs based on their prefixes. This value is the default value of this property. false If you set this property to false, no redirect is sent in the previous case. friendly.pathinfo.validation.redirect.onsuccess.enabled = (true) This key specifies whether portal sends required friendly URL redirects if the path information of an incoming friendly URL is valid. Specify one of the following two values: true This value is the default value. If you set this property to true and portal gets a request for a friendly URL that contains path information, portal sends a required friendly URL redirect as if friendly.redirect.enabled was set to true . A required friendly URL redirect is only suppressed if the response indicates that the path information does not identify an available content item to ensure that the configured HTTP status code is sent. false If you set this property to false , portal sends friendly URL redirects as defined by the property friendly.redirect.enabled. friendly.pathinfo.invalid = (false) This property determines how the portal responds to a friendly URL that contains path information. Specify one of the following two values: true If you set this property to true and the portal gets a request for a friendly URL that contains path information, the portal returns either an HTTP 404 error or redirects the user to the default portal page. The portal response depends on the setting of the property state.decoding.fallback . false This value is the default value. If you set this property to false and the portal gets a request for a friendly URL that contains path information, the portal responds as defined by the property friendly.pathinfo.enabled . Note: The property state.decoding.fallback is not applied to URLs that the portal interprets as URL mappings or friendly URLs. If you use friendly URLs or URL mappings, consider setting the parameters state.decoding.fallback , wps.mappingurl.invalid , and friendly.pathinfo.invalid in a consistent way. This action can help provide a consistent user experience. Example: If you set state.decoding.fallback = false , consider setting wps.mappingurl.invalid = true and friendly.pathinfo.invalid = true . friendly.pathinfo.enabled = (true) This property determines whether URL mappings and friendly URLs can contain path information to a content item as part of the URL. Specify one of the following two values: true This value is the default value. If you set this property to true and the portal gets a request for a URL that contains path information, the portal respects that path information and takes the user to the specified portal page. Note: The property friendly.pathinfo.enabled applies to both friendly URLs and URL mappings.Support for path information in friendly URLs also requires that the property friendly.enabled is set to true and the property friendly.pathinfo.invalid is set to false . Support for path information in URL mappings also requires that the property wps.mappingurl.enabled is set to true and the property wps.mappingurl.invalid is set to false . false If you set this property to false and the portal gets a request for a URL that contains path information, the portal ignores the path information and takes the user only to the requested page. friendly.pathinfo.validation.errorCode = (404) This key specifies the HTTP status code that the portal returns if the path information of a friendly URL cannot be resolved to a content item for the requested page. You can specify one of the following values: 404 The default value. This HTTP status code tells a caller, such as a search crawler or web browser, that no content is found for the friendly URL. The missing content might be temporarily or permanently missing. 410 This HTTP status code informs a caller, such as a search crawler or a web browser, that the resource for the friendly URL is no longer available. This missing resource is permanently gone. Portal can identify conditions that require a different HTTP status code than the one you configure by using friendly.pathinfo.validation.errorCode. For example, friendly URL redirects require the HTTP status code 302. To support the most common use cases, see the topic Preventing friendly URL redirects for invalid friendly URLs for web content . friendly.pathinfo.validation.errorTextProvider This key specifies the text provider of the localized HTTP status message to send as well as the configured HTTP status code. If you configure a text provider and a request URL has invalid path information, portal responds with a blank page that displays only the HTTP status code and the corresponding localized message that is specified by the text provider. The value of this parameter must be the ID of an implementation of the com.ibm.workplace.wcm.api.plugin.textprovider.TextProvider interface. To use the default messages of HCL Portal, specify the text provider with the ID PathInfoValidationTextProvider. If you implement a custom text provider, make sure that it supports message keys that are composed of the prefix HTTP_STATUS_MESSAGE_ and the configured HTTP status code, for example: HTTP_STATUS_MESSAGE_404. Important: Portal ignores this setting if you also specify the friendly.pathinfo.validation.errorURI property or page parameter. friendly.pathinfo.validation.errorResourceBundle This key specifies a Java resource bundle as an alternative to implementing a custom text provider. If you configure a Java resource bundle and a request URL has invalid path information, portal responds with a blank page displays only the HTTP status code and the corresponding localized message from the Java resource bundle. The value of this setting must be the fully qualified name of the Java resource bundle. If you provide a custom Java resource bundle, make sure that it contains message keys that are composed of the prefix HTTP_STATUS_MESSAGE_ and the configured HTTP status code, for example: HTTP_STATUS_MESSAGE_404. Important: Portal ignores this setting if you also specify the friendly.pathinfo.validation.errorURI property or page parameter. Portal also ignores this setting if you set the value of the friendly.pathinfo.validation.errorTextProvider property or page parameter to a custom text provider ID. friendly.pathinfo.validation.errorURI This key specifies the piece of content URI that portal resolves if the request URL has invalid path information. The value of this parameter must be a piece of content URI that portal can resolve, for example: nm:oid:unique_page_name This navigation model URI redirects the request to a specific portal page based on the unique name of the target page. custom:resolutionserviceuri This custom implementation of the com.ibm.portal.resolver.ResolutionService interface resolves invalid path information to a dynamically determined navigational state. When portal resolves the piece of content URI, the content path that failed the portlet validation is passed to the resolution service as the wcmContentPath parameter. friendly.pathinfo.validation.errorContentPath This key specifies the full content path that portal sets as public Web Content Manager context of the resolved page if the request URL has invalid path information. Web Content Viewer portlets on the resolved page that are configured to listen to other portlets can then render the content with the specified path. The value of this setting must be the path of a content item that is available to users, for example: /Web Content/home/human_resources/health/topic_not_found. friendly.pathinfo.validation.enabled = (false) This key specifies whether portal validates the path information of friendly URLs. Specify one of the following two values: true If you set this property to true and portal gets a request for a friendly URL that contains path information, portal validates that path information. If it does not identify an available content item, portal responds based on its configuration and the configuration of the resolved page. For more information, see Configuring the validation of friendly URLs for web content . false This value is the default value. If you set this property to false and portal gets a request for a friendly URL that contains path information, portal responds based on the properties friendly.pathinfo.enabled and friendly.pathinfo.invalid. For more information, see Enabling the validation of friendly URLs for web content . friendlyname.uniqueness.enforcement = (true) This property determines whether the portal enforces that new friendly names are unique across existing non-private sibling nodes. The default value is true . The enforcement does not include derived pages with an inherited friendly name and siblings that are moved in by a personalization rule. com.ibm.wps.resolver.servlet.AbstractServlet.enableWebDAV[optional]=(true) This property specifies whether the WebDAV feature is enabled in HCL Portal. By default, this property is set to the value true, by which WebDAV is enabled. To disable WebDAV, specify the value false. To re-enable WebDAV, specify the value true. portlet.iwidget.markup.prefetching = (true) This property determines whether the markup of portlets on pages in Client-side rendering mode must be loaded together with the markup for the portal page. The default value is true . This property defines the default markup prefetching behavior for pages that are configured to use the Client-side rendering mode. The default behavior can be overridden on a per portlet basis by declaring the same property as a portlet init property in the deployment descriptor file (portlet.xml) of the portlet. To disable portlet markup prefetching by default, set the value of this property to false . In this case, the markup of portlets on pages in Client-side rendering mode is fetched by using separate HTTP requests. portlet.enable.transcoding = (true) Determines whether transcoding is enabled. portlet.automaximize = (false) If you set this value to true, the portlet window is maximized when a portlet is set into edit, configure, or help mode. proxy.enable.app.config = (false) If you set this property to true, the Ajax proxy ignores all proxy-config.xml files inside portlets. content.topology.writelock.timeout = milliseconds (default=25000) This setting controls the maximum wait time to obtain a writable model before a timeout warning. To add or change the settings, open Resource Environment Providers in the WebSphere\u00ae Integrated Solutions Console. Restart the portal server after you make your changes. content.topology.writelock.dump = true|false (default=false) This setting controls if a Java core memory dump is written in a timeout event for debugging. To add or change the settings, open Resource Environment Providers in the WebSphere\u00ae Integrated Solutions Console. Restart the portal server after you make your changes. com.ibm.wps.filestore.JCRWebdavTreeModelFactory.cacheClearOnRestart = true|false (default=true) This setting defines whether the file cache content is invalidated and fetched again after server starts or not. The default value is true . actual.SSO.tokenUrl = your_URL_for_SAP_integration (no default) This property is optional. Use it to specify a referenced property of SAP integration. Change the property name according to your chosen reference in the SAP integration page properties. Specify the URL for SAP integration as the value. enable.default.social.object.resolution.mode.request.param = (true)|false This property is optional. The default setting is true . If you set this property to false , the parameter ibm.portal.default.social.object.resolution.mode is disabled. This setting influences how social object links in social lists are resolved. For more information, see Configuring globally how social object links are resolved . content.topology.writelock.dump = true|false (default=false) This setting controls if a Java core memory dump is written in a timeout event for debugging. To add or change the settings, open Resource Environment Providers in the WebSphere\u00ae Application Server administrative console. Restart the Portal Server after you make your changes. com.ibm.wps.filestore.JCRWebdavTreeModelFactory.cacheClearOnRestart = true|false (default=true) This setting defines whether the file cache content is invalidated and fetched again after server starts or not. The default value is true . proxy.cv.slot.regex = your regular expression with allowed slot IDs This property is optional. You can use it to define a subset of available slots in the Credential vault to which you want to limit the access of outbound HTTP connections. For details, read Authenticating outbound HTTP connections . state.decoding.fallback [=true] Use this property to control how the portal responds to requests for URLs that it cannot decode. Set it to one of the following two values: true This value is the default value. If you set this parameter to true , the portal renders the default or home page. This action is the fallback solution in scenarios with portal site visitors. false If you set this parameter to false, then the portal serves an HTTP 404 error to requests that it cannot decode. This action can be the preferred solution for other scenarios. Note: The property state.decoding.fallback is not applied to URLs that the portal interprets as URL mappings or friendly URLs. If you use friendly URLs or URL mappings, consider setting the parameters state.decoding.fallback , wps.mappingurl.invalid , and friendly.pathinfo.invalid in a consistent way. This action can help provide a consistent user experience. Example: If you set state.decoding.fallback = false , consider setting wps.mappingurl.invalid = true and friendly.pathinfo.invalid = true . search.service.suppress_automatic_creation = (false) Use this property to determine whether the automatic creation of search services and search collections is suppressed. Specify one of the following two values: false To not suppress the automatic creation of search services and search collections, set this property to false . This is the default value. true To suppress the automatic creation of search services and search collections, set this property to true . x-method-override.enabled = (false) Use this property to specify whether you want to have PUT and DELETE requests simulated by tunneling that is by using POST requests instead. To enable this type of tunneling, set this property to true . If you set the property x-method-override.enabled to true , then the Config Service considers the x-method-override request header, when a request comes in. Whether to send this header is a decision of the HTTP client. By default, this property is set to false , and tunneling is disabled. wcm.pages.enabled = (true) This property specifies whether web content pages are enabled. The default value is true . wcm.config.seedlist.version = (1.0) This property specifies the version of the search seedlist format that is used by the portal. Search seedlist format 1.0 is the only supported search seedlist format, so the default and only supported value is 1.0 . wcm.config.seedlist.servletpath = (/seedlist) This property specifies the path to the servlet that generates the search seedlist. The default value is /seedlist . delete.empty.portlet.locales = (false) This property specifies whether the portal deletes the localedata element for a portlet after you set the locale to an empty value. dnd.portletdefinition.wcm.link = (wps.p.dnd.wcm.link) This property defines the global behavior for items that are dragged and dropped from the Site Explorer tab in the site toolbar. The default value is wps.p.dnd.wcm.link and specifies that an item is linked to when it is dragged and dropped onto a page from the Site Explorer tab. The value for this property can be the object ID or the unique name of the portlet definition that you want to use as the global behavior for dragging and dropping. digest.seed In HCL Portal, all resources that are served through the contenthandler framework, for example through the entries /wps/contenthandler and /wps/mycontenthandler, contain a digest token in their URLs. This digest token controls the cacheability of the resources by encoding request dependencies of the resource in the digest. Different dependencies result in a different digest, therefore a different URL, and a different entry in HTTP caches is generated. The digest computation algorithm also takes a seed value into account. This seed is a constant value, identical for all resources on a server. You can control this seed value by setting the digest.seed property in the WP ConfigService. You can control the seed value to make sure that all resources served through the contenthandler framework get fresh URLs, so eventual cache hits are avoided. stateless.urls.enabled = (false) This property enables friendly URLs for the standard theme and the pages that use the standard theme. Set this property to false to disable friendly URLs for the standard theme and the pages that use the standard theme. False is the default value. Set this property to true to enable friendly URLs for the standard theme and the pages that use the standard theme. Whether friendly URLs without state information are generated on a specific page depends on the value of page parameter generate.stateless.urls or, if this parameter is not set, on the value of generate.stateless.urls of WP ConfigService. Page parameter settings can be inherited from parent pages. generate.stateless.urls = (false) This property sets the default value for generating friendly URLs for the standard theme and the pages that use the standard theme. This property sets a default value only if stateless.urls.enabled is set to true . Set this property to true to generate friendly URLs without state information for all pages for which page parameter generate.stateless.urls is not set or is not inherited from parent pages. This property setting affects all Virtual Portals. Set this property to false to generate URLs with state information for all pages for which generate.stateless.urls is not set or is not inherited from parent pages. This property setting affects all Virtual Portals. False is the default value. generate.stateless.redirect.urls = (true) This property sets the default value for generating friendly URLs for the standard theme and the pages that use the standard theme. This property sets a default value only if stateless.urls.enabled is set to true . Set this property to true to generate friendly URLs without state information for all pages for which page parameter generate.stateless.urls is not set or is not inherited from parent pages. This property setting affects all Virtual Portals. Set this property to false to generate URLs with state information for all pages for which generate.stateless.urls is not set or is not inherited from parent pages. This property setting affects all Virtual Portals. False is the default value. This property enables the stateless friendly redirect feature. The stateless friendly redirect feature is disabled by default. The feature can be enabled by setting the following custom properties in REP WP ConfigService. stateless.urls.enabled = true generate.stateless.redirect.urls = true Note: The stateless friendly redirect feature requires the base tag to be enabled in the theme.","title":"Configuration Service"},{"location":"admin-system/srvcfgref_config/#configuration-service","text":"The portal Configuration Service is responsible for collecting the most essential configuration data of the HCL Digital Experience engine. In the WebSphere\u00ae Integrated Solutions Console, the portal Configuration Service is listed as WP ConfigService . Notes: Many of the properties that are listed here are set by the installation procedure. Therefore, plan ahead and apply special care when you modify these properties. HCL Portal and the WebSphere Integrated Solutions Console also provide a CP Configuration Service; this service has properties for tagging and rating only. The Configuration Service also includes the configuration properties for WSRP services. They are listed and described in the context of the respective WSRP topics for which they are relevant. If a property does not exist, create the property in the WebSphere Integrated Solutions Console Resource Environment Provider. was.home = (${WAS_INSTALL_ROOT}) This path is the absolute path to the installation directory of WebSphere\u00ae Application Server. wps.home = (${WPS_INSTALL_ROOT}) This path is the home (or install) directory of HCL Portal. command.login = (LoginUserAuth) The name of the command that serves as the login command. command.logout = (LogoutUserAuth) The name of the command that serves as the logout command. command.sessionvalidator = (SessionValidatorAuth) The name of the command that serves as the session validator command. redirect.login = (true) Turns on user-defined redirection after successful login. If a URL is specified under redirect.login.url listed later, that URL is used as the URL for the redirection. If no URL is specified, the portal determines the default page for the current user and sends a redirect to that page in the protected portal area. redirect.login.ssl = (false) This property determines whether, after login, the portal continues to use the same communication protocol as before the login or enforces HTTPS instead. The default value is false . If this property is set to false , the portal uses the protocol that was initially requested before login. If you set this property to true , it turns on SSL in the system-defined redirection after successful login. If no URL is specified for the property redirect.login.url listed in the following, the redirect occurs to the page that was initially requested before login. redirect.login.url [optional] = <none> Specifies the URL for redirection after successful login. If no URL is specified, the portal determines the default page for the current user and sends a redirect to that page in the protected portal area. This setting does not affect implicit logins, such as single sign-on with LTPA token or through an external security manager. redirect.login.authenticated.url [optional] = <none> Specifies the URL for redirection after the first access to a protected page when the user is authenticated by an external security manager (TAI) and a portal session does not exist yet. If no URL is specified, the portal either displays the protected page that was originally requested, or, if session resume is enabled, the last page that the user accessed in the previous session. redirect.logout = (false) Turns on user-defined redirection after successful logout. If a URL is specified under redirect.logout.url listed later, that URL is used as the URL for the redirection. If no URL is specified, the portal determines the default page in the public portal area and sends a redirect to that page. redirect.logout.ssl = (false) Turns on SSL in system-defined redirection after successful logout. If no URL is specified, the redirect URL uses HTTPS. redirect.logout.url = <none> Specifies the URL for redirection after successful logout. If no URL is specified, the portal determines the default page in the public portal area and sends a redirect to that page. ldapserviceattributename.attribute [optional] = (uid) Use this property to determine that portal workflow integration uses a dedicated user attribute when individual users on IBM\u00ae Process Server are identified. Set this property to the user attribute that is used by IBM\u00ae Process Server during task authorization. IBM\u00ae Process Server uses the J2EE principal name for this purpose. By default the J2EE principal name maps to the uid user attribute in most LDAP servers, except for Domino servers. Domino LDAP servers use the cn attribute by default, therefore for such a configuration set the ldapserviceattributename.attribute to the value cn . This property is optional. multiple.realms.enabled = (false) Multiple Realms Support properties to allow login with uid@realm. multiple.realms.login.default.realm = <none> Multiple Realms Support properties to allow login with uid@realm. multiple.realms.user.dn.template = <none> Multiple Realms Support properties to allow login with uid@realm. host.name = <none> The default is that no value exists for host.name.. In this case, portal URLs start with the host name of the incoming request. If you want the host name in URLs be static, you enter a host name here. For example, in a cluster installation you can enter the name of the network traffic dispatcher here. If a host name is entered, this entry is used to create the portal URLs. host.port.http = <none> The HTTP port (normally 80). host.port.https = <none> The HTTP-SSL port (normally 443). security.css.protection = (true) This property determines whether Cross-Site-Scripting security protection is turned on. The default is true for enabling the protection. redirect.commands = (false) Specifies that a portal command is followed with an HTTP redirect. This way URLs can be bookmarked. Using this feature results in a certain performance. Therefore, it must be used only if needed. uri.context.path = (/wps) The context path under which the portal is running. uri.context.path.facade = (/wsrp) The context path for the additional WAR file that is used as a facade web application for your WSRP implementation. With this path, you can use Secure Socket Layer (SSL) with Client Authentication for WSRP and simultaneously use other means of authentication for the portal, for example form based authentication. This separation is required as J2EE allows only for one authentication mechanism per WAR file. uri.home.public = (/portal) The servlet context of the portal engine for public (or anonymous) pages, that is, pages that users can view without entering a user ID or password. uri.home.protected = (/myportal) The servlet context portal engine for protected (or personal) pages, that is, pages that users can view only by entering a user ID and password. uri.home.doc = (/doc) The servlet context of the portal engine for the documentation area. uri.home.substitution = (false) Determines whether a public URL must be translated to a protected URL if a user session exists. Important: To preserve the original behavior and design assumptions of HCL Portal URLs, set the value of the uri.home.substitution property to true. Uri.home.substitution controls the behavior of HCL Portal when a user who is already logged on to the IBM\u00ae WebSphere\u00ae Application Server environment on which HCL Portal is running uses a /portal URL to access HCL Portal. The original default behavior of HCL Portal when a logged-in user made a /portal request and the uri.home.substitution property was either not set or set to false was to log out the user and redirect them to the login page. Setting the uri.home.substitution property to true changes the behavior so that HCL Portal translates the public URL to a protected URL by redirecting the user to a /myportal URL version of the same request without logging out the user. This behavior is how most users want HCL Portal to function. A setting in WebSphere\u00ae Application Server security, called use available authentication, affected the behavior of HCL Portal URLs. The use available authentication setting is now set to true by default in WebSphere\u00ae Application Server. When set to true, this setting directs WebSphere\u00ae Application Server to build a security context for requests to unprotected URLs, specifically the /portal URL, if possible. More specifically, WebSphere\u00ae Application Server builds this security context when valid credentials such as an LtpaToken are recognized on the inbound request. In this case, a request to the /portal URL by a logged in user does not automatically log out the user and redirect them to the login page. Instead, the request is processed, but in an inconsistent manner. Many things appear to work properly as if the user was recognized as logged in. However, some subtle functional errors might occur, specifically when the rendering of the response embeds secondary requests to the HCL Portal contenthandler function. Therefore, to achieve the most correct operation, set the uri.home.substitution property in the WP ConfigService Resource Environment Provider to true. Setting the uri.home.substitution property to true ensures that even when a request to the /portal URL is forwarded by WebSphere\u00ae Application Server with a security context, HCL Portal still redirects the user to a /myportal version of that same URL. This behavior maintains the original design assumption of using two URL entry points into HCL Portal, one for anonymous access and one for authenticated access. Note: If you want to preserve the original behavior of HCL Portal when uri.home.substitution is not set or is set to false, see the property logout.user.onpublic and the following technote, Default triggers for implicit logouts changed in HCL Portal Version 8 . wsrp.resourceproxy.basic.auth.credentialslot = <none> On a WSRP Consumer portal, you can use this property to specify a credential vault slot that contains the user ID and password credentials. The resource proxy servlet uses the credentials from the credential vault slot when resources that are protected by HTTP basic authentication are fetched. The user ID and password are sent to all remote resources that are referenced in the markup of the remote WSRP portlet. wsrp.resourceproxy.no.header.forwarding = <none> On a WSRP Consumer portal, you can use this property to specify the list of HTTP headers that are not forwarded from the client request in addition to the host header and cookie headers. The host header and cookie headers are never forwarded independent of how this property is set. Persistent session properties Use these properties to configure session persistence for users. For more information about persistent session state and its possible options, see the topics about Configuring user session persistence . persistent.session.level = (0) Determines the level on which the persistent session must operate. If you set this property to a value of 3 , this setting does not affect implicit logins, such as single sign-on with LTPA token or through an external security manager. persistent.session.option = (0) Determines whether the user gets the option to resume the session. If you set this property to 0, the level setting for the property persistent.session.level is applied during login, and the user has no choice whether to resume the previous session or not. If you give users the resume option by setting this property to 1, you must configure the persistent session preservation level by setting the property persistent.session.level to 1 or 2. timeout.resume.session = (false) Determines whether resuming the session after a session timeout requires user authentication. The default value is false . If this property is set to false and the user tries to continue working after a session timeout, the portal shows an error message that states the session is timed out and the user must log in again. If you set this property to true, the portal ignores the session timeout and does not show the error message. The user can resume the previous session without authentication and continue to work. In both cases, the previous session is resumed according to the setting of the persisted.session.level property. session.security.use.errorcode = (true) Use this property to specify whether the portal does a redirect or displays an HTTP error, if session security support is enabled for the portal server and the user in the session does not correspond to the authenticated user in the request. Session security support is a hardening feature of WebSphere\u00ae Application Server. You can activate it for each application server in the WebSphere\u00ae Integrated Solutions Console under the Web Container Settings > Session Management section. If this session security support is active, the application server checks for each authenticated request whether the user who owns the current session matches the user who originated the request. For example, this authentication can be determined by the LTPA token. The portal service configuration property specifies how the portal behaves, if it detects a mismatch between the session user and the authenticated user. If you set this property to true , the portal returns the HTTP error code that you define by the property session.security.errorcode listed later. This typically results in an appropriate error message to be displayed. If you set this property to false , you can specify a redirect URL by using the property session.security.redirecturl listed later. For example, you can redirect to a specific error page, which is then displayed to the user. By default this property is set to true . For more information about session security support in general, see the appropriate version of the WebSphere\u00ae Application Server Help Center for your installation. session.security.errorcode = (409) Use this property to specify the HTTP error code that is returned if all of the following conditions apply: Session security support is enabled in the WebSphere\u00ae Application Server. The property session.security.use.errorcode listed earlier is set to true . A mismatch of the user in the session and the authenticated user is detected. You must specify a valid HTTP error code. The default is error code 409. session.security.redirecturl = <none> Use this property to specify the redirect URL to which portal redirects if all of the following conditions apply: Session security support is enabled in the WebSphere\u00ae Application Server. The property session.security.use.errorcode listed earlier is set to false . A mismatch of the user in the session and the authenticated user is detected. If the property session.security.use.errorcode listed earlier is set to false , you must specify a value for this property. This property has no default. portal.session.protection = (true) Use this property to specify that, for each authenticated portal request, portal checks whether the user in the portal session matches the calling user of the current request. If this portal check results in a mismatch, the portal invalidates the existing session and creates a new one for the calling user to make sure that both identities match. The portal provides this hardening feature, which is independent of the session security support that is provided by WebSphere\u00ae Application Server. By default this property is set to true , therefore the portal checks by default. portal.enable.filtering = (true) This flag determines whether the portal must use Portal Filtering or not. The default is true . portlet.url.find = <none> URL that is used for find and set in global settings portlet. portlets.unauthorized.visible = (false) Determines what a user sees whether they are not authorized to view a portlet. portletcontainer.std.custom.windowStates = <none> This property defines custom window states that are handled by the portal. This action allows portlets to specify custom window states as defined in the Java Portlet Specification 1.0. The portal allows portlets to generate URLs and so start other portlets with a custom window state if both of the following preconditions apply: The started portlet specifies a custom window state in its deployment descriptor (portlet.xml). That window state is registered by using this property. The property value is a comma-separated list of custom window states. For example, portletcontainer.std.custom.windowStates = winState1, myWinState . allow.derived.titles = (true) Determines whether the title and description of derived pages can be redefined by users. If the value is set to false, titles and description of pages can be changed only on non-derived pages. wps.mappingurl.portal_url_identifier = (/!ut/p) This property determines an identifier for Portal URLs. For the specification of the format of this property, refer to the topic about URL mapping. Note: With HCL Portal Version 8.5, URL mappings are deprecated. wps.mappingurl.enabled = (true) This property determines whether URL mapping is enabled or not. Possible values are true to enable URL mapping, or false to disable URL mapping. The default value is true . Note: With HCL Portal Version 8.5, URL mappings are deprecated. When you create a URL mapping or create or modify a page, make sure that URL mappings and friendly URLs in your portal do not match, partially overlap, or otherwise interfere with each other. For example, do not use strings such as home, ibm, ibm.com, and do not use strings that are used as URL mappings or friendly URLs in your portal already. Otherwise, several browser redirect loops might occur, sometimes without an error message. To determine such strings, create an export from your portal by using the XML configuration interface and scan the exported XML result output file for the string that you want to use for your URL mapping or for your friendly URL. wps.mappingurl.invalid = (false) This property determines how the portal responds to a URL mapping that contains path information. Specify one of the following two values: true If you set this property to true and the portal gets a request for a URL mapping that contains path information, the portal returns either an HTTP 404 error or redirects the user to the default portal page. false This value is the default value. If you set this property to false and the portal gets a request for a URL mapping that contains path information, the portal responds as defined by the property friendly.pathinfo.enabled . Notes: With HCL Portal Version 8.5, URL mappings are deprecated. The property friendly.pathinfo.enabled applies to both friendly URLs and URL mappings. The property state.decoding.fallback is not applied to URLs that the portal interprets as URL mappings or friendly URLs. If you use friendly URLs or URL mappings, consider setting the parameters state.decoding.fallback , wps.mappingurl.invalid , and friendly.pathinfo.invalid in a consistent way. This action can help provide a consistent user experience. Example: If you set state.decoding.fallback = false , consider setting wps.mappingurl.invalid = true and friendly.pathinfo.invalid = true . navigation.portletmenu.mode = (0) The navigation.portletmenu.mode property defines in which way portlet menus are integrated in the overall portal navigation menu structure. Portlet menus are navigation parts that are provided by the portlet itself. They can be added as a subtree to the navigation menu item that references the page in which the portlet is found. This property has the following three options: 0 Disabled: Portlet menus are not displayed in the navigation menu at all. This value is the default value. 1 Current selection: Only the portlet menus of the portlets that are found on the currently selected page are added under the navigation menu item for that page. 2 Everything: The portlet menus of all portlets on all pages are added under the appropriate navigation menu items in the navigation tree. navigation.expansion.defaultstate = (false) This value determines whether the nodes in the navigation tree are expanded or collapsed by default. The default is false, which means that the nodes are collapsed. Some exceptions apply; for example, the Portal Administration navigation tree is expanded by default. Note: Setting this value to true does not affect Web 2.0 themes, as the expansion state is not returned from the portal REST service. page.reload.interval = (0) This value defines the page reload interval for unauthenticated users. Use it to specify the interval in minutes after which the portal page hierarchy must be reloaded for an unauthenticated user. The reload respects the most current access control settings for that user. If this value is set to zero, no automatic reload occurs during the session. wsrp.caching.enabled = (true) Use this property to enable or disable WSRP markup caching. The default for this property is true . This value means that WSRP markup caching is enabled, if no value is specified for this property. For more information, see the topic about WSRP Markup Caching . friendly.enabled = (true) This property determines whether friendly URL names can be set for portal pages in the Manage Pages portlet. The default value is true. If you set this property to true, you can add friendly URLs for portal pages in the Manage Pages portlet. \"Friendly\" means that you can use a name that is concise and easy to remember to address a specific portal page. To add a friendly URL for a portal page, click the Edit Page Properties icon for the page for which you want to add a friendly URL. You can then give your portal users that URL, and they can access that page by entering the URL in the Address field of their browser. Note: When you create a URL mapping or create or modify a page, make sure that URL mappings and friendly URLs in your portal do not match, partially overlap, or otherwise interfere with each other. For example, do not use strings such as home, ibm, ibm.com, and do not use strings that are used as URL mappings or friendly URLs in your portal already. Otherwise, several browser redirect loops might occur, sometimes without an error message. To determine such strings, create an export from your portal by using the XML configuration interface and scan the exported XML result output file for the string that you want to use for your URL mapping or for your friendly URL. If this property is set to true , you can use the property friendly.redirect.enabled listed later to determine whether a redirect must be sent if the incoming URL did not contain the friendly URL prefix of the addressed page. friendly.redirect.enabled = (true) Use this property to determine whether a redirect must be sent if the incoming URL did not contain the friendly URL prefix of the addressed page. This property does not take any effect if friendly URLs are disabled by setting the property friendly.enabled to false. Valid values for this property are as follows: true Set this property to true if you use an External Security Manager in your portal deployment that is configured to protect URLs based on their prefixes. This value is the default value of this property. false If you set this property to false, no redirect is sent in the previous case. friendly.pathinfo.validation.redirect.onsuccess.enabled = (true) This key specifies whether portal sends required friendly URL redirects if the path information of an incoming friendly URL is valid. Specify one of the following two values: true This value is the default value. If you set this property to true and portal gets a request for a friendly URL that contains path information, portal sends a required friendly URL redirect as if friendly.redirect.enabled was set to true . A required friendly URL redirect is only suppressed if the response indicates that the path information does not identify an available content item to ensure that the configured HTTP status code is sent. false If you set this property to false , portal sends friendly URL redirects as defined by the property friendly.redirect.enabled. friendly.pathinfo.invalid = (false) This property determines how the portal responds to a friendly URL that contains path information. Specify one of the following two values: true If you set this property to true and the portal gets a request for a friendly URL that contains path information, the portal returns either an HTTP 404 error or redirects the user to the default portal page. The portal response depends on the setting of the property state.decoding.fallback . false This value is the default value. If you set this property to false and the portal gets a request for a friendly URL that contains path information, the portal responds as defined by the property friendly.pathinfo.enabled . Note: The property state.decoding.fallback is not applied to URLs that the portal interprets as URL mappings or friendly URLs. If you use friendly URLs or URL mappings, consider setting the parameters state.decoding.fallback , wps.mappingurl.invalid , and friendly.pathinfo.invalid in a consistent way. This action can help provide a consistent user experience. Example: If you set state.decoding.fallback = false , consider setting wps.mappingurl.invalid = true and friendly.pathinfo.invalid = true . friendly.pathinfo.enabled = (true) This property determines whether URL mappings and friendly URLs can contain path information to a content item as part of the URL. Specify one of the following two values: true This value is the default value. If you set this property to true and the portal gets a request for a URL that contains path information, the portal respects that path information and takes the user to the specified portal page. Note: The property friendly.pathinfo.enabled applies to both friendly URLs and URL mappings.Support for path information in friendly URLs also requires that the property friendly.enabled is set to true and the property friendly.pathinfo.invalid is set to false . Support for path information in URL mappings also requires that the property wps.mappingurl.enabled is set to true and the property wps.mappingurl.invalid is set to false . false If you set this property to false and the portal gets a request for a URL that contains path information, the portal ignores the path information and takes the user only to the requested page. friendly.pathinfo.validation.errorCode = (404) This key specifies the HTTP status code that the portal returns if the path information of a friendly URL cannot be resolved to a content item for the requested page. You can specify one of the following values: 404 The default value. This HTTP status code tells a caller, such as a search crawler or web browser, that no content is found for the friendly URL. The missing content might be temporarily or permanently missing. 410 This HTTP status code informs a caller, such as a search crawler or a web browser, that the resource for the friendly URL is no longer available. This missing resource is permanently gone. Portal can identify conditions that require a different HTTP status code than the one you configure by using friendly.pathinfo.validation.errorCode. For example, friendly URL redirects require the HTTP status code 302. To support the most common use cases, see the topic Preventing friendly URL redirects for invalid friendly URLs for web content . friendly.pathinfo.validation.errorTextProvider This key specifies the text provider of the localized HTTP status message to send as well as the configured HTTP status code. If you configure a text provider and a request URL has invalid path information, portal responds with a blank page that displays only the HTTP status code and the corresponding localized message that is specified by the text provider. The value of this parameter must be the ID of an implementation of the com.ibm.workplace.wcm.api.plugin.textprovider.TextProvider interface. To use the default messages of HCL Portal, specify the text provider with the ID PathInfoValidationTextProvider. If you implement a custom text provider, make sure that it supports message keys that are composed of the prefix HTTP_STATUS_MESSAGE_ and the configured HTTP status code, for example: HTTP_STATUS_MESSAGE_404. Important: Portal ignores this setting if you also specify the friendly.pathinfo.validation.errorURI property or page parameter. friendly.pathinfo.validation.errorResourceBundle This key specifies a Java resource bundle as an alternative to implementing a custom text provider. If you configure a Java resource bundle and a request URL has invalid path information, portal responds with a blank page displays only the HTTP status code and the corresponding localized message from the Java resource bundle. The value of this setting must be the fully qualified name of the Java resource bundle. If you provide a custom Java resource bundle, make sure that it contains message keys that are composed of the prefix HTTP_STATUS_MESSAGE_ and the configured HTTP status code, for example: HTTP_STATUS_MESSAGE_404. Important: Portal ignores this setting if you also specify the friendly.pathinfo.validation.errorURI property or page parameter. Portal also ignores this setting if you set the value of the friendly.pathinfo.validation.errorTextProvider property or page parameter to a custom text provider ID. friendly.pathinfo.validation.errorURI This key specifies the piece of content URI that portal resolves if the request URL has invalid path information. The value of this parameter must be a piece of content URI that portal can resolve, for example: nm:oid:unique_page_name This navigation model URI redirects the request to a specific portal page based on the unique name of the target page. custom:resolutionserviceuri This custom implementation of the com.ibm.portal.resolver.ResolutionService interface resolves invalid path information to a dynamically determined navigational state. When portal resolves the piece of content URI, the content path that failed the portlet validation is passed to the resolution service as the wcmContentPath parameter. friendly.pathinfo.validation.errorContentPath This key specifies the full content path that portal sets as public Web Content Manager context of the resolved page if the request URL has invalid path information. Web Content Viewer portlets on the resolved page that are configured to listen to other portlets can then render the content with the specified path. The value of this setting must be the path of a content item that is available to users, for example: /Web Content/home/human_resources/health/topic_not_found. friendly.pathinfo.validation.enabled = (false) This key specifies whether portal validates the path information of friendly URLs. Specify one of the following two values: true If you set this property to true and portal gets a request for a friendly URL that contains path information, portal validates that path information. If it does not identify an available content item, portal responds based on its configuration and the configuration of the resolved page. For more information, see Configuring the validation of friendly URLs for web content . false This value is the default value. If you set this property to false and portal gets a request for a friendly URL that contains path information, portal responds based on the properties friendly.pathinfo.enabled and friendly.pathinfo.invalid. For more information, see Enabling the validation of friendly URLs for web content . friendlyname.uniqueness.enforcement = (true) This property determines whether the portal enforces that new friendly names are unique across existing non-private sibling nodes. The default value is true . The enforcement does not include derived pages with an inherited friendly name and siblings that are moved in by a personalization rule. com.ibm.wps.resolver.servlet.AbstractServlet.enableWebDAV[optional]=(true) This property specifies whether the WebDAV feature is enabled in HCL Portal. By default, this property is set to the value true, by which WebDAV is enabled. To disable WebDAV, specify the value false. To re-enable WebDAV, specify the value true. portlet.iwidget.markup.prefetching = (true) This property determines whether the markup of portlets on pages in Client-side rendering mode must be loaded together with the markup for the portal page. The default value is true . This property defines the default markup prefetching behavior for pages that are configured to use the Client-side rendering mode. The default behavior can be overridden on a per portlet basis by declaring the same property as a portlet init property in the deployment descriptor file (portlet.xml) of the portlet. To disable portlet markup prefetching by default, set the value of this property to false . In this case, the markup of portlets on pages in Client-side rendering mode is fetched by using separate HTTP requests. portlet.enable.transcoding = (true) Determines whether transcoding is enabled. portlet.automaximize = (false) If you set this value to true, the portlet window is maximized when a portlet is set into edit, configure, or help mode. proxy.enable.app.config = (false) If you set this property to true, the Ajax proxy ignores all proxy-config.xml files inside portlets. content.topology.writelock.timeout = milliseconds (default=25000) This setting controls the maximum wait time to obtain a writable model before a timeout warning. To add or change the settings, open Resource Environment Providers in the WebSphere\u00ae Integrated Solutions Console. Restart the portal server after you make your changes. content.topology.writelock.dump = true|false (default=false) This setting controls if a Java core memory dump is written in a timeout event for debugging. To add or change the settings, open Resource Environment Providers in the WebSphere\u00ae Integrated Solutions Console. Restart the portal server after you make your changes. com.ibm.wps.filestore.JCRWebdavTreeModelFactory.cacheClearOnRestart = true|false (default=true) This setting defines whether the file cache content is invalidated and fetched again after server starts or not. The default value is true . actual.SSO.tokenUrl = your_URL_for_SAP_integration (no default) This property is optional. Use it to specify a referenced property of SAP integration. Change the property name according to your chosen reference in the SAP integration page properties. Specify the URL for SAP integration as the value. enable.default.social.object.resolution.mode.request.param = (true)|false This property is optional. The default setting is true . If you set this property to false , the parameter ibm.portal.default.social.object.resolution.mode is disabled. This setting influences how social object links in social lists are resolved. For more information, see Configuring globally how social object links are resolved . content.topology.writelock.dump = true|false (default=false) This setting controls if a Java core memory dump is written in a timeout event for debugging. To add or change the settings, open Resource Environment Providers in the WebSphere\u00ae Application Server administrative console. Restart the Portal Server after you make your changes. com.ibm.wps.filestore.JCRWebdavTreeModelFactory.cacheClearOnRestart = true|false (default=true) This setting defines whether the file cache content is invalidated and fetched again after server starts or not. The default value is true . proxy.cv.slot.regex = your regular expression with allowed slot IDs This property is optional. You can use it to define a subset of available slots in the Credential vault to which you want to limit the access of outbound HTTP connections. For details, read Authenticating outbound HTTP connections . state.decoding.fallback [=true] Use this property to control how the portal responds to requests for URLs that it cannot decode. Set it to one of the following two values: true This value is the default value. If you set this parameter to true , the portal renders the default or home page. This action is the fallback solution in scenarios with portal site visitors. false If you set this parameter to false, then the portal serves an HTTP 404 error to requests that it cannot decode. This action can be the preferred solution for other scenarios. Note: The property state.decoding.fallback is not applied to URLs that the portal interprets as URL mappings or friendly URLs. If you use friendly URLs or URL mappings, consider setting the parameters state.decoding.fallback , wps.mappingurl.invalid , and friendly.pathinfo.invalid in a consistent way. This action can help provide a consistent user experience. Example: If you set state.decoding.fallback = false , consider setting wps.mappingurl.invalid = true and friendly.pathinfo.invalid = true . search.service.suppress_automatic_creation = (false) Use this property to determine whether the automatic creation of search services and search collections is suppressed. Specify one of the following two values: false To not suppress the automatic creation of search services and search collections, set this property to false . This is the default value. true To suppress the automatic creation of search services and search collections, set this property to true . x-method-override.enabled = (false) Use this property to specify whether you want to have PUT and DELETE requests simulated by tunneling that is by using POST requests instead. To enable this type of tunneling, set this property to true . If you set the property x-method-override.enabled to true , then the Config Service considers the x-method-override request header, when a request comes in. Whether to send this header is a decision of the HTTP client. By default, this property is set to false , and tunneling is disabled. wcm.pages.enabled = (true) This property specifies whether web content pages are enabled. The default value is true . wcm.config.seedlist.version = (1.0) This property specifies the version of the search seedlist format that is used by the portal. Search seedlist format 1.0 is the only supported search seedlist format, so the default and only supported value is 1.0 . wcm.config.seedlist.servletpath = (/seedlist) This property specifies the path to the servlet that generates the search seedlist. The default value is /seedlist . delete.empty.portlet.locales = (false) This property specifies whether the portal deletes the localedata element for a portlet after you set the locale to an empty value. dnd.portletdefinition.wcm.link = (wps.p.dnd.wcm.link) This property defines the global behavior for items that are dragged and dropped from the Site Explorer tab in the site toolbar. The default value is wps.p.dnd.wcm.link and specifies that an item is linked to when it is dragged and dropped onto a page from the Site Explorer tab. The value for this property can be the object ID or the unique name of the portlet definition that you want to use as the global behavior for dragging and dropping. digest.seed In HCL Portal, all resources that are served through the contenthandler framework, for example through the entries /wps/contenthandler and /wps/mycontenthandler, contain a digest token in their URLs. This digest token controls the cacheability of the resources by encoding request dependencies of the resource in the digest. Different dependencies result in a different digest, therefore a different URL, and a different entry in HTTP caches is generated. The digest computation algorithm also takes a seed value into account. This seed is a constant value, identical for all resources on a server. You can control this seed value by setting the digest.seed property in the WP ConfigService. You can control the seed value to make sure that all resources served through the contenthandler framework get fresh URLs, so eventual cache hits are avoided. stateless.urls.enabled = (false) This property enables friendly URLs for the standard theme and the pages that use the standard theme. Set this property to false to disable friendly URLs for the standard theme and the pages that use the standard theme. False is the default value. Set this property to true to enable friendly URLs for the standard theme and the pages that use the standard theme. Whether friendly URLs without state information are generated on a specific page depends on the value of page parameter generate.stateless.urls or, if this parameter is not set, on the value of generate.stateless.urls of WP ConfigService. Page parameter settings can be inherited from parent pages. generate.stateless.urls = (false) This property sets the default value for generating friendly URLs for the standard theme and the pages that use the standard theme. This property sets a default value only if stateless.urls.enabled is set to true . Set this property to true to generate friendly URLs without state information for all pages for which page parameter generate.stateless.urls is not set or is not inherited from parent pages. This property setting affects all Virtual Portals. Set this property to false to generate URLs with state information for all pages for which generate.stateless.urls is not set or is not inherited from parent pages. This property setting affects all Virtual Portals. False is the default value. generate.stateless.redirect.urls = (true) This property sets the default value for generating friendly URLs for the standard theme and the pages that use the standard theme. This property sets a default value only if stateless.urls.enabled is set to true . Set this property to true to generate friendly URLs without state information for all pages for which page parameter generate.stateless.urls is not set or is not inherited from parent pages. This property setting affects all Virtual Portals. Set this property to false to generate URLs with state information for all pages for which generate.stateless.urls is not set or is not inherited from parent pages. This property setting affects all Virtual Portals. False is the default value. This property enables the stateless friendly redirect feature. The stateless friendly redirect feature is disabled by default. The feature can be enabled by setting the following custom properties in REP WP ConfigService. stateless.urls.enabled = true generate.stateless.redirect.urls = true Note: The stateless friendly redirect feature requires the base tag to be enabled in the theme.","title":"Configuration Service"},{"location":"admin-system/stopstart/","text":"Starting and stopping servers, deployment managers, and node agents Various installation and configuration tasks require you to start and stop IBM WebSphere Application Server and the HCL Digital Experience application servers, deployment managers, and node agents. Open a command prompt and change to the following directory: Note: In a clustered environment, use the dmgr_profile_root directory and not the wp_profile_root directory. Windows\u2122: wp_profile_root \\bin AIX\u00ae HP-UX Linux\u2122 Solaris: wp_profile_root /bin IBM\u00ae i: wp_profile_root /bin z/OS\u00ae: wp_profile_root /bin Complete the following steps to start the servers, deployment managers, and node agents Server Steps Deployment manager Enter the following command: - AIX HP-UX Linux Solaris: ./startManager.sh - Windows: startManager.bat - IBM i: startManager - z/OS: ./startManager.sh Node agent Enter the following command: - AIX HP-UX Linux Solaris: ./startNode.sh - Windows: startNode.bat - IBM i: startNode - z/OS: ./startNode.sh HCL Portal server Enter the following command: Note: If you have a clustered environment or you renamed HCL Portal server, HCL Portal and HCL Web Content Manager is the name that you defined for your HCL Portal server. AIX HP-UX Linux Solaris: ./startServer.sh HCL Portal and HCL Web Content Manager Windows: startServer.bat HCL Portal and HCL Web Content Manager IBM i: startServer HCL Portal and HCL Web Content Manager z/OS: ./startServer.sh HCL Portal and HCL Web Content Manager | Complete the following steps to stop the servers, deployment managers, and node agents: Server Steps HCL Portal server Enter the following command: Note: If you have a clustered environment or you renamed your HCL Portal server, HCL Portal and HCL Web Content Manager is the name that you define for your HCL Portal server. AIX HP-UX Linux Solaris: ./stopServer.sh HCL Portal and HCL Web Content Manager Windows: stopServer.bat HCL Portal and HCL Web Content Manager IBM i: stopServer HCL Portal and HCL Web Content Manager z/OS: ./stopServer.sh HCL Portal and HCL Web Content Manager | |Node agent|Enter the following command: - AIX HP-UX Linux Solaris: ./stopNode.sh Windows: stopNode.bat IBM i: stopNode z/OS: ./stopNode.sh | |Deployment manager|Enter the following command: - AIX HP-UX Linux Solaris: ./stopManager.sh Windows: stopManager.bat IBM i: stopManager z/OS: ./stopManager.sh | In a clustered environment, you can use the deployment manager WebSphere\u00ae Integrated Solutions Console to stop and start the application servers that are managed by the deployment manager: Option Steps Start a specific application server in a cell Complete the following steps to start a specific application server in a cell: 1. Open the deployment manager WebSphere Integrated Solutions Console. 2. Click Servers > Application Servers . 3. Select the server and click Start . Start the entire cluster Complete the following steps to start the entire cluster: 1. Open the deployment manager WebSphere Integrated Solutions Console. 2. Click Servers > Clusters . 3. Select the cluster and click Start or Ripple Start . Stop a specific server in a cell Complete the following steps to stop a specific application server in a cell: 1. Open the deployment manager WebSphere Integrated Solutions Console. 2. Click Servers > Application Servers . 3. Select the server and click Stop or Immediate Stop . Stop the entire cluster Complete the following steps to stop the entire cluster: 1. Open the deployment manager WebSphere Integrated Solutions Console. 2. Click Servers > Clusters . 3. Select the cluster and click Stop or Immediate Stop .","title":"Starting and stopping servers, deployment managers, and node agents"},{"location":"admin-system/stopstart/#starting-and-stopping-servers-deployment-managers-and-node-agents","text":"Various installation and configuration tasks require you to start and stop IBM WebSphere Application Server and the HCL Digital Experience application servers, deployment managers, and node agents. Open a command prompt and change to the following directory: Note: In a clustered environment, use the dmgr_profile_root directory and not the wp_profile_root directory. Windows\u2122: wp_profile_root \\bin AIX\u00ae HP-UX Linux\u2122 Solaris: wp_profile_root /bin IBM\u00ae i: wp_profile_root /bin z/OS\u00ae: wp_profile_root /bin Complete the following steps to start the servers, deployment managers, and node agents Server Steps Deployment manager Enter the following command: - AIX HP-UX Linux Solaris: ./startManager.sh - Windows: startManager.bat - IBM i: startManager - z/OS: ./startManager.sh Node agent Enter the following command: - AIX HP-UX Linux Solaris: ./startNode.sh - Windows: startNode.bat - IBM i: startNode - z/OS: ./startNode.sh HCL Portal server Enter the following command: Note: If you have a clustered environment or you renamed HCL Portal server, HCL Portal and HCL Web Content Manager is the name that you defined for your HCL Portal server. AIX HP-UX Linux Solaris: ./startServer.sh HCL Portal and HCL Web Content Manager Windows: startServer.bat HCL Portal and HCL Web Content Manager IBM i: startServer HCL Portal and HCL Web Content Manager z/OS: ./startServer.sh HCL Portal and HCL Web Content Manager | Complete the following steps to stop the servers, deployment managers, and node agents: Server Steps HCL Portal server Enter the following command: Note: If you have a clustered environment or you renamed your HCL Portal server, HCL Portal and HCL Web Content Manager is the name that you define for your HCL Portal server. AIX HP-UX Linux Solaris: ./stopServer.sh HCL Portal and HCL Web Content Manager Windows: stopServer.bat HCL Portal and HCL Web Content Manager IBM i: stopServer HCL Portal and HCL Web Content Manager z/OS: ./stopServer.sh HCL Portal and HCL Web Content Manager | |Node agent|Enter the following command: - AIX HP-UX Linux Solaris: ./stopNode.sh Windows: stopNode.bat IBM i: stopNode z/OS: ./stopNode.sh | |Deployment manager|Enter the following command: - AIX HP-UX Linux Solaris: ./stopManager.sh Windows: stopManager.bat IBM i: stopManager z/OS: ./stopManager.sh | In a clustered environment, you can use the deployment manager WebSphere\u00ae Integrated Solutions Console to stop and start the application servers that are managed by the deployment manager: Option Steps Start a specific application server in a cell Complete the following steps to start a specific application server in a cell: 1. Open the deployment manager WebSphere Integrated Solutions Console. 2. Click Servers > Application Servers . 3. Select the server and click Start . Start the entire cluster Complete the following steps to start the entire cluster: 1. Open the deployment manager WebSphere Integrated Solutions Console. 2. Click Servers > Clusters . 3. Select the cluster and click Start or Ripple Start . Stop a specific server in a cell Complete the following steps to stop a specific application server in a cell: 1. Open the deployment manager WebSphere Integrated Solutions Console. 2. Click Servers > Application Servers . 3. Select the server and click Stop or Immediate Stop . Stop the entire cluster Complete the following steps to stop the entire cluster: 1. Open the deployment manager WebSphere Integrated Solutions Console. 2. Click Servers > Clusters . 3. Select the cluster and click Stop or Immediate Stop .","title":"Starting and stopping servers, deployment managers, and node agents"},{"location":"admin-system/tag_rate/","text":"Tagging and rating portal content Users can tag or rate portal content and view the tags and ratings. Tagging and rating allow users to better organize, categorize, and find portal content. This task includes Web Content Manager, HCL Connections, and custom content. For example, users can tag or rate books in an online bookstore. Portal users can tag or rate portal content. This task includes the following types of resources: Portal resources, such as pages and portlets Web Content Manager resources, such as articles or images Custom resources. For example, these resources can be items in an online store or pictures in a portlet. Administrators can add these custom resources to the portal so that users can tag or rate them. In general, all content in a portal that can be uniquely identified can be tagged or rated. Users can apply tags and ratings both publicly and privately for the following purposes: Public tagging and rating helps users categorize, evaluate, and find portal content that is based on tags and ratings by other users. Private tagging and rating can help users create their own personal way to categorize, evaluate, and find portal content. In detail, portal users can do the following tasks: Work with tags: Tag portal content. Users can add tags to portal content. For example, the user can apply the tag dx to a page that provides information about HCL Digital Experience products. Users can remove tags that they applied themselves. View tags and related portal content: Users can view the tags that are applied to individual portal resources, for example by starting the default tag and rating widgets. Users can also work with aggregated sets of selected tags: Users can view tags that are applied to a set of resources by using a tag cloud . The tag cloud lists the tags in alphabetical order. Different font sizes indicate how often the tags are applied. Depending on how the administrator configures the tag cloud, the list can be portal wide or limited to particular items. For example, portal pages, or books available on the page where the user clicked the tag. The tag cloud supports different views: users can switch between these views. For example, they can view all tags, only tags that they themselves applied, their own private tags, or the tags that were added most recently. Users can switch between different display modes. For example, they can have the tags to be displayed in a cloud as described earlier, or in a simple list. Users can use the tags that are displayed in the tag cloud to search for content. When a user clicks a tag, the portal shows a list of resources that have that tag that is applied. Clicking such a resource redirects the user to that resource itself. Users can also click multiple tags; in this case the list shows only resources that have all selected tags applied. When users work with the list of resources, they can have the list that is sorted by different criteria, for example, title, date, rating. The result list portlet also supports two different view modes: a summary and a detail view. Work with ratings: Rate portal content: Users can apply ratings to individual resources to show how much they \"like\" them. For example, a user can give a good book a rating of 4. Users can change or remove ratings that they applied themselves. For example, a user can update the previous rating 4 to a 5. View the ratings that they or other users apply to portal content. Administrators can do the following tasks: All tasks that portal users can do as previously listed. Add content that users can tag or rate, for example, books in a bookstore. Assign users the access rights for tagging or rating content. Configure the tag clouds. By default, a tag cloud shows all tags that are applied to portal-wide resources. Administrators can add tag clouds to portal pages or themes and configure them as required. For example, they can limit a tag cloud to display only tags that is assigned to resources of a certain category, such as portlets. When users click a tag from that tag cloud, the result list shows only resources, in this case portlets. Move tags to a different portal system, for example, for staging or during migration. Obtain basic statistics about tagging and rating. For example, you can obtain the tags and tag counts for a specific portal page, or all tags that a specific user applied. You can write queries for more detailed statistics, or create a user interface to visualize them. Developers can do the following tasks: Extend the tagging and rating capabilities of the portal by writing a custom user interface that uses the Java Model API or the REST API. Write queries to obtain statistics about tagging and rating, and write a user interface to visualize these statistics. Enable or disable filters, for example to prevent users from using unwanted words as tags. By default the portal provides a blacklist and a whitelist filter. Note: Depending on your portal and your user groups, administrators or developers might consider creating user documentation for tagging and rating for their portal users. Parent topic: Social business","title":"Tagging and rating portal content"},{"location":"admin-system/tag_rate/#tagging-and-rating-portal-content","text":"Users can tag or rate portal content and view the tags and ratings. Tagging and rating allow users to better organize, categorize, and find portal content. This task includes Web Content Manager, HCL Connections, and custom content. For example, users can tag or rate books in an online bookstore. Portal users can tag or rate portal content. This task includes the following types of resources: Portal resources, such as pages and portlets Web Content Manager resources, such as articles or images Custom resources. For example, these resources can be items in an online store or pictures in a portlet. Administrators can add these custom resources to the portal so that users can tag or rate them. In general, all content in a portal that can be uniquely identified can be tagged or rated. Users can apply tags and ratings both publicly and privately for the following purposes: Public tagging and rating helps users categorize, evaluate, and find portal content that is based on tags and ratings by other users. Private tagging and rating can help users create their own personal way to categorize, evaluate, and find portal content. In detail, portal users can do the following tasks: Work with tags: Tag portal content. Users can add tags to portal content. For example, the user can apply the tag dx to a page that provides information about HCL Digital Experience products. Users can remove tags that they applied themselves. View tags and related portal content: Users can view the tags that are applied to individual portal resources, for example by starting the default tag and rating widgets. Users can also work with aggregated sets of selected tags: Users can view tags that are applied to a set of resources by using a tag cloud . The tag cloud lists the tags in alphabetical order. Different font sizes indicate how often the tags are applied. Depending on how the administrator configures the tag cloud, the list can be portal wide or limited to particular items. For example, portal pages, or books available on the page where the user clicked the tag. The tag cloud supports different views: users can switch between these views. For example, they can view all tags, only tags that they themselves applied, their own private tags, or the tags that were added most recently. Users can switch between different display modes. For example, they can have the tags to be displayed in a cloud as described earlier, or in a simple list. Users can use the tags that are displayed in the tag cloud to search for content. When a user clicks a tag, the portal shows a list of resources that have that tag that is applied. Clicking such a resource redirects the user to that resource itself. Users can also click multiple tags; in this case the list shows only resources that have all selected tags applied. When users work with the list of resources, they can have the list that is sorted by different criteria, for example, title, date, rating. The result list portlet also supports two different view modes: a summary and a detail view. Work with ratings: Rate portal content: Users can apply ratings to individual resources to show how much they \"like\" them. For example, a user can give a good book a rating of 4. Users can change or remove ratings that they applied themselves. For example, a user can update the previous rating 4 to a 5. View the ratings that they or other users apply to portal content. Administrators can do the following tasks: All tasks that portal users can do as previously listed. Add content that users can tag or rate, for example, books in a bookstore. Assign users the access rights for tagging or rating content. Configure the tag clouds. By default, a tag cloud shows all tags that are applied to portal-wide resources. Administrators can add tag clouds to portal pages or themes and configure them as required. For example, they can limit a tag cloud to display only tags that is assigned to resources of a certain category, such as portlets. When users click a tag from that tag cloud, the result list shows only resources, in this case portlets. Move tags to a different portal system, for example, for staging or during migration. Obtain basic statistics about tagging and rating. For example, you can obtain the tags and tag counts for a specific portal page, or all tags that a specific user applied. You can write queries for more detailed statistics, or create a user interface to visualize them. Developers can do the following tasks: Extend the tagging and rating capabilities of the portal by writing a custom user interface that uses the Java Model API or the REST API. Write queries to obtain statistics about tagging and rating, and write a user interface to visualize these statistics. Enable or disable filters, for example to prevent users from using unwanted words as tags. By default the portal provides a blacklist and a whitelist filter. Note: Depending on your portal and your user groups, administrators or developers might consider creating user documentation for tagging and rating for their portal users. Parent topic: Social business","title":"Tagging and rating portal content"},{"location":"admin-system/wab/","text":"Integrating with web applications The Web Application Bridge uses reverse proxy technology to integrate web-based content providers, such as the Microsoft SharePoint server, with HCL Digital Experience. Administrators must first define the virtual web applications or content providers. A lightweight iFrame portlet renders the content from the backend applications. Users can then access the iFrame on a page without requiring direct network access to the backend application. A special engine maps Uniform Resource Identifier (URIs) on the iFrame portlet to real URIs from the content providers. The intention of the Web Applications Bridge is to support the complex and heterogeneous web applications. Ensure that the web applications are constructed with common practices and function according to industry accepted standards. Since there are no rigorous industry standards, it is impossible to verify that the Web Application Bridge can work with any arbitrary web application. You might need to customize the Web Application Bridge or change the web application to ensure success. The Web Applications Bridge was designed to integrate Microsoft Sharepoint into your website. However, you can integrate with other products. The Web Application Bridge is routinely enhanced to support integration with other products and systems per demand. For those web applications that do not comply or are unable to work correctly, modify the application to support the integration through the Web Application Bridge. In cases where the application cannot be modified to comply with the Web Application Bridge, add custom filters to the Web Application Bridge to process the markup. Take care when you implement these filters for performance and reliability. The customer makes the customization themselves. When you use the Web Application Bridge, access HCL Portal with the fully qualified host name. Integrating the web applications with HCL Digital Experience is a multi-step process. To learn more about the Web Application Bridge, go to Web Application Bridge . Mobile support is provided for web applications that were developed and tested for rendering inside mobile device browsers. If the web application was originally built and tested for desktops, they will not work properly on a mobile device. Instead, they display the same way that they would on the desktop. If the web application provides navigation, content, and features for a mobile device, it is available when rendered through the Web Dock portlet. Configure the Web Dock portlet to always allow dynamic size. This setting allows the screen to respond to the different sizes of the applications. If you do not have Dynamic Size set to always, the Web Dock portlet shows the desktop version of the content. Note: Mobile devices might not show scroll bars for any overflow content. Instead, the swipe feature of the mobile is enabled.","title":"Integrating with web applications"},{"location":"admin-system/wab/#integrating-with-web-applications","text":"The Web Application Bridge uses reverse proxy technology to integrate web-based content providers, such as the Microsoft SharePoint server, with HCL Digital Experience. Administrators must first define the virtual web applications or content providers. A lightweight iFrame portlet renders the content from the backend applications. Users can then access the iFrame on a page without requiring direct network access to the backend application. A special engine maps Uniform Resource Identifier (URIs) on the iFrame portlet to real URIs from the content providers. The intention of the Web Applications Bridge is to support the complex and heterogeneous web applications. Ensure that the web applications are constructed with common practices and function according to industry accepted standards. Since there are no rigorous industry standards, it is impossible to verify that the Web Application Bridge can work with any arbitrary web application. You might need to customize the Web Application Bridge or change the web application to ensure success. The Web Applications Bridge was designed to integrate Microsoft Sharepoint into your website. However, you can integrate with other products. The Web Application Bridge is routinely enhanced to support integration with other products and systems per demand. For those web applications that do not comply or are unable to work correctly, modify the application to support the integration through the Web Application Bridge. In cases where the application cannot be modified to comply with the Web Application Bridge, add custom filters to the Web Application Bridge to process the markup. Take care when you implement these filters for performance and reliability. The customer makes the customization themselves. When you use the Web Application Bridge, access HCL Portal with the fully qualified host name. Integrating the web applications with HCL Digital Experience is a multi-step process. To learn more about the Web Application Bridge, go to Web Application Bridge . Mobile support is provided for web applications that were developed and tested for rendering inside mobile device browsers. If the web application was originally built and tested for desktops, they will not work properly on a mobile device. Instead, they display the same way that they would on the desktop. If the web application provides navigation, content, and features for a mobile device, it is available when rendered through the Web Dock portlet. Configure the Web Dock portlet to always allow dynamic size. This setting allows the screen to respond to the different sizes of the applications. If you do not have Dynamic Size set to always, the Web Dock portlet shows the desktop version of the content. Note: Mobile devices might not show scroll bars for any overflow content. Instead, the swipe feature of the mobile is enabled.","title":"Integrating with web applications"},{"location":"allnewfeatures/digital_asset_mgmt/dam_restore_image_helm/","text":"Restore Digital Asset Management image to previous version This section shows you how to restore the HCL Digital Experience 9.5 Digital Asset Management image to a previous version. Restore DAM image using Helm This procedure restores your DAM deployment to a previous version, in case the database migration fails repeatedly. See Update deployment to a later version for more information on updating your Helm deployment. For the latest HCL DX 9.5 images, see Docker image list . To restore, get the custom-values.yaml file and modify the digitalAssetManagement property value and replace it with the previous image version tag. In this example, digitalAssetManagement is updated with the CF196 DAM image version tag: # Ensure to use the correct image version tags digitalAssetManagement: \"95_CF196_20210625-2013\" Parent topic: Update deployment to a later version","title":"Restore Digital Asset Management image to previous version"},{"location":"allnewfeatures/digital_asset_mgmt/dam_restore_image_helm/#restore-digital-asset-management-image-to-previous-version","text":"This section shows you how to restore the HCL Digital Experience 9.5 Digital Asset Management image to a previous version.","title":"Restore Digital Asset Management image to previous version"},{"location":"allnewfeatures/digital_asset_mgmt/dam_restore_image_helm/#restore-dam-image-using-helm","text":"This procedure restores your DAM deployment to a previous version, in case the database migration fails repeatedly. See Update deployment to a later version for more information on updating your Helm deployment. For the latest HCL DX 9.5 images, see Docker image list . To restore, get the custom-values.yaml file and modify the digitalAssetManagement property value and replace it with the previous image version tag. In this example, digitalAssetManagement is updated with the CF196 DAM image version tag: # Ensure to use the correct image version tags digitalAssetManagement: \"95_CF196_20210625-2013\" Parent topic: Update deployment to a later version","title":"Restore DAM image using Helm"},{"location":"allnewfeatures/digital_asset_mgmt/dam_restore_image_operator/","text":"Restore Digital Asset Management image to previous version This shows you how to restore the HCL Digital Experience 9.5 Digital Asset Management image to a previous version. You can restore your DAM deployment to a previous version, in case the database migration fails repeatedly. See Updating a deployment for more information on updating your deployment using dxctl. For the latest HCL DX 9.5 images, see Docker image list . To restore, get the properties file and modify the dam.tag property value under ## DAM configuration and replace it with the previous image version tag. In this example, dam.tag is updated with the CF196 DAM image version tag: ``` Ensure to use the correct image version tags dam.tag: \"95_CF196_20210625-2013\" ``` Parent topic: Backup and recovery procedures Containerization","title":"Restore Digital Asset Management image to previous version"},{"location":"allnewfeatures/digital_asset_mgmt/dam_restore_image_operator/#restore-digital-asset-management-image-to-previous-version","text":"This shows you how to restore the HCL Digital Experience 9.5 Digital Asset Management image to a previous version. You can restore your DAM deployment to a previous version, in case the database migration fails repeatedly. See Updating a deployment for more information on updating your deployment using dxctl. For the latest HCL DX 9.5 images, see Docker image list . To restore, get the properties file and modify the dam.tag property value under ## DAM configuration and replace it with the previous image version tag. In this example, dam.tag is updated with the CF196 DAM image version tag: ```","title":"Restore Digital Asset Management image to previous version"},{"location":"allnewfeatures/digital_asset_mgmt/dam_restore_image_operator/#ensure-to-use-the-correct-image-version-tags","text":"dam.tag: \"95_CF196_20210625-2013\" ``` Parent topic: Backup and recovery procedures Containerization","title":"Ensure to use the correct image version tags"},{"location":"allnewfeatures/digital_asset_mgmt/digital_asset_mgmt_overview/","text":"HCL Digital Asset Management HCL Digital Asset Management (DAM) delivers a central platform to store and include rich media assets in Digital Experience site content to present engaging, consistently branded experiences across digital channels. Users can access the HCL Digital Asset Management features in HCL Digital Experience 9.5 Container Update Release CF181 and higher releases. Follow the instructions below to install, configure, and use the HCL Digital Experience 9.5 Digital Asset Management features. Notes: The following limitations exist in HCL Digital Asset Management: Content created using Content Composer and Digital Asset Management cannot be used with the HCL Digital Experience Projects capabilities. Content Composer and Digital Asset Management may not be used with HCL DX 9.5 container deployments that set an alternate context root. Renditions for graphics interchange format (GIF) images are not yet supported. The use of Content Composer features in a Virtual Portal deployment pattern is not yet supported. When planning to use the Content Composer features in an authoring environment, with the Container Update CF181 release, it is only supported when running with one Digital Experience 9.5 core container (pod). This limitation does not apply when using the Web Content Management Authoring Portlet or when just using the new Digital Asset Management feature. It also does not apply to environments used for rendering. When using Kaltura with Digital Asset Management, all uploaded videos are anonymously accessible for everyone who knows the URL, regardless of the access control setting on the collection containing the video. Do not use Kaltura integration if you have sensitive videos that should not be available without authentication. If you are using a content delivery network (CDN) such as Akamai , using Vary: Origin may prevent you from caching content. To bypass this limitation, your CDN configuration must strip the Vary header on the way in, to reinstate your ability to cache content. On the way out, you can append the Origin parameter to the Vary header when serving a response using 'Modify Outgoing Response Header' .","title":"HCL Digital Asset Management"},{"location":"allnewfeatures/digital_asset_mgmt/digital_asset_mgmt_overview/#hcl-digital-asset-management","text":"HCL Digital Asset Management (DAM) delivers a central platform to store and include rich media assets in Digital Experience site content to present engaging, consistently branded experiences across digital channels. Users can access the HCL Digital Asset Management features in HCL Digital Experience 9.5 Container Update Release CF181 and higher releases. Follow the instructions below to install, configure, and use the HCL Digital Experience 9.5 Digital Asset Management features. Notes: The following limitations exist in HCL Digital Asset Management: Content created using Content Composer and Digital Asset Management cannot be used with the HCL Digital Experience Projects capabilities. Content Composer and Digital Asset Management may not be used with HCL DX 9.5 container deployments that set an alternate context root. Renditions for graphics interchange format (GIF) images are not yet supported. The use of Content Composer features in a Virtual Portal deployment pattern is not yet supported. When planning to use the Content Composer features in an authoring environment, with the Container Update CF181 release, it is only supported when running with one Digital Experience 9.5 core container (pod). This limitation does not apply when using the Web Content Management Authoring Portlet or when just using the new Digital Asset Management feature. It also does not apply to environments used for rendering. When using Kaltura with Digital Asset Management, all uploaded videos are anonymously accessible for everyone who knows the URL, regardless of the access control setting on the collection containing the video. Do not use Kaltura integration if you have sensitive videos that should not be available without authentication. If you are using a content delivery network (CDN) such as Akamai , using Vary: Origin may prevent you from caching content. To bypass this limitation, your CDN configuration must strip the Vary header on the way in, to reinstate your ability to cache content. On the way out, you can append the Origin parameter to the Vary header when serving a response using 'Modify Outgoing Response Header' .","title":"HCL Digital Asset Management"},{"location":"allnewfeatures/digital_asset_mgmt/helm_dam_backup_restore_image/","text":"Back up and restore a DAM image This topic shows you how to backup and restore for Digital Asset Management persistence and binaries in a Helm-based deployment. This procedure is not meant for moving DAM data to another deployment. The backup data is valid only on the deployment where the backup is performed. Back up your database Verify that persistence (read-write) and DAM pods are up and running: kubectl -n <namespace> get all Example: kubectl -n dxns get all You may see more than one persistence pods running: pod/dx-deployment-persistence-node-0 2/2 Running 0 3h49m pod/dx-deployment-persistence-node-1 2/2 Running 0 3h48m pod/dx-deployment-persistence-node-2 2/2 Running 0 3h48m The number of these pods configured as stateful sets is listed at the end of the report. Take note of this number as you will need this for step 5. NAME READY AGE statefulset.apps/dx-deployment-core 1/1 4h1m statefulset.apps/dx-deployment-digital-asset-management 1/1 4h1m statefulset.apps/dx-deployment-open-ldap 1/1 4h1m statefulset.apps/dx-deployment-persistence-node 3/3 4h1m statefulset.apps/dx-deployment-remote-search 1/1 4h1m Scale down the number persistence pods to 1. kubectl scale statefulsets <stateful-set-name> -n <namespace> --replicas=1 Example: kubectl scale statefulsets dx-deployment-persistence-node -d dxns --replicas=1 Note: Verify that only 1 persistence pod remains in the deployment. Connect with the persistence pod (read-write). Open a shell in the running persistence pod: kubectl exec --stdin --tty pod/<pod-name> -n <namespace> -- /bin/bash Example: kubectl exec --stdin --tty pod/dx-deployment-persistence-node-0 -n dxns -- /bin/bash Dump the current database: pg_dump dxmediadb > /tmp/dxmediadb.dmp Close the shell in the persistence pod: exit Download the database dump to the local system: kubectl cp <namespace>/<pod-name>:<source-file> <target-file> Example: kubectl cp dxns/dx-deployment-persistence:/tmp/dxmediadb.dmp /tmp/dxmediadb.dmp Set the number of persistence pods back to the number you noted from step 1: kubectl scale statefulsets <stateful-set-name> -n <namespace> --replicas=<new-replicas> Example: kubectl scale statefulsets dx-deployment-persistence-node -n dxns --replicas=3 Back up your DAM binary Connect to the DAM pod. Open a shell in the running DAM pod: kubectl exec --stdin --tty pod/<pod-name> -n <namespace> -- /bin/bash Example: kubectl exec --stdin --tty pod/dx-deployment-dam-0 -n dxns -- /bin/bash Compress the DAM binaries located under /opt/app/upload directory: tar -cvpzf backupml.tar.gz --exclude=/backupml.tar.gz --one-file-system --directory /opt/app/upload . Close the shell in the DAM pod: exit Download the compressed binaries to the local system. From a local system, you can now download the backup DAM binaries from the DAM pod: kubectl cp <namespace>/<pod-name>:<source-file> <target-file> Example: kubectl cp dxns/dx-deployment-dam-0:/opt/app/server-v1/backupml.tar.gz /tmp/backupml.tar.gz Restore your DAM binary Upload the backup binary to the DAM pod. You can now transfer the backup database to the remote DAM pod: kubectl cp <source-file> <namespace>/<pod-name>:<target-file> Example: kubectl cp /tmp/backupml.tar.gz dxns/dx-deployment-dam-0:/tmp/backupml.tar.gz Connect to the DAM pod. Open a shell in the running DAM pod: kubectl exec --stdin --tty pod/<pod-name> -n <namespace> -- /bin/bash Example: kubectl exec --stdin --tty pod/dx-deployment-dam-0 -n dxns -- /bin/bash Restore the DAM binaries: tar -mpxf /tmp/backupml.tar.gz --directory /opt/app/upload rm /backupml.tar.gz Close the shell in the DAM pod: exit Restore your database Verify that persistence (read-write) and DAM pods are running: kubectl -n <namespace> get all Example: kubectl -n dxns get all Scale down the number persistence pods to 1. kubectl scale statefulsets <stateful-set-name> -n <namespace> --replicas=1 Example: kubectl scale statefulsets dx-deployment-persistence-node -d dxns --replicas=1 Note: Verify that only 1 persistence pod remains in the deployment. Copy the database dump file to the persistence pod: kubectl cp <target-file> <namespace>/<pod-name>:<target-file> Example: kubectl cp dxmediadb.dmp dxns/dx-deployment-persistence:/tmp/dxmediadb.dmp Connect to the persistence pod (read-write). Open a shell in the running persistence pod: kubectl exec --stdin --tty pod/<pod-name> -n <namespace> -- /bin/bash Example: kubectl -n dxns exec --stdin --tty pod/dx-deployment-persistence -d dxns -- /bin/bash Run the following commands in order: Set the database connection limit to 0 for dxmediadb : psql -c \"ALTER DATABASE dxmediadb CONNECTION LIMIT 0;\" Terminate all the existing connections to the database, if any: psql -c \"SELECT pg_terminate_backend(pg_stat_activity.pid) FROM pg_stat_activity WHERE pg_stat_activity.datname = 'dxmediadb' AND pid <> pg_backend_pid();\" Drop the database dxmediadb : dropdb dxmediadb Note: If you are getting the following error, run the two commands from this step again until it completes without the error occurring. shell dropdb: database removal failed: ERROR: database \"dxmediadb\" is being accessed by other users Create the database. createdb -O dxuser dxmediadb Restore the database. psql dxmediadb < dxmediadb.dmp Restore the database connection limit: psql -c \"ALTER DATABASE dxmediadb CONNECTION LIMIT 500;\" Close the shell in the persistence pod (read-write): exit Set the number of persistence pods back to the number you noted from step 1 from Back up your database: kubectl scale statefulsets <stateful-set-name> -n <namespace> --replicas=<new-replicas> Example: kubectl scale statefulsets dx-deployment-persistence-node -n dxns --replicas=3 Additional step to restore your database The DAM pods start working in a few minutes. If not, you may delete the DAM pod: kubectl delete pod <dam-pod-name> -n <namespace> Example: kubectl delete pod dx-deployment-dam-0 -n dxns Parent topic: Backup and recovery procedures for Helm Containerization","title":"Back up and restore a DAM image"},{"location":"allnewfeatures/digital_asset_mgmt/helm_dam_backup_restore_image/#back-up-and-restore-a-dam-image","text":"This topic shows you how to backup and restore for Digital Asset Management persistence and binaries in a Helm-based deployment. This procedure is not meant for moving DAM data to another deployment. The backup data is valid only on the deployment where the backup is performed. Back up your database Verify that persistence (read-write) and DAM pods are up and running: kubectl -n <namespace> get all Example: kubectl -n dxns get all You may see more than one persistence pods running: pod/dx-deployment-persistence-node-0 2/2 Running 0 3h49m pod/dx-deployment-persistence-node-1 2/2 Running 0 3h48m pod/dx-deployment-persistence-node-2 2/2 Running 0 3h48m The number of these pods configured as stateful sets is listed at the end of the report. Take note of this number as you will need this for step 5. NAME READY AGE statefulset.apps/dx-deployment-core 1/1 4h1m statefulset.apps/dx-deployment-digital-asset-management 1/1 4h1m statefulset.apps/dx-deployment-open-ldap 1/1 4h1m statefulset.apps/dx-deployment-persistence-node 3/3 4h1m statefulset.apps/dx-deployment-remote-search 1/1 4h1m Scale down the number persistence pods to 1. kubectl scale statefulsets <stateful-set-name> -n <namespace> --replicas=1 Example: kubectl scale statefulsets dx-deployment-persistence-node -d dxns --replicas=1 Note: Verify that only 1 persistence pod remains in the deployment. Connect with the persistence pod (read-write). Open a shell in the running persistence pod: kubectl exec --stdin --tty pod/<pod-name> -n <namespace> -- /bin/bash Example: kubectl exec --stdin --tty pod/dx-deployment-persistence-node-0 -n dxns -- /bin/bash Dump the current database: pg_dump dxmediadb > /tmp/dxmediadb.dmp Close the shell in the persistence pod: exit Download the database dump to the local system: kubectl cp <namespace>/<pod-name>:<source-file> <target-file> Example: kubectl cp dxns/dx-deployment-persistence:/tmp/dxmediadb.dmp /tmp/dxmediadb.dmp Set the number of persistence pods back to the number you noted from step 1: kubectl scale statefulsets <stateful-set-name> -n <namespace> --replicas=<new-replicas> Example: kubectl scale statefulsets dx-deployment-persistence-node -n dxns --replicas=3 Back up your DAM binary Connect to the DAM pod. Open a shell in the running DAM pod: kubectl exec --stdin --tty pod/<pod-name> -n <namespace> -- /bin/bash Example: kubectl exec --stdin --tty pod/dx-deployment-dam-0 -n dxns -- /bin/bash Compress the DAM binaries located under /opt/app/upload directory: tar -cvpzf backupml.tar.gz --exclude=/backupml.tar.gz --one-file-system --directory /opt/app/upload . Close the shell in the DAM pod: exit Download the compressed binaries to the local system. From a local system, you can now download the backup DAM binaries from the DAM pod: kubectl cp <namespace>/<pod-name>:<source-file> <target-file> Example: kubectl cp dxns/dx-deployment-dam-0:/opt/app/server-v1/backupml.tar.gz /tmp/backupml.tar.gz Restore your DAM binary Upload the backup binary to the DAM pod. You can now transfer the backup database to the remote DAM pod: kubectl cp <source-file> <namespace>/<pod-name>:<target-file> Example: kubectl cp /tmp/backupml.tar.gz dxns/dx-deployment-dam-0:/tmp/backupml.tar.gz Connect to the DAM pod. Open a shell in the running DAM pod: kubectl exec --stdin --tty pod/<pod-name> -n <namespace> -- /bin/bash Example: kubectl exec --stdin --tty pod/dx-deployment-dam-0 -n dxns -- /bin/bash Restore the DAM binaries: tar -mpxf /tmp/backupml.tar.gz --directory /opt/app/upload rm /backupml.tar.gz Close the shell in the DAM pod: exit Restore your database Verify that persistence (read-write) and DAM pods are running: kubectl -n <namespace> get all Example: kubectl -n dxns get all Scale down the number persistence pods to 1. kubectl scale statefulsets <stateful-set-name> -n <namespace> --replicas=1 Example: kubectl scale statefulsets dx-deployment-persistence-node -d dxns --replicas=1 Note: Verify that only 1 persistence pod remains in the deployment. Copy the database dump file to the persistence pod: kubectl cp <target-file> <namespace>/<pod-name>:<target-file> Example: kubectl cp dxmediadb.dmp dxns/dx-deployment-persistence:/tmp/dxmediadb.dmp Connect to the persistence pod (read-write). Open a shell in the running persistence pod: kubectl exec --stdin --tty pod/<pod-name> -n <namespace> -- /bin/bash Example: kubectl -n dxns exec --stdin --tty pod/dx-deployment-persistence -d dxns -- /bin/bash Run the following commands in order: Set the database connection limit to 0 for dxmediadb : psql -c \"ALTER DATABASE dxmediadb CONNECTION LIMIT 0;\" Terminate all the existing connections to the database, if any: psql -c \"SELECT pg_terminate_backend(pg_stat_activity.pid) FROM pg_stat_activity WHERE pg_stat_activity.datname = 'dxmediadb' AND pid <> pg_backend_pid();\" Drop the database dxmediadb : dropdb dxmediadb Note: If you are getting the following error, run the two commands from this step again until it completes without the error occurring. shell dropdb: database removal failed: ERROR: database \"dxmediadb\" is being accessed by other users Create the database. createdb -O dxuser dxmediadb Restore the database. psql dxmediadb < dxmediadb.dmp Restore the database connection limit: psql -c \"ALTER DATABASE dxmediadb CONNECTION LIMIT 500;\" Close the shell in the persistence pod (read-write): exit Set the number of persistence pods back to the number you noted from step 1 from Back up your database: kubectl scale statefulsets <stateful-set-name> -n <namespace> --replicas=<new-replicas> Example: kubectl scale statefulsets dx-deployment-persistence-node -n dxns --replicas=3 Additional step to restore your database The DAM pods start working in a few minutes. If not, you may delete the DAM pod: kubectl delete pod <dam-pod-name> -n <namespace> Example: kubectl delete pod dx-deployment-dam-0 -n dxns Parent topic: Backup and recovery procedures for Helm Containerization","title":"Back up and restore a DAM image"},{"location":"allnewfeatures/digital_asset_mgmt/manage_collections/","text":"Manage collections Learn more about creating, configuring, and deleting media asset collections using Digital Asset Management. Prerequisite HCL Digital Asset Management should be installed and configured to HCL Digital Experience 9.5 Container Release Update CF181 and higher. See the Install the HCL Digital Experience 9.5 Container components topic for instructions. Browse and search media assets in a collection Follow these steps to work with Collections in HCL Digital Experience 9.5 Digital Asset Management. From the HCL Digital Experience 9.5 Digital Asset Management interface, click Collections . The HCL Digital Experience 9.5 Digital Asset Management interface allows you to see previews of media assets for a specified collection. For example, a curated set of media assets are grouped in a collection named Furniture Gallery as shown below. This Collections interface presents you with the following options: Create Collection - Create a new collection or a new nested collection (when used inside an existing collection) View information - opens the Information panel and shows Access Control Information - Allows you to update the Collection name and description. Access Control - Allows you to set who can access the media assets in the Collection. Delete Collection - Deletes the selected Collection. Select the Filter option to filter media asset results by Favorites , by Asset types , or Asset size . Favorites - Filters media assets added to your favorites. Asset types - Filters media assets by type. You can further refine search results by selecting a specific file type. Asset size - Filters media assets by size. Note: Asset size filter is available in HCL DX CF192 and later. On the top right, click the Grid or List icon ( Open view options ) to change how the media assets or collections are displayed: View as - Lists options to view media assets or collections. Grid - Shows media assets in an equal-sized thumbnail view. This is the default display view. List - Shows media assets in a standard list. Use this view to access a media asset when you can recognize the asset by its attributes, such as its file name. Sort by - Lists options to sort media assets or collections: Date Name Type Size Order - Lists options to sort order of media assets or collections depending on the selected Sort by option: Date Order by file name by Older to newer date Order by file name by Newer to older date - Name Order by file name from A-Z Order by file name Z-A - Type Ascending Descending - Size Smaller to larger Larger to smaller Modify information metadata of a media asset collection From the HCL Digital Experience 9.5 Digital Asset Management interface, hover over a collection and click the Information icon (small i). On the Information panel, edit the Collection name and Description as applicable. Click Save to save changes. Manage user access permissions of a media asset collection Video : Configuring user access permissions to Digital Asset Management assets From the HCL Digital Experience 9.5 Digital Asset Management interface, hover over a collection and click Information (small i). Click Access . Assign levels for other users to access media items stored within the collection by clicking Add user . When you click Add User , a pop-up displays options to add these user access levels for individuals and groups as defined by the user directory integrated to your Digital Experience platform. Select the appropriate member. In this example, click Administrator . Select the appropriate Access rights . For this example, click All authenticated DX users . Click Add users and groups to save changes. Once added, you can specify additional users for the selected access right. Select the access right to add a member or groups. For this example, click Add Administrator . Once done, click Add users and groups to save changes. Delete a collection From the HCL Digital Experience 9.5 Digital Asset Management interface, hover over a collection and click Delete . A pop-up message displays to confirm your action. Once a collection is deleted, you can no longer retrieve it, including the media assets, renditions, and versions you have used as your web content. Click Delete to proceed with deleting the collection. HCL Digital Experience Solution Feedback HCL Digital Experience is interested in your experience and feedback working with HCL Digital Experience 9.5 release software. To offer comments or issues on your findings, please access the HCL Digital Experience 9.5 Feedback Reporting application .","title":"Manage collections"},{"location":"allnewfeatures/digital_asset_mgmt/manage_collections/#manage-collections","text":"Learn more about creating, configuring, and deleting media asset collections using Digital Asset Management.","title":"Manage collections"},{"location":"allnewfeatures/digital_asset_mgmt/manage_collections/#prerequisite","text":"HCL Digital Asset Management should be installed and configured to HCL Digital Experience 9.5 Container Release Update CF181 and higher. See the Install the HCL Digital Experience 9.5 Container components topic for instructions.","title":"Prerequisite"},{"location":"allnewfeatures/digital_asset_mgmt/manage_collections/#browse-and-search-media-assets-in-a-collection","text":"Follow these steps to work with Collections in HCL Digital Experience 9.5 Digital Asset Management. From the HCL Digital Experience 9.5 Digital Asset Management interface, click Collections . The HCL Digital Experience 9.5 Digital Asset Management interface allows you to see previews of media assets for a specified collection. For example, a curated set of media assets are grouped in a collection named Furniture Gallery as shown below. This Collections interface presents you with the following options: Create Collection - Create a new collection or a new nested collection (when used inside an existing collection) View information - opens the Information panel and shows Access Control Information - Allows you to update the Collection name and description. Access Control - Allows you to set who can access the media assets in the Collection. Delete Collection - Deletes the selected Collection. Select the Filter option to filter media asset results by Favorites , by Asset types , or Asset size . Favorites - Filters media assets added to your favorites. Asset types - Filters media assets by type. You can further refine search results by selecting a specific file type. Asset size - Filters media assets by size. Note: Asset size filter is available in HCL DX CF192 and later. On the top right, click the Grid or List icon ( Open view options ) to change how the media assets or collections are displayed: View as - Lists options to view media assets or collections. Grid - Shows media assets in an equal-sized thumbnail view. This is the default display view. List - Shows media assets in a standard list. Use this view to access a media asset when you can recognize the asset by its attributes, such as its file name. Sort by - Lists options to sort media assets or collections: Date Name Type Size Order - Lists options to sort order of media assets or collections depending on the selected Sort by option: Date Order by file name by Older to newer date Order by file name by Newer to older date - Name Order by file name from A-Z Order by file name Z-A - Type Ascending Descending - Size Smaller to larger Larger to smaller","title":"Browse and search media assets in a collection"},{"location":"allnewfeatures/digital_asset_mgmt/manage_collections/#modify-information-metadata-of-a-media-asset-collection","text":"From the HCL Digital Experience 9.5 Digital Asset Management interface, hover over a collection and click the Information icon (small i). On the Information panel, edit the Collection name and Description as applicable. Click Save to save changes.","title":"Modify information metadata of a media asset collection"},{"location":"allnewfeatures/digital_asset_mgmt/manage_collections/#manage-user-access-permissions-of-a-media-asset-collection","text":"Video : Configuring user access permissions to Digital Asset Management assets From the HCL Digital Experience 9.5 Digital Asset Management interface, hover over a collection and click Information (small i). Click Access . Assign levels for other users to access media items stored within the collection by clicking Add user . When you click Add User , a pop-up displays options to add these user access levels for individuals and groups as defined by the user directory integrated to your Digital Experience platform. Select the appropriate member. In this example, click Administrator . Select the appropriate Access rights . For this example, click All authenticated DX users . Click Add users and groups to save changes. Once added, you can specify additional users for the selected access right. Select the access right to add a member or groups. For this example, click Add Administrator . Once done, click Add users and groups to save changes.","title":"Manage user access permissions of a media asset collection"},{"location":"allnewfeatures/digital_asset_mgmt/manage_collections/#delete-a-collection","text":"From the HCL Digital Experience 9.5 Digital Asset Management interface, hover over a collection and click Delete . A pop-up message displays to confirm your action. Once a collection is deleted, you can no longer retrieve it, including the media assets, renditions, and versions you have used as your web content. Click Delete to proceed with deleting the collection.","title":"Delete a collection"},{"location":"allnewfeatures/digital_asset_mgmt/manage_collections/#hcl-digital-experience-solution-feedback","text":"HCL Digital Experience is interested in your experience and feedback working with HCL Digital Experience 9.5 release software. To offer comments or issues on your findings, please access the HCL Digital Experience 9.5 Feedback Reporting application .","title":"HCL Digital Experience Solution Feedback"},{"location":"allnewfeatures/digital_asset_mgmt/operator_dam_backup_restore_image/","text":"Back up and restore a DAM image This topic shows you how to backup and restore for Digital Asset Management persistence and binaries in an Operator-based deployment using dxctl . This procedure is not meant for moving DAM data to another deployment. The backup data is valid only on the deployment where the backup is performed. Note: The steps in this section are supported for HCL DX 9.5 Container Update CF195 or later deployments. Please contact HCL Support if you need to perform backup/restore for container deployments at earlier levels. Back up your database Verify that persistence (read-write) and DAM pods are up and running: kubectl -n <namespace> get all Example: kubectl -n dxns get all Disable the persistence read-only pods by setting the following properties in the deployment properties file: persist.minreplicas: 1 persist.force-read: false Then run the following command: dxctl --update -p deployment.properties Note: Verify that there are no read-only pods in the deployment. Connect with the persistence pod (read-write). Open a shell in the running persistence pod: kubectl exec --stdin --tty pod/<pod-name> -n <namespace> -- /bin/bash Example: kubectl exec --stdin --tty pod/dx-deployment-persistence-0 -n dxns -- /bin/bash Dump the current database: pg_dump dxmediadb > /tmp/dxmediadb.dmp Close the shell in the persistence pod: exit Download the database dump to the local system: kubectl cp <namespace>/<pod-name>:<source-file> <target-file> Example: kubectl cp dxns/dx-deployment-persistence-0:/tmp/dxmediadb.dmp /tmp/dxmediadb.dmp Back up your DAM binary Connect to the DAM pod. Open a shell in the running DAM pod: kubectl exec --stdin --tty pod/<pod-name> -n <namespace> -- /bin/bash Example: kubectl exec --stdin --tty pod/dx-deployment-dam-0 -n dxns -- /bin/bash Compress the DAM binaries located under /opt/app/upload directory: tar -cvpzf backupml.tar.gz --exclude=/backupml.tar.gz --one-file-system --directory /opt/app/upload . Close the shell in the DAM pod: exit Download the compressed binaries to the local system. From a local system, you can now download the backup DAM binaries from the DAM pod: kubectl cp <namespace>/<pod-name>:<source-file> <target-file> Example: kubectl cp dxns/dx-deployment-dam-0:/opt/app/server-v1/backupml.tar.gz /tmp/backupml.tar.gz Restore your DAM binary Upload the backup binary to the DAM pod. You can now transfer the backup database to the remote DAM pod: kubectl cp <source-file> <namespace>/<pod-name>:<target-file> Example: kubectl cp /tmp/backupml.tar.gz dxns/dx-deployment-dam-0:/tmp/backupml.tar.gz Connect to the DAM pod. Use the following command to open a shell in the running DAM pod: kubectl exec --stdin --tty pod/<pod-name> -n <namespace> -- /bin/bash Example: kubectl exec --stdin --tty pod/dx-deployment-dam-0 -n dxns -- /bin/bash Restore the DAM binaries: tar -mpxf /tmp/backupml.tar.gz --directory /opt/app/upload rm /backupml.tar.gz Close the shell in the DAM pod: exit Restore your database Verify that persistence (read-write) and DAM pods are running: kubectl -n <namespace> get all Example: kubectl -n dxns get all Copy the database dump file to the persistence pod: kubectl cp <target-file> <namespace>/<pod-name>:<target-file> Example: kubectl cp dxmediadb.dmp dxns/dx-deployment-persistence-0:/tmp/dxmediadb.dmp Connect to the persistence pod (read-write). Open a shell in the running persistence pod: kubectl exec --stdin --tty pod/<pod-name> -n <namespace> -- /bin/bash Example: kubectl exec --stdin --tty pod/dx-deployment-persistence-0 -n dxns -- /bin/bash Run the following commands in order: Set the database connection limit to 0 for dxmediadb : psql -c \"ALTER DATABASE dxmediadb CONNECTION LIMIT 0;\" Terminate all the existing connections to the database, if any: psql -c \"SELECT pg_terminate_backend(pg_stat_activity.pid) FROM pg_stat_activity WHERE pg_stat_activity.datname = 'dxmediadb' AND pid <> pg_backend_pid();\" Drop the database dxmediadb : dropdb dxmediadb Note: If you are getting the following error, run the two commands from this step again until it completes without the error occurring. dropdb: database removal failed: ERROR: database \"dxmediadb\" is being accessed by other users Create the database. createdb -O dxuser dxmediadb Restore the database. psql dxmediadb < dxmediadb.dmp Restore the database connection limit: psql -c \"ALTER DATABASE dxmediadb CONNECTION LIMIT 500;\" Close the shell in the persistence pod (read-write): exit Additional steps to restore your database The DAM pods start working in a few minutes. If not, you may delete the DAM pod: kubectl delete pod <dam-pod-name> -n <namespace> Example: kubectl delete pod dx-deployment-dam-0 -n dxns You must reset the read-only pod. Do the following steps: Get all the PersistentVolumeClaim ( PVC ) from the deployment. kubectl get pvc -n <name space> Example: kubectl get pvc -n dxns Delete the PVC for the read-only pods. kubectl delete pvc <pvc-name-for-read-only-pod> -n <namespace> Example: kubectl delete pvc dam-persistence-dx-deployment-persistence-ro-0 -n dxns Enable the read-only pods. To enable the read-only pods, set persist.force-read to true in deployment properties file. You may also update the persist.minreplicas: with the value you configured earlier. persist.minreplicas: 1 persist.force-read: true Then run the following command: dxctl --update -p deployment.properties Parent topic: Backup and recovery procedures Containerization","title":"Back up and restore a DAM image"},{"location":"allnewfeatures/digital_asset_mgmt/operator_dam_backup_restore_image/#back-up-and-restore-a-dam-image","text":"This topic shows you how to backup and restore for Digital Asset Management persistence and binaries in an Operator-based deployment using dxctl . This procedure is not meant for moving DAM data to another deployment. The backup data is valid only on the deployment where the backup is performed. Note: The steps in this section are supported for HCL DX 9.5 Container Update CF195 or later deployments. Please contact HCL Support if you need to perform backup/restore for container deployments at earlier levels. Back up your database Verify that persistence (read-write) and DAM pods are up and running: kubectl -n <namespace> get all Example: kubectl -n dxns get all Disable the persistence read-only pods by setting the following properties in the deployment properties file: persist.minreplicas: 1 persist.force-read: false Then run the following command: dxctl --update -p deployment.properties Note: Verify that there are no read-only pods in the deployment. Connect with the persistence pod (read-write). Open a shell in the running persistence pod: kubectl exec --stdin --tty pod/<pod-name> -n <namespace> -- /bin/bash Example: kubectl exec --stdin --tty pod/dx-deployment-persistence-0 -n dxns -- /bin/bash Dump the current database: pg_dump dxmediadb > /tmp/dxmediadb.dmp Close the shell in the persistence pod: exit Download the database dump to the local system: kubectl cp <namespace>/<pod-name>:<source-file> <target-file> Example: kubectl cp dxns/dx-deployment-persistence-0:/tmp/dxmediadb.dmp /tmp/dxmediadb.dmp Back up your DAM binary Connect to the DAM pod. Open a shell in the running DAM pod: kubectl exec --stdin --tty pod/<pod-name> -n <namespace> -- /bin/bash Example: kubectl exec --stdin --tty pod/dx-deployment-dam-0 -n dxns -- /bin/bash Compress the DAM binaries located under /opt/app/upload directory: tar -cvpzf backupml.tar.gz --exclude=/backupml.tar.gz --one-file-system --directory /opt/app/upload . Close the shell in the DAM pod: exit Download the compressed binaries to the local system. From a local system, you can now download the backup DAM binaries from the DAM pod: kubectl cp <namespace>/<pod-name>:<source-file> <target-file> Example: kubectl cp dxns/dx-deployment-dam-0:/opt/app/server-v1/backupml.tar.gz /tmp/backupml.tar.gz Restore your DAM binary Upload the backup binary to the DAM pod. You can now transfer the backup database to the remote DAM pod: kubectl cp <source-file> <namespace>/<pod-name>:<target-file> Example: kubectl cp /tmp/backupml.tar.gz dxns/dx-deployment-dam-0:/tmp/backupml.tar.gz Connect to the DAM pod. Use the following command to open a shell in the running DAM pod: kubectl exec --stdin --tty pod/<pod-name> -n <namespace> -- /bin/bash Example: kubectl exec --stdin --tty pod/dx-deployment-dam-0 -n dxns -- /bin/bash Restore the DAM binaries: tar -mpxf /tmp/backupml.tar.gz --directory /opt/app/upload rm /backupml.tar.gz Close the shell in the DAM pod: exit Restore your database Verify that persistence (read-write) and DAM pods are running: kubectl -n <namespace> get all Example: kubectl -n dxns get all Copy the database dump file to the persistence pod: kubectl cp <target-file> <namespace>/<pod-name>:<target-file> Example: kubectl cp dxmediadb.dmp dxns/dx-deployment-persistence-0:/tmp/dxmediadb.dmp Connect to the persistence pod (read-write). Open a shell in the running persistence pod: kubectl exec --stdin --tty pod/<pod-name> -n <namespace> -- /bin/bash Example: kubectl exec --stdin --tty pod/dx-deployment-persistence-0 -n dxns -- /bin/bash Run the following commands in order: Set the database connection limit to 0 for dxmediadb : psql -c \"ALTER DATABASE dxmediadb CONNECTION LIMIT 0;\" Terminate all the existing connections to the database, if any: psql -c \"SELECT pg_terminate_backend(pg_stat_activity.pid) FROM pg_stat_activity WHERE pg_stat_activity.datname = 'dxmediadb' AND pid <> pg_backend_pid();\" Drop the database dxmediadb : dropdb dxmediadb Note: If you are getting the following error, run the two commands from this step again until it completes without the error occurring. dropdb: database removal failed: ERROR: database \"dxmediadb\" is being accessed by other users Create the database. createdb -O dxuser dxmediadb Restore the database. psql dxmediadb < dxmediadb.dmp Restore the database connection limit: psql -c \"ALTER DATABASE dxmediadb CONNECTION LIMIT 500;\" Close the shell in the persistence pod (read-write): exit Additional steps to restore your database The DAM pods start working in a few minutes. If not, you may delete the DAM pod: kubectl delete pod <dam-pod-name> -n <namespace> Example: kubectl delete pod dx-deployment-dam-0 -n dxns You must reset the read-only pod. Do the following steps: Get all the PersistentVolumeClaim ( PVC ) from the deployment. kubectl get pvc -n <name space> Example: kubectl get pvc -n dxns Delete the PVC for the read-only pods. kubectl delete pvc <pvc-name-for-read-only-pod> -n <namespace> Example: kubectl delete pvc dam-persistence-dx-deployment-persistence-ro-0 -n dxns Enable the read-only pods. To enable the read-only pods, set persist.force-read to true in deployment properties file. You may also update the persist.minreplicas: with the value you configured earlier. persist.minreplicas: 1 persist.force-read: true Then run the following command: dxctl --update -p deployment.properties Parent topic: Backup and recovery procedures Containerization","title":"Back up and restore a DAM image"},{"location":"allnewfeatures/practitioner_studio/enable_prac_studio/","text":"How to enable Practitioner Studio This section outlines how to enable Practitioner Studio and Woodburn Studio in both base portal and virtual portal environments. Enabling Practitioner Studio and Woodburn Studio in base portal Note: It is not necessary to stop or restart Portal when running these configuration tasks. Please note that in order for you to deploy Practitioner Studio and Woodburn Studio to a virtual portal, you must first enable the 95 UI features in base Portal. Open a command line. Change to the wp_profile-root/ConfigEngine directory. Run the enable-v95-UI-features config task. AIX: ./ConfigEngine.sh **enable-v95-UI-features** -DWasPassword=<WAS admin password> -DPortalAdminPwd=<Portal admin password> Linux: ./ConfigEngine.sh **enable-v95-UI-features** -DWasPassword=<WAS admin password> -DPortalAdminPwd=<Portal admin password> Windows: ConfigEngine.bat **enable-v95-UI-features** -DWasPassword=<WAS admin password> -DPortalAdminPwd=<Portal admin password> Note: Any actions taken when using the Preview As User feature in DAM and CC shows the site as the original user, not the one that you are using to preview. Enabling Practitioner Studio and Woodburn Studio in an existing virtual portal Open a command line. Change to the wp_profile-root/ConfigEngine directory. Run the enable-v95-UI-features-virtual-portal config task. AIX: ./ConfigEngine.sh **enable-v95-UI-features-virtual-portal** -DWasPassword=<WAS admin password> -DPortalAdminPwd=<Portal admin password> **-DVirtualPortalContext=** Linux: ./ConfigEngine.sh **enable-v95-UI-features-virtual-portal** -DWasPassword=<WAS admin password> -DPortalAdminPwd=<Portal admin password> **-DVirtualPortalContext=** Windows: ConfigEngine.bat **enable-v95-UI-features-virtual-portal** -DWasPassword=<WAS admin password> -DPortalAdminPwd=<Portal admin password> **-DVirtualPortalContext=** Notes: To configure the virtual Portal Manager so that Practitioner Studio is deployed for the newly created virtual portals, see How to configure Practitioner Studio . To enable Practitioner Studio and Woodburn Studio on all available Virtual Portals, you can use the following parameter: -DUpdateVPs=true If -DVirtualPortalContext= has a space in the context name, please add quotes around the name of the context. Enabling HCL DX site to be seen in SiteMap Enabling Practitioner Studio via the enable task has the following effect to your previous view: The Administration pages will be disabled, the Home pages will be excluded from the SiteMap, and first-level navigation drop downs in the toolbar and Practitioner Studio. Follow the steps to enable your site to be seen in SiteMap: Navigate to Administration > Managed Pages . Click Edit Page Properties for your home page. Expand Advanced Options and then click I want to set parameters . Create a new parameter com.ibm.portal.Hidden with value false. Save, then test.","title":"How to enable Practitioner Studio"},{"location":"allnewfeatures/practitioner_studio/enable_prac_studio/#how-to-enable-practitioner-studio","text":"This section outlines how to enable Practitioner Studio and Woodburn Studio in both base portal and virtual portal environments.","title":"How to enable Practitioner Studio"},{"location":"allnewfeatures/practitioner_studio/enable_prac_studio/#enabling-practitioner-studio-and-woodburn-studio-in-base-portal","text":"Note: It is not necessary to stop or restart Portal when running these configuration tasks. Please note that in order for you to deploy Practitioner Studio and Woodburn Studio to a virtual portal, you must first enable the 95 UI features in base Portal. Open a command line. Change to the wp_profile-root/ConfigEngine directory. Run the enable-v95-UI-features config task. AIX: ./ConfigEngine.sh **enable-v95-UI-features** -DWasPassword=<WAS admin password> -DPortalAdminPwd=<Portal admin password> Linux: ./ConfigEngine.sh **enable-v95-UI-features** -DWasPassword=<WAS admin password> -DPortalAdminPwd=<Portal admin password> Windows: ConfigEngine.bat **enable-v95-UI-features** -DWasPassword=<WAS admin password> -DPortalAdminPwd=<Portal admin password> Note: Any actions taken when using the Preview As User feature in DAM and CC shows the site as the original user, not the one that you are using to preview.","title":"Enabling Practitioner Studio and Woodburn Studio in base portal"},{"location":"allnewfeatures/practitioner_studio/enable_prac_studio/#enabling-practitioner-studio-and-woodburn-studio-in-an-existing-virtual-portal","text":"Open a command line. Change to the wp_profile-root/ConfigEngine directory. Run the enable-v95-UI-features-virtual-portal config task. AIX: ./ConfigEngine.sh **enable-v95-UI-features-virtual-portal** -DWasPassword=<WAS admin password> -DPortalAdminPwd=<Portal admin password> **-DVirtualPortalContext=** Linux: ./ConfigEngine.sh **enable-v95-UI-features-virtual-portal** -DWasPassword=<WAS admin password> -DPortalAdminPwd=<Portal admin password> **-DVirtualPortalContext=** Windows: ConfigEngine.bat **enable-v95-UI-features-virtual-portal** -DWasPassword=<WAS admin password> -DPortalAdminPwd=<Portal admin password> **-DVirtualPortalContext=** Notes: To configure the virtual Portal Manager so that Practitioner Studio is deployed for the newly created virtual portals, see How to configure Practitioner Studio . To enable Practitioner Studio and Woodburn Studio on all available Virtual Portals, you can use the following parameter: -DUpdateVPs=true If -DVirtualPortalContext= has a space in the context name, please add quotes around the name of the context.","title":"Enabling Practitioner Studio and Woodburn Studio in an existing virtual portal"},{"location":"allnewfeatures/practitioner_studio/enable_prac_studio/#enabling-hcl-dx-site-to-be-seen-in-sitemap","text":"Enabling Practitioner Studio via the enable task has the following effect to your previous view: The Administration pages will be disabled, the Home pages will be excluded from the SiteMap, and first-level navigation drop downs in the toolbar and Practitioner Studio. Follow the steps to enable your site to be seen in SiteMap: Navigate to Administration > Managed Pages . Click Edit Page Properties for your home page. Expand Advanced Options and then click I want to set parameters . Create a new parameter com.ibm.portal.Hidden with value false. Save, then test.","title":"Enabling HCL DX site to be seen in SiteMap"},{"location":"allnewfeatures/practitioner_studio/practitionerstudio_overview/","text":"Practitioner Studio Practitioner Studio is a newly designed user experience for HCL Digital Experience. Please see the following pages to understand how the new navigation is organized. Note: With HCL Digital Experience 9.5 Container Update CF192 and later, the following issues are experienced with use of the Safari web browser (Version 13.0.5 (15608.5.11). These issues, which were found in Web Content from the Practitioner Studio side navigator, will be resolved in a later software update: List navigation is not accessible using keyboard Incorrect focus behavior in Open Search and Close sidebar buttons Remnant of highlight outline of Search icon remains after back-tabbing to Back link Overview Practitioner Studio is a newly designed user experience for HCL Digital Experience. There are several advantages to this new look. The consolidated navigation has a consistent look and feel for most administration tasks so that commonly used tasks are found together. User assistance is easily found and is provided for pages that are in the navigation. In time, this interface also serves as the launching point for newly developed features. Enabling Practitioner Studio deactivates the legacy Administration and Applications pages. However, all of these functions are still available.","title":"Practitioner Studio"},{"location":"allnewfeatures/practitioner_studio/practitionerstudio_overview/#practitioner-studio","text":"Practitioner Studio is a newly designed user experience for HCL Digital Experience. Please see the following pages to understand how the new navigation is organized. Note: With HCL Digital Experience 9.5 Container Update CF192 and later, the following issues are experienced with use of the Safari web browser (Version 13.0.5 (15608.5.11). These issues, which were found in Web Content from the Practitioner Studio side navigator, will be resolved in a later software update: List navigation is not accessible using keyboard Incorrect focus behavior in Open Search and Close sidebar buttons Remnant of highlight outline of Search icon remains after back-tabbing to Back link","title":"Practitioner Studio"},{"location":"allnewfeatures/practitioner_studio/practitionerstudio_overview/#overview","text":"Practitioner Studio is a newly designed user experience for HCL Digital Experience. There are several advantages to this new look. The consolidated navigation has a consistent look and feel for most administration tasks so that commonly used tasks are found together. User assistance is easily found and is provided for pages that are in the navigation. In time, this interface also serves as the launching point for newly developed features. Enabling Practitioner Studio deactivates the legacy Administration and Applications pages. However, all of these functions are still available.","title":"Overview"},{"location":"allnewfeatures/practitioner_studio/working_prac_studio/","text":"Working with Practitioner Studio Learn how to enable, configure and disable Practitioner Studio on the latest version of HCL Digital Experience. If you are using the on-premise installation of HCL Digital Experience 9.5, you will need to perform deployment and configuration steps in order to work with Practitioner Studio. If you choose not to enable Practitioner Studio, you can still do all of the Administrator services that were available in previous releases.","title":"Working with Practitioner Studio"},{"location":"allnewfeatures/practitioner_studio/working_prac_studio/#working-with-practitioner-studio","text":"Learn how to enable, configure and disable Practitioner Studio on the latest version of HCL Digital Experience. If you are using the on-premise installation of HCL Digital Experience 9.5, you will need to perform deployment and configuration steps in order to work with Practitioner Studio. If you choose not to enable Practitioner Studio, you can still do all of the Administrator services that were available in previous releases.","title":"Working with Practitioner Studio"},{"location":"allnewfeatures/woodburn_studio/woodburn_studio/","text":"The Woodburn Studio demo site The Woodburn Studio is a website that demonstrates the use of some of the popular HCL Digital Experience features. Included in HCL Digital Experience 9.5, Woodburn Studio is a demo site for a fictional organization. Its intent is to show some of the themes that exist within HCL Digital Experience. Woodburn Studio leverages in-line editing and site management tools, as well as role and device-based controls on some parts of the site. It is not recommended to use Woodburn Studio for anything but a demo site. Woodburn Studio currently does not have E-commerce functionality. The Woodburn Studio demo site has a home page and several other microsites with one or more pages. Many of the elements are reused across the demo site, which is styled for the page on which they appear. Working with Woodburn Studio Woodburn Studio is not deployed by default. You can deploy, configure, and disable Woodburn Studio the same way you deploy Practitioner Studio. Go to Working with Practitioner Studio for more information. Note: Upon initial deployment, the HCL Digital Experience search indexes are not yet built. Therefore, search will not yield results for pages and content in the Woodburn Studio demonstration site until the search indexing services have run the first time. This will automatically occur with 24 hours of the initial deployment of DX. However, one can immediately force the indexer to run manually from the Search Collections screen in Administration > Search > Search Collections from the Practitioner Studio interface: From your HCL Digital Experience 9.5 Practitioner Studio interface, click Administration from the navigation menu as shown below. Click Search , then Search Collections . Click Default Search Collection from the Search Collection list. To start the crawler for the WCM Content Source, click the Play icon. To start the crawler for the Portal Content Source, click the Play icon. Go to Configuring a crawler to search your local portal site for more information about configuring and running a search crawler on your local portal site.","title":"The Woodburn Studio demo site"},{"location":"allnewfeatures/woodburn_studio/woodburn_studio/#the-woodburn-studio-demo-site","text":"The Woodburn Studio is a website that demonstrates the use of some of the popular HCL Digital Experience features. Included in HCL Digital Experience 9.5, Woodburn Studio is a demo site for a fictional organization. Its intent is to show some of the themes that exist within HCL Digital Experience. Woodburn Studio leverages in-line editing and site management tools, as well as role and device-based controls on some parts of the site. It is not recommended to use Woodburn Studio for anything but a demo site. Woodburn Studio currently does not have E-commerce functionality. The Woodburn Studio demo site has a home page and several other microsites with one or more pages. Many of the elements are reused across the demo site, which is styled for the page on which they appear.","title":"The Woodburn Studio demo site"},{"location":"allnewfeatures/woodburn_studio/woodburn_studio/#working-with-woodburn-studio","text":"Woodburn Studio is not deployed by default. You can deploy, configure, and disable Woodburn Studio the same way you deploy Practitioner Studio. Go to Working with Practitioner Studio for more information. Note: Upon initial deployment, the HCL Digital Experience search indexes are not yet built. Therefore, search will not yield results for pages and content in the Woodburn Studio demonstration site until the search indexing services have run the first time. This will automatically occur with 24 hours of the initial deployment of DX. However, one can immediately force the indexer to run manually from the Search Collections screen in Administration > Search > Search Collections from the Practitioner Studio interface: From your HCL Digital Experience 9.5 Practitioner Studio interface, click Administration from the navigation menu as shown below. Click Search , then Search Collections . Click Default Search Collection from the Search Collection list. To start the crawler for the WCM Content Source, click the Play icon. To start the crawler for the Portal Content Source, click the Play icon. Go to Configuring a crawler to search your local portal site for more information about configuring and running a search crawler on your local portal site.","title":"Working with Woodburn Studio"},{"location":"collab/i_coll_c_collaboration/","text":"HCL Sametime The HCL Sametime portlets are provided with HCL Digital Experience offerings and can be used by customers with entitlements to HCL Sametime Complete or Sametime Communicate V9. The Sametime Web 2.0 Contact List portlet is available from the Applications > Collaboration area of the HCL DX site. People awareness Users can view contact and other typical business card information for a registered user by displaying the Person card. The Person card is available through a wide range of portal components including HCL Domino\u00ae and Sametime\u00ae integration, personalization, and web content authoring. To view the Person card, move the cursor over an active (underlined) person's name and then select Click for Person Card . When Sametime Communicate or Complete is enabled in your portal configuration, users can work with the complete set of people awareness functionality, which includes instant messaging and application sharing through e-meetings. Person names appear aware - with a dynamic online status indicator. Click Profile to display full information about the person. Additional actions can include: Send Mail Chat Add as Sametime Contact If you choose not to enable Sametime in your portal configuration, people awareness functionality is more limited. People's names appear as hyperlinks, but with no people awareness icon next to each name, and available actions on the Person Card are limited to those that are native to HCL Digital Experience. For updated information on the latest versions of HCL Sametime, visit the HCL Sametime product information pages. Parent topic: Social business","title":"HCL Sametime"},{"location":"collab/i_coll_c_collaboration/#hcl-sametime","text":"The HCL Sametime portlets are provided with HCL Digital Experience offerings and can be used by customers with entitlements to HCL Sametime Complete or Sametime Communicate V9. The Sametime Web 2.0 Contact List portlet is available from the Applications > Collaboration area of the HCL DX site.","title":"HCL Sametime"},{"location":"collab/i_coll_c_collaboration/#people-awareness","text":"Users can view contact and other typical business card information for a registered user by displaying the Person card. The Person card is available through a wide range of portal components including HCL Domino\u00ae and Sametime\u00ae integration, personalization, and web content authoring. To view the Person card, move the cursor over an active (underlined) person's name and then select Click for Person Card . When Sametime Communicate or Complete is enabled in your portal configuration, users can work with the complete set of people awareness functionality, which includes instant messaging and application sharing through e-meetings. Person names appear aware - with a dynamic online status indicator. Click Profile to display full information about the person. Additional actions can include: Send Mail Chat Add as Sametime Contact If you choose not to enable Sametime in your portal configuration, people awareness functionality is more limited. People's names appear as hyperlinks, but with no people awareness icon next to each name, and available actions on the Person Card are limited to those that are native to HCL Digital Experience. For updated information on the latest versions of HCL Sametime, visit the HCL Sametime product information pages. Parent topic: Social business","title":"People awareness"},{"location":"config/cfg_intr/","text":"Changing the portal URI after an installation You can change the default portal Uniform Resource Identifier (URI) any time after you install HCL Digital Experience. Some applications have a fixed context root that cannot be changed. If you are on Combined Cumulative Fix 7 or earlier, go to CF07 and earlier: Changing the portal URI after an installation . HCL Digital Experience and Web Services for Remote Portlets are installed with a default URI. You can change this URI after installation to better suit the requirements of your organization. Notes: To change the HCL Digital Experience URI: When you specify the context root, do not specify a value that is the same as a directory that exists in a portlet WAR directory. For example, you set the HCL Digital Experience context root to /images. There is a portlet with the directory structure /myPortlet.ear/myPortlet.war/images. This issue might cause a conflict if the portlet encodes URI references to resources in its own /images directory. In this situation, the portlet would be unable to display images. HCL Digital Experience looks for the image resources according to its own context root path instead of the directory path that is specified by the portlet WAR file. For changing the URI of a WSRP Producer portal: Changing the WSRP Producer context root does not require that you redeploy all portlets. Run the modify-servlet-path configuration task only. Important: With Version 8, the URI of the context root for the WSRP Producer is /wps/wsrp . Before Version 8, this context root was /wsrp . If you migrated from an earlier version, you still might have WSRP Consumers that attempt to access the WSRP Producer with the previous context root ( /wsrp ). You can correct this issue in one of the following ways: Modify the context root for the WSRP Producer to /wsrp . This change enables the Consumers to access the Producer without requiring further changes to the Consumers. Update the configuration of the WSRP Consumers to use the new context root ( /wps/wsrp ). If you use HCL Web Content Manager Syndication, the Syndicators and Subscribers servers that refer to this Portal instance must be updated with the modified URI. Log on to the HCL Portal syndicating to this instance. Click the Administration menu icon. Then, click Portal Content > Syndicators . Click the edit icon of the Syndicator you want to edit. Update the URL with the new context root information. Then, log on to the HCL Digital Experience subscribing to this instance. Click the Administration menu icon. Then, click Portal Content > Subscribers . Click the edit icon of the subscriber you want to edit. Update the URL with the new context root information. Cluster note: If you modify the URI in a clustered environment, complete the steps that are described here on the primary node only, except where specified differently. Also, verify that AutoSynch is set to a frequency of 1 minute. Complete the following steps to manually modify the HCL Digital Experience context root: Stop the HCL Portal server. Locate the wkplc.properties and wkplc_comp.properties files in the wp_profile_root /ConfigEngine/properties directory and create backup copies before you change any values. Use a text editor to open the wkplc.properties file and enter the appropriate value for your environment in the WpsContextRoot property. Note: Leaving this value empty might cause system conflict. If you leave this value empty, validate this setting by using the Configuration Wizard or by following the steps that are described in ConfigEngine validation targets . Save and close the file. Use a text editor to open the wkplc_comp.properties file and enter the appropriate value for your environment in the following properties: WsrpContextRoot WpsPersonalizedHome WpsDefaultHome Attention: Do not enter the same value for WpsPersonalizedHome and WpsDefaultHome. Note: Leaving these values empty might cause system conflict. If you leave these values empty, validate this setting by using the Configuration Wizard or by following the steps that are described in ConfigEngine validation targets . Save and close the file. Start the HCL Portal server in a stand-alone environment or the deployment manager and node agent in a clustered environment. Open a command prompt and change to the wp_profile_root /ConfigEngine directory. Complete the following steps to change the HCL Digital Experience URI: To change the context root for the values that you entered in the WpsContextRoot, WsrpContextRoot, WpsPersonalizedHome, and or WpsDefaultHome properties, run the following task: AIX\u00ae HP-UX Linux\u2122 Solaris:./ConfigEngine.sh modify-servlet-path -DPortalAdminPwd=password -DWasPassword=password Windows\u2122: ConfigEngine.bat modify-servlet-path -DPortalAdminPwd=password -DWasPassword=password IBM\u00ae i: ConfigEngine.sh modify-servlet-path -DPortalAdminPwd=password -DWasPassword=password z/OS\u00ae:./ConfigEngine.sh modify-servlet-path -DPortalAdminPwd=password -DWasPassword=password Note: Check the output for any error messages before you proceed with the next task. If any of the configuration tasks fail, verify the values in the wkplc.properties and wkplc_comp.properties files. Restart the HCL Portal server. Run the following task to change the context root for the portlets: AIX HP-UX Linux Solaris: ./ConfigEngine.sh modify-servlet-path-portlets -DPortalAdminPwd=password -DWasPassword=password Windows: ConfigEngine.bat modify-servlet-path-portlets -DPortalAdminPwd=password -DWasPassword=password IBM i: ConfigEngine.sh modify-servlet-path-portlets -DPortalAdminPwd=password -DWasPassword=password z/OS: ./ConfigEngine.sh modify-servlet-path-portlets -DPortalAdminPwd=password -DWasPassword=password Note: Check the output for any error messages before you proceed with the next task. If any of the configuration tasks fail, verify the values in the wkplc.properties and wkplc_comp.properties files. If necessary, start the HCL Portal server in a stand-alone environment or the deployment manager and node agent in a clustered environment. Complete the following steps if you are using an external web server, such as an HTTP Server: Choose one of the following options that are based on your HCL Digital Experience environment: HCL Digital Experience environment Steps Stand-alone configuration Complete the following steps in a stand-alone configuration: 1. Copy the following script from the plugin_root/bin directory of the web server to the wp\\_profile\\_root wp_profile_root /bin directory on your HCL Digital Experience server: - AIX HP-UX Linux Solaris: ./configurewebservername.sh - Windows: configurewebservername.bat - IBM i: configurewebservername.sh - z/OS: ./configurewebservername.sh where webservername is the web server definition name you defined previously when you configured the HTTP Server for HCL Digital Experience, for example: configurewebserver1.bat. Run the following command, from the wp\\_profile\\_root wp_profile_root /bin directory: AIX HP-UX Linux Solaris: ./configurewebservername.sh Windows: configurewebservername.bat IBM i: configurewebservername.sh z/OS: ./configurewebservername.sh | |Clustered configurationIdle standby configuration|Complete the following steps in a clustered configurationidle standby configuration: 1. Copy the following script from the plugin_root/bin directory of the web server to the dmgr_profile/bin directory on your Deployment Manager server: AIX HP-UX Linux Solaris: ./configurewebservername.sh Windows: configurewebservername.bat IBM i: configurewebservername.sh z/OS: ./configurewebservername.sh where webservername is the web server definition name you defined previously when you configured the HTTP Server for HCL Portal, for example: configurewebserver1.bat. Run the following command on the Deployment Manager server: AIX HP-UX Linux Solaris: ./configurewebservername.sh Windows: configurewebservername.bat IBM i: configurewebservername.sh z/OS: ./configurewebservername.sh | Regenerate the web server plug-in in WebSphere\u00ae Application Server. If you are using a remote web server, copy the generated plugin-cfg.xml file to the remote server. Important: Do not complete these steps if you are changing only the WSRP Producer URI. Restart the web server. Restart the HCL Portal server. Required if you use HCL Web Content Manager: Complete the following steps to manually change the JSP components in the Web Resources v70 Library: Cluster note: In a clustered environment, complete these steps on the primary node only. Log on to HCL Digital Experience. Go to Applications > Content > Web Content Authoring . Under Preferences , select Edit Shared Settings . Under Library Selection , add Web Resources v70 to the Selected Libraries list. Click OK . Under Item Views , select All Items > All > Components > JSP . Select every JSP component from the Web Resources v70 library and then click Edit . Update the Path field for every JSP component with the new context root path. The JSP path includes two parts, which are separated by a semi-colon. The first part is the context path to the HCL Web Content Manager extensions web application and then the second part is the path to the JSP. Update the path to the web application. For example, the other path might be: /wcmextension;/jsp/html/general/UpdateItem.jsp. If you changed the context root to mynewcontext, change the old path to /mynewcontext/wcmextension;/jsp/html/general/UpdateItem.jsp. Update your custom themes to reference the correct Dojo context root. The default Dojo context root in HCL Digital Experience is /wps/portal_dojo. After you run the modify-servlet-path and modify-servlet-path-portlets tasks, the Dojo context root is changed to include the new value in the WpsContextRoot parameter as the prefix. For instance, if the new WpsContextRoot value is myco, then the new Dojo context root becomes /myco/portal_dojo. If your theme includes hardcoded references to \"/wps/portal_dojo\", update those references to the new context root. If you migrated a custom theme, you might find that it has references to /portal_dojo without the /wps prefix. Look for these references in both the WAR file and in the WebDAV storage for your theme. Cluster note: In a clustered environment, complete these steps on the primary node only. Complete the following steps to edit the context root for every search collection: Attention: Edit the context root for each existing search collection. Log on to HCL Digital Experience as the administrator. To open the Manage Search portlet, click the Administration menu icon. Then, click Search Administration > Manage Search . Click Search Collections . Click the search collection that you want to update. For example: Default Search Collection . Click the Edit Content Source icon for the first content source in the list. Edit the URL listed in the Collect documents link from the URL with the new context root. Click Save . Edit the URL in each remaining content source and then save your changes. Start the HCL Portal crawler content source for each collection: If the documents are not stored in the search collection but a schedule is defined for the crawler, the crawler automatically runs at the scheduled time. You can also start the crawler manually. If the documents are already collected, select Regather documents to update the documents with the new context root information. Click Collections from All Services in the breadcrumb trail and select the next search collection to modify. Clustered environment only:Idle standby only: Resynchronize the nodes and restart the cluster. Cluster type Steps Static clusterIdle standby Complete the following steps if you have a static clusteran idle standby environment: 1. Open the deployment manager WebSphere Integrated Solutions Console. 2. Click System Administration > Nodes , select the primary node from the list, and click Full Resynchronize . 3. Click Servers > Clusters . 4. Select the cluster and click Stop . 5. After the cluster stops, restart it by selecting the cluster. Then, click Start . Dynamic cluster Complete the following steps if you have a dynamic cluster: 1. Open the deployment manager WebSphere Integrated Solutions Console. 2. Click System Administration > Nodes , select the primary node from the list, and click Full Resynchronize . 3. Click Servers > Dynamic Clusters . 4. Click the dynamic cluster that you want to stop and restart. 5. Click Dynamic cluster members . 6. Select the member name that you want to stop and then click Stop . 7. Select the member name that you want to start and then click Start .","title":"Changing the portal URI after an installation"},{"location":"config/cfg_intr/#changing-the-portal-uri-after-an-installation","text":"You can change the default portal Uniform Resource Identifier (URI) any time after you install HCL Digital Experience. Some applications have a fixed context root that cannot be changed. If you are on Combined Cumulative Fix 7 or earlier, go to CF07 and earlier: Changing the portal URI after an installation . HCL Digital Experience and Web Services for Remote Portlets are installed with a default URI. You can change this URI after installation to better suit the requirements of your organization. Notes: To change the HCL Digital Experience URI: When you specify the context root, do not specify a value that is the same as a directory that exists in a portlet WAR directory. For example, you set the HCL Digital Experience context root to /images. There is a portlet with the directory structure /myPortlet.ear/myPortlet.war/images. This issue might cause a conflict if the portlet encodes URI references to resources in its own /images directory. In this situation, the portlet would be unable to display images. HCL Digital Experience looks for the image resources according to its own context root path instead of the directory path that is specified by the portlet WAR file. For changing the URI of a WSRP Producer portal: Changing the WSRP Producer context root does not require that you redeploy all portlets. Run the modify-servlet-path configuration task only. Important: With Version 8, the URI of the context root for the WSRP Producer is /wps/wsrp . Before Version 8, this context root was /wsrp . If you migrated from an earlier version, you still might have WSRP Consumers that attempt to access the WSRP Producer with the previous context root ( /wsrp ). You can correct this issue in one of the following ways: Modify the context root for the WSRP Producer to /wsrp . This change enables the Consumers to access the Producer without requiring further changes to the Consumers. Update the configuration of the WSRP Consumers to use the new context root ( /wps/wsrp ). If you use HCL Web Content Manager Syndication, the Syndicators and Subscribers servers that refer to this Portal instance must be updated with the modified URI. Log on to the HCL Portal syndicating to this instance. Click the Administration menu icon. Then, click Portal Content > Syndicators . Click the edit icon of the Syndicator you want to edit. Update the URL with the new context root information. Then, log on to the HCL Digital Experience subscribing to this instance. Click the Administration menu icon. Then, click Portal Content > Subscribers . Click the edit icon of the subscriber you want to edit. Update the URL with the new context root information. Cluster note: If you modify the URI in a clustered environment, complete the steps that are described here on the primary node only, except where specified differently. Also, verify that AutoSynch is set to a frequency of 1 minute. Complete the following steps to manually modify the HCL Digital Experience context root: Stop the HCL Portal server. Locate the wkplc.properties and wkplc_comp.properties files in the wp_profile_root /ConfigEngine/properties directory and create backup copies before you change any values. Use a text editor to open the wkplc.properties file and enter the appropriate value for your environment in the WpsContextRoot property. Note: Leaving this value empty might cause system conflict. If you leave this value empty, validate this setting by using the Configuration Wizard or by following the steps that are described in ConfigEngine validation targets . Save and close the file. Use a text editor to open the wkplc_comp.properties file and enter the appropriate value for your environment in the following properties: WsrpContextRoot WpsPersonalizedHome WpsDefaultHome Attention: Do not enter the same value for WpsPersonalizedHome and WpsDefaultHome. Note: Leaving these values empty might cause system conflict. If you leave these values empty, validate this setting by using the Configuration Wizard or by following the steps that are described in ConfigEngine validation targets . Save and close the file. Start the HCL Portal server in a stand-alone environment or the deployment manager and node agent in a clustered environment. Open a command prompt and change to the wp_profile_root /ConfigEngine directory. Complete the following steps to change the HCL Digital Experience URI: To change the context root for the values that you entered in the WpsContextRoot, WsrpContextRoot, WpsPersonalizedHome, and or WpsDefaultHome properties, run the following task: AIX\u00ae HP-UX Linux\u2122 Solaris:./ConfigEngine.sh modify-servlet-path -DPortalAdminPwd=password -DWasPassword=password Windows\u2122: ConfigEngine.bat modify-servlet-path -DPortalAdminPwd=password -DWasPassword=password IBM\u00ae i: ConfigEngine.sh modify-servlet-path -DPortalAdminPwd=password -DWasPassword=password z/OS\u00ae:./ConfigEngine.sh modify-servlet-path -DPortalAdminPwd=password -DWasPassword=password Note: Check the output for any error messages before you proceed with the next task. If any of the configuration tasks fail, verify the values in the wkplc.properties and wkplc_comp.properties files. Restart the HCL Portal server. Run the following task to change the context root for the portlets: AIX HP-UX Linux Solaris: ./ConfigEngine.sh modify-servlet-path-portlets -DPortalAdminPwd=password -DWasPassword=password Windows: ConfigEngine.bat modify-servlet-path-portlets -DPortalAdminPwd=password -DWasPassword=password IBM i: ConfigEngine.sh modify-servlet-path-portlets -DPortalAdminPwd=password -DWasPassword=password z/OS: ./ConfigEngine.sh modify-servlet-path-portlets -DPortalAdminPwd=password -DWasPassword=password Note: Check the output for any error messages before you proceed with the next task. If any of the configuration tasks fail, verify the values in the wkplc.properties and wkplc_comp.properties files. If necessary, start the HCL Portal server in a stand-alone environment or the deployment manager and node agent in a clustered environment. Complete the following steps if you are using an external web server, such as an HTTP Server: Choose one of the following options that are based on your HCL Digital Experience environment: HCL Digital Experience environment Steps Stand-alone configuration Complete the following steps in a stand-alone configuration: 1. Copy the following script from the plugin_root/bin directory of the web server to the wp\\_profile\\_root wp_profile_root /bin directory on your HCL Digital Experience server: - AIX HP-UX Linux Solaris: ./configurewebservername.sh - Windows: configurewebservername.bat - IBM i: configurewebservername.sh - z/OS: ./configurewebservername.sh where webservername is the web server definition name you defined previously when you configured the HTTP Server for HCL Digital Experience, for example: configurewebserver1.bat. Run the following command, from the wp\\_profile\\_root wp_profile_root /bin directory: AIX HP-UX Linux Solaris: ./configurewebservername.sh Windows: configurewebservername.bat IBM i: configurewebservername.sh z/OS: ./configurewebservername.sh | |Clustered configurationIdle standby configuration|Complete the following steps in a clustered configurationidle standby configuration: 1. Copy the following script from the plugin_root/bin directory of the web server to the dmgr_profile/bin directory on your Deployment Manager server: AIX HP-UX Linux Solaris: ./configurewebservername.sh Windows: configurewebservername.bat IBM i: configurewebservername.sh z/OS: ./configurewebservername.sh where webservername is the web server definition name you defined previously when you configured the HTTP Server for HCL Portal, for example: configurewebserver1.bat. Run the following command on the Deployment Manager server: AIX HP-UX Linux Solaris: ./configurewebservername.sh Windows: configurewebservername.bat IBM i: configurewebservername.sh z/OS: ./configurewebservername.sh | Regenerate the web server plug-in in WebSphere\u00ae Application Server. If you are using a remote web server, copy the generated plugin-cfg.xml file to the remote server. Important: Do not complete these steps if you are changing only the WSRP Producer URI. Restart the web server. Restart the HCL Portal server. Required if you use HCL Web Content Manager: Complete the following steps to manually change the JSP components in the Web Resources v70 Library: Cluster note: In a clustered environment, complete these steps on the primary node only. Log on to HCL Digital Experience. Go to Applications > Content > Web Content Authoring . Under Preferences , select Edit Shared Settings . Under Library Selection , add Web Resources v70 to the Selected Libraries list. Click OK . Under Item Views , select All Items > All > Components > JSP . Select every JSP component from the Web Resources v70 library and then click Edit . Update the Path field for every JSP component with the new context root path. The JSP path includes two parts, which are separated by a semi-colon. The first part is the context path to the HCL Web Content Manager extensions web application and then the second part is the path to the JSP. Update the path to the web application. For example, the other path might be: /wcmextension;/jsp/html/general/UpdateItem.jsp. If you changed the context root to mynewcontext, change the old path to /mynewcontext/wcmextension;/jsp/html/general/UpdateItem.jsp. Update your custom themes to reference the correct Dojo context root. The default Dojo context root in HCL Digital Experience is /wps/portal_dojo. After you run the modify-servlet-path and modify-servlet-path-portlets tasks, the Dojo context root is changed to include the new value in the WpsContextRoot parameter as the prefix. For instance, if the new WpsContextRoot value is myco, then the new Dojo context root becomes /myco/portal_dojo. If your theme includes hardcoded references to \"/wps/portal_dojo\", update those references to the new context root. If you migrated a custom theme, you might find that it has references to /portal_dojo without the /wps prefix. Look for these references in both the WAR file and in the WebDAV storage for your theme. Cluster note: In a clustered environment, complete these steps on the primary node only. Complete the following steps to edit the context root for every search collection: Attention: Edit the context root for each existing search collection. Log on to HCL Digital Experience as the administrator. To open the Manage Search portlet, click the Administration menu icon. Then, click Search Administration > Manage Search . Click Search Collections . Click the search collection that you want to update. For example: Default Search Collection . Click the Edit Content Source icon for the first content source in the list. Edit the URL listed in the Collect documents link from the URL with the new context root. Click Save . Edit the URL in each remaining content source and then save your changes. Start the HCL Portal crawler content source for each collection: If the documents are not stored in the search collection but a schedule is defined for the crawler, the crawler automatically runs at the scheduled time. You can also start the crawler manually. If the documents are already collected, select Regather documents to update the documents with the new context root information. Click Collections from All Services in the breadcrumb trail and select the next search collection to modify. Clustered environment only:Idle standby only: Resynchronize the nodes and restart the cluster. Cluster type Steps Static clusterIdle standby Complete the following steps if you have a static clusteran idle standby environment: 1. Open the deployment manager WebSphere Integrated Solutions Console. 2. Click System Administration > Nodes , select the primary node from the list, and click Full Resynchronize . 3. Click Servers > Clusters . 4. Select the cluster and click Stop . 5. After the cluster stops, restart it by selecting the cluster. Then, click Start . Dynamic cluster Complete the following steps if you have a dynamic cluster: 1. Open the deployment manager WebSphere Integrated Solutions Console. 2. Click System Administration > Nodes , select the primary node from the list, and click Full Resynchronize . 3. Click Servers > Dynamic Clusters . 4. Click the dynamic cluster that you want to stop and restart. 5. Click Dynamic cluster members . 6. Select the member name that you want to stop and then click Stop . 7. Select the member name that you want to start and then click Start .","title":"Changing the portal URI after an installation"},{"location":"config/cfg_intr_CF07_earlier/","text":"CF07 and earlier: Changing the portal URI after an installation You can change the default portal Uniform Resource Identifier (URI) any time after you install HCL Digital Experience. Some applications have a fixed context root that cannot be changed. If you are on Combined Cumulative Fix 8, go to Changing the portal URI after an installation . HCL Digital Experience and Web Services for Remote Portlets are installed with a default URI. You can change this URI after installation to better suit the requirements of your organization. Notes: To change the HCL DX URI: When you specify the context root, do not specify a value that is the same as a directory that exists in a portlet WAR directory. For example, you set the HCL DX context root to /images. There is a portlet with the directory structure /myPortlet.ear/myPortlet.war/images. This issue might cause a conflict if the portlet encodes URI references to resources in its own /images directory. In this situation, the portlet would be unable to display images. HCL DX looks for the image resources according to its own context root path instead of the directory path that is specified by the portlet WAR file. For changing the URI of a WSRP Producer portal: Changing the WSRP Producer context root does not require that you redeploy all portlets. Run the modify-servlet-path configuration task only. Important: With Version 8, the URI of the context root for the WSRP Producer is /wps/wsrp . Before Version 8, this context root was /wsrp . If you migrated from an earlier version, you still might have WSRP Consumers that attempt to access the WSRP Producer with the previous context root ( /wsrp ). You can correct this issue in one of the following ways: Modify the context root for the WSRP Producer to /wsrp . This change enables the Consumers to access the Producer without requiring further changes to the Consumers. Update the configuration of the WSRP Consumers to use the new context root ( /wps/wsrp ). If you use HCL Web Content Manager Syndication, the Syndicators and Subscribers servers that refer to this Portal instance must be updated with the modified URI. Log on to the HCL DX syndicating to this instance. Click the Administration menu icon. Then, click Portal Content > Syndicators . Click the edit icon of the Syndicator you want to edit. Update the URL with the new context root information. Then, log on to the HCL DX subscribing to this instance. Click the Administration menu icon. Then, click Portal Content > Subscribers . Click the edit icon of the subscriber you want to edit. Update the URL with the new context root information. Cluster note: If you modify the URI in a clustered environment, complete the steps that are described here on the primary node only, except where specified differently. Also, verify that AutoSynch is set to a frequency of 1 minute. Complete the following steps to manually modify the HCL DX context root: Stop the WebSphere_Portal server. Locate the wkplc.properties and wkplc_comp.properties files in the wp_profile_root /ConfigEngine/properties directory and create backup copies before you change any values. Use a text editor to open the wkplc.properties file and enter the appropriate value for your environment in the WpsContextRoot property. Save and close the file. Use a text editor to open the wkplc_comp.properties file and enter the appropriate value for your environment in the following properties: WsrpContextRoot WpsPersonalizedHome WpsDefaultHome Attention: Do not enter the same value for WpsPersonalizedHome and WpsDefaultHome. Save and close the file. Start the WebSphere_Portal server in a stand-alone environment or the deployment manager and node agent in a clustered environment. Open a command prompt and change to the wp_profile_root /ConfigEngine directory. Complete the following steps to change the HCL DX URI: To change the context root for the values that you entered in the WpsContextRoot, WsrpContextRoot, WpsPersonalizedHome, and or WpsDefaultHome properties, run the following task: AIX\u00ae HP-UX Linux\u2122 Solaris:./ConfigEngine.sh modify-servlet-path -DPortalAdminPwd=password -DWasPassword=password Windows\u2122: ConfigEngine.bat modify-servlet-path -DPortalAdminPwd=password -DWasPassword=password IBM\u00ae i: ConfigEngine.sh modify-servlet-path -DPortalAdminPwd=password -DWasPassword=password z/OS\u00ae:./ConfigEngine.sh modify-servlet-path -DPortalAdminPwd=password -DWasPassword=password Note: Check the output for any error messages before you proceed with the next task. If any of the configuration tasks fail, verify the values in the wkplc.properties and wkplc_comp.properties files. Restart the WebSphere_Portal server. Run the following task to change the context root for the portlets: AIX HP-UX Linux Solaris: ./ConfigEngine.sh modify-servlet-path-portlets -DPortalAdminPwd=password -DWasPassword=password Windows: ConfigEngine.bat modify-servlet-path-portlets -DPortalAdminPwd=password -DWasPassword=password IBM i: ConfigEngine.sh modify-servlet-path-portlets -DPortalAdminPwd=password -DWasPassword=password z/OS: ./ConfigEngine.sh modify-servlet-path-portlets -DPortalAdminPwd=password -DWasPassword=password Note: Check the output for any error messages before you proceed with the next task. If any of the configuration tasks fail, verify the values in the wkplc.properties and wkplc_comp.properties files. Complete the following steps on the Deployment Manager server: Log on to the Deployment Manager WebSphere\u00ae Integrated Solutions Console. Go to Security > Global security . Click Trust association in the Web and SIP security section. Click Interceptors in the Additional Properties section. Click com.ibm.portal.auth.tai.HTTPBasicAuthTAI . Edit the urlBlackList and urlWhiteList parameters with the new context path, for example: urlBlackList: /wpsmodified/myportalmodified* urlWhiteList: /wpsmodified/mycontenthandler* Click Apply . Save all changes. Log out of the Deployment Manager WebSphere Integrated Solutions Console. If necessary, start the WebSphere_Portal server in a stand-alone environment or the deployment manager and node agent in a clustered environment. Complete the following steps if you are using an external web server, such as an HTTP Server: Choose one of the following options that are based on your HCL DX environment: HCL DX environment Steps Stand-alone configuration Complete the following steps in a stand-alone configuration: 1. Copy the following script from the plugin_root/bin directory of the web server to the wp_profile_root /bin directory on your HCL DX server: - AIX HP-UX Linux Solaris: ./configurewebservername.sh - Windows: configurewebservername.bat - IBM i: configurewebservername.sh - z/OS: ./configurewebservername.sh where webservername is the web server definition name you defined previously when you configured the HTTP Server for HCL DX, for example: configurewebserver1.bat. Run the following command, from the wp_profile_root /bin directory: AIX HP-UX Linux Solaris: ./configurewebservername.sh Windows: configurewebservername.bat IBM i: configurewebservername.sh z/OS: ./configurewebservername.sh | |Clustered configurationIdle standby configuration|Complete the following steps in a clustered configurationidle standby configuration: 1. Copy the following script from the plugin_root/bin directory of the web server to the dmgr_profile/bin directory on your Deployment Manager server: AIX HP-UX Linux Solaris : ./configurewebservername.sh Windows: configurewebservername.bat IBM i: configurewebservername.sh z/OS: ./configurewebservername.sh where webservername is the web server definition name you defined previously when you configured the HTTP Server for HCL DX, for example: configurewebserver1.bat. Run the following command on the Deployment Manager server: AIX HP-UX Linux Solaris: ./configurewebservername.sh Windows: configurewebservername.bat IBM i: configurewebservername.sh z/OS: ./configurewebservername.sh | Regenerate the web server plug-in in WebSphere Application Server. If you are using a remote web server, copy the generated plugin-cfg.xml file to the remote server. Important: Do not complete these steps if you are changing only the WSRP Producer URI. Restart the web server. Restart the WebSphere_Portal server. Complete the following steps to update the registered Application URI entries in the JCR.ICMSTJCRNODEREGISTER table: Cluster note: In a clustered environment, complete these steps on the primary node only. Stop the WebSphere_Portal server. Back up the database. Prior to CF04, start the WebSphere_Portal server. Starting with CF04, do not restart the WebSphere_Portal server. Complete the following steps to unregister the node types: Open the ibmcontentwcm.registernodetypes file, which is in the /WebSphere/PortalServer/wcm/prereq.wcm/config/nodetypes/ directory. Change <registerAction action=\"register\"/> to <registerAction action=\"deregister\"/>. Save your changes. Run the following task: AIX HP-UX Linux Solaris: ./ConfigEngine.sh action-register-wcm-nodetypes -DWasPassword=password -DPortalAdminPwd=password Windows: ConfigEngine.bat action-register-wcm-nodetypes -DWasPassword=password -DPortalAdminPwd=password IBM i: ConfigEngine.sh action-register-wcm-nodetypes -DWasPassword=password -DPortalAdminPwd=password HP-UX: ./ConfigEngine.sh action-register-wcm-nodetypes -DWasPassword=password -DPortalAdminPwd=password Complete the following steps to register the node types: Open the ibmcontentwcm.registernodetypes file, which is in the /WebSphere/PortalServer/wcm/prereq.wcm/config/nodetypes/ directory. Change <registerAction action=\"deregister\"/> to <registerAction action=\"register\"/>. Update all lines that contain the <ApplicationURI name=\"wps/mypoc/?view=auth&uri=wcm:oid:\"/> content. Change the name of the attribute value to reflect the new WpsContextRoot value that is found in the wkplc.properties file. For example, if the original value for WpsContextRoot was wps and the new value is wp8, change the lines to <ApplicationURI name=\"wp8/mypoc/?view=auth&uri=wcm:oid:\"/>. Run the following task: AIX HP-UX Linux Solaris: ./ConfigEngine.sh action-register-wcm-nodetypes -DWasPassword=password -DPortalAdminPwd=password Windows: ConfigEngine.bat action-register-wcm-nodetypes -DWasPassword=password -DPortalAdminPwd=password IBM i: ConfigEngine.sh action-register-wcm-nodetypes -DWasPassword=password -DPortalAdminPwd=password z/OS: ./ConfigEngine.sh action-register-wcm-nodetypes -DWasPassword=password -DPortalAdminPwd=password Run the following SQL query to verify that the entries in the table now show the new URI: select * from JCR.ICMSTJCRNODEREGISTER Restart the WebSphere_Portal server. Required if you use HCL Web Content Manager: Complete the following steps to manually change the JSP components in the Web Resources v70 Library: Cluster note: In a clustered environment, complete these steps on the primary node only. Log on to HCL DX. Go to Applications > Content > Web Content Authoring . Under Preferences , select Edit Shared Settings . Under Library Selection , add Web Resources v70 to the Selected Libraries list. Click OK . Under Item Views , select All Items > All > Components > JSP . Select every JSP component from the Web Resources v70 library and then click Edit . Update the Path field for every JSP component with the new context root path. The JSP path includes two parts, which are separated by a semi-colon. The first part is the context path to the HCL Web Content Manager extensions web application and then the second part is the path to the JSP. Update the path to the web application. For example, the other path might be: /wcmextension;/jsp/html/general/UpdateItem.jsp. If you changed the context root to mynewcontext, change the old path to /mynewcontext/wcmextension;/jsp/html/general/UpdateItem.jsp. Update your custom themes to reference the correct Dojo context root. The default Dojo context root in HCL DX is /wps/portal_dojo. After you run the modify-servlet-path and modify-servlet-path-portlets tasks, the Dojo context root is changed to include the new value in the WpsContextRoot parameter as the prefix. For instance, if the new WpsContextRoot value is myco, then the new Dojo context root becomes /myco/portal_dojo. If your theme includes hardcoded references to \"/wps/portal_dojo\", update those references to the new context root. If you migrated a custom theme, you might find that it has references to /portal_dojo without the /wps prefix. Look for these references in both the WAR file and in the WebDAV storage for your theme. Cluster note: In a clustered environment, complete these steps on the primary node only. Complete the following steps to edit the context root for every search collection: Attention: Edit the context root for each existing search collection. Log on to HCL DX as the administrator. To open the Manage Search portlet, click the Administration menu icon. Then, click Search Administration > Manage Search . Click Search Collections . Click the search collection that you want to update. For example: Default Search Collection . Click the Edit Content Source icon for the first content source in the list. Edit the URL listed in the Collect documents link from the URL with the new context root. Click Save . Edit the URL in each remaining content source and then save your changes. Start the HCL DX crawler content source for each collection: If the documents are not stored in the search collection but a schedule is defined for the crawler, the crawler automatically runs at the scheduled time. You can also start the crawler manually. If the documents are already collected, select Regather documents to update the documents with the new context root information. Click Collections from All Services in the breadcrumb trail and select the next search collection to modify. Complete the following steps if you changed the context root and you have existing search scopes: To open the Manage Search portlet, click the Administration menu icon. Then, click Search Administration > Manage Search . Then, click Search Scopes . Delete the following search scopes: All Sources Managed Web Content Restart the portal server to re-create the search scopes with the correct context. Complete the following steps to change the context root for the Seedlist_Servlet : Log in to the WebSphere Integrated Solutions Console. Go to Applications > Application Types > WebSphere enterprise applications . Click the Seedlist_Servlet application link. Click Context Root For Web Modules . Change the context root and then click OK . Save your changes. Clustered environment only:Idle standby only: Resynchronize the nodes and restart the cluster. Cluster type Steps Static clusterIdle standby Complete the following steps if you have a static clusteran idle standby environment: 1. Open the deployment manager WebSphere Integrated Solutions Console. 2. Click System Administration > Nodes , select the primary node from the list, and click Full Resynchronize . 3. Click Servers > Clusters . 4. Select the cluster and click Stop . 5. After the cluster stops, restart it by selecting the cluster. Then, click Start . Dynamic cluster Complete the following steps if you have a dynamic cluster: 1. Open the deployment manager WebSphere Integrated Solutions Console. 2. Click System Administration > Nodes , select the primary node from the list, and click Full Resynchronize . 3. Click Servers > Dynamic Clusters . 4. Click the dynamic cluster that you want to stop and restart. 5. Click Dynamic cluster members . 6. Select the member name that you want to stop and then click Stop . 7. Select the member name that you want to start and then click Start . Complete the following steps on the stand-alone server or on each node within your cluster to create the WebSphere environment variables that HCL Web Content Manager needs: Locate the wkplc.properties and wkplc_comp.properties files in the wp_profile_root /ConfigEngine/properties directory and create backup copies before you change any values. Use a text editor to open the wkplc.properties file and enter the appropriate value for your environment in the WpsContextRoot property. Save and close the file. Use a text editor to open the wkplc_comp.properties file and enter the appropriate value for your environment in the following properties: WsrpContextRoot WpsPersonalizedHome WpsDefaultHome Attention: Do not enter the same value for WpsPersonalizedHome and WpsDefaultHome. Save and close the file. Run the following task to create the WebSphere environment variables for Web Content Manager: AIX HP-UX Linux Solaris: ./ConfigEngine.sh create-wcm-servletpath-variables -DServerName=your_application_server_name -DWasPassword=password Windows: ConfigEngine.bat create-wcm-servletpath-variables -DServerName=your_application_server_name -DWasPassword=password IBM i: ConfigEngine.sh create-wcm-servletpath-variables -DServerName=your_application_server_name -DWasPassword=password z/OS: ./ConfigEngine.sh create-wcm-servletpath-variables -DServerName=your_application_server_name -DWasPassword=password Note: Check the output for any error messages before you proceed with the next task. If any of the configuration tasks fail, verify the values in the wkplc.properties and wkplc_comp.properties files. Resynchronize the nodes and restart the cluster.","title":"CF07 and earlier: Changing the portal URI after an installation"},{"location":"config/cfg_intr_CF07_earlier/#cf07-and-earlier-changing-the-portal-uri-after-an-installation","text":"You can change the default portal Uniform Resource Identifier (URI) any time after you install HCL Digital Experience. Some applications have a fixed context root that cannot be changed. If you are on Combined Cumulative Fix 8, go to Changing the portal URI after an installation . HCL Digital Experience and Web Services for Remote Portlets are installed with a default URI. You can change this URI after installation to better suit the requirements of your organization. Notes: To change the HCL DX URI: When you specify the context root, do not specify a value that is the same as a directory that exists in a portlet WAR directory. For example, you set the HCL DX context root to /images. There is a portlet with the directory structure /myPortlet.ear/myPortlet.war/images. This issue might cause a conflict if the portlet encodes URI references to resources in its own /images directory. In this situation, the portlet would be unable to display images. HCL DX looks for the image resources according to its own context root path instead of the directory path that is specified by the portlet WAR file. For changing the URI of a WSRP Producer portal: Changing the WSRP Producer context root does not require that you redeploy all portlets. Run the modify-servlet-path configuration task only. Important: With Version 8, the URI of the context root for the WSRP Producer is /wps/wsrp . Before Version 8, this context root was /wsrp . If you migrated from an earlier version, you still might have WSRP Consumers that attempt to access the WSRP Producer with the previous context root ( /wsrp ). You can correct this issue in one of the following ways: Modify the context root for the WSRP Producer to /wsrp . This change enables the Consumers to access the Producer without requiring further changes to the Consumers. Update the configuration of the WSRP Consumers to use the new context root ( /wps/wsrp ). If you use HCL Web Content Manager Syndication, the Syndicators and Subscribers servers that refer to this Portal instance must be updated with the modified URI. Log on to the HCL DX syndicating to this instance. Click the Administration menu icon. Then, click Portal Content > Syndicators . Click the edit icon of the Syndicator you want to edit. Update the URL with the new context root information. Then, log on to the HCL DX subscribing to this instance. Click the Administration menu icon. Then, click Portal Content > Subscribers . Click the edit icon of the subscriber you want to edit. Update the URL with the new context root information. Cluster note: If you modify the URI in a clustered environment, complete the steps that are described here on the primary node only, except where specified differently. Also, verify that AutoSynch is set to a frequency of 1 minute. Complete the following steps to manually modify the HCL DX context root: Stop the WebSphere_Portal server. Locate the wkplc.properties and wkplc_comp.properties files in the wp_profile_root /ConfigEngine/properties directory and create backup copies before you change any values. Use a text editor to open the wkplc.properties file and enter the appropriate value for your environment in the WpsContextRoot property. Save and close the file. Use a text editor to open the wkplc_comp.properties file and enter the appropriate value for your environment in the following properties: WsrpContextRoot WpsPersonalizedHome WpsDefaultHome Attention: Do not enter the same value for WpsPersonalizedHome and WpsDefaultHome. Save and close the file. Start the WebSphere_Portal server in a stand-alone environment or the deployment manager and node agent in a clustered environment. Open a command prompt and change to the wp_profile_root /ConfigEngine directory. Complete the following steps to change the HCL DX URI: To change the context root for the values that you entered in the WpsContextRoot, WsrpContextRoot, WpsPersonalizedHome, and or WpsDefaultHome properties, run the following task: AIX\u00ae HP-UX Linux\u2122 Solaris:./ConfigEngine.sh modify-servlet-path -DPortalAdminPwd=password -DWasPassword=password Windows\u2122: ConfigEngine.bat modify-servlet-path -DPortalAdminPwd=password -DWasPassword=password IBM\u00ae i: ConfigEngine.sh modify-servlet-path -DPortalAdminPwd=password -DWasPassword=password z/OS\u00ae:./ConfigEngine.sh modify-servlet-path -DPortalAdminPwd=password -DWasPassword=password Note: Check the output for any error messages before you proceed with the next task. If any of the configuration tasks fail, verify the values in the wkplc.properties and wkplc_comp.properties files. Restart the WebSphere_Portal server. Run the following task to change the context root for the portlets: AIX HP-UX Linux Solaris: ./ConfigEngine.sh modify-servlet-path-portlets -DPortalAdminPwd=password -DWasPassword=password Windows: ConfigEngine.bat modify-servlet-path-portlets -DPortalAdminPwd=password -DWasPassword=password IBM i: ConfigEngine.sh modify-servlet-path-portlets -DPortalAdminPwd=password -DWasPassword=password z/OS: ./ConfigEngine.sh modify-servlet-path-portlets -DPortalAdminPwd=password -DWasPassword=password Note: Check the output for any error messages before you proceed with the next task. If any of the configuration tasks fail, verify the values in the wkplc.properties and wkplc_comp.properties files. Complete the following steps on the Deployment Manager server: Log on to the Deployment Manager WebSphere\u00ae Integrated Solutions Console. Go to Security > Global security . Click Trust association in the Web and SIP security section. Click Interceptors in the Additional Properties section. Click com.ibm.portal.auth.tai.HTTPBasicAuthTAI . Edit the urlBlackList and urlWhiteList parameters with the new context path, for example: urlBlackList: /wpsmodified/myportalmodified* urlWhiteList: /wpsmodified/mycontenthandler* Click Apply . Save all changes. Log out of the Deployment Manager WebSphere Integrated Solutions Console. If necessary, start the WebSphere_Portal server in a stand-alone environment or the deployment manager and node agent in a clustered environment. Complete the following steps if you are using an external web server, such as an HTTP Server: Choose one of the following options that are based on your HCL DX environment: HCL DX environment Steps Stand-alone configuration Complete the following steps in a stand-alone configuration: 1. Copy the following script from the plugin_root/bin directory of the web server to the wp_profile_root /bin directory on your HCL DX server: - AIX HP-UX Linux Solaris: ./configurewebservername.sh - Windows: configurewebservername.bat - IBM i: configurewebservername.sh - z/OS: ./configurewebservername.sh where webservername is the web server definition name you defined previously when you configured the HTTP Server for HCL DX, for example: configurewebserver1.bat. Run the following command, from the wp_profile_root /bin directory: AIX HP-UX Linux Solaris: ./configurewebservername.sh Windows: configurewebservername.bat IBM i: configurewebservername.sh z/OS: ./configurewebservername.sh | |Clustered configurationIdle standby configuration|Complete the following steps in a clustered configurationidle standby configuration: 1. Copy the following script from the plugin_root/bin directory of the web server to the dmgr_profile/bin directory on your Deployment Manager server: AIX HP-UX Linux Solaris : ./configurewebservername.sh Windows: configurewebservername.bat IBM i: configurewebservername.sh z/OS: ./configurewebservername.sh where webservername is the web server definition name you defined previously when you configured the HTTP Server for HCL DX, for example: configurewebserver1.bat. Run the following command on the Deployment Manager server: AIX HP-UX Linux Solaris: ./configurewebservername.sh Windows: configurewebservername.bat IBM i: configurewebservername.sh z/OS: ./configurewebservername.sh | Regenerate the web server plug-in in WebSphere Application Server. If you are using a remote web server, copy the generated plugin-cfg.xml file to the remote server. Important: Do not complete these steps if you are changing only the WSRP Producer URI. Restart the web server. Restart the WebSphere_Portal server. Complete the following steps to update the registered Application URI entries in the JCR.ICMSTJCRNODEREGISTER table: Cluster note: In a clustered environment, complete these steps on the primary node only. Stop the WebSphere_Portal server. Back up the database. Prior to CF04, start the WebSphere_Portal server. Starting with CF04, do not restart the WebSphere_Portal server. Complete the following steps to unregister the node types: Open the ibmcontentwcm.registernodetypes file, which is in the /WebSphere/PortalServer/wcm/prereq.wcm/config/nodetypes/ directory. Change <registerAction action=\"register\"/> to <registerAction action=\"deregister\"/>. Save your changes. Run the following task: AIX HP-UX Linux Solaris: ./ConfigEngine.sh action-register-wcm-nodetypes -DWasPassword=password -DPortalAdminPwd=password Windows: ConfigEngine.bat action-register-wcm-nodetypes -DWasPassword=password -DPortalAdminPwd=password IBM i: ConfigEngine.sh action-register-wcm-nodetypes -DWasPassword=password -DPortalAdminPwd=password HP-UX: ./ConfigEngine.sh action-register-wcm-nodetypes -DWasPassword=password -DPortalAdminPwd=password Complete the following steps to register the node types: Open the ibmcontentwcm.registernodetypes file, which is in the /WebSphere/PortalServer/wcm/prereq.wcm/config/nodetypes/ directory. Change <registerAction action=\"deregister\"/> to <registerAction action=\"register\"/>. Update all lines that contain the <ApplicationURI name=\"wps/mypoc/?view=auth&uri=wcm:oid:\"/> content. Change the name of the attribute value to reflect the new WpsContextRoot value that is found in the wkplc.properties file. For example, if the original value for WpsContextRoot was wps and the new value is wp8, change the lines to <ApplicationURI name=\"wp8/mypoc/?view=auth&uri=wcm:oid:\"/>. Run the following task: AIX HP-UX Linux Solaris: ./ConfigEngine.sh action-register-wcm-nodetypes -DWasPassword=password -DPortalAdminPwd=password Windows: ConfigEngine.bat action-register-wcm-nodetypes -DWasPassword=password -DPortalAdminPwd=password IBM i: ConfigEngine.sh action-register-wcm-nodetypes -DWasPassword=password -DPortalAdminPwd=password z/OS: ./ConfigEngine.sh action-register-wcm-nodetypes -DWasPassword=password -DPortalAdminPwd=password Run the following SQL query to verify that the entries in the table now show the new URI: select * from JCR.ICMSTJCRNODEREGISTER Restart the WebSphere_Portal server. Required if you use HCL Web Content Manager: Complete the following steps to manually change the JSP components in the Web Resources v70 Library: Cluster note: In a clustered environment, complete these steps on the primary node only. Log on to HCL DX. Go to Applications > Content > Web Content Authoring . Under Preferences , select Edit Shared Settings . Under Library Selection , add Web Resources v70 to the Selected Libraries list. Click OK . Under Item Views , select All Items > All > Components > JSP . Select every JSP component from the Web Resources v70 library and then click Edit . Update the Path field for every JSP component with the new context root path. The JSP path includes two parts, which are separated by a semi-colon. The first part is the context path to the HCL Web Content Manager extensions web application and then the second part is the path to the JSP. Update the path to the web application. For example, the other path might be: /wcmextension;/jsp/html/general/UpdateItem.jsp. If you changed the context root to mynewcontext, change the old path to /mynewcontext/wcmextension;/jsp/html/general/UpdateItem.jsp. Update your custom themes to reference the correct Dojo context root. The default Dojo context root in HCL DX is /wps/portal_dojo. After you run the modify-servlet-path and modify-servlet-path-portlets tasks, the Dojo context root is changed to include the new value in the WpsContextRoot parameter as the prefix. For instance, if the new WpsContextRoot value is myco, then the new Dojo context root becomes /myco/portal_dojo. If your theme includes hardcoded references to \"/wps/portal_dojo\", update those references to the new context root. If you migrated a custom theme, you might find that it has references to /portal_dojo without the /wps prefix. Look for these references in both the WAR file and in the WebDAV storage for your theme. Cluster note: In a clustered environment, complete these steps on the primary node only. Complete the following steps to edit the context root for every search collection: Attention: Edit the context root for each existing search collection. Log on to HCL DX as the administrator. To open the Manage Search portlet, click the Administration menu icon. Then, click Search Administration > Manage Search . Click Search Collections . Click the search collection that you want to update. For example: Default Search Collection . Click the Edit Content Source icon for the first content source in the list. Edit the URL listed in the Collect documents link from the URL with the new context root. Click Save . Edit the URL in each remaining content source and then save your changes. Start the HCL DX crawler content source for each collection: If the documents are not stored in the search collection but a schedule is defined for the crawler, the crawler automatically runs at the scheduled time. You can also start the crawler manually. If the documents are already collected, select Regather documents to update the documents with the new context root information. Click Collections from All Services in the breadcrumb trail and select the next search collection to modify. Complete the following steps if you changed the context root and you have existing search scopes: To open the Manage Search portlet, click the Administration menu icon. Then, click Search Administration > Manage Search . Then, click Search Scopes . Delete the following search scopes: All Sources Managed Web Content Restart the portal server to re-create the search scopes with the correct context. Complete the following steps to change the context root for the Seedlist_Servlet : Log in to the WebSphere Integrated Solutions Console. Go to Applications > Application Types > WebSphere enterprise applications . Click the Seedlist_Servlet application link. Click Context Root For Web Modules . Change the context root and then click OK . Save your changes. Clustered environment only:Idle standby only: Resynchronize the nodes and restart the cluster. Cluster type Steps Static clusterIdle standby Complete the following steps if you have a static clusteran idle standby environment: 1. Open the deployment manager WebSphere Integrated Solutions Console. 2. Click System Administration > Nodes , select the primary node from the list, and click Full Resynchronize . 3. Click Servers > Clusters . 4. Select the cluster and click Stop . 5. After the cluster stops, restart it by selecting the cluster. Then, click Start . Dynamic cluster Complete the following steps if you have a dynamic cluster: 1. Open the deployment manager WebSphere Integrated Solutions Console. 2. Click System Administration > Nodes , select the primary node from the list, and click Full Resynchronize . 3. Click Servers > Dynamic Clusters . 4. Click the dynamic cluster that you want to stop and restart. 5. Click Dynamic cluster members . 6. Select the member name that you want to stop and then click Stop . 7. Select the member name that you want to start and then click Start . Complete the following steps on the stand-alone server or on each node within your cluster to create the WebSphere environment variables that HCL Web Content Manager needs: Locate the wkplc.properties and wkplc_comp.properties files in the wp_profile_root /ConfigEngine/properties directory and create backup copies before you change any values. Use a text editor to open the wkplc.properties file and enter the appropriate value for your environment in the WpsContextRoot property. Save and close the file. Use a text editor to open the wkplc_comp.properties file and enter the appropriate value for your environment in the following properties: WsrpContextRoot WpsPersonalizedHome WpsDefaultHome Attention: Do not enter the same value for WpsPersonalizedHome and WpsDefaultHome. Save and close the file. Run the following task to create the WebSphere environment variables for Web Content Manager: AIX HP-UX Linux Solaris: ./ConfigEngine.sh create-wcm-servletpath-variables -DServerName=your_application_server_name -DWasPassword=password Windows: ConfigEngine.bat create-wcm-servletpath-variables -DServerName=your_application_server_name -DWasPassword=password IBM i: ConfigEngine.sh create-wcm-servletpath-variables -DServerName=your_application_server_name -DWasPassword=password z/OS: ./ConfigEngine.sh create-wcm-servletpath-variables -DServerName=your_application_server_name -DWasPassword=password Note: Check the output for any error messages before you proceed with the next task. If any of the configuration tasks fail, verify the values in the wkplc.properties and wkplc_comp.properties files. Resynchronize the nodes and restart the cluster.","title":"CF07 and earlier: Changing the portal URI after an installation"},{"location":"config/cfg_validation_targets/","text":"ConfigEngine validation targets Some configurations can cause conflicts between Portal resources or with other web modules deployed into the WebSphere Application Server. You can check for conflicts by using ConfigEngine validation targets. Conflicts can occur when the same value is specified for different resources. For example, a friendly name can conflict with a virtual portal context or a vanity URL. Conflicts are more likely when Portal is configured to use an empty context root and default home. Portal includes three ConfigEngine targets to detect and prevent such conflicts: path-conflict-check-full This target checks whether there are any conflicts between Portal resources and other servlets that are deployed into WebSphere. path-conflict-check-path Required parameter: checkPath (for example /path/to/check) This target checks whether the provided path causes a conflict with the existing configuration. path-conflict-check-uri Required parameter: checkURI This target checks whether the creation of a Portal resource would cause a conflict with existing resources. The following are possible URI formats: path:/path/to/check vp-context:/my-VP friendly-name:/my/friendly/path vanity-url:/my-vanity-name These targets consider many resources, but conflicts can still exist. The targets can check for conflicts with other web modules only if those modules are started. For example, the targets cannot find the following types of conflict: Conflicts that exist only in a project or that occur when a project is published. Conflicts that exist in resources to which the user does not have access. Conflicts that occur when you add servlet filters to the request processing that change the path of the URL. Also, you cannot use the targets to check whether changing the friendly name of a page or deleting a page will cause a conflict. The following parameters can be used for all targets. They check whether a configuration change would cause a conflict: assumeWpsContextRoot Performs the check as if the WpsContextRoot is set to the specified value. assumeWpsDefaultHome Performs the check as if the WpsDefaultHome is set to the specified value. assumeWpsPersonalizedHome Performs the check as if the WpsPersonalizedHome is set to the specified value. assumeWsrpContextRoot Performs the check as if the WsrpContextRoot is set to the specified value. The result of the conflict check is part of the ConfigEngine output. It might look like the following example: [wsadmin] path conflict report: [wsadmin] --------------------- [wsadmin] [wsadmin] /wps/myportal/Home [wsadmin] virtual portal URL context [wsadmin] friendly name [wsadmin] [wsadmin] /wps/portal/Home [wsadmin] friendly name [wsadmin] virtual portal URL context In this example, a conflict was found between a friendly name and virtual portal mapping.","title":"ConfigEngine validation targets"},{"location":"config/cfg_validation_targets/#configengine-validation-targets","text":"Some configurations can cause conflicts between Portal resources or with other web modules deployed into the WebSphere Application Server. You can check for conflicts by using ConfigEngine validation targets. Conflicts can occur when the same value is specified for different resources. For example, a friendly name can conflict with a virtual portal context or a vanity URL. Conflicts are more likely when Portal is configured to use an empty context root and default home. Portal includes three ConfigEngine targets to detect and prevent such conflicts: path-conflict-check-full This target checks whether there are any conflicts between Portal resources and other servlets that are deployed into WebSphere. path-conflict-check-path Required parameter: checkPath (for example /path/to/check) This target checks whether the provided path causes a conflict with the existing configuration. path-conflict-check-uri Required parameter: checkURI This target checks whether the creation of a Portal resource would cause a conflict with existing resources. The following are possible URI formats: path:/path/to/check vp-context:/my-VP friendly-name:/my/friendly/path vanity-url:/my-vanity-name These targets consider many resources, but conflicts can still exist. The targets can check for conflicts with other web modules only if those modules are started. For example, the targets cannot find the following types of conflict: Conflicts that exist only in a project or that occur when a project is published. Conflicts that exist in resources to which the user does not have access. Conflicts that occur when you add servlet filters to the request processing that change the path of the URL. Also, you cannot use the targets to check whether changing the friendly name of a page or deleting a page will cause a conflict. The following parameters can be used for all targets. They check whether a configuration change would cause a conflict: assumeWpsContextRoot Performs the check as if the WpsContextRoot is set to the specified value. assumeWpsDefaultHome Performs the check as if the WpsDefaultHome is set to the specified value. assumeWpsPersonalizedHome Performs the check as if the WpsPersonalizedHome is set to the specified value. assumeWsrpContextRoot Performs the check as if the WsrpContextRoot is set to the specified value. The result of the conflict check is part of the ConfigEngine output. It might look like the following example: [wsadmin] path conflict report: [wsadmin] --------------------- [wsadmin] [wsadmin] /wps/myportal/Home [wsadmin] virtual portal URL context [wsadmin] friendly name [wsadmin] [wsadmin] /wps/portal/Home [wsadmin] friendly name [wsadmin] virtual portal URL context In this example, a conflict was found between a friendly name and virtual portal mapping.","title":"ConfigEngine validation targets"},{"location":"config/config_dbms/","text":"Database Management Systems Configure the connection between HCL Digital Experience and your database management system. The Database Transfer configuration option in the Configuration Wizard assigns users and permissions, creates databases, obtains support for database collation, and transfers your database.","title":"Database Management Systems"},{"location":"config/config_dbms/#database-management-systems","text":"Configure the connection between HCL Digital Experience and your database management system. The Database Transfer configuration option in the Configuration Wizard assigns users and permissions, creates databases, obtains support for database collation, and transfers your database.","title":"Database Management Systems"},{"location":"config/cw_add_node/","text":"Create an additional cluster node After you answer questions and provide information about your environment, the wizard generates a custom configuration procedure. The following set of steps represents all possible configuration steps. The instructions that you generate might include or exclude specific steps based on your wizard selections. After you create a static or dynamic cluster, you can create an additional horizontal cluster node to handle failover requests. When creating an additional horizontal cluster node on another server, run the Configuration Wizard from that server. Manual Step: Install portal binary files on the server where you plan to add a node to your cluster. Condition None ConfigEngine task None Manual Step: Install profile templates. Condition None ConfigEngine task None Manual Step: Copy the database drivers from the primary node to the additional node. Condition None ConfigEngine task None Manual Step: Verify that the portal node and deployment manager system clocks are within 5 minutes of each other. Condition Remote deployment manager ConfigEngine task None Create the profile for the secondary portal node. Condition none ConfigEngine task none Federate the node. This node then becomes a managed node in the deployment manager cell. Condition none ConfigEngine task add-node Configure the dynamic cluster node. Add a nodegroup and add nodes to the nodegroup. Condition Dynamic cluster ConfigEngine task dynamic-cluster-create-nodegroup dynamic-cluster-add-node-to-nodegroup Add a secondary node to the cluster. Condition Static cluster ConfigEngine task cluster-node-config-cluster-setup-additional Add a secondary node to the cluster. Condition Dynamic cluster ConfigEngine task dynamic-cluster-setup-additional Start the portal server. Condition None ConfigEngine task start-portal-server","title":"Create an additional cluster node"},{"location":"config/cw_add_node/#create-an-additional-cluster-node","text":"After you answer questions and provide information about your environment, the wizard generates a custom configuration procedure. The following set of steps represents all possible configuration steps. The instructions that you generate might include or exclude specific steps based on your wizard selections. After you create a static or dynamic cluster, you can create an additional horizontal cluster node to handle failover requests. When creating an additional horizontal cluster node on another server, run the Configuration Wizard from that server. Manual Step: Install portal binary files on the server where you plan to add a node to your cluster. Condition None ConfigEngine task None Manual Step: Install profile templates. Condition None ConfigEngine task None Manual Step: Copy the database drivers from the primary node to the additional node. Condition None ConfigEngine task None Manual Step: Verify that the portal node and deployment manager system clocks are within 5 minutes of each other. Condition Remote deployment manager ConfigEngine task None Create the profile for the secondary portal node. Condition none ConfigEngine task none Federate the node. This node then becomes a managed node in the deployment manager cell. Condition none ConfigEngine task add-node Configure the dynamic cluster node. Add a nodegroup and add nodes to the nodegroup. Condition Dynamic cluster ConfigEngine task dynamic-cluster-create-nodegroup dynamic-cluster-add-node-to-nodegroup Add a secondary node to the cluster. Condition Static cluster ConfigEngine task cluster-node-config-cluster-setup-additional Add a secondary node to the cluster. Condition Dynamic cluster ConfigEngine task dynamic-cluster-setup-additional Start the portal server. Condition None ConfigEngine task start-portal-server","title":"Create an additional cluster node"},{"location":"config/cw_create_cluster/","text":"Create a cluster Use the Configuration Wizard to create the primary node in your cluster. The Create a Cluster option in the wizard refers to setting up the primary node. Configuration Wizard To access the Create a Cluster click Set Up a Cluster option on the home page of the Configuration Wizard. The default selections for the create a cluster procedure are: Deployment manager on the same server Static cluster type You can change the default selections. See the following topics for dynamic and static cluster selections for details about the configuration steps.","title":"Create a cluster"},{"location":"config/cw_create_cluster/#create-a-cluster","text":"Use the Configuration Wizard to create the primary node in your cluster. The Create a Cluster option in the wizard refers to setting up the primary node.","title":"Create a cluster"},{"location":"config/cw_create_cluster/#configuration-wizard","text":"To access the Create a Cluster click Set Up a Cluster option on the home page of the Configuration Wizard. The default selections for the create a cluster procedure are: Deployment manager on the same server Static cluster type You can change the default selections. See the following topics for dynamic and static cluster selections for details about the configuration steps.","title":"Configuration Wizard"},{"location":"config/cw_db_transfer-db2/","text":"DB2: Database transfer Your portal is installed with an Apache Derby database. The database that is immediately available for use is good for demonstration and portlet and theme development environments. Otherwise, you must configure portal to use a production-level database. Use the Configuration Wizard to transfer the data and configure a new database server. Configuration Wizard The primary Configuration Wizard options are based on your target configuration topology, such as a stand-alone server or a cluster. The database transfer option is included with both Set Up a Stand-alone Server and Set Up a Cluster . For the stand-alone server topology, run the database transfer option before you run the federated security option. For the cluster option, run the database transfer before you create your deployment manager profile. For the Do you want to transfer to one database or multiple databases or schemas option, select Single database to configure one database with a single database user and a single data source. Select Multiple databases or schemas to configure multiple databases with different data sources and different users per schema. You can also use the multiple database option to configure a single database with different data sources and different users. Validation Prevent a possible database transfer failure by validating your entries in the wizard. When you chose to validate settings for the Database Transfer option, field syntax and database connection validations are performed to prevent a possible failure before you run the configuration. Examples of fields that are validated include host name and port number. Examples of fields that are validated include database URL and database library fields. Two types of validation are performed when you select to validate settings including field syntax and database connection validations. Syntax validation checks that you: Enter a valid port number in the range of 1 - 65535. Use the correct format for your host name. Enter a valid context root value Use the correct JDBC format in the database URL fields. Enter the correct path for your database library jar files. The database connection validation checks that a connection can be made to your database server. The wizard can connect to your database server to validate the host name and port number values that you enter. On the Database Settings panel, you can choose to turn validation on or off by selecting Yes or No to the Connect to database server to validate settings option. Select No , if you know that your parameters are correct and your database server is unavailable at the time of creating your instructions. Transferring data to a different database server Depending on your environment, the wizard generates a configuration process. The following steps reflect all possible steps in the configuration process. The steps do not represent a literal configuration. The steps are provided as a reference. If you click View Step Command , you can see the task and properties associated with each step in the wizard. Back up the properties files that the wizard uses during the configuration. Condition None ConfigEngine task backup-property-files-for-dbxfer Manual Step: Create the database users and groups. Condition None ConfigEngine task None Manual Step: Create the database user profile on IBM\u00ae DB2\u00ae for i. Condition None ConfigEngine task None Manual Step: Create the database runtime users and groups. Condition None ConfigEngine task None Manual Step: Create the database configuration users on DB2 for z/OS\u00ae. Condition None ConfigEngine task None Manual Step: Download the script and view instructions to delete existing databases. Condition None ConfigEngine task None Create your databases. Condition None ConfigEngine task create-database Manual Step: Download the script and run it on the database server to create your database. Condition Select to manually create your database. ConfigEngine task None Manual Step: Download the script and run it on the database server to create your database. Condition Select to manually create your database. ConfigEngine task None Manual Step: Create your Oracle database. Condition None ConfigEngine task None Manual Step: Download the script and view instructions to create your databases. Condition None ConfigEngine task None Manual Step: Create the data directory, data , and the index directory, index , on your database server. Condition Select to manually create users and assign them permissions. ConfigEngine task None Set up your database. (Automatic Storage Management Users only): If you have configured your database with Automatic Storage Management, you must perform additional manual instructions after you perform this step. Run the setup database script to create database schemas and users and grant privileges to database users. Then, go to Oracle: Creating JCR table spaces (Automatic Storage Management) to perform additional manual instructions. Condition None ConfigEngine task setup-database Manual Step: Download the script and run it on the database server to set up your database. Condition Select to manually assign users permissions. ConfigEngine task None Manual Step: Download the script and run it on the database server to set up your database. (Automatic Storage Management Users only): If you have configured your database with Automatic Storage Management, you must edit the script that you download for your environment before you run it on the database server. Condition Select to manually create users and assign them permissions. ConfigEngine task None Manual Step: Download the script and run it on the database server to set up your database. Condition Select to manually create users and assign them permissions. ConfigEngine task None Manual Step: Set up JCR collation for correct language locale order. Condition Select to have advanced database collation support. ConfigEngine task None Manual Step: Restart the DB2 server. Condition None ConfigEngine task None Validate the database connection and environment. Condition None ConfigEngine task validate-database validate-database-environment Stop the portal server. Condition collation support ConfigEngine task stop-portal-server Transfer the database. Condition None ConfigEngine task database-transfer enable-profiles-check-managed package-profiles Grant privileges to the database runtime users. Condition None ConfigEngine task grant-runtime-db-user-privileges Manual Step: Download the script and run it on the database server to grant privileges to the runtime user. Condition Select to manually create users and assign them permissions. ConfigEngine task None Manual Step: Download the script and run it to grant the database runtime user the appropriate privileges to work with database tables. Condition Select to manually create users and assign them permissions. ConfigEngine task None Manual Step: Download the script and run it on the database server to grant privileges to database runtime users. Condition Select to manually create users and assign them permissions. ConfigEngine task None Connect to your databases. Condition None ConfigEngine task None Manual Step: Download the script and view instructions to reset the check pending status on portal table spaces. Condition None ConfigEngine task None Reset the web content manager event log. Condition None ConfigEngine task None Configure the JCR domain to support large files. Condition None ConfigEngine task datasource-enable-fully-materialize-lob-data Manual Step: Improve database response time for your database that contains the JCR domain. Condition None ConfigEngine task None Start the portal server. Condition None ConfigEngine task start-portal-server What to do next You transferred your data from Apache Derby to your preferred database. One quick way to test your database configuration is to log in and explore the site to validate the site is working as you expected. Go to http://host_name:port/context_root/default_portal_home. For example, go to http://host_name:10039/wps/portal. Next, you can use other options to configure your environment more. If you are setting up a stand-alone server environment, you can use the Enable Federated Security option to add an LDAP user registry. If you are setting up a cluster environment, you can use the Create a Deployment Manager option to create a deployment manager profile that is augmented with HCL Portal resources.","title":"DB2: Database transfer"},{"location":"config/cw_db_transfer-db2/#db2-database-transfer","text":"Your portal is installed with an Apache Derby database. The database that is immediately available for use is good for demonstration and portlet and theme development environments. Otherwise, you must configure portal to use a production-level database. Use the Configuration Wizard to transfer the data and configure a new database server.","title":"DB2: Database transfer"},{"location":"config/cw_db_transfer-db2/#configuration-wizard","text":"The primary Configuration Wizard options are based on your target configuration topology, such as a stand-alone server or a cluster. The database transfer option is included with both Set Up a Stand-alone Server and Set Up a Cluster . For the stand-alone server topology, run the database transfer option before you run the federated security option. For the cluster option, run the database transfer before you create your deployment manager profile. For the Do you want to transfer to one database or multiple databases or schemas option, select Single database to configure one database with a single database user and a single data source. Select Multiple databases or schemas to configure multiple databases with different data sources and different users per schema. You can also use the multiple database option to configure a single database with different data sources and different users.","title":"Configuration Wizard"},{"location":"config/cw_db_transfer-db2/#validation","text":"Prevent a possible database transfer failure by validating your entries in the wizard. When you chose to validate settings for the Database Transfer option, field syntax and database connection validations are performed to prevent a possible failure before you run the configuration. Examples of fields that are validated include host name and port number. Examples of fields that are validated include database URL and database library fields. Two types of validation are performed when you select to validate settings including field syntax and database connection validations. Syntax validation checks that you: Enter a valid port number in the range of 1 - 65535. Use the correct format for your host name. Enter a valid context root value Use the correct JDBC format in the database URL fields. Enter the correct path for your database library jar files. The database connection validation checks that a connection can be made to your database server. The wizard can connect to your database server to validate the host name and port number values that you enter. On the Database Settings panel, you can choose to turn validation on or off by selecting Yes or No to the Connect to database server to validate settings option. Select No , if you know that your parameters are correct and your database server is unavailable at the time of creating your instructions.","title":"Validation"},{"location":"config/cw_db_transfer-db2/#transferring-data-to-a-different-database-server","text":"Depending on your environment, the wizard generates a configuration process. The following steps reflect all possible steps in the configuration process. The steps do not represent a literal configuration. The steps are provided as a reference. If you click View Step Command , you can see the task and properties associated with each step in the wizard. Back up the properties files that the wizard uses during the configuration. Condition None ConfigEngine task backup-property-files-for-dbxfer Manual Step: Create the database users and groups. Condition None ConfigEngine task None Manual Step: Create the database user profile on IBM\u00ae DB2\u00ae for i. Condition None ConfigEngine task None Manual Step: Create the database runtime users and groups. Condition None ConfigEngine task None Manual Step: Create the database configuration users on DB2 for z/OS\u00ae. Condition None ConfigEngine task None Manual Step: Download the script and view instructions to delete existing databases. Condition None ConfigEngine task None Create your databases. Condition None ConfigEngine task create-database Manual Step: Download the script and run it on the database server to create your database. Condition Select to manually create your database. ConfigEngine task None Manual Step: Download the script and run it on the database server to create your database. Condition Select to manually create your database. ConfigEngine task None Manual Step: Create your Oracle database. Condition None ConfigEngine task None Manual Step: Download the script and view instructions to create your databases. Condition None ConfigEngine task None Manual Step: Create the data directory, data , and the index directory, index , on your database server. Condition Select to manually create users and assign them permissions. ConfigEngine task None Set up your database. (Automatic Storage Management Users only): If you have configured your database with Automatic Storage Management, you must perform additional manual instructions after you perform this step. Run the setup database script to create database schemas and users and grant privileges to database users. Then, go to Oracle: Creating JCR table spaces (Automatic Storage Management) to perform additional manual instructions. Condition None ConfigEngine task setup-database Manual Step: Download the script and run it on the database server to set up your database. Condition Select to manually assign users permissions. ConfigEngine task None Manual Step: Download the script and run it on the database server to set up your database. (Automatic Storage Management Users only): If you have configured your database with Automatic Storage Management, you must edit the script that you download for your environment before you run it on the database server. Condition Select to manually create users and assign them permissions. ConfigEngine task None Manual Step: Download the script and run it on the database server to set up your database. Condition Select to manually create users and assign them permissions. ConfigEngine task None Manual Step: Set up JCR collation for correct language locale order. Condition Select to have advanced database collation support. ConfigEngine task None Manual Step: Restart the DB2 server. Condition None ConfigEngine task None Validate the database connection and environment. Condition None ConfigEngine task validate-database validate-database-environment Stop the portal server. Condition collation support ConfigEngine task stop-portal-server Transfer the database. Condition None ConfigEngine task database-transfer enable-profiles-check-managed package-profiles Grant privileges to the database runtime users. Condition None ConfigEngine task grant-runtime-db-user-privileges Manual Step: Download the script and run it on the database server to grant privileges to the runtime user. Condition Select to manually create users and assign them permissions. ConfigEngine task None Manual Step: Download the script and run it to grant the database runtime user the appropriate privileges to work with database tables. Condition Select to manually create users and assign them permissions. ConfigEngine task None Manual Step: Download the script and run it on the database server to grant privileges to database runtime users. Condition Select to manually create users and assign them permissions. ConfigEngine task None Connect to your databases. Condition None ConfigEngine task None Manual Step: Download the script and view instructions to reset the check pending status on portal table spaces. Condition None ConfigEngine task None Reset the web content manager event log. Condition None ConfigEngine task None Configure the JCR domain to support large files. Condition None ConfigEngine task datasource-enable-fully-materialize-lob-data Manual Step: Improve database response time for your database that contains the JCR domain. Condition None ConfigEngine task None Start the portal server. Condition None ConfigEngine task start-portal-server","title":"Transferring data to a different database server"},{"location":"config/cw_db_transfer-db2/#what-to-do-next","text":"You transferred your data from Apache Derby to your preferred database. One quick way to test your database configuration is to log in and explore the site to validate the site is working as you expected. Go to http://host_name:port/context_root/default_portal_home. For example, go to http://host_name:10039/wps/portal. Next, you can use other options to configure your environment more. If you are setting up a stand-alone server environment, you can use the Enable Federated Security option to add an LDAP user registry. If you are setting up a cluster environment, you can use the Create a Deployment Manager option to create a deployment manager profile that is augmented with HCL Portal resources.","title":"What to do next"},{"location":"config/cw_db_transfer/","text":"DB2 z/OS: Database transfer Your portal is installed with an Apache Derby database. The database that is immediately available for use is good for demonstration and portlet and theme development environments. Otherwise, you must configure portal to use a production-level database. Use the Configuration Wizard to transfer the data and configure a new database server. Configuration Wizard The primary Configuration Wizard options are based on your target configuration topology, such as a stand-alone server or a cluster. The database transfer option is included with both Set Up a Stand-alone Server and Set Up a Cluster . For the stand-alone server topology, run the database transfer option before you run the federated security option. For the cluster option, run the database transfer before you create your deployment manager profile. For the Do you want to transfer to one database or multiple databases or schemas option, select Single database to configure one database with a single database user and a single data source. Select Multiple databases or schemas to configure multiple databases with different data sources and different users per schema. You can also use the multiple database option to configure a single database with different data sources and different users. Validation Prevent a possible database transfer failure by validating your entries in the wizard. When you chose to validate settings for the Database Transfer option, field syntax and database connection validations are performed to prevent a possible failure before you run the configuration. Examples of fields that are validated include host name and port number. Examples of fields that are validated include database URL and database library fields. Two types of validation are performed when you select to validate settings including field syntax and database connection validations. Syntax validation checks that you: Enter a valid port number in the range of 1 - 65535. Use the correct format for your host name. Enter a valid context root value Use the correct JDBC format in the database URL fields. Enter the correct path for your database library jar files. The database connection validation checks that a connection can be made to your database server. The wizard can connect to your database server to validate the host name and port number values that you enter. On the Database Settings panel, you can choose to turn validation on or off by selecting Yes or No to the Connect to database server to validate settings option. Select No , if you know that your parameters are correct and your database server is unavailable at the time of creating your instructions. Transferring data to a different database server Depending on your environment, the wizard generates a configuration process. The following steps reflect all possible steps in the configuration process. The steps do not represent a literal configuration. The steps are provided as a reference. If you click View Step Command , you can see the task and properties associated with each step in the wizard. Back up the properties files that the wizard uses during the configuration. Condition None ConfigEngine task backup-property-files-for-dbxfer Manual Step: Create the database users and groups. Condition None ConfigEngine task None Manual Step: Create the database user profile on IBM\u00ae DB2\u00ae for i. Condition None ConfigEngine task None Manual Step: Create the database runtime users and groups. Condition None ConfigEngine task None Manual Step: Create the database configuration users on DB2 for z/OS\u00ae. Condition None ConfigEngine task None Manual Step: Download the script and view instructions to delete existing databases. Condition None ConfigEngine task None Create your databases. Condition None ConfigEngine task create-database Manual Step: Download the script and run it on the database server to create your database. Condition Select to manually create your database. ConfigEngine task None Manual Step: Download the script and run it on the database server to create your database. Condition Select to manually create your database. ConfigEngine task None Manual Step: Create your Oracle database. Condition None ConfigEngine task None Manual Step: Download the script and view instructions to create your databases. Condition None ConfigEngine task None Manual Step: Create the data directory, data , and the index directory, index , on your database server. Condition Select to manually create users and assign them permissions. ConfigEngine task None Set up your database. (Automatic Storage Management Users only): If you have configured your database with Automatic Storage Management, you must perform additional manual instructions after you perform this step. Run the setup database script to create database schemas and users and grant privileges to database users. Then, go to Oracle: Creating JCR table spaces (Automatic Storage Management) to perform additional manual instructions. Condition None ConfigEngine task setup-database Manual Step: Download the script and run it on the database server to set up your database. Condition Select to manually assign users permissions. ConfigEngine task None Manual Step: Download the script and run it on the database server to set up your database. (Automatic Storage Management Users only): If you have configured your database with Automatic Storage Management, you must edit the script that you download for your environment before you run it on the database server. Condition Select to manually create users and assign them permissions. ConfigEngine task None Manual Step: Download the script and run it on the database server to set up your database. Condition Select to manually create users and assign them permissions. ConfigEngine task None Manual Step: Set up JCR collation for correct language locale order. Condition Select to have advanced database collation support. ConfigEngine task None Manual Step: Restart the DB2 server. Condition None ConfigEngine task None Validate the database connection and environment. Condition None ConfigEngine task validate-database validate-database-environment Stop the portal server. Condition collation support ConfigEngine task stop-portal-server Transfer the database. Condition None ConfigEngine task database-transfer enable-profiles-check-managed package-profiles Grant privileges to the database runtime users. Condition None ConfigEngine task grant-runtime-db-user-privileges Manual Step: Download the script and run it on the database server to grant privileges to the runtime user. Condition Select to manually create users and assign them permissions. ConfigEngine task None Manual Step: Download the script and run it to grant the database runtime user the appropriate privileges to work with database tables. Condition Select to manually create users and assign them permissions. ConfigEngine task None Manual Step: Download the script and run it on the database server to grant privileges to database runtime users. Condition Select to manually create users and assign them permissions. ConfigEngine task None Connect to your databases. Condition None ConfigEngine task None Manual Step: Download the script and view instructions to reset the check pending status on portal table spaces. Condition None ConfigEngine task None Reset the web content manager event log. Condition None ConfigEngine task None Configure the JCR domain to support large files. Condition None ConfigEngine task datasource-enable-fully-materialize-lob-data Manual Step: Improve database response time for your database that contains the JCR domain. Condition None ConfigEngine task None Start the portal server. Condition None ConfigEngine task start-portal-server What to do next You transferred your data from Apache Derby to your preferred database. One quick way to test your database configuration is to log in and explore the site to validate the site is working as you expected. Go to http://host_name:port/context_root/default_portal_home. For example, go to http://host_name:10039/wps/portal. Next, you can use other options to configure your environment more. If you are setting up a stand-alone server environment, you can use the Enable Federated Security option to add an LDAP user registry. If you are setting up a cluster environment, you can use the Create a Deployment Manager option to create a deployment manager profile that is augmented with HCL Portal resources.","title":"DB2 z/OS: Database transfer"},{"location":"config/cw_db_transfer/#db2-zos-database-transfer","text":"Your portal is installed with an Apache Derby database. The database that is immediately available for use is good for demonstration and portlet and theme development environments. Otherwise, you must configure portal to use a production-level database. Use the Configuration Wizard to transfer the data and configure a new database server.","title":"DB2 z/OS: Database transfer"},{"location":"config/cw_db_transfer/#configuration-wizard","text":"The primary Configuration Wizard options are based on your target configuration topology, such as a stand-alone server or a cluster. The database transfer option is included with both Set Up a Stand-alone Server and Set Up a Cluster . For the stand-alone server topology, run the database transfer option before you run the federated security option. For the cluster option, run the database transfer before you create your deployment manager profile. For the Do you want to transfer to one database or multiple databases or schemas option, select Single database to configure one database with a single database user and a single data source. Select Multiple databases or schemas to configure multiple databases with different data sources and different users per schema. You can also use the multiple database option to configure a single database with different data sources and different users.","title":"Configuration Wizard"},{"location":"config/cw_db_transfer/#validation","text":"Prevent a possible database transfer failure by validating your entries in the wizard. When you chose to validate settings for the Database Transfer option, field syntax and database connection validations are performed to prevent a possible failure before you run the configuration. Examples of fields that are validated include host name and port number. Examples of fields that are validated include database URL and database library fields. Two types of validation are performed when you select to validate settings including field syntax and database connection validations. Syntax validation checks that you: Enter a valid port number in the range of 1 - 65535. Use the correct format for your host name. Enter a valid context root value Use the correct JDBC format in the database URL fields. Enter the correct path for your database library jar files. The database connection validation checks that a connection can be made to your database server. The wizard can connect to your database server to validate the host name and port number values that you enter. On the Database Settings panel, you can choose to turn validation on or off by selecting Yes or No to the Connect to database server to validate settings option. Select No , if you know that your parameters are correct and your database server is unavailable at the time of creating your instructions.","title":"Validation"},{"location":"config/cw_db_transfer/#transferring-data-to-a-different-database-server","text":"Depending on your environment, the wizard generates a configuration process. The following steps reflect all possible steps in the configuration process. The steps do not represent a literal configuration. The steps are provided as a reference. If you click View Step Command , you can see the task and properties associated with each step in the wizard. Back up the properties files that the wizard uses during the configuration. Condition None ConfigEngine task backup-property-files-for-dbxfer Manual Step: Create the database users and groups. Condition None ConfigEngine task None Manual Step: Create the database user profile on IBM\u00ae DB2\u00ae for i. Condition None ConfigEngine task None Manual Step: Create the database runtime users and groups. Condition None ConfigEngine task None Manual Step: Create the database configuration users on DB2 for z/OS\u00ae. Condition None ConfigEngine task None Manual Step: Download the script and view instructions to delete existing databases. Condition None ConfigEngine task None Create your databases. Condition None ConfigEngine task create-database Manual Step: Download the script and run it on the database server to create your database. Condition Select to manually create your database. ConfigEngine task None Manual Step: Download the script and run it on the database server to create your database. Condition Select to manually create your database. ConfigEngine task None Manual Step: Create your Oracle database. Condition None ConfigEngine task None Manual Step: Download the script and view instructions to create your databases. Condition None ConfigEngine task None Manual Step: Create the data directory, data , and the index directory, index , on your database server. Condition Select to manually create users and assign them permissions. ConfigEngine task None Set up your database. (Automatic Storage Management Users only): If you have configured your database with Automatic Storage Management, you must perform additional manual instructions after you perform this step. Run the setup database script to create database schemas and users and grant privileges to database users. Then, go to Oracle: Creating JCR table spaces (Automatic Storage Management) to perform additional manual instructions. Condition None ConfigEngine task setup-database Manual Step: Download the script and run it on the database server to set up your database. Condition Select to manually assign users permissions. ConfigEngine task None Manual Step: Download the script and run it on the database server to set up your database. (Automatic Storage Management Users only): If you have configured your database with Automatic Storage Management, you must edit the script that you download for your environment before you run it on the database server. Condition Select to manually create users and assign them permissions. ConfigEngine task None Manual Step: Download the script and run it on the database server to set up your database. Condition Select to manually create users and assign them permissions. ConfigEngine task None Manual Step: Set up JCR collation for correct language locale order. Condition Select to have advanced database collation support. ConfigEngine task None Manual Step: Restart the DB2 server. Condition None ConfigEngine task None Validate the database connection and environment. Condition None ConfigEngine task validate-database validate-database-environment Stop the portal server. Condition collation support ConfigEngine task stop-portal-server Transfer the database. Condition None ConfigEngine task database-transfer enable-profiles-check-managed package-profiles Grant privileges to the database runtime users. Condition None ConfigEngine task grant-runtime-db-user-privileges Manual Step: Download the script and run it on the database server to grant privileges to the runtime user. Condition Select to manually create users and assign them permissions. ConfigEngine task None Manual Step: Download the script and run it to grant the database runtime user the appropriate privileges to work with database tables. Condition Select to manually create users and assign them permissions. ConfigEngine task None Manual Step: Download the script and run it on the database server to grant privileges to database runtime users. Condition Select to manually create users and assign them permissions. ConfigEngine task None Connect to your databases. Condition None ConfigEngine task None Manual Step: Download the script and view instructions to reset the check pending status on portal table spaces. Condition None ConfigEngine task None Reset the web content manager event log. Condition None ConfigEngine task None Configure the JCR domain to support large files. Condition None ConfigEngine task datasource-enable-fully-materialize-lob-data Manual Step: Improve database response time for your database that contains the JCR domain. Condition None ConfigEngine task None Start the portal server. Condition None ConfigEngine task start-portal-server","title":"Transferring data to a different database server"},{"location":"config/cw_db_transfer/#what-to-do-next","text":"You transferred your data from Apache Derby to your preferred database. One quick way to test your database configuration is to log in and explore the site to validate the site is working as you expected. Go to http://host_name:port/context_root/default_portal_home. For example, go to http://host_name:10039/wps/portal. Next, you can use other options to configure your environment more. If you are setting up a stand-alone server environment, you can use the Enable Federated Security option to add an LDAP user registry. If you are setting up a cluster environment, you can use the Create a Deployment Manager option to create a deployment manager profile that is augmented with HCL Portal resources.","title":"What to do next"},{"location":"config/cw_db_ws_db2_multidb/","text":"DB2 worksheet: Transfer to multiple databases When you use the database transfer option, you can use the condition to create multiple databases in the Configuration Wizard. This condition is selected by default. This worksheet highlights the fields and properties that you see in the Configuration Wizard when you use the multiple databases condition. When you use the database transfer option, you answer questions about your environment. Some fields are required. Other fields are required or removed based on your selections for environment conditions. Typical fields The following table lists the typical fields that display when you select the condition to transfer your data to multiple databases. To see additional fields that apply to an advanced configuration, click Advanced . Depending on the conditions that you select, values that you enter for some typical fields might apply across domains. Rather than entering a value multiple times, this value is copied to fields in the Advanced view and applied across the database domains. Field Label Property Conditions Your Value Release database name release.DbName Release data source release.DataSourceName Release database URL release.DbUrl Community database name community.DbName Community data source community.DataSourceName Community database URL community.DbUrl Customization database name customization.DbName Customization Data source customization.DataSourceName Customization database URL customization.DbUrl JCR database URL JCR.DbName JCR database name JCR.DataSourceName JCR data source JCR.DbUrl Feedback database name feedback.DbName Feedback data source feedback.DataSourceName Feedback database URL feedback.DbUrl LikeMinds Database name likeminds.DbName LikeMinds data source likeminds.DataSourceName LikeMinds database URL likeminds.DbUrl IBM DB2 library Db2.DbLibrary Configuration user ID The value that you enter is copied to fields in the Advanced view for the dbdomain.DbUser properties. To see this field, continue to use the Yes selection for using the same user ID and passwords across portal database domains. Configuration password The value that you enter is copied to fields in the Advanced view for the dbdomain.DbPassword properties. To see this field, continue to use the Yes selection for using the same user ID and passwords across portal database domains. Database administrator ID The value that you enter is copied to fields in the Advanced view for the dbdomain.DBA.DbUser properties. To see this field, continue to use the Yes selection for using the same user ID and passwords across portal database domains. Database administrator password The value that you enter is copied to fields in the Advanced view for the dbdomain.DBA.DbPassword properties. To see this field, continue to use the Yes selection for using the same user ID and passwords across portal database domains. Release configuration user release.DbUser To see this field, select No for using the same user ID and passwords across portal database domains. Release configuration password release.DbPassword To see this field, select No for using the same user ID and passwords across portal database domains. Release database administrator release.DBA.DbUser To see this field, select No for using the same user ID and passwords across portal database domains. Release database administrator password release.DBA.DbPassword To see this field, select No for using the same user ID and passwords across portal database domains. Community configuration user community.DbUser To see this field, select No for using the same user ID and passwords across portal database domains. Community configuration password community.DbPassword To see this field, select No for using the same user ID and passwords across portal database domains. Community database administrator community.DBA.DbUser To see this field, select No for using the same user ID and passwords across portal database domains. Community database administrator password community.DBA.DbPassword To see this field, select No for using the same user ID and passwords across portal database domains. Customization configuration user customization.DbUser To see this field, select No for using the same user ID and passwords across portal database domains. Customization configuration password customization.DbPassword To see this field, select No for using the same user ID and passwords across portal database domains. Customization database administrator customization.DBA.DbUser To see this field, select No for using the same user ID and passwords across portal database domains. Customization database administrator password customization.DBA.DbPassword To see this field, select No for using the same user ID and passwords across portal database domains. JCR configuration user jcr.DbUser To see this field, select No for using the same user ID and passwords across portal database domains. JCR configuration password jcr.DbPassword To see this field, select No for using the same user ID and passwords across portal database domains. JCR database administrator jcr.DBA.DbUser To see this field, select No for using the same user ID and passwords across portal database domains. JCR database administrator password jcr.DBA.DbPassword To see this field, select No for using the same user ID and passwords across portal database domains. Feedback configuration user feedback.DbUser To see this field, select No for using the same user ID and passwords across portal database domains. Feedback configuration password feedback.DbPassword To see this field, select No for using the same user ID and passwords across portal database domains. Feedback database administrator feedback.DBA.DbUser To see this field, select No for using the same user ID and passwords across portal database domains. Feedback database administrator password feedback.DBA.DbPassword To see this field, select No for using the same user ID and passwords across portal database domains. LikeMinds configuration user likeminds.DbUser To see this field, select No for using the same user ID and passwords across portal database domains. LikeMinds configuration password likeminds.DbPassword To see this field, select No for using the same user ID and passwords across portal database domains. LikeMinds database administrator likeminds.DBA.DbUser To see this field, select No for using the same user ID and passwords across portal database domains. LikeMinds database administrator password likeminds.DBA.DbPassword To see this field, select No for using the same user ID and passwords across portal database domains. Runtime user The value that you enter is copied to fields in the Advanced view for the dbdomain.DbRuntimeUser properties. To see this field:- Continue to use the Yes selection for using the same user ID and passwords across portal database domains. - Continue to use the default selection of Yes for needing a runtime database user for day-to-day operations. | | | Runtime password |The value that you enter is copied to fields in the Advanced view for the dbdomain.DbRuntimeDbRuntimePassword properties.|To see this field:- Continue to use the Yes selection for using the same user ID and passwords across portal database domains. - Continue to use the default selection of Yes for needing a runtime database user for day-to-day operations. | | | Release runtime user |release.DbRuntimeUser|To see this field:- Select No for using the same user ID and passwords across portal database domains. - Continue to use the default selection of Yes for needing a runtime database user for day-to-day operations | | | Release runtime password |release.DbRuntimePassword|To see this field:- Select No for using the same user ID and passwords across portal database domains. - Continue to use the default selection of Yes for needing a runtime database user for day-to-day operations | | | Community runtime user |community.DbRuntimeUser|To see this field:- Select No for using the same user ID and passwords across portal database domains. - Continue to use the default selection of Yes for needing a runtime database user for day-to-day operations | | | Community runtime password |community.DbRuntimePassword|To see this field:- Select No for using the same user ID and passwords across portal database domains. - Continue to use the default selection of Yes for needing a runtime database user for day-to-day operations | | | Customization runtime user |customization.DbRuntimeUser|To see this field:- Select No for using the same user ID and passwords across portal database domains. - Continue to use the default selection of Yes for needing a runtime database user for day-to-day operations | | | Customization runtime password |customization.DbRuntimePassword|To see this field:- Select No for using the same user ID and passwords across portal database domains. - Continue to use the default selection of Yes for needing a runtime database user for day-to-day operations | | | JCR runtime user |jcr.DbRuntimeUser|To see this field:- Select No for using the same user ID and passwords across portal database domains. - Continue to use the default selection of Yes for needing a runtime database user for day-to-day operations | | | JCR runtime password |jcr.DbRuntimePassword|To see this field:- Select No for using the same user ID and passwords across portal database domains. - Continue to use the default selection of Yes for needing a runtime database user for day-to-day operations | | | Feedback runtime user |feedback.DbRuntimeUser|To see this field:- Select No for using the same user ID and passwords across portal database domains. - Continue to use the default selection of Yes for needing a runtime database user for day-to-day operations | | | Feedback runtime password |feedback.DbRuntimePassword|To see this field:- Select No for using the same user ID and passwords across portal database domains. - Continue to use the default selection of Yes for needing a runtime database user for day-to-day operations | | | LikeMinds runtime user |likeminds.DbRuntimeUser|To see this field:- Select No for using the same user ID and passwords across portal database domains. - Continue to use the default selection of Yes for needing a runtime database user for day-to-day operations | | | LikeMinds runtime password |likeminds.DbRuntimePassword|To see this field:- Select No for using the same user ID and passwords across portal database domains. - Continue to use the default selection of Yes for needing a runtime database user for day-to-day operations | | Field used for the database collation condition Database collation is an optional condition available to you. Field Label Property Conditions Your Value Temporary directory to be used for collation To see this field, you must select the Yes option for advanced database collation support. The default selection is No . | |","title":"DB2 worksheet: Transfer to multiple databases"},{"location":"config/cw_db_ws_db2_multidb/#db2-worksheet-transfer-to-multiple-databases","text":"When you use the database transfer option, you can use the condition to create multiple databases in the Configuration Wizard. This condition is selected by default. This worksheet highlights the fields and properties that you see in the Configuration Wizard when you use the multiple databases condition. When you use the database transfer option, you answer questions about your environment. Some fields are required. Other fields are required or removed based on your selections for environment conditions.","title":"DB2 worksheet: Transfer to multiple databases"},{"location":"config/cw_db_ws_db2_multidb/#typical-fields","text":"The following table lists the typical fields that display when you select the condition to transfer your data to multiple databases. To see additional fields that apply to an advanced configuration, click Advanced . Depending on the conditions that you select, values that you enter for some typical fields might apply across domains. Rather than entering a value multiple times, this value is copied to fields in the Advanced view and applied across the database domains. Field Label Property Conditions Your Value Release database name release.DbName Release data source release.DataSourceName Release database URL release.DbUrl Community database name community.DbName Community data source community.DataSourceName Community database URL community.DbUrl Customization database name customization.DbName Customization Data source customization.DataSourceName Customization database URL customization.DbUrl JCR database URL JCR.DbName JCR database name JCR.DataSourceName JCR data source JCR.DbUrl Feedback database name feedback.DbName Feedback data source feedback.DataSourceName Feedback database URL feedback.DbUrl LikeMinds Database name likeminds.DbName LikeMinds data source likeminds.DataSourceName LikeMinds database URL likeminds.DbUrl IBM DB2 library Db2.DbLibrary Configuration user ID The value that you enter is copied to fields in the Advanced view for the dbdomain.DbUser properties. To see this field, continue to use the Yes selection for using the same user ID and passwords across portal database domains. Configuration password The value that you enter is copied to fields in the Advanced view for the dbdomain.DbPassword properties. To see this field, continue to use the Yes selection for using the same user ID and passwords across portal database domains. Database administrator ID The value that you enter is copied to fields in the Advanced view for the dbdomain.DBA.DbUser properties. To see this field, continue to use the Yes selection for using the same user ID and passwords across portal database domains. Database administrator password The value that you enter is copied to fields in the Advanced view for the dbdomain.DBA.DbPassword properties. To see this field, continue to use the Yes selection for using the same user ID and passwords across portal database domains. Release configuration user release.DbUser To see this field, select No for using the same user ID and passwords across portal database domains. Release configuration password release.DbPassword To see this field, select No for using the same user ID and passwords across portal database domains. Release database administrator release.DBA.DbUser To see this field, select No for using the same user ID and passwords across portal database domains. Release database administrator password release.DBA.DbPassword To see this field, select No for using the same user ID and passwords across portal database domains. Community configuration user community.DbUser To see this field, select No for using the same user ID and passwords across portal database domains. Community configuration password community.DbPassword To see this field, select No for using the same user ID and passwords across portal database domains. Community database administrator community.DBA.DbUser To see this field, select No for using the same user ID and passwords across portal database domains. Community database administrator password community.DBA.DbPassword To see this field, select No for using the same user ID and passwords across portal database domains. Customization configuration user customization.DbUser To see this field, select No for using the same user ID and passwords across portal database domains. Customization configuration password customization.DbPassword To see this field, select No for using the same user ID and passwords across portal database domains. Customization database administrator customization.DBA.DbUser To see this field, select No for using the same user ID and passwords across portal database domains. Customization database administrator password customization.DBA.DbPassword To see this field, select No for using the same user ID and passwords across portal database domains. JCR configuration user jcr.DbUser To see this field, select No for using the same user ID and passwords across portal database domains. JCR configuration password jcr.DbPassword To see this field, select No for using the same user ID and passwords across portal database domains. JCR database administrator jcr.DBA.DbUser To see this field, select No for using the same user ID and passwords across portal database domains. JCR database administrator password jcr.DBA.DbPassword To see this field, select No for using the same user ID and passwords across portal database domains. Feedback configuration user feedback.DbUser To see this field, select No for using the same user ID and passwords across portal database domains. Feedback configuration password feedback.DbPassword To see this field, select No for using the same user ID and passwords across portal database domains. Feedback database administrator feedback.DBA.DbUser To see this field, select No for using the same user ID and passwords across portal database domains. Feedback database administrator password feedback.DBA.DbPassword To see this field, select No for using the same user ID and passwords across portal database domains. LikeMinds configuration user likeminds.DbUser To see this field, select No for using the same user ID and passwords across portal database domains. LikeMinds configuration password likeminds.DbPassword To see this field, select No for using the same user ID and passwords across portal database domains. LikeMinds database administrator likeminds.DBA.DbUser To see this field, select No for using the same user ID and passwords across portal database domains. LikeMinds database administrator password likeminds.DBA.DbPassword To see this field, select No for using the same user ID and passwords across portal database domains. Runtime user The value that you enter is copied to fields in the Advanced view for the dbdomain.DbRuntimeUser properties. To see this field:- Continue to use the Yes selection for using the same user ID and passwords across portal database domains. - Continue to use the default selection of Yes for needing a runtime database user for day-to-day operations. | | | Runtime password |The value that you enter is copied to fields in the Advanced view for the dbdomain.DbRuntimeDbRuntimePassword properties.|To see this field:- Continue to use the Yes selection for using the same user ID and passwords across portal database domains. - Continue to use the default selection of Yes for needing a runtime database user for day-to-day operations. | | | Release runtime user |release.DbRuntimeUser|To see this field:- Select No for using the same user ID and passwords across portal database domains. - Continue to use the default selection of Yes for needing a runtime database user for day-to-day operations | | | Release runtime password |release.DbRuntimePassword|To see this field:- Select No for using the same user ID and passwords across portal database domains. - Continue to use the default selection of Yes for needing a runtime database user for day-to-day operations | | | Community runtime user |community.DbRuntimeUser|To see this field:- Select No for using the same user ID and passwords across portal database domains. - Continue to use the default selection of Yes for needing a runtime database user for day-to-day operations | | | Community runtime password |community.DbRuntimePassword|To see this field:- Select No for using the same user ID and passwords across portal database domains. - Continue to use the default selection of Yes for needing a runtime database user for day-to-day operations | | | Customization runtime user |customization.DbRuntimeUser|To see this field:- Select No for using the same user ID and passwords across portal database domains. - Continue to use the default selection of Yes for needing a runtime database user for day-to-day operations | | | Customization runtime password |customization.DbRuntimePassword|To see this field:- Select No for using the same user ID and passwords across portal database domains. - Continue to use the default selection of Yes for needing a runtime database user for day-to-day operations | | | JCR runtime user |jcr.DbRuntimeUser|To see this field:- Select No for using the same user ID and passwords across portal database domains. - Continue to use the default selection of Yes for needing a runtime database user for day-to-day operations | | | JCR runtime password |jcr.DbRuntimePassword|To see this field:- Select No for using the same user ID and passwords across portal database domains. - Continue to use the default selection of Yes for needing a runtime database user for day-to-day operations | | | Feedback runtime user |feedback.DbRuntimeUser|To see this field:- Select No for using the same user ID and passwords across portal database domains. - Continue to use the default selection of Yes for needing a runtime database user for day-to-day operations | | | Feedback runtime password |feedback.DbRuntimePassword|To see this field:- Select No for using the same user ID and passwords across portal database domains. - Continue to use the default selection of Yes for needing a runtime database user for day-to-day operations | | | LikeMinds runtime user |likeminds.DbRuntimeUser|To see this field:- Select No for using the same user ID and passwords across portal database domains. - Continue to use the default selection of Yes for needing a runtime database user for day-to-day operations | | | LikeMinds runtime password |likeminds.DbRuntimePassword|To see this field:- Select No for using the same user ID and passwords across portal database domains. - Continue to use the default selection of Yes for needing a runtime database user for day-to-day operations | |","title":"Typical fields"},{"location":"config/cw_db_ws_db2_multidb/#field-used-for-the-database-collation-condition","text":"Database collation is an optional condition available to you. Field Label Property Conditions Your Value Temporary directory to be used for collation To see this field, you must select the Yes option for advanced database collation support. The default selection is No . | |","title":"Field used for the database collation condition"},{"location":"config/cw_db_ws_db2_singledb/","text":"DB2 worksheet: Transfer to a single database When you use the database transfer option, you can select the condition to create a single database in the Configuration Wizard. This worksheet highlights the fields and properties that you see in the Configuration Wizard when you select the single database condition. When you use the database transfer option, you answer questions about your environment. Some fields are required. Other fields are required or removed based on your selections for environment conditions. Typical fields The following table lists the typical fields that display when you select the option to transfer your data to a single database. To see additional fields that apply to an advanced configuration, click Advanced . Values that you enter for some typical fields apply across domains. Rather than entering a value multiple times, this value is copied to fields in the Advanced view and applied across the database domains. Field Label Property Condition Your Value Database name The value that you enter is copied to fields in the Advanced view for the dbdomain.DbName properties. Data source The value that you enter is copied to fields in the Advanced view for the dbdomain.DataSourceName properties. Database URL The value that you enter is copied to fields in the Advanced view for the dbdomain.DbUrl properties. Configuration user ID The value that you enter is copied to fields in the Advanced view for the dbdomain.DbUser properties. Configuration password The value that you enter is copied to fields in the Advanced view for the dbdomain.DbPassword properties. Database administrator ID The value that you enter is copied to fields in the Advanced view for the dbdomain.DBA.DbUser properties. Database administrator password The value that you enter is copied to fields in the Advanced view for the dbdomain.DBA.DbPassword properties. Runtime user The value that you enter is copied to fields in the Advanced view for the dbdomain.DbRuntimeUser properties. To see this field, continue to use the default selection of Yes for needing a runtime database user for day-to-day operations. Runtime password The value that you enter is copied to fields in the Advanced view for the dbdomain.DbRuntimeDbRuntimePassword properties. To see this field, continue to use the default selection of Yes for needing a runtime database user for day-to-day operations. IBM DB2 library Db2.DbLibrary Field used for the database collation condition Database collation is an optional condition available to you. Field Label Property Conditions Your Value Temporary directory to be used for collation To see this field, you must select the Yes option for advanced database collation support. The default selection is No . | |","title":"DB2 worksheet: Transfer to a single database"},{"location":"config/cw_db_ws_db2_singledb/#db2-worksheet-transfer-to-a-single-database","text":"When you use the database transfer option, you can select the condition to create a single database in the Configuration Wizard. This worksheet highlights the fields and properties that you see in the Configuration Wizard when you select the single database condition. When you use the database transfer option, you answer questions about your environment. Some fields are required. Other fields are required or removed based on your selections for environment conditions.","title":"DB2 worksheet: Transfer to a single database"},{"location":"config/cw_db_ws_db2_singledb/#typical-fields","text":"The following table lists the typical fields that display when you select the option to transfer your data to a single database. To see additional fields that apply to an advanced configuration, click Advanced . Values that you enter for some typical fields apply across domains. Rather than entering a value multiple times, this value is copied to fields in the Advanced view and applied across the database domains. Field Label Property Condition Your Value Database name The value that you enter is copied to fields in the Advanced view for the dbdomain.DbName properties. Data source The value that you enter is copied to fields in the Advanced view for the dbdomain.DataSourceName properties. Database URL The value that you enter is copied to fields in the Advanced view for the dbdomain.DbUrl properties. Configuration user ID The value that you enter is copied to fields in the Advanced view for the dbdomain.DbUser properties. Configuration password The value that you enter is copied to fields in the Advanced view for the dbdomain.DbPassword properties. Database administrator ID The value that you enter is copied to fields in the Advanced view for the dbdomain.DBA.DbUser properties. Database administrator password The value that you enter is copied to fields in the Advanced view for the dbdomain.DBA.DbPassword properties. Runtime user The value that you enter is copied to fields in the Advanced view for the dbdomain.DbRuntimeUser properties. To see this field, continue to use the default selection of Yes for needing a runtime database user for day-to-day operations. Runtime password The value that you enter is copied to fields in the Advanced view for the dbdomain.DbRuntimeDbRuntimePassword properties. To see this field, continue to use the default selection of Yes for needing a runtime database user for day-to-day operations. IBM DB2 library Db2.DbLibrary","title":"Typical fields"},{"location":"config/cw_db_ws_db2_singledb/#field-used-for-the-database-collation-condition","text":"Database collation is an optional condition available to you. Field Label Property Conditions Your Value Temporary directory to be used for collation To see this field, you must select the Yes option for advanced database collation support. The default selection is No . | |","title":"Field used for the database collation condition"},{"location":"config/cw_dmgr_profile/","text":"Create a deployment manager When you set up a cluster, you must create a deployment manager profile. Use the Configuration Wizard to set up the profile. Configuration Wizard The Create a Deployment Manager is a sub step in the Set Up a Cluster configuration. Creating a deployment manager You can create the new deployment manager profile on the same server as portal or on a remote server. If the deployment manager is on a different server than your portal, the create deployment manager profile process has one manual step. Based on the information that you provide in the wizard, the wizard creates custom instructions for the manual step. Each potential step in the configuration is included. Manual Step: Install the deployment manager software. Condition Remote server deployment manager ConfigEngine task None Create the deployment manager profile. Condition None ConfigEngine task None Start the deployment manager server. Condition None ConfigEngine task None Augment the deployment manager profile with the portal profile template. Condition None ConfigEngine task None Stop the deployment manager. Condition None ConfigEngine task None Start the deployment manager after the profile augmentation is complete. Condition None ConfigEngine task None If you changed the context root during the installation or configuration of HCL Digital Experience, then you must complete the following steps: Log on to the Deployment Manager WebSphere Integrated Solutions Console. Go to Security > Global security > Trust association > Interceptors > com.ibm.portal.auth.tai.HTTPBasicAuthTAI . Edit the urlBlackList and urlWhitelist parameters with the new context path; for example: urlBlacklist: /wpsmodified/myportal* urlWhiteList: /wpsmodified/mycontenthandler* Click Apply , and save all changes. Log out of the Deployment Manager WebSphere Integrated Solutions Console. Next, use the Create a Cluster option to create a static or dynamic cluster.","title":"Create a deployment manager"},{"location":"config/cw_dmgr_profile/#create-a-deployment-manager","text":"When you set up a cluster, you must create a deployment manager profile. Use the Configuration Wizard to set up the profile.","title":"Create a deployment manager"},{"location":"config/cw_dmgr_profile/#configuration-wizard","text":"The Create a Deployment Manager is a sub step in the Set Up a Cluster configuration.","title":"Configuration Wizard"},{"location":"config/cw_dmgr_profile/#creating-a-deployment-manager","text":"You can create the new deployment manager profile on the same server as portal or on a remote server. If the deployment manager is on a different server than your portal, the create deployment manager profile process has one manual step. Based on the information that you provide in the wizard, the wizard creates custom instructions for the manual step. Each potential step in the configuration is included. Manual Step: Install the deployment manager software. Condition Remote server deployment manager ConfigEngine task None Create the deployment manager profile. Condition None ConfigEngine task None Start the deployment manager server. Condition None ConfigEngine task None Augment the deployment manager profile with the portal profile template. Condition None ConfigEngine task None Stop the deployment manager. Condition None ConfigEngine task None Start the deployment manager after the profile augmentation is complete. Condition None ConfigEngine task None If you changed the context root during the installation or configuration of HCL Digital Experience, then you must complete the following steps: Log on to the Deployment Manager WebSphere Integrated Solutions Console. Go to Security > Global security > Trust association > Interceptors > com.ibm.portal.auth.tai.HTTPBasicAuthTAI . Edit the urlBlackList and urlWhitelist parameters with the new context path; for example: urlBlacklist: /wpsmodified/myportal* urlWhiteList: /wpsmodified/mycontenthandler* Click Apply , and save all changes. Log out of the Deployment Manager WebSphere Integrated Solutions Console. Next, use the Create a Cluster option to create a static or dynamic cluster.","title":"Creating a deployment manager"},{"location":"config/cw_ldap/","text":"Enable federated security You can use the Configuration Wizard to configure HCL Portal to use a federated LDAP for security. Use the following information to get familiar with the information you must provide in the wizard and the configuration procedure that it generates. Configuration Wizard The primary Configuration Wizard options are based on your target configuration topology, such as a stand-alone server or a cluster. The federated security option is included with both Set Up a Stand-alone Server and Set Up a Cluster . For the stand-alone server topology, run the federated security option after database transfer. For the cluster topology, run the federated security option after you create the cluster, but before you add more nodes. Validation For this configuration option, the wizard can connect to your LDAP directory and validate the information that you enter in the wizard. By default, validation is enabled. On the Security Settings panel, you can choose to turn validation on or off by selecting Yes or No to the Validate LDAP user registry entries option. Select No if you know that your parameters are correct and that your LDAP server is unavailable at the time of creating your instructions. Two types of validation are performed when you select to validate settings including field syntax and LDAP connection validations. The syntax validation, for example, checks that you entered a valid port number in the range of 1 - 65535. The connection validation, for example, checks that a connection can be made to your LDAP server. Enabling validation is recommended because it can prevent a possible failure by validating your entries in the wizard before you run the configuration. The LDAP settings including the Repository ID , Host name , Port , Bind DN , Bind password , Base DN , Administrator group DN , Administrator DN , and Administrator password are all validated before the wizard creates your instructions to run the configuration. Review the following worksheet section to see which fields are required based on your selections in the wizard. Worksheet When you set up the federated security, you answer questions about your wanted configuration. Some fields apply to all federated security configurations. Some fields are required based on your environment. The remaining fields are advanced and do not apply to most configurations. Minimal required fields The following table lists the fields that are unique to the LDAP configuration. You might be prompted for additional information about system or user IDs and passwords that you defined during the portal installation process. Attention: The Enable Federated Security option modifies the wimconfig.xml file. Make a backup copy of this file before you run any of the configuration tasks. [wp\\_profile\\_root](../reference/wpsdirstr.md#wp_profile_root)/config/cells/CellName/wim/config/wimconfig.xml Field Label Property Your Value LDAP Repository ID federated.ldap.id LDAP host name federated.ldap.host LDAP port federated.ldap.port Bind DN Restriction: The following parameters must be unique to your environment: PortalAdminId: this parameter is the user ID that you enter in the Administrator user ID field during the installation Bind DN Administrator DN from LDAP |federated.ldap.bindDN| | | Bind password |federated.ldap.bindPassword| | Field Label Property Your Value Base DN Note: This field is optional. However, it is recommended that you enter a Base DN that matches your LDAP settings. If you are using a Domino LDAP, and you do not have a Base DN defined, then you can leave this field blank. |federated.ldap.baseDN| | Use an administrator from your LDAP If you select to use an administrator from your LDAP server, then you must provide additional information about the LDAP group and ID. Field Label Property Your Value Administrator group DN from LDAP newAdminGroupId Administrator DN from LDAP Restriction: The following parameters must be unique to your environment: PortalAdminId: this parameter is the user ID that you enter in the Administrator user ID field during the installation Bind DN Administrator DN from LDAP |newAdminId| | | Administrator password from LDAP |newAdminPw| | | Default parent for group |groupParent| | | Default parent for PersonAccount |personAccountParent| | Advanced fields Click Advanced on the Customize Values page to see the advanced properties. Default values are provided for advanced fields that are required. Field Label Property Your Value LDAP group objectclasses federated.ldap.et.group.objectClass LDAP group objectclasses for creating groups federated.ldap.et.group.objectClassForCreate LDAP group search bases federated.ldap.et.group.searchBases LDAP PersonAccount objectclasses federated.ldap.et.personaccount.objectClasses LDAP PersonAccount objectclasses for creating users federated.ldap.et.personaccount.objectClassesForCreate LDAP search bases for the PersonAccount federated.ldap.gm.personaccount.searchBases Group dummy member federated.ldap.gm.dummyMember Group member attribute federated.ldap.gm.groupMemberName Group object class federated.ldap.gm.objectClas GM member attribute scope federated.ldap.gm.scope Membership attribute name federated.ldap.gc.name GC member attribute scope federated.ldap.gc.scope Certificate filter federated.ldap.certificateFilter Certificate map mode federated.ldap.certificatMapMode Group RDN attribute groupRdnProperties PersonAccount RDN attribute personAccoutnRdnProperties Application server SSL configuration federated.ldap.sslConfiguration Nested or dynamic group support If you need nested group support, then the wizard provides default values for some of the advanced fields. The default values are based on your LDAP server selection. You must click Advanced to see the fields if you want to verify the defaults. Nested or dynamic group support fields include Group member attribute , Membership attribute name , LDAP group objectclasses , and GC member attribute scope . Enabling federated security After you answer questions and provide information about your LDAP, the wizard generates a custom configuration procedure. Depending on your environment, the wizard generates a configuration process. The following steps reflect all possible steps in the configuration process. The steps do not represent a literal configuration. The steps are provided as a reference. If you click View Step Command , you can see the task and properties that are associated with each step in the wizard. Manual Step: Retrieve the SSL certificate from the SSL port. Condition Select to configure SSL enabled LDAP. ConfigEngine task None Note: The following steps are required for environments that leverage Java 1.8, such as HCL Portal Version 9.0 environments. The following steps assume a clustered environment with a Deployment Manager, however, also perform in a stand-alone environment. On the Deployment Manager, go to the /AppServer/java/8.0/bin directory. Create a backup of the HCL Portal profile before modifying cell security. Note: The backup is created in /opt/IBM/WebSphere/AppServer/profiles/cw_profile/. Condition None ConfigEngine task None Validate your LDAP server settings. Condition None ConfigEngine task validate-federated-ldap Add an LDAP user registry to the default federated repository. Condition None ConfigEngine task wp-create-ldap recycle-dmgr-if-cluster Register the WebSphere Application Server scheduler tasks. Condition None ConfigEngine task stop-portal-server start-portal-server reregister-scheduler-tasks Replace the file-based HCL Portal and WebSphere Application Server users and groups with users and groups from your LDAP server. Condition Select to use an administrator and administrator group that is stored in your LDAP. ConfigEngine task wp-change-portal-admin-user wp-change-was-admin-user Update the user registry where new users and groups are stored. Condition None ConfigEngine task wp-set-entitytypes Recycle the servers after a security change. Condition None ConfigEngine task recyle-servers-after-security-change Update the search administration user. Condition Select to use an administrator and administrator group that is stored in your LDAP. ConfigEngine task start-portal-server action-fixup-after-security-change-portal-wp.search.webscanner After you change the security model, the servers need to be restarted. Restart the portal server. Condition None ConfigEngine task recycle-servers-after-security-change start-portal-server Verify that all defined attributes are available in the configured LDAP user registry. Condition None ConfigEngine task wp-validate-federated-ldap-attribute-config Manual Step: Update the appropriate MemberFixerModule.properties file with the values for your LDAP users. Condition Select to use an administrator and administrator group that is stored in your LDAP. ConfigEngine task None Run the member fixer tool. Condition Select to use an administrator and administrator group that is stored in your LDAP. ConfigEngine task run-wcm-admin-task-member-fixer Restart the HCL Portal Server. Condition None ConfigEngine task stop-portal-server start-portal-server Manual Step: Map attributes to ensure proper communication between HCL Portal and the LDAP server. Condition None ConfigEngine task None","title":"Enable federated security"},{"location":"config/cw_ldap/#enable-federated-security","text":"You can use the Configuration Wizard to configure HCL Portal to use a federated LDAP for security. Use the following information to get familiar with the information you must provide in the wizard and the configuration procedure that it generates.","title":"Enable federated security"},{"location":"config/cw_ldap/#configuration-wizard","text":"The primary Configuration Wizard options are based on your target configuration topology, such as a stand-alone server or a cluster. The federated security option is included with both Set Up a Stand-alone Server and Set Up a Cluster . For the stand-alone server topology, run the federated security option after database transfer. For the cluster topology, run the federated security option after you create the cluster, but before you add more nodes.","title":"Configuration Wizard"},{"location":"config/cw_ldap/#validation","text":"For this configuration option, the wizard can connect to your LDAP directory and validate the information that you enter in the wizard. By default, validation is enabled. On the Security Settings panel, you can choose to turn validation on or off by selecting Yes or No to the Validate LDAP user registry entries option. Select No if you know that your parameters are correct and that your LDAP server is unavailable at the time of creating your instructions. Two types of validation are performed when you select to validate settings including field syntax and LDAP connection validations. The syntax validation, for example, checks that you entered a valid port number in the range of 1 - 65535. The connection validation, for example, checks that a connection can be made to your LDAP server. Enabling validation is recommended because it can prevent a possible failure by validating your entries in the wizard before you run the configuration. The LDAP settings including the Repository ID , Host name , Port , Bind DN , Bind password , Base DN , Administrator group DN , Administrator DN , and Administrator password are all validated before the wizard creates your instructions to run the configuration. Review the following worksheet section to see which fields are required based on your selections in the wizard.","title":"Validation"},{"location":"config/cw_ldap/#worksheet","text":"When you set up the federated security, you answer questions about your wanted configuration. Some fields apply to all federated security configurations. Some fields are required based on your environment. The remaining fields are advanced and do not apply to most configurations.","title":"Worksheet"},{"location":"config/cw_ldap/#minimal-required-fields","text":"The following table lists the fields that are unique to the LDAP configuration. You might be prompted for additional information about system or user IDs and passwords that you defined during the portal installation process. Attention: The Enable Federated Security option modifies the wimconfig.xml file. Make a backup copy of this file before you run any of the configuration tasks. [wp\\_profile\\_root](../reference/wpsdirstr.md#wp_profile_root)/config/cells/CellName/wim/config/wimconfig.xml Field Label Property Your Value LDAP Repository ID federated.ldap.id LDAP host name federated.ldap.host LDAP port federated.ldap.port Bind DN Restriction: The following parameters must be unique to your environment: PortalAdminId: this parameter is the user ID that you enter in the Administrator user ID field during the installation Bind DN Administrator DN from LDAP |federated.ldap.bindDN| | | Bind password |federated.ldap.bindPassword| | Field Label Property Your Value Base DN Note: This field is optional. However, it is recommended that you enter a Base DN that matches your LDAP settings. If you are using a Domino LDAP, and you do not have a Base DN defined, then you can leave this field blank. |federated.ldap.baseDN| |","title":"Minimal required fields"},{"location":"config/cw_ldap/#use-an-administrator-from-your-ldap","text":"If you select to use an administrator from your LDAP server, then you must provide additional information about the LDAP group and ID. Field Label Property Your Value Administrator group DN from LDAP newAdminGroupId Administrator DN from LDAP Restriction: The following parameters must be unique to your environment: PortalAdminId: this parameter is the user ID that you enter in the Administrator user ID field during the installation Bind DN Administrator DN from LDAP |newAdminId| | | Administrator password from LDAP |newAdminPw| | | Default parent for group |groupParent| | | Default parent for PersonAccount |personAccountParent| |","title":"Use an administrator from your LDAP"},{"location":"config/cw_ldap/#advanced-fields","text":"Click Advanced on the Customize Values page to see the advanced properties. Default values are provided for advanced fields that are required. Field Label Property Your Value LDAP group objectclasses federated.ldap.et.group.objectClass LDAP group objectclasses for creating groups federated.ldap.et.group.objectClassForCreate LDAP group search bases federated.ldap.et.group.searchBases LDAP PersonAccount objectclasses federated.ldap.et.personaccount.objectClasses LDAP PersonAccount objectclasses for creating users federated.ldap.et.personaccount.objectClassesForCreate LDAP search bases for the PersonAccount federated.ldap.gm.personaccount.searchBases Group dummy member federated.ldap.gm.dummyMember Group member attribute federated.ldap.gm.groupMemberName Group object class federated.ldap.gm.objectClas GM member attribute scope federated.ldap.gm.scope Membership attribute name federated.ldap.gc.name GC member attribute scope federated.ldap.gc.scope Certificate filter federated.ldap.certificateFilter Certificate map mode federated.ldap.certificatMapMode Group RDN attribute groupRdnProperties PersonAccount RDN attribute personAccoutnRdnProperties Application server SSL configuration federated.ldap.sslConfiguration","title":"Advanced fields"},{"location":"config/cw_ldap/#nested-or-dynamic-group-support","text":"If you need nested group support, then the wizard provides default values for some of the advanced fields. The default values are based on your LDAP server selection. You must click Advanced to see the fields if you want to verify the defaults. Nested or dynamic group support fields include Group member attribute , Membership attribute name , LDAP group objectclasses , and GC member attribute scope .","title":"Nested or dynamic group support"},{"location":"config/cw_ldap/#enabling-federated-security","text":"After you answer questions and provide information about your LDAP, the wizard generates a custom configuration procedure. Depending on your environment, the wizard generates a configuration process. The following steps reflect all possible steps in the configuration process. The steps do not represent a literal configuration. The steps are provided as a reference. If you click View Step Command , you can see the task and properties that are associated with each step in the wizard. Manual Step: Retrieve the SSL certificate from the SSL port. Condition Select to configure SSL enabled LDAP. ConfigEngine task None Note: The following steps are required for environments that leverage Java 1.8, such as HCL Portal Version 9.0 environments. The following steps assume a clustered environment with a Deployment Manager, however, also perform in a stand-alone environment. On the Deployment Manager, go to the /AppServer/java/8.0/bin directory. Create a backup of the HCL Portal profile before modifying cell security. Note: The backup is created in /opt/IBM/WebSphere/AppServer/profiles/cw_profile/. Condition None ConfigEngine task None Validate your LDAP server settings. Condition None ConfigEngine task validate-federated-ldap Add an LDAP user registry to the default federated repository. Condition None ConfigEngine task wp-create-ldap recycle-dmgr-if-cluster Register the WebSphere Application Server scheduler tasks. Condition None ConfigEngine task stop-portal-server start-portal-server reregister-scheduler-tasks Replace the file-based HCL Portal and WebSphere Application Server users and groups with users and groups from your LDAP server. Condition Select to use an administrator and administrator group that is stored in your LDAP. ConfigEngine task wp-change-portal-admin-user wp-change-was-admin-user Update the user registry where new users and groups are stored. Condition None ConfigEngine task wp-set-entitytypes Recycle the servers after a security change. Condition None ConfigEngine task recyle-servers-after-security-change Update the search administration user. Condition Select to use an administrator and administrator group that is stored in your LDAP. ConfigEngine task start-portal-server action-fixup-after-security-change-portal-wp.search.webscanner After you change the security model, the servers need to be restarted. Restart the portal server. Condition None ConfigEngine task recycle-servers-after-security-change start-portal-server Verify that all defined attributes are available in the configured LDAP user registry. Condition None ConfigEngine task wp-validate-federated-ldap-attribute-config Manual Step: Update the appropriate MemberFixerModule.properties file with the values for your LDAP users. Condition Select to use an administrator and administrator group that is stored in your LDAP. ConfigEngine task None Run the member fixer tool. Condition Select to use an administrator and administrator group that is stored in your LDAP. ConfigEngine task run-wcm-admin-task-member-fixer Restart the HCL Portal Server. Condition None ConfigEngine task stop-portal-server start-portal-server Manual Step: Map attributes to ensure proper communication between HCL Portal and the LDAP server. Condition None ConfigEngine task None","title":"Enabling federated security"},{"location":"config/cw_migrate_cluster_1/","text":"Cluster Step 1: Migrate the deployment manager profile Use the Configuration Wizard to migrate the deployment manager profile for a cluster environment. Use the following information to get familiar with the information that you must provide in the wizard and the configuration procedure that it generates. Configuration Wizard Select Migrate to a New Version , and choose the Migrate a Cluster Step 1: Migrate the Deployment Manager Profile option. Note: This option is not available for IBM\u00ae z/OS\u00ae. Worksheet To set up the migration, you answer questions about your wanted configuration. Some fields apply to migration configurations. Some fields are required based on your environment. The remaining fields are advanced and do not apply to most configurations. Minimal required fields The following table lists the fields that are unique to the Migrate a cluster step 1: Migrate the deployment manager profile configuration option. You might be prompted for additional information about system or user IDs and passwords that you defined during the portal installation process. Field Label Default Your Value Target operating system Linux\u2122 Target portal profile name wp_profile Target portal profile home directory /opt/IBM/WebSphere/wp_profile Is the target portal on the same server or a different server Same server WebSphere Application Server administrator wpsadmin WebSphere Application Server administrator password What is the deployment manager profile name dmgr01 What is the cell name CellName What is the deployment manager node name dmgr Where is the source application server installed IBMi only: Provide the path to the source profile directory instead of the application server directory. |/opt/IBM/WebSphere/AppServer| | | What is new host name | | | | Target deployment manager profile name |dmgr01| | | Where is the target application server installed |/opt/IBM/WebSphere/AppServer| | | Target deployment manager profile path |/opt/IBM/WebSphere/AppServer/profiles/dmgr01| | | Target temporary path |/tmp| | | WebSphere Application Server Version |8.5| | Advanced fields The following table lists the advanced fields that are unique to the Migrate a cluster step 1: Migrate the deployment manager profile configuration option. Click Advanced on the Answer Questions page for the target deployment manager system to see the advanced properties. Default values are provided for advanced fields that are required. Field Label Default Your Value JVM heap size 2048 Migrate a cluster step 1: Migrate the deployment manager profile option After you answer questions and provide information about your migration, the wizard generates a custom configuration procedure. Depending on your environment, the wizard generates a configuration process. The following steps reflect all possible steps in the configuration process. The steps do not represent a literal configuration. The steps are provided as a reference. If you click View Step Command , you can see the task and properties that are associated with each step in the wizard. Manual Step: Disable automatic synchronization on all nodes in the cluster Condition none ConfigEngine task none Manual Step: Stop the deployment manager Condition none ConfigEngine task none Manual Step: Install the latest fix packs Condition none ConfigEngine task none Manual Step: Install the Portal and WebSphere\u00ae binary files Condition none ConfigEngine task none Manual Step: Copy required portal binary files to the target deployment manager Condition none ConfigEngine task none Manual Step: Generate files for remote migration on the deployment manager Condition The target portal is on a different server than the source. ConfigEngine task none Manual Step: Copy the remote migration package to the source environment Condition The target portal is on a different server than the source. ConfigEngine task none Manual Step: Create a backup of the source deployment manager IBMi only: You must remove the oldProfile parameter before running the command. Condition none ConfigEngine task none Manual Step: Create a default deployment manager profile Condition none ConfigEngine task none Manual Step: Import the backup profile Condition none ConfigEngine task none","title":"Cluster Step 1: Migrate the deployment manager profile"},{"location":"config/cw_migrate_cluster_1/#cluster-step-1-migrate-the-deployment-manager-profile","text":"Use the Configuration Wizard to migrate the deployment manager profile for a cluster environment. Use the following information to get familiar with the information that you must provide in the wizard and the configuration procedure that it generates.","title":"Cluster Step 1: Migrate the deployment manager profile"},{"location":"config/cw_migrate_cluster_1/#configuration-wizard","text":"Select Migrate to a New Version , and choose the Migrate a Cluster Step 1: Migrate the Deployment Manager Profile option. Note: This option is not available for IBM\u00ae z/OS\u00ae.","title":"Configuration Wizard"},{"location":"config/cw_migrate_cluster_1/#worksheet","text":"To set up the migration, you answer questions about your wanted configuration. Some fields apply to migration configurations. Some fields are required based on your environment. The remaining fields are advanced and do not apply to most configurations.","title":"Worksheet"},{"location":"config/cw_migrate_cluster_1/#minimal-required-fields","text":"The following table lists the fields that are unique to the Migrate a cluster step 1: Migrate the deployment manager profile configuration option. You might be prompted for additional information about system or user IDs and passwords that you defined during the portal installation process. Field Label Default Your Value Target operating system Linux\u2122 Target portal profile name wp_profile Target portal profile home directory /opt/IBM/WebSphere/wp_profile Is the target portal on the same server or a different server Same server WebSphere Application Server administrator wpsadmin WebSphere Application Server administrator password What is the deployment manager profile name dmgr01 What is the cell name CellName What is the deployment manager node name dmgr Where is the source application server installed IBMi only: Provide the path to the source profile directory instead of the application server directory. |/opt/IBM/WebSphere/AppServer| | | What is new host name | | | | Target deployment manager profile name |dmgr01| | | Where is the target application server installed |/opt/IBM/WebSphere/AppServer| | | Target deployment manager profile path |/opt/IBM/WebSphere/AppServer/profiles/dmgr01| | | Target temporary path |/tmp| | | WebSphere Application Server Version |8.5| |","title":"Minimal required fields"},{"location":"config/cw_migrate_cluster_1/#advanced-fields","text":"The following table lists the advanced fields that are unique to the Migrate a cluster step 1: Migrate the deployment manager profile configuration option. Click Advanced on the Answer Questions page for the target deployment manager system to see the advanced properties. Default values are provided for advanced fields that are required. Field Label Default Your Value JVM heap size 2048","title":"Advanced fields"},{"location":"config/cw_migrate_cluster_1/#migrate-a-cluster-step-1-migrate-the-deployment-manager-profile-option","text":"After you answer questions and provide information about your migration, the wizard generates a custom configuration procedure. Depending on your environment, the wizard generates a configuration process. The following steps reflect all possible steps in the configuration process. The steps do not represent a literal configuration. The steps are provided as a reference. If you click View Step Command , you can see the task and properties that are associated with each step in the wizard. Manual Step: Disable automatic synchronization on all nodes in the cluster Condition none ConfigEngine task none Manual Step: Stop the deployment manager Condition none ConfigEngine task none Manual Step: Install the latest fix packs Condition none ConfigEngine task none Manual Step: Install the Portal and WebSphere\u00ae binary files Condition none ConfigEngine task none Manual Step: Copy required portal binary files to the target deployment manager Condition none ConfigEngine task none Manual Step: Generate files for remote migration on the deployment manager Condition The target portal is on a different server than the source. ConfigEngine task none Manual Step: Copy the remote migration package to the source environment Condition The target portal is on a different server than the source. ConfigEngine task none Manual Step: Create a backup of the source deployment manager IBMi only: You must remove the oldProfile parameter before running the command. Condition none ConfigEngine task none Manual Step: Create a default deployment manager profile Condition none ConfigEngine task none Manual Step: Import the backup profile Condition none ConfigEngine task none","title":"Migrate a cluster step 1: Migrate the deployment manager profile option"},{"location":"config/cw_migrate_cluster_2/","text":"Cluster Step 2: Migrate node profiles Use the Configuration Wizard to upgrade the node profiles for a cluster environment. Use the following information to get familiar with the information that you must provide in the wizard and the configuration procedure that it generates. Configuration Wizard Select Migrate to a New Version , and choose the Migrate a Cluster Step 2: Migrate Node Profiles option. Note: This option is not available for IBM\u00ae z/OS\u00ae. Worksheet To set up the migration, you answer questions about your wanted configuration. Some fields apply to migration configurations. Some fields are required based on your environment. The remaining fields are advanced and do not apply to most configurations. Minimal required fields The following table lists the fields that are unique to the Migrate a cluster step 2: Migrate node profiles configuration. You might be prompted for additional information about system or user IDs and passwords that you defined during the portal installation process. Field Label Default Your Value Target operating system Linux\u2122 Target portal profile name wp_profile Target portal profile home directory /opt/IBM/WebSphere/wp_profile Is the target portal on the same server or a different server Same server WebSphere Application Server administrator wpsadmin WebSphere Application Server administrator password What is the portal profile name wp_profile What is the cell name CellName What is the portal node name NodeName What is the deployment manager node name dmgr Where is the source application server installed IBMi only: Provide the path to the source profile directory instead of the application server directory. |/opt/IBM/WebSphere/AppServer| | | What is the new host name | | | | Where is the target application server installed |/opt/IBM/WebSphere/AppServer| | | Target temporary path |/tmp| | Advanced fields The following table lists the advanced fields that are unique to the Migrate a cluster step 2: Migrate node profiles configuration option. Click Advanced on the Answer Questions page for the target system to see the advanced properties. Default values are provided for advanced fields that are required. Field Label Default Your Value JVM heap size 2048 Migrate a cluster step 2: Migrate node profiles option After you answer questions and provide information about your migration, the wizard generates a custom configuration procedure. Depending on your environment, the wizard generates a configuration process. The following steps reflect all possible steps in the configuration process. The steps do not represent a literal configuration. The steps are provided as a reference. If you click View Step Command , you can see the task and properties that are associated with each step in the wizard. Manual Step: Stop the source deployment manager and node agents Condition none ConfigEngine task none Manual Step: Start the target deployment manager Condition none ConfigEngine task none Generate the files for remote migration Condition The target portal is on a different server than the source. ConfigEngine task none Manual Step: Copy the remote migration package to the source environment Condition The target portal is on a different server than the source. ConfigEngine task none Create a backup of the source portal profile Condition none ConfigEngine task none Manual Step: Create a backup of the remote source portal profile Condition The target portal is on a different server than the source. ConfigEngine task none Note: If you are migrating from HCL Portal Enable or Portal Extend offerings to Portal Server or Web Content Management offerings, complete the following steps manually. Locate the backup of the source profile. For example, in the /tmp/wp_profile_bak directory. Locate the wps.properties file in this directory. For example, /tmp/wp_profile_bak/PortalServer/wps.properties. Open the wps.properties file in a text editor. Modify the value of the WPFamilyName to match your 8.5 licensed offering. For example, if you were on 8.0 Enable, and you purchased 8.5 Web Content Manager, you would modify from WPFamilyName=enable to WPFamilyName=wcm. Valid values for HCL Portal 8.5 include: server, enable, extend, wcm, and wse. Save changes to the wps.properties file. Manual Step: Update the deployment manager settings Condition none ConfigEngine task none Manual Step: If the backup profile is larger than 2 GB, clean up the backup profile Condition none ConfigEngine task none Create a default profile Condition none ConfigEngine task none Import the backup profile Condition none ConfigEngine task none Manual Step: If you cleaned up the backup profile, restore the JCR content Condition none ConfigEngine task none","title":"Cluster Step 2: Migrate node profiles"},{"location":"config/cw_migrate_cluster_2/#cluster-step-2-migrate-node-profiles","text":"Use the Configuration Wizard to upgrade the node profiles for a cluster environment. Use the following information to get familiar with the information that you must provide in the wizard and the configuration procedure that it generates.","title":"Cluster Step 2: Migrate node profiles"},{"location":"config/cw_migrate_cluster_2/#configuration-wizard","text":"Select Migrate to a New Version , and choose the Migrate a Cluster Step 2: Migrate Node Profiles option. Note: This option is not available for IBM\u00ae z/OS\u00ae.","title":"Configuration Wizard"},{"location":"config/cw_migrate_cluster_2/#worksheet","text":"To set up the migration, you answer questions about your wanted configuration. Some fields apply to migration configurations. Some fields are required based on your environment. The remaining fields are advanced and do not apply to most configurations.","title":"Worksheet"},{"location":"config/cw_migrate_cluster_2/#minimal-required-fields","text":"The following table lists the fields that are unique to the Migrate a cluster step 2: Migrate node profiles configuration. You might be prompted for additional information about system or user IDs and passwords that you defined during the portal installation process. Field Label Default Your Value Target operating system Linux\u2122 Target portal profile name wp_profile Target portal profile home directory /opt/IBM/WebSphere/wp_profile Is the target portal on the same server or a different server Same server WebSphere Application Server administrator wpsadmin WebSphere Application Server administrator password What is the portal profile name wp_profile What is the cell name CellName What is the portal node name NodeName What is the deployment manager node name dmgr Where is the source application server installed IBMi only: Provide the path to the source profile directory instead of the application server directory. |/opt/IBM/WebSphere/AppServer| | | What is the new host name | | | | Where is the target application server installed |/opt/IBM/WebSphere/AppServer| | | Target temporary path |/tmp| |","title":"Minimal required fields"},{"location":"config/cw_migrate_cluster_2/#advanced-fields","text":"The following table lists the advanced fields that are unique to the Migrate a cluster step 2: Migrate node profiles configuration option. Click Advanced on the Answer Questions page for the target system to see the advanced properties. Default values are provided for advanced fields that are required. Field Label Default Your Value JVM heap size 2048","title":"Advanced fields"},{"location":"config/cw_migrate_cluster_2/#migrate-a-cluster-step-2-migrate-node-profiles-option","text":"After you answer questions and provide information about your migration, the wizard generates a custom configuration procedure. Depending on your environment, the wizard generates a configuration process. The following steps reflect all possible steps in the configuration process. The steps do not represent a literal configuration. The steps are provided as a reference. If you click View Step Command , you can see the task and properties that are associated with each step in the wizard. Manual Step: Stop the source deployment manager and node agents Condition none ConfigEngine task none Manual Step: Start the target deployment manager Condition none ConfigEngine task none Generate the files for remote migration Condition The target portal is on a different server than the source. ConfigEngine task none Manual Step: Copy the remote migration package to the source environment Condition The target portal is on a different server than the source. ConfigEngine task none Create a backup of the source portal profile Condition none ConfigEngine task none Manual Step: Create a backup of the remote source portal profile Condition The target portal is on a different server than the source. ConfigEngine task none Note: If you are migrating from HCL Portal Enable or Portal Extend offerings to Portal Server or Web Content Management offerings, complete the following steps manually. Locate the backup of the source profile. For example, in the /tmp/wp_profile_bak directory. Locate the wps.properties file in this directory. For example, /tmp/wp_profile_bak/PortalServer/wps.properties. Open the wps.properties file in a text editor. Modify the value of the WPFamilyName to match your 8.5 licensed offering. For example, if you were on 8.0 Enable, and you purchased 8.5 Web Content Manager, you would modify from WPFamilyName=enable to WPFamilyName=wcm. Valid values for HCL Portal 8.5 include: server, enable, extend, wcm, and wse. Save changes to the wps.properties file. Manual Step: Update the deployment manager settings Condition none ConfigEngine task none Manual Step: If the backup profile is larger than 2 GB, clean up the backup profile Condition none ConfigEngine task none Create a default profile Condition none ConfigEngine task none Import the backup profile Condition none ConfigEngine task none Manual Step: If you cleaned up the backup profile, restore the JCR content Condition none ConfigEngine task none","title":"Migrate a cluster step 2: Migrate node profiles option"},{"location":"config/cw_migrate_cluster_3/","text":"Cluster Step 3: Upgrade node profiles Use the Configuration Wizard to upgrade the nodes profiles for a cluster environment. Use the following information to get familiar with the information you must provide in the wizard and the configuration procedure that it generates. Configuration Wizard Select Migrate to a New Version , and choose the Migrate a Cluster Step 3: Upgrade Node Profiles option. Note: This option is not available for IBM\u00ae z/OS\u00ae. Worksheet To set up the migration, you answer questions about your wanted configuration. Some fields apply to migration configurations. Some fields are required based on your environment. The remaining fields are advanced and do not apply to most configurations. Minimal required fields The following table lists the fields that are unique to the Migrate a cluster step 3: Upgrade node profiles configuration option. You might be prompted for additional information about system or user IDs and passwords that you defined during the portal installation process. Field Label Default Your Value Target operating system Linux\u2122 Target portal profile name wp_profile Target portal profile home directory /opt/IBM/WebSphere/wp_profile Database management software Derby WebSphere Application Server administrator wpsadmin WebSphere Application Server administrator password Target deployment manager host name Target deployment manager soap port Note: Enter the same port number used for the source environment. |10033| | | What is the new host name | | | | Where is the target portal installed |/opt/IBM/WebSphere/PortalServer| | Advanced fields The following table lists the advanced fields that are unique to the Migrate a cluster step 3: Upgrade node profiles configuration option. Click Advanced on the Answer Questions page for the target node to see the advanced properties. Default values are provided for advanced fields that are required. Field Label Default Your Value JVM heap size 2048 Migrate a cluster step 3: Upgrade node profiles option After you answer questions and provide information about your migration, the wizard generates a custom configuration procedure. Depending on your environment, the wizard generates a configuration process. The following steps reflect all possible steps in the configuration process. The steps do not represent a literal configuration. The steps are provided as a reference. If you click View Step Command , you can see the task and properties that are associated with each step in the wizard. Manual Step: Update the ports for the deployment manager and nodes Condition none ConfigEngine task none Upgrade the ConfigEngine Condition none ConfigEngine task none Update database settings Condition none ConfigEngine task none Validate the database settings Condition none ConfigEngine task validate-database Connect to new databases Condition none ConfigEngine task connect-database Manual Step: Review database schema changes Condition IBM\u00ae z/OS\u00ae DB2\u00ae ConfigEngine task none Upgrade the base portal database component Condition IBM\u00ae z/OS\u00ae DB2\u00ae ConfigEngine task grant-runtime-db-user-privileges upgrade-database Manual Step: Remove check pending statuses from table spaces Condition IBM\u00ae z/OS\u00ae DB2\u00ae ConfigEngine task none Upgrade the remaining portal databases Condition IBM\u00ae z/OS\u00ae DB2\u00ae ConfigEngine task grant-runtime-db-user-privileges upgrade-database Upgrade the portal profile Condition none ConfigEngine task upgrade-profile Version 7.0 Server Offering-only migration: Do not complete the upgrade profile step using the Configuration Wizard. Instead you must run this task manually. For more information about running this task manually, see Migration from Portal Server Offering 7.0 to Portal 8.5 . Note: When you run this step, the sub task that is named action-deploy-portlets-applyMIGStatic-wp.oob.full runs and completes successfully. However, the following error messages are shown. You can ignore these error messages: EJPXA0161W: The web module ContactList could not be activated. Please see previous messages for reasons and possible corrective actions. EJPPH0048W: The synchronization mode of all nodes in the portal cluster is not consistently set. The portlet application PA_ContactList will not be started in the Application Server. Manual synchronization is assumed for all nodes. Manually start the application after all nodes were synchronized. EJPXA0067E: The following configuration data is needed to create a content-node resource: content-parentref. Apply the latest Combined Cumulative Fix updates to your system. Condition none ConfigEngine task none You must repeat the Migrate a Cluster Step 3: Upgrade Node Profiles steps on every node in the cluster. The task completes more quickly on the secondary nodes because it does not perform the same application and database upgrades that were performed on the primary node. To complete migration, you must perform several post-migration tasks that depend on how you use HCL Digital Experience. Review the Next steps section of the product documentation. Complete the post-migration activities that apply to how you are using HCL Digital Experience before you move on to the next step. For example, if you are using a virtual portal, then complete the virtual portal post-migration steps. Start the enabling new functionality tasks only after you complete the post-migration tasks. If your target migration server is IBM WebSphere\u00ae Application Server Version 9.0, you will need to upgrade to HCL Portal 9.0.","title":"Cluster Step 3: Upgrade node profiles"},{"location":"config/cw_migrate_cluster_3/#cluster-step-3-upgrade-node-profiles","text":"Use the Configuration Wizard to upgrade the nodes profiles for a cluster environment. Use the following information to get familiar with the information you must provide in the wizard and the configuration procedure that it generates.","title":"Cluster Step 3: Upgrade node profiles"},{"location":"config/cw_migrate_cluster_3/#configuration-wizard","text":"Select Migrate to a New Version , and choose the Migrate a Cluster Step 3: Upgrade Node Profiles option. Note: This option is not available for IBM\u00ae z/OS\u00ae.","title":"Configuration Wizard"},{"location":"config/cw_migrate_cluster_3/#worksheet","text":"To set up the migration, you answer questions about your wanted configuration. Some fields apply to migration configurations. Some fields are required based on your environment. The remaining fields are advanced and do not apply to most configurations.","title":"Worksheet"},{"location":"config/cw_migrate_cluster_3/#minimal-required-fields","text":"The following table lists the fields that are unique to the Migrate a cluster step 3: Upgrade node profiles configuration option. You might be prompted for additional information about system or user IDs and passwords that you defined during the portal installation process. Field Label Default Your Value Target operating system Linux\u2122 Target portal profile name wp_profile Target portal profile home directory /opt/IBM/WebSphere/wp_profile Database management software Derby WebSphere Application Server administrator wpsadmin WebSphere Application Server administrator password Target deployment manager host name Target deployment manager soap port Note: Enter the same port number used for the source environment. |10033| | | What is the new host name | | | | Where is the target portal installed |/opt/IBM/WebSphere/PortalServer| |","title":"Minimal required fields"},{"location":"config/cw_migrate_cluster_3/#advanced-fields","text":"The following table lists the advanced fields that are unique to the Migrate a cluster step 3: Upgrade node profiles configuration option. Click Advanced on the Answer Questions page for the target node to see the advanced properties. Default values are provided for advanced fields that are required. Field Label Default Your Value JVM heap size 2048","title":"Advanced fields"},{"location":"config/cw_migrate_cluster_3/#migrate-a-cluster-step-3-upgrade-node-profiles-option","text":"After you answer questions and provide information about your migration, the wizard generates a custom configuration procedure. Depending on your environment, the wizard generates a configuration process. The following steps reflect all possible steps in the configuration process. The steps do not represent a literal configuration. The steps are provided as a reference. If you click View Step Command , you can see the task and properties that are associated with each step in the wizard. Manual Step: Update the ports for the deployment manager and nodes Condition none ConfigEngine task none Upgrade the ConfigEngine Condition none ConfigEngine task none Update database settings Condition none ConfigEngine task none Validate the database settings Condition none ConfigEngine task validate-database Connect to new databases Condition none ConfigEngine task connect-database Manual Step: Review database schema changes Condition IBM\u00ae z/OS\u00ae DB2\u00ae ConfigEngine task none Upgrade the base portal database component Condition IBM\u00ae z/OS\u00ae DB2\u00ae ConfigEngine task grant-runtime-db-user-privileges upgrade-database Manual Step: Remove check pending statuses from table spaces Condition IBM\u00ae z/OS\u00ae DB2\u00ae ConfigEngine task none Upgrade the remaining portal databases Condition IBM\u00ae z/OS\u00ae DB2\u00ae ConfigEngine task grant-runtime-db-user-privileges upgrade-database Upgrade the portal profile Condition none ConfigEngine task upgrade-profile Version 7.0 Server Offering-only migration: Do not complete the upgrade profile step using the Configuration Wizard. Instead you must run this task manually. For more information about running this task manually, see Migration from Portal Server Offering 7.0 to Portal 8.5 . Note: When you run this step, the sub task that is named action-deploy-portlets-applyMIGStatic-wp.oob.full runs and completes successfully. However, the following error messages are shown. You can ignore these error messages: EJPXA0161W: The web module ContactList could not be activated. Please see previous messages for reasons and possible corrective actions. EJPPH0048W: The synchronization mode of all nodes in the portal cluster is not consistently set. The portlet application PA_ContactList will not be started in the Application Server. Manual synchronization is assumed for all nodes. Manually start the application after all nodes were synchronized. EJPXA0067E: The following configuration data is needed to create a content-node resource: content-parentref. Apply the latest Combined Cumulative Fix updates to your system. Condition none ConfigEngine task none You must repeat the Migrate a Cluster Step 3: Upgrade Node Profiles steps on every node in the cluster. The task completes more quickly on the secondary nodes because it does not perform the same application and database upgrades that were performed on the primary node. To complete migration, you must perform several post-migration tasks that depend on how you use HCL Digital Experience. Review the Next steps section of the product documentation. Complete the post-migration activities that apply to how you are using HCL Digital Experience before you move on to the next step. For example, if you are using a virtual portal, then complete the virtual portal post-migration steps. Start the enabling new functionality tasks only after you complete the post-migration tasks. If your target migration server is IBM WebSphere\u00ae Application Server Version 9.0, you will need to upgrade to HCL Portal 9.0.","title":"Migrate a cluster step 3: Upgrade node profiles option"},{"location":"config/cw_migrate_stand_alone/","text":"Migrate a stand-alone server Use the Configuration Wizard to migrate a stand-alone server environment. Use the following information to get familiar with the information that you must provide in the wizard and the configuration procedure that it generates. Configuration Wizard Select Migrate to a New Version , and choose the Migrate a Stand-alone Server option. Worksheet To set up the migration, you answer questions about your wanted configuration. Some fields apply to migration configurations. Some fields are required based on your environment. The remaining fields are advanced and do not apply to most configurations. Minimal required fields The following table lists the fields that are unique to the migrate a stand-alone server configuration. You might be prompted for additional information about system or user IDs and passwords that you defined during the portal installation process. Field Label Default Your Value Target operating system Linux\u2122 Target portal profile name wp_profile Target portal profile home directory /opt/IBM/WebSphere/wp_profile Is the target portal on the same server or a different server Same server Database management software Derby Target operating system WebSphere Application Server administrator wpsadmin WebSphere Application Server administrator password Portal administrator password What is the portal profile name wp_profile What is the cell name CellName What is the portal node name NodeName Where is the source application server installed IBMi only: Provide the path to the source profile directory instead of the application server directory. |/opt/IBM/WebSphere/AppServer| | | What is the new host name | | | | Target portal soap port Note: Enter the same port number used for the source environment. |10033| | | Where is the target application server installed |/opt/IBM/WebSphere/AppServer| | | Where is the target portal installed |/opt/IBM/WebSphere/PortalServer| | | Target temporary path |/opt/IBM/WebSphere/PortalServer| | Advanced fields The following table lists the advanced fields that are unique to the migrate a stand-alone server configuration. Click Advanced on the Answer Questions page for the target system to see the advanced properties. Default values are provided for advanced fields that are required. Field Label Default Your Value JVM heap size 2048 Migrate a stand-alone server option After you answer questions and provide information about your migration, the wizard generates a custom configuration procedure. Depending on your environment, the wizard generates a configuration process. The following steps reflect all possible steps in the configuration process. The steps do not represent a literal configuration. The steps are provided as a reference. If you click View Step Command , you can see the task and properties that are associated with each step in the wizard. Manual Step: Install the latest fix packs Condition none ConfigEngine task none Generate the files for remote migration Condition The target portal is on a different server than the source. ConfigEngine task none Manual Step: Copy the remote migration package to the source environment Condition The target portal is on a different server than the source. ConfigEngine task none Create a backup of the remote source portal profile Condition The target portal is on a different server than the source. ConfigEngine task none Create a backup profile of the source portal profile Condition none ConfigEngine task none Note: If you are migrating from HCL Portal Enable or Portal Extend offerings to Portal Server or Web Content Management offerings, complete the following steps manually. Locate the backup of the source profile. For example, in the /tmp/wp_profile_bak directory. Locate the wps.properties file in this directory. For example, /tmp/wp_profile_bak/PortalServer/wps.properties. Open the wps.properties file in a text editor. Modify the value of the WPFamilyName to match your 8.5 licensed offering. For example, if you were on 8.0 Enable, and you purchased 8.5 Web Content Manager, you would modify from WPFamilyName=enable to WPFamilyName=wcm. Valid values for HCL Portal 8.5 include: server, enable, extend, wcm, and wse. Save changes to the wps.properties file. Manual Step: If the backup profile is larger than 2 GB, clean up the backup profile Condition none ConfigEngine task none Create a default profile Condition none ConfigEngine task none Import backup profile Condition none ConfigEngine task none Manual Step: If you cleaned up the backup profile, restore the JCR content Condition none ConfigEngine task none Upgrade the ConfigEngine Condition none ConfigEngine task none Manual Step: Update the ports on the target environment Condition none ConfigEngine task none Manual Step: Update database settings Condition none ConfigEngine task none Validate database settings Condition none ConfigEngine task validate-database Connect to new database copies Condition none ConfigEngine task connect-database Manual Step: Review database schema changes Condition none ConfigEngine task none Upgrade the base portal database component Condition IBM\u00ae z/OS\u00ae DB2\u00ae ConfigEngine task grant-runtime-db-user-privileges upgrade-database Manual Step: Remove check pending statuses from table spaces Condition IBM\u00ae z/OS\u00ae DB2\u00ae ConfigEngine task none Upgrade the remaining portal databases Condition IBM\u00ae z/OS\u00ae DB2\u00ae ConfigEngine task grant-runtime-db-user-privileges upgrade-database Upgrade the portal profile Condition none ConfigEngine task upgrade-profile Version 7.0 Server Offering-only migration: Do not complete the upgrade profile step using the Configuration Wizard. Instead you must run this task manually. For more information about running this task manually, see Migration from Portal Server Offering 7.0 to Portal 8.5 . Note: When you run this step, the sub task that is named action-deploy-portlets-applyMIGStatic-wp.oob.full runs and completes successfully. However, the following error messages are shown. You can ignore these error messages: EJPXA0161W: The web module ContactList could not be activated. Please see previous messages for reasons and possible corrective actions. EJPPH0048W: The synchronization mode of all nodes in the portal cluster is not consistently set. The portlet application PA_ContactList will not be started in the Application Server. Manual synchronization is assumed for all nodes. Manually start the application after all nodes were synchronized. EJPXA0067E: The following configuration data is needed to create a content-node resource: content-parentref. Apply the latest Combined Cumulative Fix updates to your system. Condition none ConfigEngine task none To complete migration, you must perform several post-migration tasks that depend on how you use HCL Digital Experience. Review the Next steps section of the product documentation. Complete the post-migration activities that apply to how you are using HCL Digital Experience before you move on to the next step. For example, if you are using a virtual portal, then complete the virtual portal post-migration steps. Start the enabling new functionality tasks only after you complete the post-migration tasks.","title":"Migrate a stand-alone server"},{"location":"config/cw_migrate_stand_alone/#migrate-a-stand-alone-server","text":"Use the Configuration Wizard to migrate a stand-alone server environment. Use the following information to get familiar with the information that you must provide in the wizard and the configuration procedure that it generates.","title":"Migrate a stand-alone server"},{"location":"config/cw_migrate_stand_alone/#configuration-wizard","text":"Select Migrate to a New Version , and choose the Migrate a Stand-alone Server option.","title":"Configuration Wizard"},{"location":"config/cw_migrate_stand_alone/#worksheet","text":"To set up the migration, you answer questions about your wanted configuration. Some fields apply to migration configurations. Some fields are required based on your environment. The remaining fields are advanced and do not apply to most configurations.","title":"Worksheet"},{"location":"config/cw_migrate_stand_alone/#minimal-required-fields","text":"The following table lists the fields that are unique to the migrate a stand-alone server configuration. You might be prompted for additional information about system or user IDs and passwords that you defined during the portal installation process. Field Label Default Your Value Target operating system Linux\u2122 Target portal profile name wp_profile Target portal profile home directory /opt/IBM/WebSphere/wp_profile Is the target portal on the same server or a different server Same server Database management software Derby Target operating system WebSphere Application Server administrator wpsadmin WebSphere Application Server administrator password Portal administrator password What is the portal profile name wp_profile What is the cell name CellName What is the portal node name NodeName Where is the source application server installed IBMi only: Provide the path to the source profile directory instead of the application server directory. |/opt/IBM/WebSphere/AppServer| | | What is the new host name | | | | Target portal soap port Note: Enter the same port number used for the source environment. |10033| | | Where is the target application server installed |/opt/IBM/WebSphere/AppServer| | | Where is the target portal installed |/opt/IBM/WebSphere/PortalServer| | | Target temporary path |/opt/IBM/WebSphere/PortalServer| |","title":"Minimal required fields"},{"location":"config/cw_migrate_stand_alone/#advanced-fields","text":"The following table lists the advanced fields that are unique to the migrate a stand-alone server configuration. Click Advanced on the Answer Questions page for the target system to see the advanced properties. Default values are provided for advanced fields that are required. Field Label Default Your Value JVM heap size 2048","title":"Advanced fields"},{"location":"config/cw_migrate_stand_alone/#migrate-a-stand-alone-server-option","text":"After you answer questions and provide information about your migration, the wizard generates a custom configuration procedure. Depending on your environment, the wizard generates a configuration process. The following steps reflect all possible steps in the configuration process. The steps do not represent a literal configuration. The steps are provided as a reference. If you click View Step Command , you can see the task and properties that are associated with each step in the wizard. Manual Step: Install the latest fix packs Condition none ConfigEngine task none Generate the files for remote migration Condition The target portal is on a different server than the source. ConfigEngine task none Manual Step: Copy the remote migration package to the source environment Condition The target portal is on a different server than the source. ConfigEngine task none Create a backup of the remote source portal profile Condition The target portal is on a different server than the source. ConfigEngine task none Create a backup profile of the source portal profile Condition none ConfigEngine task none Note: If you are migrating from HCL Portal Enable or Portal Extend offerings to Portal Server or Web Content Management offerings, complete the following steps manually. Locate the backup of the source profile. For example, in the /tmp/wp_profile_bak directory. Locate the wps.properties file in this directory. For example, /tmp/wp_profile_bak/PortalServer/wps.properties. Open the wps.properties file in a text editor. Modify the value of the WPFamilyName to match your 8.5 licensed offering. For example, if you were on 8.0 Enable, and you purchased 8.5 Web Content Manager, you would modify from WPFamilyName=enable to WPFamilyName=wcm. Valid values for HCL Portal 8.5 include: server, enable, extend, wcm, and wse. Save changes to the wps.properties file. Manual Step: If the backup profile is larger than 2 GB, clean up the backup profile Condition none ConfigEngine task none Create a default profile Condition none ConfigEngine task none Import backup profile Condition none ConfigEngine task none Manual Step: If you cleaned up the backup profile, restore the JCR content Condition none ConfigEngine task none Upgrade the ConfigEngine Condition none ConfigEngine task none Manual Step: Update the ports on the target environment Condition none ConfigEngine task none Manual Step: Update database settings Condition none ConfigEngine task none Validate database settings Condition none ConfigEngine task validate-database Connect to new database copies Condition none ConfigEngine task connect-database Manual Step: Review database schema changes Condition none ConfigEngine task none Upgrade the base portal database component Condition IBM\u00ae z/OS\u00ae DB2\u00ae ConfigEngine task grant-runtime-db-user-privileges upgrade-database Manual Step: Remove check pending statuses from table spaces Condition IBM\u00ae z/OS\u00ae DB2\u00ae ConfigEngine task none Upgrade the remaining portal databases Condition IBM\u00ae z/OS\u00ae DB2\u00ae ConfigEngine task grant-runtime-db-user-privileges upgrade-database Upgrade the portal profile Condition none ConfigEngine task upgrade-profile Version 7.0 Server Offering-only migration: Do not complete the upgrade profile step using the Configuration Wizard. Instead you must run this task manually. For more information about running this task manually, see Migration from Portal Server Offering 7.0 to Portal 8.5 . Note: When you run this step, the sub task that is named action-deploy-portlets-applyMIGStatic-wp.oob.full runs and completes successfully. However, the following error messages are shown. You can ignore these error messages: EJPXA0161W: The web module ContactList could not be activated. Please see previous messages for reasons and possible corrective actions. EJPPH0048W: The synchronization mode of all nodes in the portal cluster is not consistently set. The portlet application PA_ContactList will not be started in the Application Server. Manual synchronization is assumed for all nodes. Manually start the application after all nodes were synchronized. EJPXA0067E: The following configuration data is needed to create a content-node resource: content-parentref. Apply the latest Combined Cumulative Fix updates to your system. Condition none ConfigEngine task none To complete migration, you must perform several post-migration tasks that depend on how you use HCL Digital Experience. Review the Next steps section of the product documentation. Complete the post-migration activities that apply to how you are using HCL Digital Experience before you move on to the next step. For example, if you are using a virtual portal, then complete the virtual portal post-migration steps. Start the enabling new functionality tasks only after you complete the post-migration tasks.","title":"Migrate a stand-alone server option"},{"location":"config/cw_overview/","text":"Configuration Wizard Use the Configuration Wizard to set up stand-alone servers and new deployments, create clusters, migrate and update to new versions, and add new capabilities to existing deployments. In the Configuration Wizard, you answer questions about the environment that you are configuring. Based on your answers, the wizard prompts you for custom values that are needed to configure your environment. Finally, the wizard generates custom steps and scripts to set up your environment. Video : HCL Portal - How to Access ConfigWizard Configuration options in the Configuration Wizard Using the following configuration options, you can configure the portal server that you are connected to in real time. You can also download scripts and instructions to run on other servers, create reusable scripts for common configuration patterns, and create scripts to compare to scripts created in previous releases. Database Transfer Select this option to transfer data from Apache Derby to any of the database types that are supported by HCL Portal. This option is found in Set Up a Stand-alone Server and in Set Up a Cluster . Documentation resource: Database transfer Documentation resource: Troubleshooting: Database Transfer Enable Federated Security Add an LDAP user registry to the default federated repository to store user account information for authorization. This option is found in Set Up a Stand-alone Server and in Set Up a Cluster . Documentation resource: Enable federated security Documentation resource: Troubleshooting: Enable federated security option Shorten Site URLs for Search Engine Optimization Use the Configuration Wizard to change or remove /wps/portal (context root and default home values) to create shorter, human-readable URLs. Select an option to remove navigational state information from site URLs. This option is found in Set Up a Stand-alone Server and Set Up a Cluster . Documentation resource: Configuration Wizard instructions: Modify site URLs for search engine optimization Note: The Configuration Wizard is not used to shorten site URLs for Search Engine Optimization on Kubernetes platforms. Refer to the Customizing the HCL DX URL when deployed to container platforms topic for more information. Create a Deployment Manager Create a deployment manager profile that is augmented with HCL Portal resources. This option is found in Set Up a Cluster . Documentation resource: Create a deployment manager Documentation resource: Troubleshooting: Create a deployment manager Create a Cluster Use the Configuration Wizard to create the primary node in your cluster. This option is found in Set Up a Cluster . Documentation resource: Create a cluster Documentation resource: Troubleshooting: Create a cluster option Create an Additional Cluster Node Use the Configuration Wizard to add nodes to a cluster. This option is found in Set Up a Cluster . Documentation resource: Create an additional cluster node Documentation resource: Troubleshooting: Create an additional cluster node Install and Uninstall Add-ons You can install add-on functionality to your HCL Portal with the solution installer through the Configuration Wizard. This option is found in Add On New Capability . Documentation resource: Install and uninstall add-ons using the Configuration Wizard Migrate a Stand-alone Server Use the Configuration Wizard to migrate a stand-alone server environment. This option is found in Migrate to a New Version . Documentation resource: Migrate a stand-alone server Documentation resource: Troubleshooting: Migrate a stand-alone server Migrate a Cluster Step 1: Migrate the Deployment Manager Profile Use the Configuration Wizard to migrate the deployment manager profile for a cluster environment. These steps must be completed before you start the migration of any nodes. This option is found in Migrate to a New Version . Documentation resource: Cluster: Migrate the deployment manager profile Documentation resource: Troubleshooting: Migrate the deployment manager profile for a cluster environment Migrate a Cluster Step 2: Migrate Node Profiles Use the Configuration Wizard to upgrade the node profiles for a cluster environment. These steps must be completed on all portal nodes in the cell before you begin the next cluster migration step. This option is found in Migrate to a New Version . Documentation resource: Cluster: Migrate node profiles Documentation resource: Troubleshooting: Migrate node profiles for a cluster environment Migrate a Cluster Step 3: Upgrade Node Profiles Use the Configuration Wizard to upgrade the nodes profiles for a cluster environment. Start these steps only after you migrate node profiles on all portal nodes in the cell. This option is found in Migrate to a New Version . Documentation resource: Cluster: Upgrade node profiles Documentation resource: Troubleshooting: Upgrade node profiles for a cluster environment Recycle a Managed HCL Digital Experience Cell Select this option to recycle the deployment manager and node agents. This configuration option runs the action-cluster-recycle-dmgr task. This option is found in More Options . Remove the HCL Digital ExperienceProfile Use the Configuration Wizard to remove a portal profile. This option is found in More Options . Documentation resource: Remove an HCL Portal profile Documentation resource: Troubleshooting: Remove an HCL Portal profile Configuration Wizard and clusters In clustered environments, you can use the Configuration Wizard from the primary node. You can use the scripts from the primary node on the other nodes. You do not need to deploy the Configuration Wizard to the deployment manager. Configuration Wizard profile The wizard has a unique profile, cw_profile, and administrator credentials. Note: Running the Configuration Wizard on z/OS\u00ae is not supported.","title":"Configuration Wizard"},{"location":"config/cw_overview/#configuration-wizard","text":"Use the Configuration Wizard to set up stand-alone servers and new deployments, create clusters, migrate and update to new versions, and add new capabilities to existing deployments. In the Configuration Wizard, you answer questions about the environment that you are configuring. Based on your answers, the wizard prompts you for custom values that are needed to configure your environment. Finally, the wizard generates custom steps and scripts to set up your environment. Video : HCL Portal - How to Access ConfigWizard","title":"Configuration Wizard"},{"location":"config/cw_overview/#configuration-options-in-the-configuration-wizard","text":"Using the following configuration options, you can configure the portal server that you are connected to in real time. You can also download scripts and instructions to run on other servers, create reusable scripts for common configuration patterns, and create scripts to compare to scripts created in previous releases. Database Transfer Select this option to transfer data from Apache Derby to any of the database types that are supported by HCL Portal. This option is found in Set Up a Stand-alone Server and in Set Up a Cluster . Documentation resource: Database transfer Documentation resource: Troubleshooting: Database Transfer Enable Federated Security Add an LDAP user registry to the default federated repository to store user account information for authorization. This option is found in Set Up a Stand-alone Server and in Set Up a Cluster . Documentation resource: Enable federated security Documentation resource: Troubleshooting: Enable federated security option Shorten Site URLs for Search Engine Optimization Use the Configuration Wizard to change or remove /wps/portal (context root and default home values) to create shorter, human-readable URLs. Select an option to remove navigational state information from site URLs. This option is found in Set Up a Stand-alone Server and Set Up a Cluster . Documentation resource: Configuration Wizard instructions: Modify site URLs for search engine optimization Note: The Configuration Wizard is not used to shorten site URLs for Search Engine Optimization on Kubernetes platforms. Refer to the Customizing the HCL DX URL when deployed to container platforms topic for more information. Create a Deployment Manager Create a deployment manager profile that is augmented with HCL Portal resources. This option is found in Set Up a Cluster . Documentation resource: Create a deployment manager Documentation resource: Troubleshooting: Create a deployment manager Create a Cluster Use the Configuration Wizard to create the primary node in your cluster. This option is found in Set Up a Cluster . Documentation resource: Create a cluster Documentation resource: Troubleshooting: Create a cluster option Create an Additional Cluster Node Use the Configuration Wizard to add nodes to a cluster. This option is found in Set Up a Cluster . Documentation resource: Create an additional cluster node Documentation resource: Troubleshooting: Create an additional cluster node Install and Uninstall Add-ons You can install add-on functionality to your HCL Portal with the solution installer through the Configuration Wizard. This option is found in Add On New Capability . Documentation resource: Install and uninstall add-ons using the Configuration Wizard Migrate a Stand-alone Server Use the Configuration Wizard to migrate a stand-alone server environment. This option is found in Migrate to a New Version . Documentation resource: Migrate a stand-alone server Documentation resource: Troubleshooting: Migrate a stand-alone server Migrate a Cluster Step 1: Migrate the Deployment Manager Profile Use the Configuration Wizard to migrate the deployment manager profile for a cluster environment. These steps must be completed before you start the migration of any nodes. This option is found in Migrate to a New Version . Documentation resource: Cluster: Migrate the deployment manager profile Documentation resource: Troubleshooting: Migrate the deployment manager profile for a cluster environment Migrate a Cluster Step 2: Migrate Node Profiles Use the Configuration Wizard to upgrade the node profiles for a cluster environment. These steps must be completed on all portal nodes in the cell before you begin the next cluster migration step. This option is found in Migrate to a New Version . Documentation resource: Cluster: Migrate node profiles Documentation resource: Troubleshooting: Migrate node profiles for a cluster environment Migrate a Cluster Step 3: Upgrade Node Profiles Use the Configuration Wizard to upgrade the nodes profiles for a cluster environment. Start these steps only after you migrate node profiles on all portal nodes in the cell. This option is found in Migrate to a New Version . Documentation resource: Cluster: Upgrade node profiles Documentation resource: Troubleshooting: Upgrade node profiles for a cluster environment Recycle a Managed HCL Digital Experience Cell Select this option to recycle the deployment manager and node agents. This configuration option runs the action-cluster-recycle-dmgr task. This option is found in More Options . Remove the HCL Digital ExperienceProfile Use the Configuration Wizard to remove a portal profile. This option is found in More Options . Documentation resource: Remove an HCL Portal profile Documentation resource: Troubleshooting: Remove an HCL Portal profile","title":"Configuration options in the Configuration Wizard"},{"location":"config/cw_overview/#configuration-wizard-and-clusters","text":"In clustered environments, you can use the Configuration Wizard from the primary node. You can use the scripts from the primary node on the other nodes. You do not need to deploy the Configuration Wizard to the deployment manager.","title":"Configuration Wizard and clusters"},{"location":"config/cw_overview/#configuration-wizard-profile","text":"The wizard has a unique profile, cw_profile, and administrator credentials. Note: Running the Configuration Wizard on z/OS\u00ae is not supported.","title":"Configuration Wizard profile"},{"location":"config/cw_remove_profile/","text":"Remove an HCL Portal profile Use the Configuration Wizard to remove a portal profile. Configuration Wizard On the Configuration Wizard home page, click More Options to find Remove an HCL Portal Profile . Removing a profile After you answer questions and provide information about your migration, the wizard generates a custom configuration procedure. Depending on your environment, the wizard generates a configuration process. The following steps reflect all possible steps in the configuration process. The steps do not represent a literal configuration. The steps are provided as a reference. If you click View Step Command , you can see the task and properties that are associated with each step in the wizard. Manual Step: Prepare your system Condition none ConfigEngine task none Remove portal node from cluster Condition You have a clustered node. ConfigEngine task none Remove portal profile Condition none ConfigEngine task none Stop the deployment manager Condition You selected to remove the deployment manager profile. ConfigEngine task none Remove the deployment manager profile Condition You selected to remove the deployment manager profile. ConfigEngine task none","title":"Remove an HCL Portal profile"},{"location":"config/cw_remove_profile/#remove-an-hcl-portal-profile","text":"Use the Configuration Wizard to remove a portal profile.","title":"Remove an HCL Portal profile"},{"location":"config/cw_remove_profile/#configuration-wizard","text":"On the Configuration Wizard home page, click More Options to find Remove an HCL Portal Profile .","title":"Configuration Wizard"},{"location":"config/cw_remove_profile/#removing-a-profile","text":"After you answer questions and provide information about your migration, the wizard generates a custom configuration procedure. Depending on your environment, the wizard generates a configuration process. The following steps reflect all possible steps in the configuration process. The steps do not represent a literal configuration. The steps are provided as a reference. If you click View Step Command , you can see the task and properties that are associated with each step in the wizard. Manual Step: Prepare your system Condition none ConfigEngine task none Remove portal node from cluster Condition You have a clustered node. ConfigEngine task none Remove portal profile Condition none ConfigEngine task none Stop the deployment manager Condition You selected to remove the deployment manager profile. ConfigEngine task none Remove the deployment manager profile Condition You selected to remove the deployment manager profile. ConfigEngine task none","title":"Removing a profile"},{"location":"config/cw_shorten_url_seo/","text":"Configuration Wizard instructions: Modify site URLs for search engine optimization Use the Configuration Wizard to change or remove /wps/portal (context root and default home values) to create shorter, human-readable URLs. Select an option to remove navigational state information from site URLs. This procedure is intended only as a reference. You can use the Configuration Wizard to shorten site URLs when you set up a stand-alone server or when you set up a cluster. Configuration Wizard instructions After you answer questions and provide information about your environment, the wizard generates a custom configuration procedure. The following procedure represents all possible configuration steps. The instructions that you generate might include or exclude specific steps based on your wizard selections. If you are using syndication, ensure that all of the syndication target servers are on Combined Cumulative Fix 08 or later before you modify URLs for search engine optimization. Enabling SEO options on servers that are not on Combined Cumulative Fix 08 or later could disrupt deployment. Validate the context root value selected. Condition Select Yes to modify your context root and connect to portal server to validate settings. ConfigEngine task validate-context-root Stop the portal server. Condition None ConfigEngine task None Modify the servlet paths for all applications and portlets. Condition Select Yes to modify your context root. ConfigEngine task modify-servlet-path modify-servlet-path-portlets Add navigational state information to your friendly URL. Condition Select Yes to contain navigational state information. ConfigEngine task configure-nav-stateinfo-urls Remove navigational state information from your friendly URL. Condition Select No to contain navigational state information. ConfigEngine task configure-nav-stateless-urls Manual step: Configure your external web server. Condition Select Yes that you use an external web server. ConfigEngine task None Go to Manual Step: Configure your external web server for instructions. Manual step: Change the JSP components in the Web Resources v70 Library. Condition Select Yes that you use an external web server. ConfigEngine task None Go to Manual Step: Change the JSP components in the Web Resources v70 Library for instructions. Optional manual step: If your custom themes use Dojo, update your themes to reference the correct Dojo context root. Condition Select Yes that you use HCL Web Content Manager. ConfigEngine task None Go to Manual Step: Updating your themes to reference the correct Dojo context root for instructions. Manual step: Refresh your search collection and regather documents. Condition None ConfigEngine task None Go to Manual Step: Refreshing the search collection for instructions. Manual step: Resynchronize the nodes and restart the cluster. Condition None ConfigEngine task None Go to Manual Step: Resynchronizing the nodes and restarting the cluster for instructions. Optional manual step: Update syndicator and subscriber servers that reference your modified site URL. If you do not use syndication, skip this step. Condition Click Modify Site URLs for Search Engine Optimization from the Set Up a Cluster page. None ConfigEngine task None Go to Manual Step: Updating syndicator and subsubscriber servers that reference your URL for instructions. Optional manual step: Disable friendly URL redirects. Condition Select to remove navigational state information from your site URL. ConfigEngine task None Go to Manual Step: Disabling friendly URL redirects for instructions. Optional manual step: Update the personalization publishing server with the new site URL. Condition Select that you use HCL Web Content Manager. ConfigEngine task None Go to Manual Step: Updating the personalization publishing server with the new site URL for instructions. Optional manual step: Redeploy the HCL Web Application Bridge to a virtual host. Condition Select Yes to modify your context root. ConfigEngine task None Go to Manual Step: Redeploying the IBM Web Application Bridge to a virtual host. for instructions. Related information Manual Step: Redeploying the HCL Web Application Bridge to a virtual host.","title":"Configuration Wizard instructions: Modify site URLs for search engine optimization"},{"location":"config/cw_shorten_url_seo/#configuration-wizard-instructions-modify-site-urls-for-search-engine-optimization","text":"Use the Configuration Wizard to change or remove /wps/portal (context root and default home values) to create shorter, human-readable URLs. Select an option to remove navigational state information from site URLs. This procedure is intended only as a reference. You can use the Configuration Wizard to shorten site URLs when you set up a stand-alone server or when you set up a cluster.","title":"Configuration Wizard instructions: Modify site URLs for search engine optimization"},{"location":"config/cw_shorten_url_seo/#configuration-wizard-instructions","text":"After you answer questions and provide information about your environment, the wizard generates a custom configuration procedure. The following procedure represents all possible configuration steps. The instructions that you generate might include or exclude specific steps based on your wizard selections. If you are using syndication, ensure that all of the syndication target servers are on Combined Cumulative Fix 08 or later before you modify URLs for search engine optimization. Enabling SEO options on servers that are not on Combined Cumulative Fix 08 or later could disrupt deployment. Validate the context root value selected. Condition Select Yes to modify your context root and connect to portal server to validate settings. ConfigEngine task validate-context-root Stop the portal server. Condition None ConfigEngine task None Modify the servlet paths for all applications and portlets. Condition Select Yes to modify your context root. ConfigEngine task modify-servlet-path modify-servlet-path-portlets Add navigational state information to your friendly URL. Condition Select Yes to contain navigational state information. ConfigEngine task configure-nav-stateinfo-urls Remove navigational state information from your friendly URL. Condition Select No to contain navigational state information. ConfigEngine task configure-nav-stateless-urls Manual step: Configure your external web server. Condition Select Yes that you use an external web server. ConfigEngine task None Go to Manual Step: Configure your external web server for instructions. Manual step: Change the JSP components in the Web Resources v70 Library. Condition Select Yes that you use an external web server. ConfigEngine task None Go to Manual Step: Change the JSP components in the Web Resources v70 Library for instructions. Optional manual step: If your custom themes use Dojo, update your themes to reference the correct Dojo context root. Condition Select Yes that you use HCL Web Content Manager. ConfigEngine task None Go to Manual Step: Updating your themes to reference the correct Dojo context root for instructions. Manual step: Refresh your search collection and regather documents. Condition None ConfigEngine task None Go to Manual Step: Refreshing the search collection for instructions. Manual step: Resynchronize the nodes and restart the cluster. Condition None ConfigEngine task None Go to Manual Step: Resynchronizing the nodes and restarting the cluster for instructions. Optional manual step: Update syndicator and subscriber servers that reference your modified site URL. If you do not use syndication, skip this step. Condition Click Modify Site URLs for Search Engine Optimization from the Set Up a Cluster page. None ConfigEngine task None Go to Manual Step: Updating syndicator and subsubscriber servers that reference your URL for instructions. Optional manual step: Disable friendly URL redirects. Condition Select to remove navigational state information from your site URL. ConfigEngine task None Go to Manual Step: Disabling friendly URL redirects for instructions. Optional manual step: Update the personalization publishing server with the new site URL. Condition Select that you use HCL Web Content Manager. ConfigEngine task None Go to Manual Step: Updating the personalization publishing server with the new site URL for instructions. Optional manual step: Redeploy the HCL Web Application Bridge to a virtual host. Condition Select Yes to modify your context root. ConfigEngine task None Go to Manual Step: Redeploying the IBM Web Application Bridge to a virtual host. for instructions. Related information Manual Step: Redeploying the HCL Web Application Bridge to a virtual host.","title":"Configuration Wizard instructions"},{"location":"config/cw_shorten_url_seo_manual-disable-redirect/","text":"Manual Step: Disabling friendly URL redirects The Modify Site URLs for Search Engine Optimization option in the Configuration Wizard includes manual steps. For reference only, you can see the details of the manual step for disabling friendly URL redirects. To view this step in the Configuration Wizard, you must select No to wanting navigational state information in your URL. Optional manual step: Disable friendly URL redirects. If the incoming URL does not contain the friendly URL prefix of the addressed page, a URL redirect adds state information to the URL. Use the following steps to disable URL redirects, set the custom property friendly.redirect.enabled to the value false in the Resource Environment Provider (REP) WPConfigService in the WebSphere\u00ae Integrated Solutions Console. Log in to the WebSphere Integrated Solutions Console. Click Resources > Resource Environment > Resource Environment Providers . Find the WP ConfigService Resource Environment Provider. Select WP ConfigService > Custom properties . Find the property friendly.redirect.enabled and set the value to false If this property does not exist, add it as a new custom property and set the value to false . Apply the changes and save them to the Master Configuration. If the property is not listed there, add it and set it to false. For information about this property and how to set it, see the topics Configuration service and Setting service configuration properties . For information about this property and how to set it, see the topics Configuration Service and Setting service configuration properties .","title":"Manual Step: Disabling friendly URL redirects"},{"location":"config/cw_shorten_url_seo_manual-disable-redirect/#manual-step-disabling-friendly-url-redirects","text":"The Modify Site URLs for Search Engine Optimization option in the Configuration Wizard includes manual steps. For reference only, you can see the details of the manual step for disabling friendly URL redirects. To view this step in the Configuration Wizard, you must select No to wanting navigational state information in your URL. Optional manual step: Disable friendly URL redirects. If the incoming URL does not contain the friendly URL prefix of the addressed page, a URL redirect adds state information to the URL. Use the following steps to disable URL redirects, set the custom property friendly.redirect.enabled to the value false in the Resource Environment Provider (REP) WPConfigService in the WebSphere\u00ae Integrated Solutions Console. Log in to the WebSphere Integrated Solutions Console. Click Resources > Resource Environment > Resource Environment Providers . Find the WP ConfigService Resource Environment Provider. Select WP ConfigService > Custom properties . Find the property friendly.redirect.enabled and set the value to false If this property does not exist, add it as a new custom property and set the value to false . Apply the changes and save them to the Master Configuration. If the property is not listed there, add it and set it to false. For information about this property and how to set it, see the topics Configuration service and Setting service configuration properties . For information about this property and how to set it, see the topics Configuration Service and Setting service configuration properties .","title":"Manual Step: Disabling friendly URL redirects"},{"location":"config/cw_shorten_url_seo_manual-dojo/","text":"Manual Step: Updating your themes to reference the correct Dojo context root The Modify Site URLs for Search Engine Optimization option in the Configuration Wizard includes manual steps. For reference only, you can see the details of the manual step for updating your themes to reference the correct Dojo context root. Attention: All steps for all database environments are included without consideration for your environment. Use the Configuration Wizard to generate custom instructions for your environment. Optional manual step: If your custom themes use Dojo, update your themes to reference the correct Dojo context root. The default Dojo context root in HCL Portal is /wps/portal_dojo. After you run the modify-servlet-path and modify-servlet-path-portlets tasks, the Dojo context root is changed to include the new value in the WpsContextRoot parameter as the prefix. For instance, if the new WpsContextRoot value is myco, then the new Dojo context root becomes /myco/portal_dojo. If your theme includes hardcoded references to \"/wps/portal_dojo\", update those references to the new context root. If you migrated a custom theme, you might find that it has references to /portal_dojo without the /wps prefix. Look for these references in both the WAR file and in the WebDAV storage for your theme.","title":"Manual Step: Updating your themes to reference the correct Dojo context root"},{"location":"config/cw_shorten_url_seo_manual-dojo/#manual-step-updating-your-themes-to-reference-the-correct-dojo-context-root","text":"The Modify Site URLs for Search Engine Optimization option in the Configuration Wizard includes manual steps. For reference only, you can see the details of the manual step for updating your themes to reference the correct Dojo context root. Attention: All steps for all database environments are included without consideration for your environment. Use the Configuration Wizard to generate custom instructions for your environment. Optional manual step: If your custom themes use Dojo, update your themes to reference the correct Dojo context root. The default Dojo context root in HCL Portal is /wps/portal_dojo. After you run the modify-servlet-path and modify-servlet-path-portlets tasks, the Dojo context root is changed to include the new value in the WpsContextRoot parameter as the prefix. For instance, if the new WpsContextRoot value is myco, then the new Dojo context root becomes /myco/portal_dojo. If your theme includes hardcoded references to \"/wps/portal_dojo\", update those references to the new context root. If you migrated a custom theme, you might find that it has references to /portal_dojo without the /wps prefix. Look for these references in both the WAR file and in the WebDAV storage for your theme.","title":"Manual Step: Updating your themes to reference the correct Dojo context root"},{"location":"config/cw_shorten_url_seo_manual-jsp/","text":"Manual Step: Change the JSP components in the Web Resources v70 Library The Modify Site URLs for Search Engine Optimization option in the Configuration Wizard includes manual steps. For reference only, you can see the details of the manual step for changing the JSP components in the Web Resources v70 Library. To view this step in the Configuration Wizard, you must select Yes to using an HCL Web Content Manager when you provide information about your environment. Attention: All steps for all database environments are included without consideration for your environment. Use the Configuration Wizard to generate custom instructions for your environment. Stand-alone version of changing JSP component step Manual step: Change the JSP components in the Web Resources v70 Library. Log on to HCL Portal. Go to Applications > Content > Web Content Authoring . Under Preferences , select Edit Shared Settings . Under Library Selection , add Web Resources v70 to the Selected Libraries list. Click OK . Under Item Views , select All Items > All > Components > JSP . Select every JSP component from the Web Resources v70 library and then click Edit . Update the Path field for every JSP component with the new context root path. The JSP path includes two parts, which are separated by a semi-colon. The first part is the context path to the HCL Web Content Manager extensions web application and then the second part is the path to the JSP. Update the path to the web application. For example, the other path might be: /wcmextension;/jsp/html/general/UpdateItem.jsp. If you changed the context root to mynewcontext, change the old path to /mynewcontext/wcmextension;/jsp/html/general/UpdateItem.jsp. Cluster environment version of changing JSP component step Manual step: Change the JSP components in the Web Resources v70 Library. Note: In a clustered environment, complete these steps on the primary node only. Log on to HCL Portal. Go to Applications > Content > Web Content Authoring . Under Preferences , select Edit Shared Settings . Under Library Selection , add Web Resources v70 to the Selected Libraries list. Click OK . Under Item Views , select All Items > All > Components > JSP . Select every JSP component from the Web Resources v70 library and then click Edit . Update the Path field for every JSP component with the new context root path. The JSP path includes two parts, which are separated by a semi-colon. The first part is the context path to the HCL Web Content Manager extensions web application and then the second part is the path to the JSP. Update the path to the web application. For example, the other path might be: /wcmextension;/jsp/html/general/UpdateItem.jsp. If you changed the context root to mynewcontext, change the old path to /mynewcontext/wcmextension;/jsp/html/general/UpdateItem.jsp.","title":"Manual Step: Change the JSP components in the Web Resources v70 Library"},{"location":"config/cw_shorten_url_seo_manual-jsp/#manual-step-change-the-jsp-components-in-the-web-resources-v70-library","text":"The Modify Site URLs for Search Engine Optimization option in the Configuration Wizard includes manual steps. For reference only, you can see the details of the manual step for changing the JSP components in the Web Resources v70 Library. To view this step in the Configuration Wizard, you must select Yes to using an HCL Web Content Manager when you provide information about your environment. Attention: All steps for all database environments are included without consideration for your environment. Use the Configuration Wizard to generate custom instructions for your environment. Stand-alone version of changing JSP component step Manual step: Change the JSP components in the Web Resources v70 Library. Log on to HCL Portal. Go to Applications > Content > Web Content Authoring . Under Preferences , select Edit Shared Settings . Under Library Selection , add Web Resources v70 to the Selected Libraries list. Click OK . Under Item Views , select All Items > All > Components > JSP . Select every JSP component from the Web Resources v70 library and then click Edit . Update the Path field for every JSP component with the new context root path. The JSP path includes two parts, which are separated by a semi-colon. The first part is the context path to the HCL Web Content Manager extensions web application and then the second part is the path to the JSP. Update the path to the web application. For example, the other path might be: /wcmextension;/jsp/html/general/UpdateItem.jsp. If you changed the context root to mynewcontext, change the old path to /mynewcontext/wcmextension;/jsp/html/general/UpdateItem.jsp. Cluster environment version of changing JSP component step Manual step: Change the JSP components in the Web Resources v70 Library. Note: In a clustered environment, complete these steps on the primary node only. Log on to HCL Portal. Go to Applications > Content > Web Content Authoring . Under Preferences , select Edit Shared Settings . Under Library Selection , add Web Resources v70 to the Selected Libraries list. Click OK . Under Item Views , select All Items > All > Components > JSP . Select every JSP component from the Web Resources v70 library and then click Edit . Update the Path field for every JSP component with the new context root path. The JSP path includes two parts, which are separated by a semi-colon. The first part is the context path to the HCL Web Content Manager extensions web application and then the second part is the path to the JSP. Update the path to the web application. For example, the other path might be: /wcmextension;/jsp/html/general/UpdateItem.jsp. If you changed the context root to mynewcontext, change the old path to /mynewcontext/wcmextension;/jsp/html/general/UpdateItem.jsp.","title":"Manual Step: Change the JSP components in the Web Resources v70 Library"},{"location":"config/cw_shorten_url_seo_manual-pzn-publish/","text":"Manual Step: Updating the personalization publishing server with the new site URL The Modify Site URLs for Search Engine Optimization option in the Configuration Wizard includes manual steps. For reference only, you can see the details of the manual steps in this section of the product documentation. Optional manual step: Update the personalization publishing server with the new site URL. If you use a publish server to publish your personalization resources through the Personalization Navigator, the URL of the publish server must be updated to reflect the new site URL. Navigate to the page that contains the Personalization Navigator. Select the Publish Server that you need to modify. Select Edit , and update the URL in the Publish Servlet URL field to reflect the new context root information. Click Save to store your updates.","title":"Manual Step: Updating the personalization publishing server with the new site URL"},{"location":"config/cw_shorten_url_seo_manual-pzn-publish/#manual-step-updating-the-personalization-publishing-server-with-the-new-site-url","text":"The Modify Site URLs for Search Engine Optimization option in the Configuration Wizard includes manual steps. For reference only, you can see the details of the manual steps in this section of the product documentation. Optional manual step: Update the personalization publishing server with the new site URL. If you use a publish server to publish your personalization resources through the Personalization Navigator, the URL of the publish server must be updated to reflect the new site URL. Navigate to the page that contains the Personalization Navigator. Select the Publish Server that you need to modify. Select Edit , and update the URL in the Publish Servlet URL field to reflect the new context root information. Click Save to store your updates.","title":"Manual Step: Updating the personalization publishing server with the new site URL"},{"location":"config/cw_shorten_url_seo_manual-resycn-cluster/","text":"Manual Step: Resynchronizing the nodes and restarting the cluster The Modify Site URLs for Search Engine Optimization option in the Configuration Wizard includes manual steps. For reference only, you can see the details of the manual step for resynchronizing the nodes and restarting the cluster. To view this step in the Configuration Wizard, you click Modify Site URLs for Search Engine Optimization from the Set Up a Cluster page. Manual step: Resynchronize the nodes and restart the cluster. Complete the following steps if you have a static clusteran idle standby environment: Open the deployment manager WebSphere\u00ae Integrated Solutions Console. Click System Administration > Nodes , click the Select All icon to select all of the nodes from the list, and click Full Resynchronize . Click Servers > Clusters . Select the cluster and click Stop . After the cluster stops, restart it by selecting the cluster. Then, click Start . Complete these steps if you have a dynamic cluster: Open the deployment manager WebSphere Integrated Solutions Console. Click System Administration > Nodes , click the Select All icon to select all of the nodes from the list, and click Full Resynchronize . Click Servers > Dynamic Clusters . Click the dynamic cluster that you want to stop and restart. Click Dynamic cluster members . Select the member name that you want to stop and then click Stop . Select the member name that you want to start and then click Start .","title":"Manual Step: Resynchronizing the nodes and restarting the cluster"},{"location":"config/cw_shorten_url_seo_manual-resycn-cluster/#manual-step-resynchronizing-the-nodes-and-restarting-the-cluster","text":"The Modify Site URLs for Search Engine Optimization option in the Configuration Wizard includes manual steps. For reference only, you can see the details of the manual step for resynchronizing the nodes and restarting the cluster. To view this step in the Configuration Wizard, you click Modify Site URLs for Search Engine Optimization from the Set Up a Cluster page. Manual step: Resynchronize the nodes and restart the cluster. Complete the following steps if you have a static clusteran idle standby environment: Open the deployment manager WebSphere\u00ae Integrated Solutions Console. Click System Administration > Nodes , click the Select All icon to select all of the nodes from the list, and click Full Resynchronize . Click Servers > Clusters . Select the cluster and click Stop . After the cluster stops, restart it by selecting the cluster. Then, click Start . Complete these steps if you have a dynamic cluster: Open the deployment manager WebSphere Integrated Solutions Console. Click System Administration > Nodes , click the Select All icon to select all of the nodes from the list, and click Full Resynchronize . Click Servers > Dynamic Clusters . Click the dynamic cluster that you want to stop and restart. Click Dynamic cluster members . Select the member name that you want to stop and then click Stop . Select the member name that you want to start and then click Start .","title":"Manual Step: Resynchronizing the nodes and restarting the cluster"},{"location":"config/cw_shorten_url_seo_manual-search/","text":"Manual Step: Refreshing the search collection The Modify Site URLs for Search Engine Optimization option in the Configuration Wizard includes manual steps. For reference only, you can see the details of the manual step for refreshing the search collection. Attention: All steps for all database environments are included without consideration for your environment. Use the Configuration Wizard to generate custom instructions for your environment. Manual step: Refresh your search collection and regather documents. Log on to HCL DX as the administrator. To open the Manage Search portlet, open the administration menu. Then, click Search Administration > Manage Search . Click Search Collections . Click the search collection that you want to update. For example: Default Search Collection . Start the HCL DX crawler content source for each collection: If the documents are not stored in the search collection but a schedule is defined for the crawler, the crawler automatically runs at the scheduled time. You can also start the crawler manually. If the documents are already collected, select Regather documents to update the documents with the new context root information. Click Collections from All Services in the breadcrumb trail and select the next search collection to modify.","title":"Manual Step: Refreshing the search collection"},{"location":"config/cw_shorten_url_seo_manual-search/#manual-step-refreshing-the-search-collection","text":"The Modify Site URLs for Search Engine Optimization option in the Configuration Wizard includes manual steps. For reference only, you can see the details of the manual step for refreshing the search collection. Attention: All steps for all database environments are included without consideration for your environment. Use the Configuration Wizard to generate custom instructions for your environment. Manual step: Refresh your search collection and regather documents. Log on to HCL DX as the administrator. To open the Manage Search portlet, open the administration menu. Then, click Search Administration > Manage Search . Click Search Collections . Click the search collection that you want to update. For example: Default Search Collection . Start the HCL DX crawler content source for each collection: If the documents are not stored in the search collection but a schedule is defined for the crawler, the crawler automatically runs at the scheduled time. You can also start the crawler manually. If the documents are already collected, select Regather documents to update the documents with the new context root information. Click Collections from All Services in the breadcrumb trail and select the next search collection to modify.","title":"Manual Step: Refreshing the search collection"},{"location":"config/cw_shorten_url_seo_manual-synd/","text":"Manual Step: Updating syndicator and subsubscriber servers that reference your URL The Modify Site URLs for Search Engine Optimization option in the Configuration Wizard includes manual steps. For reference only, you can see the details of the manual step for updating syndicator and subscriber servers that reference your URL. To view this step in the Configuration Wizard, you must select Yes to using an HCL Web Content Manager when you provide information about your environment. Optional manual step: Update syndicator and subscriber servers that reference your modified site URL. If you do not use syndication, skip this step. Log in to the site that syndicates to this instance. Open the portal administration menu. Click Portal Content > Syndicators . Click the edit icon by the syndicator that you want to edit. Update the URL with the new context root information. Log in to the site that subscribes to this instance. Open the portal administration menu. Click Portal Content > Subscribers . Click the edit icon of the subscriber that you want to edit. Update the URL with the new context root information.","title":"Manual Step: Updating syndicator and subsubscriber servers that reference your URL"},{"location":"config/cw_shorten_url_seo_manual-synd/#manual-step-updating-syndicator-and-subsubscriber-servers-that-reference-your-url","text":"The Modify Site URLs for Search Engine Optimization option in the Configuration Wizard includes manual steps. For reference only, you can see the details of the manual step for updating syndicator and subscriber servers that reference your URL. To view this step in the Configuration Wizard, you must select Yes to using an HCL Web Content Manager when you provide information about your environment. Optional manual step: Update syndicator and subscriber servers that reference your modified site URL. If you do not use syndication, skip this step. Log in to the site that syndicates to this instance. Open the portal administration menu. Click Portal Content > Syndicators . Click the edit icon by the syndicator that you want to edit. Update the URL with the new context root information. Log in to the site that subscribes to this instance. Open the portal administration menu. Click Portal Content > Subscribers . Click the edit icon of the subscriber that you want to edit. Update the URL with the new context root information.","title":"Manual Step: Updating syndicator and subsubscriber servers that reference your URL"},{"location":"config/cw_shorten_url_seo_manual-wab/","text":"Manual Step: Redeploying the HCL Web Application Bridge to a virtual host The Modify Site URLs for Search Engine Optimization option in the Configuration Wizard includes manual steps. For reference only, you can see the details of the manual steps in this section of the product documentation. Optional manual step: Redeploy the HCL Web Application Bridge to a virtual host. If you remove the portal context root, Web Application Bridge is disabled. Use the following command to deploy Web Application Bridge to a virtual host: AIX\u00ae HP-UX Linux\u2122 Solaris:./ConfigEngine.sh deploy-wab-virtual-host -DVirtualHostName=virtualHostName -DVirtualHostAlias=virtualHostAlias -DPortalAdminPwd=password -DPortalAdminId=PortalAdminId -DWasUserid=WasUserid -DWasPassword=password Windows\u2122: ConfigEngine.bat deploy-wab-virtual-host -DVirtualHostName=virtualHostName -DVirtualHostAlias=virtualHostAlias -DPortalAdminPwd=password -DPortalAdminId=PortalAdminId -DWasUserid=WasUserid -DWasPassword=password IBM\u00ae i: ConfigEngine.sh deploy-wab-virtual-host -DVirtualHostName=virtualHostName -DVirtualHostAlias=virtualHostAlias -DPortalAdminPwd=password -DPortalAdminId=PortalAdminId -DWasUserid=WasUserid -DWasPassword=password z/OS\u00ae:./ConfigEngine.sh deploy-wab-virtual-host -DVirtualHostName=virtualHostName -DVirtualHostAlias=virtualHostAlias -DWasPassword=password virtualHostName is the name of the virtual host; for example, wab_host. virtualHostAlias is the DNS alias name that is used to access the applications on the virtual host; for example, wab.portal.com. If the virtualHostName and virtualHostAlias exist, the existing values are used. The task maps the virtualHostAlias on the same URI scheme (HTTP or HTTPS) and port that the portal is deployed on. Complete the following steps to configure single sign-on between portal and the virtual host alias that was created in the previous step. Log in to WebSphere\u00ae Integrated Solutions Console. Go to Security > Global Security > Web and SIP security > Single sign-on (SSO) . Enter the domain name. For example, if the portal host is portal.domain.hcl.com and the virtual host alias is wab.domain.hcl.com then the domain value is domain.hcl.com. Enter the virtual host alias to the DNS server to make sure that the virtual host alias is reachable from the your workstation. The virtual host alias must be accessible from all the workstations from where the portal server is accessed.","title":"Manual Step: Redeploying the HCL Web Application Bridge to a virtual host"},{"location":"config/cw_shorten_url_seo_manual-wab/#manual-step-redeploying-the-hcl-web-application-bridge-to-a-virtual-host","text":"The Modify Site URLs for Search Engine Optimization option in the Configuration Wizard includes manual steps. For reference only, you can see the details of the manual steps in this section of the product documentation. Optional manual step: Redeploy the HCL Web Application Bridge to a virtual host. If you remove the portal context root, Web Application Bridge is disabled. Use the following command to deploy Web Application Bridge to a virtual host: AIX\u00ae HP-UX Linux\u2122 Solaris:./ConfigEngine.sh deploy-wab-virtual-host -DVirtualHostName=virtualHostName -DVirtualHostAlias=virtualHostAlias -DPortalAdminPwd=password -DPortalAdminId=PortalAdminId -DWasUserid=WasUserid -DWasPassword=password Windows\u2122: ConfigEngine.bat deploy-wab-virtual-host -DVirtualHostName=virtualHostName -DVirtualHostAlias=virtualHostAlias -DPortalAdminPwd=password -DPortalAdminId=PortalAdminId -DWasUserid=WasUserid -DWasPassword=password IBM\u00ae i: ConfigEngine.sh deploy-wab-virtual-host -DVirtualHostName=virtualHostName -DVirtualHostAlias=virtualHostAlias -DPortalAdminPwd=password -DPortalAdminId=PortalAdminId -DWasUserid=WasUserid -DWasPassword=password z/OS\u00ae:./ConfigEngine.sh deploy-wab-virtual-host -DVirtualHostName=virtualHostName -DVirtualHostAlias=virtualHostAlias -DWasPassword=password virtualHostName is the name of the virtual host; for example, wab_host. virtualHostAlias is the DNS alias name that is used to access the applications on the virtual host; for example, wab.portal.com. If the virtualHostName and virtualHostAlias exist, the existing values are used. The task maps the virtualHostAlias on the same URI scheme (HTTP or HTTPS) and port that the portal is deployed on. Complete the following steps to configure single sign-on between portal and the virtual host alias that was created in the previous step. Log in to WebSphere\u00ae Integrated Solutions Console. Go to Security > Global Security > Web and SIP security > Single sign-on (SSO) . Enter the domain name. For example, if the portal host is portal.domain.hcl.com and the virtual host alias is wab.domain.hcl.com then the domain value is domain.hcl.com. Enter the virtual host alias to the DNS server to make sure that the virtual host alias is reachable from the your workstation. The virtual host alias must be accessible from all the workstations from where the portal server is accessed.","title":"Manual Step: Redeploying the HCL Web Application Bridge to a virtual host"},{"location":"config/cw_shorten_url_seo_manual-web-server/","text":"Manual Step: Configure your external web server The Modify Site URLs for Search Engine Optimization option in the Configuration Wizard includes manual steps. For reference only, you can see the details of the manual step for configuring an external web server. To view this step in the Configuration Wizard, you must select Yes to using an external web server when you provide information about your environment. Stand-alone environment version of the external web server step Manual step: Configure your external web server. Copy the following script from the plugin_root/bin directory of the web server to the wp\\_profile\\_root wp_profile_root /bin directory on your HCL Portal server: AIX\u00ae HP-UX Linux\u2122 Solaris: ./configurewebservername.sh Windows\u2122: configurewebservername.bat IBM\u00ae i: configurewebservername.sh z/OS\u00ae: ./configurewebservername.sh where webservername is the web server definition name you defined previously when you configured the HTTP Server for HCL Portal, for example: configurewebserver1.bat. Run the following command, from the wp\\_profile\\_root wp_profile_root /bin directory: AIX HP-UX Linux Solaris: ./configurewebservername.sh Windows: configurewebservername.bat IBM i: configurewebservername.sh z/OS: ./configurewebservername.sh Regenerate the web server plug-in in WebSphere\u00ae Application Server. If you are using a remote web server, copy the generated plugin-cfg.xml file to the remote server. Note: Do not complete these steps if you are changing only the WSRP Producer context home value. Restart the web server. Cluster environment version of the external web server step Manual step: Configure your external web server. Copy the following script from the plugin_root/bin directory of the web server to the dmgr_profile/bin directory on your Deployment Manager server: AIX HP-UX Linux Solaris: ./configurewebservername.sh Windows: configurewebservername.bat IBM i: configurewebservername.sh z/OS: ./configurewebservername.sh where webservername is the web server definition name you defined previously when you configured the HTTP Server for HCL Portal, for example: configurewebserver1.bat. Run the following command on the Deployment Manager server: AIX HP-UX Linux Solaris: ./configurewebservername.sh Windows: configurewebservername.bat IBM i: configurewebservername.sh z/OS: ./configurewebservername.sh Regenerate the web server plug-in in WebSphere Application Server. If you are using a remote web server, copy the generated plugin-cfg.xml file to the remote server. Note: Do not complete these steps if you are changing only the WSRP Producer context home value. Restart the web server.","title":"Manual Step: Configure your external web server"},{"location":"config/cw_shorten_url_seo_manual-web-server/#manual-step-configure-your-external-web-server","text":"The Modify Site URLs for Search Engine Optimization option in the Configuration Wizard includes manual steps. For reference only, you can see the details of the manual step for configuring an external web server. To view this step in the Configuration Wizard, you must select Yes to using an external web server when you provide information about your environment. Stand-alone environment version of the external web server step Manual step: Configure your external web server. Copy the following script from the plugin_root/bin directory of the web server to the wp\\_profile\\_root wp_profile_root /bin directory on your HCL Portal server: AIX\u00ae HP-UX Linux\u2122 Solaris: ./configurewebservername.sh Windows\u2122: configurewebservername.bat IBM\u00ae i: configurewebservername.sh z/OS\u00ae: ./configurewebservername.sh where webservername is the web server definition name you defined previously when you configured the HTTP Server for HCL Portal, for example: configurewebserver1.bat. Run the following command, from the wp\\_profile\\_root wp_profile_root /bin directory: AIX HP-UX Linux Solaris: ./configurewebservername.sh Windows: configurewebservername.bat IBM i: configurewebservername.sh z/OS: ./configurewebservername.sh Regenerate the web server plug-in in WebSphere\u00ae Application Server. If you are using a remote web server, copy the generated plugin-cfg.xml file to the remote server. Note: Do not complete these steps if you are changing only the WSRP Producer context home value. Restart the web server. Cluster environment version of the external web server step Manual step: Configure your external web server. Copy the following script from the plugin_root/bin directory of the web server to the dmgr_profile/bin directory on your Deployment Manager server: AIX HP-UX Linux Solaris: ./configurewebservername.sh Windows: configurewebservername.bat IBM i: configurewebservername.sh z/OS: ./configurewebservername.sh where webservername is the web server definition name you defined previously when you configured the HTTP Server for HCL Portal, for example: configurewebserver1.bat. Run the following command on the Deployment Manager server: AIX HP-UX Linux Solaris: ./configurewebservername.sh Windows: configurewebservername.bat IBM i: configurewebservername.sh z/OS: ./configurewebservername.sh Regenerate the web server plug-in in WebSphere Application Server. If you are using a remote web server, copy the generated plugin-cfg.xml file to the remote server. Note: Do not complete these steps if you are changing only the WSRP Producer context home value. Restart the web server.","title":"Manual Step: Configure your external web server"},{"location":"config/oracle_create_tablespaces/","text":"Oracle: Creating JCR table spaces (Automatic Storage Management) If you configured your database with Automatic Storage Management, you might need to perform additional manual instructions to create JCR table spaces when you use the Database Transfer option in the Configuration Wizard. If you select the option to let the wizard create your database schemas and assign permissions, you must perform the steps in this topic after you run the setup database script. Create table spaces using the following commands as examples: Note: If you plan on customizing your table space names, you must ensure that the customized table space names are used during database transfer. Custom table spaces must exist prior to performing database transfer. ASM_disk_group_name is the disk group name that you used to configure your Automatic Storage Management environment. Ensure that the ' . ' is included in the variables when you substitute the values of your environment with these variables. create tablespace ICMLFQ32 datafile '+ASM_disk_group_name' size 300M reuse autoextend on next 10M maxsize UNLIMITED extent management local autoallocate; create tablespace ICMLNF32 datafile '+ASM_disk_group_name' size 25M reuse autoextend on next 10M maxsize UNLIMITED extent management local autoallocate; create tablespace ICMVFQ04 datafile '+ASM_disk_group_name' size 25M reuse autoextend on next 10M maxsize UNLIMITED extent management local autoallocate; create tablespace ICMSFQ04 datafile '+ASM_disk_group_name' size 150M reuse autoextend on next 10M maxsize UNLIMITED extent management local autoallocate; create tablespace ICMLSNDX datafile '+ASM_disk_group_name' size 10M reuse autoextend on next 10M maxsize UNLIMITED extent management local autoallocate; Set the size, autoextend, and maxsize values according to your environment. For example, you may want to change the maxsize to a set value rather than UNLIMITED. Consult your Database Administrator for specific guidance about creating tablespaces for your environment. Refer to the Oracle command reference for more information about using the create tablespaces command. Ensure the database is registered with the Oracle listener. Use the tnsnames.ora file to describe this database and recycle the listener.","title":"Oracle: Creating JCR table spaces \\(Automatic Storage Management\\)"},{"location":"config/oracle_create_tablespaces/#oracle-creating-jcr-table-spaces-automatic-storage-management","text":"If you configured your database with Automatic Storage Management, you might need to perform additional manual instructions to create JCR table spaces when you use the Database Transfer option in the Configuration Wizard. If you select the option to let the wizard create your database schemas and assign permissions, you must perform the steps in this topic after you run the setup database script. Create table spaces using the following commands as examples: Note: If you plan on customizing your table space names, you must ensure that the customized table space names are used during database transfer. Custom table spaces must exist prior to performing database transfer. ASM_disk_group_name is the disk group name that you used to configure your Automatic Storage Management environment. Ensure that the ' . ' is included in the variables when you substitute the values of your environment with these variables. create tablespace ICMLFQ32 datafile '+ASM_disk_group_name' size 300M reuse autoextend on next 10M maxsize UNLIMITED extent management local autoallocate; create tablespace ICMLNF32 datafile '+ASM_disk_group_name' size 25M reuse autoextend on next 10M maxsize UNLIMITED extent management local autoallocate; create tablespace ICMVFQ04 datafile '+ASM_disk_group_name' size 25M reuse autoextend on next 10M maxsize UNLIMITED extent management local autoallocate; create tablespace ICMSFQ04 datafile '+ASM_disk_group_name' size 150M reuse autoextend on next 10M maxsize UNLIMITED extent management local autoallocate; create tablespace ICMLSNDX datafile '+ASM_disk_group_name' size 10M reuse autoextend on next 10M maxsize UNLIMITED extent management local autoallocate; Set the size, autoextend, and maxsize values according to your environment. For example, you may want to change the maxsize to a set value rather than UNLIMITED. Consult your Database Administrator for specific guidance about creating tablespaces for your environment. Refer to the Oracle command reference for more information about using the create tablespaces command. Ensure the database is registered with the Oracle listener. Use the tnsnames.ora file to describe this database and recycle the listener.","title":"Oracle: Creating JCR table spaces (Automatic Storage Management)"},{"location":"containerization/REST_APIs_remote_search/","text":"Configure Remote Search using REST APIs This section shows how to configure Remote Search for your HCL Digital Experience 9.5 environments on a traditional IBM WebSphere Application Server Network Deployment-based cluster DX deployment cluster, a Docker container, or on supported Red Hat OpenShift and Kubernetes container platforms using REST APIs. Introduction REST APIs are available to allow listing, deleting, modifying, and defining Portal Search Services (and their parameters). REST APIs may also be used to list, delete, and define Portal Search collections and Portal Search Content Providers (and their parameters). Reference the HCL DX 9.5 Help Center topic REST APIs for Search for additional information. Configuring Remote Search for DX Portal requires changes to the WebSphere configuration of both the remote search server, as well as the DX Portal server. In addition, Portal changes need to be made on the Portal server itself. Traditionally, these changes occurred via the Search Admin GUI on DX Portal. Starting HCL Digital Experience 9.5 CF199 and higher deployments, a new set of REST services also enables users to configure Remote Search. A REST service is implemented, and may be used to perform many of the same Remote Search configuration tasks in a selected environment. The environment can be a traditional IBM WebSphere Application Server Network Deployment-based cluster DX deployment, a set of Docker images, or a set of DX Kubernetes PODs. Prerequisites In general, at least one (1) DX Portal Server and exactly one (1) DX Remote Search Server instances must be running. This can be in Docker, in Kubernetes, or a cluster. The Portal Servers must have addressability to the Remote Search Server and vice-versa. Optimally, this is handled through a DNS server so each of the servers has an IP address statically assigned and resolvable via DNS. Note: Some services typically assign IP addresses dynamically and are NOT available in DNS. This is true (by default) for Docker. To resolve this issue in Docker, add parameters to the docker run command. Docker images can be started like it follows both - to statistically assign a DNS address, and for that DNS address to be in the /etc/hosts file on the servers: ``` !/bin/bash PORTALIP=\"172.18.0.10\" REMOTESEARCHIP=\"172.18.0.11\" DOCKERHOST=\"172.19.0.1\" PORTAL_DOCKER_IMAGE=\"quintana-docker.artifactory.cwp.pnp-hcl.com/dx-build-output/core/dxen:v95_CF192_20210206-022427_rohan_DXQ-14209_on_develop_601eaed4\" REMOTE_SEARCH_DOCKER_IMAGE=\"quintana-docker.artifactory.cwp.pnp-hcl.com/dxrs:v95_CF192_20210208-055522_rohan_develop_60215986\" echo \"Starting portal docker image with tag\" $PORTAL_DOCKER_IMAGE echo \"Starting remote search docker image with tag\" $REMOTE_SEARCH_DOCKER_IMAGE Start the two docker images Portal docker run -d --name portaldocker --net aDockerNetwork --ip=\"$PORTALIP\" -p 10039:10039 -p 10041:10041 -p 10042:10042 -p 10200-10205:10200-10205 -p 7777:7777 --add-host=\"remotesearch:$REMOTESEARCHIP\" --add-host=\"remotesearch:$REMOTESEARCHIP2\" --add-host=\"dockerHost:$DOCKERHOST\" $PORTAL_DOCKER_IMAGE Remote Search docker run -d --name remotesearch --net aDockerNetwork --ip=\"$REMOTESEARCHIP\" -p 8880:8880 -p 2809:2809 -p 9043:9043 -p 9060:9060 -p 9080:9080 -p 9403:9403 --add-host=\"portaldocker:$PORTALIP\" --add-host=\"dockerHost:$DOCKERHOST\" $REMOTE_SEARCH_DOCKER_IMAGE ``` In order to use statically assigned IP addresses like in the example above, a private Docker subnet is created using the following command: docker network create --internal --subnet 172.18.0.0/16 aDockerNetwork The default network used in the example is 172.19.0.0/16. This is the address range used by the Docker host. The example will result to a new set of ConfigEngine tasks to exist for the WebSphere configuration portion. A new set of REST APIs are also now in place to support the command-line configuration of Portal Search. Note: The configuration commands used in the example configures remote search in a DX environment. However, the collections are empty even though they are defined. To populate the collections, the crawlers must be started. This can either be achieved by manually starting them, putting them on a schedule, or a combination of both. Access Rights For any attempted operation, the user that makes the request must first log into the Portal. The logged-in user is then checked for sufficient privileges before the requested action to any subsequent Remote Search REST API request is executed. If the logged-in user has no sufficient privileges, the Remote Search REST API request is rejected, and an appropriate response is returned. New ConfigEngine tasks ConfigEngine tasks on the DX Portal Server Complete configuration of WebSphere on the DX Portal Server is accomplished by executing the following command: ./ConfigEngine.sh configure-portal-for-remote-search -DWasPassword={Was Password} Parameters may be added to this command to customize it. The following are all given -D parameters, along with the default values for each: -Dremote.search.host.name default=\"remotesearch\" -Dremote.search.host.port default=\"9043\" -Dremote.search.cert.alias default=\"remotesearchalias\" -Dremote.search.iiop.url default=\"iiop://remotesearch:2809\" -Dremote.search.index.directory default=\"/opt/HCL/AppServer/profiles/prs_profile/SearchCollections\" The following takes place when the DX Portal Server ConfigEngine command is executed: Retrieve the remote SSL key from the remote search server. Export the LPTA key to a file for the Portal server. Suppress the automatic creation of the Default Search Server on Portal restart, if it doesn't already exist. Set all the Resource Environment Providers for the JCR for WCM Authoring search. ConfigEngine tasks on the DX Remote Search Server Complete configuration of WebSphere on the DX Remote Search Server may now be accomplished by executing the following command: ./ConfigEngine.sh configure-remote-search-server-for-remote-search -DWasPassword={Was Password} Note: Complete Remote search server configuration require deploying WebScannerEjbEar.ear, and copying and unzipping file PseLibs.zip on remote search server. Refer to the Preparing for remote service topic for steps. Parameters may be added to this command to customize it. The following are all given -D parameters, along with the default values for each: -Dremote.search.host.name default=\"remotesearch\" -Dportal.host.name default=\"portaldocker\" -Dportal.port.number default=\"10042\" -Dportal.cert.alias default=\"portaldockeralias\" The following takes place when the DX Remote Search Server ConfigEngine command is executed: Retrieve remote SSL key from the Portal Server. Import the LTPA key exported from the Portal Server in the previous step. Edit the serverindex.xml file to have the correct Remote Search server host name. Important: Both the remote search server and the portal server must both be restarted after the ConfigEngine tasks are complete. Since the changes are IBM WebSphere Application Server Network Deployment-based cluster DX deployment changes in the profile, the changes are not picked up until the restart. New REST APIs Like all REST services, the type of HTTP command ( GET , PUT , POST , DELETE ) dictates the type of operation. The format of the URL is very similar for each type. However, some of the types (e.g. POST ) require JSON input to define the add. Here are the HTTP mapping types: GET -> list POST -> add DELETE -> delete The following example illustrates the elements of a URL, which generally consists of the following: /wps/mycontenthandler/!ut/p/searchadmin/service/Remote+PSE+service+EJB/collection/JCRCollection1/provider/JCR+Content The initial portal (/wps/mycontenthandler/!ut/p/searchadmin/service) is invariant and is present in all REST commands for remote search configuration. Remote+PSE+service+EJB presents the name of the service on which to perform an operation. Note that in a URL, the space character is NOT allowed. You can either replace the space character with the \" + \" character, or replace the space character with \" %20 \". Both forms are equivalent. The collection character sequence is only required when operating on a collection or providers within a collection. In the example, the collection name is JCRCollection1. This happens to be the required collection name for searches of artifacts by the WCM Authoring GUI. If the URL is malformed for whatever reason, an error will be returned in response to the request. Lastly, and only required when doing operations on a content provider for a particular service and collection, is you need to add the required character sequence provider, followed by the name of the provider in question. In our example, the provider is called JCR Content. Note that a \" + \" replaces a space character in the URL. Thus, the actual provider name is JCR Content. For all commands, the HTTP response code is useful. For example, if the HTTP response code is 401 , then it is likely that the one has NOT used the REST login before the REST configure command. All these commands require an \"Authenticated\" status. The POST and DEL commands require administrator access rights on the search configuration objects. In all cases, a combination of the HTTP response code along with a potential error message in the response payload indicates a variety of potential issues. Some of these issues may include a lack of access rights for the intended operation, the fact that the resource already exists (for example, trying to create/POST a service name that already exists), and more. Otherwise, a successful returns an HTTP response code of 20x List The following command list details of various remote search resources. No JSON body is required on the request. The HTTP response is the JSON which matches the type of the request. If the requested resource to \" LIST \" doesn't exist, the returned JSON will be empty (e.g. \" {} \"). http://localhost:10039/wps/mycontenthandler/!ut/p/searchadmin/services http://localhost:10039/wps/mycontenthandler/!ut/p/searchadmin/service/{service name}/ http://localhost:10039/wps/mycontenthandler/!ut/p/searchadmin/service/{service name}/collection/{collection name} http://localhost:10039/wps/mycontenthandler/!ut/p/searchadmin/service/{service name}/collection/{collection name}/provider/{content provider name} Sample command and output: http://localhost:10039/wps/mycontenthandler/!ut/p/searchadmin/services { \"services\": [ { \"name\": \"Remote PSE service EJB\", \"link\": \"/wps/mycontenthandler/!ut/p/searchadmin/service/Remote+PSE+service+EJB\" } ] } Note that each service name is followed by a relative link, which can be used to get more details of the service. The next command shows an example of this: http://localhost:10039/wps/mycontenthandler/!ut/p/searchadmin/service/Remote+PSE+service+EJB/ { \"RESOURCE_ENVIRONMENT_PROVIDER_NAME\": \"SearchPropertiesService\", \"facetedFields\": \"null\", \"WORK_MANAGER_DEPLOY\": \"wps/searchIndexWM\", \"EJB_Example\": \"ejb/com/ibm/hrl/portlets/WsPse/WebScannerLiteEJBHome\", \"DefaultCollectionsDirectory\": \"null\", \"CONTENT_SOURCE_TYPE_FEATURE_NAME\": \"ContentSourceType\", \"EJB\": \"ejb/com/ibm/hrl/portlets/WsPse/WebScannerLiteEJBHome\", \"MAX_BUILD_BATCH_SIZE\": \"10000\", \"fieldTypes\": \"null\", \"WORK_MANAGER_NATIVE\": \"force.hrl.work.manager.use.native.threads\", \"WORK_MANAGER\": \"wps/searchIndexWM\", \"PSE_TYPE_option_3\": \"soap\", \"PSE_TYPE_option_2\": \"ejb\", \"PSE_TYPE_option_1\": \"localhost\", \"IIOP_URL\": \"iiop://remotesearch:2809\", \"VALIDATE_COOKIE\": \"123\", \"PortalCollectionSourceName\": \"Remote PSE service EJB\", \"WORK_MANAGER_NAME\": \"wps/searchIndexWM\", \"PSE_TYPE\": \"ejb\", \"CONTENT_SOURCE_TYPE_FEATURE_VAL_PORTAL\": \"Portal\", \"HTTP_MAX_BODY_SIZE_MB\": \"20\", \"MAX_BUILD_INTERVAL_TIME_SECONDS\": \"300\", \"SetProperties\": \"on\", \"PortalCollectionName\": \"TestGood\", \"IIOP_URL_Example\": \"iiop://localhost:2811\", \"CLEAN_UP_TIME_OF_DAY_HOURS\": \"0\", \"SOAP_URL_Example\": \"http://localhost:10000/WebScannerSOAP/servlet/rpcrouter\", \"mappedFields\": \"null\", \"OPEN_WCM_WINDOW\": \"/wps/myportal/wcmContent?WCM_GLOBAL_CONTEXT=\", \"SOAP_URL\": \"null\", \"DEFAULT_acls_FIELDINFO\": \"contentSearchable=false, fieldSearchable=true, returnable=true, sortable=false, supportsExactMatch=true, parametric=false, typeAhead=false\", \"SecurityResolverId\": \"com.ibm.lotus.search.plugins.provider.core.PortalSecurityResolverFactory\", \"CONTENT_SOURCE_TYPE_FEATURE_VAL_UPLOAD\": \"Upload\", \"CONTENT_SOURCE_TYPE_FEATURE_VAL_WEB\": \"Web\", \"OpenResultMode\": \"new\", \"SEARCH_SECURITY_MODE\": \"SECURITY_MODE_PRE_POST_FILTER\", \"collections\": [ { \"name\": \"JCRCollection1\", \"link\": \"/wps/mycontenthandler/!ut/p/searchadmin/service/Remote+PSE+service+EJB/collection/JCRCollection1\" }, { \"name\": \"Portal Search Collection\", \"link\": \"/wps/mycontenthandler/!ut/p/searchadmin/service/Remote+PSE+service+EJB/collection/Portal+Search+Collection\" } ] } Again, do note that the end of the list shows two collections, and the URLs that can be used to gather more information regarding those collections. http://localhost:10039/wps/mycontenthandler/!ut/p/searchadmin/service/Remote+PSE+service+EJB/collection/JCRCollection1 { \"location\": \"/opt/HCL/AppServer/profiles/prs_profile/SearchCollections/JCRCollection1\", \"IndexTitleKey\": \"JCRCollection1\", \"IndexNameKey\": \"JCRCollection1\", \"IndexLanguageKey\": \"en_US\", \"location\": \"/opt/HCL/AppServer/profiles/prs_profile/SearchCollections/JCRCollection1\", \"CollectionStatus\": \"true\", \"IndexDescriptionKey\": \"JCRCollection1\", \"DictionaryAnalysis\": \"true\", \"providers\": [ { \"name\": \"JCR Content\", \"link\": \"/wps/mycontenthandler/!ut/p/searchadmin/service/Remote+PSE+service+EJB/collection/JCRCollection1/provider/JCR+Content\" } ] } Delete If a resource to be deleted does not exist, then the returned JSON will return null (e.g. \" {} \"), which is the same as the returned JSON if the request is successful. http://localhost:10039/wps/mycontenthandler/!ut/p/searchadmin/service/{service name}/ http://localhost:10039/wps/mycontenthandler/!ut/p/searchadmin/service/{service name}/collection/{collection name} http://localhost:10039/wps/mycontenthandler/!ut/p/searchadmin/service/{service name}/collection/{collection name}/provider/{content provider name} In general, after a successful delete operation (HTTP 200), expect that the response JSON payload is null (e.g. \" {} \"). Add http://localhost:10039/wps/mycontenthandler/!ut/p/searchadmin/service/{service name}/ http://localhost:10039/wps/mycontenthandler/!ut/p/searchadmin/service/{service name}/collection/{collection name} http://localhost:10039/wps/mycontenthandler/!ut/p/searchadmin/service/{service name}/collection/{collection name}/provider/{content provider name} If the resource to be added already exists, then an error message is returned like the following: Error 400: {resource} Already Exists where {resource} is one of \"service\", \"collection\" or \"content provider\" as is appropriate for the invalid request URL. The JSON returned as a result of an add REST call is exactly that, which is returned for the same GET call. Effectively, the returned JSON echoes the input add JSON request. Starting a Crawler Once the Service/Collection/Content Provider is configured, the crawlers will still not populate the indexes. To populate the indexes, the crawlers must be started. Crawlers can be started in one of two different ways: The first is via a scheduler, which automatically runs the crawler on a set schedule. Currently this schedule can only be configured in the search GUI. The second method is to immediately start the crawler either from the GUI or via a REST service. The REST service to start a crawler looks as follows: http://localhost:10039/wps/mycontenthandler/!ut/p/searchadmin/service/Remote+PSE+service+EJB/collection/Portal+Search+Collection/provider/WCMContentSource/crawl This URL looks like very much a POST command to add a content provider. The only difference is that the crawl command is located at the end of the URL. This command will start an immediate crawl on the content provider in the previous portion of the URL. The output of the command is an HTTP 201 return code, along with a JSON body that is exactly like this: { \"crawl\": \"started\" } Use of API on Main Virtual Portal versus all other Virtual Portals On a Virtual Portal, the \u201c!ut/p/digest\u201d portal of the URL must be included as the contenthandler cannot issue the redirect when using the URL format without the portion mentioned. As such, referring to the example URLs above, the \u201c!ut/p/digest\u201d portal of the URL is NOT included. This implies that this URL is issued in the \"main\" VP of the DX Portal. A 302 redirect will take place, and the \u201c!ut/p/digest\u201d will be inserted in the final URL. This portion of the URL can also be used for the VP URL request. Parent topic: Customizing your container deployment","title":"Configure Remote Search using REST APIs"},{"location":"containerization/REST_APIs_remote_search/#configure-remote-search-using-rest-apis","text":"This section shows how to configure Remote Search for your HCL Digital Experience 9.5 environments on a traditional IBM WebSphere Application Server Network Deployment-based cluster DX deployment cluster, a Docker container, or on supported Red Hat OpenShift and Kubernetes container platforms using REST APIs.","title":"Configure Remote Search using REST APIs"},{"location":"containerization/REST_APIs_remote_search/#introduction","text":"REST APIs are available to allow listing, deleting, modifying, and defining Portal Search Services (and their parameters). REST APIs may also be used to list, delete, and define Portal Search collections and Portal Search Content Providers (and their parameters). Reference the HCL DX 9.5 Help Center topic REST APIs for Search for additional information. Configuring Remote Search for DX Portal requires changes to the WebSphere configuration of both the remote search server, as well as the DX Portal server. In addition, Portal changes need to be made on the Portal server itself. Traditionally, these changes occurred via the Search Admin GUI on DX Portal. Starting HCL Digital Experience 9.5 CF199 and higher deployments, a new set of REST services also enables users to configure Remote Search. A REST service is implemented, and may be used to perform many of the same Remote Search configuration tasks in a selected environment. The environment can be a traditional IBM WebSphere Application Server Network Deployment-based cluster DX deployment, a set of Docker images, or a set of DX Kubernetes PODs.","title":"Introduction"},{"location":"containerization/REST_APIs_remote_search/#prerequisites","text":"In general, at least one (1) DX Portal Server and exactly one (1) DX Remote Search Server instances must be running. This can be in Docker, in Kubernetes, or a cluster. The Portal Servers must have addressability to the Remote Search Server and vice-versa. Optimally, this is handled through a DNS server so each of the servers has an IP address statically assigned and resolvable via DNS. Note: Some services typically assign IP addresses dynamically and are NOT available in DNS. This is true (by default) for Docker. To resolve this issue in Docker, add parameters to the docker run command. Docker images can be started like it follows both - to statistically assign a DNS address, and for that DNS address to be in the /etc/hosts file on the servers: ```","title":"Prerequisites"},{"location":"containerization/REST_APIs_remote_search/#binbash","text":"PORTALIP=\"172.18.0.10\" REMOTESEARCHIP=\"172.18.0.11\" DOCKERHOST=\"172.19.0.1\" PORTAL_DOCKER_IMAGE=\"quintana-docker.artifactory.cwp.pnp-hcl.com/dx-build-output/core/dxen:v95_CF192_20210206-022427_rohan_DXQ-14209_on_develop_601eaed4\" REMOTE_SEARCH_DOCKER_IMAGE=\"quintana-docker.artifactory.cwp.pnp-hcl.com/dxrs:v95_CF192_20210208-055522_rohan_develop_60215986\" echo \"Starting portal docker image with tag\" $PORTAL_DOCKER_IMAGE echo \"Starting remote search docker image with tag\" $REMOTE_SEARCH_DOCKER_IMAGE","title":"!/bin/bash"},{"location":"containerization/REST_APIs_remote_search/#start-the-two-docker-images","text":"","title":"Start the two docker images"},{"location":"containerization/REST_APIs_remote_search/#portal","text":"docker run -d --name portaldocker --net aDockerNetwork --ip=\"$PORTALIP\" -p 10039:10039 -p 10041:10041 -p 10042:10042 -p 10200-10205:10200-10205 -p 7777:7777 --add-host=\"remotesearch:$REMOTESEARCHIP\" --add-host=\"remotesearch:$REMOTESEARCHIP2\" --add-host=\"dockerHost:$DOCKERHOST\" $PORTAL_DOCKER_IMAGE","title":"Portal"},{"location":"containerization/REST_APIs_remote_search/#remote-search","text":"docker run -d --name remotesearch --net aDockerNetwork --ip=\"$REMOTESEARCHIP\" -p 8880:8880 -p 2809:2809 -p 9043:9043 -p 9060:9060 -p 9080:9080 -p 9403:9403 --add-host=\"portaldocker:$PORTALIP\" --add-host=\"dockerHost:$DOCKERHOST\" $REMOTE_SEARCH_DOCKER_IMAGE ``` In order to use statically assigned IP addresses like in the example above, a private Docker subnet is created using the following command: docker network create --internal --subnet 172.18.0.0/16 aDockerNetwork The default network used in the example is 172.19.0.0/16. This is the address range used by the Docker host. The example will result to a new set of ConfigEngine tasks to exist for the WebSphere configuration portion. A new set of REST APIs are also now in place to support the command-line configuration of Portal Search. Note: The configuration commands used in the example configures remote search in a DX environment. However, the collections are empty even though they are defined. To populate the collections, the crawlers must be started. This can either be achieved by manually starting them, putting them on a schedule, or a combination of both.","title":"Remote Search"},{"location":"containerization/REST_APIs_remote_search/#access-rights","text":"For any attempted operation, the user that makes the request must first log into the Portal. The logged-in user is then checked for sufficient privileges before the requested action to any subsequent Remote Search REST API request is executed. If the logged-in user has no sufficient privileges, the Remote Search REST API request is rejected, and an appropriate response is returned.","title":"Access Rights"},{"location":"containerization/REST_APIs_remote_search/#new-configengine-tasks","text":"ConfigEngine tasks on the DX Portal Server Complete configuration of WebSphere on the DX Portal Server is accomplished by executing the following command: ./ConfigEngine.sh configure-portal-for-remote-search -DWasPassword={Was Password} Parameters may be added to this command to customize it. The following are all given -D parameters, along with the default values for each: -Dremote.search.host.name default=\"remotesearch\" -Dremote.search.host.port default=\"9043\" -Dremote.search.cert.alias default=\"remotesearchalias\" -Dremote.search.iiop.url default=\"iiop://remotesearch:2809\" -Dremote.search.index.directory default=\"/opt/HCL/AppServer/profiles/prs_profile/SearchCollections\" The following takes place when the DX Portal Server ConfigEngine command is executed: Retrieve the remote SSL key from the remote search server. Export the LPTA key to a file for the Portal server. Suppress the automatic creation of the Default Search Server on Portal restart, if it doesn't already exist. Set all the Resource Environment Providers for the JCR for WCM Authoring search. ConfigEngine tasks on the DX Remote Search Server Complete configuration of WebSphere on the DX Remote Search Server may now be accomplished by executing the following command: ./ConfigEngine.sh configure-remote-search-server-for-remote-search -DWasPassword={Was Password} Note: Complete Remote search server configuration require deploying WebScannerEjbEar.ear, and copying and unzipping file PseLibs.zip on remote search server. Refer to the Preparing for remote service topic for steps. Parameters may be added to this command to customize it. The following are all given -D parameters, along with the default values for each: -Dremote.search.host.name default=\"remotesearch\" -Dportal.host.name default=\"portaldocker\" -Dportal.port.number default=\"10042\" -Dportal.cert.alias default=\"portaldockeralias\" The following takes place when the DX Remote Search Server ConfigEngine command is executed: Retrieve remote SSL key from the Portal Server. Import the LTPA key exported from the Portal Server in the previous step. Edit the serverindex.xml file to have the correct Remote Search server host name. Important: Both the remote search server and the portal server must both be restarted after the ConfigEngine tasks are complete. Since the changes are IBM WebSphere Application Server Network Deployment-based cluster DX deployment changes in the profile, the changes are not picked up until the restart.","title":"New ConfigEngine tasks"},{"location":"containerization/REST_APIs_remote_search/#new-rest-apis","text":"Like all REST services, the type of HTTP command ( GET , PUT , POST , DELETE ) dictates the type of operation. The format of the URL is very similar for each type. However, some of the types (e.g. POST ) require JSON input to define the add. Here are the HTTP mapping types: GET -> list POST -> add DELETE -> delete The following example illustrates the elements of a URL, which generally consists of the following: /wps/mycontenthandler/!ut/p/searchadmin/service/Remote+PSE+service+EJB/collection/JCRCollection1/provider/JCR+Content The initial portal (/wps/mycontenthandler/!ut/p/searchadmin/service) is invariant and is present in all REST commands for remote search configuration. Remote+PSE+service+EJB presents the name of the service on which to perform an operation. Note that in a URL, the space character is NOT allowed. You can either replace the space character with the \" + \" character, or replace the space character with \" %20 \". Both forms are equivalent. The collection character sequence is only required when operating on a collection or providers within a collection. In the example, the collection name is JCRCollection1. This happens to be the required collection name for searches of artifacts by the WCM Authoring GUI. If the URL is malformed for whatever reason, an error will be returned in response to the request. Lastly, and only required when doing operations on a content provider for a particular service and collection, is you need to add the required character sequence provider, followed by the name of the provider in question. In our example, the provider is called JCR Content. Note that a \" + \" replaces a space character in the URL. Thus, the actual provider name is JCR Content. For all commands, the HTTP response code is useful. For example, if the HTTP response code is 401 , then it is likely that the one has NOT used the REST login before the REST configure command. All these commands require an \"Authenticated\" status. The POST and DEL commands require administrator access rights on the search configuration objects. In all cases, a combination of the HTTP response code along with a potential error message in the response payload indicates a variety of potential issues. Some of these issues may include a lack of access rights for the intended operation, the fact that the resource already exists (for example, trying to create/POST a service name that already exists), and more. Otherwise, a successful returns an HTTP response code of 20x","title":"New REST APIs"},{"location":"containerization/REST_APIs_remote_search/#list","text":"The following command list details of various remote search resources. No JSON body is required on the request. The HTTP response is the JSON which matches the type of the request. If the requested resource to \" LIST \" doesn't exist, the returned JSON will be empty (e.g. \" {} \"). http://localhost:10039/wps/mycontenthandler/!ut/p/searchadmin/services http://localhost:10039/wps/mycontenthandler/!ut/p/searchadmin/service/{service name}/ http://localhost:10039/wps/mycontenthandler/!ut/p/searchadmin/service/{service name}/collection/{collection name} http://localhost:10039/wps/mycontenthandler/!ut/p/searchadmin/service/{service name}/collection/{collection name}/provider/{content provider name} Sample command and output: http://localhost:10039/wps/mycontenthandler/!ut/p/searchadmin/services { \"services\": [ { \"name\": \"Remote PSE service EJB\", \"link\": \"/wps/mycontenthandler/!ut/p/searchadmin/service/Remote+PSE+service+EJB\" } ] } Note that each service name is followed by a relative link, which can be used to get more details of the service. The next command shows an example of this: http://localhost:10039/wps/mycontenthandler/!ut/p/searchadmin/service/Remote+PSE+service+EJB/ { \"RESOURCE_ENVIRONMENT_PROVIDER_NAME\": \"SearchPropertiesService\", \"facetedFields\": \"null\", \"WORK_MANAGER_DEPLOY\": \"wps/searchIndexWM\", \"EJB_Example\": \"ejb/com/ibm/hrl/portlets/WsPse/WebScannerLiteEJBHome\", \"DefaultCollectionsDirectory\": \"null\", \"CONTENT_SOURCE_TYPE_FEATURE_NAME\": \"ContentSourceType\", \"EJB\": \"ejb/com/ibm/hrl/portlets/WsPse/WebScannerLiteEJBHome\", \"MAX_BUILD_BATCH_SIZE\": \"10000\", \"fieldTypes\": \"null\", \"WORK_MANAGER_NATIVE\": \"force.hrl.work.manager.use.native.threads\", \"WORK_MANAGER\": \"wps/searchIndexWM\", \"PSE_TYPE_option_3\": \"soap\", \"PSE_TYPE_option_2\": \"ejb\", \"PSE_TYPE_option_1\": \"localhost\", \"IIOP_URL\": \"iiop://remotesearch:2809\", \"VALIDATE_COOKIE\": \"123\", \"PortalCollectionSourceName\": \"Remote PSE service EJB\", \"WORK_MANAGER_NAME\": \"wps/searchIndexWM\", \"PSE_TYPE\": \"ejb\", \"CONTENT_SOURCE_TYPE_FEATURE_VAL_PORTAL\": \"Portal\", \"HTTP_MAX_BODY_SIZE_MB\": \"20\", \"MAX_BUILD_INTERVAL_TIME_SECONDS\": \"300\", \"SetProperties\": \"on\", \"PortalCollectionName\": \"TestGood\", \"IIOP_URL_Example\": \"iiop://localhost:2811\", \"CLEAN_UP_TIME_OF_DAY_HOURS\": \"0\", \"SOAP_URL_Example\": \"http://localhost:10000/WebScannerSOAP/servlet/rpcrouter\", \"mappedFields\": \"null\", \"OPEN_WCM_WINDOW\": \"/wps/myportal/wcmContent?WCM_GLOBAL_CONTEXT=\", \"SOAP_URL\": \"null\", \"DEFAULT_acls_FIELDINFO\": \"contentSearchable=false, fieldSearchable=true, returnable=true, sortable=false, supportsExactMatch=true, parametric=false, typeAhead=false\", \"SecurityResolverId\": \"com.ibm.lotus.search.plugins.provider.core.PortalSecurityResolverFactory\", \"CONTENT_SOURCE_TYPE_FEATURE_VAL_UPLOAD\": \"Upload\", \"CONTENT_SOURCE_TYPE_FEATURE_VAL_WEB\": \"Web\", \"OpenResultMode\": \"new\", \"SEARCH_SECURITY_MODE\": \"SECURITY_MODE_PRE_POST_FILTER\", \"collections\": [ { \"name\": \"JCRCollection1\", \"link\": \"/wps/mycontenthandler/!ut/p/searchadmin/service/Remote+PSE+service+EJB/collection/JCRCollection1\" }, { \"name\": \"Portal Search Collection\", \"link\": \"/wps/mycontenthandler/!ut/p/searchadmin/service/Remote+PSE+service+EJB/collection/Portal+Search+Collection\" } ] } Again, do note that the end of the list shows two collections, and the URLs that can be used to gather more information regarding those collections. http://localhost:10039/wps/mycontenthandler/!ut/p/searchadmin/service/Remote+PSE+service+EJB/collection/JCRCollection1 { \"location\": \"/opt/HCL/AppServer/profiles/prs_profile/SearchCollections/JCRCollection1\", \"IndexTitleKey\": \"JCRCollection1\", \"IndexNameKey\": \"JCRCollection1\", \"IndexLanguageKey\": \"en_US\", \"location\": \"/opt/HCL/AppServer/profiles/prs_profile/SearchCollections/JCRCollection1\", \"CollectionStatus\": \"true\", \"IndexDescriptionKey\": \"JCRCollection1\", \"DictionaryAnalysis\": \"true\", \"providers\": [ { \"name\": \"JCR Content\", \"link\": \"/wps/mycontenthandler/!ut/p/searchadmin/service/Remote+PSE+service+EJB/collection/JCRCollection1/provider/JCR+Content\" } ] }","title":"List"},{"location":"containerization/REST_APIs_remote_search/#delete","text":"If a resource to be deleted does not exist, then the returned JSON will return null (e.g. \" {} \"), which is the same as the returned JSON if the request is successful. http://localhost:10039/wps/mycontenthandler/!ut/p/searchadmin/service/{service name}/ http://localhost:10039/wps/mycontenthandler/!ut/p/searchadmin/service/{service name}/collection/{collection name} http://localhost:10039/wps/mycontenthandler/!ut/p/searchadmin/service/{service name}/collection/{collection name}/provider/{content provider name} In general, after a successful delete operation (HTTP 200), expect that the response JSON payload is null (e.g. \" {} \").","title":"Delete"},{"location":"containerization/REST_APIs_remote_search/#add","text":"http://localhost:10039/wps/mycontenthandler/!ut/p/searchadmin/service/{service name}/ http://localhost:10039/wps/mycontenthandler/!ut/p/searchadmin/service/{service name}/collection/{collection name} http://localhost:10039/wps/mycontenthandler/!ut/p/searchadmin/service/{service name}/collection/{collection name}/provider/{content provider name} If the resource to be added already exists, then an error message is returned like the following: Error 400: {resource} Already Exists where {resource} is one of \"service\", \"collection\" or \"content provider\" as is appropriate for the invalid request URL. The JSON returned as a result of an add REST call is exactly that, which is returned for the same GET call. Effectively, the returned JSON echoes the input add JSON request.","title":"Add"},{"location":"containerization/REST_APIs_remote_search/#starting-a-crawler","text":"Once the Service/Collection/Content Provider is configured, the crawlers will still not populate the indexes. To populate the indexes, the crawlers must be started. Crawlers can be started in one of two different ways: The first is via a scheduler, which automatically runs the crawler on a set schedule. Currently this schedule can only be configured in the search GUI. The second method is to immediately start the crawler either from the GUI or via a REST service. The REST service to start a crawler looks as follows: http://localhost:10039/wps/mycontenthandler/!ut/p/searchadmin/service/Remote+PSE+service+EJB/collection/Portal+Search+Collection/provider/WCMContentSource/crawl This URL looks like very much a POST command to add a content provider. The only difference is that the crawl command is located at the end of the URL. This command will start an immediate crawl on the content provider in the previous portion of the URL. The output of the command is an HTTP 201 return code, along with a JSON body that is exactly like this: { \"crawl\": \"started\" }","title":"Starting a Crawler"},{"location":"containerization/REST_APIs_remote_search/#use-of-api-on-main-virtual-portal-versus-all-other-virtual-portals","text":"On a Virtual Portal, the \u201c!ut/p/digest\u201d portal of the URL must be included as the contenthandler cannot issue the redirect when using the URL format without the portion mentioned. As such, referring to the example URLs above, the \u201c!ut/p/digest\u201d portal of the URL is NOT included. This implies that this URL is issued in the \"main\" VP of the DX Portal. A 302 redirect will take place, and the \u201c!ut/p/digest\u201d will be inserted in the final URL. This portion of the URL can also be used for the VP URL request. Parent topic: Customizing your container deployment","title":"Use of API on Main Virtual Portal versus all other Virtual Portals"},{"location":"containerization/azure_aks/","text":"Deploy DX Container to Microsoft Azure Kubernetes Service (AKS) Learn how to deploy HCL Digital Experience (DX) 9.5 CF182 and later container release along with Ambassador to Kubernetes, as verified in Microsoft Azure Kubernetes Service (AKS). About this task Follow these steps to deploy HCL Digital Experience 9.5 CF182 and later container release along with Ambassador to Kubernetes, as verified in Microsoft Azure Kubernetes Service (AKS) . This deployment relies heavily on Kubernetes Operators for full functionality. If deploying HCL DX 9.5 Container Update CF191 and earlier, view the instructions to deploy using script commands instead of the dxctl tool as described below in this Help Center section. Note: Reference the latest HCL DX 9.5 Container Release and Update file list in the Docker deployment topic. Prerequisites Prior to using the procedure below, it is assumed that the HCL DX Administrator is generally experienced in using Kubernetes. Additionally, the DX Administrator must have the appropriate access to the target environment. If not, following are some preliminary steps that must be taken. Setup KUBECONFIG to refer to the target server. This ensures any kubectl commands executed locally affect the target environment. Example: Use kubectl get {pods, pv, storageclass} to get appropriate information from the artifacts running in the target Kubernetes environment. The following tools must be installed on a machine other than the Portal server: Docker Microsoft Azure CLI If deploying Digital Experience Container Update CF192 and later, the dxctl tool is used to install and configure the deployment Volume requirement: It requires an AccessMode of ReadWriteMany . It requires a minimum of 40 GB , with the default request set to 100 GB . RECLAIM POLICY = Retain Note: HCL Digital Experience is input-output (I/O) intensive and requires a high performing file system for optimization. Azure container registry (For tagging and pushing). Deploying HCL Digital Experience (DX) 9.5 CF192 and later version Follow these steps to deploy the HCL Digital Experience (DX) 9.5 CF192 and later container release to the Microsoft Azure AKS platform: Download the HCL Digital Experience Container Update CF192 and later release container product and extract it to your local file system. The file system can be on a local workstation or cloud platform. If deploying HCL DX 9.5 Container Update CF192 release, the image and package names are as follows: CF192-core.zip files: ``` HCL DX notices V9.5 CF192.txt - ``` dxclient_v1.2.0_20210305-1758.zip - ``` hcl-dx-ambassador-image-154.tar.gz - ``` hcl-dx-cloud-operator-image-v95_CF192_20210305-2309.tar.gz - ``` hcl-dx-cloud-scripts-v95_CF192_20210305-2309.zip - ``` hcl-dx-content-composer-image-v1.6.0_20210305-1756.tar.gz - ``` hcl-dx-core-image-v95_CF192_20210305-1758.tar.gz - ``` hcl-dx-digital-asset-management-operator-image-v95_CF192_20210305-1757.tar.gz - ``` hcl-dx-digital-asset-manager-image-v1.6.0_20210305-1802.tar.gz - ``` hcl-dx-experience-api-sample-ui-v0.2.0.20210305-1805.zip - ``` hcl-dx-image-processor-image-v1.6.0_20210305-1758.tar.gz - ``` hcl-dx-openldap-image-v1.0.0-master_20210305_1614986151.tar.gz - ``` hcl-dx-postgres-image-v1.6.0_20210305-1800.tar.gz - ``` hcl-dx-redis-image-5.0.1.tar.gz - ``` hcl-dx-remote-search-image-v95_CF192_20210305-1758.tar.gz - ``` hcl-dx-ringapi-image-v1.6.0_20210305-1802.tar.gz Log in to your Microsoft Azure AKS platform. For more information, refer to the Microsoft Azure documentation if the Microsoft Azure CLI needs to be installed. Example log in command: az login Example: Create a resource group in Microsoft Azure using the following command: az group create --name <resourceGroupName> --location <region> Example: Azure Console Example: For more information, refer to the Microsoft Azure documentation on Resource . Create a Microsoft Azure Container Registry (ACR) to push the HCL DX 9.5 CF192 and later container images to. Azure Console Example: Once the ACR gets created, log in using the following command: az acr login --name <containerRegistry> Example: For more information, refer to the Microsoft Azure documentation on Container Registry . Set up the NFS server. Provide the HCL DX 9.5 CF192 and later Docker image access to the volume mount created in order to copy the profile. There are various ways to do this, and NFS is one option. If NFS is used, here are the parameters that have been tested to work: rw Default. sync Default after NFS 1.0, means that the server does not reply until after the commit. insecure Requires requests originate on ports less than 1024. ** root_squash Map requests to the nobody user.** Hard Required because this means the system keeps trying to write until it works.** nfsvers=4.1 rsize=8388608 Avoids dropped packages, default 8192. wsize=8388608 Avoids dropped packages, default 8192 timeo=600 60 seconds. retrans=2 Number of retries after a time out. noresvport ** Tells the NFS client to use a new Transmission Control Protocol (TCP) source port when a network connection is reestablished. Doing this helps make sure that the EFS file system has uninterrupted availability after a network recovery event. Note: Those marked with (**) are critical and, in many cases, it is recommended to have the rsize and wsize set to 8388608. For more information, refer to the Microsoft Azure documentation on Storage . Configure the Microsoft Azure Kubernetes cluster. To configure kubectl to connect to your Kubernetes cluster, use the az aks get-credentials command. Example: az aks get-credentials --resource-group <resourcegroup> --name <clusterName> For more information, refer to the Microsoft Azure documentation on Cluster . DX-Container Image Management Change directory. Open a terminal window and change to the root directory of the extracted package. Docker load, tag and push by using the following commands: List Docker images docker images Docker load Load the containers into your Docker repository: docker load -i hcl-dx-core-image-v95_CF192_20210225-035822.tar.gz docker load -i hcl-dx-ambassador-image-154.tar.gz docker load -i hcl-dx-cloud-operator-image-v95_CF192_20210225-0546.tar.gz docker load -i hcl-dx-redis-image-5.0.1.tar.gz ACR details To tag and push the images to ACR, obtain login server details: az acr list --resource-group <resourceGroup> --query \"[].{acrLoginServer:loginServer}\" --output table Docker tag Tag your images using the tag command as shown in the examples below: docker tag SOURCE_IMAGE[:TAG] TARGET_IMAGE[:TAG] Example: docker tag hcl/dx/core:v95_CF192_20210225-035822 YOUR_CONTAINER.azurecr.io/hcl/dx/core:v95_CF192_20210225-035822 docker tag hcl/dx/cloud-operator:v95_CF192_20210225-0546-YOUR_CONTAINER.azurecr.io/hcl/dx/cloud-operator:v95_CF192_20210225-0546 docker tag hcl/dx/ambassador:YOUR_CONTAINER.azurecr.io/hcl/dx/ambassador:154 docker tag hcl/dx/redis:5.0.1 YOUR_CONTAINER.azurecr.io/hcl/dx/redis:5.0.1 Docker push Push the images to ACR using the following push command: docker push [OPTIONS] NAME[:TAG] Example commands: docker push YOUR_CONTAINER.azurecr.io/hcl/dx/core:v95_CF192_20210225-035822 docker push YOUR_CONTAINER.azurecr.io/hcl/dx/cloud-operator:v95_CF192_20210225-0546 docker push YOUR_CONTAINER.azurecr.io/hcl/dx/ambassador:154 docker push YOUR_CONTAINER.azurecr.io/hcl/dx/redis:5.0.1 Once the images are pushed, they can be listed using the commands below, or through use of the Microsoft Azure Kubernetes platform console. Command Example: az acr repository list --name <acrName> --output table Microsoft Azure AKS Console - DX 9.5 example: DX-Deployment using dxctl Create a StorageClass . Sample StorageClass YAML: ``` kind: StorageClass apiVersion: storage.k8s.io/v1 metadata: name: dx-deploy-stg provisioner: example.com/nfs ``` Create a Persistence Volume (pv) with AccessMode as ReadWriteMany and reclaim policy as Retain. Sample PV YAML: apiVersion: v1 kind: PersistentVolume metadata: name: blrcaps-core-3 spec: capacity: storage: 100Gi accessModes: - ReadWriteMany nfs: path: NFS_PATH server: NFS_SERVER persistentVolumeReclaimPolicy: Retain storageClassName: dx-deploy-stg mountOptions: - hard - nfsvers=4.1 - rsize=10485760 - wsize=10485760 - timeo=600 - retrans=2 - noresvport Note: Make sure the PV is available. If it is not, remove claimRef: from the YAML file. Log in to the cluster. Before using the dxctl tool to deploy, you must be logged in to the targeted cluster using the cloud platform specific CLI (Red Hat OpenShift, Amazon EKS, Microsoft Azure AKS, Google GKE). Example: az login Download dxctl . Instructions for downloading the latest packages are available here . Once downloaded and extracted, the hcl-dx-cloud-scripts directory structure is as follows: For more information about dxctl , visit the following documentation here . Configure and deploy using the HCL DX dcxtl tool. To start, change to the extracted files directory using the following command: cd hcl-dx-cloud-scripts Using DX Container Update CF192 and later, the directory structure appears as follows: Configure the dxctl properties for the DX 9.5 Container CF192 and later deployment. Copy one of the provided properties files to further modify for your deployment. The modified properties file can be used for the deployment and the same file must be used for further updates. Example: mkdir -p /home/$USER/deployments/ cp dxctl/properties/full-deployment.properties /home/$USER/deployments/myfirst_deployment.properties Then, update the dxctl properties file values. Sample values: dx.namespace: endgametest-jeet1 dx.image: dxen dx.tag: v95_CF192_20210225-035822_rohan_release_95_CF192_60374773 dx.storageclass:dx-deploy-stg dx.volume: jeet3 dx.volume.size:100 remote.search.enabled:false openldap.enabled:false api.enabled: false composer.enabled: false dam.enabled: false ingress.image:dx-build-output/common/ambassador ingress.tag:1.5.4 ingress.redis.image:redis ingress.redis.tag:5.0.1 dx.operator.image: dx-build-output/hcldx-cloud-operator/hcldx-cloud-operator dx.operator.tag: v95_CF192_20210225-0546_xxxxxxxxx_95_CF192 Important: With HCL DX 9.5 Container Update CF197 and later, dam.features in full-deployment properties is added for use in a future container update release, and should not be modified except with direct guidance from HCL Support. Note: With HCL DX 9.5 Container Update CF193 and later, persist.force.read in full-deployment properties is added to enable a read-only Postgres pod for Digital Asset Management. This enables a failover capability for the Postgres service supporting DAM. Another option to enable a read-only pod is to set the persist.minreplicas: option set to greater than 1. Example: Deploy using dxctl . Run the following command to deploy HCL DX 9.5 Container Update CF192 and later to Microsoft Azure AKS: ./mac/dxctl --deploy -p /home/$USER/deployments/myfirst_deployment.properties Example: Note: This set of steps result in a deployment being created. Validate the deployment. Make sure all the pods are \"Running\" and in \"Ready\" state on your Microsoft Azure AKS platform, as shown in the example below: Generate TLS Certificate Create a TLS certification to be used by the deployment. Prior to this step, create a self-signed certificate to enable HTTPS using the following command: openssl req -x509 -newkey rsa:4096 -keyout key.pem -out cert.pem -subj '/CN=ambassador-cert' -nodes Then, store the Certificate and Key in a Kubernetes Secret using the following command: kubectl create secret tls dx-tls-cert --cert=cert.pem --key=key.pem -n <YourNamespace> Afterward, access the HCL DX 9.5 CF192 and later container deployment. To do so, obtain the external IP from the container platform Load balancer to access the HCL DX 9.5 deployment, as shown in the example below: $ kubectl get all -n NAMESPACE Then run the next command: https://EXTERNAL_IP/wps/portal Note: It is required to ensure the Microsoft Azure AKS load balancer configured permits external access. Consult the Microsoft Azure documentation for Load Balancer setup and default configuration details . Update the HCL Digital Experience (DX) 9.5 Azure AKS deployment to later HCL DX 9.5 Container Update releases To update the deployment to later HCL DX 9.5 Container Update releases, follow these steps: Update the deployment properties file with new image values, and run the Update command. Note: If the properties file is not available, then execute the following command to generate one. ./win/dxctl --getproperties --dx.namespace <Your Namespace> Example: On Mac: ./mac/dxctl --update -p properties/myfirst_deployment.properties Example: On Windows: .\\win\\dxctl.exe --update -p properties\\myfirst_deployment.properties On Linux: ./linux/dxctl -\u2013update -p properties/myfirst_deployment.properties Additional considerations: For example, once the database is transferred, the DBTYPE must be updated so you can scale the instances higher. Additionally, once the database is transferred, the number of replicas could be increased. There are additional options to customize the deployment . Delete the HCL Digital Experience (DX) 9.5 CF192 and later release Azure AKS deployment To delete the deployment, follow one of two methods: Method 1: Remove the deployment but allow for redeployment with the same volumes using the following command: ./linux/dxctl --destroy -p properties/myfirst_deployment.properties Method 2: Remove the entire namespace/project using the following command: ./linux/dxctl --destroy -p properties/myfirst_deployment.properties -all true Example: If some resources like services are still not deleted, run the following command: kubectl patch services $(kubectl get services -n $NAMESPACE | grep -v \"NAME\" |awk '{print $1}') -p '{\"metadata\":{\"finalizers\":null}}' -n $NAMESPACE Deploying HCL Digital Experience (DX) 9.5 CF191 and earlier version Follow these steps to deploy the HCL Digital Experience (DX) 9.5 CF191 and earlier container version to the Microsoft Azure AKS platform: Download and extract the contents of the HCL DX 9.5 CF182 package to the local file system. In Microsoft Azure Kubernetes Service (AKS), load, tag, and push the HCL Digital Experience images into your MS Azure Container Registries. Note: In Microsoft Azure, when using AKS a single Container Registry, or multiple Container Registries may be used. See the Microsoft Azure Container Registry documentation for additional information about this topic. In this example, 10 Container Registries are created: As an alternative, DX Administrators can use a single or fewer registries and create 'Repositories' within. In this example, a Container Registry named azambassador with a repository 'ambassador' is shown: Administrators can tag and push another image into this Container Registry to get a second repository. In the following example, the Ambassador Redis image is added: The HCL DX 9.5 Container deployment does not assume 1, or many registries are defined, and either definition setup works. In the following example, the HCL DX 9.5 Redis 5.0.1 image is added to the azambassador Container Registry. This example shows loading the HCL DX 9.5 CF181 and earlier container into a local repository, tagging it and pushing it to the azuredxen Container Registry in the dxen \u2018Repository\u2019. Install the HCL Digital Experience (DX) 9.5 CF182 and later core images Load the HCL DX 9.5 CF182 and later images to your deployment. The following example uses the CF183 version in the load command: Docker load -I hcl-dx-core-image-v95_CF183_20200819-1159.tar.gz Docker tag and docker push to the Azure environment: Once complete, the image is viewable in the Microsoft Azure repository: Reminder : Consult the HCL Digital Experience 9.5 Deployment \u2013 Docker topic for the latest list of HCL DX 9.5 container files that are available. HCL DX 9.5 Container Update CF183 files are used in these examples: CF183-core.zip files HCL DX notices V9.5 CF183.txt hcl-dx-ambassador-image-154.tar.gz hcl-dx-cloud-operator-image-v95_CF183_20200818-1852.tar.gz hcl-dx-cloud-scripts-v95_CF183_20200818-1852.zip hcl-dx-core-image-v95_CF183_20200818-1342.tar.gz hcl-dx-redis-image-5.0.1.tar.gz CF183-other.zip files HCL DX notices V9.5 CF183.txt hcl-dx-content-composer-image-v1.2.0_20200818-1343.tar.gz hcl-dx-digital-asset-management-operator-image-v95_CF183_20200818-1344.tar.gz hcl-dx-digital-asset-manager-image-v1.2.0_20200818-1346.tar.gz hcl-dx-image-processor-image-v1.2.0_20200818-1345.tar.gz hcl-dx-openldap-image-v1.0.0-master_20200818_1597758965.tar.gz hcl-dx-postgres-image-v1.2.0_20200818-1349.tar.gz hcl-dx-remote-search-image-v95_CF183_20200818-1342.tar.gz hcl-dx-ringapi-image-v1.2.0_20200818-1351.tar.gz To install HCL Digital Experience 9.5 core software to Microsoft Azure AKS, the following images are required: hcl-dx-cloud-operator-image-v95 hcl-dx-core-image-v95 hcl-dx-ambassador-image hcl-dx-redis-image Images included in the \u2018other\u2019 package are optional and used to support use of OpenLDAP, Remote Search, the Experience API, Content Composer, and Digital Asset Management components and services. See examples that show how to load HCL DX 9.5 images to MS Azure below. In the following example, the items are loaded into the azuredxen Content Registry and multiple repositories are created. Images are tagged with dx-183 reflecting the HCL DX 9.5 Container Update CF183 version images used in this deployment. At this stage, the ./deploy/operator.yaml needs to be properly updated and the operator, and Redis image details need to be provided: First, replace the line: From: \u2018image: REPOSITORY_NAME /hcldx-cloud-operator:9.5.next\u2019 To: Add the proper value for the deployment, as in the following example: \u2018image: azuredxen.azurecr.io/hcldx-cloud-operator:v95_CF183_20200819-1711\u2019 Next, replace the values: \"REDIS_REPO\",\"REDIS_IMG_ENV\",\u201cREDIS_TAG_ENV\u201d with proper values. See the following example: Reviewing the Azure dashboard, administrators can see the following for redis: Deploy the Custom Resource Definition using the scripts/deployCrd.sh file. See the following example: Important : Ensure there is an available persistent volume for the deployment or a self-provisioning storage class. The HCL DX Help Center topic ( Sample Storage Class and Volume for HCL Digital Experience 9.5 Container Deployments ) can be referenced for related guidance. In this example, a storage class named dx-deploy-stg and a volume dxdeployhave been created: Run the deployment scripts as follows: ./scripts/deployDx.sh az-demo 1 azuredxen.azurecr.io dxen v95_CF183_20200819-1159 dxeploy dx-deploy-stg derby ambassador 154 NAMESPACE - the project or the namespace to create or use for deployment. REPLICAS - the number of initial instances for the deployment. REPOSITORY - your local repository, the repository used by Kubernetes. IMAGENAME - the name of the dxCore image, as added to the repository above. IMAGETAG - the tag for the target image as added to the repository above. VOLUMENAME - the volume to be used by the deployment for persistence, this must use AccessMode ReadWriteMany . STORAGECLASS - the storage class name used to create the persistent volume. DBTYPE - the database type. By default, and initially, this is Derby. HCL DX 9.5 uses Apache Derby, Oracle Database, IBM DB2, or Microsoft SQL Server. Acceptable values are derby , oracle , db2 , or msSql . INGRESSIMAGE - The image name to use for Ambassador. INGRESSTAG - The image tag to use for Ambassador. The command output shows the values as they align with the deployment, and the result of each step. DX Administrators can use \u2018kubectl get pods -n az-emo\u2019 to check the pods as they are starting. See the following example: While waiting for the pods to start up DX Administrators must create a tls secret for ambassador as follows: kubectl create secret tls dx-tls-cert --cert=my-cert.pem --key=my-key.pem -n aws-mynamespace In this example, an existing key and certification created using OpenSSL was used. Using SSL, administrators can create a private key: 'openssl genrsa -out my-key.pem 2048' Using OpenSSL, administrators can create a certificate signed by the private key: 'openssl req -x509 -key my-key.pem -out my-cert.pem -days 365 -subj '/CN=my-cert' At this stage, the deployment writes out the wp_profile into the persistent volume, and configure HCL DX 9.5 a minimum default configuration. See the HCL DX 9.5 Container Requirements and Customization topics for additional information. Once the HCL DX 9.5 dx-deployment-0 pod is running, administrators can access the HCL DX 9.5 deployment by obtaining the ambassador service details. Command examples to obtain this information: \u2018kubectl get svc -n az-demo\u2019 or \u2018kubectl get svc ambassador -n az-demo\u2019 Using the external IP address obtained via the kubectl get command ( https://external-ip/wps/portal ), select the resulting URL obtained to access your HCL DX 9.5 deployment. Note: It is required to ensure the MS Azure AKS load balancer configured permits external access. For more information, refer to the MS Azure documentation for Load Balancer setup for the default configuration details. (Optional) Deploy the OpenLDAP, Experience API, Content Composer, and Digital Asset Management components to Microsoft AKS Create a config map with the same name as the DX statefulset used to deploy the HCL DX 9.5 CF182 and later Core image software. By default, the DX statefulset is dx-deployment, as shown in this example: kubectl create configmap dx-deployment -n az-demo Once created, populate it with the following data: ``` data: dx.deploy.openldap.enabled: 'true' dx.deploy.openldap.tag: dx-183 dx.deploy.openldap.image: dx-openldap dx.deploy.experienceapi.enabled: 'true' dx.deploy.experienceapi.tag: dx-183 dx.deploy.experienceapi.image: ring-api dx.deploy.contentui.enabled: 'true' dx.deploy.contentui.tag: dx-183 dx.deploy.contentui.image: content-ui dx.deploy.dam.enabled: 'true' dx.deploy.dam.volume: releaseml dx.deploy.dam.storageclass: dx-deploy-stg dx.deploy.dam.persistence.tag: dx-183 dx.deploy.dam.persistence.image: persist dx.deploy.dam.imgprocessor.tag: dx-183 dx.deploy.dam.imgprocessor.image: image-processor dx.deploy.dam.tag: dx-183 dx.deploy.dam.image: dam dx.deploy.dam.operator.tag: dx-183 dx.deploy.dam.operator.image: hcl-dam-operator dx.deploy.host.override: \u201cfalse\u201d ``` Administrators can also create the config map in a YAML file and deploy it with the following instructions (example): kubectl create -f my_config_map.yaml -n az-demo . After creating the config map, the HCL DX 9.5 CF182 and later deployment goes into \u2018 init\u2019 mode, and restart a couple of times after the new options are configured. Administrators can check the status via the command line using the command (example) kubectl get pods -n az-demo : As an alternative approach, administrators can check the status of the deployment progress through the MS Azure AKS dashboard: In this deployment of HCL DX 9.5 core and optional images, the DX core image is the last container to start successfully. Note that it restarts twice. Once restarts are complete, administrators can confirm the deployment and configuration of the DX core and OpenLDAP, Experience API, Content Composer, and Digital Asset Management images as follows: OpenLDAP image deployment validation: Navigate to Practitioner Studio > Administration > Security > Users and Groups , and search for all available groups: The group ldap_test_users should appear in this listing. To validate the Content Composer and Experience API image deployments, navigate to Practitioner Studio > Web Content > Content Composer : 3. To validate the Digital Asset Management and Experience API image deployments, navigate to **Practitioner Studio** \\> **Digital Assets**: ![](../images/containerization_aks_dam_validation.png \"DAM validation\") 4. To validate access to the Experience API, administrators and developers should be able to access the Experience API at the following URL: ``` https://external-ip/dx/api/core/v1/explorer/ ``` See the following section for additional information: - [Install Experience API, Content Composer, and Digital Asset Management](install_config_cc_dam.md) Update the HCL Digital Experience (DX) 9.5 Azure AKS deployment To update the deployment to later HCL DX 9.5 Container Update releases, follow these steps: Note: If using HCL DX 9.5 Container Update CF192 and later, the dxctl tool can be used to Update the deployment. The dxctl tool does not deploy or update the DxDeployment custom resource definition. Prior to running an Update process, administrators should check the DxDeployment custom resource definition ( hcl-dx-cloud-scripts/deploy/crds/git.cwp.pnp-hcl.com_dxdeployments_crd.yaml ) for changes and update accordingly: Kubernetes command: kubectl delete crd dxdeployments.git.cwp.pnp-hcl.com CAUTION: Since crd is a cluster-wide resource, the use of kubectl delete crd dxdeployments.git.cwp.pnp-hcl.com causes a service outage for all the dx-deployment across the cluster. Kubernetes command: kubectl create -f deploy/crds/git.cwp.pnp-hcl.com_dxdeployments_crd.yaml To update the deployment, run the updateDx.sh script with updated values: ./scripts/updateDx.sh NAMESPACE REPLICAS REPOSITORY IMAGENAME IMAGETAG VOLUMENAME STORAGECLASS DBTYPE INGRESSIMAGE INGRESSTAG NAMESPACE - the project or the namespace to create or use for deployment. REPLICAS - the number of initial instances for the deployment. REPOSITORY - your local repository, the repository used by Kubernetes. IMAGENAME - the name of the dxCore image, as added to the repository above. IMAGETAG - the tag for the target image as added to the repository above. VOLUMENAME - the volume to be used by the deployment for persistence, this must use AccessMode ReadWriteMany . STORAGECLASS - the storage class name used to create the persistent volume. DBTYPE - the database type. By default, and initially, this is Derby. HCL DX 9.5 uses Apache Derby, Oracle Database, IBM DB2, or Microsoft SQL Server. Acceptable values are derby , oracle , db2 , or msSql . INGRESSIMAGE - The image name to use for Ambassador (Native K8s). INGRESSTAG - The image tag to use for Ambassador (Native K8s). For example: ./scripts/UpdateDx.sh az-demo 1 azuredxen.azurecr.io dxen v95_CF183_20200819-1159 dxeploy dx-deploy-stg derby ambassador 154 Once the database is transferred, the DBTYPE needs to be updated so you can scale the instances higher. Additionally, once the database is transferred, the number of replicas could be increased. See Customizing your Container deployment for more information on customizing your deployment. Delete the HCL Digital Experience (DX) 9.5 Azure AKS deployment Removing the entire deployment requires several steps, this is by design. To remove the deployment in a specific namespace, run the removeDx.sh script: ./scripts/removeDx.sh **NAMESPACE** NAMESPACE - the project or the namespace created or used for deployment. To remove a namespace, use any of the following commands: Kubernetes command: 'kubectl delete -f dxNameSpace_**NAMESPACE**.yaml' where NAMESPACE is the namespace to be removed The persistent volume associated to the deployment needs to be cleaned up by your Administrator. To reuse a persistent volume, see the following steps: Open the persistent volume in a visual editor (vi) using the Kubernetes command: kubectl edit pv <pv_name> Remove the claimRef section: claimRef: apiVersion: v1 kind: PersistentVolumeClaim name: dx-deploy-pvc namespace: az-demo resourceVersion: \"488931120\" uid: ebd58361-0e2a-11ea-b02e-02f8fe687954 Ensure you get the 'persistentvolume/<pv_name> edited' message. You may need to manually remove any data remaining from the previous deployment. Parent topic: HCL Digital Experience 9.5 Container Deployment","title":"Deploy DX Container to Microsoft Azure Kubernetes Service \\(AKS\\)"},{"location":"containerization/azure_aks/#deploy-dx-container-to-microsoft-azure-kubernetes-service-aks","text":"Learn how to deploy HCL Digital Experience (DX) 9.5 CF182 and later container release along with Ambassador to Kubernetes, as verified in Microsoft Azure Kubernetes Service (AKS).","title":"Deploy DX Container to Microsoft Azure Kubernetes Service (AKS)"},{"location":"containerization/azure_aks/#about-this-task","text":"Follow these steps to deploy HCL Digital Experience 9.5 CF182 and later container release along with Ambassador to Kubernetes, as verified in Microsoft Azure Kubernetes Service (AKS) . This deployment relies heavily on Kubernetes Operators for full functionality. If deploying HCL DX 9.5 Container Update CF191 and earlier, view the instructions to deploy using script commands instead of the dxctl tool as described below in this Help Center section. Note: Reference the latest HCL DX 9.5 Container Release and Update file list in the Docker deployment topic.","title":"About this task"},{"location":"containerization/azure_aks/#prerequisites","text":"Prior to using the procedure below, it is assumed that the HCL DX Administrator is generally experienced in using Kubernetes. Additionally, the DX Administrator must have the appropriate access to the target environment. If not, following are some preliminary steps that must be taken. Setup KUBECONFIG to refer to the target server. This ensures any kubectl commands executed locally affect the target environment. Example: Use kubectl get {pods, pv, storageclass} to get appropriate information from the artifacts running in the target Kubernetes environment. The following tools must be installed on a machine other than the Portal server: Docker Microsoft Azure CLI If deploying Digital Experience Container Update CF192 and later, the dxctl tool is used to install and configure the deployment Volume requirement: It requires an AccessMode of ReadWriteMany . It requires a minimum of 40 GB , with the default request set to 100 GB . RECLAIM POLICY = Retain Note: HCL Digital Experience is input-output (I/O) intensive and requires a high performing file system for optimization. Azure container registry (For tagging and pushing).","title":"Prerequisites"},{"location":"containerization/azure_aks/#deploying-hcl-digital-experience-dx-95-cf192-and-later-version","text":"Follow these steps to deploy the HCL Digital Experience (DX) 9.5 CF192 and later container release to the Microsoft Azure AKS platform: Download the HCL Digital Experience Container Update CF192 and later release container product and extract it to your local file system. The file system can be on a local workstation or cloud platform. If deploying HCL DX 9.5 Container Update CF192 release, the image and package names are as follows: CF192-core.zip files: ``` HCL DX notices V9.5 CF192.txt - ``` dxclient_v1.2.0_20210305-1758.zip - ``` hcl-dx-ambassador-image-154.tar.gz - ``` hcl-dx-cloud-operator-image-v95_CF192_20210305-2309.tar.gz - ``` hcl-dx-cloud-scripts-v95_CF192_20210305-2309.zip - ``` hcl-dx-content-composer-image-v1.6.0_20210305-1756.tar.gz - ``` hcl-dx-core-image-v95_CF192_20210305-1758.tar.gz - ``` hcl-dx-digital-asset-management-operator-image-v95_CF192_20210305-1757.tar.gz - ``` hcl-dx-digital-asset-manager-image-v1.6.0_20210305-1802.tar.gz - ``` hcl-dx-experience-api-sample-ui-v0.2.0.20210305-1805.zip - ``` hcl-dx-image-processor-image-v1.6.0_20210305-1758.tar.gz - ``` hcl-dx-openldap-image-v1.0.0-master_20210305_1614986151.tar.gz - ``` hcl-dx-postgres-image-v1.6.0_20210305-1800.tar.gz - ``` hcl-dx-redis-image-5.0.1.tar.gz - ``` hcl-dx-remote-search-image-v95_CF192_20210305-1758.tar.gz - ``` hcl-dx-ringapi-image-v1.6.0_20210305-1802.tar.gz Log in to your Microsoft Azure AKS platform. For more information, refer to the Microsoft Azure documentation if the Microsoft Azure CLI needs to be installed. Example log in command: az login Example: Create a resource group in Microsoft Azure using the following command: az group create --name <resourceGroupName> --location <region> Example: Azure Console Example: For more information, refer to the Microsoft Azure documentation on Resource . Create a Microsoft Azure Container Registry (ACR) to push the HCL DX 9.5 CF192 and later container images to. Azure Console Example: Once the ACR gets created, log in using the following command: az acr login --name <containerRegistry> Example: For more information, refer to the Microsoft Azure documentation on Container Registry . Set up the NFS server. Provide the HCL DX 9.5 CF192 and later Docker image access to the volume mount created in order to copy the profile. There are various ways to do this, and NFS is one option. If NFS is used, here are the parameters that have been tested to work: rw Default. sync Default after NFS 1.0, means that the server does not reply until after the commit. insecure Requires requests originate on ports less than 1024. ** root_squash Map requests to the nobody user.** Hard Required because this means the system keeps trying to write until it works.** nfsvers=4.1 rsize=8388608 Avoids dropped packages, default 8192. wsize=8388608 Avoids dropped packages, default 8192 timeo=600 60 seconds. retrans=2 Number of retries after a time out. noresvport ** Tells the NFS client to use a new Transmission Control Protocol (TCP) source port when a network connection is reestablished. Doing this helps make sure that the EFS file system has uninterrupted availability after a network recovery event. Note: Those marked with (**) are critical and, in many cases, it is recommended to have the rsize and wsize set to 8388608. For more information, refer to the Microsoft Azure documentation on Storage . Configure the Microsoft Azure Kubernetes cluster. To configure kubectl to connect to your Kubernetes cluster, use the az aks get-credentials command. Example: az aks get-credentials --resource-group <resourcegroup> --name <clusterName> For more information, refer to the Microsoft Azure documentation on Cluster .","title":"Deploying HCL Digital Experience (DX) 9.5 CF192 and later version"},{"location":"containerization/azure_aks/#dx-container-image-management","text":"Change directory. Open a terminal window and change to the root directory of the extracted package. Docker load, tag and push by using the following commands: List Docker images docker images Docker load Load the containers into your Docker repository: docker load -i hcl-dx-core-image-v95_CF192_20210225-035822.tar.gz docker load -i hcl-dx-ambassador-image-154.tar.gz docker load -i hcl-dx-cloud-operator-image-v95_CF192_20210225-0546.tar.gz docker load -i hcl-dx-redis-image-5.0.1.tar.gz ACR details To tag and push the images to ACR, obtain login server details: az acr list --resource-group <resourceGroup> --query \"[].{acrLoginServer:loginServer}\" --output table Docker tag Tag your images using the tag command as shown in the examples below: docker tag SOURCE_IMAGE[:TAG] TARGET_IMAGE[:TAG] Example: docker tag hcl/dx/core:v95_CF192_20210225-035822 YOUR_CONTAINER.azurecr.io/hcl/dx/core:v95_CF192_20210225-035822 docker tag hcl/dx/cloud-operator:v95_CF192_20210225-0546-YOUR_CONTAINER.azurecr.io/hcl/dx/cloud-operator:v95_CF192_20210225-0546 docker tag hcl/dx/ambassador:YOUR_CONTAINER.azurecr.io/hcl/dx/ambassador:154 docker tag hcl/dx/redis:5.0.1 YOUR_CONTAINER.azurecr.io/hcl/dx/redis:5.0.1 Docker push Push the images to ACR using the following push command: docker push [OPTIONS] NAME[:TAG] Example commands: docker push YOUR_CONTAINER.azurecr.io/hcl/dx/core:v95_CF192_20210225-035822 docker push YOUR_CONTAINER.azurecr.io/hcl/dx/cloud-operator:v95_CF192_20210225-0546 docker push YOUR_CONTAINER.azurecr.io/hcl/dx/ambassador:154 docker push YOUR_CONTAINER.azurecr.io/hcl/dx/redis:5.0.1 Once the images are pushed, they can be listed using the commands below, or through use of the Microsoft Azure Kubernetes platform console. Command Example: az acr repository list --name <acrName> --output table Microsoft Azure AKS Console - DX 9.5 example:","title":"DX-Container Image Management"},{"location":"containerization/azure_aks/#dx-deployment-using-dxctl","text":"Create a StorageClass . Sample StorageClass YAML: ``` kind: StorageClass apiVersion: storage.k8s.io/v1 metadata: name: dx-deploy-stg provisioner: example.com/nfs ``` Create a Persistence Volume (pv) with AccessMode as ReadWriteMany and reclaim policy as Retain. Sample PV YAML: apiVersion: v1 kind: PersistentVolume metadata: name: blrcaps-core-3 spec: capacity: storage: 100Gi accessModes: - ReadWriteMany nfs: path: NFS_PATH server: NFS_SERVER persistentVolumeReclaimPolicy: Retain storageClassName: dx-deploy-stg mountOptions: - hard - nfsvers=4.1 - rsize=10485760 - wsize=10485760 - timeo=600 - retrans=2 - noresvport Note: Make sure the PV is available. If it is not, remove claimRef: from the YAML file. Log in to the cluster. Before using the dxctl tool to deploy, you must be logged in to the targeted cluster using the cloud platform specific CLI (Red Hat OpenShift, Amazon EKS, Microsoft Azure AKS, Google GKE). Example: az login Download dxctl . Instructions for downloading the latest packages are available here . Once downloaded and extracted, the hcl-dx-cloud-scripts directory structure is as follows: For more information about dxctl , visit the following documentation here . Configure and deploy using the HCL DX dcxtl tool. To start, change to the extracted files directory using the following command: cd hcl-dx-cloud-scripts Using DX Container Update CF192 and later, the directory structure appears as follows: Configure the dxctl properties for the DX 9.5 Container CF192 and later deployment. Copy one of the provided properties files to further modify for your deployment. The modified properties file can be used for the deployment and the same file must be used for further updates. Example: mkdir -p /home/$USER/deployments/ cp dxctl/properties/full-deployment.properties /home/$USER/deployments/myfirst_deployment.properties Then, update the dxctl properties file values. Sample values: dx.namespace: endgametest-jeet1 dx.image: dxen dx.tag: v95_CF192_20210225-035822_rohan_release_95_CF192_60374773 dx.storageclass:dx-deploy-stg dx.volume: jeet3 dx.volume.size:100 remote.search.enabled:false openldap.enabled:false api.enabled: false composer.enabled: false dam.enabled: false ingress.image:dx-build-output/common/ambassador ingress.tag:1.5.4 ingress.redis.image:redis ingress.redis.tag:5.0.1 dx.operator.image: dx-build-output/hcldx-cloud-operator/hcldx-cloud-operator dx.operator.tag: v95_CF192_20210225-0546_xxxxxxxxx_95_CF192 Important: With HCL DX 9.5 Container Update CF197 and later, dam.features in full-deployment properties is added for use in a future container update release, and should not be modified except with direct guidance from HCL Support. Note: With HCL DX 9.5 Container Update CF193 and later, persist.force.read in full-deployment properties is added to enable a read-only Postgres pod for Digital Asset Management. This enables a failover capability for the Postgres service supporting DAM. Another option to enable a read-only pod is to set the persist.minreplicas: option set to greater than 1. Example: Deploy using dxctl . Run the following command to deploy HCL DX 9.5 Container Update CF192 and later to Microsoft Azure AKS: ./mac/dxctl --deploy -p /home/$USER/deployments/myfirst_deployment.properties Example: Note: This set of steps result in a deployment being created. Validate the deployment. Make sure all the pods are \"Running\" and in \"Ready\" state on your Microsoft Azure AKS platform, as shown in the example below:","title":"DX-Deployment using dxctl"},{"location":"containerization/azure_aks/#generate-tls-certificate","text":"Create a TLS certification to be used by the deployment. Prior to this step, create a self-signed certificate to enable HTTPS using the following command: openssl req -x509 -newkey rsa:4096 -keyout key.pem -out cert.pem -subj '/CN=ambassador-cert' -nodes Then, store the Certificate and Key in a Kubernetes Secret using the following command: kubectl create secret tls dx-tls-cert --cert=cert.pem --key=key.pem -n <YourNamespace> Afterward, access the HCL DX 9.5 CF192 and later container deployment. To do so, obtain the external IP from the container platform Load balancer to access the HCL DX 9.5 deployment, as shown in the example below: $ kubectl get all -n NAMESPACE Then run the next command: https://EXTERNAL_IP/wps/portal Note: It is required to ensure the Microsoft Azure AKS load balancer configured permits external access. Consult the Microsoft Azure documentation for Load Balancer setup and default configuration details .","title":"Generate TLS Certificate"},{"location":"containerization/azure_aks/#update-the-hcl-digital-experience-dx-95-azure-aks-deployment-to-later-hcl-dx-95-container-update-releases","text":"To update the deployment to later HCL DX 9.5 Container Update releases, follow these steps: Update the deployment properties file with new image values, and run the Update command. Note: If the properties file is not available, then execute the following command to generate one. ./win/dxctl --getproperties --dx.namespace <Your Namespace> Example: On Mac: ./mac/dxctl --update -p properties/myfirst_deployment.properties Example: On Windows: .\\win\\dxctl.exe --update -p properties\\myfirst_deployment.properties On Linux: ./linux/dxctl -\u2013update -p properties/myfirst_deployment.properties Additional considerations: For example, once the database is transferred, the DBTYPE must be updated so you can scale the instances higher. Additionally, once the database is transferred, the number of replicas could be increased. There are additional options to customize the deployment .","title":"Update the HCL Digital Experience (DX) 9.5 Azure AKS deployment to later HCL DX 9.5 Container Update releases"},{"location":"containerization/azure_aks/#delete-the-hcl-digital-experience-dx-95-cf192-and-later-release-azure-aks-deployment","text":"To delete the deployment, follow one of two methods: Method 1: Remove the deployment but allow for redeployment with the same volumes using the following command: ./linux/dxctl --destroy -p properties/myfirst_deployment.properties Method 2: Remove the entire namespace/project using the following command: ./linux/dxctl --destroy -p properties/myfirst_deployment.properties -all true Example: If some resources like services are still not deleted, run the following command: kubectl patch services $(kubectl get services -n $NAMESPACE | grep -v \"NAME\" |awk '{print $1}') -p '{\"metadata\":{\"finalizers\":null}}' -n $NAMESPACE","title":"Delete the HCL Digital Experience (DX) 9.5 CF192 and later release Azure AKS deployment"},{"location":"containerization/azure_aks/#deploying-hcl-digital-experience-dx-95-cf191-and-earlier-version","text":"Follow these steps to deploy the HCL Digital Experience (DX) 9.5 CF191 and earlier container version to the Microsoft Azure AKS platform: Download and extract the contents of the HCL DX 9.5 CF182 package to the local file system. In Microsoft Azure Kubernetes Service (AKS), load, tag, and push the HCL Digital Experience images into your MS Azure Container Registries. Note: In Microsoft Azure, when using AKS a single Container Registry, or multiple Container Registries may be used. See the Microsoft Azure Container Registry documentation for additional information about this topic. In this example, 10 Container Registries are created: As an alternative, DX Administrators can use a single or fewer registries and create 'Repositories' within. In this example, a Container Registry named azambassador with a repository 'ambassador' is shown: Administrators can tag and push another image into this Container Registry to get a second repository. In the following example, the Ambassador Redis image is added: The HCL DX 9.5 Container deployment does not assume 1, or many registries are defined, and either definition setup works. In the following example, the HCL DX 9.5 Redis 5.0.1 image is added to the azambassador Container Registry. This example shows loading the HCL DX 9.5 CF181 and earlier container into a local repository, tagging it and pushing it to the azuredxen Container Registry in the dxen \u2018Repository\u2019.","title":"Deploying HCL Digital Experience (DX) 9.5 CF191 and earlier version"},{"location":"containerization/azure_aks/#install-the-hcl-digital-experience-dx-95-cf182-and-later-core-images","text":"Load the HCL DX 9.5 CF182 and later images to your deployment. The following example uses the CF183 version in the load command: Docker load -I hcl-dx-core-image-v95_CF183_20200819-1159.tar.gz Docker tag and docker push to the Azure environment: Once complete, the image is viewable in the Microsoft Azure repository: Reminder : Consult the HCL Digital Experience 9.5 Deployment \u2013 Docker topic for the latest list of HCL DX 9.5 container files that are available. HCL DX 9.5 Container Update CF183 files are used in these examples: CF183-core.zip files HCL DX notices V9.5 CF183.txt hcl-dx-ambassador-image-154.tar.gz hcl-dx-cloud-operator-image-v95_CF183_20200818-1852.tar.gz hcl-dx-cloud-scripts-v95_CF183_20200818-1852.zip hcl-dx-core-image-v95_CF183_20200818-1342.tar.gz hcl-dx-redis-image-5.0.1.tar.gz CF183-other.zip files HCL DX notices V9.5 CF183.txt hcl-dx-content-composer-image-v1.2.0_20200818-1343.tar.gz hcl-dx-digital-asset-management-operator-image-v95_CF183_20200818-1344.tar.gz hcl-dx-digital-asset-manager-image-v1.2.0_20200818-1346.tar.gz hcl-dx-image-processor-image-v1.2.0_20200818-1345.tar.gz hcl-dx-openldap-image-v1.0.0-master_20200818_1597758965.tar.gz hcl-dx-postgres-image-v1.2.0_20200818-1349.tar.gz hcl-dx-remote-search-image-v95_CF183_20200818-1342.tar.gz hcl-dx-ringapi-image-v1.2.0_20200818-1351.tar.gz To install HCL Digital Experience 9.5 core software to Microsoft Azure AKS, the following images are required: hcl-dx-cloud-operator-image-v95 hcl-dx-core-image-v95 hcl-dx-ambassador-image hcl-dx-redis-image Images included in the \u2018other\u2019 package are optional and used to support use of OpenLDAP, Remote Search, the Experience API, Content Composer, and Digital Asset Management components and services. See examples that show how to load HCL DX 9.5 images to MS Azure below. In the following example, the items are loaded into the azuredxen Content Registry and multiple repositories are created. Images are tagged with dx-183 reflecting the HCL DX 9.5 Container Update CF183 version images used in this deployment. At this stage, the ./deploy/operator.yaml needs to be properly updated and the operator, and Redis image details need to be provided: First, replace the line: From: \u2018image: REPOSITORY_NAME /hcldx-cloud-operator:9.5.next\u2019 To: Add the proper value for the deployment, as in the following example: \u2018image: azuredxen.azurecr.io/hcldx-cloud-operator:v95_CF183_20200819-1711\u2019 Next, replace the values: \"REDIS_REPO\",\"REDIS_IMG_ENV\",\u201cREDIS_TAG_ENV\u201d with proper values. See the following example: Reviewing the Azure dashboard, administrators can see the following for redis: Deploy the Custom Resource Definition using the scripts/deployCrd.sh file. See the following example: Important : Ensure there is an available persistent volume for the deployment or a self-provisioning storage class. The HCL DX Help Center topic ( Sample Storage Class and Volume for HCL Digital Experience 9.5 Container Deployments ) can be referenced for related guidance. In this example, a storage class named dx-deploy-stg and a volume dxdeployhave been created: Run the deployment scripts as follows: ./scripts/deployDx.sh az-demo 1 azuredxen.azurecr.io dxen v95_CF183_20200819-1159 dxeploy dx-deploy-stg derby ambassador 154 NAMESPACE - the project or the namespace to create or use for deployment. REPLICAS - the number of initial instances for the deployment. REPOSITORY - your local repository, the repository used by Kubernetes. IMAGENAME - the name of the dxCore image, as added to the repository above. IMAGETAG - the tag for the target image as added to the repository above. VOLUMENAME - the volume to be used by the deployment for persistence, this must use AccessMode ReadWriteMany . STORAGECLASS - the storage class name used to create the persistent volume. DBTYPE - the database type. By default, and initially, this is Derby. HCL DX 9.5 uses Apache Derby, Oracle Database, IBM DB2, or Microsoft SQL Server. Acceptable values are derby , oracle , db2 , or msSql . INGRESSIMAGE - The image name to use for Ambassador. INGRESSTAG - The image tag to use for Ambassador. The command output shows the values as they align with the deployment, and the result of each step. DX Administrators can use \u2018kubectl get pods -n az-emo\u2019 to check the pods as they are starting. See the following example: While waiting for the pods to start up DX Administrators must create a tls secret for ambassador as follows: kubectl create secret tls dx-tls-cert --cert=my-cert.pem --key=my-key.pem -n aws-mynamespace In this example, an existing key and certification created using OpenSSL was used. Using SSL, administrators can create a private key: 'openssl genrsa -out my-key.pem 2048' Using OpenSSL, administrators can create a certificate signed by the private key: 'openssl req -x509 -key my-key.pem -out my-cert.pem -days 365 -subj '/CN=my-cert' At this stage, the deployment writes out the wp_profile into the persistent volume, and configure HCL DX 9.5 a minimum default configuration. See the HCL DX 9.5 Container Requirements and Customization topics for additional information. Once the HCL DX 9.5 dx-deployment-0 pod is running, administrators can access the HCL DX 9.5 deployment by obtaining the ambassador service details. Command examples to obtain this information: \u2018kubectl get svc -n az-demo\u2019 or \u2018kubectl get svc ambassador -n az-demo\u2019 Using the external IP address obtained via the kubectl get command ( https://external-ip/wps/portal ), select the resulting URL obtained to access your HCL DX 9.5 deployment. Note: It is required to ensure the MS Azure AKS load balancer configured permits external access. For more information, refer to the MS Azure documentation for Load Balancer setup for the default configuration details.","title":"Install the HCL Digital Experience (DX) 9.5 CF182 and later core images"},{"location":"containerization/azure_aks/#optional-deploy-the-openldap-experience-api-content-composer-and-digital-asset-management-components-to-microsoft-aks","text":"Create a config map with the same name as the DX statefulset used to deploy the HCL DX 9.5 CF182 and later Core image software. By default, the DX statefulset is dx-deployment, as shown in this example: kubectl create configmap dx-deployment -n az-demo Once created, populate it with the following data: ``` data: dx.deploy.openldap.enabled: 'true' dx.deploy.openldap.tag: dx-183 dx.deploy.openldap.image: dx-openldap dx.deploy.experienceapi.enabled: 'true' dx.deploy.experienceapi.tag: dx-183 dx.deploy.experienceapi.image: ring-api dx.deploy.contentui.enabled: 'true' dx.deploy.contentui.tag: dx-183 dx.deploy.contentui.image: content-ui dx.deploy.dam.enabled: 'true' dx.deploy.dam.volume: releaseml dx.deploy.dam.storageclass: dx-deploy-stg dx.deploy.dam.persistence.tag: dx-183 dx.deploy.dam.persistence.image: persist dx.deploy.dam.imgprocessor.tag: dx-183 dx.deploy.dam.imgprocessor.image: image-processor dx.deploy.dam.tag: dx-183 dx.deploy.dam.image: dam dx.deploy.dam.operator.tag: dx-183 dx.deploy.dam.operator.image: hcl-dam-operator dx.deploy.host.override: \u201cfalse\u201d ``` Administrators can also create the config map in a YAML file and deploy it with the following instructions (example): kubectl create -f my_config_map.yaml -n az-demo . After creating the config map, the HCL DX 9.5 CF182 and later deployment goes into \u2018 init\u2019 mode, and restart a couple of times after the new options are configured. Administrators can check the status via the command line using the command (example) kubectl get pods -n az-demo : As an alternative approach, administrators can check the status of the deployment progress through the MS Azure AKS dashboard: In this deployment of HCL DX 9.5 core and optional images, the DX core image is the last container to start successfully. Note that it restarts twice. Once restarts are complete, administrators can confirm the deployment and configuration of the DX core and OpenLDAP, Experience API, Content Composer, and Digital Asset Management images as follows: OpenLDAP image deployment validation: Navigate to Practitioner Studio > Administration > Security > Users and Groups , and search for all available groups: The group ldap_test_users should appear in this listing. To validate the Content Composer and Experience API image deployments, navigate to Practitioner Studio > Web Content > Content Composer : 3. To validate the Digital Asset Management and Experience API image deployments, navigate to **Practitioner Studio** \\> **Digital Assets**: ![](../images/containerization_aks_dam_validation.png \"DAM validation\") 4. To validate access to the Experience API, administrators and developers should be able to access the Experience API at the following URL: ``` https://external-ip/dx/api/core/v1/explorer/ ``` See the following section for additional information: - [Install Experience API, Content Composer, and Digital Asset Management](install_config_cc_dam.md)","title":"(Optional) Deploy the OpenLDAP, Experience API, Content Composer, and Digital Asset Management components to Microsoft AKS"},{"location":"containerization/azure_aks/#update-the-hcl-digital-experience-dx-95-azure-aks-deployment","text":"To update the deployment to later HCL DX 9.5 Container Update releases, follow these steps: Note: If using HCL DX 9.5 Container Update CF192 and later, the dxctl tool can be used to Update the deployment. The dxctl tool does not deploy or update the DxDeployment custom resource definition. Prior to running an Update process, administrators should check the DxDeployment custom resource definition ( hcl-dx-cloud-scripts/deploy/crds/git.cwp.pnp-hcl.com_dxdeployments_crd.yaml ) for changes and update accordingly: Kubernetes command: kubectl delete crd dxdeployments.git.cwp.pnp-hcl.com CAUTION: Since crd is a cluster-wide resource, the use of kubectl delete crd dxdeployments.git.cwp.pnp-hcl.com causes a service outage for all the dx-deployment across the cluster. Kubernetes command: kubectl create -f deploy/crds/git.cwp.pnp-hcl.com_dxdeployments_crd.yaml To update the deployment, run the updateDx.sh script with updated values: ./scripts/updateDx.sh NAMESPACE REPLICAS REPOSITORY IMAGENAME IMAGETAG VOLUMENAME STORAGECLASS DBTYPE INGRESSIMAGE INGRESSTAG NAMESPACE - the project or the namespace to create or use for deployment. REPLICAS - the number of initial instances for the deployment. REPOSITORY - your local repository, the repository used by Kubernetes. IMAGENAME - the name of the dxCore image, as added to the repository above. IMAGETAG - the tag for the target image as added to the repository above. VOLUMENAME - the volume to be used by the deployment for persistence, this must use AccessMode ReadWriteMany . STORAGECLASS - the storage class name used to create the persistent volume. DBTYPE - the database type. By default, and initially, this is Derby. HCL DX 9.5 uses Apache Derby, Oracle Database, IBM DB2, or Microsoft SQL Server. Acceptable values are derby , oracle , db2 , or msSql . INGRESSIMAGE - The image name to use for Ambassador (Native K8s). INGRESSTAG - The image tag to use for Ambassador (Native K8s). For example: ./scripts/UpdateDx.sh az-demo 1 azuredxen.azurecr.io dxen v95_CF183_20200819-1159 dxeploy dx-deploy-stg derby ambassador 154 Once the database is transferred, the DBTYPE needs to be updated so you can scale the instances higher. Additionally, once the database is transferred, the number of replicas could be increased. See Customizing your Container deployment for more information on customizing your deployment.","title":"Update the HCL Digital Experience (DX) 9.5 Azure AKS deployment"},{"location":"containerization/azure_aks/#delete-the-hcl-digital-experience-dx-95-azure-aks-deployment","text":"Removing the entire deployment requires several steps, this is by design. To remove the deployment in a specific namespace, run the removeDx.sh script: ./scripts/removeDx.sh **NAMESPACE** NAMESPACE - the project or the namespace created or used for deployment. To remove a namespace, use any of the following commands: Kubernetes command: 'kubectl delete -f dxNameSpace_**NAMESPACE**.yaml' where NAMESPACE is the namespace to be removed The persistent volume associated to the deployment needs to be cleaned up by your Administrator. To reuse a persistent volume, see the following steps: Open the persistent volume in a visual editor (vi) using the Kubernetes command: kubectl edit pv <pv_name> Remove the claimRef section: claimRef: apiVersion: v1 kind: PersistentVolumeClaim name: dx-deploy-pvc namespace: az-demo resourceVersion: \"488931120\" uid: ebd58361-0e2a-11ea-b02e-02f8fe687954 Ensure you get the 'persistentvolume/<pv_name> edited' message. You may need to manually remove any data remaining from the previous deployment. Parent topic: HCL Digital Experience 9.5 Container Deployment","title":"Delete the HCL Digital Experience (DX) 9.5 Azure AKS deployment"},{"location":"containerization/basic_monitor_helm_deployment/","text":"Basic monitoring This topic describes options for monitoring an HCL Digital Experience 9.5 Kubernetes deployments installed using Helm. Monitoring Requirements Video: Understanding the Liveness and Readiness Probes for HCL DX 9.5 Container Helm Deployments To use the monitoring commands described below, the Kubernetes Metrics Server must be installed, configured and running. For information on how to do this, please see the Kubernetes documentation . Monitoring commands With the Metrics Server installed, standard kubectl top commands can be used to monitor Digital Experience 9.5 components or the nodes on which they are installed. Examples To get memory and CPU usage details for the pods in your DX deployment: kubectl top pod -n your-namespace -l release=your-release-name In the above example your-namespace is the namespace in which your HCL Digital Experience 9.5 deployment is installed and your-release-name is the Helm release name you used when installing. To get memory and CPU usage details for the current Kubernetes node: kubectl top node Parent topic: Troubleshooting your Helm deployment","title":"Basic monitoring"},{"location":"containerization/basic_monitor_helm_deployment/#basic-monitoring","text":"This topic describes options for monitoring an HCL Digital Experience 9.5 Kubernetes deployments installed using Helm.","title":"Basic monitoring"},{"location":"containerization/basic_monitor_helm_deployment/#monitoring","text":"Requirements Video: Understanding the Liveness and Readiness Probes for HCL DX 9.5 Container Helm Deployments To use the monitoring commands described below, the Kubernetes Metrics Server must be installed, configured and running. For information on how to do this, please see the Kubernetes documentation . Monitoring commands With the Metrics Server installed, standard kubectl top commands can be used to monitor Digital Experience 9.5 components or the nodes on which they are installed. Examples To get memory and CPU usage details for the pods in your DX deployment: kubectl top pod -n your-namespace -l release=your-release-name In the above example your-namespace is the namespace in which your HCL Digital Experience 9.5 deployment is installed and your-release-name is the Helm release name you used when installing. To get memory and CPU usage details for the current Kubernetes node: kubectl top node Parent topic: Troubleshooting your Helm deployment","title":"Monitoring"},{"location":"containerization/c_kubesupportstatement/","text":"Container platform support matrix View the latest Kubernetes and OpenShift platforms tested and supported for specific HCL Digital Experience 9.5 Container Update deployments. Attention: Beginning with HCL Digital Experience 9.5 Container Update CF200, HCL has discontinued releasing the HCL Digital Experience (DX) Operator-based deployments and will provide support only for Helm-based deployments . There will be no further updates or code fixes provided for the Operator-based deployments. HCL requires all customers to migrate to Helm-based deployments for their DX installations. HCL will work with our customers as they transition from Operator-based to Helm-based deployments. For more information on the migration process, see Migrating from Operator-based to Helm-based deployments . HCL encourages customers to remain up-to-date on the latest DX and Kubernetes releases. As a result, DX will provide all fixes on the latest release. Customers may be asked to upgrade to the latest DX release to assist with problem determination. General Kubernetes Support Policy: HCL DX 9.5 CF200 and later is architected to run on any Certified Kubernetes platform ( https://www.cncf.io/certification/software-conformance ), provided that, the Kubernetes platform is hosted on x86_64 hardware the Kubernetes platform is officially supported by Helm ( https://helm.sh/docs/topics/kubernetes_distros/ ). For the list of Kubernetes versions that are tested and supported by HCL, refer to the HCL DX supported hardware and software statements page. Internally, HCL tests DX against a range of Kubernetes platforms that is regularly reviewed and updated, with the intent of staying up-to-date as possible. We do not test with every single platform vendor, but aim to cover a representative sample of popular Kubernetes implementations. See the HCL DX supported hardware and software statements on the HCL Support Knowledge Base and the following table for additional details. From time-to-time, platform providers may release previews of upcoming Kubernetes versions. We will not provide support for those versions. If you encounter any issue on an unsupported or untested Kubernetes or Cloud Platform version, you may be asked to install a supported level. DX CF Releases Red Hat OpenShift Amazon EKS Azure AKS Google GKE CF201 OS 4.7 Kubernetes 1.20 EKS 1.19 AKS 1.20 GKE 1.21 CF200 OS 4.7 Kubernetes 1.20 EKS 1.19 AKS 1.20 GKE 1.21 CF199 OS 4.7 Kubernetes 1.20 EKS 1.19 AKS 1.20 GKE 1.21 CF198 OS 4.7 Kubernetes 1.20 EKS 1.19 AKS 1.19 AKS 1.20 GKE 1.20 CF197 OS 4.6 Kubernetes 1.19 OS 4.5 Kubernetes 1.18 EKS 1.19 AKS 1.19 GKE 1.20 CF196 OS 4.6 Kubernetes 1.19 OS 4.5 Kubernetes 1.18 EKS 1.19 AKS 1.19 GKE 1.18 CF195 OS 4.6 Kubernetes 1.19 OS 4.5 Kubernetes 1.18 EKS 1.19 AKS 1.19 GKE 1.18 CF194 OS 4.5 Kubernetes 1.18 OS 4.6 Kubernetes 1.19 EKS 1.19 AKS 1.19 GKE 1.18 CF193 OS 4.5 Kubernetes 1.18 OS 4.6 Kubernetes 1.19 EKS 1.19 AKS 1.19AKS 1.17.7 GKE 1.18 CF192 OS 4.4 Kubernetes 1.17 EKS 1.17EKS 1.18 AKS 1.17.7 AKS 1.18.4 GKE 1.16 GKE 1.17 GKE 1.18 CF191 OS 4.4 Kubernetes 1.17 EKS 1.17 AKS 1.17.7 GKE 1.16 CF19 OS 4.3 Kubernetes 1.16 EKS 1.17 AKS 1.17.7 GKE 1.16 CF184 OS 4.3 Kubernetes 1.16 EKS 1.17 AKS 1.17.7 GKE 1.16 DX CF Releases Red Hat OpenShift Amazon EKS CF201 OS 4.7 Kubernetes 1.20 (Standalone Linux + Clustered Linux) EKS 1.19 (Clustered Linux) CF200 OS 4.7 Kubernetes 1.20 (Standalone Linux + Clustered Linux) EKS 1.19 (Clustered Linux) CF199 OS 4.7 Kubernetes 1.20 (Standalone Linux + Clustered Linux) EKS 1.19 (Clustered Linux) CF198 OS 4.7 Kubernetes 1.20 OS 4.5 Kubernetes 1.18 NA CF197 OS 4.5 Kubernetes 1.18 NA CF196 OS 4.5 Kubernetes 1.18 NA CF195 OS 4.5 Kubernetes 1.18 NA CF194 OS 4.5 Kubernetes 1.18 NA CF193 OS 4.5 Kubernetes 1.18 NA CF192 OS 4.4 Kubernetes 1.17 NA CF191 OS 4.4 Kubernetes 1.17 NA CF19 OS 4.3 Kubernetes 1.16 NA CF184 OS 4.3 Kubernetes 1.16 NA Parent topic: Digital Experience on containerized platforms","title":"Container platform support matrix"},{"location":"containerization/c_kubesupportstatement/#container-platform-support-matrix","text":"View the latest Kubernetes and OpenShift platforms tested and supported for specific HCL Digital Experience 9.5 Container Update deployments. Attention: Beginning with HCL Digital Experience 9.5 Container Update CF200, HCL has discontinued releasing the HCL Digital Experience (DX) Operator-based deployments and will provide support only for Helm-based deployments . There will be no further updates or code fixes provided for the Operator-based deployments. HCL requires all customers to migrate to Helm-based deployments for their DX installations. HCL will work with our customers as they transition from Operator-based to Helm-based deployments. For more information on the migration process, see Migrating from Operator-based to Helm-based deployments . HCL encourages customers to remain up-to-date on the latest DX and Kubernetes releases. As a result, DX will provide all fixes on the latest release. Customers may be asked to upgrade to the latest DX release to assist with problem determination.","title":"Container platform support matrix"},{"location":"containerization/c_kubesupportstatement/#general-kubernetes-support-policy","text":"HCL DX 9.5 CF200 and later is architected to run on any Certified Kubernetes platform ( https://www.cncf.io/certification/software-conformance ), provided that, the Kubernetes platform is hosted on x86_64 hardware the Kubernetes platform is officially supported by Helm ( https://helm.sh/docs/topics/kubernetes_distros/ ). For the list of Kubernetes versions that are tested and supported by HCL, refer to the HCL DX supported hardware and software statements page. Internally, HCL tests DX against a range of Kubernetes platforms that is regularly reviewed and updated, with the intent of staying up-to-date as possible. We do not test with every single platform vendor, but aim to cover a representative sample of popular Kubernetes implementations. See the HCL DX supported hardware and software statements on the HCL Support Knowledge Base and the following table for additional details. From time-to-time, platform providers may release previews of upcoming Kubernetes versions. We will not provide support for those versions. If you encounter any issue on an unsupported or untested Kubernetes or Cloud Platform version, you may be asked to install a supported level. DX CF Releases Red Hat OpenShift Amazon EKS Azure AKS Google GKE CF201 OS 4.7 Kubernetes 1.20 EKS 1.19 AKS 1.20 GKE 1.21 CF200 OS 4.7 Kubernetes 1.20 EKS 1.19 AKS 1.20 GKE 1.21 CF199 OS 4.7 Kubernetes 1.20 EKS 1.19 AKS 1.20 GKE 1.21 CF198 OS 4.7 Kubernetes 1.20 EKS 1.19 AKS 1.19 AKS 1.20 GKE 1.20 CF197 OS 4.6 Kubernetes 1.19 OS 4.5 Kubernetes 1.18 EKS 1.19 AKS 1.19 GKE 1.20 CF196 OS 4.6 Kubernetes 1.19 OS 4.5 Kubernetes 1.18 EKS 1.19 AKS 1.19 GKE 1.18 CF195 OS 4.6 Kubernetes 1.19 OS 4.5 Kubernetes 1.18 EKS 1.19 AKS 1.19 GKE 1.18 CF194 OS 4.5 Kubernetes 1.18 OS 4.6 Kubernetes 1.19 EKS 1.19 AKS 1.19 GKE 1.18 CF193 OS 4.5 Kubernetes 1.18 OS 4.6 Kubernetes 1.19 EKS 1.19 AKS 1.19AKS 1.17.7 GKE 1.18 CF192 OS 4.4 Kubernetes 1.17 EKS 1.17EKS 1.18 AKS 1.17.7 AKS 1.18.4 GKE 1.16 GKE 1.17 GKE 1.18 CF191 OS 4.4 Kubernetes 1.17 EKS 1.17 AKS 1.17.7 GKE 1.16 CF19 OS 4.3 Kubernetes 1.16 EKS 1.17 AKS 1.17.7 GKE 1.16 CF184 OS 4.3 Kubernetes 1.16 EKS 1.17 AKS 1.17.7 GKE 1.16 DX CF Releases Red Hat OpenShift Amazon EKS CF201 OS 4.7 Kubernetes 1.20 (Standalone Linux + Clustered Linux) EKS 1.19 (Clustered Linux) CF200 OS 4.7 Kubernetes 1.20 (Standalone Linux + Clustered Linux) EKS 1.19 (Clustered Linux) CF199 OS 4.7 Kubernetes 1.20 (Standalone Linux + Clustered Linux) EKS 1.19 (Clustered Linux) CF198 OS 4.7 Kubernetes 1.20 OS 4.5 Kubernetes 1.18 NA CF197 OS 4.5 Kubernetes 1.18 NA CF196 OS 4.5 Kubernetes 1.18 NA CF195 OS 4.5 Kubernetes 1.18 NA CF194 OS 4.5 Kubernetes 1.18 NA CF193 OS 4.5 Kubernetes 1.18 NA CF192 OS 4.4 Kubernetes 1.17 NA CF191 OS 4.4 Kubernetes 1.17 NA CF19 OS 4.3 Kubernetes 1.16 NA CF184 OS 4.3 Kubernetes 1.16 NA Parent topic: Digital Experience on containerized platforms","title":"General Kubernetes Support Policy:"},{"location":"containerization/ci_cd/","text":"Digital Experience Application deployment This section outlines features and functionality delivered as part of continuous integration and continuous delivery for HCL Digital Experience. Deploying HCL DX 9.5 Container artifact updates with minimal operations downtime This topic provides guidance to update artifacts in HCL Digital Experience container deployments while minimizing operations downtime. Deploying Custom Code in OpenShift This section outlines deploying custom code to HCL Digital Experience in OpenShift. Container Staging This section describes how to move from an existing HCL Portal environment to a containerized Digital Experience environment. Deploy DX components using HCL DXClient and DXConnect HCL Digital Experience (DX) 9.5 CF19 and later releases include a DXClient toolset, and DXConnect servlet that provides developers and administrators with an approach to deploy changes or improvements to the DX platform, and partially automate the development and delivery process.","title":"Digital Experience Application deployment"},{"location":"containerization/ci_cd/#digital-experience-application-deployment","text":"This section outlines features and functionality delivered as part of continuous integration and continuous delivery for HCL Digital Experience. Deploying HCL DX 9.5 Container artifact updates with minimal operations downtime This topic provides guidance to update artifacts in HCL Digital Experience container deployments while minimizing operations downtime. Deploying Custom Code in OpenShift This section outlines deploying custom code to HCL Digital Experience in OpenShift. Container Staging This section describes how to move from an existing HCL Portal environment to a containerized Digital Experience environment. Deploy DX components using HCL DXClient and DXConnect HCL Digital Experience (DX) 9.5 CF19 and later releases include a DXClient toolset, and DXConnect servlet that provides developers and administrators with an approach to deploy changes or improvements to the DX platform, and partially automate the development and delivery process.","title":"Digital Experience Application deployment"},{"location":"containerization/configure_access_helm_logs/","text":"Configure and access logs in Helm This topic shows you how to configure logging in Helm, as well as how to access Kubernetes container logs. HCL Digital Experience logs are important for maintaining and troubleshooting both environments and custom applications. These logs frequently form part of the essential information requested by HCL Support to diagnose issues. In a Helm-based deployment of DX, logs are exposed as Kubernetes container logs which give a consistent mechanism for retrieving the logs of different components, as well as making them consumable by cluster-level logging solutions in Kubernetes. Configure logging In CF200, a new mechanism is introduced for configuring log settings at runtime (without pod restarts) in Helm-based DX deployments. Log levels and trace strings are set in your custom-values.yaml file and applied using a helm upgrade command. Under the covers, this sets values in a new <release-name>-global config map which are monitored by the various running DX containers. When the containers detect a change to the values pertinent to themselves, they update their log configurations accordingly (without restarting). At that point, the new log behavior is immediately reflected in their Kubernetes logs. Note: OpenLDAP, Ambassador, and Redis are not yet configurable using this feature. Setting the log configuration for a DX application You can set a desired log configuration for a DX application by specifying an appropriate log string in your Helm custom-values.yaml file. Place the log string in the level property for the specified application. These properties are found in the logging subsection of the incubator section. For example, to set the configuration for Content Composer, use the following property: incubator: logging: # Content Composer specific logging configuration contentComposer: level: \"api:server-v1:*=info\" You can see the string format in the following section. Once the property is set, run the helm upgrade command. Log configuration string format Log configuration strings (the values set in the level properties of the custom-values.yaml) use the following common format, where multiple trace settings for the same application are separated by commas: <component>:<pattern>=<log-level>,<component>:<pattern>=<log-level> component - represents a subsystem of the application and must be from a limited list per application (see the following examples). pattern - describes the specific component area to log (for example, a Java package). log-level - defines the granularity at which logging is enabled (see later for permitted levels). The exact format of pattern depends on the configured application. The appropriate values are provided by HCL Support, if you are asked to enable tracing as part of a case. Some examples of log configuration strings for different DX applications are given as follows: DX Core example : wp_profile:com.hcl.App=info,wp_profile:com.hcl.util.Data=finest Digital Asset Management example : api:server-v1:dist=info,worker:server-v1:dist=info,api:server-v1:dist:server=debug Supported application and component names Following are the supported application and component names, where the application names are the subsections under logging in the custom-values.yaml: Application Component names core wp_profile , cw_profile contentComposer api designStudio api digitalAssetManagement api , worker imageProcessor api persistenceConnectionPool pgpool persistenceNode psql , repmgr remoteSearch prs_profile ringApi api runtimeController controller Supported log levels For most applications, three log levels are supported: debug , info , and error . Core and Remote Search, where all existing WebSphere Application Server trace levels are supported, such as all or finest . Accessing Kubernetes container logs Container logs for DX applications can be accessed individually or collectively, as described in the following subsections. Logs for DX Core and Remote Search are accessed differently from other applications, as those pods have multiple containers to provide access to additional logs. Accessing DX Core logs To access a Core application log, use the command: kubectl logs -n <namespace> <core-pod-name> <sidecar-container-name> For example: kubectl logs -n dxns dx-deployment-core-0 system-err-log This retrieves the log for a single sidecar container, which corresponds to a single Core log file. Note: The additional logging enabled for Core goes to trace.log. To configure trace.log for sidecar logging, see Configure Core sidecar logging . By default, two sidecar containers are launched with Core: system-out-log - Exposes the WebSphere_Portal/SystemOut.log file. system-err-log - Exposes the WebSphere_Portal/SystemErr.log file. For information on configuring additional Core sidecar log containers, please see Configure Core sidecar logging . Accessing Remote Search logs To access a Remote Search application log, use the command: kubectl logs -n <namespace> <remote-search-pod-name> <sidecar-container-name> For example: kubectl logs -n dxns dx-deployment-remote-search-0 system-err-log This retrieves the log for a single sidecar container, which corresponds to a single Remote Search log file. Note: The additional logging enabled for Remote Search goes to trace.log. To configure trace.log for sidecar logging, see Configure Remote Search sidecar logging . By default, two sidecar containers are launched with Remote Search: system-out-log - Exposes the WebSphere_Portal/SystemOut.log file. system-err-log - Exposes the WebSphere_Portal/SystemErr.log file. For information on configuring additional Remote Search sidecar log containers, please see Configure Remote Search sidecar logging . Accessing logs for other applications Applications other than Core and Remote Search do not have logging sidecar containers and only provide a single log per pod, which can typically be obtained using the command: kubectl logs -n <namespace> <pod-name> (omitting a container name), for example: kubectl logs -n dxns dx-deployment-digital-asset-management-0 This is not the case for Persistence Node pods, which have non-logging sidecar containers (for metrics gathering). For these pods, you must append the main container name ( persistence-node ) when accessing the log, for example: kubectl logs -n dxns dx-deployment-persistence-node-0 persistence-node Accessing all application logs simultaneously All application logs from DX pods in a deployment can be combined into a single output using the command: kubectl logs -n <namespace> -l release=<release-name> --tail=-1 --all-containers where: namespace - is the namespace in which your HCL Digital Experience deployment is installed. release-name - is the Helm release name you used when installing. On UNIX-based operating systems, the output can be directed to a file for convenience by appending > some-file-name to the command. Default log output The log output for a DX deployment is set to a non-verbose configuration by default. Application name Default log settings Core *=info Content Composer api:server-v1:*=info Design Studio api:server-v1:*=info Digital Asset Management api:server-v1:*=info,worker:server-v1:*=info Image Processor api:server-v1:*=info Persistence Connection Pool pgpool:=info Persistence Node psql:=info,repmgr:=info Remote Search *=info Ring API api:server-v1:*=info Runtime Controller controller:.*=INFO,controller:com.hcl.dx.*=INFO All applications send their log output directly to stdout and stderr of the corresponding container that they are running in. Besides that, the following applications also write their log output into a file that is available in the file system of the containers: Application name Log location Core /opt/HCL/wp_profile/logs/WebSphere_Portal and /opt/HCL/AppServer/profiles/cw_profile/logs/server1 Remote Search /opt/HCL/AppServer/profiles/prs_profile/logs/server1 Persistence Node /var/lib/pgsql/11/data/log and /var/lib/pgsql/11/data/dx/repmgr/log Note: The Core and Remote Search have the following default settings for their log output files and that needs to be considered when sizing their persistent volumes: Output file Size per file Files kept SystemOut.log 5MB 3 SystemErr.log 5MB 3 trace.log 20MB 3 The amount of logs that are stored per container in running the Pods depends on the configuration of your Kubernetes Cluster. Refer to the documentation of your cloud provider for further information. Note that for all applications that do not write their logs separately to a file, the only source of historical log data is the Kubernetes logging. We encourage the customers to process the logging of their Kubernetes Cluster in a separate logging solution of their choice. Parent topic: Troubleshooting your Helm deployment","title":"Configure and access logs in Helm"},{"location":"containerization/configure_access_helm_logs/#configure-and-access-logs-in-helm","text":"This topic shows you how to configure logging in Helm, as well as how to access Kubernetes container logs. HCL Digital Experience logs are important for maintaining and troubleshooting both environments and custom applications. These logs frequently form part of the essential information requested by HCL Support to diagnose issues. In a Helm-based deployment of DX, logs are exposed as Kubernetes container logs which give a consistent mechanism for retrieving the logs of different components, as well as making them consumable by cluster-level logging solutions in Kubernetes.","title":"Configure and access logs in Helm"},{"location":"containerization/configure_access_helm_logs/#configure-logging","text":"In CF200, a new mechanism is introduced for configuring log settings at runtime (without pod restarts) in Helm-based DX deployments. Log levels and trace strings are set in your custom-values.yaml file and applied using a helm upgrade command. Under the covers, this sets values in a new <release-name>-global config map which are monitored by the various running DX containers. When the containers detect a change to the values pertinent to themselves, they update their log configurations accordingly (without restarting). At that point, the new log behavior is immediately reflected in their Kubernetes logs. Note: OpenLDAP, Ambassador, and Redis are not yet configurable using this feature.","title":"Configure logging"},{"location":"containerization/configure_access_helm_logs/#setting-the-log-configuration-for-a-dx-application","text":"You can set a desired log configuration for a DX application by specifying an appropriate log string in your Helm custom-values.yaml file. Place the log string in the level property for the specified application. These properties are found in the logging subsection of the incubator section. For example, to set the configuration for Content Composer, use the following property: incubator: logging: # Content Composer specific logging configuration contentComposer: level: \"api:server-v1:*=info\" You can see the string format in the following section. Once the property is set, run the helm upgrade command.","title":"Setting the log configuration for a DX application"},{"location":"containerization/configure_access_helm_logs/#log-configuration-string-format","text":"Log configuration strings (the values set in the level properties of the custom-values.yaml) use the following common format, where multiple trace settings for the same application are separated by commas: <component>:<pattern>=<log-level>,<component>:<pattern>=<log-level> component - represents a subsystem of the application and must be from a limited list per application (see the following examples). pattern - describes the specific component area to log (for example, a Java package). log-level - defines the granularity at which logging is enabled (see later for permitted levels). The exact format of pattern depends on the configured application. The appropriate values are provided by HCL Support, if you are asked to enable tracing as part of a case. Some examples of log configuration strings for different DX applications are given as follows: DX Core example : wp_profile:com.hcl.App=info,wp_profile:com.hcl.util.Data=finest Digital Asset Management example : api:server-v1:dist=info,worker:server-v1:dist=info,api:server-v1:dist:server=debug","title":"Log configuration string format"},{"location":"containerization/configure_access_helm_logs/#supported-application-and-component-names","text":"Following are the supported application and component names, where the application names are the subsections under logging in the custom-values.yaml: Application Component names core wp_profile , cw_profile contentComposer api designStudio api digitalAssetManagement api , worker imageProcessor api persistenceConnectionPool pgpool persistenceNode psql , repmgr remoteSearch prs_profile ringApi api runtimeController controller","title":"Supported application and component names"},{"location":"containerization/configure_access_helm_logs/#supported-log-levels","text":"For most applications, three log levels are supported: debug , info , and error . Core and Remote Search, where all existing WebSphere Application Server trace levels are supported, such as all or finest .","title":"Supported log levels"},{"location":"containerization/configure_access_helm_logs/#accessing-kubernetes-container-logs","text":"Container logs for DX applications can be accessed individually or collectively, as described in the following subsections. Logs for DX Core and Remote Search are accessed differently from other applications, as those pods have multiple containers to provide access to additional logs.","title":"Accessing Kubernetes container logs"},{"location":"containerization/configure_access_helm_logs/#accessing-dx-core-logs","text":"To access a Core application log, use the command: kubectl logs -n <namespace> <core-pod-name> <sidecar-container-name> For example: kubectl logs -n dxns dx-deployment-core-0 system-err-log This retrieves the log for a single sidecar container, which corresponds to a single Core log file. Note: The additional logging enabled for Core goes to trace.log. To configure trace.log for sidecar logging, see Configure Core sidecar logging . By default, two sidecar containers are launched with Core: system-out-log - Exposes the WebSphere_Portal/SystemOut.log file. system-err-log - Exposes the WebSphere_Portal/SystemErr.log file. For information on configuring additional Core sidecar log containers, please see Configure Core sidecar logging .","title":"Accessing DX Core logs"},{"location":"containerization/configure_access_helm_logs/#accessing-remote-search-logs","text":"To access a Remote Search application log, use the command: kubectl logs -n <namespace> <remote-search-pod-name> <sidecar-container-name> For example: kubectl logs -n dxns dx-deployment-remote-search-0 system-err-log This retrieves the log for a single sidecar container, which corresponds to a single Remote Search log file. Note: The additional logging enabled for Remote Search goes to trace.log. To configure trace.log for sidecar logging, see Configure Remote Search sidecar logging . By default, two sidecar containers are launched with Remote Search: system-out-log - Exposes the WebSphere_Portal/SystemOut.log file. system-err-log - Exposes the WebSphere_Portal/SystemErr.log file. For information on configuring additional Remote Search sidecar log containers, please see Configure Remote Search sidecar logging .","title":"Accessing Remote Search logs"},{"location":"containerization/configure_access_helm_logs/#accessing-logs-for-other-applications","text":"Applications other than Core and Remote Search do not have logging sidecar containers and only provide a single log per pod, which can typically be obtained using the command: kubectl logs -n <namespace> <pod-name> (omitting a container name), for example: kubectl logs -n dxns dx-deployment-digital-asset-management-0 This is not the case for Persistence Node pods, which have non-logging sidecar containers (for metrics gathering). For these pods, you must append the main container name ( persistence-node ) when accessing the log, for example: kubectl logs -n dxns dx-deployment-persistence-node-0 persistence-node","title":"Accessing logs for other applications"},{"location":"containerization/configure_access_helm_logs/#accessing-all-application-logs-simultaneously","text":"All application logs from DX pods in a deployment can be combined into a single output using the command: kubectl logs -n <namespace> -l release=<release-name> --tail=-1 --all-containers where: namespace - is the namespace in which your HCL Digital Experience deployment is installed. release-name - is the Helm release name you used when installing. On UNIX-based operating systems, the output can be directed to a file for convenience by appending > some-file-name to the command.","title":"Accessing all application logs simultaneously"},{"location":"containerization/configure_access_helm_logs/#default-log-output","text":"The log output for a DX deployment is set to a non-verbose configuration by default. Application name Default log settings Core *=info Content Composer api:server-v1:*=info Design Studio api:server-v1:*=info Digital Asset Management api:server-v1:*=info,worker:server-v1:*=info Image Processor api:server-v1:*=info Persistence Connection Pool pgpool:=info Persistence Node psql:=info,repmgr:=info Remote Search *=info Ring API api:server-v1:*=info Runtime Controller controller:.*=INFO,controller:com.hcl.dx.*=INFO All applications send their log output directly to stdout and stderr of the corresponding container that they are running in. Besides that, the following applications also write their log output into a file that is available in the file system of the containers: Application name Log location Core /opt/HCL/wp_profile/logs/WebSphere_Portal and /opt/HCL/AppServer/profiles/cw_profile/logs/server1 Remote Search /opt/HCL/AppServer/profiles/prs_profile/logs/server1 Persistence Node /var/lib/pgsql/11/data/log and /var/lib/pgsql/11/data/dx/repmgr/log Note: The Core and Remote Search have the following default settings for their log output files and that needs to be considered when sizing their persistent volumes: Output file Size per file Files kept SystemOut.log 5MB 3 SystemErr.log 5MB 3 trace.log 20MB 3 The amount of logs that are stored per container in running the Pods depends on the configuration of your Kubernetes Cluster. Refer to the documentation of your cloud provider for further information. Note that for all applications that do not write their logs separately to a file, the only source of historical log data is the Kubernetes logging. We encourage the customers to process the logging of their Kubernetes Cluster in a separate logging solution of their choice. Parent topic: Troubleshooting your Helm deployment","title":"Default log output"},{"location":"containerization/configure_deployment_helm/","text":"Configuring DX 9.5 deployments to container platforms using Helm This topic covers details the configuration structure in the HCL Digital Experience 9.5 OpenShift and Kubernetes deployment with Helm. Configuration overview In the DX 9.5 component definitions, each application has a dedicated ConfigMap. They contain application specific key/value pairs that are derived from the templates in the DX 9.5 Helm Chart and the values inside the values.yaml (and/or your custom value overrides). Rollout of configuration changes Configuration changes are automatically processed by the HCL Digital Experience 9.5 OpenShift or Kubernetes deployment with Helm. DX 9.5 Container Upgrades Via Helm Operations Details Beginning with HCL DX 9.5 Container Upgrade CF196, Helm deployment is supported on the Google Kubernetes Engine platform (GKE). As Helm deployment methods are supported on the additional DX 9.5 supported OpenShift or Kubernetes platform of choice, it is recommended that administrators use Helm deployment to manage upgrade processes. Note that use of dxctl to manage these operations is also supported, but will be deprecated over time in favor of Helm. When supported on the additional DX 9.5 container platforms, the recommended way to change the configuration of a running deployment is via a Helm upgrade. Once the upgrade command is executed, it calculates and apply all changes that derive from the changes that have been made to the values definitions. The DX Helm deployment uses annotations on each application to share the checksum of the last ConfigMap. This checksum is updated as soon as Helm upgrade is performed and that there has been a change to the configuration of an application. When the checksum is updated, OpenShift or Kubernetes proceeds to roll out the new configuration. Based on the count of Pods per application that you are running, this may cause a downtime in operations. To minimize the impact of operations to configuration changes processing, consider running at least a quorum of 3 Pods per application. This allows OpenShift and Kubernetes to properly roll out the new configurations and maintain availability of the applications operations throughout the entire upgrade processing cycle. Direct Configuration changes in Kubernetes or OpenShift For development and testing, sometimes it is useful to directly adjust configuration in ConfigMaps via Kubernetes (for example, kubectl edit cm ) or OpenShift commands. In that case, the runtime controller is to notice that there has been a change to a ConfigMap and calculates the checksum for the Pod specification of the affected application. Kubernetes or OpenShift thens proceed to roll out the new configuration. This is the same processing methodology applies as when using Helm upgrade definitions. Note: It is recommended that administrators use Helm upgrade for configuration changes, as the DX 9.5 Helm chart contains logic to calculate certain values. If you choose to edit ConfigMaps directly in the Kubernetes or OpenShift console, do note that running a Helm upgrade overwrites the settings you inserted directly/manually in your deployment. It is recommended to apply configuration changes directly on an as-needed basis and only for development and testing purposes. Please also ensure that the keys used inside the ConfigMap are ordered alphabetically . List of HCL DX 9.5 ConfigMaps Name Application <RELEASE-NAME>-content-composer Content Composer <RELEASE-NAME>-core Core <RELEASE-NAME>-design-studio Design Studio (beta) <RELEASE-NAME>-digital-asset-management Digital Asset Management <RELEASE-NAME>-image-processor Image Processor <RELEASE-NAME>-persistence Persistence <RELEASE-NAME>-ring-api Ring API <RELEASE-NAME>-runtime-controller Runtime Controller Parent topic: Overview of the Helm architecture","title":"Configuring DX 9.5 deployments to container platforms using Helm"},{"location":"containerization/configure_deployment_helm/#configuring-dx-95-deployments-to-container-platforms-using-helm","text":"This topic covers details the configuration structure in the HCL Digital Experience 9.5 OpenShift and Kubernetes deployment with Helm.","title":"Configuring DX 9.5 deployments to container platforms using Helm"},{"location":"containerization/configure_deployment_helm/#configuration-overview","text":"In the DX 9.5 component definitions, each application has a dedicated ConfigMap. They contain application specific key/value pairs that are derived from the templates in the DX 9.5 Helm Chart and the values inside the values.yaml (and/or your custom value overrides).","title":"Configuration overview"},{"location":"containerization/configure_deployment_helm/#rollout-of-configuration-changes","text":"Configuration changes are automatically processed by the HCL Digital Experience 9.5 OpenShift or Kubernetes deployment with Helm. DX 9.5 Container Upgrades Via Helm Operations Details Beginning with HCL DX 9.5 Container Upgrade CF196, Helm deployment is supported on the Google Kubernetes Engine platform (GKE). As Helm deployment methods are supported on the additional DX 9.5 supported OpenShift or Kubernetes platform of choice, it is recommended that administrators use Helm deployment to manage upgrade processes. Note that use of dxctl to manage these operations is also supported, but will be deprecated over time in favor of Helm. When supported on the additional DX 9.5 container platforms, the recommended way to change the configuration of a running deployment is via a Helm upgrade. Once the upgrade command is executed, it calculates and apply all changes that derive from the changes that have been made to the values definitions. The DX Helm deployment uses annotations on each application to share the checksum of the last ConfigMap. This checksum is updated as soon as Helm upgrade is performed and that there has been a change to the configuration of an application. When the checksum is updated, OpenShift or Kubernetes proceeds to roll out the new configuration. Based on the count of Pods per application that you are running, this may cause a downtime in operations. To minimize the impact of operations to configuration changes processing, consider running at least a quorum of 3 Pods per application. This allows OpenShift and Kubernetes to properly roll out the new configurations and maintain availability of the applications operations throughout the entire upgrade processing cycle. Direct Configuration changes in Kubernetes or OpenShift For development and testing, sometimes it is useful to directly adjust configuration in ConfigMaps via Kubernetes (for example, kubectl edit cm ) or OpenShift commands. In that case, the runtime controller is to notice that there has been a change to a ConfigMap and calculates the checksum for the Pod specification of the affected application. Kubernetes or OpenShift thens proceed to roll out the new configuration. This is the same processing methodology applies as when using Helm upgrade definitions. Note: It is recommended that administrators use Helm upgrade for configuration changes, as the DX 9.5 Helm chart contains logic to calculate certain values. If you choose to edit ConfigMaps directly in the Kubernetes or OpenShift console, do note that running a Helm upgrade overwrites the settings you inserted directly/manually in your deployment. It is recommended to apply configuration changes directly on an as-needed basis and only for development and testing purposes. Please also ensure that the keys used inside the ConfigMap are ordered alphabetically .","title":"Rollout of configuration changes"},{"location":"containerization/configure_deployment_helm/#list-of-hcl-dx-95-configmaps","text":"Name Application <RELEASE-NAME>-content-composer Content Composer <RELEASE-NAME>-core Core <RELEASE-NAME>-design-studio Design Studio (beta) <RELEASE-NAME>-digital-asset-management Digital Asset Management <RELEASE-NAME>-image-processor Image Processor <RELEASE-NAME>-persistence Persistence <RELEASE-NAME>-ring-api Ring API <RELEASE-NAME>-runtime-controller Runtime Controller Parent topic: Overview of the Helm architecture","title":"List of HCL DX 9.5 ConfigMaps"},{"location":"containerization/configure_digital_asset_management_in_virtual_portals/","text":"Configure Digital Asset Management in virtual portals This section provides steps to configure Digital Asset Management support in virtual portals. Using HCL Digital Experience 9.5 CF19 and higher, DX administrators can configure Digital Asset Management services support in virtual portals. For additional information about virtual portal capabilities for HCL Digital Experience, reference the virtual portals topic in the HCL DX Help Center documentation. Complete the following tasks to enable Digital Asset Management support in virtual portals. Prerequisites : Install HCL Digital Experience 9.5 CF19 or higher release, including Digital Asset Management and the Experience API. Configure virtual portal support to the HCL DX 9.5 CF19 or higher release deployment. Verify access to the Practitioner Studio interface on the virtual portal. See Enabling Practitioner Studio and Woodburn Studio in an existing virtual portal for additional information. Installing Digital Asset Management on a virtual portal Execute the following configuration tasks to enable Digital Asset Management on the virtual portal: /opt/HCL/wp_profile/ConfigEngine/ConfigEngine.sh enable-media-library-vp -Dstatic.ui.url=... -DVirtualPortalContext=... -DWasPassword=wpsadmin -DPortalAdminPwd=wpsadmin /opt/HCL/wp_profile/ConfigEngine/ConfigEngine.sh enable-media-library-vp -Dstatic.ui.url=https://myhost.com/dx/ui/dam/static -DVirtualPortalContext=dam -DWasPassword=wpsadmin -DPortalAdminPwd=wpsadmin Verify access to the Practitioner Studio and Digital Asset Management features from the HCL DX virtual portal. See the Practitioner Studio and Digital Asset Management topics for additional information. Remove Digital Asset Management from a virtual portal To optionally remove support for Digital Asset Management in an HCL DX virtual portal, execute the following configuration task: /opt/HCL/wp_profile/ConfigEngine/ConfigEngine.sh disable-media-library-vp -DVirtualPortalContext=... -DWasPassword=wpsadmin -DPortalAdminPwd=wpsadmin /opt/HCL/wp_profile/ConfigEngine/ConfigEngine.sh disable-media-library-vp -DVirtualPortalContext=dam -DWasPassword=wpsadmin -DPortalAdminPwd=wpsadmin Parent topic: Customizing your container deployment","title":"Configure Digital Asset Management in virtual portals"},{"location":"containerization/configure_digital_asset_management_in_virtual_portals/#configure-digital-asset-management-in-virtual-portals","text":"This section provides steps to configure Digital Asset Management support in virtual portals. Using HCL Digital Experience 9.5 CF19 and higher, DX administrators can configure Digital Asset Management services support in virtual portals. For additional information about virtual portal capabilities for HCL Digital Experience, reference the virtual portals topic in the HCL DX Help Center documentation.","title":"Configure Digital Asset Management in virtual portals"},{"location":"containerization/configure_digital_asset_management_in_virtual_portals/#complete-the-following-tasks-to-enable-digital-asset-management-support-in-virtual-portals","text":"Prerequisites : Install HCL Digital Experience 9.5 CF19 or higher release, including Digital Asset Management and the Experience API. Configure virtual portal support to the HCL DX 9.5 CF19 or higher release deployment. Verify access to the Practitioner Studio interface on the virtual portal. See Enabling Practitioner Studio and Woodburn Studio in an existing virtual portal for additional information.","title":"Complete the following tasks to enable Digital Asset Management support in virtual portals."},{"location":"containerization/configure_digital_asset_management_in_virtual_portals/#installing-digital-asset-management-on-a-virtual-portal","text":"Execute the following configuration tasks to enable Digital Asset Management on the virtual portal: /opt/HCL/wp_profile/ConfigEngine/ConfigEngine.sh enable-media-library-vp -Dstatic.ui.url=... -DVirtualPortalContext=... -DWasPassword=wpsadmin -DPortalAdminPwd=wpsadmin /opt/HCL/wp_profile/ConfigEngine/ConfigEngine.sh enable-media-library-vp -Dstatic.ui.url=https://myhost.com/dx/ui/dam/static -DVirtualPortalContext=dam -DWasPassword=wpsadmin -DPortalAdminPwd=wpsadmin Verify access to the Practitioner Studio and Digital Asset Management features from the HCL DX virtual portal. See the Practitioner Studio and Digital Asset Management topics for additional information.","title":"Installing Digital Asset Management on a virtual portal"},{"location":"containerization/configure_digital_asset_management_in_virtual_portals/#remove-digital-asset-management-from-a-virtual-portal","text":"To optionally remove support for Digital Asset Management in an HCL DX virtual portal, execute the following configuration task: /opt/HCL/wp_profile/ConfigEngine/ConfigEngine.sh disable-media-library-vp -DVirtualPortalContext=... -DWasPassword=wpsadmin -DPortalAdminPwd=wpsadmin /opt/HCL/wp_profile/ConfigEngine/ConfigEngine.sh disable-media-library-vp -DVirtualPortalContext=dam -DWasPassword=wpsadmin -DPortalAdminPwd=wpsadmin Parent topic: Customizing your container deployment","title":"Remove Digital Asset Management from a virtual portal"},{"location":"containerization/configure_openldap_image/","text":"Configure the OpenLDAP container image Read more about configuring the OpenLDAP container image to the 9.5 container deployment, which is available with HCL Digital Experience 9.5 Container Update release CF181 and later. OpenLDAP Software is an open-source implementation of the Lightweight Directory Access Protocol. For more information on OpenLDAP, visit https://www.openldap.org/ . The HCL Digital Experience 9.5 Container Update release CF181 and higher includes an OpenLDAP container, and a customization of the operator to deploy the LDAP container and configure the HCL Digital Experience 9.5 Container deployment to use it. Consult the HCL Digital Experience 9.5 Container deployment topic for the latest list of HCL Digital Experience 9.5 container deployments available with your HCL Digital Experience entitlements from the HCL Software License Portal . Note: The OpenLDAP port is not accessible externally on non-OpenShift Kubernetes platforms. This feature is considered for future releases. Usage Deployment of the OpenLDAP container in a production environment is not supported. This optional process of deploying OpenLDAP is solely intended for non-production environments to help one get started with HCL Digital Experience 9.5 container environment deployment. For production environments, use a production-quality LDAP (e.g. one with security hardening, firewall protection, etc). For production use, Administrators can choose to deploy their organization's LDAP (and possibly mirror the contents of that enterprise LDAP back to this newly deployed LDAP) or connect to an already defined LDAP server or database or custom user registry. Note: To use the OpenLDAP container in a Docker (non-Kubernetes) environment, include the following statement in the Docker run command for this image. Example: docker run -e LOCAL=true -p 1389:1389 -p 1636:1636 -p 1666:1666 -v dx-openldap-certs:/var/dx-openldap/certs -v dx-openldap-slapd.d:/var/dx-openldap/etc/openldap/slapd.d -v dx-openldap-ldap:/var/dx-openldap/ldap --name dx_openldap hcl/dx/openldap:v1.0.0-release_20200622_1592846796 Deployment of the HCL OpenLDAP container with custom parameters using dxctl does not configure the OpenLDAP container with custom values. Instead, dxctl deploys and configures OpenLDAP to DX with the default out-of-the-box values. To work around this limitation, and configure OpenLDAP to DX with custom values, do the following steps: Deploy DX without OpenLDAP (set openldap.enabled:false in the deployment.properties file). Ensure the image name, tag, and (if needed) the repository values for the your deployment are correct. These can be updated in the next step. Edit the dx-deployment configmap to add the customization parameters: For example: dx.deploy.openldap.country: US dx.deploy.openldap.org: HCL dx.deploy.openldap.pwd: mycoolnewpwd dx.deploy.openldap.suffix: 'dc=dx,dc=hcl,dc=com' Set openldap.enabled: true in the deployment.properties file. Save the configmap changes. Once these steps are completed, the DX container is recreated to run the OpenLDAP configuration task. For more information on dxctl , see the dxctl topic. Video: Using OpenLDAP with HCL DX 9.5 on Red Hat OpenShift Deployment To deploy the OpenLDAP image container for use with an HCL Digital Experience 9.5 container deployment, first create or update the dx-deployment config map. Note: The config map MUST be named the same as the deployment. By default, the deployment name is dx-deployment, however if you have modified the name in the git_v1_dxdeployment_cr.yaml, your config map name value must match your DxDeployment name value. For example, use my-custom-deployment for the config map name if your git_v1_dxdeployment_cr.yaml was modified as in the sample below: kind: DxDeployment metadata: name: my-custom-deployment The following sample file yaml file deploys the OpenLDAP container with default data and ten (10) sample users with the password passw0rd. The LDAP administrator user name is dx_user with password p0rtal4u. DX is the organization, dc=dx,dc=com is the basedn and US is the country. **kind**: ConfigMap **apiVersion**: v1 **metadata**: **name**: dx-deployment **namespace**: your-namespace **apiVersion**: v1 **data**: dx.deploy.openldap.**enabled**: 'true' dx.deploy.openldap.**image**: dx-openldap dx.deploy.openldap.**tag**: v1.0.0_20200428_1588034443 The following sample yaml file deploys an OpenLDAP container using your custom organization, basedn, country and LDAP administrator password. LDAP administrator user name is dx_user, which cannot be customized at this time. kind: ConfigMap apiVersion: v1 metadata: name: dx-deployment namespace: your-namespace apiVersion: v1 data: dx.deploy.openldap.country: US dx.deploy.openldap.enabled: 'true' dx.deploy.openldap.image: dx-openldap dx.deploy.openldap.org: DX dx.deploy.openldap.pwd: mycoolnewpwd dx.deploy.openldap.suffix: 'dc=dx,dc=hcl,dc=com' dx.deploy.openldap.tag: v1.0.0_20200428_1588034443 Once the OpenLDAP container is fully deployed, the password entry can be removed from the config map. Sample users have a password of passw0rd. Additional users can be added or changes made to the data using ldapadd, ldapdelete and ldapmodify commands according to instructions in the OpenLDAP Administrator Guide . Sample ldif file format for adding users: **dn**: cn=my_new_user_group,ou=groups,dc=dx,dc=hcl,dc=com **objectClass**: groupOfUniqueNames **cn**: my_new_user_group **uniqueMember**: uid=newuser1 **uniqueMember**: uid=newuser2 **dn**: uid=newuser1,ou=users,dc=dx,dc=hcl,dc=com **objectClass**: inetOrgPerson **objectclass**: top **objectclass**: person **objectclass**: organizationalPerson **cn**: my newuser1 **sn**: newuser1 **uid**: newuser1 **userPassword**: passw0rd **givenName**: my **mail**: mynewuser1@dx.hcl.com **preferredLanguage**: en_us **title**: engineer **telephoneNumber**: 9999999999 **dn**: uid=newuser2,ou=users,dc=dx,dc=hcl,dc=com **objectClass**: inetOrgPerson **objectclass**: top **objectclass**: person **objectclass**: organizationalPerson **cn**: my newuser2 **sn**: newuser2 **uid**: newuser2 **userPassword**: passw0rd **givenName**: my **mail**: mynewuser2@dx.hcl.com **preferredLanguage**: en_us **title**: engineer **telephoneNumber**: 9999999999 Copy the ldif file into the OpenLDAP container: kubectl cp ./myldiffile.ldif dx-deployment-openldap-0:/tmp/ Execute into the OpenLDAP container and add the users: kubectl exec -it dx-deployment-openldap-0 /bin/bash cd /var/dx-openldap/bin ./ldapadd -h $HOSTNAME -p 1389 -f /tmp/myldiffile.ldif -x -D cn=dx_user,dc=dx,dc=hcl,dc=com -w p0rtal4u -v The dx.deploy.openldap.enabled config map entry tells the HCL Digital Experience 9.5 container operator to deploy the OpenLDAP container and configure the HCL Digital Experience 9.5 deployed container to it. Note: There are three (3) volumes self-provisioned for the OpenLDAP environment: dx-slapd which maps to the /var/dx-openldap/etc/openldap/slapd.d directory within the container and holds the configuration data; dx-lapd which maps to the /var/dx-openldap/ldap directory within the container and holds the db; and dx-certs which maps to the /var/dx-openldap/certs directory within the container and holds the OpenLDAP TLS certificates. If these volumes are not present, the OpenLDAP data is lost once the container is restarted. Additional configuration options are not currently supported. If you are adding the OpenLDAP container to an existing HCL Digital Experience 9.5 container deployment, you must stop the deployment and restart it with one (1) replica using the removeDx and deployDX scripts. Once fully started, you can safely scale it to N instances. Note: TLS is 'allowed' out of the box with the HCL Digital Experience 9.5 container deployment, but the certificates created with the OpenLDAP container are not imported for use by HCL Digital Experience 9.5 containers. Maintenance and Support HCL Digital Experience will periodically provide updated OpenLDAP container images in the HCL Digital Experience entitlements available for customers from the HCL Software License Portal . HCL Product Support may be contacted with questions regarding this installation procedure. For additional information and support for OpenLDAP topics, please reference https://www.openldap.org/ . Consult the HCL Digital Experience 9.5 Container deployment page for the latest list of Digital Experience 9.5 container components available with your Digital Experience entitlements from the HCL Software License Portal . Parent topic: Customizing your container deployment","title":"Configure the OpenLDAP container image"},{"location":"containerization/configure_openldap_image/#configure-the-openldap-container-image","text":"Read more about configuring the OpenLDAP container image to the 9.5 container deployment, which is available with HCL Digital Experience 9.5 Container Update release CF181 and later. OpenLDAP Software is an open-source implementation of the Lightweight Directory Access Protocol. For more information on OpenLDAP, visit https://www.openldap.org/ . The HCL Digital Experience 9.5 Container Update release CF181 and higher includes an OpenLDAP container, and a customization of the operator to deploy the LDAP container and configure the HCL Digital Experience 9.5 Container deployment to use it. Consult the HCL Digital Experience 9.5 Container deployment topic for the latest list of HCL Digital Experience 9.5 container deployments available with your HCL Digital Experience entitlements from the HCL Software License Portal . Note: The OpenLDAP port is not accessible externally on non-OpenShift Kubernetes platforms. This feature is considered for future releases.","title":"Configure the OpenLDAP container image"},{"location":"containerization/configure_openldap_image/#usage","text":"Deployment of the OpenLDAP container in a production environment is not supported. This optional process of deploying OpenLDAP is solely intended for non-production environments to help one get started with HCL Digital Experience 9.5 container environment deployment. For production environments, use a production-quality LDAP (e.g. one with security hardening, firewall protection, etc). For production use, Administrators can choose to deploy their organization's LDAP (and possibly mirror the contents of that enterprise LDAP back to this newly deployed LDAP) or connect to an already defined LDAP server or database or custom user registry. Note: To use the OpenLDAP container in a Docker (non-Kubernetes) environment, include the following statement in the Docker run command for this image. Example: docker run -e LOCAL=true -p 1389:1389 -p 1636:1636 -p 1666:1666 -v dx-openldap-certs:/var/dx-openldap/certs -v dx-openldap-slapd.d:/var/dx-openldap/etc/openldap/slapd.d -v dx-openldap-ldap:/var/dx-openldap/ldap --name dx_openldap hcl/dx/openldap:v1.0.0-release_20200622_1592846796 Deployment of the HCL OpenLDAP container with custom parameters using dxctl does not configure the OpenLDAP container with custom values. Instead, dxctl deploys and configures OpenLDAP to DX with the default out-of-the-box values. To work around this limitation, and configure OpenLDAP to DX with custom values, do the following steps: Deploy DX without OpenLDAP (set openldap.enabled:false in the deployment.properties file). Ensure the image name, tag, and (if needed) the repository values for the your deployment are correct. These can be updated in the next step. Edit the dx-deployment configmap to add the customization parameters: For example: dx.deploy.openldap.country: US dx.deploy.openldap.org: HCL dx.deploy.openldap.pwd: mycoolnewpwd dx.deploy.openldap.suffix: 'dc=dx,dc=hcl,dc=com' Set openldap.enabled: true in the deployment.properties file. Save the configmap changes. Once these steps are completed, the DX container is recreated to run the OpenLDAP configuration task. For more information on dxctl , see the dxctl topic. Video: Using OpenLDAP with HCL DX 9.5 on Red Hat OpenShift","title":"Usage"},{"location":"containerization/configure_openldap_image/#deployment","text":"To deploy the OpenLDAP image container for use with an HCL Digital Experience 9.5 container deployment, first create or update the dx-deployment config map. Note: The config map MUST be named the same as the deployment. By default, the deployment name is dx-deployment, however if you have modified the name in the git_v1_dxdeployment_cr.yaml, your config map name value must match your DxDeployment name value. For example, use my-custom-deployment for the config map name if your git_v1_dxdeployment_cr.yaml was modified as in the sample below: kind: DxDeployment metadata: name: my-custom-deployment The following sample file yaml file deploys the OpenLDAP container with default data and ten (10) sample users with the password passw0rd. The LDAP administrator user name is dx_user with password p0rtal4u. DX is the organization, dc=dx,dc=com is the basedn and US is the country. **kind**: ConfigMap **apiVersion**: v1 **metadata**: **name**: dx-deployment **namespace**: your-namespace **apiVersion**: v1 **data**: dx.deploy.openldap.**enabled**: 'true' dx.deploy.openldap.**image**: dx-openldap dx.deploy.openldap.**tag**: v1.0.0_20200428_1588034443 The following sample yaml file deploys an OpenLDAP container using your custom organization, basedn, country and LDAP administrator password. LDAP administrator user name is dx_user, which cannot be customized at this time. kind: ConfigMap apiVersion: v1 metadata: name: dx-deployment namespace: your-namespace apiVersion: v1 data: dx.deploy.openldap.country: US dx.deploy.openldap.enabled: 'true' dx.deploy.openldap.image: dx-openldap dx.deploy.openldap.org: DX dx.deploy.openldap.pwd: mycoolnewpwd dx.deploy.openldap.suffix: 'dc=dx,dc=hcl,dc=com' dx.deploy.openldap.tag: v1.0.0_20200428_1588034443 Once the OpenLDAP container is fully deployed, the password entry can be removed from the config map. Sample users have a password of passw0rd. Additional users can be added or changes made to the data using ldapadd, ldapdelete and ldapmodify commands according to instructions in the OpenLDAP Administrator Guide . Sample ldif file format for adding users: **dn**: cn=my_new_user_group,ou=groups,dc=dx,dc=hcl,dc=com **objectClass**: groupOfUniqueNames **cn**: my_new_user_group **uniqueMember**: uid=newuser1 **uniqueMember**: uid=newuser2 **dn**: uid=newuser1,ou=users,dc=dx,dc=hcl,dc=com **objectClass**: inetOrgPerson **objectclass**: top **objectclass**: person **objectclass**: organizationalPerson **cn**: my newuser1 **sn**: newuser1 **uid**: newuser1 **userPassword**: passw0rd **givenName**: my **mail**: mynewuser1@dx.hcl.com **preferredLanguage**: en_us **title**: engineer **telephoneNumber**: 9999999999 **dn**: uid=newuser2,ou=users,dc=dx,dc=hcl,dc=com **objectClass**: inetOrgPerson **objectclass**: top **objectclass**: person **objectclass**: organizationalPerson **cn**: my newuser2 **sn**: newuser2 **uid**: newuser2 **userPassword**: passw0rd **givenName**: my **mail**: mynewuser2@dx.hcl.com **preferredLanguage**: en_us **title**: engineer **telephoneNumber**: 9999999999 Copy the ldif file into the OpenLDAP container: kubectl cp ./myldiffile.ldif dx-deployment-openldap-0:/tmp/ Execute into the OpenLDAP container and add the users: kubectl exec -it dx-deployment-openldap-0 /bin/bash cd /var/dx-openldap/bin ./ldapadd -h $HOSTNAME -p 1389 -f /tmp/myldiffile.ldif -x -D cn=dx_user,dc=dx,dc=hcl,dc=com -w p0rtal4u -v The dx.deploy.openldap.enabled config map entry tells the HCL Digital Experience 9.5 container operator to deploy the OpenLDAP container and configure the HCL Digital Experience 9.5 deployed container to it. Note: There are three (3) volumes self-provisioned for the OpenLDAP environment: dx-slapd which maps to the /var/dx-openldap/etc/openldap/slapd.d directory within the container and holds the configuration data; dx-lapd which maps to the /var/dx-openldap/ldap directory within the container and holds the db; and dx-certs which maps to the /var/dx-openldap/certs directory within the container and holds the OpenLDAP TLS certificates. If these volumes are not present, the OpenLDAP data is lost once the container is restarted. Additional configuration options are not currently supported. If you are adding the OpenLDAP container to an existing HCL Digital Experience 9.5 container deployment, you must stop the deployment and restart it with one (1) replica using the removeDx and deployDX scripts. Once fully started, you can safely scale it to N instances. Note: TLS is 'allowed' out of the box with the HCL Digital Experience 9.5 container deployment, but the certificates created with the OpenLDAP container are not imported for use by HCL Digital Experience 9.5 containers.","title":"Deployment"},{"location":"containerization/configure_openldap_image/#maintenance-and-support","text":"HCL Digital Experience will periodically provide updated OpenLDAP container images in the HCL Digital Experience entitlements available for customers from the HCL Software License Portal . HCL Product Support may be contacted with questions regarding this installation procedure. For additional information and support for OpenLDAP topics, please reference https://www.openldap.org/ . Consult the HCL Digital Experience 9.5 Container deployment page for the latest list of Digital Experience 9.5 container components available with your Digital Experience entitlements from the HCL Software License Portal . Parent topic: Customizing your container deployment","title":"Maintenance and Support"},{"location":"containerization/container_init_performance/","text":"HCL Digital Experience 9.5 Docker and Container initialization performance Beginning with from HCL Digital Experience 9.5 Container Update CF192 release, container DX applications initialization performance is improved. Review the following guidance for information, defaults, and options to manage container applications initialization performance when deployed to Docker, Red Hat OpenShift, and Kubernetes platforms. Introduction When deployed on the supported Red Hat OpenShift and Kubernetes environments, the HCL Digital Experience core platform \"Pod\" must be started before it can start serving requests. Furthermore, once the Pod is started, HCL Digital Experience Portal and Web Content Manager core must be initialized before the OpenShift or Kubernetes \u201creadiness\u201d probes can determine that the Pod is able to serve requests. The OpenShift or Kubernetes readiness probe functions to execute an HTTP request to the \"/wps/portal\" or \"/ibm/console\" page and ensures that it responds.The HCL DX core must be initialized by execution of the \"startServer.sh WebSphere_Portal\" process before the readiness probes completes successfully. This starts the IBM WebSphere Application Server profile containing HCL DX Portal and Web Content Manager. This initialization process includes several IBM WebSphere and HCL DX applications including select portlets that must initialize before the HCL DX Core can respond to the readiness probe. In DX 9.5 Container Update CF192 and higher, to support a faster initialization of DX core Portal and Web Content Manager in Docker, Red Hat OpenShift, and supported Kubernetes platforms, most DX portlets not required for initial operations will default to a \"lazy load\" initialization. Using this means of initialization, an HCL DX portlet application is not started by a user request, but by the first standard HTTP request that occurs and renders a DX portal page that contains the portlet application on the server. Direct access to the portlet, for example an Ajax request, does not start the portlet. In addition, some IBM WebSphere applications not required for initial operations will not be autostarted. ConfigEngine Tasks Three ConfigEngine tasks are deployed to support improvements to HCL DX Core initialization times. They are: stop-autostart-docker-applications default -autostart-docker-applications start-advanced-editor-applications stop-autostart-docker-applications The stop-autostart-docker-applications task is executed during the Docker image build for DX Core when initialized on Docker, Red Hat OpenShift, or Kubernetes platforms. This task manages the following functions: It will stop the Advanced Rich Text Editor.ear (Textbox.io) files from autostarting. It will \u201clazy load\u201d all DX portlets that do not require the Portal and WCM functions to operate. Portlets required for DX operations that will be loaded and initialized include for example, theme modules that are loaded from Portlets. These portlets must be started in order for the theme modules to load. The \"Login\" and \"WCM Local Rendering\" portlets are in also this list as they are required to present the Woodburn Studio demonstration site entry page, and therefore the Kubernetes readiness probe. Note that the readiness probe defaults to the WebSphere Application Console via probe functions that execute an HTTP request to the \"/wps/portal\" or \"/ibm/console\" page and ensures that it responds. See Figure: Configure Editor Options the list of portlets that are needed for DX operations and will automatically load. default-autostart-docker-applications The default-autostart-docker-applications task will restore the autostart status of all applications to their \u201cout of the box\u201d status (and not apply \u201cLazy load\u201d initialization functions). start-advanced-editor-applications The start-advanced-editor-applications task will start the Advanced Rich Text Editor.ear (Textbox.io) application, if required, and if the customer configures WCM to use the WCM Advanced Editor. Prerequisites: Portal Administrators should run the start-advanced-editor-applications task to start the Advanced Rich Text Editor.ear (Textbox.io) application, then proceed to select the Advanced Editor in the Web Content Manager Authoring > Configure > Editor Options interface. Important Considerations and Limitations of the Container Initialization Improvements As a result of not autostarting, these applications and portlets, initialization of DX Portal may be faster, but the initial access of most pages will initially be slower due to the fact that the application/portlet must now be initialized. Note this only affects the first access of that application/portlet (as initialization is a once per system activity). As new DX PODS are started, initialization of DX pages with non-required applications and portlets will be slower on first HTTP request. Using Advanced Editors for WCM As noted above, beginning with Container Update CF192, and default settings for \u2018lazy load\u2019 of non-required portlets and applications, the Advanced Rich Text Editor .ear Textbox.io for WCM is now NOT started. Since this is not a lazy load but rather a stop of the Advanced Rich Text Editor Textbox IO EAR containing the advanced editor, they must also start the Advanced Rich Text Editor EAR by running the \"start-advanced-editor-applications\" task, before configuring the Advanced Rich Text editor in the Web Content Manager configuration settings , to make the editor available for content authors. It is not necessary in addition to \"commit\u201d the new Docker images once this task completes, because these changes are in the profile which is persisted in an external volume and not in the Docker image. Source File listing of HCL DX required portlets and applications that will autostart: These configuration tasks use four files to obtain the list of HCL DX portlet/applications to autostart. All the files are located in the same directory: configuration root}/PortalServer/installer/wp.config/config/includes For example, a list on this reference system is are located at: /opt/HCL/PortalServer/installer/wp.config/config/includes The four import files are: advancedEditorEAR - Enable the Advanced Editors defaultListOfEnabledApps - The out of the box autostart parameters listOfAppsDockerDisable - List of all portlets and applications who autostart is initially disabled listOfAppsDockerEnable - List of portlets and applications to autostart after having disabled the one in listOfAppsDockerDisable *List of portlets and applications that are automatically initialized by default * (Container Update CF192 release and later): PA_Login_Portlet_App PA_Site_Builder PA_WCMLRingPortJSR286 PA_WCM_Authoring_UI PA_Pingpageproperties PA_Styles PA_Wiring PA_wp.pzn.ui.actions PA_Orphaned PA_VanityUrl PA_New_Page PA_Create_Content PA_Applications PA_Toolbar_Content PA_Toolbar_SiteMap PA_Impersonation PA_WebScanner PA_Theme_Creator *List of portlets and applications initialized via \u201clazy load\u201d * (Container Update CF192 release and later): AJAX Proxy Configuration Default_Theme_85 Dojo_Resources EphoxEditLive ibmasyncrsp isclite JavaContentRepository jQuery_Resources Live_Object_Framework lwp.addtosametimelist_war lwp_groupsViewer_war lwp_peoplefinder_war lwp_peoplePicker_war MashupCommonComponent Mobile_Preview PA_Applications PA_AtiveSiteAnalytics PA_Banner_Ad PA_Blurb_1 PA_CM_Picker PA_ContactList PA_Create_Content PA_CredVaultDialog PA_Dialog_Stack PA_Dialog_State PA_DynamicUIApp PA_EitThemeProperties PA_FedDocumentsPicker PA_Feed_Service_Admin PA_FS_Disambiguation PA_Impersonation PA_IWidget_Wrapper PA_Login_Portlet_App PA_MosoftExchange2010 PA_New_Page PA_Orphaned PA_Page_Picker PA_Pingpageproperties PA_Pmizationframework PA_PortalWSRPProxy PA_PTransformationApp PA_Search_Center PA_SearchSitemapPort PA_Selfcare_Port_App PA_Site_Builder PA_spa PA_Styles PA_Tag_Cloud PA_Theme_Creator PA_Theme_Manager PA_Toolbar_Content PA_Toolbar_SiteMap PA_VanityUrl PA_WCM_Authoring_UI PA_WCMLRingPortJSR286 PA_WCMSupportTools PA_WebDockPortServlet PA_WebScanner PA_Wiring PA_WPF PA_wp.feedspace PA_wp.pzn.ui.actions PA_wp.vwat.manager Personalization_Lists Personalization_Workspace Practitioner_Studio_Theme_95 PSESearchAdapter pznpublish pznscheduler PZN_Utilities Quickr_Document_Picker RESTAPIDocs Seedlist_Servlet Simple_Theme SpellChecker StartupCheck SwaggerUI Theme_Dev_Assets ThemeDevSite Theme_Modules TinyEditorsServices TinyEditorsTextboxio Toolbar_Modules Toolbar_Theme_85 UserProfileRESTServlet wci wcm WCM_EXTENSION wcm-remote-admin-ejb Woodburn_Studio_Theme_95 worklight_extension wp.scriptportlet.editor wp.scriptportlet.importexport wps wps_scheduler wp.theme.ckeditor.ear wp.theme.toolbar.xslt wp.vwat.servlet.ear WSPolicyManager Parent topic: Container administration 9.5","title":"HCL Digital Experience 9.5 Docker and Container initialization performance"},{"location":"containerization/container_init_performance/#hcl-digital-experience-95-docker-and-container-initialization-performance","text":"Beginning with from HCL Digital Experience 9.5 Container Update CF192 release, container DX applications initialization performance is improved. Review the following guidance for information, defaults, and options to manage container applications initialization performance when deployed to Docker, Red Hat OpenShift, and Kubernetes platforms.","title":"HCL Digital Experience 9.5 Docker and Container initialization performance"},{"location":"containerization/container_init_performance/#introduction","text":"When deployed on the supported Red Hat OpenShift and Kubernetes environments, the HCL Digital Experience core platform \"Pod\" must be started before it can start serving requests. Furthermore, once the Pod is started, HCL Digital Experience Portal and Web Content Manager core must be initialized before the OpenShift or Kubernetes \u201creadiness\u201d probes can determine that the Pod is able to serve requests. The OpenShift or Kubernetes readiness probe functions to execute an HTTP request to the \"/wps/portal\" or \"/ibm/console\" page and ensures that it responds.The HCL DX core must be initialized by execution of the \"startServer.sh WebSphere_Portal\" process before the readiness probes completes successfully. This starts the IBM WebSphere Application Server profile containing HCL DX Portal and Web Content Manager. This initialization process includes several IBM WebSphere and HCL DX applications including select portlets that must initialize before the HCL DX Core can respond to the readiness probe. In DX 9.5 Container Update CF192 and higher, to support a faster initialization of DX core Portal and Web Content Manager in Docker, Red Hat OpenShift, and supported Kubernetes platforms, most DX portlets not required for initial operations will default to a \"lazy load\" initialization. Using this means of initialization, an HCL DX portlet application is not started by a user request, but by the first standard HTTP request that occurs and renders a DX portal page that contains the portlet application on the server. Direct access to the portlet, for example an Ajax request, does not start the portlet. In addition, some IBM WebSphere applications not required for initial operations will not be autostarted.","title":"Introduction"},{"location":"containerization/container_init_performance/#configengine-tasks","text":"Three ConfigEngine tasks are deployed to support improvements to HCL DX Core initialization times. They are: stop-autostart-docker-applications default -autostart-docker-applications start-advanced-editor-applications","title":"ConfigEngine Tasks"},{"location":"containerization/container_init_performance/#stop-autostart-docker-applications","text":"The stop-autostart-docker-applications task is executed during the Docker image build for DX Core when initialized on Docker, Red Hat OpenShift, or Kubernetes platforms. This task manages the following functions: It will stop the Advanced Rich Text Editor.ear (Textbox.io) files from autostarting. It will \u201clazy load\u201d all DX portlets that do not require the Portal and WCM functions to operate. Portlets required for DX operations that will be loaded and initialized include for example, theme modules that are loaded from Portlets. These portlets must be started in order for the theme modules to load. The \"Login\" and \"WCM Local Rendering\" portlets are in also this list as they are required to present the Woodburn Studio demonstration site entry page, and therefore the Kubernetes readiness probe. Note that the readiness probe defaults to the WebSphere Application Console via probe functions that execute an HTTP request to the \"/wps/portal\" or \"/ibm/console\" page and ensures that it responds. See Figure: Configure Editor Options the list of portlets that are needed for DX operations and will automatically load.","title":"stop-autostart-docker-applications"},{"location":"containerization/container_init_performance/#default-autostart-docker-applications","text":"The default-autostart-docker-applications task will restore the autostart status of all applications to their \u201cout of the box\u201d status (and not apply \u201cLazy load\u201d initialization functions).","title":"default-autostart-docker-applications"},{"location":"containerization/container_init_performance/#start-advanced-editor-applications","text":"The start-advanced-editor-applications task will start the Advanced Rich Text Editor.ear (Textbox.io) application, if required, and if the customer configures WCM to use the WCM Advanced Editor. Prerequisites: Portal Administrators should run the start-advanced-editor-applications task to start the Advanced Rich Text Editor.ear (Textbox.io) application, then proceed to select the Advanced Editor in the Web Content Manager Authoring > Configure > Editor Options interface.","title":"start-advanced-editor-applications"},{"location":"containerization/container_init_performance/#important-considerations-and-limitations-of-the-container-initialization-improvements","text":"As a result of not autostarting, these applications and portlets, initialization of DX Portal may be faster, but the initial access of most pages will initially be slower due to the fact that the application/portlet must now be initialized. Note this only affects the first access of that application/portlet (as initialization is a once per system activity). As new DX PODS are started, initialization of DX pages with non-required applications and portlets will be slower on first HTTP request.","title":"Important Considerations and Limitations of the Container Initialization Improvements"},{"location":"containerization/container_init_performance/#using-advanced-editors-for-wcm","text":"As noted above, beginning with Container Update CF192, and default settings for \u2018lazy load\u2019 of non-required portlets and applications, the Advanced Rich Text Editor .ear Textbox.io for WCM is now NOT started. Since this is not a lazy load but rather a stop of the Advanced Rich Text Editor Textbox IO EAR containing the advanced editor, they must also start the Advanced Rich Text Editor EAR by running the \"start-advanced-editor-applications\" task, before configuring the Advanced Rich Text editor in the Web Content Manager configuration settings , to make the editor available for content authors. It is not necessary in addition to \"commit\u201d the new Docker images once this task completes, because these changes are in the profile which is persisted in an external volume and not in the Docker image.","title":"Using Advanced Editors for WCM"},{"location":"containerization/container_init_performance/#source-file-listing-of-hcl-dx-required-portlets-and-applications-that-will-autostart","text":"These configuration tasks use four files to obtain the list of HCL DX portlet/applications to autostart. All the files are located in the same directory: configuration root}/PortalServer/installer/wp.config/config/includes For example, a list on this reference system is are located at: /opt/HCL/PortalServer/installer/wp.config/config/includes The four import files are: advancedEditorEAR - Enable the Advanced Editors defaultListOfEnabledApps - The out of the box autostart parameters listOfAppsDockerDisable - List of all portlets and applications who autostart is initially disabled listOfAppsDockerEnable - List of portlets and applications to autostart after having disabled the one in listOfAppsDockerDisable *List of portlets and applications that are automatically initialized by default * (Container Update CF192 release and later): PA_Login_Portlet_App PA_Site_Builder PA_WCMLRingPortJSR286 PA_WCM_Authoring_UI PA_Pingpageproperties PA_Styles PA_Wiring PA_wp.pzn.ui.actions PA_Orphaned PA_VanityUrl PA_New_Page PA_Create_Content PA_Applications PA_Toolbar_Content PA_Toolbar_SiteMap PA_Impersonation PA_WebScanner PA_Theme_Creator *List of portlets and applications initialized via \u201clazy load\u201d * (Container Update CF192 release and later): AJAX Proxy Configuration Default_Theme_85 Dojo_Resources EphoxEditLive ibmasyncrsp isclite JavaContentRepository jQuery_Resources Live_Object_Framework lwp.addtosametimelist_war lwp_groupsViewer_war lwp_peoplefinder_war lwp_peoplePicker_war MashupCommonComponent Mobile_Preview PA_Applications PA_AtiveSiteAnalytics PA_Banner_Ad PA_Blurb_1 PA_CM_Picker PA_ContactList PA_Create_Content PA_CredVaultDialog PA_Dialog_Stack PA_Dialog_State PA_DynamicUIApp PA_EitThemeProperties PA_FedDocumentsPicker PA_Feed_Service_Admin PA_FS_Disambiguation PA_Impersonation PA_IWidget_Wrapper PA_Login_Portlet_App PA_MosoftExchange2010 PA_New_Page PA_Orphaned PA_Page_Picker PA_Pingpageproperties PA_Pmizationframework PA_PortalWSRPProxy PA_PTransformationApp PA_Search_Center PA_SearchSitemapPort PA_Selfcare_Port_App PA_Site_Builder PA_spa PA_Styles PA_Tag_Cloud PA_Theme_Creator PA_Theme_Manager PA_Toolbar_Content PA_Toolbar_SiteMap PA_VanityUrl PA_WCM_Authoring_UI PA_WCMLRingPortJSR286 PA_WCMSupportTools PA_WebDockPortServlet PA_WebScanner PA_Wiring PA_WPF PA_wp.feedspace PA_wp.pzn.ui.actions PA_wp.vwat.manager Personalization_Lists Personalization_Workspace Practitioner_Studio_Theme_95 PSESearchAdapter pznpublish pznscheduler PZN_Utilities Quickr_Document_Picker RESTAPIDocs Seedlist_Servlet Simple_Theme SpellChecker StartupCheck SwaggerUI Theme_Dev_Assets ThemeDevSite Theme_Modules TinyEditorsServices TinyEditorsTextboxio Toolbar_Modules Toolbar_Theme_85 UserProfileRESTServlet wci wcm WCM_EXTENSION wcm-remote-admin-ejb Woodburn_Studio_Theme_95 worklight_extension wp.scriptportlet.editor wp.scriptportlet.importexport wps wps_scheduler wp.theme.ckeditor.ear wp.theme.toolbar.xslt wp.vwat.servlet.ear WSPolicyManager Parent topic: Container administration 9.5","title":"Source File listing of HCL DX required portlets and applications that will autostart:"},{"location":"containerization/container_scaling_helm/","text":"Scaling DX 9.5 container deployments using Helm This topic provides information to apply container scaling capabilities, and how scaling resources are handled within the HCL DX 9.5 deployment using Helm. Refer to HorizontalPodAutoscaler details in Kubernetes and Red Hat OpenShift documentation for more information on these services. Use of HorizontalPodAutoscalers in DX 9.5 Deployments using Helm The following DX 9.5 applications can be configured to leverage HorizontalPodAutoscalers for Kubernetes and OpenShift based automated scaling: Core Content Composer Design Studio (beta) Digital Asset Management Image Processor Ring API HorizontalPodAutoscalers monitor Pod resources such as CPU and Memory usage, and automatically scales up/down applications based on specific thresholds defined and scaling limits. For the above mentioned DX applications, the maximum and minimum count of Replicas can be configured via the values.yaml. The thresholds for CPU and Memory usage are also configurable allowing for load-based automated scaling of these applications. Per default, the automated scaling is not active and needs to be enabled before taking effect. Known limitations Core The HCL Digital Experience 9.5 Core can only be scaled to more than one Pod if you have performed a database transfer from the default packaged Derby database. Prior to that, any other additional Pod except for Pod-0 fails to start, since the default packaged Derby database does not allow for multiple Pods connecting to it. Persistence The Persistence used for Digital Asset Management currently supports scaling only with the updated persistence feature. For more information, see Digital Asset Management persistence architecture . Parent topic: Overview of the Helm architecture","title":"Scaling DX 9.5 container deployments using Helm"},{"location":"containerization/container_scaling_helm/#scaling-dx-95-container-deployments-using-helm","text":"This topic provides information to apply container scaling capabilities, and how scaling resources are handled within the HCL DX 9.5 deployment using Helm. Refer to HorizontalPodAutoscaler details in Kubernetes and Red Hat OpenShift documentation for more information on these services.","title":"Scaling DX 9.5 container deployments using Helm"},{"location":"containerization/container_scaling_helm/#use-of-horizontalpodautoscalers-in-dx-95-deployments-using-helm","text":"The following DX 9.5 applications can be configured to leverage HorizontalPodAutoscalers for Kubernetes and OpenShift based automated scaling: Core Content Composer Design Studio (beta) Digital Asset Management Image Processor Ring API HorizontalPodAutoscalers monitor Pod resources such as CPU and Memory usage, and automatically scales up/down applications based on specific thresholds defined and scaling limits. For the above mentioned DX applications, the maximum and minimum count of Replicas can be configured via the values.yaml. The thresholds for CPU and Memory usage are also configurable allowing for load-based automated scaling of these applications. Per default, the automated scaling is not active and needs to be enabled before taking effect.","title":"Use of HorizontalPodAutoscalers in DX 9.5 Deployments using Helm"},{"location":"containerization/container_scaling_helm/#known-limitations","text":"Core The HCL Digital Experience 9.5 Core can only be scaled to more than one Pod if you have performed a database transfer from the default packaged Derby database. Prior to that, any other additional Pod except for Pod-0 fails to start, since the default packaged Derby database does not allow for multiple Pods connecting to it. Persistence The Persistence used for Digital Asset Management currently supports scaling only with the updated persistence feature. For more information, see Digital Asset Management persistence architecture . Parent topic: Overview of the Helm architecture","title":"Known limitations"},{"location":"containerization/container_staging/","text":"Container Staging This section describes how to move from an existing HCL Portal environment to a containerized Digital Experience environment. Prerequisite The target environment that is existing in a customer-owned Kubernetes environment requires HCL Digital Experience 9.5 and IBM WebSphere Application Server 9.0.5. The HCL Digital Experience and IBM WebSphere Application Server product versions for the source and target environment must be at the same level, though it is sufficient to be on IBM WebSphere Application Server 8.5.5.x with JDK 8. Export the source HCL Portal server Follow these steps to export the source HCL Portal server. Upgrade the source environment. Using the IBM Installation Manager, upgrade the HCL Portal product to CF17 or later and HCL Portal 9.5. Log in to the machine where the source environment is located and set the ulimit -n to 24000 . For example, ulimit - n 24000 . Verify that the HCL Portal server is started. Navigate to the PortalServer/bin directory to export the base server. /opt/HCL/wp_profile/PortalServer/bin/xmlaccess.sh -url http://mysource.machine.fqdn:10039/wps/config -user <your DX admin user> \u2013password <your DX admin user password> \u2013in /opt/HCL/PortalServer/doc/xml-samples/ExportRelease.xml -out /tmp/ExportReleaseResults.xml Save the output XML file (ExportReleaseResults.xml) to an external or shared drive, for use later when importing to the target environment. Export the content for each Virtual Portal that exists in the source environment, renaming each file uniquely for easy identification. /opt/HCL/wp_profile/PortalServer/bin/xmlaccess.sh -url http://mysource.machine.fqdn:10039/wps/config/vpcontextroot -user <your DX admin user> \u2013password <your DX admin user password> \u2013in /opt/HCL/PortalServer/doc/xml-samples/ExportUniqueRelease.xml -out /tmp/ExportVP1Results.xml Save the Virtual Portal output files to an external or shared drive for later use when importing to the target environment. Save the /opt/HCL/wp_profile/PortalServer/deployed/archive directory files to an external or shared drive, for later use when importing to the target environment. If you are using PZN rules, export the PZN rules using the Personalization Administration Portlet functions and save the generated Workspace.nodes file to an external or shared drive, for later use when importing to the target environment. Log in to the HCL Portal Home Page. Navigate to Personalization > Business Rules > Extra Actions > Export . Save the output file. When applicable, save all custom files (application and theme EAR files, WAR files) to an external or shared drive, for use later when importing to the target environment. Import the source HCL Portal server Log in to the machine from where you will access your HCL Portal Container. Log in to the machine from where you will access your HCL Portal Container. Download, install, and log in to the command line client for your Kubernetes environment according to the client instructions. For OpenShift, that is Red Hat OpenShift Command Line Client. For Non OpenShift, that is the Kubectl command line tool. With only a single instance of an HCL Portal container running, exec in, and ensure the ulimit -n value is at least 24000 . Empty the base HCL Portal server. OpenShift: oc exec \u2013it dx-deployment-nnnnn /bin/bash Non OpenShift: kubectl exec \u2013it dx-deployment-nnnnn /bin/bash 2. ``` /opt/HCL/wp_profile/ConfigEngine/ConfigEngine.sh empty-portal \u2013DWasPassword= \u2013DPortalAdminPwd= The output displays a **BUILD SUCCESSFUL** message. If not, check the /opt/HCL/wp\\_profile/ConfigEngine/log/ConfigTrace.log for errors. 5. Clean up the remaining content in the target server by using XML Access: ``` /opt/HCL/wp_profile/PortalServer/bin/xmlaccess.sh -url http://my.target.fqdn/wps/config -user <your DX admin user> \u2013password <your DX admin user password> \u2013in /opt/HCL/PortalServer/doc/xml-samples/Task.xml -out /tmp/task_result.xml ``` The output displays a **BUILD SUCCESSFUL** message. If not, check the /opt/HCL/wp\\_profile/logs/WebSphere\\_Portal/SystemOut.log for errors. 6. Copy the output XML files, custom EAR and WAR files, Workspace.nodes file, and the ../deployed/archive directory files to a location on this local machine, making sure to preserve the file names and structure from the external or shared drive and then into the DX container. 1. ``` cp /drive/* /tmp/ 2. OpenShift: ``` oc cp /tmp/* dx-deployment-nnnnn:/tmp/ ``` Non OpenShift: ``` kubectl cp /tmp/* dx-deployment-nnnnn:/tmp/ ``` Create a directory under /opt/HCL/wp_profile to house any custom code or shared libraries. ``` mkdir \u2013p /opt/HCL/wp_profile/customApps **Note:** In any containerized environment, all custom code and shared libraries need to exist under the persisted profile volume. 8. Move the copied files to the appropriate locations in the container. 1. ``` mv /tmp/custom.ear /opt/HCL/wp_profile/customApps/ 2. ``` mv /tmp/deployed/archive/* /opt/HCL/wp_profile/PortalServer/deployed/archive/ 9. Deploy custom applications, predeployed portlets, or themes. 10. Configure any required syndication properties in the WCM ConfigService. For example, enabling memberfixer to run during syndication. 11. Create any required configuration items. For example, URLs, namespace bindings, etc. 12. Import the source server base content into the HCL Portal server in the container. 1. OpenShift: ``` oc exec \u2013it dx-deployment-nnnnn /bin/bash ``` Non OpenShift: ``` kubectl exec \u2013it dx-deployment-nnnnn /bin/bash ``` 2. ``` /opt/HCL/wp_profile/PortalServer/bin/xmlaccess.sh -url http://my.target.fqdn/wps/config -user <your DX admin user> -password <your DX admin user password> -in /tmp/ExportReleaseResults.xml -out /tmp/ExportReleaseResults_ImportResult.xml The output displays a successful execution. If not, check /tmp/ExportReleaseResults\\_ImportResult.xml for errors. Update the WCM content in the HCL Portal server instance: /opt/HCL/wp_profile/ConfigEngine/ConfigEngine.sh update-wcm -DWasPassword=<your WAS admin user password> -DPortalAdminPwd=<your DX admin user password> The output displays a BUILD SUCCESSFUL message. If not, check the /opt/HCL/wp_profile/ConfigEngine/log/ConfigTrace.log for errors. If you are using PZN rules, import the PZN rules by using the Personalization Administration Portlet functions. Log in to the HCL Portal home page. Navigate to Personalization > Business Rules > Extra Actions > Import . Browse to the /tmp/Workspace.nodes file and click Import . Log in to the HCL Portal home page and verify that the base server is functioning correctly: http://my.target.fqdn/wps/portal Check the /opt/HCL/wp_profile/logs/WebSphere_Portal/SystemOut.log to ensure that there are no startup errors. Create all of your Virtual Portals. /opt/HCL/wp_profile/ConfigEngine/ConfigEngine.sh create-virtual-portal -DWasPassword=<your WAS admin user password> -DPortalAdminPwd=<your DX admin user password> -DVirtualPortalTitle=VirtualPortal1 -DVirtualPortalRealm=VirtualPortal1Realm -DVirtualPortalContext=VirtualPortal1 For each Virtual Portal, import the content using XML Access. Make sure that the context root and the Virtual Portal name both match in the XML Access command. /opt/HCL/wp_profile/PortalServer/bin/xmlaccess.sh -url http://my.target.fqdn/wps/config/VirtualPortal1 -user <your DX admin user> -password <your DX admin user password> -in /tmp/ExportVP1Results.xml -out /tmp/ExportVP1Results_ImportResults.xml Restart the HCL Portal server and check /opt/HCL/wp_profile/logs/WebSphere_Portal/SystemOut.log to ensure no startup errors. Syndicate the source and target environments Follow these steps to syndicate the source and target environments. Note: If you have larger libraries, the default database must be transferred to any of the supported databases. For information about supported databases, see Database Management Systems . If you want to know more about transferring the default database of the DX 9.5 Container to IBM DB2, see Transfer HCL Digital Experience 9.5 container default database to IBM DB2 . Since the Kubernetes deployment typically allows only SSL traffic, you need to update the SSL Signer certificates for the Syndicator and Subscriber setups so that they can communicate with each other. To do this, log into the WAS console ( https://machine_name/ibm/console or https://machine_name:port/ibm/console ) and go to the Signer certificates page that is available in the Security > SSL certificate and key management menu: Select Retrieve from port and create the signer certificate, and then save the certificate. Log in to HCL Portal instance to configure syndication: http://my.target.fqdn/wps/portal. Navigate to Administration > Security > Credential Vault > Add a Vault Slot . On the Credential Vault page, select New and provide the following: Name - enter the name for the vault slot. Vault resource associated with vault slot - select new and enter the vault resource name. Vault slot is shared check box - tick this check box and provide the credentials for a user that has appropriate access on the source/syndication system: Shared userid , Shared password , and Confirm password . Click OK to save the changes. Navigate to Portal Content > Subscribers . Click Subscribe Now . In the Subscribe to a syndicator pop-up, provide the following: Syndicator URL Syndicator Name Subscriber Name Credential Vault Slot created in step 2. Click Next . Select the libraries to syndicate and the Scope of the syndication. Click Finish . If you have Virtual Portals, you must repeat the syndication steps for each Virtual Portal. If needed, configure library permissions when syndication is completed. Note: As with syndication between on-premise setups, it is possible to do a one-way syndication from an earlier to a later release. You do not need to disable Practitioner Studio to do this syndication. Parent topic: Digital Experience Application deployment","title":"Container Staging"},{"location":"containerization/container_staging/#container-staging","text":"This section describes how to move from an existing HCL Portal environment to a containerized Digital Experience environment.","title":"Container Staging"},{"location":"containerization/container_staging/#prerequisite","text":"The target environment that is existing in a customer-owned Kubernetes environment requires HCL Digital Experience 9.5 and IBM WebSphere Application Server 9.0.5. The HCL Digital Experience and IBM WebSphere Application Server product versions for the source and target environment must be at the same level, though it is sufficient to be on IBM WebSphere Application Server 8.5.5.x with JDK 8.","title":"Prerequisite"},{"location":"containerization/container_staging/#export-the-source-hcl-portal-server","text":"Follow these steps to export the source HCL Portal server. Upgrade the source environment. Using the IBM Installation Manager, upgrade the HCL Portal product to CF17 or later and HCL Portal 9.5. Log in to the machine where the source environment is located and set the ulimit -n to 24000 . For example, ulimit - n 24000 . Verify that the HCL Portal server is started. Navigate to the PortalServer/bin directory to export the base server. /opt/HCL/wp_profile/PortalServer/bin/xmlaccess.sh -url http://mysource.machine.fqdn:10039/wps/config -user <your DX admin user> \u2013password <your DX admin user password> \u2013in /opt/HCL/PortalServer/doc/xml-samples/ExportRelease.xml -out /tmp/ExportReleaseResults.xml Save the output XML file (ExportReleaseResults.xml) to an external or shared drive, for use later when importing to the target environment. Export the content for each Virtual Portal that exists in the source environment, renaming each file uniquely for easy identification. /opt/HCL/wp_profile/PortalServer/bin/xmlaccess.sh -url http://mysource.machine.fqdn:10039/wps/config/vpcontextroot -user <your DX admin user> \u2013password <your DX admin user password> \u2013in /opt/HCL/PortalServer/doc/xml-samples/ExportUniqueRelease.xml -out /tmp/ExportVP1Results.xml Save the Virtual Portal output files to an external or shared drive for later use when importing to the target environment. Save the /opt/HCL/wp_profile/PortalServer/deployed/archive directory files to an external or shared drive, for later use when importing to the target environment. If you are using PZN rules, export the PZN rules using the Personalization Administration Portlet functions and save the generated Workspace.nodes file to an external or shared drive, for later use when importing to the target environment. Log in to the HCL Portal Home Page. Navigate to Personalization > Business Rules > Extra Actions > Export . Save the output file. When applicable, save all custom files (application and theme EAR files, WAR files) to an external or shared drive, for use later when importing to the target environment.","title":"Export the source HCL Portal server"},{"location":"containerization/container_staging/#import-the-source-hcl-portal-server","text":"Log in to the machine from where you will access your HCL Portal Container. Log in to the machine from where you will access your HCL Portal Container. Download, install, and log in to the command line client for your Kubernetes environment according to the client instructions. For OpenShift, that is Red Hat OpenShift Command Line Client. For Non OpenShift, that is the Kubectl command line tool. With only a single instance of an HCL Portal container running, exec in, and ensure the ulimit -n value is at least 24000 . Empty the base HCL Portal server. OpenShift: oc exec \u2013it dx-deployment-nnnnn /bin/bash Non OpenShift: kubectl exec \u2013it dx-deployment-nnnnn /bin/bash 2. ``` /opt/HCL/wp_profile/ConfigEngine/ConfigEngine.sh empty-portal \u2013DWasPassword= \u2013DPortalAdminPwd= The output displays a **BUILD SUCCESSFUL** message. If not, check the /opt/HCL/wp\\_profile/ConfigEngine/log/ConfigTrace.log for errors. 5. Clean up the remaining content in the target server by using XML Access: ``` /opt/HCL/wp_profile/PortalServer/bin/xmlaccess.sh -url http://my.target.fqdn/wps/config -user <your DX admin user> \u2013password <your DX admin user password> \u2013in /opt/HCL/PortalServer/doc/xml-samples/Task.xml -out /tmp/task_result.xml ``` The output displays a **BUILD SUCCESSFUL** message. If not, check the /opt/HCL/wp\\_profile/logs/WebSphere\\_Portal/SystemOut.log for errors. 6. Copy the output XML files, custom EAR and WAR files, Workspace.nodes file, and the ../deployed/archive directory files to a location on this local machine, making sure to preserve the file names and structure from the external or shared drive and then into the DX container. 1. ``` cp /drive/* /tmp/ 2. OpenShift: ``` oc cp /tmp/* dx-deployment-nnnnn:/tmp/ ``` Non OpenShift: ``` kubectl cp /tmp/* dx-deployment-nnnnn:/tmp/ ``` Create a directory under /opt/HCL/wp_profile to house any custom code or shared libraries. ``` mkdir \u2013p /opt/HCL/wp_profile/customApps **Note:** In any containerized environment, all custom code and shared libraries need to exist under the persisted profile volume. 8. Move the copied files to the appropriate locations in the container. 1. ``` mv /tmp/custom.ear /opt/HCL/wp_profile/customApps/ 2. ``` mv /tmp/deployed/archive/* /opt/HCL/wp_profile/PortalServer/deployed/archive/ 9. Deploy custom applications, predeployed portlets, or themes. 10. Configure any required syndication properties in the WCM ConfigService. For example, enabling memberfixer to run during syndication. 11. Create any required configuration items. For example, URLs, namespace bindings, etc. 12. Import the source server base content into the HCL Portal server in the container. 1. OpenShift: ``` oc exec \u2013it dx-deployment-nnnnn /bin/bash ``` Non OpenShift: ``` kubectl exec \u2013it dx-deployment-nnnnn /bin/bash ``` 2. ``` /opt/HCL/wp_profile/PortalServer/bin/xmlaccess.sh -url http://my.target.fqdn/wps/config -user <your DX admin user> -password <your DX admin user password> -in /tmp/ExportReleaseResults.xml -out /tmp/ExportReleaseResults_ImportResult.xml The output displays a successful execution. If not, check /tmp/ExportReleaseResults\\_ImportResult.xml for errors. Update the WCM content in the HCL Portal server instance: /opt/HCL/wp_profile/ConfigEngine/ConfigEngine.sh update-wcm -DWasPassword=<your WAS admin user password> -DPortalAdminPwd=<your DX admin user password> The output displays a BUILD SUCCESSFUL message. If not, check the /opt/HCL/wp_profile/ConfigEngine/log/ConfigTrace.log for errors. If you are using PZN rules, import the PZN rules by using the Personalization Administration Portlet functions. Log in to the HCL Portal home page. Navigate to Personalization > Business Rules > Extra Actions > Import . Browse to the /tmp/Workspace.nodes file and click Import . Log in to the HCL Portal home page and verify that the base server is functioning correctly: http://my.target.fqdn/wps/portal Check the /opt/HCL/wp_profile/logs/WebSphere_Portal/SystemOut.log to ensure that there are no startup errors. Create all of your Virtual Portals. /opt/HCL/wp_profile/ConfigEngine/ConfigEngine.sh create-virtual-portal -DWasPassword=<your WAS admin user password> -DPortalAdminPwd=<your DX admin user password> -DVirtualPortalTitle=VirtualPortal1 -DVirtualPortalRealm=VirtualPortal1Realm -DVirtualPortalContext=VirtualPortal1 For each Virtual Portal, import the content using XML Access. Make sure that the context root and the Virtual Portal name both match in the XML Access command. /opt/HCL/wp_profile/PortalServer/bin/xmlaccess.sh -url http://my.target.fqdn/wps/config/VirtualPortal1 -user <your DX admin user> -password <your DX admin user password> -in /tmp/ExportVP1Results.xml -out /tmp/ExportVP1Results_ImportResults.xml Restart the HCL Portal server and check /opt/HCL/wp_profile/logs/WebSphere_Portal/SystemOut.log to ensure no startup errors.","title":"Import the source HCL Portal server"},{"location":"containerization/container_staging/#syndicate-the-source-and-target-environments","text":"Follow these steps to syndicate the source and target environments. Note: If you have larger libraries, the default database must be transferred to any of the supported databases. For information about supported databases, see Database Management Systems . If you want to know more about transferring the default database of the DX 9.5 Container to IBM DB2, see Transfer HCL Digital Experience 9.5 container default database to IBM DB2 . Since the Kubernetes deployment typically allows only SSL traffic, you need to update the SSL Signer certificates for the Syndicator and Subscriber setups so that they can communicate with each other. To do this, log into the WAS console ( https://machine_name/ibm/console or https://machine_name:port/ibm/console ) and go to the Signer certificates page that is available in the Security > SSL certificate and key management menu: Select Retrieve from port and create the signer certificate, and then save the certificate. Log in to HCL Portal instance to configure syndication: http://my.target.fqdn/wps/portal. Navigate to Administration > Security > Credential Vault > Add a Vault Slot . On the Credential Vault page, select New and provide the following: Name - enter the name for the vault slot. Vault resource associated with vault slot - select new and enter the vault resource name. Vault slot is shared check box - tick this check box and provide the credentials for a user that has appropriate access on the source/syndication system: Shared userid , Shared password , and Confirm password . Click OK to save the changes. Navigate to Portal Content > Subscribers . Click Subscribe Now . In the Subscribe to a syndicator pop-up, provide the following: Syndicator URL Syndicator Name Subscriber Name Credential Vault Slot created in step 2. Click Next . Select the libraries to syndicate and the Scope of the syndication. Click Finish . If you have Virtual Portals, you must repeat the syndication steps for each Virtual Portal. If needed, configure library permissions when syndication is completed. Note: As with syndication between on-premise setups, it is possible to do a one-way syndication from an earlier to a later release. You do not need to disable Practitioner Studio to do this syndication. Parent topic: Digital Experience Application deployment","title":"Syndicate the source and target environments"},{"location":"containerization/container_upgrade_overview/","text":"Upgrade options for containerized deployments HCL Digital Experience on containerized platforms is constantly evolving and incorporating customer feedback. Some of these improvements need extra manual steps to get to the latest version. To make this journey manageable and transparent, this topic shows all possible starting scenarios and their upgrade path. Fresh install For fresh installations on any containerized platform, see Deploying container platforms using Helm . Upgrade from any Operator-based deployment Beginning with HCL Digital Experience 9.5 Container Update CF200, HCL has discontinued releasing DX Operator-based deployments and provides support only for Helm-based deployments . HCL no longer provides further updates or code fixes for Operator-based deployments. HCL requires all customers to migrate to Helm-based deployments for their DX installations. HCL will work with customers as they transition from Operator-based to Helm-based deployments. For more information on the migration process, see Migrating from Operator to Helm deployments . Upgrade your Helm-based deployment For initial Helm-based deployment from CF196 or CF197, you must Migrate to new DAM DB in Helm-based deployments . If you are not sure if your deployment is based on the first version of the Digital Asset Management (DAM) persistence solution, run the following commands to check: kubectl get -n <namespace> pod/<deployment-name>-persistence-rw-0 kubectl get -n <namespace> pod/<deployment-name>-persistence-node-0 Example: kubectl get -n dxns pod/dx-deployment-persistence-rw-0 kubectl get -n dxns pod/dx-deployment-persistence-node-0 One of commands will return an error message similar to the following: Error from server (NotFound): pods \"dx-deployment-persistence-rw-0\" not found If the first command returned an error, while the second command was successful, you are already on the new database model and can follow the normal upgrade path. For more information, see Update deployment to a later version . Otherwise, you must upgrade to the new HCL DX persistence solution. For more information, see Migrate to new DAM DB in Helm-based deployments . Parent topic: Digital Experience on containerized platforms","title":"Upgrade options for containerized deployments"},{"location":"containerization/container_upgrade_overview/#upgrade-options-for-containerized-deployments","text":"HCL Digital Experience on containerized platforms is constantly evolving and incorporating customer feedback. Some of these improvements need extra manual steps to get to the latest version. To make this journey manageable and transparent, this topic shows all possible starting scenarios and their upgrade path.","title":"Upgrade options for containerized deployments"},{"location":"containerization/container_upgrade_overview/#fresh-install","text":"For fresh installations on any containerized platform, see Deploying container platforms using Helm .","title":"Fresh install"},{"location":"containerization/container_upgrade_overview/#upgrade-from-any-operator-based-deployment","text":"Beginning with HCL Digital Experience 9.5 Container Update CF200, HCL has discontinued releasing DX Operator-based deployments and provides support only for Helm-based deployments . HCL no longer provides further updates or code fixes for Operator-based deployments. HCL requires all customers to migrate to Helm-based deployments for their DX installations. HCL will work with customers as they transition from Operator-based to Helm-based deployments. For more information on the migration process, see Migrating from Operator to Helm deployments .","title":"Upgrade from any Operator-based deployment"},{"location":"containerization/container_upgrade_overview/#upgrade-your-helm-based-deployment","text":"For initial Helm-based deployment from CF196 or CF197, you must Migrate to new DAM DB in Helm-based deployments . If you are not sure if your deployment is based on the first version of the Digital Asset Management (DAM) persistence solution, run the following commands to check: kubectl get -n <namespace> pod/<deployment-name>-persistence-rw-0 kubectl get -n <namespace> pod/<deployment-name>-persistence-node-0 Example: kubectl get -n dxns pod/dx-deployment-persistence-rw-0 kubectl get -n dxns pod/dx-deployment-persistence-node-0 One of commands will return an error message similar to the following: Error from server (NotFound): pods \"dx-deployment-persistence-rw-0\" not found If the first command returned an error, while the second command was successful, you are already on the new database model and can follow the normal upgrade path. For more information, see Update deployment to a later version . Otherwise, you must upgrade to the new HCL DX persistence solution. For more information, see Migrate to new DAM DB in Helm-based deployments . Parent topic: Digital Experience on containerized platforms","title":"Upgrade your Helm-based deployment"},{"location":"containerization/core_interactions_kubernetes/","text":"DX 9.5 Core Interactions with Kubernetes This section provides more detailed information about how the HCL Digital Experience 9.5 Core container interacts with Kubernetes. Understanding this information may assist in interpreting observed behavior or in troubleshooting your HCL DX 9.5 Container deployments in Helm. Volume mount points The persistent volumes used by the DX Core pod are mounted to the following directories in the Core container: profile (WebSphere Application Server profiles for the WebSphere_Portal application server, shared between pods): /opt/HCL/profiles log (WebSphere Application Server logs for the WebSphere_Portal application server, unique to a pod): /opt/HCL/logs tranlog (transaction log, unique to a pod): /opt/HCL/tranlog The logs directory /opt/HCL/wp_profile/logs is symbolically linked to /opt/HCL/logs. The tranlog directory /opt/HCL/wp_profile/tranlog is symbolically linked to /opt/HCL/tranlog. Additional Information about profile directories The profile persistent volume (and thus, the /opt/HCL/profiles directory) contains a directory per container version, named: prof_ < product-version > _ < container-version > for example, prof_95_CF199 . During the Core container startup process the latest version directory is symbolically linked from /opt/HCL/wp_profile. Core container Version-to-Version upgrade When a new version (tag) of the DX 9.5 Core container is specified in your custom values YAML file and you run helm upgrade , Kubernetes recycles all the pods in your Core stateful set one by one. It starts with the highest numbered pod and work downwards, only recycling the next pod when the current pod reports that it is \"ready\". Whenever a Core container is started, it compares its container version with the latest profile version. If they do not match, perform an Update using the process set out below: Kubernetes recycles the highest numbered pod, supplying the new DX 9.5 Container image. Highest numbered pod creates a new profile directory on the shared volume for the new version (named as described above) with contents copied from the previous version profile directory. Pod switches its symbolic link for /opt/HCL/wp_profile to the new directory. Pod performs the actual upgrade (\" applyCF \") and, when this is complete, is declared \"ready\" to Kubernetes. Kubernetes recycles the next highest numbered pod. Pod determines that a profile directory is already populated for the new HCL DX 9.5 container image version, and so, links to that as normal; and onwards Steps 5 and 6 are repeated until there are no further pods using the old image. Note: If you have more than one DX Core pod, those not yet recycled will still use the previous profile directory. Therefore, any configuration changes made during this time that are stored to the profile (for example, the installation of a portlet) are lost, as they are made to the previous profile after it has already been copied. We recommend that you avoid making any configuration changes while a Version-to-Version upgrade is in progress. As of HCL DX 9.5 Container Update CF199, DX profile directories are not automatically removed. If your DX 9.5 deployment has been around through a number of Container upgrades, you may wish to consider removing very old profile directories to save space (leaving, at least, two of the most recent profile directories). Parent topic: Overview of the Helm architecture","title":"DX 9.5 Core Interactions with Kubernetes"},{"location":"containerization/core_interactions_kubernetes/#dx-95-core-interactions-with-kubernetes","text":"This section provides more detailed information about how the HCL Digital Experience 9.5 Core container interacts with Kubernetes. Understanding this information may assist in interpreting observed behavior or in troubleshooting your HCL DX 9.5 Container deployments in Helm.","title":"DX 9.5 Core Interactions with Kubernetes"},{"location":"containerization/core_interactions_kubernetes/#volume-mount-points","text":"The persistent volumes used by the DX Core pod are mounted to the following directories in the Core container: profile (WebSphere Application Server profiles for the WebSphere_Portal application server, shared between pods): /opt/HCL/profiles log (WebSphere Application Server logs for the WebSphere_Portal application server, unique to a pod): /opt/HCL/logs tranlog (transaction log, unique to a pod): /opt/HCL/tranlog The logs directory /opt/HCL/wp_profile/logs is symbolically linked to /opt/HCL/logs. The tranlog directory /opt/HCL/wp_profile/tranlog is symbolically linked to /opt/HCL/tranlog.","title":"Volume mount points"},{"location":"containerization/core_interactions_kubernetes/#additional-information-about-profile-directories","text":"The profile persistent volume (and thus, the /opt/HCL/profiles directory) contains a directory per container version, named: prof_ < product-version > _ < container-version > for example, prof_95_CF199 . During the Core container startup process the latest version directory is symbolically linked from /opt/HCL/wp_profile.","title":"Additional Information about profile directories"},{"location":"containerization/core_interactions_kubernetes/#core-container-version-to-version-upgrade","text":"When a new version (tag) of the DX 9.5 Core container is specified in your custom values YAML file and you run helm upgrade , Kubernetes recycles all the pods in your Core stateful set one by one. It starts with the highest numbered pod and work downwards, only recycling the next pod when the current pod reports that it is \"ready\". Whenever a Core container is started, it compares its container version with the latest profile version. If they do not match, perform an Update using the process set out below: Kubernetes recycles the highest numbered pod, supplying the new DX 9.5 Container image. Highest numbered pod creates a new profile directory on the shared volume for the new version (named as described above) with contents copied from the previous version profile directory. Pod switches its symbolic link for /opt/HCL/wp_profile to the new directory. Pod performs the actual upgrade (\" applyCF \") and, when this is complete, is declared \"ready\" to Kubernetes. Kubernetes recycles the next highest numbered pod. Pod determines that a profile directory is already populated for the new HCL DX 9.5 container image version, and so, links to that as normal; and onwards Steps 5 and 6 are repeated until there are no further pods using the old image. Note: If you have more than one DX Core pod, those not yet recycled will still use the previous profile directory. Therefore, any configuration changes made during this time that are stored to the profile (for example, the installation of a portlet) are lost, as they are made to the previous profile after it has already been copied. We recommend that you avoid making any configuration changes while a Version-to-Version upgrade is in progress. As of HCL DX 9.5 Container Update CF199, DX profile directories are not automatically removed. If your DX 9.5 deployment has been around through a number of Container upgrades, you may wish to consider removing very old profile directories to save space (leaving, at least, two of the most recent profile directories). Parent topic: Overview of the Helm architecture","title":"Core container Version-to-Version upgrade"},{"location":"containerization/credentialvaultslot/","text":"Create or update credential vault slot This topic describes the commands that are used to create or update credential vault slot in the DX server. Credential vault slot Command description Use the create-credential-vault command to create or update a credential vault slot. dxclient create-credential-vault Help command This command shows the help information for create-credential-vault command usage: dxclient create-credential-vault -h Command options Use this attribute to specify the protocol to connect to the server: -dxProtocol <value> Use this attribute to specify the hostname of the target server: -hostname <value> Use this attribute to specify the port on which to connect to the server (for Kubernetes Environment, dxPort is 443): -dxPort <value> Use this attribute to specify the username that is required for authenticating with the server: -dxUsername <value> Use this attribute to specify the password that is required for authenticating with the server: -dxPassword <value> Use this attribute to specify the path to DX configuration endpoint: -xmlConfigPath <value> Use this attribute to specify the credential vault segment slot name: -credentialSlotName <value> Use this attribute to specify the credential vault Username: -vaultUsername <value> Use this attribute to specify the credential vault UserGroup: -vaultUserGroup <value> Use this attribute to specify the credential vault shared userid password: -vaultPassword <value> Use this attribute to specify the credential vault segment name and the default is set to DefaultAdminSegment : -vaultSegmentName <value> Use this attribute to specify the credential vault segment description: -vaultDescription <value> Example: dxclient create-credential-vault -dxProtocol <dxProtocol> -hostname <hostname> -dxPort <dxPort> -dxUsername <dxUsername> -dxPassword <dxPassword> -xmlConfigPath <xmlConfigPath> -credentialSlotName <credentialSlotName> -vaultUsername <vaultUsername> -vaultPassword <vaultPassword> Parent topic: DXClient Artifact Types","title":"Create or update credential vault slot"},{"location":"containerization/credentialvaultslot/#create-or-update-credential-vault-slot","text":"This topic describes the commands that are used to create or update credential vault slot in the DX server.","title":"Create or update credential vault slot"},{"location":"containerization/credentialvaultslot/#credential-vault-slot","text":"Command description Use the create-credential-vault command to create or update a credential vault slot. dxclient create-credential-vault Help command This command shows the help information for create-credential-vault command usage: dxclient create-credential-vault -h Command options Use this attribute to specify the protocol to connect to the server: -dxProtocol <value> Use this attribute to specify the hostname of the target server: -hostname <value> Use this attribute to specify the port on which to connect to the server (for Kubernetes Environment, dxPort is 443): -dxPort <value> Use this attribute to specify the username that is required for authenticating with the server: -dxUsername <value> Use this attribute to specify the password that is required for authenticating with the server: -dxPassword <value> Use this attribute to specify the path to DX configuration endpoint: -xmlConfigPath <value> Use this attribute to specify the credential vault segment slot name: -credentialSlotName <value> Use this attribute to specify the credential vault Username: -vaultUsername <value> Use this attribute to specify the credential vault UserGroup: -vaultUserGroup <value> Use this attribute to specify the credential vault shared userid password: -vaultPassword <value> Use this attribute to specify the credential vault segment name and the default is set to DefaultAdminSegment : -vaultSegmentName <value> Use this attribute to specify the credential vault segment description: -vaultDescription <value> Example: dxclient create-credential-vault -dxProtocol <dxProtocol> -hostname <hostname> -dxPort <dxPort> -dxUsername <dxUsername> -dxPassword <dxPassword> -xmlConfigPath <xmlConfigPath> -credentialSlotName <credentialSlotName> -vaultUsername <vaultUsername> -vaultPassword <vaultPassword> Parent topic: DXClient Artifact Types","title":"Credential vault slot"},{"location":"containerization/customization/","text":"Customizing your container deployment This section outlines the customization options when deploying HCL Digital Experience Container. Customizing the container deployment This section describes how to customize your HCL Digital Experience 9.5 container deployment. Replicating the DynaCache service This section describes how to replicate Dynacache service in HCL Digital Experience by customizing timeout properties in the WAS Resource Environment Provider (REP). Transfer HCL Digital Experience 9.5 container default database to IBM DB2 HCL Digital Experience 9.5 installs a copy of Derby as the default database. Administrator users can follow these steps to transfer the default database configuration detail to IBM DB2, if preferred for use as the relational database for HCL Digital Experience 9.5 container deployment data. Configure Remote Search in Docker This section shows how to configure Remote Search for your HCL Digital Experience 9.5 Docker containers. Configure Remote Search in OpenShift and Kubernetes This section shows how to configure Remote Search for your HCL Digital Experience 9.5 environments on supported Red Hat OpenShift and Kubernetes container platforms. Configure Remote Search using REST APIs This section shows how to configure Remote Search for your HCL Digital Experience 9.5 environments on a traditional IBM WebSphere Application Server Network Deployment-based cluster DX deployment cluster, a Docker container, or on supported Red Hat OpenShift and Kubernetes container platforms using REST APIs. Configure the OpenLDAP container image to the HCL Digital Experience 9.5 Container Deployment Read more about configuring the OpenLDAP container image to the 9.5 container deployment, which is available with HCL Digital Experience 9.5 Container Update release CF181 and later. Configure Digital Asset Management in virtual portals This section provides steps to configure Digital Asset Management support in virtual portals. Customizing the HCL DX URL when deployed to container platforms This section describes the procedures to define custom context root URLs, or no context root URL definitions, when deploying your HCL DX 9.5 software to the supported container platforms. Sample storage class and volume for HCL Digital Experience 9.5 containers Learn how to set storage class and volume using a sample storage class and volume scripts for HCL Digital Experience 9.5 CF171 and higher container releases deployed to Amazon Elastic Container Service (EKS) or Red Hat OpenShift environment. Parent topic: Container administration 9.5","title":"Customizing your container deployment"},{"location":"containerization/customization/#customizing-your-container-deployment","text":"This section outlines the customization options when deploying HCL Digital Experience Container. Customizing the container deployment This section describes how to customize your HCL Digital Experience 9.5 container deployment. Replicating the DynaCache service This section describes how to replicate Dynacache service in HCL Digital Experience by customizing timeout properties in the WAS Resource Environment Provider (REP). Transfer HCL Digital Experience 9.5 container default database to IBM DB2 HCL Digital Experience 9.5 installs a copy of Derby as the default database. Administrator users can follow these steps to transfer the default database configuration detail to IBM DB2, if preferred for use as the relational database for HCL Digital Experience 9.5 container deployment data. Configure Remote Search in Docker This section shows how to configure Remote Search for your HCL Digital Experience 9.5 Docker containers. Configure Remote Search in OpenShift and Kubernetes This section shows how to configure Remote Search for your HCL Digital Experience 9.5 environments on supported Red Hat OpenShift and Kubernetes container platforms. Configure Remote Search using REST APIs This section shows how to configure Remote Search for your HCL Digital Experience 9.5 environments on a traditional IBM WebSphere Application Server Network Deployment-based cluster DX deployment cluster, a Docker container, or on supported Red Hat OpenShift and Kubernetes container platforms using REST APIs. Configure the OpenLDAP container image to the HCL Digital Experience 9.5 Container Deployment Read more about configuring the OpenLDAP container image to the 9.5 container deployment, which is available with HCL Digital Experience 9.5 Container Update release CF181 and later. Configure Digital Asset Management in virtual portals This section provides steps to configure Digital Asset Management support in virtual portals. Customizing the HCL DX URL when deployed to container platforms This section describes the procedures to define custom context root URLs, or no context root URL definitions, when deploying your HCL DX 9.5 software to the supported container platforms. Sample storage class and volume for HCL Digital Experience 9.5 containers Learn how to set storage class and volume using a sample storage class and volume scripts for HCL Digital Experience 9.5 CF171 and higher container releases deployed to Amazon Elastic Container Service (EKS) or Red Hat OpenShift environment. Parent topic: Container administration 9.5","title":"Customizing your container deployment"},{"location":"containerization/customizing_container_deployment/","text":"Customizing the container deployment This section describes how to customize your HCL Digital Experience 9.5 container deployment. About this task Follow this procedure to deploy or update your HCL Portal deployment. DX 9.5 containerization is focused on deployment and it uses an operator-based deployment. Goals To introduce a supported containerized deployment that HCL Digital Experience can continually extend to provide customers with the best possible experience. To provide a high level of customization in the deployment and continue to expand on that, along with increased automation. Before you begin Customers need to follow the recommended deployment model to ensure the availability of future functions and prevent potential conflicts. Customizing the deployment requires updating the deploy/crds/git.cwp.pnp-hcl.com_v1_dxdeployment_cr.yamlfile located in the hcl-dx-cloud-scripts/deploy/crds directory in the HCL Digital Experience 9.5 platform packages deployed. Reference the HCL Digital Experience Deployment topic for the list of supported platforms and latest HCL DX 9.5 container package list files that can be downloaded from your HCL Digital Experience entitlements on the HCL Software License Portal. Once modified, the deployDx.sh or the updateDx.sh scripts should be run to perform (or update) the target deployment. Note: All modifications should be made to the custom resource instance and not the individual parts of the deployment. Procedure Create a backup of the git_v1_dxdeployment_cr.yaml file. Open the original file in edit mode. Find the line with the text labeled # Add fields here . Customizations should be done below this line. Add the following customizations as applicable: Volume Size By default, the volume size is 100 GB . This can be modified by changing the following: Note: The volume name and storageClassName should not be modified here. Resources By default, the resource requests are set at **2** CPU and **7G** RAM. These values can be changed. It is recommended to adjust the server heap size before changing these values. Note: Limits are not enforced in the initial 9.5 release. HCL DX 9.5 Container Update CF171 and higher Limits are enforced. Auto-scaling based on average CPU and memory utilization can be configured. Auto-scaling When using a Horizontal Pod Autoscale Service, by design, scaling up the amount of HCL DX 9.5 pods is done one at a time. HCL DX 9.5 processes will initiate the requested single instance at a given time until the instance starting is started, to manage scaling in a controlled manager from 1 to N minimum pods set. Each deployment takes approximately ~3 to 4 minutes to start, operating on typical hardware environments. Pod instance terminations are also managed with these control practices. Scaling is controlled in the configuration map with these settings, which can be configured. In this example, 5 is the maximum number of DX 9.5 Container pods requested: dx.deploy.dxcore.resources.scale.maxreplicas: '5' dx.deploy.dxcore.resources.scale.minreplicas: '1' Routes/Ingress By default in 9.5, base routes are created for the deployment. HCL DX 9.5 Container Update CF171 and higher allows a customer to configure the available routes. You can enable or disable any route and change the name of the secret to be used in the TLS context. The Configuration Wizard is still impacted by the number of running instances. Probes The default readiness and liveness probes run against the ../ibm/console. This can and should be overridden. Notes: There are two types of checks: **command** runs a command against the server **http** hits either an http or an https URL. The syntax and required fields are shown in the above image. Logging By default, logging is done on the shared profile so all instances are writing to a single set of logs, with the volume set for each instance at **1G** . For diagnosing production issues this is not ideal. This option allows each instance to write the log to its own log directory. Notes: The environment must have a self-provisioning storage class provisioner. **Enabled** must be set to **true** . Adjusting the log settings must be done to prevent running out of disk storage. See the Logging and tracing for containers and new services Help Center topic for additional information. Ports By default, the deployment uses the default DX ports. The routes in these ports expose Portal through http and https . Note: If there is a need to configure the containerized Portal to use different ports, the defaults can be overwritten. Once modified, the deployDx.sh and the updateDx.sh scripts should be run to create (or update) the target deployment. Parent topic: Customizing your container deployment","title":"Customizing the container deployment"},{"location":"containerization/customizing_container_deployment/#customizing-the-container-deployment","text":"This section describes how to customize your HCL Digital Experience 9.5 container deployment.","title":"Customizing the container deployment"},{"location":"containerization/customizing_container_deployment/#about-this-task","text":"Follow this procedure to deploy or update your HCL Portal deployment. DX 9.5 containerization is focused on deployment and it uses an operator-based deployment. Goals To introduce a supported containerized deployment that HCL Digital Experience can continually extend to provide customers with the best possible experience. To provide a high level of customization in the deployment and continue to expand on that, along with increased automation.","title":"About this task"},{"location":"containerization/customizing_container_deployment/#before-you-begin","text":"Customers need to follow the recommended deployment model to ensure the availability of future functions and prevent potential conflicts. Customizing the deployment requires updating the deploy/crds/git.cwp.pnp-hcl.com_v1_dxdeployment_cr.yamlfile located in the hcl-dx-cloud-scripts/deploy/crds directory in the HCL Digital Experience 9.5 platform packages deployed. Reference the HCL Digital Experience Deployment topic for the list of supported platforms and latest HCL DX 9.5 container package list files that can be downloaded from your HCL Digital Experience entitlements on the HCL Software License Portal. Once modified, the deployDx.sh or the updateDx.sh scripts should be run to perform (or update) the target deployment. Note: All modifications should be made to the custom resource instance and not the individual parts of the deployment.","title":"Before you begin"},{"location":"containerization/customizing_container_deployment/#procedure","text":"Create a backup of the git_v1_dxdeployment_cr.yaml file. Open the original file in edit mode. Find the line with the text labeled # Add fields here . Customizations should be done below this line. Add the following customizations as applicable: Volume Size By default, the volume size is 100 GB . This can be modified by changing the following: Note: The volume name and storageClassName should not be modified here. Resources By default, the resource requests are set at **2** CPU and **7G** RAM. These values can be changed. It is recommended to adjust the server heap size before changing these values. Note: Limits are not enforced in the initial 9.5 release. HCL DX 9.5 Container Update CF171 and higher Limits are enforced. Auto-scaling based on average CPU and memory utilization can be configured. Auto-scaling When using a Horizontal Pod Autoscale Service, by design, scaling up the amount of HCL DX 9.5 pods is done one at a time. HCL DX 9.5 processes will initiate the requested single instance at a given time until the instance starting is started, to manage scaling in a controlled manager from 1 to N minimum pods set. Each deployment takes approximately ~3 to 4 minutes to start, operating on typical hardware environments. Pod instance terminations are also managed with these control practices. Scaling is controlled in the configuration map with these settings, which can be configured. In this example, 5 is the maximum number of DX 9.5 Container pods requested: dx.deploy.dxcore.resources.scale.maxreplicas: '5' dx.deploy.dxcore.resources.scale.minreplicas: '1' Routes/Ingress By default in 9.5, base routes are created for the deployment. HCL DX 9.5 Container Update CF171 and higher allows a customer to configure the available routes. You can enable or disable any route and change the name of the secret to be used in the TLS context. The Configuration Wizard is still impacted by the number of running instances. Probes The default readiness and liveness probes run against the ../ibm/console. This can and should be overridden. Notes: There are two types of checks: **command** runs a command against the server **http** hits either an http or an https URL. The syntax and required fields are shown in the above image. Logging By default, logging is done on the shared profile so all instances are writing to a single set of logs, with the volume set for each instance at **1G** . For diagnosing production issues this is not ideal. This option allows each instance to write the log to its own log directory. Notes: The environment must have a self-provisioning storage class provisioner. **Enabled** must be set to **true** . Adjusting the log settings must be done to prevent running out of disk storage. See the Logging and tracing for containers and new services Help Center topic for additional information. Ports By default, the deployment uses the default DX ports. The routes in these ports expose Portal through http and https . Note: If there is a need to configure the containerized Portal to use different ports, the defaults can be overwritten. Once modified, the deployDx.sh and the updateDx.sh scripts should be run to create (or update) the target deployment. Parent topic: Customizing your container deployment","title":"Procedure"},{"location":"containerization/customizing_kubernetes_eks_deployment/","text":"Customizing the Kubernetes EKS deployment This section describes how to customize your HCL Portal deployment. About this task Follow this procedure to deploy or update your HCL Portal deployment. DX 9.5 containerization is focused on deployment and it uses an operator-based deployment. Goals To introduce a supported containerized deployment that HCL Digital Experience can continually extend to provide customers with the best possible experience. To provide a high level of customization in the deployment and continue to expand on that, along with increased automation. Before you begin Customers need to follow the recommended deployment model to ensure the availability of future functions and prevent potential conflicts. Customizing the deployment requires updating the deploy/crds/git_v1_dxdeployment_cr.yaml file located in the hcl-dx-cloud-scripts/deploy/crds directory in the hcl-dx-kubernetes-v95-CF184 package downloaded from the HCL Software Licensing Portal. Once modified, the deployDx.sh or the updateDx.sh scripts should be run to perform (or update) the target deployment. Note: All modifications should be made to the custom resource instance and not the individual parts of the deployment. Procedure Create a backup of the git_v1_dxdeployment_cr.yaml file. Open the original file in edit mode. Find the line with the text labeled, # Add fields here . Customizations should be done below this line. Add the following customizations as applicable: Volume Size By default, the volume size is 100 GB . This can be modified by changing the following: Note: The volume name and storageClassName should not be modified here. Resources By default, the resource requests are set at **2** CPU and **7G** RAM. These values can be changed. It is recommended to adjust the server heap size before changing these values. Note: Limits are not enforced in the initial 9.5 release. Probes The default readiness and liveness probes run against the ../ibm/console. This can and should be overridden. Notes: There are two types of checks: **command** runs a command against the server **http** hits either an http or an https URL. The syntax and required fields are shown in the above image. Logging By default, logging is done on the shared profile so all instances are writing to a single set of logs, with the volume set for each instance at **1G** . For diagnosing production issues this is not ideal. This option allows each instance to write the log to its own log directory. Notes: The environment must have a self-provisioning storage class provisioner. **Enabled** must be set to **true** . Adjusting the log settings must be done to prevent running out of disk storage. Ports By default, the deployment uses the default DX ports. The routes in these ports expose Portal through http and https . Note: If there is a need to configure the containerized Portal to use different ports, the defaults can be overwritten. Once modified, the deployDx.sh and the updateDx.sh scripts should be run to create (or update) the target deployment. Parent topic: Deploy DX Container to Amazon EKS","title":"Customizing the Kubernetes EKS deployment"},{"location":"containerization/customizing_kubernetes_eks_deployment/#customizing-the-kubernetes-eks-deployment","text":"This section describes how to customize your HCL Portal deployment.","title":"Customizing the Kubernetes EKS deployment"},{"location":"containerization/customizing_kubernetes_eks_deployment/#about-this-task","text":"Follow this procedure to deploy or update your HCL Portal deployment. DX 9.5 containerization is focused on deployment and it uses an operator-based deployment. Goals To introduce a supported containerized deployment that HCL Digital Experience can continually extend to provide customers with the best possible experience. To provide a high level of customization in the deployment and continue to expand on that, along with increased automation.","title":"About this task"},{"location":"containerization/customizing_kubernetes_eks_deployment/#before-you-begin","text":"Customers need to follow the recommended deployment model to ensure the availability of future functions and prevent potential conflicts. Customizing the deployment requires updating the deploy/crds/git_v1_dxdeployment_cr.yaml file located in the hcl-dx-cloud-scripts/deploy/crds directory in the hcl-dx-kubernetes-v95-CF184 package downloaded from the HCL Software Licensing Portal. Once modified, the deployDx.sh or the updateDx.sh scripts should be run to perform (or update) the target deployment. Note: All modifications should be made to the custom resource instance and not the individual parts of the deployment.","title":"Before you begin"},{"location":"containerization/customizing_kubernetes_eks_deployment/#procedure","text":"Create a backup of the git_v1_dxdeployment_cr.yaml file. Open the original file in edit mode. Find the line with the text labeled, # Add fields here . Customizations should be done below this line. Add the following customizations as applicable: Volume Size By default, the volume size is 100 GB . This can be modified by changing the following: Note: The volume name and storageClassName should not be modified here. Resources By default, the resource requests are set at **2** CPU and **7G** RAM. These values can be changed. It is recommended to adjust the server heap size before changing these values. Note: Limits are not enforced in the initial 9.5 release. Probes The default readiness and liveness probes run against the ../ibm/console. This can and should be overridden. Notes: There are two types of checks: **command** runs a command against the server **http** hits either an http or an https URL. The syntax and required fields are shown in the above image. Logging By default, logging is done on the shared profile so all instances are writing to a single set of logs, with the volume set for each instance at **1G** . For diagnosing production issues this is not ideal. This option allows each instance to write the log to its own log directory. Notes: The environment must have a self-provisioning storage class provisioner. **Enabled** must be set to **true** . Adjusting the log settings must be done to prevent running out of disk storage. Ports By default, the deployment uses the default DX ports. The routes in these ports expose Portal through http and https . Note: If there is a need to configure the containerized Portal to use different ports, the defaults can be overwritten. Once modified, the deployDx.sh and the updateDx.sh scripts should be run to create (or update) the target deployment. Parent topic: Deploy DX Container to Amazon EKS","title":"Procedure"},{"location":"containerization/cw_containerdbtransfer_ibm_db2/","text":"Transfer HCL Digital Experience 9.5 container default database to IBM DB2 HCL Digital Experience 9.5 installs a copy of Derby as the default database. Administrator users can follow these steps to transfer the default database configuration detail to IBM DB2, if preferred for use as the relational database for HCL Digital Experience 9.5 container deployment data. The directions closely follow the Digital Experience database transfer steps provided for deployments to supported \"on-premises\" platforms, such as Windows, Linux, and AIX. The unique steps that account for differences in these instructions for use with an HCL Digital Experience 9.5 Docker container deployment as opposed to an on-premises Digital Experience installation are highlighted. The on-premises based HCL Digital Experience database transfer instructions can be viewed in this topic: DB2 worksheet: Transfer to multiple databases . These container deployment instructions cover the transfer of the default Derby database running on an HCL Digital Experience Container Update CF18 container image to an IBM DB2 Enterprise Version 11.1.0.0 database running on a CentOS Linux release 7.71908 server. The IBM DB2 11.5 Standard and Enterprise database is also supported for these procedures. In these instructions, the IBM DB2 database is installed to a supported on-premises platform (see IBM DB2 System Support requirements for a list of supported platforms ). The HCL Digital Experience 9.5 Docker container is deployed to a supported Docker or Kubernetes platform. The container version deployed in this example is Docker CE version 19.0.3.8. Video : HCL Digital Experience - Perform a Database Transfer on HCL Portal 9.5 Prerequisites The HCL Digital Experience 9.5 container image is deployed, and loaded to your Docker repository using the following command: docker load < hcl-dx-core-image-v95_CF18_20200427-2055.tar.gz See the HCL Digital Experience 9.5 topic Deployment for instructions and latest list of HCL Digital Experience 9.5 Container image and file names. IBM DB2 is installed on an on-premises server with a DNS hostname that is available to the HCL Digital Experience 9.5 deployed container. Start the HCL Digital Experience 9.5 Container in Docker Execute the following command to start the DX 9.5 container: docker run -d --add-host {database DNS name}:{database IP address} -p 10025-10045:10025-10045 -p 10200-10210:10200-10210 -v '{directory on the Docker host for DX container profile}':'/opt/HCL/wp_profile' {your repo name}:{your tag name} Note: An --add-host entry needs to be made to insert the DNS name of the IBM DB2 database server into the /etc/hosts file in the container running the Digital Experience 9.5 container. If, and only if, the DNS name of the DB2 server is already in a named server available to the container, then the --add-host parameter would not be needed. The ports for the Digital Experience 9.5 container (100025-10045) need to be mapped as well as the ports using by the Configuration Wizard. The Configuration Wizard is used to manage the transfer of the database. The Configuration Wizard uses ports in the range of 10200-10202. The HCL Digital Experience 9.5 container persists the profile information across restarts. This is persisted on the Docker host as {directory on docker host for DX container profile} in the run command above. The container will map /opt/HCL/wp_profile to this directory on the docker via the -v command. You need to specify the Docker repository and tag name as the reader has loaded the HCL Digital Experience container image into their docker repository. When this docker run command is executed, ensure time is allocated to check the profile as well as initialize the HCL Digital Experience 9.5 container instance. One can ensure that the HCL Digital Experience 9.5 container deployment is ready by \"tail\"-ing the file in the container located at /opt/HCL/wp_profile/logs/HCL Portal and HCL Web Content Manager/SystemOut.log. When the file displays the following message, the HCL Digital Experience 9.5 container instance is initialized: \u2026open for e- business One can access this file (as well as all others in the running container) via the following command: docker exec -it {container name} bash Transferring the Database First, ensure that your HCL Digital Experience 9.5 docker container can access the IBM DB2 on-premises platform server. Using the following command, one can simply \"ping\" the DNS name of the IBM DB2 database server and verify that it answers: docker exec -it {container name} bash If this is not successful, consult with your platform administrator for other methods to debug the network issues between a Docker container and Servers running external to Docker in your environment. Next, once connectivity is established, follow the directions for using the Configuration Wizard from the traditional (on-premises platform-based) Digital Experience database transfer steps to transfer the data from the default Derby database and configure the target IBM DB2 database server for use with the HCL Digital Experience 9.5 Docker container deployment. One can access the Configuration Wizard from a browser on the HCL Digital Experience 9.5 container deployment via the URL http://{docker host server}:10200/hcl/wizard. Proceed to the Digital Experience database transfer steps topic section Set Up a Stand-alone Server - Database Transfer . Specify the fully qualified DNS name of the database server as set above in the --add-host directive in the docker run command. Parent topic: Customizing your container deployment","title":"Transfer HCL Digital Experience 9.5 container default database to IBM DB2"},{"location":"containerization/cw_containerdbtransfer_ibm_db2/#transfer-hcl-digital-experience-95-container-default-database-to-ibm-db2","text":"HCL Digital Experience 9.5 installs a copy of Derby as the default database. Administrator users can follow these steps to transfer the default database configuration detail to IBM DB2, if preferred for use as the relational database for HCL Digital Experience 9.5 container deployment data. The directions closely follow the Digital Experience database transfer steps provided for deployments to supported \"on-premises\" platforms, such as Windows, Linux, and AIX. The unique steps that account for differences in these instructions for use with an HCL Digital Experience 9.5 Docker container deployment as opposed to an on-premises Digital Experience installation are highlighted. The on-premises based HCL Digital Experience database transfer instructions can be viewed in this topic: DB2 worksheet: Transfer to multiple databases . These container deployment instructions cover the transfer of the default Derby database running on an HCL Digital Experience Container Update CF18 container image to an IBM DB2 Enterprise Version 11.1.0.0 database running on a CentOS Linux release 7.71908 server. The IBM DB2 11.5 Standard and Enterprise database is also supported for these procedures. In these instructions, the IBM DB2 database is installed to a supported on-premises platform (see IBM DB2 System Support requirements for a list of supported platforms ). The HCL Digital Experience 9.5 Docker container is deployed to a supported Docker or Kubernetes platform. The container version deployed in this example is Docker CE version 19.0.3.8. Video : HCL Digital Experience - Perform a Database Transfer on HCL Portal 9.5 Prerequisites The HCL Digital Experience 9.5 container image is deployed, and loaded to your Docker repository using the following command: docker load < hcl-dx-core-image-v95_CF18_20200427-2055.tar.gz See the HCL Digital Experience 9.5 topic Deployment for instructions and latest list of HCL Digital Experience 9.5 Container image and file names. IBM DB2 is installed on an on-premises server with a DNS hostname that is available to the HCL Digital Experience 9.5 deployed container.","title":"Transfer HCL Digital Experience 9.5 container default database to IBM DB2"},{"location":"containerization/cw_containerdbtransfer_ibm_db2/#start-the-hcl-digital-experience-95-container-in-docker","text":"Execute the following command to start the DX 9.5 container: docker run -d --add-host {database DNS name}:{database IP address} -p 10025-10045:10025-10045 -p 10200-10210:10200-10210 -v '{directory on the Docker host for DX container profile}':'/opt/HCL/wp_profile' {your repo name}:{your tag name} Note: An --add-host entry needs to be made to insert the DNS name of the IBM DB2 database server into the /etc/hosts file in the container running the Digital Experience 9.5 container. If, and only if, the DNS name of the DB2 server is already in a named server available to the container, then the --add-host parameter would not be needed. The ports for the Digital Experience 9.5 container (100025-10045) need to be mapped as well as the ports using by the Configuration Wizard. The Configuration Wizard is used to manage the transfer of the database. The Configuration Wizard uses ports in the range of 10200-10202. The HCL Digital Experience 9.5 container persists the profile information across restarts. This is persisted on the Docker host as {directory on docker host for DX container profile} in the run command above. The container will map /opt/HCL/wp_profile to this directory on the docker via the -v command. You need to specify the Docker repository and tag name as the reader has loaded the HCL Digital Experience container image into their docker repository. When this docker run command is executed, ensure time is allocated to check the profile as well as initialize the HCL Digital Experience 9.5 container instance. One can ensure that the HCL Digital Experience 9.5 container deployment is ready by \"tail\"-ing the file in the container located at /opt/HCL/wp_profile/logs/HCL Portal and HCL Web Content Manager/SystemOut.log. When the file displays the following message, the HCL Digital Experience 9.5 container instance is initialized: \u2026open for e- business One can access this file (as well as all others in the running container) via the following command: docker exec -it {container name} bash","title":"Start the HCL Digital Experience 9.5 Container in Docker"},{"location":"containerization/cw_containerdbtransfer_ibm_db2/#transferring-the-database","text":"First, ensure that your HCL Digital Experience 9.5 docker container can access the IBM DB2 on-premises platform server. Using the following command, one can simply \"ping\" the DNS name of the IBM DB2 database server and verify that it answers: docker exec -it {container name} bash If this is not successful, consult with your platform administrator for other methods to debug the network issues between a Docker container and Servers running external to Docker in your environment. Next, once connectivity is established, follow the directions for using the Configuration Wizard from the traditional (on-premises platform-based) Digital Experience database transfer steps to transfer the data from the default Derby database and configure the target IBM DB2 database server for use with the HCL Digital Experience 9.5 Docker container deployment. One can access the Configuration Wizard from a browser on the HCL Digital Experience 9.5 container deployment via the URL http://{docker host server}:10200/hcl/wizard. Proceed to the Digital Experience database transfer steps topic section Set Up a Stand-alone Server - Database Transfer . Specify the fully qualified DNS name of the database server as set above in the --add-host directive in the docker run command. Parent topic: Customizing your container deployment","title":"Transferring the Database"},{"location":"containerization/dam_artifacts/","text":"DAM artifacts This section contains the commands for working with Digital Asset Management (DAM) schemas, managing DAM staging for subscription, or configuring periodic sync. DAM schemas This topic contains the commands that administrators can use to get a list of all DAM schemas or delete inactive Digital Asset Management (DAM) schemas from persistence. Parent topic: DXClient Artifact Types","title":"DAM artifacts"},{"location":"containerization/dam_artifacts/#dam-artifacts","text":"This section contains the commands for working with Digital Asset Management (DAM) schemas, managing DAM staging for subscription, or configuring periodic sync. DAM schemas This topic contains the commands that administrators can use to get a list of all DAM schemas or delete inactive Digital Asset Management (DAM) schemas from persistence. Parent topic: DXClient Artifact Types","title":"DAM artifacts"},{"location":"containerization/dam_extensibility/","text":"Using DAM extensibility This section describes the DAM extensibility feature and how to configure your setup for extensibility. DAM extensibility allows DAM to support user-defined custom renditions and transformations for images. This feature can be used to integrate with third-party plug-ins for custom asset processing, for example, to resize, crop, rotate, or other custom operations, and many more, while supporting default and custom renditions.","title":"Using DAM extensibility"},{"location":"containerization/dam_extensibility/#using-dam-extensibility","text":"This section describes the DAM extensibility feature and how to configure your setup for extensibility. DAM extensibility allows DAM to support user-defined custom renditions and transformations for images. This feature can be used to integrate with third-party plug-ins for custom asset processing, for example, to resize, crop, rotate, or other custom operations, and many more, while supporting default and custom renditions.","title":"Using DAM extensibility"},{"location":"containerization/dam_persistence_architecture/","text":"Digital Asset Management persistence architecture This topic describes the components of the Digital Asset Management persistence. The updated DAM persistence feature is available from HCL Digital Experience 9.5 Container Update CF198 and later. , persistence-node persistence-node provides the database functionality for HCL Digital Asset Management . The persistence-node is a DX Red Hat Universal Base Image (UBI) container image installed with PostgreSQL and the Replication Manager Service. [repmgr](https://repmgr.org/) is an open-source tool suite for managing replication and failover in a cluster of PostgreSQL servers. repmgr enhances the built-in hot-standby capabilities of PostgreSQL with tools to set up standby servers, monitor replication, and perform administrative tasks, such as failover or manual switchover operations. In case of PostgreSQL master server failure, the repmgr service switches the server role from master to standby. The persistence-node configurations are available in the Helm Chart values.yaml file as persistenceNode . The administrator can configure number of persistence-node under scaling configuration. # Scaling settings for deployed applications scaling: # The default amount of replicas per application replicas: contentComposer: 1 core: 1 designStudio: 1 digitalAssetManagement: 1 imageProcessor: 1 ringApi: 1 persistenceConnectionPool: 1 persistenceNode: 3 ambassadorIngress: 3 ambassadorRedis: 3 Note: Scaling affects only the read requests and ensures fail-over capabilities. Write requests are always directed only to the primary pod. The persistence-node is a stateful application and it requires a volume. The configuration must have a dynamic volume class to start the container. The storageClassName and storage must be updated according to the cloud service provider and project requirement. # Persistent Volumes for Persistence Node persistenceNode: # Database PVC, one per Persistence Node database: storageClassName: \"manual\" requests: storage: \"2Gi\" # Optional volume name to specifically map to. volumeName: persistence-connection-pool The persistence-connection-pool container runs the Pg-pool service. Pg-pool is a middleware that works between persistence-node and HCL Digital Asset Management . The service provides: Connection pooling Load balancing For better performance, administrator can scale the persistence-connection-pool to more than one pod. The persistence-connection-pool configurations are available in Helm Chart values.yaml file as persistenceConnectionPool . # Scaling settings for deployed applications scaling: # The default amount of replicas per application replicas: contentComposer: 1 core: 1 designStudio: 1 digitalAssetManagement: 1 imageProcessor: 1 ringApi: 1 persistenceConnectionPool: 1 persistenceNode: 3 ambassadorIngress: 3 ambassadorRedis: 3 The following is an example of a persistence cluster in a successful deployment. . Parent topic: Overview of the Helm architecture","title":"Digital Asset Management persistence architecture"},{"location":"containerization/dam_persistence_architecture/#digital-asset-management-persistence-architecture","text":"This topic describes the components of the Digital Asset Management persistence. The updated DAM persistence feature is available from HCL Digital Experience 9.5 Container Update CF198 and later. ,","title":"Digital Asset Management persistence architecture"},{"location":"containerization/dam_persistence_architecture/#persistence-node","text":"persistence-node provides the database functionality for HCL Digital Asset Management . The persistence-node is a DX Red Hat Universal Base Image (UBI) container image installed with PostgreSQL and the Replication Manager Service. [repmgr](https://repmgr.org/) is an open-source tool suite for managing replication and failover in a cluster of PostgreSQL servers. repmgr enhances the built-in hot-standby capabilities of PostgreSQL with tools to set up standby servers, monitor replication, and perform administrative tasks, such as failover or manual switchover operations. In case of PostgreSQL master server failure, the repmgr service switches the server role from master to standby. The persistence-node configurations are available in the Helm Chart values.yaml file as persistenceNode . The administrator can configure number of persistence-node under scaling configuration. # Scaling settings for deployed applications scaling: # The default amount of replicas per application replicas: contentComposer: 1 core: 1 designStudio: 1 digitalAssetManagement: 1 imageProcessor: 1 ringApi: 1 persistenceConnectionPool: 1 persistenceNode: 3 ambassadorIngress: 3 ambassadorRedis: 3 Note: Scaling affects only the read requests and ensures fail-over capabilities. Write requests are always directed only to the primary pod. The persistence-node is a stateful application and it requires a volume. The configuration must have a dynamic volume class to start the container. The storageClassName and storage must be updated according to the cloud service provider and project requirement. # Persistent Volumes for Persistence Node persistenceNode: # Database PVC, one per Persistence Node database: storageClassName: \"manual\" requests: storage: \"2Gi\" # Optional volume name to specifically map to. volumeName:","title":"persistence-node"},{"location":"containerization/dam_persistence_architecture/#persistence-connection-pool","text":"The persistence-connection-pool container runs the Pg-pool service. Pg-pool is a middleware that works between persistence-node and HCL Digital Asset Management . The service provides: Connection pooling Load balancing For better performance, administrator can scale the persistence-connection-pool to more than one pod. The persistence-connection-pool configurations are available in Helm Chart values.yaml file as persistenceConnectionPool . # Scaling settings for deployed applications scaling: # The default amount of replicas per application replicas: contentComposer: 1 core: 1 designStudio: 1 digitalAssetManagement: 1 imageProcessor: 1 ringApi: 1 persistenceConnectionPool: 1 persistenceNode: 3 ambassadorIngress: 3 ambassadorRedis: 3 The following is an example of a persistence cluster in a successful deployment. . Parent topic: Overview of the Helm architecture","title":"persistence-connection-pool"},{"location":"containerization/dam_subscription_staging/","text":"Using DAM staging This topic contains the commands that administrators can use to configure the staging of Digital Asset Management (DAM) content. This allows you to manage subscriber registration or configure periodic sync. DAM staging framework The DAM staging framework allows you to stage your DAM content from an authoring environment (source environment/publisher) to multiple rendering environments (target environment/subscriber). Using DXClient , you can configure DAM staging to: Trigger a manual staging or use periodic staging processes. Set the cycle length (default: 2 minutes, maximum: 24 hours) for periodic sync. Register a subscriber with a publisher. Note: A subscriber must be registered with a publisher. Access rights from DAM staging assets are not transferred for subscribers that do not share the same Lightweight Directory Access Protocol (LDAP). Manage DAM staging Use the manage-dam-staging trigger-staging command to trigger DAM staging. Command description You can trigger the DAM staging with the following command: dxclient manage-dam-staging trigger-staging Help command This command shows the help information for manage-dam-staging trigger-staging command usage: dxclient manage-dam-staging trigger-staging -h Command options Use this attribute to specify the protocol with which to connect to the DX server (default: \"\") -dxProtocol <value> Use this attribute to specify the host name of the DX server (default: \"\") -hostname <value> Use this attribute to specify the port on which to connect to the DX server (default: \"\"; default port for any Kubernetes environment is 443): -dxPort <value> Use this attribute to specify the user name that is required for authenticating with the DX server (default: \"\") -dxUsername <value> Use this attribute to specify the password that is required for authenticating with the DX Core (default: \"\") -dxPassword <value> Use this attribute to specify the port number of the DAM server (default: \"\"; default port for any Kubernetes environment is 443): -damAPIPort <value> Use this attribute to specify the port number of the DX Core API server (default: \"\"; default port for any Kubernetes environment is 443): -ringAPIPort <value> Use this attribute to specify the API version number of DAM (default: \"\"; default port for any Kubernetes environment is 443): -damAPIVersion <value> Use this attribute to specify the API version number of DX Core (default: \"\"; default port for any Kubernetes environment is 443): -ringAPIVersion <value> Use this attribute to specify the host name of the target environment: -targetHostname <value> Use this attribute to specify the interval between two sync cycles. The unit of interval is in minutes. (default: \"2 minutes\") -interval <value> Command: ``` dxclient manage-dam-staging trigger-staging -dxProtocol -hostname -dxPort -dxUsername -dxPassword -damAPIPort -ringAPIPort -damAPIVersion -ringAPIVersion -targetHostname ``` Example: dxclient manage-dam-staging trigger-staging -dxProtocol https -hostname native-kube-dam-staging.team-q-dev.com -dxPort 443 -dxUsername xxxx -dxPassword xxxx -damAPIPort 443 -ringAPIPort 443 -damAPIVersion v1 -ringAPIVersion v1 -targetHostname native-kube-dam-production.team-q-dev.com Registering or deregistering for DAM staging Use the manage-dam-staging **register**-dam-subscriber command to register or the manage-dam-staging **deregister**-dam-subscriber command to deregister the subscriber for DAM staging. Command description You can register a subscriber for DAM staging with the following command: dxclient manage-dam-staging register-dam-subscriber You can deregister a subscriber for DAM staging with the following command: dxclient manage-dam-staging deregister-dam-subscriber Help command The following command shows the help information for manage-dam-staging **register**-dam-subscriber command usage: dxclient manage-dam-staging register-dam-subscriber -h The following command shows the help information for manage-dam-staging **deregister**-dam-subscriber command usage: dxclient manage-dam-staging deregister-dam-subscriber -h Command options Use this attribute to specify the protocol with which to connect to the DX server (default: \"\") -dxProtocol <value> Use this attribute to specify the host name of the DX server (default: \"\") -hostname <value> Use this attribute to specify the port on which to connect to the DX server (default: \"\"; default port for any Kubernetes environment is 443): -dxPort <value> Use this attribute to specify the user name that is required for authenticating with the DX server (default: \"\") -dxUsername <value> Use this attribute to specify the password that is required for authenticating with the DX Core (default: \"\") -dxPassword <value> Use this attribute to specify the port number of the DAM server (default: \"\"; default port for any Kubernetes environment is 443): -damAPIPort <value> Use this attribute to specify the port number of the DX Core API server (default: \"\"; default port for any Kubernetes environment is 443): -ringAPIPort <value> Use this attribute to specify the API version number of DAM (default: \"\"; default port for any Kubernetes environment is 443): -damAPIVersion <value> Use this attribute to specify the API version number of DX Core (default: \"\"; default port for any Kubernetes environment is 443): -ringAPIVersion <value> Use this attribute to specify the host name of the target environment: -targetHostname <value> Use this attribute to specify the subscriber ID of the target environment: -subscriberId <value> Use this attribute to specify the interval between two sync cycles. The unit of interval is in minutes. (default: \"2 minutes\") -interval <value> Commands: To register: dxclient manage-dam-staging register-dam-subscriber -dxProtocol <dxProtocol> -hostname <hostname> -dxPort <dxPort> -dxUsername <dxUsername> -dxPassword <dxPassword> -damAPIPort <damAPIPort> -ringAPIPort <ringAPIPort> -damAPIVersion <damAPIVersion> -ringAPIVersion <ringAPIVersion> -subscriberId <subscriberId> Example: dxclient manage-dam-staging register-dam-subscriber -dxProtocol https -hostname native-kube-dam-staging.team-q-dev.com -dxPort 443 -dxUsername xxxx -dxPassword xxxx -damAPIPort 443 -ringAPIPort 443 -damAPIVersion v1 -ringAPIVersion v1 -targetHostname native-kube-dam-production.team-q-dev.com -interval 2 To deregister: dxclient manage-dam-staging deregister-dam-subscriber -dxProtocol <dxProtocol> -hostname <hostname> -dxPort <dxPort> -dxUsername <dxUsername> -dxPassword <dxPassword> -damAPIPort <damAPIPort> -ringAPIPort <ringAPIPort> -damAPIVersion <damAPIVersion> -ringAPIVersion <ringAPIVersion> -subscriberId <subscriberId> Example: dxclient manage-dam-staging deregister-dam-subscriber -dxProtocol https -hostname native-kube-dam-staging.team-q-dev.com -dxPort 443 -dxUsername xxxx -dxPassword xxxx -damAPIPort 443 -ringAPIPort 443 -damAPIVersion v1 -ringAPIVersion v1 -subscriberId d7e5e014-12a0-4dc5-a5d7-971fd4fa86f3 Using WCM with DAM staging The typical setup involves a WCM staging/authoring server connected to DAM staging/authoring, and a separate WCM rendering connected to DAM rendering (there could be multiple WCM rendering/DAM rendering environments, for example, a Blue/Green setup). Syndication is set up for WCM between staging/authoring and WCM rendering. DAM staging is set up between DAM staging/authoring and DAM rendering. (Optional) You can configure WCM WCMConfigService in the WAS Admin Console to allow switching the host name (and port) used for DAM references in WCM using the following: dam.host.overwrite.port=... dam.host.overwrite=... For example: dam.host.overwrite=myserver.com dam.host.overwrite.port=3000 You must restart the DX Core JVM for changes to take effect. Effect : If the properties are in place when using the REST API or WCM Admin UI or WCM API, the returned DAM references have the overwritten host name and port. For example, if a content item is moved from the staging environment to production, and production has the host overwrite set to production.hcl.com , then all DAM references are returned with production.hcl.com . For instance, production.hcl.com/dx/api/dam/v1/collections/390e9808-a6d2-4ebe-b6fb-f10046ebf642/items/fd18083c-d84b-4816-af6e-583059c73122/renditions/7855bfae-d741-41f7-815f-d15f427a4da0?binary=true even if we received the following from syndication: staging.hcl.com/dx/api/dam/v1/collections/390e9808-a6d2-4ebe-b6fb-f10046ebf642/items/fd18083c-d84b-4816-af6e-583059c73122/renditions/7855bfae-d741-41f7-815f-d15f427a4da0?binary=true.","title":"Using DAM staging"},{"location":"containerization/dam_subscription_staging/#using-dam-staging","text":"This topic contains the commands that administrators can use to configure the staging of Digital Asset Management (DAM) content. This allows you to manage subscriber registration or configure periodic sync.","title":"Using DAM staging"},{"location":"containerization/dam_subscription_staging/#dam-staging-framework","text":"The DAM staging framework allows you to stage your DAM content from an authoring environment (source environment/publisher) to multiple rendering environments (target environment/subscriber). Using DXClient , you can configure DAM staging to: Trigger a manual staging or use periodic staging processes. Set the cycle length (default: 2 minutes, maximum: 24 hours) for periodic sync. Register a subscriber with a publisher. Note: A subscriber must be registered with a publisher. Access rights from DAM staging assets are not transferred for subscribers that do not share the same Lightweight Directory Access Protocol (LDAP).","title":"DAM staging framework"},{"location":"containerization/dam_subscription_staging/#manage-dam-staging","text":"Use the manage-dam-staging trigger-staging command to trigger DAM staging. Command description You can trigger the DAM staging with the following command: dxclient manage-dam-staging trigger-staging Help command This command shows the help information for manage-dam-staging trigger-staging command usage: dxclient manage-dam-staging trigger-staging -h Command options Use this attribute to specify the protocol with which to connect to the DX server (default: \"\") -dxProtocol <value> Use this attribute to specify the host name of the DX server (default: \"\") -hostname <value> Use this attribute to specify the port on which to connect to the DX server (default: \"\"; default port for any Kubernetes environment is 443): -dxPort <value> Use this attribute to specify the user name that is required for authenticating with the DX server (default: \"\") -dxUsername <value> Use this attribute to specify the password that is required for authenticating with the DX Core (default: \"\") -dxPassword <value> Use this attribute to specify the port number of the DAM server (default: \"\"; default port for any Kubernetes environment is 443): -damAPIPort <value> Use this attribute to specify the port number of the DX Core API server (default: \"\"; default port for any Kubernetes environment is 443): -ringAPIPort <value> Use this attribute to specify the API version number of DAM (default: \"\"; default port for any Kubernetes environment is 443): -damAPIVersion <value> Use this attribute to specify the API version number of DX Core (default: \"\"; default port for any Kubernetes environment is 443): -ringAPIVersion <value> Use this attribute to specify the host name of the target environment: -targetHostname <value> Use this attribute to specify the interval between two sync cycles. The unit of interval is in minutes. (default: \"2 minutes\") -interval <value> Command: ``` dxclient manage-dam-staging trigger-staging -dxProtocol -hostname -dxPort -dxUsername -dxPassword -damAPIPort -ringAPIPort -damAPIVersion -ringAPIVersion -targetHostname ``` Example: dxclient manage-dam-staging trigger-staging -dxProtocol https -hostname native-kube-dam-staging.team-q-dev.com -dxPort 443 -dxUsername xxxx -dxPassword xxxx -damAPIPort 443 -ringAPIPort 443 -damAPIVersion v1 -ringAPIVersion v1 -targetHostname native-kube-dam-production.team-q-dev.com","title":"Manage DAM staging"},{"location":"containerization/dam_subscription_staging/#registering-or-deregistering-for-dam-staging","text":"Use the manage-dam-staging **register**-dam-subscriber command to register or the manage-dam-staging **deregister**-dam-subscriber command to deregister the subscriber for DAM staging. Command description You can register a subscriber for DAM staging with the following command: dxclient manage-dam-staging register-dam-subscriber You can deregister a subscriber for DAM staging with the following command: dxclient manage-dam-staging deregister-dam-subscriber Help command The following command shows the help information for manage-dam-staging **register**-dam-subscriber command usage: dxclient manage-dam-staging register-dam-subscriber -h The following command shows the help information for manage-dam-staging **deregister**-dam-subscriber command usage: dxclient manage-dam-staging deregister-dam-subscriber -h Command options Use this attribute to specify the protocol with which to connect to the DX server (default: \"\") -dxProtocol <value> Use this attribute to specify the host name of the DX server (default: \"\") -hostname <value> Use this attribute to specify the port on which to connect to the DX server (default: \"\"; default port for any Kubernetes environment is 443): -dxPort <value> Use this attribute to specify the user name that is required for authenticating with the DX server (default: \"\") -dxUsername <value> Use this attribute to specify the password that is required for authenticating with the DX Core (default: \"\") -dxPassword <value> Use this attribute to specify the port number of the DAM server (default: \"\"; default port for any Kubernetes environment is 443): -damAPIPort <value> Use this attribute to specify the port number of the DX Core API server (default: \"\"; default port for any Kubernetes environment is 443): -ringAPIPort <value> Use this attribute to specify the API version number of DAM (default: \"\"; default port for any Kubernetes environment is 443): -damAPIVersion <value> Use this attribute to specify the API version number of DX Core (default: \"\"; default port for any Kubernetes environment is 443): -ringAPIVersion <value> Use this attribute to specify the host name of the target environment: -targetHostname <value> Use this attribute to specify the subscriber ID of the target environment: -subscriberId <value> Use this attribute to specify the interval between two sync cycles. The unit of interval is in minutes. (default: \"2 minutes\") -interval <value> Commands: To register: dxclient manage-dam-staging register-dam-subscriber -dxProtocol <dxProtocol> -hostname <hostname> -dxPort <dxPort> -dxUsername <dxUsername> -dxPassword <dxPassword> -damAPIPort <damAPIPort> -ringAPIPort <ringAPIPort> -damAPIVersion <damAPIVersion> -ringAPIVersion <ringAPIVersion> -subscriberId <subscriberId> Example: dxclient manage-dam-staging register-dam-subscriber -dxProtocol https -hostname native-kube-dam-staging.team-q-dev.com -dxPort 443 -dxUsername xxxx -dxPassword xxxx -damAPIPort 443 -ringAPIPort 443 -damAPIVersion v1 -ringAPIVersion v1 -targetHostname native-kube-dam-production.team-q-dev.com -interval 2 To deregister: dxclient manage-dam-staging deregister-dam-subscriber -dxProtocol <dxProtocol> -hostname <hostname> -dxPort <dxPort> -dxUsername <dxUsername> -dxPassword <dxPassword> -damAPIPort <damAPIPort> -ringAPIPort <ringAPIPort> -damAPIVersion <damAPIVersion> -ringAPIVersion <ringAPIVersion> -subscriberId <subscriberId> Example: dxclient manage-dam-staging deregister-dam-subscriber -dxProtocol https -hostname native-kube-dam-staging.team-q-dev.com -dxPort 443 -dxUsername xxxx -dxPassword xxxx -damAPIPort 443 -ringAPIPort 443 -damAPIVersion v1 -ringAPIVersion v1 -subscriberId d7e5e014-12a0-4dc5-a5d7-971fd4fa86f3","title":"Registering or deregistering for DAM staging"},{"location":"containerization/dam_subscription_staging/#using-wcm-with-dam-staging","text":"The typical setup involves a WCM staging/authoring server connected to DAM staging/authoring, and a separate WCM rendering connected to DAM rendering (there could be multiple WCM rendering/DAM rendering environments, for example, a Blue/Green setup). Syndication is set up for WCM between staging/authoring and WCM rendering. DAM staging is set up between DAM staging/authoring and DAM rendering. (Optional) You can configure WCM WCMConfigService in the WAS Admin Console to allow switching the host name (and port) used for DAM references in WCM using the following: dam.host.overwrite.port=... dam.host.overwrite=... For example: dam.host.overwrite=myserver.com dam.host.overwrite.port=3000 You must restart the DX Core JVM for changes to take effect. Effect : If the properties are in place when using the REST API or WCM Admin UI or WCM API, the returned DAM references have the overwritten host name and port. For example, if a content item is moved from the staging environment to production, and production has the host overwrite set to production.hcl.com , then all DAM references are returned with production.hcl.com . For instance, production.hcl.com/dx/api/dam/v1/collections/390e9808-a6d2-4ebe-b6fb-f10046ebf642/items/fd18083c-d84b-4816-af6e-583059c73122/renditions/7855bfae-d741-41f7-815f-d15f427a4da0?binary=true even if we received the following from syndication: staging.hcl.com/dx/api/dam/v1/collections/390e9808-a6d2-4ebe-b6fb-f10046ebf642/items/fd18083c-d84b-4816-af6e-583059c73122/renditions/7855bfae-d741-41f7-815f-d15f427a4da0?binary=true.","title":"Using WCM with DAM staging"},{"location":"containerization/damschemas/","text":"DAM schemas This topic contains the commands that administrators can use to get a list of all DAM schemas or delete inactive Digital Asset Management (DAM) schemas from persistence. Listing DAM schemas The list-dam-schemas command is used to list all the DAM schemas. Command description This command invokes list-dam-schemas inside DXClient and provides a list DAM schemas. dxclient list-dam-schemas Help command This command shows the help information for list-dam-schemas command usage: dxclient list-dam-schemas -h Command options Use this attribute to specify the protocol with which to connect to the server -dxProtocol <value> Use this attribute to specify the hostname of the target server -hostname <value> Use this attribute to specify the port on which to connect to the server(for Kubernetes Environment dxPort is 443) -dxPort <value> Use this attribute to specify the username that is required for authenticating with the server -dxUsername <value> Use this attribute to specify the password that is required for authenticating with the server -dxPassword <value> Use this attribute to specify the port number of the DAM server(for Kubernetes Environment default port is 443) -damAPIPort <value> Use this attribute to specify the port number of the DX Core API server(for Kubernetes Environment default port is 443) -ringAPIPort <value> Use this attribute to specify the API Version number of DAM(for Kubernetes Environment default port is 443) -damAPIVersion <value> Use this attribute to specify the API Version number of DX Core(for Kubernetes Environment default port is 443) -ringAPIVersion <value> Example: dxclient list-dam-schemas -dxProtocol <dxProtocol> -hostname <hostname> -dxPort <dxPort> -dxUsername <dxUsername> -dxPassword <dxPassword> -damAPIPort <damAPIPort> -ringAPIPort <ringAPIPort> -ringAPIVersion <ringAPIVersion> -damAPIVersion <damAPIVersion> Deleting DAM schemas Deleting DAM schema is a recommended step when the configuration of the DAM database schema has been changed, due to a release update such as from Container Update CF196 to Container Update CF197. When a DAM database is migrated, a new schema gets generated and the old schema is rendered inactive. To avoid the accumulation of inactive schemas, you can use the delete-dam-schema command to delete them. Use the delete-dam-schema command to delete the inactive DAM schema. Command description This command invokes delete-dam-schema inside DXClient and deletes the DAM schema. dxclient delete-dam-schema Help command This command shows the help information for delete-dam-schema command usage: dxclient delete-dam-schema -h Command options Use this attribute to specify the protocol that is used to connect to the server -dxProtocol <value> Use this attribute to specify the hostname of the target server -hostname <value> Use this attribute to specify the port on which to connect to the server (for Kubernetes Environment dxPort is 443) -dxPort <value> Use this attribute to specify the username that is required for authenticating with the server -dxUsername <value> Use this attribute to specify the password that is required for authenticating with the server -dxPassword <value> Use this attribute to specify the port number of the DAM server (for Kubernetes Environment default port is 443) -damAPIPort <value> Use this attribute to specify the port number of the DX Core API server (for Kubernetes Environment default port is 443) -ringAPIPort <value> Use this attribute to specify the API Version number of DAM (for Kubernetes Environment default port is 443) -damAPIVersion <value> Use this attribute to specify the API Version number of DX Core (for Kubernetes Environment default port is 443) -ringAPIVersion <value> Use this attribute to specify the DAM Schema Version (for Kubernetes Environment default port is 443) -schemaVersion <value> Note: In case the user does not enter the schemaVersion , user is prompted with a list of inactive schemas to choose from. Example: dxclient delete-dam-schema -dxProtocol <dxProtocol> -hostname <hostname> -dxPort <dxPort> -dxUsername <dxUsername> -dxPassword <dxPassword> -damAPIPort <damAPIPort> -ringAPIPort <ringAPIPort> -ringAPIVersion <ringAPIVersion> -damAPIVersion <damAPIVersion> -schemaVersion <schemaVersion> Parent topic: DAM artifacts","title":"DAM schemas"},{"location":"containerization/damschemas/#dam-schemas","text":"This topic contains the commands that administrators can use to get a list of all DAM schemas or delete inactive Digital Asset Management (DAM) schemas from persistence.","title":"DAM schemas"},{"location":"containerization/damschemas/#listing-dam-schemas","text":"The list-dam-schemas command is used to list all the DAM schemas. Command description This command invokes list-dam-schemas inside DXClient and provides a list DAM schemas. dxclient list-dam-schemas Help command This command shows the help information for list-dam-schemas command usage: dxclient list-dam-schemas -h Command options Use this attribute to specify the protocol with which to connect to the server -dxProtocol <value> Use this attribute to specify the hostname of the target server -hostname <value> Use this attribute to specify the port on which to connect to the server(for Kubernetes Environment dxPort is 443) -dxPort <value> Use this attribute to specify the username that is required for authenticating with the server -dxUsername <value> Use this attribute to specify the password that is required for authenticating with the server -dxPassword <value> Use this attribute to specify the port number of the DAM server(for Kubernetes Environment default port is 443) -damAPIPort <value> Use this attribute to specify the port number of the DX Core API server(for Kubernetes Environment default port is 443) -ringAPIPort <value> Use this attribute to specify the API Version number of DAM(for Kubernetes Environment default port is 443) -damAPIVersion <value> Use this attribute to specify the API Version number of DX Core(for Kubernetes Environment default port is 443) -ringAPIVersion <value> Example: dxclient list-dam-schemas -dxProtocol <dxProtocol> -hostname <hostname> -dxPort <dxPort> -dxUsername <dxUsername> -dxPassword <dxPassword> -damAPIPort <damAPIPort> -ringAPIPort <ringAPIPort> -ringAPIVersion <ringAPIVersion> -damAPIVersion <damAPIVersion>","title":"Listing DAM schemas"},{"location":"containerization/damschemas/#deleting-dam-schemas","text":"Deleting DAM schema is a recommended step when the configuration of the DAM database schema has been changed, due to a release update such as from Container Update CF196 to Container Update CF197. When a DAM database is migrated, a new schema gets generated and the old schema is rendered inactive. To avoid the accumulation of inactive schemas, you can use the delete-dam-schema command to delete them. Use the delete-dam-schema command to delete the inactive DAM schema. Command description This command invokes delete-dam-schema inside DXClient and deletes the DAM schema. dxclient delete-dam-schema Help command This command shows the help information for delete-dam-schema command usage: dxclient delete-dam-schema -h Command options Use this attribute to specify the protocol that is used to connect to the server -dxProtocol <value> Use this attribute to specify the hostname of the target server -hostname <value> Use this attribute to specify the port on which to connect to the server (for Kubernetes Environment dxPort is 443) -dxPort <value> Use this attribute to specify the username that is required for authenticating with the server -dxUsername <value> Use this attribute to specify the password that is required for authenticating with the server -dxPassword <value> Use this attribute to specify the port number of the DAM server (for Kubernetes Environment default port is 443) -damAPIPort <value> Use this attribute to specify the port number of the DX Core API server (for Kubernetes Environment default port is 443) -ringAPIPort <value> Use this attribute to specify the API Version number of DAM (for Kubernetes Environment default port is 443) -damAPIVersion <value> Use this attribute to specify the API Version number of DX Core (for Kubernetes Environment default port is 443) -ringAPIVersion <value> Use this attribute to specify the DAM Schema Version (for Kubernetes Environment default port is 443) -schemaVersion <value> Note: In case the user does not enter the schemaVersion , user is prompted with a list of inactive schemas to choose from. Example: dxclient delete-dam-schema -dxProtocol <dxProtocol> -hostname <hostname> -dxPort <dxPort> -dxUsername <dxUsername> -dxPassword <dxPassword> -damAPIPort <damAPIPort> -ringAPIPort <ringAPIPort> -ringAPIVersion <ringAPIVersion> -damAPIVersion <damAPIVersion> -schemaVersion <schemaVersion> Parent topic: DAM artifacts","title":"Deleting DAM schemas"},{"location":"containerization/deploy_applications_using_helm/","text":"Deploying DX 9.5 applications to container platforms using Helm This topic provides a list of all DX applications and resource definitions that configure the application runtime and are deployed to containers using Helm on OpenShift or Kubernetes platforms. As outlined in the overview, applications can also include ConfigMaps, Secrets, and Ingress. For more information about Helm applications, consult the Helm documentation . Refer to the DX 9.5 Container component image listing in the DX 9.5 Docker Image file listing topic. Do note that each application defined only lists its next direct dependencies. Sub-dependencies are not explicitly listed. DX 9.5 Core Depends on: No dependencies Type: Stateful HCL DX 9.5 CF196 and later Core contains the primary Portal and Web Content Manager HCL Digital Experience functionality. The standard deployment deploys at least one Pod of Core. If you have an existing on-premise installation of DX 9.5 Core, you can also use that one for your deployment using the Hybrid deployment pattern as described in the DX 9.5 Hybrid deployment topic. Note: Application of the hybrid deployment pattern is not yet supported with Helm in HCL DX 9.5 Container Update CF196, and will be added in a later update release. Ring API Depends on: Core (deployed to OpenShift, Kubernetes or Hybrid on-premise) Type: Stateless The Ring API, a component of the HCL DX Experience API , is a REST API wrapping Core functionality. It provides easy-to-use API endpoints and requires that a DX Core 9.5 instance is deployed and started. That instance can either be running inside the Kubernetes or OpenShift deployment or be an existing external on-premise DX-Core installation using the Hybrid pattern. Content Composer Depends on: Ring API Type: Stateless Content Composer requires the Ring API to be deployed to execute Content authoring capabilities. Digital Asset Management Depends on: Ring API, Image Processor, Persistence Type: Stateful Digital Asset Management requires the Ring API be deployed and operational to communicate with the DX Core, and Image Processor components to perform image manipulation, and Persistence to store its application data. Persistence Depends on: No dependencies Type: Stateful Persistence is used by the Digital Asset Management component to store application data. It consists of a read/write primary node and at least one standby read-only node. The switch between the read/write primary and the read-only nodes is automatically performed by the Runtime Controller. Image Processor Depends on: No dependencies Type: Stateless The Image Processor provides image manipulation capabilities that are leveraged by Digital Asset Management. Design Studio (Beta) Depends on: Core, Ring API Type: Stateless Refer to the Design Studio (Beta) topic section for more information about this application. Runtime Controller Depends on: No dependencies Type: Stateless The Runtime Controller incorporates runtime management functionality for the entire HCL DX 9.5 Container hcl-dx-deployment . It enables automated rollout of configuration changes during runtime and acts as a \u201cwatchdog\u201d to monitor for the automated read/write to read-only fallback of Persistence. Interdependency Matrix This matrix shows which HCL DX applications have dependencies on other applications. This also includes sub-dependencies. For example, if an application uses Ring API, it is also dependent on an operational DX 9.5 Core instance. Application names are defined as follows: Shortname Full Name Core HCL DX 9.5 Core Ring API Ring API CC Content Composer DAM Digital Asset Management DS Design Studio PER Persistence IMG Image Processor","title":"Deploying DX 9.5 applications to container platforms using Helm"},{"location":"containerization/deploy_applications_using_helm/#deploying-dx-95-applications-to-container-platforms-using-helm","text":"This topic provides a list of all DX applications and resource definitions that configure the application runtime and are deployed to containers using Helm on OpenShift or Kubernetes platforms. As outlined in the overview, applications can also include ConfigMaps, Secrets, and Ingress. For more information about Helm applications, consult the Helm documentation . Refer to the DX 9.5 Container component image listing in the DX 9.5 Docker Image file listing topic. Do note that each application defined only lists its next direct dependencies. Sub-dependencies are not explicitly listed.","title":"Deploying DX 9.5 applications to container platforms using Helm"},{"location":"containerization/deploy_applications_using_helm/#dx-95-core","text":"Depends on: No dependencies Type: Stateful HCL DX 9.5 CF196 and later Core contains the primary Portal and Web Content Manager HCL Digital Experience functionality. The standard deployment deploys at least one Pod of Core. If you have an existing on-premise installation of DX 9.5 Core, you can also use that one for your deployment using the Hybrid deployment pattern as described in the DX 9.5 Hybrid deployment topic. Note: Application of the hybrid deployment pattern is not yet supported with Helm in HCL DX 9.5 Container Update CF196, and will be added in a later update release.","title":"DX 9.5 Core"},{"location":"containerization/deploy_applications_using_helm/#ring-api","text":"Depends on: Core (deployed to OpenShift, Kubernetes or Hybrid on-premise) Type: Stateless The Ring API, a component of the HCL DX Experience API , is a REST API wrapping Core functionality. It provides easy-to-use API endpoints and requires that a DX Core 9.5 instance is deployed and started. That instance can either be running inside the Kubernetes or OpenShift deployment or be an existing external on-premise DX-Core installation using the Hybrid pattern.","title":"Ring API"},{"location":"containerization/deploy_applications_using_helm/#content-composer","text":"Depends on: Ring API Type: Stateless Content Composer requires the Ring API to be deployed to execute Content authoring capabilities.","title":"Content Composer"},{"location":"containerization/deploy_applications_using_helm/#digital-asset-management","text":"Depends on: Ring API, Image Processor, Persistence Type: Stateful Digital Asset Management requires the Ring API be deployed and operational to communicate with the DX Core, and Image Processor components to perform image manipulation, and Persistence to store its application data.","title":"Digital Asset Management"},{"location":"containerization/deploy_applications_using_helm/#persistence","text":"Depends on: No dependencies Type: Stateful Persistence is used by the Digital Asset Management component to store application data. It consists of a read/write primary node and at least one standby read-only node. The switch between the read/write primary and the read-only nodes is automatically performed by the Runtime Controller.","title":"Persistence"},{"location":"containerization/deploy_applications_using_helm/#image-processor","text":"Depends on: No dependencies Type: Stateless The Image Processor provides image manipulation capabilities that are leveraged by Digital Asset Management.","title":"Image Processor"},{"location":"containerization/deploy_applications_using_helm/#design-studio-beta","text":"Depends on: Core, Ring API Type: Stateless Refer to the Design Studio (Beta) topic section for more information about this application.","title":"Design Studio (Beta)"},{"location":"containerization/deploy_applications_using_helm/#runtime-controller","text":"Depends on: No dependencies Type: Stateless The Runtime Controller incorporates runtime management functionality for the entire HCL DX 9.5 Container hcl-dx-deployment . It enables automated rollout of configuration changes during runtime and acts as a \u201cwatchdog\u201d to monitor for the automated read/write to read-only fallback of Persistence.","title":"Runtime Controller"},{"location":"containerization/deploy_applications_using_helm/#interdependency-matrix","text":"This matrix shows which HCL DX applications have dependencies on other applications. This also includes sub-dependencies. For example, if an application uses Ring API, it is also dependent on an operational DX 9.5 Core instance. Application names are defined as follows: Shortname Full Name Core HCL DX 9.5 Core Ring API Ring API CC Content Composer DAM Digital Asset Management DS Design Studio PER Persistence IMG Image Processor","title":"Interdependency Matrix"},{"location":"containerization/deploy_container_artifact_updates/","text":"Deploying HCL DX 9.5 Container artifact updates with minimal operations downtime This topic provides guidance to update artifacts in HCL Digital Experience container deployments while minimizing operations downtime. Introduction In a Kubernetes environment, how can one achieve zero downtime deployments of new artifacts? In a \u201ctraditional\u201d HCL Digital Experience deployment to on-premises platforms such as Windows, AIX, or Linux OS, adding new components such as a new theme, new portlets, new pages, new PZN rules, etc. is typically achieved by first validating these new artifacts in lower \u201cnon-production\u201d cells prior to introduction to the production cell or cells. When referring to a \u201ctraditional\u201d deployment, that refers to a single cluster in a single cell as depicted in the HCL DX Roadmap: Production and delivery environment . Once validated in non-production cells, the \u201cleast risk\u201d topology for new artifacts (as well as for individual and cumulative fixes) is to employ a two-cell production environment with either active/active or active/passive access. New artifacts would be deployed into a cell that was \u201coff-line\u201d (e.g. not in the active load balance), validating that cell and then moving that cell to the active load balance. Using this process almost always guaranteed a zero-downtime deployment of fixes and artifacts. HCL Digital Experience refers to this topology as the \u201cGold Standard\u201d topology for business critical deployments. One could always take more risk and not employ a two-cell HA environment for production. Rather, one could assume that if the new artifacts were proven in several lower environments, the risk of failure in a single cell production environment was very low. Kubernetes \u2013 Two Views There are two ways to view deployment to a supported Kubernetes environment. The first is purely from a tooling point of view. In other words, what processes and tooling does one use to get new artifacts into a Kubernetes system? Are these processes and tools different than one would use in a non-Kubernetes HCL Digital Experience platform deployment? The second view, as discussed in the introduction, is how to achieve deployment while minimizing operations downtime? Difference and Similarities Between Traditional and Kubernetes DX Deployments To properly understand zero downtime deployment, it is helpful to understand how a traditional Digital Experience Portal cluster is similar and different than a multi-pod Kubernetes deployment. A \u201ctraditional\u201d HCL Digital Experience cluster is based on an IBM WebSphere Application Server (WAS) Network Deployment (ND) cell. One or more HCL DX Servers are in the same WAS cell. They share a common database. Each of the HCL DX Server cluster members produce exactly the same HTTP response as the other members of the cell. When deploying new binary artifacts (e.g. new portlets, themes, etc.), the IBM WAS Deployment Manager (DMgr) in this topology owns the \u201cmaster\u201d copy of the binary. It \u201csyncs\u201d that binary out to each of the cluster members when updated. There are many other features of a WAS ND cell that HCL DX deployments takes advantage of in this topology as well. It is important to note that in this WAS ND topology, regardless of which HCL DX cluster member provides the role of DX administration, all cluster members and the database are properly updated when portlets, themes and configuration changes occur. In a Kubernetes deployment, each HCL DX POD is a standalone WAS entity. These DX PODs have no knowledge of other PODs running DX. All the PODs do share a common database like in the WAS ND cluster case, however. In addition, each POD has a \u201cvolume mount\u201d for the WAS profile governing the configuration of that HCL DX deployment. This profile is also shared between all the PODs to ensure that each POD provides the same response to an inbound HTTP request. In either topology (on-premises OS, or Kubernetes), the union of the WAS profile and the database provide all the configuration required. If the HCL DX Kubernetes PODs all share the same database as well as the same profile, then their responses will be the same for inbound HTTP requests. Also note that no configuration changes are reflected in the HCL DX container (e.g. a Docker \u201ccommit\u201d command is not used). All configuration changes are reflected in the WAS profile. One important difference is that when a configuration change takes place in a Kubernetes environment, typically it is recommended that only one HCL DX POD is active. In that case, the profile and database are updated with any WAS or HCL DX changes. As new PODs are then spawned, they also inherit these changes. Single Kubernetes Cluster Versus Multiple Kubernetes Cluster Just like in the \u201ctraditional\u201d WAS ND cluster, the lowest risk topology for deployment of new artifacts into a Kubernetes cluster is to maintain two independent Kubernetes clusters. Just like in the traditional WAS ND cluster, one would deploy all changes to the \u201coff-line\u201d cluster, validate that cluster and then switch that cluster at the load balancer to be active. One could then apply the same processes to the down-level Kubernetes cluster, which is now out of the active load balancer. Processes and Tooling to Deploy Artifacts to Kubernetes The main difference between deploying HCL DX with WAS ND services to Kubernetes and traditional on-premises platforms is that it is recommended to only allow a single POD of HCL DX to be active in Kubernetes while any configuration changes takes place. The process to deploy new artifacts to a Kubernetes environment mirrors the processes used to deploy those same artifacts to a traditional WAS ND based cluster. All existing deployment tooling is still present and available in the Kubernetes case. The reason one only wants one POD of the DX deployment active is due to the fact that the (shared) database might reflect differences with existing (older) PODs if multiple PODs were allowed to be active. Once all changes are complete, one can allow autoscaling of the number of HCL DX PODs back to the \u201cproduction\u201d number. For DX container autoscaling guidance, see Customizing the Container Deployment . Note that during this process, this single HCL DX POD node can remain in the active load balance if one is running a single Kubernetes cluster. Parent topic: Digital Experience Application deployment","title":"Deploying HCL DX 9.5 Container artifact updates with minimal operations downtime"},{"location":"containerization/deploy_container_artifact_updates/#deploying-hcl-dx-95-container-artifact-updates-with-minimal-operations-downtime","text":"This topic provides guidance to update artifacts in HCL Digital Experience container deployments while minimizing operations downtime.","title":"Deploying HCL DX 9.5 Container artifact updates with minimal operations downtime"},{"location":"containerization/deploy_container_artifact_updates/#introduction","text":"In a Kubernetes environment, how can one achieve zero downtime deployments of new artifacts? In a \u201ctraditional\u201d HCL Digital Experience deployment to on-premises platforms such as Windows, AIX, or Linux OS, adding new components such as a new theme, new portlets, new pages, new PZN rules, etc. is typically achieved by first validating these new artifacts in lower \u201cnon-production\u201d cells prior to introduction to the production cell or cells. When referring to a \u201ctraditional\u201d deployment, that refers to a single cluster in a single cell as depicted in the HCL DX Roadmap: Production and delivery environment . Once validated in non-production cells, the \u201cleast risk\u201d topology for new artifacts (as well as for individual and cumulative fixes) is to employ a two-cell production environment with either active/active or active/passive access. New artifacts would be deployed into a cell that was \u201coff-line\u201d (e.g. not in the active load balance), validating that cell and then moving that cell to the active load balance. Using this process almost always guaranteed a zero-downtime deployment of fixes and artifacts. HCL Digital Experience refers to this topology as the \u201cGold Standard\u201d topology for business critical deployments. One could always take more risk and not employ a two-cell HA environment for production. Rather, one could assume that if the new artifacts were proven in several lower environments, the risk of failure in a single cell production environment was very low.","title":"Introduction"},{"location":"containerization/deploy_container_artifact_updates/#kubernetes-two-views","text":"There are two ways to view deployment to a supported Kubernetes environment. The first is purely from a tooling point of view. In other words, what processes and tooling does one use to get new artifacts into a Kubernetes system? Are these processes and tools different than one would use in a non-Kubernetes HCL Digital Experience platform deployment? The second view, as discussed in the introduction, is how to achieve deployment while minimizing operations downtime?","title":"Kubernetes \u2013 Two Views"},{"location":"containerization/deploy_container_artifact_updates/#difference-and-similarities-between-traditional-and-kubernetes-dx-deployments","text":"To properly understand zero downtime deployment, it is helpful to understand how a traditional Digital Experience Portal cluster is similar and different than a multi-pod Kubernetes deployment. A \u201ctraditional\u201d HCL Digital Experience cluster is based on an IBM WebSphere Application Server (WAS) Network Deployment (ND) cell. One or more HCL DX Servers are in the same WAS cell. They share a common database. Each of the HCL DX Server cluster members produce exactly the same HTTP response as the other members of the cell. When deploying new binary artifacts (e.g. new portlets, themes, etc.), the IBM WAS Deployment Manager (DMgr) in this topology owns the \u201cmaster\u201d copy of the binary. It \u201csyncs\u201d that binary out to each of the cluster members when updated. There are many other features of a WAS ND cell that HCL DX deployments takes advantage of in this topology as well. It is important to note that in this WAS ND topology, regardless of which HCL DX cluster member provides the role of DX administration, all cluster members and the database are properly updated when portlets, themes and configuration changes occur. In a Kubernetes deployment, each HCL DX POD is a standalone WAS entity. These DX PODs have no knowledge of other PODs running DX. All the PODs do share a common database like in the WAS ND cluster case, however. In addition, each POD has a \u201cvolume mount\u201d for the WAS profile governing the configuration of that HCL DX deployment. This profile is also shared between all the PODs to ensure that each POD provides the same response to an inbound HTTP request. In either topology (on-premises OS, or Kubernetes), the union of the WAS profile and the database provide all the configuration required. If the HCL DX Kubernetes PODs all share the same database as well as the same profile, then their responses will be the same for inbound HTTP requests. Also note that no configuration changes are reflected in the HCL DX container (e.g. a Docker \u201ccommit\u201d command is not used). All configuration changes are reflected in the WAS profile. One important difference is that when a configuration change takes place in a Kubernetes environment, typically it is recommended that only one HCL DX POD is active. In that case, the profile and database are updated with any WAS or HCL DX changes. As new PODs are then spawned, they also inherit these changes.","title":"Difference and Similarities Between Traditional and Kubernetes DX Deployments"},{"location":"containerization/deploy_container_artifact_updates/#single-kubernetes-cluster-versus-multiple-kubernetes-cluster","text":"Just like in the \u201ctraditional\u201d WAS ND cluster, the lowest risk topology for deployment of new artifacts into a Kubernetes cluster is to maintain two independent Kubernetes clusters. Just like in the traditional WAS ND cluster, one would deploy all changes to the \u201coff-line\u201d cluster, validate that cluster and then switch that cluster at the load balancer to be active. One could then apply the same processes to the down-level Kubernetes cluster, which is now out of the active load balancer.","title":"Single Kubernetes Cluster Versus Multiple Kubernetes Cluster"},{"location":"containerization/deploy_container_artifact_updates/#processes-and-tooling-to-deploy-artifacts-to-kubernetes","text":"The main difference between deploying HCL DX with WAS ND services to Kubernetes and traditional on-premises platforms is that it is recommended to only allow a single POD of HCL DX to be active in Kubernetes while any configuration changes takes place. The process to deploy new artifacts to a Kubernetes environment mirrors the processes used to deploy those same artifacts to a traditional WAS ND based cluster. All existing deployment tooling is still present and available in the Kubernetes case. The reason one only wants one POD of the DX deployment active is due to the fact that the (shared) database might reflect differences with existing (older) PODs if multiple PODs were allowed to be active. Once all changes are complete, one can allow autoscaling of the number of HCL DX PODs back to the \u201cproduction\u201d number. For DX container autoscaling guidance, see Customizing the Container Deployment . Note that during this process, this single HCL DX POD node can remain in the active load balance if one is running a single Kubernetes cluster. Parent topic: Digital Experience Application deployment","title":"Processes and Tooling to Deploy Artifacts to Kubernetes"},{"location":"containerization/deploy_container_platforms/","text":"Operator-based deployment This section outlines the supported container platforms for HCL Digital Experience 9.5, and instructions on how to deploy to supported container environments. Attention: Beginning with HCL Digital Experience 9.5 Container Update CF200, HCL has discontinued releasing the HCL Digital Experience (DX) Operator-based deployments and will provide support only for Helm-based deployments . There will be no further updates or code fixes provided for the Operator-based deployments. HCL requires all customers to migrate to Helm-based deployments for their DX installations. HCL will work with our customers as they transition from Operator-based to Helm-based deployments. For more information on the migration process, see Migrating from Operator-based to Helm-based deployments . Notes: Initial login credentials for the DX Docker image are: wpsadmin/wpsadmin . Prior to deploying on Red Hat OpenShift or Kubernetes, it is recommended that administrators read the Limitations/Requirements section. Additional guidance about storage class and volume is available for HCL Digital Experience 9.5 container administrators. See the topic Sample Storage Class and Volume for HCL Digital Experience 9.5 Container in Amazon EKS or Red Hat OpenShift . Video : Getting started with HCL Portal 9.5 on Docker . Getting started with HCL DX 9.5 on container platforms . The following container platforms are supported. Docker image list and Docker image deployment Red Hat OpenShift Amazon Elastic Kubernetes Service (EKS) Microsoft Azure Kubernetes Service (AKS) Google Kubernetes Engine (GKE) dxctl Learn how to use dxctl for custom HCL Digital Experience 9.5 container deployments HCL Digital Experience 9.5 Container Deployment This section outlines the supported container platforms for HCL Digital Experience 9.5, and instructions on how to deploy to supported container environments. Install the HCL Digital Experience 9.5 components This section provides a high-level overview of the architecture and the steps to install, configure, and update the HCL Digital Experience 9.5 components: Experience API, Content Composer, and Digital Asset Management. Container administration 9.5 The information in this section enables administrators to manage select operations performance controls, and to update and replace their HCL Digital Experience 9.5 container images with the latest 9.5 container update release. Troubleshooting cloud container Containers This section lists the basics of troubleshooting the containerized image or your deployment. Parent topic: Digital Experience on containerized platforms","title":"Operator-based deployment"},{"location":"containerization/deploy_container_platforms/#operator-based-deployment","text":"This section outlines the supported container platforms for HCL Digital Experience 9.5, and instructions on how to deploy to supported container environments. Attention: Beginning with HCL Digital Experience 9.5 Container Update CF200, HCL has discontinued releasing the HCL Digital Experience (DX) Operator-based deployments and will provide support only for Helm-based deployments . There will be no further updates or code fixes provided for the Operator-based deployments. HCL requires all customers to migrate to Helm-based deployments for their DX installations. HCL will work with our customers as they transition from Operator-based to Helm-based deployments. For more information on the migration process, see Migrating from Operator-based to Helm-based deployments . Notes: Initial login credentials for the DX Docker image are: wpsadmin/wpsadmin . Prior to deploying on Red Hat OpenShift or Kubernetes, it is recommended that administrators read the Limitations/Requirements section. Additional guidance about storage class and volume is available for HCL Digital Experience 9.5 container administrators. See the topic Sample Storage Class and Volume for HCL Digital Experience 9.5 Container in Amazon EKS or Red Hat OpenShift . Video : Getting started with HCL Portal 9.5 on Docker . Getting started with HCL DX 9.5 on container platforms . The following container platforms are supported. Docker image list and Docker image deployment Red Hat OpenShift Amazon Elastic Kubernetes Service (EKS) Microsoft Azure Kubernetes Service (AKS) Google Kubernetes Engine (GKE) dxctl Learn how to use dxctl for custom HCL Digital Experience 9.5 container deployments HCL Digital Experience 9.5 Container Deployment This section outlines the supported container platforms for HCL Digital Experience 9.5, and instructions on how to deploy to supported container environments. Install the HCL Digital Experience 9.5 components This section provides a high-level overview of the architecture and the steps to install, configure, and update the HCL Digital Experience 9.5 components: Experience API, Content Composer, and Digital Asset Management. Container administration 9.5 The information in this section enables administrators to manage select operations performance controls, and to update and replace their HCL Digital Experience 9.5 container images with the latest 9.5 container update release. Troubleshooting cloud container Containers This section lists the basics of troubleshooting the containerized image or your deployment. Parent topic: Digital Experience on containerized platforms","title":"Operator-based deployment"},{"location":"containerization/deploy_dx_components_using_hcl_dx_client_and_dx_connect/","text":"Deploy DX components using HCL DXClient and DXConnect HCL Digital Experience (DX) 9.5 CF19 and later releases include a DXClient toolset, and DXConnect servlet that provides developers and administrators with an approach to deploy changes or improvements to the DX platform, and partially automate the development and delivery process. Important: DXClient version is mostly forward and backward compatible with the DX CF versions, however, in some cases it might not work as expected if the CF versions are different. Hence, ensure that the CF versions of both DXClient and DX Core are the same in your installation. DXClient DXClient is a tool that helps developers and administrators manage tasks, such as uploading one or more portlets or Script Applications, from source development environments to target HCL DX 9.5 deployments. This tool is capable of taking artifacts developed locally and deploying them to DX 9.5 servers deployed to supported on-premises platforms in standalone, cluster, or farm-topologies and supported Kubernetes platforms. DXClient Artifact Types This section provides information about the artifact types that are currently supported by the DXClient tool. Troubleshooting DXClient Logs can be enabled and disabled as desired by DX developers and administrators through configuration options in the config.json file of DXClient. The log files can be viewed inside the logs folder within the DXClient installation folder. DXConnect DXConnect is a servlet-based internal application deployed on top of IBM WebSphere Application Server in the HCL DX 9.5 CF19 and later releases, under the Configuration Wizard profile - cw_profile . DXConnect enables the DXClient tool to connect over an HTTP or HTTPS connection from a client development machine or remote server to a source or target HCL DX 9.5 server to execute certain tasks requested via DXClient commands. This topic covers the DXConnect installation and configuration instructions. Sample Pipelines for use with HCL DXClient and Automation servers A CI/CD pipeline can help automate processes in the development and test cycle, including deploying code to test and production environments. HCL DX 9.5 provides sample pipelines for use with the DXClient tooling to demonstrate how the deployment of portlets, Script Applications, Themes, DX Application, export and import of WCM libraries, etc., can be automated. Sample Pipelines for the DXClient Docker image file This sample shows how to pull DXClient docker image from the given artifactory, run the DXClient tool in the docker and then deploy a portlet, theme, and script application. It is designed to be run from a Jenkins job that provides the following parameters: Sample Pipelines for the DXClient node package file This topic describes how to install the DXClient tool in a pipeline, by providing a few sample pipelines such as pipelines for deploying a portlet, theme, and script application. It is designed to be run from a Jenkins job with the following parameters: Parent topic: Digital Experience Application deployment","title":"Deploy DX components using HCL DXClient and DXConnect"},{"location":"containerization/deploy_dx_components_using_hcl_dx_client_and_dx_connect/#deploy-dx-components-using-hcl-dxclient-and-dxconnect","text":"HCL Digital Experience (DX) 9.5 CF19 and later releases include a DXClient toolset, and DXConnect servlet that provides developers and administrators with an approach to deploy changes or improvements to the DX platform, and partially automate the development and delivery process. Important: DXClient version is mostly forward and backward compatible with the DX CF versions, however, in some cases it might not work as expected if the CF versions are different. Hence, ensure that the CF versions of both DXClient and DX Core are the same in your installation. DXClient DXClient is a tool that helps developers and administrators manage tasks, such as uploading one or more portlets or Script Applications, from source development environments to target HCL DX 9.5 deployments. This tool is capable of taking artifacts developed locally and deploying them to DX 9.5 servers deployed to supported on-premises platforms in standalone, cluster, or farm-topologies and supported Kubernetes platforms. DXClient Artifact Types This section provides information about the artifact types that are currently supported by the DXClient tool. Troubleshooting DXClient Logs can be enabled and disabled as desired by DX developers and administrators through configuration options in the config.json file of DXClient. The log files can be viewed inside the logs folder within the DXClient installation folder. DXConnect DXConnect is a servlet-based internal application deployed on top of IBM WebSphere Application Server in the HCL DX 9.5 CF19 and later releases, under the Configuration Wizard profile - cw_profile . DXConnect enables the DXClient tool to connect over an HTTP or HTTPS connection from a client development machine or remote server to a source or target HCL DX 9.5 server to execute certain tasks requested via DXClient commands. This topic covers the DXConnect installation and configuration instructions. Sample Pipelines for use with HCL DXClient and Automation servers A CI/CD pipeline can help automate processes in the development and test cycle, including deploying code to test and production environments. HCL DX 9.5 provides sample pipelines for use with the DXClient tooling to demonstrate how the deployment of portlets, Script Applications, Themes, DX Application, export and import of WCM libraries, etc., can be automated. Sample Pipelines for the DXClient Docker image file This sample shows how to pull DXClient docker image from the given artifactory, run the DXClient tool in the docker and then deploy a portlet, theme, and script application. It is designed to be run from a Jenkins job that provides the following parameters: Sample Pipelines for the DXClient node package file This topic describes how to install the DXClient tool in a pipeline, by providing a few sample pipelines such as pipelines for deploying a portlet, theme, and script application. It is designed to be run from a Jenkins job with the following parameters: Parent topic: Digital Experience Application deployment","title":"Deploy DX components using HCL DXClient and DXConnect"},{"location":"containerization/deploy_kubernetes_eks/","text":"Deploy DX Container to Amazon EKS Learn how to deploy different releases of HCL Digital Experience 9.5 containers, along with Ambassador to Kubernetes, as verified in Amazon Elastic Kubernetes Service (Amazon EKS) . Deploy DX CF192 and later release Containers to Amazon EKS This section describes how to deploy HCL Digital Experience 9.5 CF192 and later release containers, along with the Ambassador, to Kubernetes as verified in Amazon Elastic Kubernetes Service (Amazon EKS) . Deploy DX CF191 and earlier release Containers to Amazon EKS This section describes how to deploy HCL Digital Experience 9.5 CF191 and earlier release containers, along with the Ambassador, to Kubernetes as verified in Amazon Elastic Kubernetes Service (Amazon EKS) . Parent topic: Deploy DX Container to Amazon EKS","title":"Deploy DX Container to Amazon EKS"},{"location":"containerization/deploy_kubernetes_eks/#deploy-dx-container-to-amazon-eks","text":"Learn how to deploy different releases of HCL Digital Experience 9.5 containers, along with Ambassador to Kubernetes, as verified in Amazon Elastic Kubernetes Service (Amazon EKS) . Deploy DX CF192 and later release Containers to Amazon EKS This section describes how to deploy HCL Digital Experience 9.5 CF192 and later release containers, along with the Ambassador, to Kubernetes as verified in Amazon Elastic Kubernetes Service (Amazon EKS) . Deploy DX CF191 and earlier release Containers to Amazon EKS This section describes how to deploy HCL Digital Experience 9.5 CF191 and earlier release containers, along with the Ambassador, to Kubernetes as verified in Amazon Elastic Kubernetes Service (Amazon EKS) . Parent topic: Deploy DX Container to Amazon EKS","title":"Deploy DX Container to Amazon EKS"},{"location":"containerization/deploy_openshift/","text":"Deploying DX Container to Red Hat OpenShift Learn how to deploy different release of HCL Digital Experience (DX) 9.5 using the Red Hat OpenShift platform. Deploying DX CF192 and later release Containers to Red Hat OpenShift Learn how to deploy HCL Digital Experience (DX) 9.5 DX CF192 and later release Containers using the Red Hat OpenShift platform. Deploying DX CF191 and earlier release Containers to Red Hat OpenShift Learn how to deploy HCL Digital Experience (DX) 9.5 CF191 and earlier release Containers using the Red Hat OpenShift platform. Parent topic: Deploy DX 9.5 Container to Red Hat OpenShift","title":"Deploying DX Container to Red Hat OpenShift"},{"location":"containerization/deploy_openshift/#deploying-dx-container-to-red-hat-openshift","text":"Learn how to deploy different release of HCL Digital Experience (DX) 9.5 using the Red Hat OpenShift platform. Deploying DX CF192 and later release Containers to Red Hat OpenShift Learn how to deploy HCL Digital Experience (DX) 9.5 DX CF192 and later release Containers using the Red Hat OpenShift platform. Deploying DX CF191 and earlier release Containers to Red Hat OpenShift Learn how to deploy HCL Digital Experience (DX) 9.5 CF191 and earlier release Containers using the Red Hat OpenShift platform. Parent topic: Deploy DX 9.5 Container to Red Hat OpenShift","title":"Deploying DX Container to Red Hat OpenShift"},{"location":"containerization/deploy_supported_container_platforms/","text":"HCL Digital Experience 9.5 Container Deployment This section outlines the supported container platforms for HCL Digital Experience 9.5, and instructions on how to deploy to supported container environments. Notes: Prior to deploying on Red Hat OpenShift or Kubernetes, it is recommended that administrators read the Limitations/Requirements section. Additional guidance about storage class and volume is available for HCL Digital Experience 9.5 container administrators. See the topic Sample Storage Class and Volume for HCL Digital Experience 9.5 Container in Amazon EKS or Red Hat OpenShift . Watch this video tutorial: Getting started with HCL Portal 9.5 on Docker . Watch this webinar: Getting started with HCL DX 9.5 on container platforms . The following container platforms are supported. Image listing and Docker install (This page presents the latest Container Update CF file listings.) Red Hat OpenShift Amazon Elastic Kubernetes Service (EKS) Microsoft Azure Kubernetes Service (AKS) Google Kubernetes Engine (GKE) Note: Initial login credentials for the DX Docker image are: wpsadmin/wpsadmin . Deploy DX 9.5 Container to Red Hat OpenShift Learn how to deploy HCL Digital Experience (DX) 9.5 to Red Hat OpenShift platform. Deploy DX Container to Amazon EKS Learn how to deploy, find, understand, and customize the different releases of HCL Digital Experience 9.5 containers, along with Ambassador to Kubernetes, as verified in Amazon Elastic Kubernetes Service (Amazon EKS) . Deploying HCL Digital Experience Containers to Google Kubernetes Engine (GKE) Learn how to deploy different releases of HCL Digital Experience (DX) containers, along with the Ambassador, to Kubernetes as verified in Google Kubernetes Engine (GKE) . Deploy DX Container to Microsoft Azure Kubernetes Service (AKS) Learn how to deploy HCL Digital Experience (DX) 9.5 CF182 and later container release along with Ambassador to Kubernetes, as verified in Microsoft Azure Kubernetes Service (AKS). Parent topic: Operator-based deployment","title":"HCL Digital Experience 9.5 Container Deployment"},{"location":"containerization/deploy_supported_container_platforms/#hcl-digital-experience-95-container-deployment","text":"This section outlines the supported container platforms for HCL Digital Experience 9.5, and instructions on how to deploy to supported container environments. Notes: Prior to deploying on Red Hat OpenShift or Kubernetes, it is recommended that administrators read the Limitations/Requirements section. Additional guidance about storage class and volume is available for HCL Digital Experience 9.5 container administrators. See the topic Sample Storage Class and Volume for HCL Digital Experience 9.5 Container in Amazon EKS or Red Hat OpenShift . Watch this video tutorial: Getting started with HCL Portal 9.5 on Docker . Watch this webinar: Getting started with HCL DX 9.5 on container platforms . The following container platforms are supported. Image listing and Docker install (This page presents the latest Container Update CF file listings.) Red Hat OpenShift Amazon Elastic Kubernetes Service (EKS) Microsoft Azure Kubernetes Service (AKS) Google Kubernetes Engine (GKE) Note: Initial login credentials for the DX Docker image are: wpsadmin/wpsadmin . Deploy DX 9.5 Container to Red Hat OpenShift Learn how to deploy HCL Digital Experience (DX) 9.5 to Red Hat OpenShift platform. Deploy DX Container to Amazon EKS Learn how to deploy, find, understand, and customize the different releases of HCL Digital Experience 9.5 containers, along with Ambassador to Kubernetes, as verified in Amazon Elastic Kubernetes Service (Amazon EKS) . Deploying HCL Digital Experience Containers to Google Kubernetes Engine (GKE) Learn how to deploy different releases of HCL Digital Experience (DX) containers, along with the Ambassador, to Kubernetes as verified in Google Kubernetes Engine (GKE) . Deploy DX Container to Microsoft Azure Kubernetes Service (AKS) Learn how to deploy HCL Digital Experience (DX) 9.5 CF182 and later container release along with Ambassador to Kubernetes, as verified in Microsoft Azure Kubernetes Service (AKS). Parent topic: Operator-based deployment","title":"HCL Digital Experience 9.5 Container Deployment"},{"location":"containerization/deployapplication/","text":"Digital Experience applications This section provides information about the deployment of DX application artifacts by using the DXClient tool. Deploy Application The deploy-application command is used to deploy the EAR file into the WebSphere Application Server. Command description This command invokes the deploy-application tool inside DXClient. This command uses the provided files and execute the deploy application task. dxclient deploy-application Required files The following EAR file will be deployed into the WebSphere Application Server: Deployable EAR Help command This command shows the help information for deploy-application command usage: dxclient deploy-application -h Command options Use this attribute to specify the hostname of the target server -hostname <value> Use this attribute to specify the protocol with which to connect to the server -dxProtocol <value> Use this attribute to specify the port on which to connect to the server(for Kubernetes Environment dxPort is 443) -dxPort <value> Use this attribute to specify the username that is required for authenticating with the server -dxUsername <value> Use this attribute to specify the password that is required for authenticating with the server -dxPassword <value> Use this attribute and retrigger the command to check the status of any previous request that was incomplete. -requestId <Unique ID of a previously triggered deploy application request> Required options for application deployment: Use this attribute to specify the config wizard home (route change only in case of Open Shift Kubernetes Enviornment, otherwise same as hostname) that is required for authenticating to the cw_profile -dxConnectHostname <value> Use this attribute to specify the port number of the cw_profile (for Kubernetes Environment dxConnectPort is 443) -dxConnectPort <value> Use this attribute to specify the username that is required for authenticating to the cw_profile -dxConnectUsername <value> Use this attribute to specify the password that is required for authenticating to the cw_profile -dxConnectPassword <value> Use this attribute to specify Soap port of the DX server -dxSoapPort <Soap port of the DX server> Specify either the dxProfileName or dxProfilePath of the DX core server: Use this attribute to specify the profile name of the DX core server (for example: wp_profile ): -dxProfileName <Profile name of the DX core server> OR Use this attribute to specify the profile path of the DX server (for example: /opt/HCL/wp_profile ): -dxProfilePath <Path of the DX core server profile> Use this attribute to specify the EAR file path that is required while executing the deploy application task \u2013applicationFile <Absolute or relative path to deployable ear file> Use this attribute to specify the application name -applicationName <value> Use this attribute to specify the path to the contenthandler servlet on the DX server (e.g. /wps/mycontenthandler) -contenthandlerPath <value> The values passed through the command line command override the default values. Example: dxclient deploy-application -dxProtocol <http/https> -hostname <host-name> -dxPort <dxPort> -dxUsername <dxUsername> -dxPassword <dxPassword> -dxSoapPort <dxSoapPort> -dxConnectHostname <hostname> -dxConnectPort <dxConnectPort> -dxConnectUsername <dxConnectUsername> -dxConnectPassword <dxConnectPassword> -applicationFile <application-file-with-path> -applicationName <application name> -dxProfileName <Profile name of the DX core server> Parent topic: DXClient Artifact Types","title":"Digital Experience applications"},{"location":"containerization/deployapplication/#digital-experience-applications","text":"This section provides information about the deployment of DX application artifacts by using the DXClient tool.","title":"Digital Experience applications"},{"location":"containerization/deployapplication/#deploy-application","text":"The deploy-application command is used to deploy the EAR file into the WebSphere Application Server. Command description This command invokes the deploy-application tool inside DXClient. This command uses the provided files and execute the deploy application task. dxclient deploy-application Required files The following EAR file will be deployed into the WebSphere Application Server: Deployable EAR Help command This command shows the help information for deploy-application command usage: dxclient deploy-application -h Command options Use this attribute to specify the hostname of the target server -hostname <value> Use this attribute to specify the protocol with which to connect to the server -dxProtocol <value> Use this attribute to specify the port on which to connect to the server(for Kubernetes Environment dxPort is 443) -dxPort <value> Use this attribute to specify the username that is required for authenticating with the server -dxUsername <value> Use this attribute to specify the password that is required for authenticating with the server -dxPassword <value> Use this attribute and retrigger the command to check the status of any previous request that was incomplete. -requestId <Unique ID of a previously triggered deploy application request> Required options for application deployment: Use this attribute to specify the config wizard home (route change only in case of Open Shift Kubernetes Enviornment, otherwise same as hostname) that is required for authenticating to the cw_profile -dxConnectHostname <value> Use this attribute to specify the port number of the cw_profile (for Kubernetes Environment dxConnectPort is 443) -dxConnectPort <value> Use this attribute to specify the username that is required for authenticating to the cw_profile -dxConnectUsername <value> Use this attribute to specify the password that is required for authenticating to the cw_profile -dxConnectPassword <value> Use this attribute to specify Soap port of the DX server -dxSoapPort <Soap port of the DX server> Specify either the dxProfileName or dxProfilePath of the DX core server: Use this attribute to specify the profile name of the DX core server (for example: wp_profile ): -dxProfileName <Profile name of the DX core server> OR Use this attribute to specify the profile path of the DX server (for example: /opt/HCL/wp_profile ): -dxProfilePath <Path of the DX core server profile> Use this attribute to specify the EAR file path that is required while executing the deploy application task \u2013applicationFile <Absolute or relative path to deployable ear file> Use this attribute to specify the application name -applicationName <value> Use this attribute to specify the path to the contenthandler servlet on the DX server (e.g. /wps/mycontenthandler) -contenthandlerPath <value> The values passed through the command line command override the default values. Example: dxclient deploy-application -dxProtocol <http/https> -hostname <host-name> -dxPort <dxPort> -dxUsername <dxUsername> -dxPassword <dxPassword> -dxSoapPort <dxSoapPort> -dxConnectHostname <hostname> -dxConnectPort <dxConnectPort> -dxConnectUsername <dxConnectUsername> -dxConnectPassword <dxConnectPassword> -applicationFile <application-file-with-path> -applicationName <application name> -dxProfileName <Profile name of the DX core server> Parent topic: DXClient Artifact Types","title":"Deploy Application"},{"location":"containerization/deploying_custom_code_openshift/","text":"Deploying Custom Code in OpenShift This section outlines deploying custom code to HCL Digital Experience in OpenShift. Follow these steps to deploy custom code in OpenShift. Along with the benefits of moving HCL Digital Experience to a containerized and orchestrated environment, there also comes the deployment and customization process changes. As containers are short-lived, changes made during the container's runtime are transient. For this reason, a persisted volume is required to retain the HCL Digital Experience configuration settings. The server's profile directory tree, the default and obligatory mount point for persistence, currently stores this information, for example, /opt/HCL/wp_profile. The recommended approach for deploying custom applications to HCL Digital Experience running in the OpenShift Container Platform is through an automated Continuous Integration and Continuous Delivery (CI/CD) pipeline connected to a source code repository containing a pipeline script. For our purposes, we use Jenkins and GitHub. A sample Jenkinsfile and BuildConfig.yaml is provided. In an OpenShift environment, you can deploy a Jenkins instance with either of the following two (2) OpenShift Client commands. oc new-app jenkins-ephemeral oc new-app jenkins-persistent As the commands imply, the Jenkins instance can be persistent or transient. Persistent requiring a persistent volume. Configure the Jenkins server tools as needed for your custom code build requirements. Navigate to Manage Jenkins > Global Tool Configuration and add the tools needed to build your application. For our purposes, we configured Ant and JDK 8. Configure the Jenkins server credentials as needed to access you source code repository. Connection through an SSH key for the application repository and OpenShift is recommended. ssh-keygen -C \"openshift-source-builder/repo@github\" -f repo-at-github -N '' This will generate a public repo-at-github key file and a public repo-at-github.pub key file. Copy the public key contents to your clipboard. clip < ~/.ssh/repo-at-github.pub Navigate to your GitHub repository > Settings > Deploy Keys > Add deploy key . Provide a title for the key, paste the clipboard contents into the key textbox and click Add Key. Copy the private key contents to your clipboard. clip < ~/.ssh/repo-at-github Add the private key to the Jenkins server as an OpenShift secret. oc create secret generic repo-at-github --from-file=ssh-privatekey=~/.ssh/repo-at-github Link the secret to OpenShift builder. oc secrets link builder repo-at-github Create an OpenShift Build Config for building the custom application code stored in GitHub using the provided sample yaml file customized for your environment. oc create -f customized-sample-build-config.yaml kind: BuildConfig apiVersion: build.openshift.io/v1 metadata: name: <name of your application pipeline> namespace: <namespace-in-openshift> spec: source: git: uri: \"git@github.com:<my custom code directory>/<my custom repository>.git\" strategy: jenkinsPipelineStrategy: jenkinsfilePath: jenkinsfile triggers: - type: GitHub github: secret: <myCustomAppSecret> Link the GitHub repository secret to the OpenShift Build Config. oc set build-secret --source bc/custom-editor-app-pipeline repo-at-github To enable OpenShift to compile and deploy the custom application with each source code commit to GitHub, configure a webhook in the GitHub repository for the OpenShift Build Config. Navigate to your GitHub repository > Settings > Webhooks > Add webhook . To find the value of the Webhook Payload URL, use the OpenShift client describe command for the Build Config: oc describe bc/<name of your application pipeline> For example, your Webhook Payload URL may look something like the following: https://api.hcl-dxdev.hcl-dx-dev.net:6443/apis/build.openshift.io/v1/namespaces/<namespace-in-openshift>/buildconfigs/<nameOfYourApplicationPipeline>/webhooks/<myCustomAppSecretFromTheSampleBuildConfigFile>/github Set the Content type of the Webhook to application/json. If your environment is not using a properly signed certificate, choose to disable SSL. Install and configure the Jenkins plugins required for your application build environment. Navigate to Manage Jenkins > Manage Plugins . From the Available tab, install the following plugins as necessary, as well as others needed based on your requirements. ``` WebSphere-Deployer Plugin - ``` Copy Artifact Plugin - ``` OpenShift Client Jenkins Plugin (if not already installed) ``` Configure the WebSphere-Deployer plugin to connect to the WebSphere Integrated Solutions Console. Restart the Jenkins server. https://<jenkins-in-openshift-url>/restart Note: If in an OpenShift environment, a trusted SSL certificate is required for the WebSphere-Deployer plugin. Both the source repository and the Jenkins server require network access to the WebSphere Integrated Solution Console route. Create the Jenkins deployment job for your application. Use the Copy Artifact plugin to provide the application build output to the deployment job. Note: It is required to configure the deployment job for the application in the Jenkins GUI as the WebSphere-Deployer Plugin is not executable from the command line, and therefore cannot be scripted. Navigate to your OpenShift ProjectName > New Item , provide a name for the application deployment job, select Freestyle Project and click OK . On the General tab of the deployment job's configuration page, check the Restrict where this project can be run check box and enter master in the Label Expression text box. Note: The WebSphere-Deployer plugin only supports deployment from a Jenkins master. Scroll down to the Build Step section of the configuration page, from the Add build step dropdown, choose Copy artifacts from another project . For the Project name , enter the name of the application build project. The default application build project name will be <namespace-in-openshift>-<name of your application pipeline> . In the Which build dropdown, select Upstream build that triggered this job . In the Artifacts to Copy text box, enter the artifacts required for your deployment. Enter any additional parameters relevant to your environment. Scroll down to the Post-Build Actions section of the configuration page, from the Add post-build action dropdown, choose Deploy To IBM WebSphere Application Server . Enter the required WebSphere information for your environment. Check the Connect using Global Security check box and enter the WebSphere administrator username and password . Note: The WebSphere administrator credentials are stored in plain text in the job config.xml files on the Jenkins master. Check the Trust SSL Certificate checkbox. Click on the Advanced... button and enter the KeyStore and TrustStore values. Ensure the Test Connection and/or Show Available Targets buttons show successful returns. Enter any additional deployment options relevant to your application and click Save . Note: The pipeline can be launched from the OpenShift Platform Console Build Configs page, the oc start-build <build-config-name> command, or with a commit to the GitHub repository. The pipeline will copy the application artifact to an HCL Digital Experience instance in OpenShift. The directory where the artifact is copied must already exist and have the appropriate permissions. Sample Jenkins file pipeline{ agent any environment { appName = 'CustomHTMLEditor' earFileName = 'CustomHTMLEditor.ear' antHome = tool 'JenkinsAnt' //Name of the pod to which the application binaries will be copied dx_instance_name = 'dx-deployment-0' //Path location within HCL Digital Experience to where to the applciation binaries will be copied app_binary_path = '/opt/HCL/wp_profile/customApps/' } options { //Value needs to match the name of the downstream application deploy job created in the Jenkins console. copyArtifactPermission('deploy-custom-editor-app') } stages { stage('Log Entry') { steps { script { openshift.withCluster() { openshift.withProject() { echo \"Building: ${appName} in project: ${openshift.project()}.\" } } } } } stage('Checkout') { steps { git 'http://github.com:<my custom code directory>/<my custom repository>.git' } } stage('Build') { steps { sh \"'${antHome}/bin/ant' clean makezips\" } } stage('Archive') { steps { archiveArtifacts 'build/dist/*.ear' } } stage('Deliver') { steps { script { openshift.withCluster() { openshift.withProject() { def result = openshift.raw ( 'cp', '${WORKSPACE}/build/dist/${earFileName} ${dx_instance_name}:${app_binary_path}') echo \"Delivery Status: ${result.out}\" } } } } } stage('Deploy'){ steps { //Value needs to match the name of the downstream application deploy job created in the Jenkins console. build 'deploy-custom-editor-app' } } stage('Log Exit') { steps { script { openshift.withCluster() { openshift.withProject() { echo \"Completed build, delivery and deployment of ${appName} in project: ${openshift.project()}.\" } } } } } } } Parent topic: Deploy DX 9.5 Container to Red Hat OpenShift Parent topic: Digital Experience Application deployment","title":"Deploying Custom Code in OpenShift"},{"location":"containerization/deploying_custom_code_openshift/#deploying-custom-code-in-openshift","text":"This section outlines deploying custom code to HCL Digital Experience in OpenShift. Follow these steps to deploy custom code in OpenShift. Along with the benefits of moving HCL Digital Experience to a containerized and orchestrated environment, there also comes the deployment and customization process changes. As containers are short-lived, changes made during the container's runtime are transient. For this reason, a persisted volume is required to retain the HCL Digital Experience configuration settings. The server's profile directory tree, the default and obligatory mount point for persistence, currently stores this information, for example, /opt/HCL/wp_profile. The recommended approach for deploying custom applications to HCL Digital Experience running in the OpenShift Container Platform is through an automated Continuous Integration and Continuous Delivery (CI/CD) pipeline connected to a source code repository containing a pipeline script. For our purposes, we use Jenkins and GitHub. A sample Jenkinsfile and BuildConfig.yaml is provided. In an OpenShift environment, you can deploy a Jenkins instance with either of the following two (2) OpenShift Client commands. oc new-app jenkins-ephemeral oc new-app jenkins-persistent As the commands imply, the Jenkins instance can be persistent or transient. Persistent requiring a persistent volume. Configure the Jenkins server tools as needed for your custom code build requirements. Navigate to Manage Jenkins > Global Tool Configuration and add the tools needed to build your application. For our purposes, we configured Ant and JDK 8. Configure the Jenkins server credentials as needed to access you source code repository. Connection through an SSH key for the application repository and OpenShift is recommended. ssh-keygen -C \"openshift-source-builder/repo@github\" -f repo-at-github -N '' This will generate a public repo-at-github key file and a public repo-at-github.pub key file. Copy the public key contents to your clipboard. clip < ~/.ssh/repo-at-github.pub Navigate to your GitHub repository > Settings > Deploy Keys > Add deploy key . Provide a title for the key, paste the clipboard contents into the key textbox and click Add Key. Copy the private key contents to your clipboard. clip < ~/.ssh/repo-at-github Add the private key to the Jenkins server as an OpenShift secret. oc create secret generic repo-at-github --from-file=ssh-privatekey=~/.ssh/repo-at-github Link the secret to OpenShift builder. oc secrets link builder repo-at-github Create an OpenShift Build Config for building the custom application code stored in GitHub using the provided sample yaml file customized for your environment. oc create -f customized-sample-build-config.yaml kind: BuildConfig apiVersion: build.openshift.io/v1 metadata: name: <name of your application pipeline> namespace: <namespace-in-openshift> spec: source: git: uri: \"git@github.com:<my custom code directory>/<my custom repository>.git\" strategy: jenkinsPipelineStrategy: jenkinsfilePath: jenkinsfile triggers: - type: GitHub github: secret: <myCustomAppSecret> Link the GitHub repository secret to the OpenShift Build Config. oc set build-secret --source bc/custom-editor-app-pipeline repo-at-github To enable OpenShift to compile and deploy the custom application with each source code commit to GitHub, configure a webhook in the GitHub repository for the OpenShift Build Config. Navigate to your GitHub repository > Settings > Webhooks > Add webhook . To find the value of the Webhook Payload URL, use the OpenShift client describe command for the Build Config: oc describe bc/<name of your application pipeline> For example, your Webhook Payload URL may look something like the following: https://api.hcl-dxdev.hcl-dx-dev.net:6443/apis/build.openshift.io/v1/namespaces/<namespace-in-openshift>/buildconfigs/<nameOfYourApplicationPipeline>/webhooks/<myCustomAppSecretFromTheSampleBuildConfigFile>/github Set the Content type of the Webhook to application/json. If your environment is not using a properly signed certificate, choose to disable SSL. Install and configure the Jenkins plugins required for your application build environment. Navigate to Manage Jenkins > Manage Plugins . From the Available tab, install the following plugins as necessary, as well as others needed based on your requirements. ``` WebSphere-Deployer Plugin - ``` Copy Artifact Plugin - ``` OpenShift Client Jenkins Plugin (if not already installed) ``` Configure the WebSphere-Deployer plugin to connect to the WebSphere Integrated Solutions Console. Restart the Jenkins server. https://<jenkins-in-openshift-url>/restart Note: If in an OpenShift environment, a trusted SSL certificate is required for the WebSphere-Deployer plugin. Both the source repository and the Jenkins server require network access to the WebSphere Integrated Solution Console route. Create the Jenkins deployment job for your application. Use the Copy Artifact plugin to provide the application build output to the deployment job. Note: It is required to configure the deployment job for the application in the Jenkins GUI as the WebSphere-Deployer Plugin is not executable from the command line, and therefore cannot be scripted. Navigate to your OpenShift ProjectName > New Item , provide a name for the application deployment job, select Freestyle Project and click OK . On the General tab of the deployment job's configuration page, check the Restrict where this project can be run check box and enter master in the Label Expression text box. Note: The WebSphere-Deployer plugin only supports deployment from a Jenkins master. Scroll down to the Build Step section of the configuration page, from the Add build step dropdown, choose Copy artifacts from another project . For the Project name , enter the name of the application build project. The default application build project name will be <namespace-in-openshift>-<name of your application pipeline> . In the Which build dropdown, select Upstream build that triggered this job . In the Artifacts to Copy text box, enter the artifacts required for your deployment. Enter any additional parameters relevant to your environment. Scroll down to the Post-Build Actions section of the configuration page, from the Add post-build action dropdown, choose Deploy To IBM WebSphere Application Server . Enter the required WebSphere information for your environment. Check the Connect using Global Security check box and enter the WebSphere administrator username and password . Note: The WebSphere administrator credentials are stored in plain text in the job config.xml files on the Jenkins master. Check the Trust SSL Certificate checkbox. Click on the Advanced... button and enter the KeyStore and TrustStore values. Ensure the Test Connection and/or Show Available Targets buttons show successful returns. Enter any additional deployment options relevant to your application and click Save . Note: The pipeline can be launched from the OpenShift Platform Console Build Configs page, the oc start-build <build-config-name> command, or with a commit to the GitHub repository. The pipeline will copy the application artifact to an HCL Digital Experience instance in OpenShift. The directory where the artifact is copied must already exist and have the appropriate permissions. Sample Jenkins file pipeline{ agent any environment { appName = 'CustomHTMLEditor' earFileName = 'CustomHTMLEditor.ear' antHome = tool 'JenkinsAnt' //Name of the pod to which the application binaries will be copied dx_instance_name = 'dx-deployment-0' //Path location within HCL Digital Experience to where to the applciation binaries will be copied app_binary_path = '/opt/HCL/wp_profile/customApps/' } options { //Value needs to match the name of the downstream application deploy job created in the Jenkins console. copyArtifactPermission('deploy-custom-editor-app') } stages { stage('Log Entry') { steps { script { openshift.withCluster() { openshift.withProject() { echo \"Building: ${appName} in project: ${openshift.project()}.\" } } } } } stage('Checkout') { steps { git 'http://github.com:<my custom code directory>/<my custom repository>.git' } } stage('Build') { steps { sh \"'${antHome}/bin/ant' clean makezips\" } } stage('Archive') { steps { archiveArtifacts 'build/dist/*.ear' } } stage('Deliver') { steps { script { openshift.withCluster() { openshift.withProject() { def result = openshift.raw ( 'cp', '${WORKSPACE}/build/dist/${earFileName} ${dx_instance_name}:${app_binary_path}') echo \"Delivery Status: ${result.out}\" } } } } } stage('Deploy'){ steps { //Value needs to match the name of the downstream application deploy job created in the Jenkins console. build 'deploy-custom-editor-app' } } stage('Log Exit') { steps { script { openshift.withCluster() { openshift.withProject() { echo \"Completed build, delivery and deployment of ${appName} in project: ${openshift.project()}.\" } } } } } } } Parent topic: Deploy DX 9.5 Container to Red Hat OpenShift Parent topic: Digital Experience Application deployment","title":"Deploying Custom Code in OpenShift"},{"location":"containerization/deployment/","text":"Digital Experience on containerized platforms Learn how to deploy HCL Digital Experience as a cloud-native platform and optimize business-critical digital experiences for your customers. The Kubernetes container orchestration platform allows orchestration features for the automated deployment, coordination, scaling, and management of containerized applications. Originally designed by Google, now governed by the Cloud Native Computing Foundation (CNCF), and developed by Google, Red Hat, and many others, Kubernetes is now widely used by organizations of various sizes to run containers in a cloud environment. Containerization overview Learn more about the containerization architecture, including the supported container platforms in deploying HCL Digital Experience images for your environment. Containerization requirements and limitations This section describes the requirements to deploy the HCL Digital Experience 9.5 images to container platforms and current limitations. Container platform support matrix View the latest Kubernetes and OpenShift platforms tested and supported for specific HCL Digital Experience 9.5 Container Update deployments. Docker image list This section presents the latest HCL DX 9.5 Docker container update images available. DX on Docker Helm-based deployment Learn how to deploy HCL Digital Experience 9.5 containers along with Ambassador to Kubernetes, as verified in Helm. Support to deploy to Red Hat OpenShift, Amazon Elastic Kubernetes Service (Amazon EKS), and Microsoft Azure Kubernetes Service (AKS) using Helm is added in Container Update CF197. Operator-based deployment This section outlines the supported container platforms for HCL Digital Experience 9.5, and instructions on how to deploy to supported container environments. Hybrid deployment - Operator This section describes how to install HCL Digital Experience 9.5 Portal Server and Web Content Manager services to on-premises platforms, operating with Digital Asset Management, Content Composer, Experience API deployed to cloud-based Kubernetes and OpenShift platforms deployed using the Operator (dxctl) method. Hybrid Deployment - Helm This section describes how to install HCL Digital Experience 9.5 Container Update CF198 and later Portal Server and Web Content Manager services to on-premises platforms, operating with Digital Asset Management, Content Composer, Experience API deployed to cloud-based Kubernetes and OpenShift platforms using the Helm deployment method. Customizing the HCL DX URL for hybrid deployment HCL Digital Experience and Web Services for Remote Portlets are installed with a default URI or context root. This section describes how to change default URI or context root of the portal and hybrid deployment. Upgrade options for containerized deployments HCL Digital Experience on containerized platforms is constantly evolving and incorporating customer feedback. Some of these improvements need extra manual steps to get to the latest version. To make this journey manageable and transparent, this topic shows all possible starting scenarios and their upgrade path. Deploying HCL Digital Experience 9.5 with HCL Solution Factory (SoFy) The HCL Solution Factory (SoFy) platform offers the ability for organizations to quickly prototype, test and deploy HCL Digital Experience and other solutions, and can enable organizations to speed cloud-native adoption.","title":"Digital Experience on containerized platforms"},{"location":"containerization/deployment/#digital-experience-on-containerized-platforms","text":"Learn how to deploy HCL Digital Experience as a cloud-native platform and optimize business-critical digital experiences for your customers. The Kubernetes container orchestration platform allows orchestration features for the automated deployment, coordination, scaling, and management of containerized applications. Originally designed by Google, now governed by the Cloud Native Computing Foundation (CNCF), and developed by Google, Red Hat, and many others, Kubernetes is now widely used by organizations of various sizes to run containers in a cloud environment. Containerization overview Learn more about the containerization architecture, including the supported container platforms in deploying HCL Digital Experience images for your environment. Containerization requirements and limitations This section describes the requirements to deploy the HCL Digital Experience 9.5 images to container platforms and current limitations. Container platform support matrix View the latest Kubernetes and OpenShift platforms tested and supported for specific HCL Digital Experience 9.5 Container Update deployments. Docker image list This section presents the latest HCL DX 9.5 Docker container update images available. DX on Docker Helm-based deployment Learn how to deploy HCL Digital Experience 9.5 containers along with Ambassador to Kubernetes, as verified in Helm. Support to deploy to Red Hat OpenShift, Amazon Elastic Kubernetes Service (Amazon EKS), and Microsoft Azure Kubernetes Service (AKS) using Helm is added in Container Update CF197. Operator-based deployment This section outlines the supported container platforms for HCL Digital Experience 9.5, and instructions on how to deploy to supported container environments. Hybrid deployment - Operator This section describes how to install HCL Digital Experience 9.5 Portal Server and Web Content Manager services to on-premises platforms, operating with Digital Asset Management, Content Composer, Experience API deployed to cloud-based Kubernetes and OpenShift platforms deployed using the Operator (dxctl) method. Hybrid Deployment - Helm This section describes how to install HCL Digital Experience 9.5 Container Update CF198 and later Portal Server and Web Content Manager services to on-premises platforms, operating with Digital Asset Management, Content Composer, Experience API deployed to cloud-based Kubernetes and OpenShift platforms using the Helm deployment method. Customizing the HCL DX URL for hybrid deployment HCL Digital Experience and Web Services for Remote Portlets are installed with a default URI or context root. This section describes how to change default URI or context root of the portal and hybrid deployment. Upgrade options for containerized deployments HCL Digital Experience on containerized platforms is constantly evolving and incorporating customer feedback. Some of these improvements need extra manual steps to get to the latest version. To make this journey manageable and transparent, this topic shows all possible starting scenarios and their upgrade path. Deploying HCL Digital Experience 9.5 with HCL Solution Factory (SoFy) The HCL Solution Factory (SoFy) platform offers the ability for organizations to quickly prototype, test and deploy HCL Digital Experience and other solutions, and can enable organizations to speed cloud-native adoption.","title":"Digital Experience on containerized platforms"},{"location":"containerization/docker/","text":"Docker image list This section presents the latest HCL DX 9.5 Docker container update images available. Docker container update file list The HCL DX 9.5 container update releases may be obtained from your HCL Digital Experience entitlements in the HCL Software License Portal , in the HCL_Portal_8.5_9.0_9.5_CFs download package entry, and the HCL_DX_9.5_Container_Updates download package entry for HCL Digital Experience Cloud Native 9.5 entitlements. Video: How to upload HCL Digital Experience 9.5 CF container images to a private repository HCL DX 9.5 CF201 Container Update CF201 If deploying the HCL DX 9.5 CF201 release, the package name and images are as follows: HCL DX 9.5 CF201 DXClient files : hcl-dxclient-image-v95_CF201_20220207-1614.zip hcl-dxclient-v95_CF201_20220207-1613.zip HCL DX 9.5 CF_201-hcl-dx-kubernetes-v95-CF201.zip : HCL DX notices V9.5 CF201.txt hcl-dx-ambassador-image-1142.tar.gz hcl-dx-content-composer-image-v1.14.0_20220207-1550.tar.gz hcl-dx-core-image-v95_CF201_20220206-1331.tar.gz hcl-dx-deployment-v2.4.0_20220207-1606.tgz hcl-dx-design-studio-image-v0.7.0_20220207-1549.tar.gz hcl-dx-digital-asset-manager-image-v1.13.0_20220207-1609.tar.gz hcl-dx-experience-api-sample-ui-v0.2.0.20220207-1549.zip hcl-dx-image-processor-image-v1.14.0_20220207-1606.tar.gz hcl-dx-openldap-image-v1.2.0_20220207-1556.tar.gz hcl-dx-persistence-connection-pool-image-v1.14.0_20220207-1612.tar.gz hcl-dx-persistence-image-v1.14.0_20220207-1611.tar.gz hcl-dx-persistence-metrics-exporter-image-v1.12.0_20220207-1611.tar.gz hcl-dx-persistence-node-image-v1.4_20220207-1549.tar.gz hcl-dx-redis-image-5.0.14.tar.gz hcl-dx-remote-search-image-v95_CF201_20220206-1331.tar.gz hcl-dx-ringapi-image-v1.14.0_20220207-1554.tar.gz hcl-dx-runtime-controller-image-v95_CF201_20220207-1558.tar.gz hcl-dx-sidecar-image-v1.0.0_8.4-205.tar.gz HCL DX 9.5 CF200 Container Update CF200 If deploying the HCL DX 9.5 CF200 release, the package name and images are as follows: HCL DX 9.5 CF200 DXClient files : hcl-dxclient-image-v95_CF200_20211213-1500.zip hcl-dxclient-v95_CF200_20211213-1459.zip HCL DX 9.5 CF_200-hcl-dx-kubernetes-v95-CF200.zip Important: With the Operator-based deployment being removed starting in HCL DX Container Update 9.5 CF200, you will find some changes in the list of files and their names in CF199 and later releases. For more information, see List of image files and changes from CF198 and later . HCL DX notices V9.5 CF200.txt hcl-dx-ambassador-image-1142.tar.gz hcl-dx-content-composer-image-v1.13.0_20211213-1443.tar.gz hcl-dx-core-image-v95_CF200_20211213-1442.tar.gz hcl-dx-deployment-v2.2.0_20211213-1446.tgz hcl-dx-design-studio-image-v0.6.0_20211213-1448.tar.gz hcl-dx-digital-asset-manager-image-v1.12.0_20211213-1448.tar.gz hcl-dx-experience-api-sample-ui-v0.2.0.20211213-1454.zip hcl-dx-image-processor-image-v1.13.0_20211213-1446.tar.gz hcl-dx-openldap-image-v1.2.0_20211213-1444.tar.gz hcl-dx-persistence-connection-pool-image-v1.13.0_20211213-1457.tar.gz hcl-dx-persistence-image-v1.13.0_20211213-1457.tar.gz hcl-dx-persistence-metrics-exporter-image-v1.11.0_20211213-1458.tar.gz hcl-dx-persistence-node-image-v1.3_20211213-1454.tar.gz hcl-dx-redis-image-5.0.14.tar.gz hcl-dx-remote-search-image-v95_CF200_20211213-1442.tar.gz hcl-dx-ringapi-image-v1.13.0_20211213-1457.tar.gz hcl-dx-runtime-controller-image-v95_CF200_20211213-1444.tar.gz hcl-dx-sidecar-image-v1.0.0_8.4-205.tar.gz HCL DX 9.5 CF199 Container Update CF199 If deploying the HCL DX 9.5 CF199 release, the package name and images are as follows: HCL DX 9.5 CF199 DXClient files : hcl-dxclient-image-v95_CF199_20211029-1357.zip hcl-dxclient-v95_CF199_20211029-1357.zip HCL DX 9.5 CF_199-hcl-dx-kubernetes-v95-CF199.zip HCL DX notices V9.5 CF199.txt hcl-dx-ambassador-image-154.tar.gz hcl-dx-cloud-operator-image-v95_CF199_20211029-1700.tar.gz hcl-dx-cloud-scripts-v95_CF199_20211029-1700.zip hcl-dx-content-composer-image-v1.12.0_20211029-1341.tar.gz hcl-dx-core-image-v95_CF199_20211029-1348.tar.gz hcl-dx-deployment-v2.1.0_20211029-1346.tgz hcl-dx-design-studio-image-v0.5.0_20211029-0013.tar.gz hcl-dx-digital-asset-management-operator-image-v95_CF199_20211029-1342.tar.gz hcl-dx-digital-asset-manager-image-v1.11.0_20211029-1350.tar.gz hcl-dx-experience-api-sample-ui-v0.2.0.20211029-1354.zip hcl-dx-image-processor-image-v1.12.0_20211029-1346.tar.gz hcl-dx-openldap-image-v1.2.0_20211029-1342.tar.gz hcl-dx-persistence-connection-pool-image-v1.11.0_20211029-0224.tar.gz hcl-dx-persistence-image-v1.11.0_20211029-1349.tar.gz hcl-dx-persistence-metrics-exporter-image-v1.10.0_20211029-1352.tar.gz hcl-dx-persistence-node-image-v1.1_20211029-0148.tar.gz hcl-dx-redis-image-5.0.1.tar.gz hcl-dx-remote-search-image-v95_CF199_20211029-1348.tar.gz hcl-dx-ringapi-image-v1.12.0_20211029-1357.tar.gz hcl-dx-runtime-controller-image-v95_CF199_20211029-1344.tar.gz hcl-dx-sidecar-image-v1.0.0_8.4-205.tar.gz Important: With the Operator-based deployment being deprecated in CF198 and planned to be removed in HCL DX Container Update 9.5 CF200, you will find some changes in the list of files and their names in CF199 and later releases. Component Image name CF198 CF199 DX Core hcl-dx-core-image-vx.x.x_xxxxxxxx-xxxx.tar.gz hcl-dx-core-image-v95_CF198_20210917-1438.tar.gz hcl-dx-core-image-v95_CF199_20211029-1348.tar.gz Ring API hcl-dx-ringapi-image-vx.x.x_xxxxxxxx-xxxx.tar.gz hcl-dx-ringapi-image-v1.11.0_20210917-1441.tar.gz hcl-dx-ringapi-image-v1.12.0_20211029-1357.tar.gz Content Composer hcl-dx-content-composer-image-vx.x.x_xxxxxxxx-xxxx.tar.gz hcl-dx-content-composer-image-v1.10.0_20210917-1437.tar.gz hcl-dx-content-composer-image-v1.12.0_20211029-1341.tar.gz DX Deployment hcl-dx-deployment-vx.x.x_xxxxxxxx-xxxx.tgz hcl-dx-deployment-v2.0.0_20210917-1441.tgz hcl-dx-deployment-v2.1.0_20211029-1346.tgz Design Studio hcl-dx-design-studio-image- vx.x.x_xxxxxxxx-xxxx.tar.gz hcl-dx-site-manager-image-v0.4.0_20210917-1445.tar.gz hcl-dx-design-studio-image-v0.5.0_20211029-0013.tar.gz Digital Asset Management hcl-dx-digital-asset-manager-image- vx.x.x_xxxxxxxx-xxxx.tar.gz hcl-dx-digital-asset-manager-image-v1.10.0_20210917-1444.tar.gz hcl-dx-digital-asset-manager-image-v1.11.0_20211029-1350.tar.gz Persistence Connection Pool hcl-dx-persistence-connection-pool-image- vx.x.x_xxxxxxxx-xxxx.tar.gz hcl-dx-postgres-persistence-pgpool-image-v1.11.0_20210916-0224.tar.gz hcl-dx-persistence-connection-pool-image-v1.11.0_20211029-0224.tar.gz Persistence Node hcl-dx-persistence-node-image-vx.x.x_xxxxxxxx-xxxx.tar.gz hcl-dx-persistence-postgres-repmgr-image-v1.1_20210916-0148.tar.gz hcl-dx-persistence-node-image-v1.1_20211029-0148.tar.gz Persistence Metrics Exporter hcl-dx-persistence-metrics-exporter-image-vx.x.x_xxxxxxxx-xxxx.tar.gz NA hcl-dx-persistence-metrics-exporter-image-v1.10.0_20211029-1352.tar.gz Persistence hcl-dx-persistence-image- vx.x.x_xxxxxxxx-xxxx.tar.gz hcl-dx-postgres-image-v1.11.0_20210917-1444.tar.gz hcl-dx-persistence-image-v1.11.0_20211029-1349.tar.gz DX Experience API hcl-dx-experience-api-sample-ui-vx.x.x.xxxxxxxx-xxxx.zip hcl-dx-experience-api-sample-ui-v0.2.0.20210917-1439.zip hcl-dx-experience-api-sample-ui-v0.2.0.20211029-1354.zip Image processor hcl-dx-image-processor-image-vx.x.x_xxxxxxxx-xxxx.tar.gz hcl-dx-image-processor-image-v1.11.0_20210917-1449.tar.gz hcl-dx-image-processor-image-v1.12.0_20211029-1346.tar.gz Open LDAP hcl-dx-openldap-image-vx.x.x_xxxxxxxx-xxxx.tar.gz hcl-dx-openldap-image-v1.2.0_20210917-1437.tar.gz hcl-dx-openldap-image-v1.2.0_20211029-1342.tar.gz Remote search hcl-dx-remote-search-image-v95_CFxxx_xxxxxxxx-xxxx.tar.gz hcl-dx-remote-search-image-v95_CF198_20210917-1438.tar.gz hcl-dx-remote-search-image-v95_CF199_20211029-1348.tar.gz Runtime Controller hcl-dx-runtime-controller-image-v95_CFxxx_xxxxxxxx-xxxx.tar.gz hcl-dx-runtime-controller-image-v95_CF198_20210917-1441.tar.gz hcl-dx-runtime-controller-image-v95_CF199_20211029-1344.tar.gz Ambassador hcl-dx-ambassador-image-xxx.tar.gz hcl-dx-ambassador-image-154.tar.gz hcl-dx-ambassador-image-154.tar.gz Redis hcl-dx-redis-image-x.x.x.tar.gz hcl-dx-redis-image-5.0.1.tar.gz hcl-dx-redis-image-5.0.1.tar.gz Sidecar hcl-dx-sidecar-image-vx.x._x.x-xxx.tar.gz NA hcl-dx-sidecar-image-v1.0.0_8.4-205.tar.gz Note: The new image files and the change in file names are highlighted in the table. HCL DX 9.5 CF198 CF198 If deploying HCL DX 9.5 CF198 release, the package name and images are as follows: HCL DX 9.5 CF198 DXClient files : hcl-dxclient-image-v95_CF198_20210917-1455.zip hcl-dxclient-v95_CF198_20210917-1455.zip HCL DX 9.5 CF198 - hcl-dx-kubernetes-v95-CF198.zip : HCL DX notices V9.5 CF198.txt hcl-dx-ambassador-image-154.tar.gz hcl-dx-cloud-operator-image-v95_CF198_20210917-1749.tar.gz hcl-dx-cloud-scripts-v95_CF198_20210917-1749.zip hcl-dx-content-composer-image-v1.10.0_20210917-1437.tar.gz hcl-dx-core-image-v95_CF198_20210917-1438.tar.gz hcl-dx-deployment-v2.0.0_20210917-1441.tgz hcl-dx-digital-asset-management-operator-image-v95_CF198_20210917-1437.tar.gz hcl-dx-digital-asset-manager-image-v1.10.0_20210917-1444.tar.gz hcl-dx-experience-api-sample-ui-v0.2.0.20210917-1439.zip hcl-dx-image-processor-image-v1.11.0_20210917-1449.tar.gz hcl-dx-openldap-image-v1.2.0_20210917-1437.tar.gz hcl-dx-persistence-postgres-repmgr-image-v1.1_20210916-0148.tar.gz hcl-dx-postgres-image-v1.11.0_20210917-1444.tar.gz hcl-dx-postgres-persistence-pgpool-image-v1.11.0_20210916-0224.tar.gz hcl-dx-redis-image-5.0.1.tar.gz hcl-dx-remote-search-image-v95_CF198_20210917-1438.tar.gz hcl-dx-ringapi-image-v1.11.0_20210917-1441.tar.gz hcl-dx-runtime-controller-image-v95_CF198_20210917-1441.tar.gz hcl-dx-site-manager-image-v0.4.0_20210917-1445.tar.gz HCL DX 9.5 CF197 CF197 If deploying HCL DX 9.5 CF197 release, the package name and images are as follows: HCL DX 9.5 CF197 Client - hcl-dx-client-v95-CF197.zip : hcl-dxclient-image-v95_CF197_20210806-1311.zip hcl-dxclient-v95_CF197_20210806-1311.zip HCL DX 9.5 CF197 - hcl-dx-kubernetes-v95-CF197.zip : HCL DX notices V9.5 CF197.txt hcl-dx-ambassador-image-154.tar.gz hcl-dx-cloud-operator-image-v95_CF197_20210806-1310.tar.gz hcl-dx-cloud-scripts-v95_CF197_20210806-1310.zip hcl-dx-content-composer-image-v1.10.0_20210806-1258.tar.gz hcl-dx-core-image-v95_CF197_20210806-1259.tar.gz hcl-dx-deployment-v2.0.0_20210806-1300.tgz hcl-dx-digital-asset-management-operator-image-v95_CF197_20210806-1258.tar.gz hcl-dx-digital-asset-manager-image-v1.10.0_20210806-1302.tar.gz hcl-dx-experience-api-sample-ui-v0.2.0.20210806-1308.zip hcl-dx-image-processor-image-v1.10.0_20210806-1300.tar.gz hcl-dx-openldap-image-v1.2.0_20210806-1258.tar.gz hcl-dx-postgres-image-v1.10.0_20210806-1302.tar.gz hcl-dx-redis-image-5.0.1.tar.gz hcl-dx-remote-search-image-v95_CF197_20210806-1259.tar.gz hcl-dx-ringapi-image-v1.10.0_20210806-1311.tar.gz hcl-dx-runtime-controller-image-v95_CF197_20210806-1258.tar.gz hcl-dx-site-manager-image-v0.3.0_20210806-1308.tar.gz HCL DX 9.5 CF196 CF196 If deploying HCL DX 9.5 CF196 release, the package name and images are as follows: HCL DX 9.5 CF196 Client - hcl-dx-client-v95-CF196.zip : hcl-dxclient-image-v95_CF196_20210625-2028.zip hcl-dxclient-v95_CF196_20210625-2029.zip HCL DX 9.5 CF196 - hcl-dx-kubernetes-v95-CF196.zip : HCL DX notices V9.5 CF196.txt hcl-dx-ambassador-image-154.tar.gz hcl-dx-cloud-operator-image-v95_CF196_20210625-2033.tar.gz hcl-dx-cloud-scripts-v95_CF196_20210625-2033.zip hcl-dx-content-composer-image-v1.9.0_20210625-2012.tar.gz hcl-dx-core-image-v95_CF196_20210625-2011.tar.gz hcl-dx-deployment-v1.0.0_20210625-2026.tgz hcl-dx-digital-asset-management-operator-image-v95_CF196_20210625-2013.tar.gz hcl-dx-digital-asset-manager-image-v1.9.0_20210625-2016.tar.gz hcl-dx-experience-api-sample-ui-v0.2.0.20210625-2023.zip hcl-dx-image-processor-image-v1.8.0_20210625-2015.tar.gz hcl-dx-openldap-image-v1.2.0_20210625-2013.tar.gz hcl-dx-postgres-image-v1.9.0_20210625-2016.tar.gz hcl-dx-redis-image-5.0.1.tar.gz hcl-dx-remote-search-image-v95_CF196_20210625-2011.tar.gz hcl-dx-ringapi-image-v1.9.0_20210625-2026.tar.gz hcl-dx-runtime-controller-image-v95_CF196_20210625-2013.tar.gz hcl-dx-site-manager-image-v0.2.0_20210625-2023.tar.gz HCL DX 9.5 CF195 CF195 If deploying HCL DX 9.5 CF195 release, the package name and images are as follows: HCL DX 9.5 CF195 Client - hcl-dx-client-v95-CF195.zip : dxclient_v1.4.0_20210514-1713.zip HCL DX 9.5 CF195 - hcl-dx-kubernetes-v95-CF195.zip : HCL DX notices V9.5 CF195.txt dxclient_v1.4.0_20210514-1713.zip hcl-dx-ambassador-image-154.tar.gz hcl-dx-cloud-operator-image-v95_CF195_20210515-0201.tar.gz hcl-dx-cloud-scripts-v95_CF195_20210514-1707.zip hcl-dx-content-composer-image-v1.8.0_20210514-1707.tar.gz hcl-dx-core-image-v95_CF195_20210514-1708.tar.gz hcl-dx-digital-asset-management-operator-image-v95_CF195_20210514-1714.tar.gz hcl-dx-digital-asset-manager-image-v1.8.0_20210514-1711.tar.gz hcl-dx-experience-api-sample-ui-v0.2.0.20210514-1708.zip hcl-dx-image-processor-image-v1.8.0_20210514-1712.tar.gz hcl-dx-openldap-image-v1.1.0-master_20210514_1621013302.tar.gz hcl-dx-postgres-image-v1.8.0_20210514-1708.tar.gz hcl-dx-redis-image-5.0.1.tar.gz hcl-dx-remote-search-image-v95_CF195_20210514-1708.tar.gz hcl-dx-ringapi-image-v1.8.0_20210514-1709.tar.gz HCL DX 9.5 CF194 CF194 Important note: Please consult the HCL DX Support Knowledge Base article, Manual Steps to Apply the Digital Experience 9.5 Container Deployment Core Certificate Update , to apply the certificate update to your HCL DX 9.5 container deployment. If deploying HCL DX 9.5 CF194 release, the package name and images are as follows: HCL DX 9.5 CF194 Client - hcl-dx-client-v95-CF194.zip : dxclient_v1.3.0_20210415-2128.zip HCL DX 9.5 CF194 - hcl-dx-kubernetes-v95-CF194.zip : HCL DX notices V9.5 CF194.txt dxclient_v1.3.0_20210415-2128.zip hcl-dx-ambassador-image-154.tar.gz hcl-dx-cloud-operator-image-v95_CF194_20210416-0233.tar.gz hcl-dx-cloud-scripts-v95_CF194_20210416-0233.zip hcl-dx-content-composer-image-v1.7.0_20210415-2121.tar.gz hcl-dx-core-image-v95_CF194_20210415-2120.tar.gz hcl-dx-digital-asset-management-operator-image-v95_CF194_20210415-2127.tar.gz hcl-dx-experience-api-sample-ui-v0.2.0.20210415-2121.zip hcl-dx-image-processor-image-v1.7.0_20210415-2120.tar.gz hcl-dx-openldap-image-v1.1.0-master_20210416_1618540820.tar.gz hcl-dx-postgres-image-v1.7.0_20210415-2120.tar.gz hcl-dx-redis-image-5.0.1.tar.gz hcl-dx-remote-search-image-v95_CF194_20210415-2120.tar.gz HCL DX 9.5 CF193 CF193 If deploying HCL DX 9.5 CF193 release, the package name and images are as follows: HCL DX 9.5 CF193 Client - hcl-dx-client-v95-CF193.zip : dxclient_v1.3.0_20210331-1335.zip HCL DX 9.5 CF193 - hcl-dx-kubernetes-v95-CF193.zip : HCL DX notices V9.5 CF193.txt dxclient_v1.3.0_20210331-1335.zip hcl-dx-ambassador-image-154.tar.gz hcl-dx-cloud-operator-image-v95_CF193_20210331-1847.tar.gz hcl-dx-cloud-scripts-v95_CF193_20210331-1847.zip hcl-dx-content-composer-image-v1.7.0_20210331-1333.tar.gz hcl-dx-core-image-v95_CF193_20210331-1336.tar.gz hcl-dx-digital-asset-management-operator-image-v95_CF193_20210331-1335.tar.gz hcl-dx-digital-asset-manager-image-v1.7.0_20210331-1339.tar.gz hcl-dx-experience-api-sample-ui-v0.2.0.20210331-1343.zip hcl-dx-image-processor-image-v1.7.0_20210331-1336.tar.gz hcl-dx-openldap-image-v1.1.0-master_20210331_1617216873.tar.gz hcl-dx-postgres-image-v1.7.0_20210331-1337.tar.gz hcl-dx-redis-image-5.0.1.tar.gz hcl-dx-remote-search-image-v95_CF193_20210331-1336.tar.gz hcl-dx-ringapi-image-v1.7.0_20210331-1339.tar.gz HCL DX 9.5 CF192 CF192 If deploying HCL DX 9.5 CF192 release, the package name and images are as follows: hcl-dx-kubernetes-v95-CF192.zip : HCL DX notices V9.5 CF192.txt dxclient_v1.2.0_20210305-1758.zip hcl-dx-ambassador-image-154.tar.gz hcl-dx-cloud-operator-image-v95_CF192_20210305-2309.tar.gz hcl-dx-cloud-scripts-v95_CF192_20210305-2309.zip hcl-dx-content-composer-image-v1.6.0_20210305-1756.tar.gz hcl-dx-core-image-v95_CF192_20210305-1758.tar.gz hcl-dx-digital-asset-management-operator-image-v95_CF192_20210305-1757.tar.gz hcl-dx-digital-asset-manager-image-v1.6.0_20210305-1802.tar.gz hcl-dx-experience-api-sample-ui-v0.2.0.20210305-1805.zip hcl-dx-image-processor-image-v1.6.0_20210305-1758.tar.gz hcl-dx-openldap-image-v1.0.0-master_20210305_1614986151.tar.gz hcl-dx-postgres-image-v1.6.0_20210305-1800.tar.gz hcl-dx-redis-image-5.0.1.tar.gz hcl-dx-remote-search-image-v95_CF192_20210305-1758.tar.gz hcl-dx-ringapi-image-v1.6.0_20210305-1802.tar.gz HCL DX 9.5 CF191 CF191 If deploying HCL DX 9.5 CF191 release, the package name and images are as follows: hcl-dx-kubernetes-v95-CF191.zip file: HCL DX notices V9.5 CF191.txt hcl-dx-ambassador-image-154.tar.gz hcl-dx-cloud-operator-image-v95_CF191_20201214-1527.tar.gz hcl-dx-cloud-scripts-v95_CF191_20201214-1527.zip hcl-dx-content-composer-image-v1.5.0_20201211-2151.tar.gz hcl-dx-core-image-v95_CF191_20201212-1421.tar.gz hcl-dx-digital-asset-management-operator-image-v95_CF191_20201211-2152.tar.gz hcl-dx-digital-asset-manager-image-v1.5.0_20201211-2155.tar.gz hcl-dx-experience-api-sample-ui-v0.2.0.20201211-2205.zip hcl-dx-image-processor-image-v1.5.0_20201211-2154.tar.gz hcl-dx-openldap-image-v1.0.0-master_20201212_1607741365.tar.gz hcl-dx-postgres-image-v1.5.0_20201211-2155.tar.gz hcl-dx-redis-image-5.0.1.tar.gz hcl-dx-remote-search-image-v95_CF191_20201212-1421.tar.gz hcl-dx-ringapi-image-v1.5.0_20201211-2200.tar.gz dxclient_v1.1.0_20201211-2153.zip Note: HCL DX 9.5 CF191 images are available and may be installed. HCL DX 9.5 CF191 is supported for new deployments only. DX administrators should not upgrade DX 9.5 container deployments to this release. HCL DX 9.5 CF19 CF19 If deploying HCL DX 9.5 CF19 release, the package name and images are as follows: hcl-dx-kubernetes-v95-CF19.zip file : HCL DX notices V9.5 CF19.txt hcl-dx-ambassador-image-154.tar.gz hcl-dx-cloud-operator-image-v95_CF19_20201110-0401.tar.gz hcl-dx-cloud-scripts-v95_CF19_20201110-0401.zip hcl-dx-content-composer-image-v1.4.0_20201109-2203.tar.gz hcl-dx-core-image-v95_CF19_20201109-2312.tar.gz hcl-dx-digital-asset-management-operator-image-v95_CF19_20201109-2204.tar.gz hcl-dx-digital-asset-manager-image-v1.4.0_20201109-2206.tar.gz hcl-dx-experience-api-sample-ui-v0.2.0.20201109-2208.zip hcl-dx-image-processor-image-v1.4.0_20201109-2204.tar.gz hcl-dx-openldap-image-v1.0.0-master_20201110_1604981292.tar.gz hcl-dx-postgres-image-v1.4.0_20201109-2206.tar.gz hcl-dx-redis-image-5.0.1.tar.gz hcl-dx-remote-search-image-v95_CF19_20201109-2312.tar.gz hcl-dx-ringapi-image-v1.4.0_20201109-2209.tar.gz dxclient_v1.0.0_20201110-2010.zip HCL DX 9.5 CF184 HCL DX 9.5 Container Update CF184 If deploying HCL DX 9.5 CF184 release, the package name and images are as follows: hcl-dx-kubernetes-v95-CF184.zip files : HCL DX notices V9.5 CF184.txt hcl-dx-ambassador-image-154.tar.gz hcl-dx-cloud-operator-image-v95_CF184_20200917-0054.tar.gz hcl-dx-cloud-scripts-v95_CF184_20200917-0054.zip hcl-dx-content-composer-image-v1.3.0_20200916-1952.tar.gz hcl-dx-core-image-v95_CF184_20200916-2009.tar.gz hcl-dx-digital-asset-management-operator-image-v95_CF184_20200916-2034.tar.gz hcl-dx-digital-asset-manager-image-v1.3.0_20200916-1953.tar.gz hcl-dx-image-processor-image-v1.3.0_20200916-1953.tar.gz hcl-dx-openldap-image-v1.0.0-master_20200917_1600304449.tar.gz hcl-dx-postgres-image-v1.3.0_20200916-2003.tar.gz hcl-dx-redis-image-5.0.1.tar.gz hcl-dx-remote-search-image-v95_CF184_20200916-2009.tar.gz hcl-dx-ringapi-image-v1.3.0_20200916-1953.tar.gz HCL DX 9.5 CF183 HCL DX 9.5 Container Update CF183 If deploying HCL DX 9.5 CF183 release, the image and package names are as follows: CF183-core.zip files : HCL DX notices V9.5 CF183.txt hcl-dx-ambassador-image-154.tar.gz hcl-dx-cloud-operator-image-v95_CF183_20200818-1852.tar.gz hcl-dx-cloud-scripts-v95_CF183_20200818-1852.zip hcl-dx-core-image-v95_CF183_20200818-1342.tar.gz hcl-dx-redis-image-5.0.1.tar.gz CF183-other.zip files : HCL DX notices V9.5 CF183.txt hcl-dx-content-composer-image-v1.2.0_20200818-1343.tar.gz hcl-dx-digital-asset-management-operator-image-v95_CF183_20200818-1344.tar.gz hcl-dx-digital-asset-manager-image-v1.2.0_20200818-1346.tar.gz hcl-dx-image-processor-image-v1.2.0_20200818-1345.tar.gz hcl-dx-openldap-image-v1.0.0-master_20200818_1597758965.tar.gz hcl-dx-postgres-image-v1.2.0_20200818-1349.tar.gz hcl-dx-remote-search-image-v95_CF183_20200818-1342.tar.gz hcl-dx-ringapi-image-v1.2.0_20200818-1351.tar.gz HCL DX 9.5 CF182 CF182 If deploying HCL DX 9.5 CF182 release, the image and package names are as follows: hcl-dx-kubernetes-v95-CF182-core.zip : HCL DX notices V9.5 CF182.txt hcl-dx-ambassador-image-0850.tar.gz hcl-dx-cloud-operator-image-v95_CF182_20200720-1708.tar.gz hcl-dx-cloud-scripts-v95_CF182_20200720-1708.zip hcl-dx-core-image-v95_CF182_20200720-1645.tar.gz hcl-dx-kubernetes-v95-CF182-other.zip : HCL DX notices V9.5 CF182.txt hcl-dx-content-composer-image-v1.1.0_20200720-1708.tar.gz hcl-dx-digital-asset-management-operator-image-v95_CF182_20200720-1716.tar.gz hcl-dx-digital-asset-manager-image-v1.1.0_20200720-1712.tar.gz hcl-dx-image-processor-image-v1.1.0_20200720-1716.tar.gz hcl-dx-openldap-image-v1.0.0-master_20200720_1595265588.tar.gz hcl-dx-postgres-image-v1.1.0_20200720-1715.tar.gz hcl-dx-remote-search-image-v95_CF182_20200720-1645.tar.gz hcl-dx-ringapi-image-v1.1.0_20200720-1707.tar.gz HCL DX 9.5 CF181 CF181 If deploying HCL DX 9.5 CF181 and later container update release, the image and package names add HCL DX 9.5 Content Composer and Digital Asset Management components and supporting services images, as well as Remote Search and OpenLDAP images. See the following list of images presented within the HCL DX 9.5 Container Update CF181 package: hcl-dx-kubernetes-v95-CF181-core.zip : hcl-dx-cloud-scripts-v95_CF181_xxxxxxxx-xxxx.zip hcl-dx-core-image-v95_CF181_xxxxxxxx-xxxx.tar.gz hcl-dx-cloud-operator-image-v95_CF181_xxxxxxxx-xxxx.tar.gz hcl-dx-ambassador-image-xxxx.tar.gz HCL DX notices V9.5 CF181.txt hcl-dx-kubernetes-v95-CF181-other.zip : hcl-dx-ringapi-image-v1.0.0_xxxxxxxx-xxxx.tar.gz hcl-dx-postgres-image-v1.0.0_xxxxxxxx-xxxx.tar.gz hcl-dx-openldap-image-v1.0.0-release_xxxxxxxx_xxxxxxxxxx.tar.gz hcl-dx-medialibrary-operator-image-v95_CF181_xxxxxxxx-xxxx.tar.gz hcl-dx-image-processor-image-v1.0.0_xxxxxxxx-xxxx.tar.gz hcl-dx-dxrs-image-v95_CF181_xxxxxxxx-xxxx.tar.gz HCL DX 9.5 CF18 CF18 If deploying HCL DX 9.5 CF18 and later container update release, the image and package names included for this are: hcl-dx-kubernetes-v95-CF18.zip hcl-dx-core-image-v95_CF18_xxxxxxxx-xxxx.tar.gz hcl-dx-cloud-operator-image-v95_CF18_xxxxxxxx-xxxx.tar.gz hcl-dx-cloud-scripts-v95_CF18_xxxxxxxx-xxxx.zip hcl-dx-ambassador-image-xxxx.tar.gz See the following sections for additional information: Docker image deployment Customizing the container deployment Requirements and limitations Parent topic: Digital Experience on containerized platforms","title":"Docker image list"},{"location":"containerization/docker/#docker-image-list","text":"This section presents the latest HCL DX 9.5 Docker container update images available.","title":"Docker image list"},{"location":"containerization/docker/#docker-container-update-file-list","text":"The HCL DX 9.5 container update releases may be obtained from your HCL Digital Experience entitlements in the HCL Software License Portal , in the HCL_Portal_8.5_9.0_9.5_CFs download package entry, and the HCL_DX_9.5_Container_Updates download package entry for HCL Digital Experience Cloud Native 9.5 entitlements. Video: How to upload HCL Digital Experience 9.5 CF container images to a private repository","title":"Docker container update file list"},{"location":"containerization/docker/#hcl-dx-95-cf201","text":"Container Update CF201 If deploying the HCL DX 9.5 CF201 release, the package name and images are as follows: HCL DX 9.5 CF201 DXClient files : hcl-dxclient-image-v95_CF201_20220207-1614.zip hcl-dxclient-v95_CF201_20220207-1613.zip HCL DX 9.5 CF_201-hcl-dx-kubernetes-v95-CF201.zip : HCL DX notices V9.5 CF201.txt hcl-dx-ambassador-image-1142.tar.gz hcl-dx-content-composer-image-v1.14.0_20220207-1550.tar.gz hcl-dx-core-image-v95_CF201_20220206-1331.tar.gz hcl-dx-deployment-v2.4.0_20220207-1606.tgz hcl-dx-design-studio-image-v0.7.0_20220207-1549.tar.gz hcl-dx-digital-asset-manager-image-v1.13.0_20220207-1609.tar.gz hcl-dx-experience-api-sample-ui-v0.2.0.20220207-1549.zip hcl-dx-image-processor-image-v1.14.0_20220207-1606.tar.gz hcl-dx-openldap-image-v1.2.0_20220207-1556.tar.gz hcl-dx-persistence-connection-pool-image-v1.14.0_20220207-1612.tar.gz hcl-dx-persistence-image-v1.14.0_20220207-1611.tar.gz hcl-dx-persistence-metrics-exporter-image-v1.12.0_20220207-1611.tar.gz hcl-dx-persistence-node-image-v1.4_20220207-1549.tar.gz hcl-dx-redis-image-5.0.14.tar.gz hcl-dx-remote-search-image-v95_CF201_20220206-1331.tar.gz hcl-dx-ringapi-image-v1.14.0_20220207-1554.tar.gz hcl-dx-runtime-controller-image-v95_CF201_20220207-1558.tar.gz hcl-dx-sidecar-image-v1.0.0_8.4-205.tar.gz","title":"HCL DX 9.5 CF201"},{"location":"containerization/docker/#hcl-dx-95-cf200","text":"Container Update CF200 If deploying the HCL DX 9.5 CF200 release, the package name and images are as follows: HCL DX 9.5 CF200 DXClient files : hcl-dxclient-image-v95_CF200_20211213-1500.zip hcl-dxclient-v95_CF200_20211213-1459.zip HCL DX 9.5 CF_200-hcl-dx-kubernetes-v95-CF200.zip Important: With the Operator-based deployment being removed starting in HCL DX Container Update 9.5 CF200, you will find some changes in the list of files and their names in CF199 and later releases. For more information, see List of image files and changes from CF198 and later . HCL DX notices V9.5 CF200.txt hcl-dx-ambassador-image-1142.tar.gz hcl-dx-content-composer-image-v1.13.0_20211213-1443.tar.gz hcl-dx-core-image-v95_CF200_20211213-1442.tar.gz hcl-dx-deployment-v2.2.0_20211213-1446.tgz hcl-dx-design-studio-image-v0.6.0_20211213-1448.tar.gz hcl-dx-digital-asset-manager-image-v1.12.0_20211213-1448.tar.gz hcl-dx-experience-api-sample-ui-v0.2.0.20211213-1454.zip hcl-dx-image-processor-image-v1.13.0_20211213-1446.tar.gz hcl-dx-openldap-image-v1.2.0_20211213-1444.tar.gz hcl-dx-persistence-connection-pool-image-v1.13.0_20211213-1457.tar.gz hcl-dx-persistence-image-v1.13.0_20211213-1457.tar.gz hcl-dx-persistence-metrics-exporter-image-v1.11.0_20211213-1458.tar.gz hcl-dx-persistence-node-image-v1.3_20211213-1454.tar.gz hcl-dx-redis-image-5.0.14.tar.gz hcl-dx-remote-search-image-v95_CF200_20211213-1442.tar.gz hcl-dx-ringapi-image-v1.13.0_20211213-1457.tar.gz hcl-dx-runtime-controller-image-v95_CF200_20211213-1444.tar.gz hcl-dx-sidecar-image-v1.0.0_8.4-205.tar.gz","title":"HCL DX 9.5 CF200"},{"location":"containerization/docker/#hcl-dx-95-cf199","text":"Container Update CF199 If deploying the HCL DX 9.5 CF199 release, the package name and images are as follows: HCL DX 9.5 CF199 DXClient files : hcl-dxclient-image-v95_CF199_20211029-1357.zip hcl-dxclient-v95_CF199_20211029-1357.zip HCL DX 9.5 CF_199-hcl-dx-kubernetes-v95-CF199.zip HCL DX notices V9.5 CF199.txt hcl-dx-ambassador-image-154.tar.gz hcl-dx-cloud-operator-image-v95_CF199_20211029-1700.tar.gz hcl-dx-cloud-scripts-v95_CF199_20211029-1700.zip hcl-dx-content-composer-image-v1.12.0_20211029-1341.tar.gz hcl-dx-core-image-v95_CF199_20211029-1348.tar.gz hcl-dx-deployment-v2.1.0_20211029-1346.tgz hcl-dx-design-studio-image-v0.5.0_20211029-0013.tar.gz hcl-dx-digital-asset-management-operator-image-v95_CF199_20211029-1342.tar.gz hcl-dx-digital-asset-manager-image-v1.11.0_20211029-1350.tar.gz hcl-dx-experience-api-sample-ui-v0.2.0.20211029-1354.zip hcl-dx-image-processor-image-v1.12.0_20211029-1346.tar.gz hcl-dx-openldap-image-v1.2.0_20211029-1342.tar.gz hcl-dx-persistence-connection-pool-image-v1.11.0_20211029-0224.tar.gz hcl-dx-persistence-image-v1.11.0_20211029-1349.tar.gz hcl-dx-persistence-metrics-exporter-image-v1.10.0_20211029-1352.tar.gz hcl-dx-persistence-node-image-v1.1_20211029-0148.tar.gz hcl-dx-redis-image-5.0.1.tar.gz hcl-dx-remote-search-image-v95_CF199_20211029-1348.tar.gz hcl-dx-ringapi-image-v1.12.0_20211029-1357.tar.gz hcl-dx-runtime-controller-image-v95_CF199_20211029-1344.tar.gz hcl-dx-sidecar-image-v1.0.0_8.4-205.tar.gz Important: With the Operator-based deployment being deprecated in CF198 and planned to be removed in HCL DX Container Update 9.5 CF200, you will find some changes in the list of files and their names in CF199 and later releases. Component Image name CF198 CF199 DX Core hcl-dx-core-image-vx.x.x_xxxxxxxx-xxxx.tar.gz hcl-dx-core-image-v95_CF198_20210917-1438.tar.gz hcl-dx-core-image-v95_CF199_20211029-1348.tar.gz Ring API hcl-dx-ringapi-image-vx.x.x_xxxxxxxx-xxxx.tar.gz hcl-dx-ringapi-image-v1.11.0_20210917-1441.tar.gz hcl-dx-ringapi-image-v1.12.0_20211029-1357.tar.gz Content Composer hcl-dx-content-composer-image-vx.x.x_xxxxxxxx-xxxx.tar.gz hcl-dx-content-composer-image-v1.10.0_20210917-1437.tar.gz hcl-dx-content-composer-image-v1.12.0_20211029-1341.tar.gz DX Deployment hcl-dx-deployment-vx.x.x_xxxxxxxx-xxxx.tgz hcl-dx-deployment-v2.0.0_20210917-1441.tgz hcl-dx-deployment-v2.1.0_20211029-1346.tgz Design Studio hcl-dx-design-studio-image- vx.x.x_xxxxxxxx-xxxx.tar.gz hcl-dx-site-manager-image-v0.4.0_20210917-1445.tar.gz hcl-dx-design-studio-image-v0.5.0_20211029-0013.tar.gz Digital Asset Management hcl-dx-digital-asset-manager-image- vx.x.x_xxxxxxxx-xxxx.tar.gz hcl-dx-digital-asset-manager-image-v1.10.0_20210917-1444.tar.gz hcl-dx-digital-asset-manager-image-v1.11.0_20211029-1350.tar.gz Persistence Connection Pool hcl-dx-persistence-connection-pool-image- vx.x.x_xxxxxxxx-xxxx.tar.gz hcl-dx-postgres-persistence-pgpool-image-v1.11.0_20210916-0224.tar.gz hcl-dx-persistence-connection-pool-image-v1.11.0_20211029-0224.tar.gz Persistence Node hcl-dx-persistence-node-image-vx.x.x_xxxxxxxx-xxxx.tar.gz hcl-dx-persistence-postgres-repmgr-image-v1.1_20210916-0148.tar.gz hcl-dx-persistence-node-image-v1.1_20211029-0148.tar.gz Persistence Metrics Exporter hcl-dx-persistence-metrics-exporter-image-vx.x.x_xxxxxxxx-xxxx.tar.gz NA hcl-dx-persistence-metrics-exporter-image-v1.10.0_20211029-1352.tar.gz Persistence hcl-dx-persistence-image- vx.x.x_xxxxxxxx-xxxx.tar.gz hcl-dx-postgres-image-v1.11.0_20210917-1444.tar.gz hcl-dx-persistence-image-v1.11.0_20211029-1349.tar.gz DX Experience API hcl-dx-experience-api-sample-ui-vx.x.x.xxxxxxxx-xxxx.zip hcl-dx-experience-api-sample-ui-v0.2.0.20210917-1439.zip hcl-dx-experience-api-sample-ui-v0.2.0.20211029-1354.zip Image processor hcl-dx-image-processor-image-vx.x.x_xxxxxxxx-xxxx.tar.gz hcl-dx-image-processor-image-v1.11.0_20210917-1449.tar.gz hcl-dx-image-processor-image-v1.12.0_20211029-1346.tar.gz Open LDAP hcl-dx-openldap-image-vx.x.x_xxxxxxxx-xxxx.tar.gz hcl-dx-openldap-image-v1.2.0_20210917-1437.tar.gz hcl-dx-openldap-image-v1.2.0_20211029-1342.tar.gz Remote search hcl-dx-remote-search-image-v95_CFxxx_xxxxxxxx-xxxx.tar.gz hcl-dx-remote-search-image-v95_CF198_20210917-1438.tar.gz hcl-dx-remote-search-image-v95_CF199_20211029-1348.tar.gz Runtime Controller hcl-dx-runtime-controller-image-v95_CFxxx_xxxxxxxx-xxxx.tar.gz hcl-dx-runtime-controller-image-v95_CF198_20210917-1441.tar.gz hcl-dx-runtime-controller-image-v95_CF199_20211029-1344.tar.gz Ambassador hcl-dx-ambassador-image-xxx.tar.gz hcl-dx-ambassador-image-154.tar.gz hcl-dx-ambassador-image-154.tar.gz Redis hcl-dx-redis-image-x.x.x.tar.gz hcl-dx-redis-image-5.0.1.tar.gz hcl-dx-redis-image-5.0.1.tar.gz Sidecar hcl-dx-sidecar-image-vx.x._x.x-xxx.tar.gz NA hcl-dx-sidecar-image-v1.0.0_8.4-205.tar.gz Note: The new image files and the change in file names are highlighted in the table.","title":"HCL DX 9.5 CF199"},{"location":"containerization/docker/#hcl-dx-95-cf198","text":"CF198 If deploying HCL DX 9.5 CF198 release, the package name and images are as follows: HCL DX 9.5 CF198 DXClient files : hcl-dxclient-image-v95_CF198_20210917-1455.zip hcl-dxclient-v95_CF198_20210917-1455.zip HCL DX 9.5 CF198 - hcl-dx-kubernetes-v95-CF198.zip : HCL DX notices V9.5 CF198.txt hcl-dx-ambassador-image-154.tar.gz hcl-dx-cloud-operator-image-v95_CF198_20210917-1749.tar.gz hcl-dx-cloud-scripts-v95_CF198_20210917-1749.zip hcl-dx-content-composer-image-v1.10.0_20210917-1437.tar.gz hcl-dx-core-image-v95_CF198_20210917-1438.tar.gz hcl-dx-deployment-v2.0.0_20210917-1441.tgz hcl-dx-digital-asset-management-operator-image-v95_CF198_20210917-1437.tar.gz hcl-dx-digital-asset-manager-image-v1.10.0_20210917-1444.tar.gz hcl-dx-experience-api-sample-ui-v0.2.0.20210917-1439.zip hcl-dx-image-processor-image-v1.11.0_20210917-1449.tar.gz hcl-dx-openldap-image-v1.2.0_20210917-1437.tar.gz hcl-dx-persistence-postgres-repmgr-image-v1.1_20210916-0148.tar.gz hcl-dx-postgres-image-v1.11.0_20210917-1444.tar.gz hcl-dx-postgres-persistence-pgpool-image-v1.11.0_20210916-0224.tar.gz hcl-dx-redis-image-5.0.1.tar.gz hcl-dx-remote-search-image-v95_CF198_20210917-1438.tar.gz hcl-dx-ringapi-image-v1.11.0_20210917-1441.tar.gz hcl-dx-runtime-controller-image-v95_CF198_20210917-1441.tar.gz hcl-dx-site-manager-image-v0.4.0_20210917-1445.tar.gz","title":"HCL DX 9.5 CF198"},{"location":"containerization/docker/#hcl-dx-95-cf197","text":"CF197 If deploying HCL DX 9.5 CF197 release, the package name and images are as follows: HCL DX 9.5 CF197 Client - hcl-dx-client-v95-CF197.zip : hcl-dxclient-image-v95_CF197_20210806-1311.zip hcl-dxclient-v95_CF197_20210806-1311.zip HCL DX 9.5 CF197 - hcl-dx-kubernetes-v95-CF197.zip : HCL DX notices V9.5 CF197.txt hcl-dx-ambassador-image-154.tar.gz hcl-dx-cloud-operator-image-v95_CF197_20210806-1310.tar.gz hcl-dx-cloud-scripts-v95_CF197_20210806-1310.zip hcl-dx-content-composer-image-v1.10.0_20210806-1258.tar.gz hcl-dx-core-image-v95_CF197_20210806-1259.tar.gz hcl-dx-deployment-v2.0.0_20210806-1300.tgz hcl-dx-digital-asset-management-operator-image-v95_CF197_20210806-1258.tar.gz hcl-dx-digital-asset-manager-image-v1.10.0_20210806-1302.tar.gz hcl-dx-experience-api-sample-ui-v0.2.0.20210806-1308.zip hcl-dx-image-processor-image-v1.10.0_20210806-1300.tar.gz hcl-dx-openldap-image-v1.2.0_20210806-1258.tar.gz hcl-dx-postgres-image-v1.10.0_20210806-1302.tar.gz hcl-dx-redis-image-5.0.1.tar.gz hcl-dx-remote-search-image-v95_CF197_20210806-1259.tar.gz hcl-dx-ringapi-image-v1.10.0_20210806-1311.tar.gz hcl-dx-runtime-controller-image-v95_CF197_20210806-1258.tar.gz hcl-dx-site-manager-image-v0.3.0_20210806-1308.tar.gz","title":"HCL DX 9.5 CF197"},{"location":"containerization/docker/#hcl-dx-95-cf196","text":"CF196 If deploying HCL DX 9.5 CF196 release, the package name and images are as follows: HCL DX 9.5 CF196 Client - hcl-dx-client-v95-CF196.zip : hcl-dxclient-image-v95_CF196_20210625-2028.zip hcl-dxclient-v95_CF196_20210625-2029.zip HCL DX 9.5 CF196 - hcl-dx-kubernetes-v95-CF196.zip : HCL DX notices V9.5 CF196.txt hcl-dx-ambassador-image-154.tar.gz hcl-dx-cloud-operator-image-v95_CF196_20210625-2033.tar.gz hcl-dx-cloud-scripts-v95_CF196_20210625-2033.zip hcl-dx-content-composer-image-v1.9.0_20210625-2012.tar.gz hcl-dx-core-image-v95_CF196_20210625-2011.tar.gz hcl-dx-deployment-v1.0.0_20210625-2026.tgz hcl-dx-digital-asset-management-operator-image-v95_CF196_20210625-2013.tar.gz hcl-dx-digital-asset-manager-image-v1.9.0_20210625-2016.tar.gz hcl-dx-experience-api-sample-ui-v0.2.0.20210625-2023.zip hcl-dx-image-processor-image-v1.8.0_20210625-2015.tar.gz hcl-dx-openldap-image-v1.2.0_20210625-2013.tar.gz hcl-dx-postgres-image-v1.9.0_20210625-2016.tar.gz hcl-dx-redis-image-5.0.1.tar.gz hcl-dx-remote-search-image-v95_CF196_20210625-2011.tar.gz hcl-dx-ringapi-image-v1.9.0_20210625-2026.tar.gz hcl-dx-runtime-controller-image-v95_CF196_20210625-2013.tar.gz hcl-dx-site-manager-image-v0.2.0_20210625-2023.tar.gz","title":"HCL DX 9.5 CF196"},{"location":"containerization/docker/#hcl-dx-95-cf195","text":"CF195 If deploying HCL DX 9.5 CF195 release, the package name and images are as follows: HCL DX 9.5 CF195 Client - hcl-dx-client-v95-CF195.zip : dxclient_v1.4.0_20210514-1713.zip HCL DX 9.5 CF195 - hcl-dx-kubernetes-v95-CF195.zip : HCL DX notices V9.5 CF195.txt dxclient_v1.4.0_20210514-1713.zip hcl-dx-ambassador-image-154.tar.gz hcl-dx-cloud-operator-image-v95_CF195_20210515-0201.tar.gz hcl-dx-cloud-scripts-v95_CF195_20210514-1707.zip hcl-dx-content-composer-image-v1.8.0_20210514-1707.tar.gz hcl-dx-core-image-v95_CF195_20210514-1708.tar.gz hcl-dx-digital-asset-management-operator-image-v95_CF195_20210514-1714.tar.gz hcl-dx-digital-asset-manager-image-v1.8.0_20210514-1711.tar.gz hcl-dx-experience-api-sample-ui-v0.2.0.20210514-1708.zip hcl-dx-image-processor-image-v1.8.0_20210514-1712.tar.gz hcl-dx-openldap-image-v1.1.0-master_20210514_1621013302.tar.gz hcl-dx-postgres-image-v1.8.0_20210514-1708.tar.gz hcl-dx-redis-image-5.0.1.tar.gz hcl-dx-remote-search-image-v95_CF195_20210514-1708.tar.gz hcl-dx-ringapi-image-v1.8.0_20210514-1709.tar.gz","title":"HCL DX 9.5 CF195"},{"location":"containerization/docker/#hcl-dx-95-cf194","text":"CF194 Important note: Please consult the HCL DX Support Knowledge Base article, Manual Steps to Apply the Digital Experience 9.5 Container Deployment Core Certificate Update , to apply the certificate update to your HCL DX 9.5 container deployment. If deploying HCL DX 9.5 CF194 release, the package name and images are as follows: HCL DX 9.5 CF194 Client - hcl-dx-client-v95-CF194.zip : dxclient_v1.3.0_20210415-2128.zip HCL DX 9.5 CF194 - hcl-dx-kubernetes-v95-CF194.zip : HCL DX notices V9.5 CF194.txt dxclient_v1.3.0_20210415-2128.zip hcl-dx-ambassador-image-154.tar.gz hcl-dx-cloud-operator-image-v95_CF194_20210416-0233.tar.gz hcl-dx-cloud-scripts-v95_CF194_20210416-0233.zip hcl-dx-content-composer-image-v1.7.0_20210415-2121.tar.gz hcl-dx-core-image-v95_CF194_20210415-2120.tar.gz hcl-dx-digital-asset-management-operator-image-v95_CF194_20210415-2127.tar.gz hcl-dx-experience-api-sample-ui-v0.2.0.20210415-2121.zip hcl-dx-image-processor-image-v1.7.0_20210415-2120.tar.gz hcl-dx-openldap-image-v1.1.0-master_20210416_1618540820.tar.gz hcl-dx-postgres-image-v1.7.0_20210415-2120.tar.gz hcl-dx-redis-image-5.0.1.tar.gz hcl-dx-remote-search-image-v95_CF194_20210415-2120.tar.gz","title":"HCL DX 9.5 CF194"},{"location":"containerization/docker/#hcl-dx-95-cf193","text":"CF193 If deploying HCL DX 9.5 CF193 release, the package name and images are as follows: HCL DX 9.5 CF193 Client - hcl-dx-client-v95-CF193.zip : dxclient_v1.3.0_20210331-1335.zip HCL DX 9.5 CF193 - hcl-dx-kubernetes-v95-CF193.zip : HCL DX notices V9.5 CF193.txt dxclient_v1.3.0_20210331-1335.zip hcl-dx-ambassador-image-154.tar.gz hcl-dx-cloud-operator-image-v95_CF193_20210331-1847.tar.gz hcl-dx-cloud-scripts-v95_CF193_20210331-1847.zip hcl-dx-content-composer-image-v1.7.0_20210331-1333.tar.gz hcl-dx-core-image-v95_CF193_20210331-1336.tar.gz hcl-dx-digital-asset-management-operator-image-v95_CF193_20210331-1335.tar.gz hcl-dx-digital-asset-manager-image-v1.7.0_20210331-1339.tar.gz hcl-dx-experience-api-sample-ui-v0.2.0.20210331-1343.zip hcl-dx-image-processor-image-v1.7.0_20210331-1336.tar.gz hcl-dx-openldap-image-v1.1.0-master_20210331_1617216873.tar.gz hcl-dx-postgres-image-v1.7.0_20210331-1337.tar.gz hcl-dx-redis-image-5.0.1.tar.gz hcl-dx-remote-search-image-v95_CF193_20210331-1336.tar.gz hcl-dx-ringapi-image-v1.7.0_20210331-1339.tar.gz","title":"HCL DX 9.5 CF193"},{"location":"containerization/docker/#hcl-dx-95-cf192","text":"CF192 If deploying HCL DX 9.5 CF192 release, the package name and images are as follows: hcl-dx-kubernetes-v95-CF192.zip : HCL DX notices V9.5 CF192.txt dxclient_v1.2.0_20210305-1758.zip hcl-dx-ambassador-image-154.tar.gz hcl-dx-cloud-operator-image-v95_CF192_20210305-2309.tar.gz hcl-dx-cloud-scripts-v95_CF192_20210305-2309.zip hcl-dx-content-composer-image-v1.6.0_20210305-1756.tar.gz hcl-dx-core-image-v95_CF192_20210305-1758.tar.gz hcl-dx-digital-asset-management-operator-image-v95_CF192_20210305-1757.tar.gz hcl-dx-digital-asset-manager-image-v1.6.0_20210305-1802.tar.gz hcl-dx-experience-api-sample-ui-v0.2.0.20210305-1805.zip hcl-dx-image-processor-image-v1.6.0_20210305-1758.tar.gz hcl-dx-openldap-image-v1.0.0-master_20210305_1614986151.tar.gz hcl-dx-postgres-image-v1.6.0_20210305-1800.tar.gz hcl-dx-redis-image-5.0.1.tar.gz hcl-dx-remote-search-image-v95_CF192_20210305-1758.tar.gz hcl-dx-ringapi-image-v1.6.0_20210305-1802.tar.gz","title":"HCL DX 9.5 CF192"},{"location":"containerization/docker/#hcl-dx-95-cf191","text":"CF191 If deploying HCL DX 9.5 CF191 release, the package name and images are as follows: hcl-dx-kubernetes-v95-CF191.zip file: HCL DX notices V9.5 CF191.txt hcl-dx-ambassador-image-154.tar.gz hcl-dx-cloud-operator-image-v95_CF191_20201214-1527.tar.gz hcl-dx-cloud-scripts-v95_CF191_20201214-1527.zip hcl-dx-content-composer-image-v1.5.0_20201211-2151.tar.gz hcl-dx-core-image-v95_CF191_20201212-1421.tar.gz hcl-dx-digital-asset-management-operator-image-v95_CF191_20201211-2152.tar.gz hcl-dx-digital-asset-manager-image-v1.5.0_20201211-2155.tar.gz hcl-dx-experience-api-sample-ui-v0.2.0.20201211-2205.zip hcl-dx-image-processor-image-v1.5.0_20201211-2154.tar.gz hcl-dx-openldap-image-v1.0.0-master_20201212_1607741365.tar.gz hcl-dx-postgres-image-v1.5.0_20201211-2155.tar.gz hcl-dx-redis-image-5.0.1.tar.gz hcl-dx-remote-search-image-v95_CF191_20201212-1421.tar.gz hcl-dx-ringapi-image-v1.5.0_20201211-2200.tar.gz dxclient_v1.1.0_20201211-2153.zip Note: HCL DX 9.5 CF191 images are available and may be installed. HCL DX 9.5 CF191 is supported for new deployments only. DX administrators should not upgrade DX 9.5 container deployments to this release.","title":"HCL DX 9.5 CF191"},{"location":"containerization/docker/#hcl-dx-95-cf19","text":"CF19 If deploying HCL DX 9.5 CF19 release, the package name and images are as follows: hcl-dx-kubernetes-v95-CF19.zip file : HCL DX notices V9.5 CF19.txt hcl-dx-ambassador-image-154.tar.gz hcl-dx-cloud-operator-image-v95_CF19_20201110-0401.tar.gz hcl-dx-cloud-scripts-v95_CF19_20201110-0401.zip hcl-dx-content-composer-image-v1.4.0_20201109-2203.tar.gz hcl-dx-core-image-v95_CF19_20201109-2312.tar.gz hcl-dx-digital-asset-management-operator-image-v95_CF19_20201109-2204.tar.gz hcl-dx-digital-asset-manager-image-v1.4.0_20201109-2206.tar.gz hcl-dx-experience-api-sample-ui-v0.2.0.20201109-2208.zip hcl-dx-image-processor-image-v1.4.0_20201109-2204.tar.gz hcl-dx-openldap-image-v1.0.0-master_20201110_1604981292.tar.gz hcl-dx-postgres-image-v1.4.0_20201109-2206.tar.gz hcl-dx-redis-image-5.0.1.tar.gz hcl-dx-remote-search-image-v95_CF19_20201109-2312.tar.gz hcl-dx-ringapi-image-v1.4.0_20201109-2209.tar.gz dxclient_v1.0.0_20201110-2010.zip","title":"HCL DX 9.5 CF19"},{"location":"containerization/docker/#hcl-dx-95-cf184","text":"HCL DX 9.5 Container Update CF184 If deploying HCL DX 9.5 CF184 release, the package name and images are as follows: hcl-dx-kubernetes-v95-CF184.zip files : HCL DX notices V9.5 CF184.txt hcl-dx-ambassador-image-154.tar.gz hcl-dx-cloud-operator-image-v95_CF184_20200917-0054.tar.gz hcl-dx-cloud-scripts-v95_CF184_20200917-0054.zip hcl-dx-content-composer-image-v1.3.0_20200916-1952.tar.gz hcl-dx-core-image-v95_CF184_20200916-2009.tar.gz hcl-dx-digital-asset-management-operator-image-v95_CF184_20200916-2034.tar.gz hcl-dx-digital-asset-manager-image-v1.3.0_20200916-1953.tar.gz hcl-dx-image-processor-image-v1.3.0_20200916-1953.tar.gz hcl-dx-openldap-image-v1.0.0-master_20200917_1600304449.tar.gz hcl-dx-postgres-image-v1.3.0_20200916-2003.tar.gz hcl-dx-redis-image-5.0.1.tar.gz hcl-dx-remote-search-image-v95_CF184_20200916-2009.tar.gz hcl-dx-ringapi-image-v1.3.0_20200916-1953.tar.gz","title":"HCL DX 9.5 CF184"},{"location":"containerization/docker/#hcl-dx-95-cf183","text":"HCL DX 9.5 Container Update CF183 If deploying HCL DX 9.5 CF183 release, the image and package names are as follows: CF183-core.zip files : HCL DX notices V9.5 CF183.txt hcl-dx-ambassador-image-154.tar.gz hcl-dx-cloud-operator-image-v95_CF183_20200818-1852.tar.gz hcl-dx-cloud-scripts-v95_CF183_20200818-1852.zip hcl-dx-core-image-v95_CF183_20200818-1342.tar.gz hcl-dx-redis-image-5.0.1.tar.gz CF183-other.zip files : HCL DX notices V9.5 CF183.txt hcl-dx-content-composer-image-v1.2.0_20200818-1343.tar.gz hcl-dx-digital-asset-management-operator-image-v95_CF183_20200818-1344.tar.gz hcl-dx-digital-asset-manager-image-v1.2.0_20200818-1346.tar.gz hcl-dx-image-processor-image-v1.2.0_20200818-1345.tar.gz hcl-dx-openldap-image-v1.0.0-master_20200818_1597758965.tar.gz hcl-dx-postgres-image-v1.2.0_20200818-1349.tar.gz hcl-dx-remote-search-image-v95_CF183_20200818-1342.tar.gz hcl-dx-ringapi-image-v1.2.0_20200818-1351.tar.gz","title":"HCL DX 9.5 CF183"},{"location":"containerization/docker/#hcl-dx-95-cf182","text":"CF182 If deploying HCL DX 9.5 CF182 release, the image and package names are as follows: hcl-dx-kubernetes-v95-CF182-core.zip : HCL DX notices V9.5 CF182.txt hcl-dx-ambassador-image-0850.tar.gz hcl-dx-cloud-operator-image-v95_CF182_20200720-1708.tar.gz hcl-dx-cloud-scripts-v95_CF182_20200720-1708.zip hcl-dx-core-image-v95_CF182_20200720-1645.tar.gz hcl-dx-kubernetes-v95-CF182-other.zip : HCL DX notices V9.5 CF182.txt hcl-dx-content-composer-image-v1.1.0_20200720-1708.tar.gz hcl-dx-digital-asset-management-operator-image-v95_CF182_20200720-1716.tar.gz hcl-dx-digital-asset-manager-image-v1.1.0_20200720-1712.tar.gz hcl-dx-image-processor-image-v1.1.0_20200720-1716.tar.gz hcl-dx-openldap-image-v1.0.0-master_20200720_1595265588.tar.gz hcl-dx-postgres-image-v1.1.0_20200720-1715.tar.gz hcl-dx-remote-search-image-v95_CF182_20200720-1645.tar.gz hcl-dx-ringapi-image-v1.1.0_20200720-1707.tar.gz","title":"HCL DX 9.5 CF182"},{"location":"containerization/docker/#hcl-dx-95-cf181","text":"CF181 If deploying HCL DX 9.5 CF181 and later container update release, the image and package names add HCL DX 9.5 Content Composer and Digital Asset Management components and supporting services images, as well as Remote Search and OpenLDAP images. See the following list of images presented within the HCL DX 9.5 Container Update CF181 package: hcl-dx-kubernetes-v95-CF181-core.zip : hcl-dx-cloud-scripts-v95_CF181_xxxxxxxx-xxxx.zip hcl-dx-core-image-v95_CF181_xxxxxxxx-xxxx.tar.gz hcl-dx-cloud-operator-image-v95_CF181_xxxxxxxx-xxxx.tar.gz hcl-dx-ambassador-image-xxxx.tar.gz HCL DX notices V9.5 CF181.txt hcl-dx-kubernetes-v95-CF181-other.zip : hcl-dx-ringapi-image-v1.0.0_xxxxxxxx-xxxx.tar.gz hcl-dx-postgres-image-v1.0.0_xxxxxxxx-xxxx.tar.gz hcl-dx-openldap-image-v1.0.0-release_xxxxxxxx_xxxxxxxxxx.tar.gz hcl-dx-medialibrary-operator-image-v95_CF181_xxxxxxxx-xxxx.tar.gz hcl-dx-image-processor-image-v1.0.0_xxxxxxxx-xxxx.tar.gz hcl-dx-dxrs-image-v95_CF181_xxxxxxxx-xxxx.tar.gz","title":"HCL DX 9.5 CF181"},{"location":"containerization/docker/#hcl-dx-95-cf18","text":"CF18 If deploying HCL DX 9.5 CF18 and later container update release, the image and package names included for this are: hcl-dx-kubernetes-v95-CF18.zip hcl-dx-core-image-v95_CF18_xxxxxxxx-xxxx.tar.gz hcl-dx-cloud-operator-image-v95_CF18_xxxxxxxx-xxxx.tar.gz hcl-dx-cloud-scripts-v95_CF18_xxxxxxxx-xxxx.zip hcl-dx-ambassador-image-xxxx.tar.gz See the following sections for additional information: Docker image deployment Customizing the container deployment Requirements and limitations Parent topic: Digital Experience on containerized platforms","title":"HCL DX 9.5 CF18"},{"location":"containerization/docker_remote_search/","text":"Configure Remote Search in Docker This section shows how to configure Remote Search for your HCL Digital Experience 9.5 Docker containers. Introduction To support search services when deployed to Docker container platforms in Kubernetes, administrators should configure Remote Search services. This requires a different setup and configuration steps than those used to set up Remote Search on a non-Docker container platform . Some differences in the non-Docker container platform procedures are outlined below: The serverindex.xml file on the Remote Search server when deployed to on-premises environments may have a host name that is not accurate in a container environment with respect to the actual host name of the server hosting the Remote Search server. Since Docker dynamically allocates the host names for the containers, the /etc/hosts file doesn\u2019t have static entries for the HCL Digital Experience 9.5 container-based server nor the Remote Search server. The WebSphere Application Server ND Administration console will not have correct host names for the HCL Digital Experience container. Deploying Remote Search in HCL Digital Experience 9.5 Docker containers Prerequisite : Download the HCL Digital Experience 9.5 Docker containers from your HCL Digital Experience entitlements from the HCL Software License Portal . The HCL DX 9.5 container update CF181 and higher packages will include a core software and Remote search container. Load both of these images into your Docker repository via the \u201cdocker load\u201d command. Note that if your organization has deployed these containers to a corporate Docker repository, you might use \u201cdocker pull\u201d instead to put it into your local repository. In this example, two Docker images and names are referred to. If a higher HCL Digital Experience 9.5 Container Update release is used, for example, HCL Digital Experience 9.5 CF181, the image names may vary. hcl-dx-core-image-v95_CF181_xxxxxxxx-xxxx.tar.gz hcl-dx-dxrs-image-v95_CF181_xxxxxxxx-xxxx.tar.gz EJBs and host names HCL Digital Experience 9.5 Container core and Portal Remote Search each use WebSphere Application Server as a base. As these components are on different hosts (containers), they need to communicate via IP. The initial conversation between HCL Digital Experience 9.5 core and the Remote Search server takes place over IIOP (rmi) which is the internet protocol of EJBs. Ideally, the /etc/hosts file of both containers would have the host name of the other. In other words, the /etc/hosts file of the HCL Digital Experience Container core would have a host reference for the Remote Search and vice versa. However, three factors make this impossible. The containers are based on Red Hat UBI, the /etc/hosts file is owned by root , and the root password (and sudo ) is not available. Apply the command below to define host references for the Remote Search service from the Digital Experience Container core. Therefore, a way to force Docker to write the /etc/hosts file at container initialization time is needed. This is done via the Docker switch add-host . The situation is further complicated (at least on Linux) by the fact that containers on the default bridge network of Docker cannot DNS name resolve other containers on the same subnet. Therefore, one uses the Docker host as a proxy and starts both containers with the following: docker run \u2013add-host=dockerhost:172.19.0.1 \u2026 This has the effect of adding an entry in the /etc/hosts file on the HCL Digital Experience 9.5 Container core like this: 172.19.0.1 dockerhost Those familiar with Docker deployment practices will recognize 171.19.0.1 as the IP bridge address of the host machine that starts the Docker containers. Since all Docker containers have unique ports and the Docker host machine is not allowed to use these unique ports, one can refer to a port on any container as dockerhost:port_number . Launch the HCL Digital Experience 9.5 Core and Remote Search containers To deploy, following is the complete docker run command for both the HCL Digital Experience 9.5 Core and Remote Search containers. In these examples, wpsadmin / wpsadmin are used as the HCL Digital Experience and WebSphere Application Server admin user ID and password credentials. docker run --add-host=dockerhost:172.19.0.1 -d -e WAS_ADMIN=wpsadmin -e WAS_PASSWORD=wpsadmin -e DX_ADMIN=wpsadmin -e DX_PASSWORD=wpsadmin -p 9043:9043 -p 9403:9403 -p 2809:2809 -p 9060:9060 -v /home/dxengineer/Documents/prs_profile:/opt/HCL/AppServer/profiles/prs_profile hcl/dx/dxrs:v95_CF181_20200622-1550 docker run --add-host=dockerhost:172.19.0.1 -d -e WAS_ADMIN=wpsadmin -e WAS_PASSWORD=wpsadmin -e DX_ADMIN=wpsadmin -e DX_PASSWORD=wpsadmin -p 10038:10038 -p 10039:10039 -p 10041:10041 -p 10042:10042 -v /home/dxengineer/Documents/wp_profile:/opt/HCL/wp_profile hcl/dx/core:v95_CF181_20200622-1550 The persisted profile for each container is located at /home/dxengineer/Documents/. The HCL Digital Experience admin username and password are passed as environment variables. Defining serverindex.xml on the Remote Search server On the HCL DX 9.5 container Remote search server, the serverindex.xml file is located at: /opt/HCL/AppServer/profiles/prs_profile/config/cells/{cell name}/nodes/{node name} Note that immediately after the Remote Search server is started (and since the profile is persisted on a persisted sub-directory), this file can be found at: {persisted volume for remote search profile}/prs_profile/config/cells/{cell name}/nodes/{node name} The serverindex.xml file contains 5 lines: host=\u201d{some hostname}\u201d where {some hostname} might likely be \"localhost\" or some host name like \u201c33b7e5004319\u201d . However, remote search will not work correctly until this host name field is replaced with a host name exactly like the host name in the \u201ciiop\u201d url in the search service is coded. So, for example, if your Portal search service has coded the \"iiop\" URL as \u201ciiop://some.host.com:2809\u201d , the host in serverindex.hml needs to be host=\u201dsome.host.com\u201d . It could be that your \"iiop\" url has the host name \"dockerhost\" if your iiop url lets your docker host route that URL. In that case, change these 5 lines to the following: host=\u201ddockerhost\u201d (apply the string \u201cdockerhost\u201d) Upon completion, when the HCL Digital Experience 9.5 Container core server communicates to the container Remote Search server over \"iiop\", the Remote Search server will return \u201cdockerhost\u201d as the host name of the Remote Search server. The HCL Digital Experience 9.5 Container has a configuration that will append the port to the host name that was just returned. Digital Experience instructions for Remote Search configuration The following guidance aligns with the Remote Search services configuration instructions available in the Remote Search services topic for deployment to non-container HCL Digital Experience servers. All of the instructions contained in the Remote Search services topic should also be completed in a Docker-based HCL Digital Experience deployment. The following guidance outlines specific settings that were used in the Remote Search service DX Docker deployment. Create a single sign-on (SSO) domain between HCL Digital Experience 9.5 container and the Remote Search service container by following the non-container on-premises procedure for Creating a single sign-on domain between HCL Portal and the Remote Search service . This entails exchanging SSL certificates and LTPA domain tokens. Note: When retrieving the SSL certificates from the host server, use dockerhost (as the host) and the appropriate port for the SSL access. In the examples, the Remote Search server is on dockerhost:9443 and the DX host is on dockerhost:10042. You must also complete Setting the search user ID and Removing search collections before creating a new search service. Create a new search service and use the following values for a Remote Search services configuration to a Docker container deployment. See the section on Creating a new search service for more information. Item Value IIOP_URL iiop://dockerhost:2809 PSE TYPE Select ejb from the pull down. EJB ejb/com/ibm/hrl/portlets/WsPse/WebScannerLiteEJBHome DefaultCollectionsDirectory Leave empty. Search service implementation Select Portal Search Service Type from the pull down. CONFIG_FOLDER_PATH Did not set (differs from non-container instructions). Note: Once completed and saved, the HCL Digital Experience 9.5 container deployment has a new search service called Remote PSE service EJB , with a green check mark confirming that the service was correctly set up and is able to communicate with the Remote Search container. Based on the previously created Remote Search service, create a Portal Search Collection and a JCR Search Collection using the following parameters. Use the following parameters to create a Portal search collection . Parameter Value Search collection name Portal Search Collection Search collection location /opt/HCL/AppServer/profiles/prs_profile/SearchCollections/PortalSearchCollection Portal Search Content Source Configuration. Use the following URL for Collect documents linked from this URL : https://dockerhost:10042/wps/seedlist/myserver?Source=com.ibm.lotus.search.plugins.seedlist.retriever.portal.PortalRetrieverFactory&amp;Action=GetDocuments&amp;Range=100&amp;locale=en-US Note: The host and port are the Docker host and port to which 10042 is mapped. In this case, 10042 is the HttpQueueInboundDefaultSecure port on the HCL Digital Experience server. Note that you can also put this URL in a browser (on the Docker host) and confirm that the response is an ATOM feed. On the Security panel, use dockerhost as the host name, along with the username wpsadmin and the associated password for wpsadmin . Use the following parameters to create a JCR search collection . Parameter Value Search collection name JCRCollection1 Search collection location /opt/HCL/AppServer/profiles/prs_profile/SearchCollections/JCRCollection1 JCR Content Source Configuration. Use the following URL for Collect documents linked from this URL : https://dockerhost:10042/wps/seedlist/myserver?Action=GetDocuments&amp;Format=ATOM&amp;Locale=en_US&amp;Range=100&amp;Source=com.ibm.lotus.search.plugins.seedlist.retriever.jcr.JCRRetrieverFactory&amp;Start=0&amp;SeedlistId=1@OOTB_CRAWLER1 Note: The host and port are the Docker host and port to which 10042 is mapped. In this case, 10042 is the HttpQueueInboundDefaultSecure port on the HCL Digital Experience server. Note that you can also put this URL in a browser (on the Docker host) and confirm that the response is an ATOM feed. On the Security panel, use dockerhost as the host name, along with the username wpsadmin and the associated password for wpsadmin . Configure WCM Authoring Portlet search function. Note: Even though the documents are gathered by the Remote Search function from the JCR, additional configuration is needed in order for the HCL Web Content Manager (WCM) Authoring Portlet search to use document search. Set the following values for this configuration. Set the Custom properties for the WebSphere Application Server Resource Environment Provider, JCR ConfigService , using the following values: Property Value jcr.textsearch.enabled true jcr.textsearch.indexdirectory /opt/HCL/AppServer/profiles/prs_profile/SearchCollections jcr.textsearch.PSE.type ejb jcr.textsearch.EJB.IIOP.URL iiop://dockerhost:2809 jcr.textsearch.EJB.EJBName ejb/com/ibm/hrl/portlets/WsPse/WebScannerLiteEJBHome Note: On the jcr.textsearch.indexdirectory , the sub-directory JCRCollection1 is NOT included in the path. Parent topic: Customizing your container deployment","title":"Configure Remote Search in Docker"},{"location":"containerization/docker_remote_search/#configure-remote-search-in-docker","text":"This section shows how to configure Remote Search for your HCL Digital Experience 9.5 Docker containers.","title":"Configure Remote Search in Docker"},{"location":"containerization/docker_remote_search/#introduction","text":"To support search services when deployed to Docker container platforms in Kubernetes, administrators should configure Remote Search services. This requires a different setup and configuration steps than those used to set up Remote Search on a non-Docker container platform . Some differences in the non-Docker container platform procedures are outlined below: The serverindex.xml file on the Remote Search server when deployed to on-premises environments may have a host name that is not accurate in a container environment with respect to the actual host name of the server hosting the Remote Search server. Since Docker dynamically allocates the host names for the containers, the /etc/hosts file doesn\u2019t have static entries for the HCL Digital Experience 9.5 container-based server nor the Remote Search server. The WebSphere Application Server ND Administration console will not have correct host names for the HCL Digital Experience container.","title":"Introduction"},{"location":"containerization/docker_remote_search/#deploying-remote-search-in-hcl-digital-experience-95-docker-containers","text":"Prerequisite : Download the HCL Digital Experience 9.5 Docker containers from your HCL Digital Experience entitlements from the HCL Software License Portal . The HCL DX 9.5 container update CF181 and higher packages will include a core software and Remote search container. Load both of these images into your Docker repository via the \u201cdocker load\u201d command. Note that if your organization has deployed these containers to a corporate Docker repository, you might use \u201cdocker pull\u201d instead to put it into your local repository. In this example, two Docker images and names are referred to. If a higher HCL Digital Experience 9.5 Container Update release is used, for example, HCL Digital Experience 9.5 CF181, the image names may vary. hcl-dx-core-image-v95_CF181_xxxxxxxx-xxxx.tar.gz hcl-dx-dxrs-image-v95_CF181_xxxxxxxx-xxxx.tar.gz","title":"Deploying Remote Search in HCL Digital Experience 9.5 Docker containers"},{"location":"containerization/docker_remote_search/#ejbs-and-host-names","text":"HCL Digital Experience 9.5 Container core and Portal Remote Search each use WebSphere Application Server as a base. As these components are on different hosts (containers), they need to communicate via IP. The initial conversation between HCL Digital Experience 9.5 core and the Remote Search server takes place over IIOP (rmi) which is the internet protocol of EJBs. Ideally, the /etc/hosts file of both containers would have the host name of the other. In other words, the /etc/hosts file of the HCL Digital Experience Container core would have a host reference for the Remote Search and vice versa. However, three factors make this impossible. The containers are based on Red Hat UBI, the /etc/hosts file is owned by root , and the root password (and sudo ) is not available. Apply the command below to define host references for the Remote Search service from the Digital Experience Container core. Therefore, a way to force Docker to write the /etc/hosts file at container initialization time is needed. This is done via the Docker switch add-host . The situation is further complicated (at least on Linux) by the fact that containers on the default bridge network of Docker cannot DNS name resolve other containers on the same subnet. Therefore, one uses the Docker host as a proxy and starts both containers with the following: docker run \u2013add-host=dockerhost:172.19.0.1 \u2026 This has the effect of adding an entry in the /etc/hosts file on the HCL Digital Experience 9.5 Container core like this: 172.19.0.1 dockerhost Those familiar with Docker deployment practices will recognize 171.19.0.1 as the IP bridge address of the host machine that starts the Docker containers. Since all Docker containers have unique ports and the Docker host machine is not allowed to use these unique ports, one can refer to a port on any container as dockerhost:port_number .","title":"EJBs and host names"},{"location":"containerization/docker_remote_search/#launch-the-hcl-digital-experience-95-core-and-remote-search-containers","text":"To deploy, following is the complete docker run command for both the HCL Digital Experience 9.5 Core and Remote Search containers. In these examples, wpsadmin / wpsadmin are used as the HCL Digital Experience and WebSphere Application Server admin user ID and password credentials. docker run --add-host=dockerhost:172.19.0.1 -d -e WAS_ADMIN=wpsadmin -e WAS_PASSWORD=wpsadmin -e DX_ADMIN=wpsadmin -e DX_PASSWORD=wpsadmin -p 9043:9043 -p 9403:9403 -p 2809:2809 -p 9060:9060 -v /home/dxengineer/Documents/prs_profile:/opt/HCL/AppServer/profiles/prs_profile hcl/dx/dxrs:v95_CF181_20200622-1550 docker run --add-host=dockerhost:172.19.0.1 -d -e WAS_ADMIN=wpsadmin -e WAS_PASSWORD=wpsadmin -e DX_ADMIN=wpsadmin -e DX_PASSWORD=wpsadmin -p 10038:10038 -p 10039:10039 -p 10041:10041 -p 10042:10042 -v /home/dxengineer/Documents/wp_profile:/opt/HCL/wp_profile hcl/dx/core:v95_CF181_20200622-1550 The persisted profile for each container is located at /home/dxengineer/Documents/. The HCL Digital Experience admin username and password are passed as environment variables.","title":"Launch the HCL Digital Experience 9.5 Core and Remote Search containers"},{"location":"containerization/docker_remote_search/#defining-serverindexxml-on-the-remote-search-server","text":"On the HCL DX 9.5 container Remote search server, the serverindex.xml file is located at: /opt/HCL/AppServer/profiles/prs_profile/config/cells/{cell name}/nodes/{node name} Note that immediately after the Remote Search server is started (and since the profile is persisted on a persisted sub-directory), this file can be found at: {persisted volume for remote search profile}/prs_profile/config/cells/{cell name}/nodes/{node name} The serverindex.xml file contains 5 lines: host=\u201d{some hostname}\u201d where {some hostname} might likely be \"localhost\" or some host name like \u201c33b7e5004319\u201d . However, remote search will not work correctly until this host name field is replaced with a host name exactly like the host name in the \u201ciiop\u201d url in the search service is coded. So, for example, if your Portal search service has coded the \"iiop\" URL as \u201ciiop://some.host.com:2809\u201d , the host in serverindex.hml needs to be host=\u201dsome.host.com\u201d . It could be that your \"iiop\" url has the host name \"dockerhost\" if your iiop url lets your docker host route that URL. In that case, change these 5 lines to the following: host=\u201ddockerhost\u201d (apply the string \u201cdockerhost\u201d) Upon completion, when the HCL Digital Experience 9.5 Container core server communicates to the container Remote Search server over \"iiop\", the Remote Search server will return \u201cdockerhost\u201d as the host name of the Remote Search server. The HCL Digital Experience 9.5 Container has a configuration that will append the port to the host name that was just returned.","title":"Defining serverindex.xml on the Remote Search server"},{"location":"containerization/docker_remote_search/#digital-experience-instructions-for-remote-search-configuration","text":"The following guidance aligns with the Remote Search services configuration instructions available in the Remote Search services topic for deployment to non-container HCL Digital Experience servers. All of the instructions contained in the Remote Search services topic should also be completed in a Docker-based HCL Digital Experience deployment. The following guidance outlines specific settings that were used in the Remote Search service DX Docker deployment. Create a single sign-on (SSO) domain between HCL Digital Experience 9.5 container and the Remote Search service container by following the non-container on-premises procedure for Creating a single sign-on domain between HCL Portal and the Remote Search service . This entails exchanging SSL certificates and LTPA domain tokens. Note: When retrieving the SSL certificates from the host server, use dockerhost (as the host) and the appropriate port for the SSL access. In the examples, the Remote Search server is on dockerhost:9443 and the DX host is on dockerhost:10042. You must also complete Setting the search user ID and Removing search collections before creating a new search service. Create a new search service and use the following values for a Remote Search services configuration to a Docker container deployment. See the section on Creating a new search service for more information. Item Value IIOP_URL iiop://dockerhost:2809 PSE TYPE Select ejb from the pull down. EJB ejb/com/ibm/hrl/portlets/WsPse/WebScannerLiteEJBHome DefaultCollectionsDirectory Leave empty. Search service implementation Select Portal Search Service Type from the pull down. CONFIG_FOLDER_PATH Did not set (differs from non-container instructions). Note: Once completed and saved, the HCL Digital Experience 9.5 container deployment has a new search service called Remote PSE service EJB , with a green check mark confirming that the service was correctly set up and is able to communicate with the Remote Search container. Based on the previously created Remote Search service, create a Portal Search Collection and a JCR Search Collection using the following parameters. Use the following parameters to create a Portal search collection . Parameter Value Search collection name Portal Search Collection Search collection location /opt/HCL/AppServer/profiles/prs_profile/SearchCollections/PortalSearchCollection Portal Search Content Source Configuration. Use the following URL for Collect documents linked from this URL : https://dockerhost:10042/wps/seedlist/myserver?Source=com.ibm.lotus.search.plugins.seedlist.retriever.portal.PortalRetrieverFactory&amp;Action=GetDocuments&amp;Range=100&amp;locale=en-US Note: The host and port are the Docker host and port to which 10042 is mapped. In this case, 10042 is the HttpQueueInboundDefaultSecure port on the HCL Digital Experience server. Note that you can also put this URL in a browser (on the Docker host) and confirm that the response is an ATOM feed. On the Security panel, use dockerhost as the host name, along with the username wpsadmin and the associated password for wpsadmin . Use the following parameters to create a JCR search collection . Parameter Value Search collection name JCRCollection1 Search collection location /opt/HCL/AppServer/profiles/prs_profile/SearchCollections/JCRCollection1 JCR Content Source Configuration. Use the following URL for Collect documents linked from this URL : https://dockerhost:10042/wps/seedlist/myserver?Action=GetDocuments&amp;Format=ATOM&amp;Locale=en_US&amp;Range=100&amp;Source=com.ibm.lotus.search.plugins.seedlist.retriever.jcr.JCRRetrieverFactory&amp;Start=0&amp;SeedlistId=1@OOTB_CRAWLER1 Note: The host and port are the Docker host and port to which 10042 is mapped. In this case, 10042 is the HttpQueueInboundDefaultSecure port on the HCL Digital Experience server. Note that you can also put this URL in a browser (on the Docker host) and confirm that the response is an ATOM feed. On the Security panel, use dockerhost as the host name, along with the username wpsadmin and the associated password for wpsadmin . Configure WCM Authoring Portlet search function. Note: Even though the documents are gathered by the Remote Search function from the JCR, additional configuration is needed in order for the HCL Web Content Manager (WCM) Authoring Portlet search to use document search. Set the following values for this configuration. Set the Custom properties for the WebSphere Application Server Resource Environment Provider, JCR ConfigService , using the following values: Property Value jcr.textsearch.enabled true jcr.textsearch.indexdirectory /opt/HCL/AppServer/profiles/prs_profile/SearchCollections jcr.textsearch.PSE.type ejb jcr.textsearch.EJB.IIOP.URL iiop://dockerhost:2809 jcr.textsearch.EJB.EJBName ejb/com/ibm/hrl/portlets/WsPse/WebScannerLiteEJBHome Note: On the jcr.textsearch.indexdirectory , the sub-directory JCRCollection1 is NOT included in the path. Parent topic: Customizing your container deployment","title":"Digital Experience instructions for Remote Search configuration"},{"location":"containerization/dxclient/","text":"DXClient DXClient is a tool that helps developers and administrators manage tasks, such as uploading one or more portlets or Script Applications, from source development environments to target HCL DX 9.5 deployments. This tool is capable of taking artifacts developed locally and deploying them to DX 9.5 servers deployed to supported on-premises platforms in standalone, cluster, or farm-topologies and supported Kubernetes platforms. Important: DXClient version is mostly forward and backward compatible with the DX CF versions, however, in some cases it might not work as expected if the CF versions are different. Hence, ensure that the CF versions of both DXClient and DX Core are the same in your installation. Notes: DXClient is enabled in supported Kubernetes platforms from HCL Digital Experience 9.5 CF192 and later releases: DXClient is available as a Docker image from HCL DX 9.5 CF196 and later releases, See the Installation section for more details. DXClient also exists as Node.js -based CLI tool and requires Node.js to be installed as a prerequisite. However, this is deprecated in the HCL Digital Experience Container CF196 release. DXConnect DXConnect is a servlet-based application deployed on top of IBM WebSphere Application Server in the HCL DX 9.5 CF19 and later deployments, under the Configuration Wizard profile - cw_profile . DXConnect enables the DXClient tool to connect over an HTTP or HTTPS connection from a client development machine or remote server to a source or target HCL DX 9.5 server to execute certain tasks requested via DXClient commands. Architecture Notes: HCL DX 9.5 CF19 or later version is installed on target servers, on supported on premises platforms (Microsoft Windows, Linux or IBM AIX). Beginning with HCL DX 9.5 Container Update CF192 and later releases, the DXConnect Servlet is pre-configured and started on supported Red Hat OpenShift and Kubernetes platforms that DX 9.5 containers are deployed to. For supported on premises platforms with HCL DX 9.5 CF19 and later releases, the DXConnect application needs to be installed (refer to DXConnect Installation ) and started under the Configuration Wizard ( cw_profile ) on target servers. For more information on starting the Configuration Wizard, refer to Accessing the Configuration Wizard Remember: Configuration Wizard Administrator credentials are required to access the DXConnect application. Installing using the Docker image Prerequisites: You must ensure that Docker is installed on the workstation. Note: When you upgrade to use the Docker image DXClient, you should first uninstall the nodejs DXClient. DXClient docker image comes with a script that you can use to run the docker image. This script creates a store directory, and copies the input files from the absolute path to the shared volume location. See video: CI/CD \u2013 DXClient in Container Navigate to <working-directory> folder where you wish to use DXClient from. Download the DXClient.zip file (DXClient_VX_XXXXXXXX-XXXX.zip) to a local directory on the local workstation from your HCL Digital Experience 9.5 CF196 or higher entitlements on the HCL Software License Portal. Note: If you are upgrading from the node to Docker image version of DXClient, you must first uninstall or unlink the current version using the following command before installing the newer version. Syntax for Linux and Apple macOS platforms: make unlink Syntax for Microsoft Windows platforms: make_unlink.bat Extract the DXClient.zip file locally. To work with multiple versions of DXClient, update the IMAGE_TAG reference in the scripts file under the /bin folder. For example, IMAGE_TAG=v95_CF200_20211201-1021 . By default it will be set in the executable script. Run docker load < dxclient.tar.gz. Add the execution shell script to the bin directory to the PATH variable to be able to call dxclient from any directory. export PATH=<working-directory>/bin:$PATH For Microsoft Windows platforms: use dxclient.bat script in the bin directory to the PATH variable to be able to call DXClient from any directory. Set appropriate permission. chmod xxx <working-directory>/bin Run 'dxclient -V' to verify that the dxclient command line is installed. A folder named store will be created in your working directory. This is the shared volume location to your docker container. Configuration, logger, output, and sample files under location - <working-directory>/store. Common command arguments can be pre-configured inside the config.json file available under <working-directory>/store folder. A sample configuration file that could be used on-premises platforms in standalone, cluster platforms is also available under <working-directory>/store/samples/sample-configurations/default-config.json for reference. DXClient installation configuration Common command arguments can be pre-configured inside the config.json file available under dist/src/configuration folder. A sample configuration file that could be used for any of the supported Kubernetes platforms is also available under samples/sample-configurations.json for reference. { \"enableLogger\": true, \"enableBackup\": \"false\", \"dxProtocol\": \"\", \"hostname\": \"\", \"dxPort\": \"\", \"dxContextRoot\":\"/wps\", \"xmlConfigPath\": \"/wps/config\", \"dxUsername\": \"\", \"dxPassword\": \"\", \"dxSoapPort\": \"10033\", \"dxProfileName\": \"wp_profile\", \"dxProfilePath\": \"\", \"dxConnectHostname\": \"\", \"dxConnectUsername\": \"\", \"dxConnectPassword\": \"\", \"dxConnectPort\": \"10202\", \"dxWASUsername\": \"\", \"dxWASPassword\": \"\", \"dxConnectProtocol\": \"https\", \"wcmSiteArea\": \"\", \"wcmContentPath\": \"\", \"wcmContentName\": \"\", \"contenthandlerPath\": \"/wps/mycontenthandler\", \"wcmContentId\": \"\", \"restoreAsPublished\": false, \"wcmLibraryId\": \"\", \"virtualPortalContext\": \"\", \"projectContext\": \"\", \"wcmLibraryName\": \"\", \"lastModifiedAfter\": \"\", \"damAPIPort\": \"\", \"ringAPIPort\": \"\", \"damAPIVersion\": \"\", \"ringAPIVersion\": \"\", \"wcmProjectName\": \"\", \"targetHostname\": \"\", \"targetDxConnectPort\": \"\", \"targetDxConnectUsername\":\"\", \"targetDxConnectPassword\":\"\", \"targetDxProfileName\": \"\" } Installing using the node package file (deprecated in CF196) Prerequisites: Node.js version 12.18.3 is the minimum supported version, and must be installed on the local workstation or automation server. See video: Getting Started with DXClient on Red Hat OpenShift using HCL Digital Experience Container Update CF194 Note: DXClient node package is deprecated in the HCL Digital Experience Container CF196 release. It might be removed in the future releases. You are encouraged to use the DXClient Docker package from CF Container release CF196 and later. Complete the following steps to install the DXClient tool in your local development workstation or automation server. Note: If you are upgrading from CF19, CF191, or later releases, you should first unlink the current version using the following command before installing the newer version. Syntax for Linux and Apple macOS platforms: make unlink Syntax for Microsoft Windows platforms: make_unlink.bat Ensure that Node.js version 12.18.3 or later version is installed to the local workstation. The DXClient tool is supported on Microsoft Windows, Linux, and Apple macOS workstations and automation servers. Download the DXClient.zip file (DXClient_VX_XXXXXXXX-XXXX.zip) to a local directory on the local workstation from your DX 9.5 CF19 or later entitlements on the HCL Software License Portal . Reference the Docker topic for the latest list of HCL DX 9.5 files available for download. Extract the DXClient.zip file locally. From the extracted folder, run the following command. For Linux and Apple macOS platforms: make install For Microsoft Windows platforms: make_install.bat The following commands are run: Run the following command to link your application to the local npm module in your machine. Refer to the following Notes section before you proceed. For Linux and Apple MacOS platforms: make link For Microsoft Windows platforms: make_link.bat Notes: Avoid using this command when scripting deployments from an automation server (for example, in pipelines) as there is a chance of picking up the wrong dependencies during tool version upgrades. If the link command is not used (such as on automation servers), then use the following command to run the application: For Linux and Apple MacOS platforms: ./bin/dxclient For Microsoft Windows platforms: node bin/dxclient DXClient node uninstalling To uninstall the DXClient tool, perform the following commands: For Linux and Apple MacOS platforms: make clean For Microsoft Windows platforms: make uninstall.bat To unlink the DXClient tool, perform the following commands: For Linux and Apple MacOS platforms: make unlink For Microsoft Windows platforms: make_unlink.bat Verify the DXClient installation Successful installation of the DXClient tool can be checked by using the \" dxclient -V \" command, which should show the version of the DXClient tool installed. Once installed, commands can be executed using the DXClient tool to perform CI / CD actions on HCL DX 9.5 servers. Notes: Refer to the list of features that were released in the following HCL DX 9.5 Container releases: HCL DX 9.5 CF201 release: An optional parameter requestId added to Deploy theme , Deploy application , Restart DX Core server , and Manage virtual portals . Retrieve feature added to the Resource environment provider . Accessing ConfigWizard in container environment Note that a few parameters are deprecated and replaced with new parameters in the DX Core configuration reports. For information, see DX Core server configuration report HCL DX 9.5 CF200 release: Exporting and Importing WCM libraries DX Core server configuration report HCL DX 9.5 CF199 release: DAM Staging Create credential vault slot Create syndication relation Export and import multiple resource environment providers Specify the context root for exporting and importing personalization rules HCL DX 9.5 CF198 release: List DAM schemas Personalization export and import rules Resource environment provider Manage virtual portals HCL DX 9.5 CF197 release: Undeploy portlets Deploy and undeploy themes Deploy application manage get-syndication report Restart Core Delete DAM schema HCL DX 9.5 CF196 release: Shared library HCL DX 9.5 CF195 release: Undeploy theme MLS export and import of WCM library HCL DX 9.5 CF193 release: Restart DX Core server Deploy Application Managing syndicators Managing subscribers HCL DX 9.5 CF192 release: Undeploy script applications Deploy theme (EAR and WebDAV based) HCL DX 9.5 CF19 release: Deploy Portlets or Undeploy portlets Deploy script applications XML Access Restore Script Application DXClient commands Command syntax conventions: dxclient [command] [options] Use the following command to execute the deploy portlet action: dxclient deploy-portlet [options] Use the following command to execute the undeploy portlet action: dxclient undeploy-portlet [options] Use the following command to execute the xmlaccess action: dxclient xmlaccess [options] Use the following command to execute the pull script application action: dxclient deploy-scriptapplication pull [options] Use the following command to execute the push script application action: dxclient deploy-scriptapplication push [options] Use the following command to execute the undeploy script application action: dxclient undeploy-scriptapplication [options] Use the following command to execute the restore script application action: dxclient restore-scriptapplication [options] Use the following command to execute the deploy application action: dxclient deploy-application [options] Use the following command to execute the DX Core restart action: dxclient restart-dx-core Use the following command to execute manage-subscriber action: dxclient manage-subscriber -h Use the following command to execute manage-syndicator action: dxclient manage-syndicator -h Use the following command to execute the deploy theme action: dxclient deploy-theme [options] Use the following command to execute the undeploy theme action: dxclient undeploy-theme [options] Use the following command to execute the manage-syndicator get-syndication-report action: dxclient manage-syndicator get-syndication-report [options] Use the following command to execute the shared-library action: dxclient shared-library [options] Use the following command to execute the delete DAM schema action: dxclient delete-dam-schema [options] Use the following command to list all DAM schemas present: dxclient list-dam-schemas [options] Use the following command to export the personalization rules from the target server: dxclient pzn-export [options] Use the following command to import the personalization rules into the target server: dxclient pzn-import [options] Use the following command to manage virtual portal tasks in the DX server: dxclient manage-virtual-portal [options] Use the following command to register subscriber: dxclient manage-dam-staging register-dam-subscriber [options] Use the following command to deregister subscriber: dxclient manage-dam-staging deregister-dam-subscriber [options] Use the following command to trigger manual sync: dxclient manage-dam-staging trigger-staging [options] Use the following command to create credential vault slot in the DX server: dxclient create-credential-vault [options] Use the following command to create the syndication relation between syndicator and subscriber in DX server: dxclient create-syndication-relation [options] Use the following command to create, update, delete, export or import a custom property from an existing Resource Environment Provider: dxclient resource-env-provider [options] Use this command to export WCM libraries dxclient wcm-library-export Use this command to import WCM libraries dxclient wcm-library-import Use the dx-core-configuration-reports command to get a summary of the configurations of a single DX server or both source and target DX servers, which users can use to compare. dxclient dx-core-configuration-reports [OPTIONS] DXClient Help commands The following commands show the Help documents for DXClient command usage. Use the following commands to display the Help document for DXClient: dxclient dxclient -h, --help Use the following command to display the DXClient version number: dxclient -V, --version Use the following command to display the detailed help for a specific command: dxclient help [command] Accessing the ConfigWizard admin console in a container environment You can access the ConfigWizard admin console in a container environment from your local system. For more information, refer to Accessing the ConfigWizard admin console in a container environment . Parent topic: Deploy DX components using HCL DXClient and DXConnect","title":"DXClient"},{"location":"containerization/dxclient/#dxclient","text":"DXClient is a tool that helps developers and administrators manage tasks, such as uploading one or more portlets or Script Applications, from source development environments to target HCL DX 9.5 deployments. This tool is capable of taking artifacts developed locally and deploying them to DX 9.5 servers deployed to supported on-premises platforms in standalone, cluster, or farm-topologies and supported Kubernetes platforms. Important: DXClient version is mostly forward and backward compatible with the DX CF versions, however, in some cases it might not work as expected if the CF versions are different. Hence, ensure that the CF versions of both DXClient and DX Core are the same in your installation. Notes: DXClient is enabled in supported Kubernetes platforms from HCL Digital Experience 9.5 CF192 and later releases: DXClient is available as a Docker image from HCL DX 9.5 CF196 and later releases, See the Installation section for more details. DXClient also exists as Node.js -based CLI tool and requires Node.js to be installed as a prerequisite. However, this is deprecated in the HCL Digital Experience Container CF196 release. DXConnect DXConnect is a servlet-based application deployed on top of IBM WebSphere Application Server in the HCL DX 9.5 CF19 and later deployments, under the Configuration Wizard profile - cw_profile . DXConnect enables the DXClient tool to connect over an HTTP or HTTPS connection from a client development machine or remote server to a source or target HCL DX 9.5 server to execute certain tasks requested via DXClient commands.","title":"DXClient"},{"location":"containerization/dxclient/#architecture","text":"Notes: HCL DX 9.5 CF19 or later version is installed on target servers, on supported on premises platforms (Microsoft Windows, Linux or IBM AIX). Beginning with HCL DX 9.5 Container Update CF192 and later releases, the DXConnect Servlet is pre-configured and started on supported Red Hat OpenShift and Kubernetes platforms that DX 9.5 containers are deployed to. For supported on premises platforms with HCL DX 9.5 CF19 and later releases, the DXConnect application needs to be installed (refer to DXConnect Installation ) and started under the Configuration Wizard ( cw_profile ) on target servers. For more information on starting the Configuration Wizard, refer to Accessing the Configuration Wizard Remember: Configuration Wizard Administrator credentials are required to access the DXConnect application.","title":"Architecture"},{"location":"containerization/dxclient/#installing-using-the-docker-image","text":"Prerequisites: You must ensure that Docker is installed on the workstation. Note: When you upgrade to use the Docker image DXClient, you should first uninstall the nodejs DXClient. DXClient docker image comes with a script that you can use to run the docker image. This script creates a store directory, and copies the input files from the absolute path to the shared volume location. See video: CI/CD \u2013 DXClient in Container Navigate to <working-directory> folder where you wish to use DXClient from. Download the DXClient.zip file (DXClient_VX_XXXXXXXX-XXXX.zip) to a local directory on the local workstation from your HCL Digital Experience 9.5 CF196 or higher entitlements on the HCL Software License Portal. Note: If you are upgrading from the node to Docker image version of DXClient, you must first uninstall or unlink the current version using the following command before installing the newer version. Syntax for Linux and Apple macOS platforms: make unlink Syntax for Microsoft Windows platforms: make_unlink.bat Extract the DXClient.zip file locally. To work with multiple versions of DXClient, update the IMAGE_TAG reference in the scripts file under the /bin folder. For example, IMAGE_TAG=v95_CF200_20211201-1021 . By default it will be set in the executable script. Run docker load < dxclient.tar.gz. Add the execution shell script to the bin directory to the PATH variable to be able to call dxclient from any directory. export PATH=<working-directory>/bin:$PATH For Microsoft Windows platforms: use dxclient.bat script in the bin directory to the PATH variable to be able to call DXClient from any directory. Set appropriate permission. chmod xxx <working-directory>/bin Run 'dxclient -V' to verify that the dxclient command line is installed. A folder named store will be created in your working directory. This is the shared volume location to your docker container. Configuration, logger, output, and sample files under location - <working-directory>/store. Common command arguments can be pre-configured inside the config.json file available under <working-directory>/store folder. A sample configuration file that could be used on-premises platforms in standalone, cluster platforms is also available under <working-directory>/store/samples/sample-configurations/default-config.json for reference.","title":"Installing using the Docker image"},{"location":"containerization/dxclient/#dxclient-installation-configuration","text":"Common command arguments can be pre-configured inside the config.json file available under dist/src/configuration folder. A sample configuration file that could be used for any of the supported Kubernetes platforms is also available under samples/sample-configurations.json for reference. { \"enableLogger\": true, \"enableBackup\": \"false\", \"dxProtocol\": \"\", \"hostname\": \"\", \"dxPort\": \"\", \"dxContextRoot\":\"/wps\", \"xmlConfigPath\": \"/wps/config\", \"dxUsername\": \"\", \"dxPassword\": \"\", \"dxSoapPort\": \"10033\", \"dxProfileName\": \"wp_profile\", \"dxProfilePath\": \"\", \"dxConnectHostname\": \"\", \"dxConnectUsername\": \"\", \"dxConnectPassword\": \"\", \"dxConnectPort\": \"10202\", \"dxWASUsername\": \"\", \"dxWASPassword\": \"\", \"dxConnectProtocol\": \"https\", \"wcmSiteArea\": \"\", \"wcmContentPath\": \"\", \"wcmContentName\": \"\", \"contenthandlerPath\": \"/wps/mycontenthandler\", \"wcmContentId\": \"\", \"restoreAsPublished\": false, \"wcmLibraryId\": \"\", \"virtualPortalContext\": \"\", \"projectContext\": \"\", \"wcmLibraryName\": \"\", \"lastModifiedAfter\": \"\", \"damAPIPort\": \"\", \"ringAPIPort\": \"\", \"damAPIVersion\": \"\", \"ringAPIVersion\": \"\", \"wcmProjectName\": \"\", \"targetHostname\": \"\", \"targetDxConnectPort\": \"\", \"targetDxConnectUsername\":\"\", \"targetDxConnectPassword\":\"\", \"targetDxProfileName\": \"\" }","title":"DXClient installation configuration"},{"location":"containerization/dxclient/#installing-using-the-node-package-file-deprecated-in-cf196","text":"Prerequisites: Node.js version 12.18.3 is the minimum supported version, and must be installed on the local workstation or automation server. See video: Getting Started with DXClient on Red Hat OpenShift using HCL Digital Experience Container Update CF194 Note: DXClient node package is deprecated in the HCL Digital Experience Container CF196 release. It might be removed in the future releases. You are encouraged to use the DXClient Docker package from CF Container release CF196 and later. Complete the following steps to install the DXClient tool in your local development workstation or automation server. Note: If you are upgrading from CF19, CF191, or later releases, you should first unlink the current version using the following command before installing the newer version. Syntax for Linux and Apple macOS platforms: make unlink Syntax for Microsoft Windows platforms: make_unlink.bat Ensure that Node.js version 12.18.3 or later version is installed to the local workstation. The DXClient tool is supported on Microsoft Windows, Linux, and Apple macOS workstations and automation servers. Download the DXClient.zip file (DXClient_VX_XXXXXXXX-XXXX.zip) to a local directory on the local workstation from your DX 9.5 CF19 or later entitlements on the HCL Software License Portal . Reference the Docker topic for the latest list of HCL DX 9.5 files available for download. Extract the DXClient.zip file locally. From the extracted folder, run the following command. For Linux and Apple macOS platforms: make install For Microsoft Windows platforms: make_install.bat The following commands are run: Run the following command to link your application to the local npm module in your machine. Refer to the following Notes section before you proceed. For Linux and Apple MacOS platforms: make link For Microsoft Windows platforms: make_link.bat Notes: Avoid using this command when scripting deployments from an automation server (for example, in pipelines) as there is a chance of picking up the wrong dependencies during tool version upgrades. If the link command is not used (such as on automation servers), then use the following command to run the application: For Linux and Apple MacOS platforms: ./bin/dxclient For Microsoft Windows platforms: node bin/dxclient DXClient node uninstalling To uninstall the DXClient tool, perform the following commands: For Linux and Apple MacOS platforms: make clean For Microsoft Windows platforms: make uninstall.bat To unlink the DXClient tool, perform the following commands: For Linux and Apple MacOS platforms: make unlink For Microsoft Windows platforms: make_unlink.bat","title":"Installing using the node package file (deprecated in CF196)"},{"location":"containerization/dxclient/#verify-the-dxclient-installation","text":"Successful installation of the DXClient tool can be checked by using the \" dxclient -V \" command, which should show the version of the DXClient tool installed. Once installed, commands can be executed using the DXClient tool to perform CI / CD actions on HCL DX 9.5 servers. Notes: Refer to the list of features that were released in the following HCL DX 9.5 Container releases: HCL DX 9.5 CF201 release: An optional parameter requestId added to Deploy theme , Deploy application , Restart DX Core server , and Manage virtual portals . Retrieve feature added to the Resource environment provider . Accessing ConfigWizard in container environment Note that a few parameters are deprecated and replaced with new parameters in the DX Core configuration reports. For information, see DX Core server configuration report HCL DX 9.5 CF200 release: Exporting and Importing WCM libraries DX Core server configuration report HCL DX 9.5 CF199 release: DAM Staging Create credential vault slot Create syndication relation Export and import multiple resource environment providers Specify the context root for exporting and importing personalization rules HCL DX 9.5 CF198 release: List DAM schemas Personalization export and import rules Resource environment provider Manage virtual portals HCL DX 9.5 CF197 release: Undeploy portlets Deploy and undeploy themes Deploy application manage get-syndication report Restart Core Delete DAM schema HCL DX 9.5 CF196 release: Shared library HCL DX 9.5 CF195 release: Undeploy theme MLS export and import of WCM library HCL DX 9.5 CF193 release: Restart DX Core server Deploy Application Managing syndicators Managing subscribers HCL DX 9.5 CF192 release: Undeploy script applications Deploy theme (EAR and WebDAV based) HCL DX 9.5 CF19 release: Deploy Portlets or Undeploy portlets Deploy script applications XML Access Restore Script Application","title":"Verify the DXClient installation"},{"location":"containerization/dxclient/#dxclient-commands","text":"Command syntax conventions: dxclient [command] [options] Use the following command to execute the deploy portlet action: dxclient deploy-portlet [options] Use the following command to execute the undeploy portlet action: dxclient undeploy-portlet [options] Use the following command to execute the xmlaccess action: dxclient xmlaccess [options] Use the following command to execute the pull script application action: dxclient deploy-scriptapplication pull [options] Use the following command to execute the push script application action: dxclient deploy-scriptapplication push [options] Use the following command to execute the undeploy script application action: dxclient undeploy-scriptapplication [options] Use the following command to execute the restore script application action: dxclient restore-scriptapplication [options] Use the following command to execute the deploy application action: dxclient deploy-application [options] Use the following command to execute the DX Core restart action: dxclient restart-dx-core Use the following command to execute manage-subscriber action: dxclient manage-subscriber -h Use the following command to execute manage-syndicator action: dxclient manage-syndicator -h Use the following command to execute the deploy theme action: dxclient deploy-theme [options] Use the following command to execute the undeploy theme action: dxclient undeploy-theme [options] Use the following command to execute the manage-syndicator get-syndication-report action: dxclient manage-syndicator get-syndication-report [options] Use the following command to execute the shared-library action: dxclient shared-library [options] Use the following command to execute the delete DAM schema action: dxclient delete-dam-schema [options] Use the following command to list all DAM schemas present: dxclient list-dam-schemas [options] Use the following command to export the personalization rules from the target server: dxclient pzn-export [options] Use the following command to import the personalization rules into the target server: dxclient pzn-import [options] Use the following command to manage virtual portal tasks in the DX server: dxclient manage-virtual-portal [options] Use the following command to register subscriber: dxclient manage-dam-staging register-dam-subscriber [options] Use the following command to deregister subscriber: dxclient manage-dam-staging deregister-dam-subscriber [options] Use the following command to trigger manual sync: dxclient manage-dam-staging trigger-staging [options] Use the following command to create credential vault slot in the DX server: dxclient create-credential-vault [options] Use the following command to create the syndication relation between syndicator and subscriber in DX server: dxclient create-syndication-relation [options] Use the following command to create, update, delete, export or import a custom property from an existing Resource Environment Provider: dxclient resource-env-provider [options] Use this command to export WCM libraries dxclient wcm-library-export Use this command to import WCM libraries dxclient wcm-library-import Use the dx-core-configuration-reports command to get a summary of the configurations of a single DX server or both source and target DX servers, which users can use to compare. dxclient dx-core-configuration-reports [OPTIONS]","title":"DXClient commands"},{"location":"containerization/dxclient/#dxclient-help-commands","text":"The following commands show the Help documents for DXClient command usage. Use the following commands to display the Help document for DXClient: dxclient dxclient -h, --help Use the following command to display the DXClient version number: dxclient -V, --version Use the following command to display the detailed help for a specific command: dxclient help [command]","title":"DXClient Help commands"},{"location":"containerization/dxclient/#accessing-the-configwizard-admin-console-in-a-container-environment","text":"You can access the ConfigWizard admin console in a container environment from your local system. For more information, refer to Accessing the ConfigWizard admin console in a container environment . Parent topic: Deploy DX components using HCL DXClient and DXConnect","title":"Accessing the ConfigWizard admin console in a container environment"},{"location":"containerization/dxclientartifacts/","text":"DXClient Artifact Types This section provides information about the artifact types that are currently supported by the DXClient tool. Limitation: If deploying CICD artifacts using DXClient to the Red Hat OpenShift environment, you might receive failure messages while you run the deploy-theme, deploy-application, or restart-dx-core commands. This might happen because of a connection getting closed due to timeout before the response is ready. In such situations, before re-triggering the request, we advise you to check your target server to verify if the application has been deployed or the server is up, as the request was already triggered from the client-side. Portlets This topic provides information about the deployment and undeployment of portlets. Script applications This topic provides information about the deployment, undeployment, and restoration of script applications. XML Access This topic provides information about the xmlaccess command that is used to export or import portlet configurations. Themes This topic provides information about the deployment and undeployment of themes artifacts. Digital Experience applications This section provides information about the deployment of DX application artifacts by using the DXClient tool. DX Core server This topic provides information about restarting the DX Core server and on creating core server configuration report using the DXClient tool. The dx-core-configuration-reports command is used to generate the differential reports on various core configurations between two DX server nodes. Exporting and importing WCM libraries This section provides information about how to export and import WCM libraries using DXClient. Managing Web Content Syndicators and Subscribers using DXClient The section provides information about using the DXClient process to automate the management of Web Content Manager Syndicators, Subscribers, and get-syndication reports. For more information on the process and settings of the Web Content Manager Syndicators and Subscribers, see How to manage syndicators and subscribers . Create or update credential vault slot This topic describes the commands that are used to create or update credential vault slot in the DX server. Shared library Shared libraries are jar files representing code that is shared across multiple components of the customer, for example, portlets, themes, preprocessors, and others. DAM artifacts This section contains the commands for working with Digital Asset Management (DAM) schemas, managing DAM staging for subscription, or configuring periodic sync. Personalization rules This topic contains the commands that the administrators can use to export and import the personalization (PZN) rules from the source server to the target server as specified by the user. Resource environment provider This topic describes the commands that are used to create, update, delete, and retrieve custom properties from an existing resource environment provider. It also provides the commands to export or import multiple resource environment providers. Managing virtual portals This topic describes the commands that are used in managing the virtual portal activities such as creating, listing, importing, or exporting virtual portals. Parent topic: Deploy DX components using HCL DXClient and DXConnect","title":"DXClient Artifact Types"},{"location":"containerization/dxclientartifacts/#dxclient-artifact-types","text":"This section provides information about the artifact types that are currently supported by the DXClient tool. Limitation: If deploying CICD artifacts using DXClient to the Red Hat OpenShift environment, you might receive failure messages while you run the deploy-theme, deploy-application, or restart-dx-core commands. This might happen because of a connection getting closed due to timeout before the response is ready. In such situations, before re-triggering the request, we advise you to check your target server to verify if the application has been deployed or the server is up, as the request was already triggered from the client-side. Portlets This topic provides information about the deployment and undeployment of portlets. Script applications This topic provides information about the deployment, undeployment, and restoration of script applications. XML Access This topic provides information about the xmlaccess command that is used to export or import portlet configurations. Themes This topic provides information about the deployment and undeployment of themes artifacts. Digital Experience applications This section provides information about the deployment of DX application artifacts by using the DXClient tool. DX Core server This topic provides information about restarting the DX Core server and on creating core server configuration report using the DXClient tool. The dx-core-configuration-reports command is used to generate the differential reports on various core configurations between two DX server nodes. Exporting and importing WCM libraries This section provides information about how to export and import WCM libraries using DXClient. Managing Web Content Syndicators and Subscribers using DXClient The section provides information about using the DXClient process to automate the management of Web Content Manager Syndicators, Subscribers, and get-syndication reports. For more information on the process and settings of the Web Content Manager Syndicators and Subscribers, see How to manage syndicators and subscribers . Create or update credential vault slot This topic describes the commands that are used to create or update credential vault slot in the DX server. Shared library Shared libraries are jar files representing code that is shared across multiple components of the customer, for example, portlets, themes, preprocessors, and others. DAM artifacts This section contains the commands for working with Digital Asset Management (DAM) schemas, managing DAM staging for subscription, or configuring periodic sync. Personalization rules This topic contains the commands that the administrators can use to export and import the personalization (PZN) rules from the source server to the target server as specified by the user. Resource environment provider This topic describes the commands that are used to create, update, delete, and retrieve custom properties from an existing resource environment provider. It also provides the commands to export or import multiple resource environment providers. Managing virtual portals This topic describes the commands that are used in managing the virtual portal activities such as creating, listing, importing, or exporting virtual portals. Parent topic: Deploy DX components using HCL DXClient and DXConnect","title":"DXClient Artifact Types"},{"location":"containerization/dxconnect/","text":"DXConnect DXConnect is a servlet-based internal application deployed on top of IBM WebSphere Application Server in the HCL DX 9.5 CF19 and later releases, under the Configuration Wizard profile - cw_profile . DXConnect enables the DXClient tool to connect over an HTTP or HTTPS connection from a client development machine or remote server to a source or target HCL DX 9.5 server to execute certain tasks requested via DXClient commands. This topic covers the DXConnect installation and configuration instructions. Authentication DXConnect is a servlet-based application deployed on top of IBM WebSphere Application Server in an HCL DX 9.5 CF19 and later deployment, under the Configuration Wizard profile - cw_profile . DXConnect enables the DXClient tool to connect over an HTTPS connection from a client development workstation or automation server to a target HCL DX 9.5 server to execute certain tasks requested via DXClient commands. Authentication DXConnect requires the cw_profile Administrator security role to access the application servlet APIs. DXConnect Installation To install DXConnect use the command below: ./ConfigEngine.sh install-dxconnect-application This task will not only install the DxConnect application, but it will create the \"DXC_ConfigSettings\" WAS Resource Environment Provider and will create two custom properties in that REP: DXCONNECT_MAX_MEMORY_SIZE_MB DXCONNECT_MAX_FILE_SIZE_MB To remove DXConnect use the command below: ./ConfigEngine.sh remove-dxconnect-application To re-install DXConnect use the command below: ./ConfigEngine.sh reinstall-dxconnect-application Notes: In Standalone and Cluster setups, the ConfigEngine task should be run under the wp_profile to have DXConnect installed in the correct location, and a restart of the cw_profile server may be required. To verify it is installed on a given HCL DX Server 9.5 with CF19 or later, navigate to the Configuration Wizard Admin console and then under Enterprise Applications . The dxconnect application will appear on the console as shown in the example below. For more information on accessing and working with the Configuration Wizard, refer to Accessing the Configuration Wizard topics. In Red Hat OpenShift, the route for DXConnect is available under the name dx-deployment-service-dxconnect. For the other supported platforms, there is only one route path as usual. Accessing the ConfigWizard admin console in a container environment You can access the ConfigWizard admin console in a container environment from your local system. For more information, refer to Accessing the ConfigWizard admin console in a container environment . Parent topic: Deploy DX components using HCL DXClient and DXConnect","title":"DXConnect"},{"location":"containerization/dxconnect/#dxconnect","text":"DXConnect is a servlet-based internal application deployed on top of IBM WebSphere Application Server in the HCL DX 9.5 CF19 and later releases, under the Configuration Wizard profile - cw_profile . DXConnect enables the DXClient tool to connect over an HTTP or HTTPS connection from a client development machine or remote server to a source or target HCL DX 9.5 server to execute certain tasks requested via DXClient commands. This topic covers the DXConnect installation and configuration instructions.","title":"DXConnect"},{"location":"containerization/dxconnect/#authentication","text":"DXConnect is a servlet-based application deployed on top of IBM WebSphere Application Server in an HCL DX 9.5 CF19 and later deployment, under the Configuration Wizard profile - cw_profile . DXConnect enables the DXClient tool to connect over an HTTPS connection from a client development workstation or automation server to a target HCL DX 9.5 server to execute certain tasks requested via DXClient commands. Authentication DXConnect requires the cw_profile Administrator security role to access the application servlet APIs. DXConnect Installation To install DXConnect use the command below: ./ConfigEngine.sh install-dxconnect-application This task will not only install the DxConnect application, but it will create the \"DXC_ConfigSettings\" WAS Resource Environment Provider and will create two custom properties in that REP: DXCONNECT_MAX_MEMORY_SIZE_MB DXCONNECT_MAX_FILE_SIZE_MB To remove DXConnect use the command below: ./ConfigEngine.sh remove-dxconnect-application To re-install DXConnect use the command below: ./ConfigEngine.sh reinstall-dxconnect-application Notes: In Standalone and Cluster setups, the ConfigEngine task should be run under the wp_profile to have DXConnect installed in the correct location, and a restart of the cw_profile server may be required. To verify it is installed on a given HCL DX Server 9.5 with CF19 or later, navigate to the Configuration Wizard Admin console and then under Enterprise Applications . The dxconnect application will appear on the console as shown in the example below. For more information on accessing and working with the Configuration Wizard, refer to Accessing the Configuration Wizard topics. In Red Hat OpenShift, the route for DXConnect is available under the name dx-deployment-service-dxconnect. For the other supported platforms, there is only one route path as usual.","title":"Authentication"},{"location":"containerization/dxconnect/#accessing-the-configwizard-admin-console-in-a-container-environment","text":"You can access the ConfigWizard admin console in a container environment from your local system. For more information, refer to Accessing the ConfigWizard admin console in a container environment . Parent topic: Deploy DX components using HCL DXClient and DXConnect","title":"Accessing the ConfigWizard admin console in a container environment"},{"location":"containerization/dxcoreserver/","text":"DX Core server This topic provides information about restarting the DX Core server and on creating core server configuration report using the DXClient tool. The dx-core-configuration-reports command is used to generate the differential reports on various core configurations between two DX server nodes. Restart DX Core server Important: Running the restart-dx-core command in the Kubernetes-based deployments might not restart all pods as expected, but this limitation will be addressed in the future releases. For now, if you want to restart all pods, use the Kubernetes interfaces such as kubectl . The restart-dx-core command is used to restart the DX Core server. Command description This command invokes the restart-dx-core tool inside the DXClient and runs the DX Core restart action. dxclient restart-dx-core Help command This command shows the help information for restart-dx-core command usage: dxclient restart-dx-core -h Command options Use this attribute to specify the username that is required for authenticating with the DX Core: -dxUsername <value> Use this attribute to specify the password that is required for authenticating with the DX Core: -dxPassword <value> Use this attribute to specify the ConfigWizard home that is required for authenticating to cw_profile : -dxConnectHostname <value> Use this attribute to specify the port number of the cw_profile : -dxConnectPort <value> Use this attribute to specify the username that is required for authenticating to the cw_profile : -dxConnectUsername <value> Use this attribute to specify the password that is required for authenticating to the cw_profile : -dxConnectPassword <value> Specify either the dxProfileName or dxProfilePath of the DX core server: Use this attribute to specify the profile name of the DX core server (for example: wp_profile ): -dxProfileName <Profile name of the DX core server> OR Use this attribute to specify the profile path of the DX server (for example: /opt/HCL/wp_profile ): -dxProfilePath <Path of the DX core server profile> The values that are passed through the command line override the default values. Use this attribute and retrigger the command to check the status of any previous request that was incomplete. -requestId <Unique ID of a previously triggered restart request> Example: dxclient restart-dx-core -dxUsername <dxUsername> -dxPassword <dxPassword> -dxConnectHostname <hostname> -dxConnectPort <dxConnectPort> -dxConnectUsername <dxConnectUsername> -dxConnectPassword <dxConnectPassword> -dxProfileName <Profile name of the DX core server> DX Core server configuration report Command description The dx-core-configuration-reports command shows the summary of the configurations of a single DX server or both source and target DX servers, which users can use to compare. dxclient dx-core-configuration-reports [OPTIONS] Help command This command shows the help information for dx-core-configuration-reports command usage: dxclient dx-core-configuration-reports summary-report -h Command options Use this attribute to specify the ConfigWizard home that is required for authenticating to cw_profile : -hostname <value> Use this attribute to specify the port number of cw_profile : -dxConnectPort <value> Use this attribute to specify the user name that is required for authenticating to cw_profile : -dxConnectUsername <value> Use this attribute to specify the password that is required for authenticating to cw_profile : -dxConnectPassword <value> Use this attribute to specify the profile name of the DX core server: -dxProfileName <Profile name of the DX core server> Use this attribute to specify the host name of the target DX core server: -targetHostname <value> Use this attribute to specify the port number of the target cw_profile server: -targetDxConnectPort <value> Use this attribute to specify the user name of the target server: -targetDxConnectUsername <value> Use this attribute to specify the password of the target server: -targetDxConnectPassword <value> Use this attribute to specify the profile name of the target server: -targetDxProfileName <Profile name of the DX core server> Notes: The target server details are needed only when the user needs to generate the summary of the configurations of both source and target servers. The following list shows some of the deprecated parameters and the new parameters that replace them in CF201. It is recommended that you start using the new parameters because the old parameters might be removed in the upcoming releases: -dxConnectHostname replaced by -hostname -targetServerHostname replaced by -targetHostname -targetServerPort -> replaced by -targetDxConnectPort -targetServerUsername replaced by -targetDxConnectUsername -targetServerPassword replaced by -targetDxConnectPassword -targetServerProfileName replaced by -targetDxProfileName Example: ``` dxclient dx-core-configuration-reports summary-report -hostname -dxConnectUsername -dxConnectPassword -dxConnectPort -targetHostname -targetDxConnectUsername -targetDxConnectPassword -targetDxConnectPort ``` Parent topic: DXClient Artifact Types","title":"DX Core server"},{"location":"containerization/dxcoreserver/#dx-core-server","text":"This topic provides information about restarting the DX Core server and on creating core server configuration report using the DXClient tool. The dx-core-configuration-reports command is used to generate the differential reports on various core configurations between two DX server nodes.","title":"DX Core server"},{"location":"containerization/dxcoreserver/#restart-dx-core-server","text":"Important: Running the restart-dx-core command in the Kubernetes-based deployments might not restart all pods as expected, but this limitation will be addressed in the future releases. For now, if you want to restart all pods, use the Kubernetes interfaces such as kubectl . The restart-dx-core command is used to restart the DX Core server. Command description This command invokes the restart-dx-core tool inside the DXClient and runs the DX Core restart action. dxclient restart-dx-core Help command This command shows the help information for restart-dx-core command usage: dxclient restart-dx-core -h Command options Use this attribute to specify the username that is required for authenticating with the DX Core: -dxUsername <value> Use this attribute to specify the password that is required for authenticating with the DX Core: -dxPassword <value> Use this attribute to specify the ConfigWizard home that is required for authenticating to cw_profile : -dxConnectHostname <value> Use this attribute to specify the port number of the cw_profile : -dxConnectPort <value> Use this attribute to specify the username that is required for authenticating to the cw_profile : -dxConnectUsername <value> Use this attribute to specify the password that is required for authenticating to the cw_profile : -dxConnectPassword <value> Specify either the dxProfileName or dxProfilePath of the DX core server: Use this attribute to specify the profile name of the DX core server (for example: wp_profile ): -dxProfileName <Profile name of the DX core server> OR Use this attribute to specify the profile path of the DX server (for example: /opt/HCL/wp_profile ): -dxProfilePath <Path of the DX core server profile> The values that are passed through the command line override the default values. Use this attribute and retrigger the command to check the status of any previous request that was incomplete. -requestId <Unique ID of a previously triggered restart request> Example: dxclient restart-dx-core -dxUsername <dxUsername> -dxPassword <dxPassword> -dxConnectHostname <hostname> -dxConnectPort <dxConnectPort> -dxConnectUsername <dxConnectUsername> -dxConnectPassword <dxConnectPassword> -dxProfileName <Profile name of the DX core server>","title":"Restart DX Core server"},{"location":"containerization/dxcoreserver/#dx-core-server-configuration-report","text":"Command description The dx-core-configuration-reports command shows the summary of the configurations of a single DX server or both source and target DX servers, which users can use to compare. dxclient dx-core-configuration-reports [OPTIONS] Help command This command shows the help information for dx-core-configuration-reports command usage: dxclient dx-core-configuration-reports summary-report -h Command options Use this attribute to specify the ConfigWizard home that is required for authenticating to cw_profile : -hostname <value> Use this attribute to specify the port number of cw_profile : -dxConnectPort <value> Use this attribute to specify the user name that is required for authenticating to cw_profile : -dxConnectUsername <value> Use this attribute to specify the password that is required for authenticating to cw_profile : -dxConnectPassword <value> Use this attribute to specify the profile name of the DX core server: -dxProfileName <Profile name of the DX core server> Use this attribute to specify the host name of the target DX core server: -targetHostname <value> Use this attribute to specify the port number of the target cw_profile server: -targetDxConnectPort <value> Use this attribute to specify the user name of the target server: -targetDxConnectUsername <value> Use this attribute to specify the password of the target server: -targetDxConnectPassword <value> Use this attribute to specify the profile name of the target server: -targetDxProfileName <Profile name of the DX core server> Notes: The target server details are needed only when the user needs to generate the summary of the configurations of both source and target servers. The following list shows some of the deprecated parameters and the new parameters that replace them in CF201. It is recommended that you start using the new parameters because the old parameters might be removed in the upcoming releases: -dxConnectHostname replaced by -hostname -targetServerHostname replaced by -targetHostname -targetServerPort -> replaced by -targetDxConnectPort -targetServerUsername replaced by -targetDxConnectUsername -targetServerPassword replaced by -targetDxConnectPassword -targetServerProfileName replaced by -targetDxProfileName Example: ``` dxclient dx-core-configuration-reports summary-report -hostname -dxConnectUsername -dxConnectPassword -dxConnectPort -targetHostname -targetDxConnectUsername -targetDxConnectPassword -targetDxConnectPort ``` Parent topic: DXClient Artifact Types","title":"DX Core server configuration report"},{"location":"containerization/dxtools_dxctl/","text":"dxctl Learn how to use dxctl for custom HCL Digital Experience 9.5 container deployments About this task Administrators can use the dxctl tool provided with Container Update CF19 and later releases to define and configure custom DX container deployments. See the following guidance: Video : Using dxctl to Deploy DX Portal on OpenShift General help for the dxctl tool or help related for sub-commands ( create , update , collect , and destroy ) and the command syntax are found with --help . dxctl can be used to deploy DX using a properties file. Sample properties files are included in the dxctl/properties directory. The properties files function as follows: Full deployment config: full-deployment.properties hybrid.enabled: false hybrid.host: onprem_hostname.com hybrid.port: 10042 For Mac: ./mac/dxctl --deploy -p properties/full-deployment.properties For Windows: win\\dxctl.exe -\u2013deploy -p properties/full-deployment.properties For Linux: ./linux/dxctl -\u2013deploy -p properties/full-deployment.properties Hybrid deployment config: hybrid-deployment.properties hybrid.enabled: true hybrid.host: aws-hybrid.sample-dx-deploy.com hybrid.port: 10042 For Mac: ./mac/dxctl --deploy -p properties/hybrid-deployment.properties For Windows: win\\dxctl.exe -\u2013deploy -p properties/hybrid-deployment.properties For Linux: ./linux/dxctl -\u2013deploy -p properties/hybrid-deployment.properties These create a hybrid deployment with Experience API, Content Composer, and Digital Asset Management. You can disable any of these features by making a copy of the hybrid file and setting the value to false to disable it. Example: composer.enabled: false disables Content Composer. Note: Experience API must be enabled to deploy Content Composer and Digital Asset Management. Prerequisites The following are the prerequisites for using dxctl . Before running the dxctl tool, you must log in on the targeted cluster using your platform's cloud-specific command-line interface (CLI), such as Azure CLI (az), gcloud CLI, AWS CLI, OpenShift CLI (oc), etc. For example, in Red Hat OpenShift, you must use oc login . dxctl does not deploy the DxDeployment custom resource definition. You must run the ./scripts/deployCrd.sh before using dxctl . Creating a deployment Follow these steps to create a deployment. You must copy the properties file once a deployment is created. Use the copied file to perform a deployment and maintain and update a deployment. For example: mkdir -p /home/$USER/deployments/ cp dxctl/properties/full-deployment.properties /home/$USER/deployments/myfirst_deployment.properties Change the settings. For example, change dx.namespace: to myfirst-dx-deployment . ./linux/dxctl --deploy -p /home/$USER/deployments/myfirst_deployment.properties Note: For OpenShift deployments, /linux/dxctl --deploy is all you need. For all other Kubernetes environments (EKS, GKE, etc.), you need to generate a TLS certification and private key. See the Generate TLS Certificate topic for more information. Updating a deployment Limitation: If you have a DX-only deployment (a deployment that contains only DX without any other features, such as the Experience API, Content Composer, or Digital Asset Management) installed using the deployment script, the dxctl tool cannot be used to update this deployment. You may continue to use the DX deployment script to update this deployment. Note: When working with HCL Digital Experience 9.5 Container Update CF192 and later, the dxctl tool can be used to update the deployment. The dxctl tool does not deploy or update the DxDeployment custom resource definition. Prior to running an update process, administrators should check the DxDeployment custom resource definition ( hcl-dx-cloud-scripts/deploy/crds/git.cwp.pnp-hcl.com_dxdeployments_crd.yaml ) for changes and update accordingly: Red Hat OpenShift command: oc delete crd dxdeployments.git.cwp.pnp-hcl.com Kubernetes command: kubectl delete crd dxdeployments.git.cwp.pnp-hcl.com CAUTION: Since crd is a cluster-wide resource, the use of kubectl delete crd dxdeployments.git.cwp.pnp-hcl.com or oc delete crd dxdeployments.git.cwp.pnp-hcl.com causes a service outage for all the dx-deployment across the cluster. Red Hat OpenShift command: oc create -f deploy/crds/git.cwp.pnp-hcl.com_dxdeployments_crd.yaml Kubernetes command: kubectl create -f deploy/crds/git.cwp.pnp-hcl.com_dxdeployments_crd.yaml Follow these steps to update a deployment. Update the properties file with the new image values and run the update command: For Mac: ./mac/dxctl --update -p properties/myfirst_deployment.properties For Windows: .\\win\\dxctl.exe --update -p properties\\myfirst_deployment.properties For Linux: ./linux/dxctl -\u2013update -p properties/myfirst_deployment.properties With the updated deployment, if you were switching to a next release, you can use the properties file to replace the repository, image, and tag as required and perform the update command. Deleting a deployment There are two ways to delete a deployment. Method 1: Remove the deployment but allow for redeployment with the same volumes. ./linux/dxctl --destroy -p properties/hybrid-deployment.properties Method 2: Remove the entire namespace/project . ./linux/dxctl --destroy -p properties/hybrid-deployment.properties -all true If some resources, like services, are not deleted, run the following command: kubectl patch services $(kubectl get services -n $NAMESPACE | grep -v \"NAME\" |awk '{print $1}') -p '{\"metadata\":{\"finalizers\":null}}' -n $NAMESPACE Main usage Usage information for dxctl , for additional information, use --help with an action. Deploy Run to deploy a DX deployment. dxctl --deploy --help Update Run to update a DX deployment. dxctl --update --help Collect Run to collect support data for a given deployment. dxctl --collect --help Destroy Run to destroy a DX deployment. dxctl --destroy --help dxctl help Sub-commands, required: deploy , update , collect , or destroy . --deploy or --update action string Update an existing DX deployment. Default: update dx.database string The database type Oracle, DB2, etc. Default: derby dx.image string Required, the DX core image. dx.name string Deployment name. Default: dx-deployment dx.namespace string Required, the target namespace/project . dx.operator.image string Required, the HCL cloud operator image. dx.operator.tag string Required, the HCL cloud operator tag. dx.repository string Required, the image HCL cloud operator repository. dx.tag string Required, the DX core tag. filename string File name to write into dx-tests.dx-deployment.txt. This contains the test and deployment logs. By default, the namespace is used as the filename. Example: NAMESPACE.txt ingress.image string Required, the ambassador image. Not used in OpenShift deployments. ingress.tag string Required, the ambassador tag. Not used in OpenShift deployments. p string dxctl can be run from a properties file, -p namespace.properties, no default. verbose Display messages on the command line. Default: false --collect action string Collecting deployment information about an existing deployment. Default: collect dx.name string Deployment name. Default: dx-deployment dx.namespace string Required, the target namespace/project . filename string File name to write into dx-tests.dx-deployment.txt. This contains the test and deployment logs. By default, the namespace is used as the filename. Example: NAMESPACE.txt verbose Display messages on the command line. Default: false --destroy action string Destroy a DX deployment. Default: destroy all Delete the project/namespace and all artifacts. Default: false dx.name string Deployment name. Default: dx-deployment dx.namespace string Required, the target namespace/project . filename string File name to write into dx-tests.dx-deployment.txt. This contains the test and deployment logs. By default, the namespace is used as the filename. Example: NAMESPACE.txt verbose Display messages on the command line. Default: false Parent topic: Operator-based deployment","title":"dxctl"},{"location":"containerization/dxtools_dxctl/#dxctl","text":"Learn how to use dxctl for custom HCL Digital Experience 9.5 container deployments","title":"dxctl"},{"location":"containerization/dxtools_dxctl/#about-this-task","text":"Administrators can use the dxctl tool provided with Container Update CF19 and later releases to define and configure custom DX container deployments. See the following guidance: Video : Using dxctl to Deploy DX Portal on OpenShift General help for the dxctl tool or help related for sub-commands ( create , update , collect , and destroy ) and the command syntax are found with --help . dxctl can be used to deploy DX using a properties file. Sample properties files are included in the dxctl/properties directory. The properties files function as follows: Full deployment config: full-deployment.properties hybrid.enabled: false hybrid.host: onprem_hostname.com hybrid.port: 10042 For Mac: ./mac/dxctl --deploy -p properties/full-deployment.properties For Windows: win\\dxctl.exe -\u2013deploy -p properties/full-deployment.properties For Linux: ./linux/dxctl -\u2013deploy -p properties/full-deployment.properties Hybrid deployment config: hybrid-deployment.properties hybrid.enabled: true hybrid.host: aws-hybrid.sample-dx-deploy.com hybrid.port: 10042 For Mac: ./mac/dxctl --deploy -p properties/hybrid-deployment.properties For Windows: win\\dxctl.exe -\u2013deploy -p properties/hybrid-deployment.properties For Linux: ./linux/dxctl -\u2013deploy -p properties/hybrid-deployment.properties These create a hybrid deployment with Experience API, Content Composer, and Digital Asset Management. You can disable any of these features by making a copy of the hybrid file and setting the value to false to disable it. Example: composer.enabled: false disables Content Composer. Note: Experience API must be enabled to deploy Content Composer and Digital Asset Management.","title":"About this task"},{"location":"containerization/dxtools_dxctl/#prerequisites","text":"The following are the prerequisites for using dxctl . Before running the dxctl tool, you must log in on the targeted cluster using your platform's cloud-specific command-line interface (CLI), such as Azure CLI (az), gcloud CLI, AWS CLI, OpenShift CLI (oc), etc. For example, in Red Hat OpenShift, you must use oc login . dxctl does not deploy the DxDeployment custom resource definition. You must run the ./scripts/deployCrd.sh before using dxctl .","title":"Prerequisites"},{"location":"containerization/dxtools_dxctl/#creating-a-deployment","text":"Follow these steps to create a deployment. You must copy the properties file once a deployment is created. Use the copied file to perform a deployment and maintain and update a deployment. For example: mkdir -p /home/$USER/deployments/ cp dxctl/properties/full-deployment.properties /home/$USER/deployments/myfirst_deployment.properties Change the settings. For example, change dx.namespace: to myfirst-dx-deployment . ./linux/dxctl --deploy -p /home/$USER/deployments/myfirst_deployment.properties Note: For OpenShift deployments, /linux/dxctl --deploy is all you need. For all other Kubernetes environments (EKS, GKE, etc.), you need to generate a TLS certification and private key. See the Generate TLS Certificate topic for more information.","title":"Creating a deployment"},{"location":"containerization/dxtools_dxctl/#updating-a-deployment","text":"Limitation: If you have a DX-only deployment (a deployment that contains only DX without any other features, such as the Experience API, Content Composer, or Digital Asset Management) installed using the deployment script, the dxctl tool cannot be used to update this deployment. You may continue to use the DX deployment script to update this deployment. Note: When working with HCL Digital Experience 9.5 Container Update CF192 and later, the dxctl tool can be used to update the deployment. The dxctl tool does not deploy or update the DxDeployment custom resource definition. Prior to running an update process, administrators should check the DxDeployment custom resource definition ( hcl-dx-cloud-scripts/deploy/crds/git.cwp.pnp-hcl.com_dxdeployments_crd.yaml ) for changes and update accordingly: Red Hat OpenShift command: oc delete crd dxdeployments.git.cwp.pnp-hcl.com Kubernetes command: kubectl delete crd dxdeployments.git.cwp.pnp-hcl.com CAUTION: Since crd is a cluster-wide resource, the use of kubectl delete crd dxdeployments.git.cwp.pnp-hcl.com or oc delete crd dxdeployments.git.cwp.pnp-hcl.com causes a service outage for all the dx-deployment across the cluster. Red Hat OpenShift command: oc create -f deploy/crds/git.cwp.pnp-hcl.com_dxdeployments_crd.yaml Kubernetes command: kubectl create -f deploy/crds/git.cwp.pnp-hcl.com_dxdeployments_crd.yaml Follow these steps to update a deployment. Update the properties file with the new image values and run the update command: For Mac: ./mac/dxctl --update -p properties/myfirst_deployment.properties For Windows: .\\win\\dxctl.exe --update -p properties\\myfirst_deployment.properties For Linux: ./linux/dxctl -\u2013update -p properties/myfirst_deployment.properties With the updated deployment, if you were switching to a next release, you can use the properties file to replace the repository, image, and tag as required and perform the update command.","title":"Updating a deployment"},{"location":"containerization/dxtools_dxctl/#deleting-a-deployment","text":"There are two ways to delete a deployment. Method 1: Remove the deployment but allow for redeployment with the same volumes. ./linux/dxctl --destroy -p properties/hybrid-deployment.properties Method 2: Remove the entire namespace/project . ./linux/dxctl --destroy -p properties/hybrid-deployment.properties -all true If some resources, like services, are not deleted, run the following command: kubectl patch services $(kubectl get services -n $NAMESPACE | grep -v \"NAME\" |awk '{print $1}') -p '{\"metadata\":{\"finalizers\":null}}' -n $NAMESPACE","title":"Deleting a deployment"},{"location":"containerization/dxtools_dxctl/#main-usage","text":"Usage information for dxctl , for additional information, use --help with an action. Deploy Run to deploy a DX deployment. dxctl --deploy --help Update Run to update a DX deployment. dxctl --update --help Collect Run to collect support data for a given deployment. dxctl --collect --help Destroy Run to destroy a DX deployment. dxctl --destroy --help","title":"Main usage"},{"location":"containerization/dxtools_dxctl/#dxctl-help","text":"Sub-commands, required: deploy , update , collect , or destroy . --deploy or --update action string Update an existing DX deployment. Default: update dx.database string The database type Oracle, DB2, etc. Default: derby dx.image string Required, the DX core image. dx.name string Deployment name. Default: dx-deployment dx.namespace string Required, the target namespace/project . dx.operator.image string Required, the HCL cloud operator image. dx.operator.tag string Required, the HCL cloud operator tag. dx.repository string Required, the image HCL cloud operator repository. dx.tag string Required, the DX core tag. filename string File name to write into dx-tests.dx-deployment.txt. This contains the test and deployment logs. By default, the namespace is used as the filename. Example: NAMESPACE.txt ingress.image string Required, the ambassador image. Not used in OpenShift deployments. ingress.tag string Required, the ambassador tag. Not used in OpenShift deployments. p string dxctl can be run from a properties file, -p namespace.properties, no default. verbose Display messages on the command line. Default: false --collect action string Collecting deployment information about an existing deployment. Default: collect dx.name string Deployment name. Default: dx-deployment dx.namespace string Required, the target namespace/project . filename string File name to write into dx-tests.dx-deployment.txt. This contains the test and deployment logs. By default, the namespace is used as the filename. Example: NAMESPACE.txt verbose Display messages on the command line. Default: false --destroy action string Destroy a DX deployment. Default: destroy all Delete the project/namespace and all artifacts. Default: false dx.name string Deployment name. Default: dx-deployment dx.namespace string Required, the target namespace/project . filename string File name to write into dx-tests.dx-deployment.txt. This contains the test and deployment logs. By default, the namespace is used as the filename. Example: NAMESPACE.txt verbose Display messages on the command line. Default: false Parent topic: Operator-based deployment","title":"dxctl help"},{"location":"containerization/dynacache_replication/","text":"Replicating the DynaCache service This section describes how to replicate Dynacache service in HCL Digital Experience by customizing timeout properties in the WAS Resource Environment Provider (REP). Previous versions up to HCL Digital Experience 8.5 and 9.0 uses Dynamic Cache (DynaCache), a cluster-aware cache service that allows all HCL Portal cluster members to know any name/value pair changes made by any member. Having a cluster-aware cache does not make sense for HCL Digital Experience 9.5 onwards, as the versions are on a Portal farming or containerization setup. To work around this issue, an administrator can customize the timeout properties in the WAS Resource Environment to replicate the DynaCache service. *Tuning the servers to replicate DynaCache service in your container environment * Note: You need to be on HCL Digital Experience 9.5 CF172 container release to perform this task. Configure the following timeout parameters in the WAS Resource Provider (REP): db.cache.invalidation.read.freq = (timeout in milliseconds) Time between \u201creads\u201d of the database table containing invalidation messages. By default, timeout is 1 minute (60000 milliseconds) . Practically, this means this is the longest delay before any dynacache invalidation is \u201cknown\u201d on each member (e.g. Kubernetes, POD, farm worker). db.cache.invalidation.cleanup.freq = (timeout in milliseconds) Age before an entry in the database table containing invalidation messages is deleted. By default, timeout is 10 minutes (600000 milliseconds) . Generally, the number should be much larger than the \u201cred\u201d frequency to ensure that invalidation messages are read before they are deleted. To replicate DynaCache service in an HCL Portal farm deployment, see Tuning the servers in your environment in Roadmap: Portal farm . Parent topic: Customizing your container deployment","title":"Replicating the DynaCache service"},{"location":"containerization/dynacache_replication/#replicating-the-dynacache-service","text":"This section describes how to replicate Dynacache service in HCL Digital Experience by customizing timeout properties in the WAS Resource Environment Provider (REP). Previous versions up to HCL Digital Experience 8.5 and 9.0 uses Dynamic Cache (DynaCache), a cluster-aware cache service that allows all HCL Portal cluster members to know any name/value pair changes made by any member. Having a cluster-aware cache does not make sense for HCL Digital Experience 9.5 onwards, as the versions are on a Portal farming or containerization setup. To work around this issue, an administrator can customize the timeout properties in the WAS Resource Environment to replicate the DynaCache service. *Tuning the servers to replicate DynaCache service in your container environment * Note: You need to be on HCL Digital Experience 9.5 CF172 container release to perform this task. Configure the following timeout parameters in the WAS Resource Provider (REP): db.cache.invalidation.read.freq = (timeout in milliseconds) Time between \u201creads\u201d of the database table containing invalidation messages. By default, timeout is 1 minute (60000 milliseconds) . Practically, this means this is the longest delay before any dynacache invalidation is \u201cknown\u201d on each member (e.g. Kubernetes, POD, farm worker). db.cache.invalidation.cleanup.freq = (timeout in milliseconds) Age before an entry in the database table containing invalidation messages is deleted. By default, timeout is 10 minutes (600000 milliseconds) . Generally, the number should be much larger than the \u201cred\u201d frequency to ensure that invalidation messages are read before they are deleted. To replicate DynaCache service in an HCL Portal farm deployment, see Tuning the servers in your environment in Roadmap: Portal farm . Parent topic: Customizing your container deployment","title":"Replicating the DynaCache service"},{"location":"containerization/finding_kubernetes_eks_deployment/","text":"Finding the Kubernetes EKS deployment This section describes how to find your HCL DX deployment. Follow this procedure to find your HCL DX deployment. As an administrator, you can easily display a list of the DxDeployment instances in your environment. Access the Kubernetes console and navigate to Custom Resource Definitions and scroll to DxDeployments . Click on the DxDeployment Custom Resource Definition, and select All namespaces. You will then see a list of the instances of DxDeployment. Parent topic: Deploy DX Container to Amazon EKS","title":"Finding the Kubernetes EKS deployment"},{"location":"containerization/finding_kubernetes_eks_deployment/#finding-the-kubernetes-eks-deployment","text":"This section describes how to find your HCL DX deployment. Follow this procedure to find your HCL DX deployment. As an administrator, you can easily display a list of the DxDeployment instances in your environment. Access the Kubernetes console and navigate to Custom Resource Definitions and scroll to DxDeployments . Click on the DxDeployment Custom Resource Definition, and select All namespaces. You will then see a list of the instances of DxDeployment. Parent topic: Deploy DX Container to Amazon EKS","title":"Finding the Kubernetes EKS deployment"},{"location":"containerization/finding_openshift_deployment/","text":"Finding the OpenShift deployment This section describes how to find your HCL Portal deployment. Follow this procedure to find your HCL Portal deployment. As an administrator, you can easily display a list of the DxDeployment instances in your environment. Access the OpenShift console and navigate to Administrator > Custom Resource Definitions and scroll to DxDeployments . Click on the DxDeployment Custom Resource Definition. In the upper right of the previous screen, in the Actions drop down, select view images . You will then see a list of the instances of DxDeployment. Parent topic: Deploy DX 9.5 Container to Red Hat OpenShift","title":"Finding the OpenShift deployment"},{"location":"containerization/finding_openshift_deployment/#finding-the-openshift-deployment","text":"This section describes how to find your HCL Portal deployment. Follow this procedure to find your HCL Portal deployment. As an administrator, you can easily display a list of the DxDeployment instances in your environment. Access the OpenShift console and navigate to Administrator > Custom Resource Definitions and scroll to DxDeployments . Click on the DxDeployment Custom Resource Definition. In the upper right of the previous screen, in the Actions drop down, select view images . You will then see a list of the instances of DxDeployment. Parent topic: Deploy DX 9.5 Container to Red Hat OpenShift","title":"Finding the OpenShift deployment"},{"location":"containerization/google_gke/","text":"Deploying HCL Digital Experience Containers to Google Kubernetes Engine (GKE) Learn how to deploy different releases of HCL Digital Experience (DX) containers, along with the Ambassador, to Kubernetes as verified in Google Kubernetes Engine (GKE) . Note: Refer to the latest HCL DX 9.5 Container Update Release CF192 and later file listings in the Docker deployment topic. Deploying DX CF192 and later release Containers to Google Kubernetes Engine (GKE) Learn how to deploy HCL Digital Experience (DX) 9.5 CF192 and later release containers along with Ambassador to Kubernetes, as verified in Google Kubernetes Engine (GKE) . Deploying DX CF19 and CF191 release Containers to Google Kubernetes Engine (GKE) Learn how to deploy HCL Digital Experience (DX) 9.5 CF19 and CF191 release containers along with Ambassador to Kubernetes, as verified in Google Kubernetes Engine (GKE) . Parent topic: HCL Digital Experience 9.5 Container Deployment","title":"Deploying HCL Digital Experience Containers to Google Kubernetes Engine \\(GKE\\)"},{"location":"containerization/google_gke/#deploying-hcl-digital-experience-containers-to-google-kubernetes-engine-gke","text":"Learn how to deploy different releases of HCL Digital Experience (DX) containers, along with the Ambassador, to Kubernetes as verified in Google Kubernetes Engine (GKE) . Note: Refer to the latest HCL DX 9.5 Container Update Release CF192 and later file listings in the Docker deployment topic. Deploying DX CF192 and later release Containers to Google Kubernetes Engine (GKE) Learn how to deploy HCL Digital Experience (DX) 9.5 CF192 and later release containers along with Ambassador to Kubernetes, as verified in Google Kubernetes Engine (GKE) . Deploying DX CF19 and CF191 release Containers to Google Kubernetes Engine (GKE) Learn how to deploy HCL Digital Experience (DX) 9.5 CF19 and CF191 release containers along with Ambassador to Kubernetes, as verified in Google Kubernetes Engine (GKE) . Parent topic: HCL Digital Experience 9.5 Container Deployment","title":"Deploying HCL Digital Experience Containers to Google Kubernetes Engine (GKE)"},{"location":"containerization/google_gke_CF191andearlier/","text":"Deploying DX CF19 and CF191 release Containers to Google Kubernetes Engine (GKE) Learn how to deploy HCL Digital Experience (DX) 9.5 CF19 and CF191 release containers along with Ambassador to Kubernetes, as verified in Google Kubernetes Engine (GKE) . Note: Refer to the latest HCL DX 9.5 Container Release CF19 and CF191 and Update file listings in the Docker deployment topic. About this task Follow these steps to deploy HCL Digital Experience 9.5 CF19 and higher container release along with Ambassador to Kubernetes, as verified in Google Kubernetes Engine (GKE) . This deployment relies heavily on Kubernetes Operators for full functionality. Note: Reference the latest HCL DX 9.5 Container Release and Update file listings in the Docker deployment topic. Prerequisites Prior to using the procedure below, it is assumed that the HCL DX Administrator is generally experienced in using Kubernetes. Additionally, the DX Administrator must have the appropriate access to the target environment. If not, following are some preliminary steps that need to be taken. The following installed on your system: Docker kubectl Google Cloud SDK Setup KUBECONFIG to refer to the target server. This will ensure any kubectl commands executed locally affect the target environment. Use kubectl get {pods, pv, storageclass} to get appropriate information from the artifacts running in the target Kubernetes environment. Volume requirement: Requires an AccessMode of ReadWriteMany Requires a minimum of 40 GB , with the default request set to 100 GB RECLAIM POLICY = Retain Note: HCL Digital Experience is input-output (I/O) intensive and requires a high performing file system for optimization. Download containers Download files to your local Download and extract the contents of the HCL DX 9.5 CF19 package to the local file system. Change directory Open a terminal window and change to the root directory of the extracted package. Docker load Load the containers into your Docker repository: ``` docker load < hcl-dx-core-image-v95_xxxxxxxx-xxxx.tar.gz - ``` docker load < hcl-dx-ambassador-image-v95_xxxxxxxx-xxxx.tar.gz - ``` docker load -i hcl-dx-cloud-operator-image-v95_xxxxxxxx-xxxx.tar.gz - ``` docker load -i hcl-dx-redis-image-xxx.tar.gz **Note:** Either **`-i`** or **`<`** works for the load command. In case you encounter an error when using one, try running the command using the other. ![](../images/container_gke_loading_containers.png \"Loading containers into your Docker repository\") Docker tag and push Get the Docker images in your local Docker repository to your target Kubernetes system by tagging and pushing them appropriately. If you used docker load to get your images on the target environment, proceed to the next step. Syntax for tagging: docker tag <local image:tag or image id> <destination image:tag> Syntax for pushing: docker push <image:tag> Deployment Unzip and extract Extract the HCL DX deployment scripts onto your environment as follows: unzip hcl-dx-cloud-scripts-v95_CFxxx_xxxxxxxx-xxxx.zip Change directory Change to the extracted files directory, ./hcl-dx-cloud-scripts. [root]$ cd ./ hcl-dx-cloud-scripts Modify deploy/operator.yaml Modify deploy/operator.yaml and update the configuration based on your repository image and tag. Note: For deployment of DX 9.5 CF183 and higher, ensure the operator.yaml is updated with names and tags used in your private repository: cloud operator image name, cloud operator tag, Redis repo, Redis image name, and Redis tag. # Replace this with the built image name image:`REPOSITORY_NAME`/`cloud-operator:95_184` ... `` name: REDIS_DOCKER_REPO value: \"myrepo.dx.com\"` - ``` name: `REDIS_IMAGE` value: `\"ambassador-redis\"` - ``` name: REDIS_TAG value: \"95_184\" 4. Custom resource definition Install the DxDeployment custom resource definition. **Notes:** - Do not modify the git\\_v1\\_dxdeployment\\_crd.yaml file. - Customize the ./deploy/crds/git\\_v1\\_dxdeployment\\_cr.yaml file, if required. Use either of the following commands: - ``` kubectl create -f hcl-dx-cloud-scripts/deploy/crds/git_v1_dxdeployment_crd.yaml - ``` ./scripts/deployCrd.sh ``` Persistence volume Create (or have the Kubernetes Administrator create) a persistent volume and storage class where the AccessMode must be ReadWriteMany and the persistent volume reclaim policy must be Retain . Deploy Execute the deployDx.sh script to create the namespace, install the project scoped service account, role, role binding, operator, and deployment, run the deployDx.sh script. ./scripts/deployDx.sh NAMESPACE REPLICAS REPOSITORY IMAGENAME IMAGETAG VOLUMENAME STORAGECLASS DBTYPE INGRESSIMAGE INGRESSTAG NAMESPACE - the project or the namespace to create or use for deployment. This namespace will be used in subsequent commands. REPLICAS - the number of initial instances for the deployment. REPOSITORY - your local repository, the repository used by Kubernetes. IMAGENAME - the name of the dxCore image, as added to the repository above. IMAGETAG - the tag for the target image as added to the repository above. VOLUMENAME - the volume to be used by the deployment for persistence, this must use AccessMode ReadWriteMany . STORAGECLASS - the storage class name used to create the persistent volume. DBTYPE - the database type. By default, and initially, this is Derby. HCL DX 9.5 uses Apache Derby, Oracle Database, IBM DB2, or Microsoft SQL Server. Acceptable values are derby , oracle , db2 , or msSql . INGRESSIMAGE - The image name to use for ambassador (Native K8s). INGRESSTAG - The image tag to use for ambassador (Native K8s) For example: $ ./scripts/customer/deployDx.sh dx11 1 us.gcr.io/dx-gcp-l2com/dxcontainer dxen v95_CF183_20200819 dx-pv11 standard derby ambassador 154 Generate a TLS Certificate Create a TLS certification to be used by the deployment: For development purposes: Using OpenSSL, you can create a private key: 'openssl genrsa -out my-key.pem 2048' Using OpenSSL, you can create a certificate signed by the private key: 'openssl req -x509 -key my-key.pem -out my-cert.pem -days 365 -subj '/CN=my-cert' Create a TLS certification: $ kubectl create secret tls dx-tls-cert --cert=my-cert.pem --key=my-key.pem -n dx11 Note: The default name is the dx-tls-cert this can be changed in the configuration. In the example, dx11 is the Kubernetes namespace. You can set your preferred namespace, but you must consistently use this namespace in subsequent commands. See the Customizing your Container deployment topic for more information on customizing your deployment. Check the deployment status Check the status of the deployment. The following command can be used from the external IP from the Google GKE load balancer to access the deployment. $ kubectl get all -n <your name space> The deployed system will be available at https://external-ip/wps/portal . For example, https://40.76.169.27/wps/portal/ Install the Experience API, Content Composer, and Digital Asset Management components to GKE Create a config map with the same name as the dx statefulset . By default, the dx statefulset is dx-deployment , as shown in this example: kubectl create configmap dx-deployment -n dx11 Edit the configmap, add the following data, and update the values based on your image tags: ``` data: dx.deploy.openldap.enabled: 'true' dx.deploy.openldap.tag: dx-183 dx.deploy.openldap.image: dx-openldap dx.deploy.experienceapi.enabled: 'true' dx.deploy.experienceapi.tag: dx-183 dx.deploy.experienceapi.image: ring-api dx.deploy.contentui.enabled: 'true' dx.deploy.contentui.tag: dx-183 dx.deploy.contentui.image: content-ui dx.deploy.dam.enabled: 'true' dx.deploy.dam.volume: releaseml dx.deploy.dam.storageclass: dx-deploy-stg dx.deploy.dam.persistence.tag: dx-183 dx.deploy.dam.persistence.image: persist dx.deploy.dam.imgprocessor.tag: dx-183 dx.deploy.dam.imgprocessor.image: image-processor dx.deploy.dam.tag: dx-183 dx.deploy.dam.image: dam dx.deploy.dam.operator.tag: dx-183 dx.deploy.dam.operator.image: hcl-dam-operator dx.deploy.host.override: \u201cfalse\u201d ``` Note: The Digital Asset Manager container requires one volume (specified in the configmap under dx.deploy.dam.volume ). The Digital Asset Manager persistence containers require one self-provisioned volume per pod which by default are set to minimum of 2 minimum and a maximum of 5 pods. You can also create the config map in a YAML file and deploy it with the following instructions (example): kubectl create -f my_config_map.yaml -n dx11 . After creating the config map, deployment will go into \u2018 init\u2019 mode, and restart a couple of times after the new options are configured. You can check the status via the command line using the command (example): kubectl get pods -n dx11 See the following section for additional information: Install Experience API, Content Composer, and Digital Asset Management Update the HCL Digital Experience 9.5 GKE deployment To update the deployment, run the updateDx.sh script with updated values: ./scripts/updateDx.sh NAMESPACE REPLICAS REPOSITORY IMAGENAME IMAGETAG VOLUMENAME STORAGECLASS DBTYPE INGRESSIMAGE INGRESSTAG NAMESPACE - the project or the namespace to create or use for deployment. REPLICAS - the number of initial instances for the deployment. REPOSITORY - your local repository, the repository used by Kubernetes. IMAGENAME - the name of the dxCore image, as added to the repository above. IMAGETAG - the tag for the target image as added to the repository above. VOLUMENAME - the volume to be used by the deployment for persistence, this must use AccessMode ReadWriteMany . STORAGECLASS - the storage class name used to create the persistent volume. DBTYPE - the database type. By default, and initially, this is Derby. HCL DX 9.5 uses Apache Derby, Oracle Database, IBM DB2, or Microsoft SQL Server. Acceptable values are derby , oracle , db2 , or msSql . INGRESSIMAGE - The image name to use for Ambassador (Native K8s). INGRESSTAG - The image tag to use for Ambassador (Native K8s). For example: $ ./scripts/updateDx.sh test-mynamespace 1 REPO_NAME dxen v95_CF183_20200818-1342 dx-pv-11 dx-deploy-stg derby ambassador 154 Once the database is transferred, the DBTYPE will need to be updated so you can scale the instances higher. Additionally, once the database is transferred, the number of replicas could be increased. See Customizing your Container deployment for more information on customizing your deployment. Delete the HCL Digital Experience 9.5 GKE deployment Removing the entire deployment requires several steps, this is by design. To remove the deployment in a specific namespace, run the removeDx.sh script: ./scripts/removeDx.sh NAMESPACE NAMESPACE - the project or the namespace created or used for deployment. To remove a namespace, use any of the following commands: Kubernetes command: 'kubectl delete -f dxNameSpace_**NAMESPACE**.yaml' where NAMESPACE is the namespace to be removed The persistent volume associated to the deployment needs to be cleaned up by your Administrator. To reuse a persistent volume, see the following steps: Open the persistent volume in a visual editor (vi) using the Kubernetes command: kubectl edit pv your_volume Remove the claimRef section: claimRef: apiVersion: v1 kind: PersistentVolumeClaim name: dx-deploy-pvc namespace: your_namespace resourceVersion: \"488931120\" uid: ebd58361-0e2a-11ea-b02e-02f8fe687954 Ensure you get the 'persistentvolume/your_volume edited' message. You may need to manually remove any data remaining from the previous deployment. Parent topic: Deploying HCL Digital Experience Containers to Google Kubernetes Engine (GKE)","title":"Deploying DX CF19 and CF191 release Containers to Google Kubernetes Engine \\(GKE\\)"},{"location":"containerization/google_gke_CF191andearlier/#deploying-dx-cf19-and-cf191-release-containers-to-google-kubernetes-engine-gke","text":"Learn how to deploy HCL Digital Experience (DX) 9.5 CF19 and CF191 release containers along with Ambassador to Kubernetes, as verified in Google Kubernetes Engine (GKE) . Note: Refer to the latest HCL DX 9.5 Container Release CF19 and CF191 and Update file listings in the Docker deployment topic.","title":"Deploying DX CF19 and CF191 release Containers to Google Kubernetes Engine (GKE)"},{"location":"containerization/google_gke_CF191andearlier/#about-this-task","text":"Follow these steps to deploy HCL Digital Experience 9.5 CF19 and higher container release along with Ambassador to Kubernetes, as verified in Google Kubernetes Engine (GKE) . This deployment relies heavily on Kubernetes Operators for full functionality. Note: Reference the latest HCL DX 9.5 Container Release and Update file listings in the Docker deployment topic.","title":"About this task"},{"location":"containerization/google_gke_CF191andearlier/#prerequisites","text":"Prior to using the procedure below, it is assumed that the HCL DX Administrator is generally experienced in using Kubernetes. Additionally, the DX Administrator must have the appropriate access to the target environment. If not, following are some preliminary steps that need to be taken. The following installed on your system: Docker kubectl Google Cloud SDK Setup KUBECONFIG to refer to the target server. This will ensure any kubectl commands executed locally affect the target environment. Use kubectl get {pods, pv, storageclass} to get appropriate information from the artifacts running in the target Kubernetes environment. Volume requirement: Requires an AccessMode of ReadWriteMany Requires a minimum of 40 GB , with the default request set to 100 GB RECLAIM POLICY = Retain Note: HCL Digital Experience is input-output (I/O) intensive and requires a high performing file system for optimization.","title":"Prerequisites"},{"location":"containerization/google_gke_CF191andearlier/#download-containers","text":"Download files to your local Download and extract the contents of the HCL DX 9.5 CF19 package to the local file system. Change directory Open a terminal window and change to the root directory of the extracted package. Docker load Load the containers into your Docker repository: ``` docker load < hcl-dx-core-image-v95_xxxxxxxx-xxxx.tar.gz - ``` docker load < hcl-dx-ambassador-image-v95_xxxxxxxx-xxxx.tar.gz - ``` docker load -i hcl-dx-cloud-operator-image-v95_xxxxxxxx-xxxx.tar.gz - ``` docker load -i hcl-dx-redis-image-xxx.tar.gz **Note:** Either **`-i`** or **`<`** works for the load command. In case you encounter an error when using one, try running the command using the other. ![](../images/container_gke_loading_containers.png \"Loading containers into your Docker repository\") Docker tag and push Get the Docker images in your local Docker repository to your target Kubernetes system by tagging and pushing them appropriately. If you used docker load to get your images on the target environment, proceed to the next step. Syntax for tagging: docker tag <local image:tag or image id> <destination image:tag> Syntax for pushing: docker push <image:tag>","title":"Download containers"},{"location":"containerization/google_gke_CF191andearlier/#deployment","text":"Unzip and extract Extract the HCL DX deployment scripts onto your environment as follows: unzip hcl-dx-cloud-scripts-v95_CFxxx_xxxxxxxx-xxxx.zip Change directory Change to the extracted files directory, ./hcl-dx-cloud-scripts. [root]$ cd ./ hcl-dx-cloud-scripts Modify deploy/operator.yaml Modify deploy/operator.yaml and update the configuration based on your repository image and tag. Note: For deployment of DX 9.5 CF183 and higher, ensure the operator.yaml is updated with names and tags used in your private repository: cloud operator image name, cloud operator tag, Redis repo, Redis image name, and Redis tag. # Replace this with the built image name image:`REPOSITORY_NAME`/`cloud-operator:95_184` ... `` name: REDIS_DOCKER_REPO value: \"myrepo.dx.com\"` - ``` name: `REDIS_IMAGE` value: `\"ambassador-redis\"` - ``` name: REDIS_TAG value: \"95_184\" 4. Custom resource definition Install the DxDeployment custom resource definition. **Notes:** - Do not modify the git\\_v1\\_dxdeployment\\_crd.yaml file. - Customize the ./deploy/crds/git\\_v1\\_dxdeployment\\_cr.yaml file, if required. Use either of the following commands: - ``` kubectl create -f hcl-dx-cloud-scripts/deploy/crds/git_v1_dxdeployment_crd.yaml - ``` ./scripts/deployCrd.sh ``` Persistence volume Create (or have the Kubernetes Administrator create) a persistent volume and storage class where the AccessMode must be ReadWriteMany and the persistent volume reclaim policy must be Retain . Deploy Execute the deployDx.sh script to create the namespace, install the project scoped service account, role, role binding, operator, and deployment, run the deployDx.sh script. ./scripts/deployDx.sh NAMESPACE REPLICAS REPOSITORY IMAGENAME IMAGETAG VOLUMENAME STORAGECLASS DBTYPE INGRESSIMAGE INGRESSTAG NAMESPACE - the project or the namespace to create or use for deployment. This namespace will be used in subsequent commands. REPLICAS - the number of initial instances for the deployment. REPOSITORY - your local repository, the repository used by Kubernetes. IMAGENAME - the name of the dxCore image, as added to the repository above. IMAGETAG - the tag for the target image as added to the repository above. VOLUMENAME - the volume to be used by the deployment for persistence, this must use AccessMode ReadWriteMany . STORAGECLASS - the storage class name used to create the persistent volume. DBTYPE - the database type. By default, and initially, this is Derby. HCL DX 9.5 uses Apache Derby, Oracle Database, IBM DB2, or Microsoft SQL Server. Acceptable values are derby , oracle , db2 , or msSql . INGRESSIMAGE - The image name to use for ambassador (Native K8s). INGRESSTAG - The image tag to use for ambassador (Native K8s) For example: $ ./scripts/customer/deployDx.sh dx11 1 us.gcr.io/dx-gcp-l2com/dxcontainer dxen v95_CF183_20200819 dx-pv11 standard derby ambassador 154","title":"Deployment"},{"location":"containerization/google_gke_CF191andearlier/#generate-a-tls-certificate","text":"Create a TLS certification to be used by the deployment: For development purposes: Using OpenSSL, you can create a private key: 'openssl genrsa -out my-key.pem 2048' Using OpenSSL, you can create a certificate signed by the private key: 'openssl req -x509 -key my-key.pem -out my-cert.pem -days 365 -subj '/CN=my-cert' Create a TLS certification: $ kubectl create secret tls dx-tls-cert --cert=my-cert.pem --key=my-key.pem -n dx11 Note: The default name is the dx-tls-cert this can be changed in the configuration. In the example, dx11 is the Kubernetes namespace. You can set your preferred namespace, but you must consistently use this namespace in subsequent commands. See the Customizing your Container deployment topic for more information on customizing your deployment.","title":"Generate a TLS Certificate"},{"location":"containerization/google_gke_CF191andearlier/#check-the-deployment-status","text":"Check the status of the deployment. The following command can be used from the external IP from the Google GKE load balancer to access the deployment. $ kubectl get all -n <your name space> The deployed system will be available at https://external-ip/wps/portal . For example, https://40.76.169.27/wps/portal/","title":"Check the deployment status"},{"location":"containerization/google_gke_CF191andearlier/#install-the-experience-api-content-composer-and-digital-asset-management-components-to-gke","text":"Create a config map with the same name as the dx statefulset . By default, the dx statefulset is dx-deployment , as shown in this example: kubectl create configmap dx-deployment -n dx11 Edit the configmap, add the following data, and update the values based on your image tags: ``` data: dx.deploy.openldap.enabled: 'true' dx.deploy.openldap.tag: dx-183 dx.deploy.openldap.image: dx-openldap dx.deploy.experienceapi.enabled: 'true' dx.deploy.experienceapi.tag: dx-183 dx.deploy.experienceapi.image: ring-api dx.deploy.contentui.enabled: 'true' dx.deploy.contentui.tag: dx-183 dx.deploy.contentui.image: content-ui dx.deploy.dam.enabled: 'true' dx.deploy.dam.volume: releaseml dx.deploy.dam.storageclass: dx-deploy-stg dx.deploy.dam.persistence.tag: dx-183 dx.deploy.dam.persistence.image: persist dx.deploy.dam.imgprocessor.tag: dx-183 dx.deploy.dam.imgprocessor.image: image-processor dx.deploy.dam.tag: dx-183 dx.deploy.dam.image: dam dx.deploy.dam.operator.tag: dx-183 dx.deploy.dam.operator.image: hcl-dam-operator dx.deploy.host.override: \u201cfalse\u201d ``` Note: The Digital Asset Manager container requires one volume (specified in the configmap under dx.deploy.dam.volume ). The Digital Asset Manager persistence containers require one self-provisioned volume per pod which by default are set to minimum of 2 minimum and a maximum of 5 pods. You can also create the config map in a YAML file and deploy it with the following instructions (example): kubectl create -f my_config_map.yaml -n dx11 . After creating the config map, deployment will go into \u2018 init\u2019 mode, and restart a couple of times after the new options are configured. You can check the status via the command line using the command (example): kubectl get pods -n dx11 See the following section for additional information: Install Experience API, Content Composer, and Digital Asset Management","title":"Install the Experience API, Content Composer, and Digital Asset Management components to GKE"},{"location":"containerization/google_gke_CF191andearlier/#update-the-hcl-digital-experience-95-gke-deployment","text":"To update the deployment, run the updateDx.sh script with updated values: ./scripts/updateDx.sh NAMESPACE REPLICAS REPOSITORY IMAGENAME IMAGETAG VOLUMENAME STORAGECLASS DBTYPE INGRESSIMAGE INGRESSTAG NAMESPACE - the project or the namespace to create or use for deployment. REPLICAS - the number of initial instances for the deployment. REPOSITORY - your local repository, the repository used by Kubernetes. IMAGENAME - the name of the dxCore image, as added to the repository above. IMAGETAG - the tag for the target image as added to the repository above. VOLUMENAME - the volume to be used by the deployment for persistence, this must use AccessMode ReadWriteMany . STORAGECLASS - the storage class name used to create the persistent volume. DBTYPE - the database type. By default, and initially, this is Derby. HCL DX 9.5 uses Apache Derby, Oracle Database, IBM DB2, or Microsoft SQL Server. Acceptable values are derby , oracle , db2 , or msSql . INGRESSIMAGE - The image name to use for Ambassador (Native K8s). INGRESSTAG - The image tag to use for Ambassador (Native K8s). For example: $ ./scripts/updateDx.sh test-mynamespace 1 REPO_NAME dxen v95_CF183_20200818-1342 dx-pv-11 dx-deploy-stg derby ambassador 154 Once the database is transferred, the DBTYPE will need to be updated so you can scale the instances higher. Additionally, once the database is transferred, the number of replicas could be increased. See Customizing your Container deployment for more information on customizing your deployment.","title":"Update the HCL Digital Experience 9.5 GKE deployment"},{"location":"containerization/google_gke_CF191andearlier/#delete-the-hcl-digital-experience-95-gke-deployment","text":"Removing the entire deployment requires several steps, this is by design. To remove the deployment in a specific namespace, run the removeDx.sh script: ./scripts/removeDx.sh NAMESPACE NAMESPACE - the project or the namespace created or used for deployment. To remove a namespace, use any of the following commands: Kubernetes command: 'kubectl delete -f dxNameSpace_**NAMESPACE**.yaml' where NAMESPACE is the namespace to be removed The persistent volume associated to the deployment needs to be cleaned up by your Administrator. To reuse a persistent volume, see the following steps: Open the persistent volume in a visual editor (vi) using the Kubernetes command: kubectl edit pv your_volume Remove the claimRef section: claimRef: apiVersion: v1 kind: PersistentVolumeClaim name: dx-deploy-pvc namespace: your_namespace resourceVersion: \"488931120\" uid: ebd58361-0e2a-11ea-b02e-02f8fe687954 Ensure you get the 'persistentvolume/your_volume edited' message. You may need to manually remove any data remaining from the previous deployment. Parent topic: Deploying HCL Digital Experience Containers to Google Kubernetes Engine (GKE)","title":"Delete the HCL Digital Experience 9.5 GKE deployment"},{"location":"containerization/google_gke_cf192andlater/","text":"Deploying DX CF192 and later release Containers to Google Kubernetes Engine (GKE) Learn how to deploy HCL Digital Experience (DX) 9.5 CF192 and later release containers along with Ambassador to Kubernetes, as verified in Google Kubernetes Engine (GKE) . About this task Follow these steps to deploy HCL Digital Experience 9.5 Container Update CF192 and later release along with Ambassador to Kubernetes, as verified in Google Kubernetes Engine (GKE) . This deployment relies heavily on Kubernetes Operators for full functionality. Note: Refer to the latest HCL DX 9.5 Container Update Release CF192 and later file listings in the Docker deployment topic. Prerequisites Prior to using the procedure below, it is assumed that the HCL DX Administrator is generally experienced in using Kubernetes. Additionally, the DX Administrator must have the appropriate access to the target environment. If not, following are some preliminary steps that need to be taken. Setup KUBECONFIG to refer to the target server. This ensures any kubectl commands executed locally affect the target environment. Use kubectl get {pods, pv, storageclass} to get appropriate information from the artifacts running in the target Kubernetes environment. Google Kubernetes Engine (GKE) Cluster Google Container Registry (Or any other registry configured to use with GKE) The following tools must be installed on your system: Docker kubectl Google Cloud SDK Volume requirement: Requires an AccessMode of ReadWriteMany Requires a minimum of 40 GB , with the default request set to 100 GB RECLAIM POLICY = Retain For Digital Asset Management, additional volume is required. Notes: HCL Digital Experience is input-output (I/O) intensive and requires a high performing file system for optimization. There are various ways to do this and NFS is one option. For more details, see NFS Server . For more information, see the Detailed System Requirements page. Download HCL Digital Experience 9.5 CF192 or later containers Download container Download HCL DX 9.5 CF192 or later package and extract it to the Local file system. Note: Here local can be a local system, or any other system that the administrator uses to connect to the Kubernetes cluster. Change directory Open a terminal window and change to the root directory of the extracted package. Docker load Load the containers into your Docker repository: ``` docker load < hcl-dx-core-image-v95_xxxxxxxx-xxxx.tar.gz - ``` docker load < hcl-dx-ambassador-image-xxx.tar.gz - ``` docker load -i hcl-dx-cloud-operator-image-v95_xxxxxxxx-xxxx.tar.gz - ``` docker load -i hcl-dx-image-processor-image-v95_xxxxxxxx-xxxx.tar.gz - ``` docker load -i hcl-dx-digital-asset-management-operator-image-v95_xxxxxxxx-xxxx.tar.gz - ``` docker load -i hcl-dx-postgres-image-v95_xxxxxxxx-xxxx.tar.gz - ``` docker load -i hcl-dx-ringapi-image-v95_xxxxxxxx-xxxx.tar.gz - ``` docker load -i hcl-dx-redis-image-xxx.tar.gz **Note:** Either **`-i`** or **`<`** works for the load command. In case you encounter an error when using one of the options, try running the command using the other. Docker tag and push Get the Docker images in your local Docker repository to your target Kubernetes system by tagging and pushing them appropriately. If you used docker load to get your images on the target environment, proceed to the next step. Syntax for tagging: docker tag <local image:tag or image id> <destination image:tag> Syntax for pushing: docker push <image:tag> Deployment Persistence volume Create (or have the Kubernetes Administrator create) a persistent volume and storage class where the AccessMode must be ReadWriteMany and the persistent volume reclaim policy must be Retain . NFS Server Provide the HCL DX 9.5 CF192 and later Docker image access to the volume mount created in order to copy the profile. There are various ways to do this and NFS is one option. If NFS is used, here are the parameters that have been tested to work: rw (Default) sync (Default after NFS 1.0, means that the server does not reply until after the commit) insecure ** (Requires requests originate on ports less than 1024) root_squash ** (Map requests to the nobody user). hard ** (Required because this means the system will keep trying to write until it works.) nfsvers=4.1 rsize=8388608 (Avoids dropped packages, default 8192) wsize=8388608 (Avoids dropped packages, default 8192) timeo=600 (60 seconds) retrans=2 (Number of retries after a time out) noresvport ** (Tells the NFS client to use a new Transmission Control Protocol (TCP) source port when a network connection is reestablished. This helps to ensure that the EFS file system has uninterrupted availability after a network recovery event. Note: Those marked with ** are critical and, in many cases, it is recommended to have the rsize and wsize set to 8388608. Log in to cluster Before using the dxctl tool to deploy, you must be logged in to the targeted cluster using the cloud platform specific CLI (like Red Hat OpenShift, Amazon EKS, Microsoft Azure AKS, Google GKE). Command-line syntax: gcloud container clusters get-credentials cluster_name --region region_name --project project_name Change directory Change to the extracted files directory, ./hcl-dx-cloud-scripts. [root]$ cd ./ hcl-dx-cloud-scripts Download HCL DX dxctl tool Instructions for downloading the latest packages, see A Step-By-Step Guide to Downloading DX Products and Accessing Customer Support . Using DX Container Update CF192 and later, the directory structure might look as follows: For more information on dxctl tool, see dxctl Configuring the dxctl properties for the DX 95 CF192 or later deployment Copy one of the provided properties files to further modify your deployment. Syntax for copying the properties file: mkdir -p /home/$USER/deployments/ The modified properties file can be used for the deployment, and the same must be used for any further updates. Syntax for deployment using the properties file: cp dxctl/properties/full-deployment.properties /home/$USER/deployments/myfirst_deployment.properties Update the dxctl properties file values. Syntax for updating the properties file: dx.namespace: caps-dx-gke dx.image: dxen dx.tag: v95_CF192_20210224-004909_xxxxxxxxx_95_CF192_6035c973 dx.storageclass:dx-deploy-stg dx.volume: jen-core-pv dx.volume.size:60 remote.search.enabled:false openldap.enabled:false api.enabled: false composer.enabled: false dam.enabled: false ingress.image:dx-build-output/common/ambassador ingress.tag:1.5.4 ingress.redis.image:redis ingress.redis.tag:5.0.1 dx.operator.image: dx-build-output/hcldx-cloud-operator/hcldx-cloud-operator dx.operator.tag: v95_CF192_20210225-0546_xxxxxxxxx_95_CF192 Important: With HCL DX 9.5 Container Update CF197 and later, dam.features in full-deployment properties is added for use in a future container update release, and should not be modified except with direct guidance from HCL Support. Note: With HCL DX 9.5 Container Update CF193 and later, persist.force.read in full-deployment properties is added to enable a read-only Postgres pod for Digital Asset Management. This enables a failover capability for the Postgres service supporting DAM. Another option to enable a read-only pod is to set the persist.minreplicas: option set to greater than 1. Example: Deploying using HCL DX dxctl tool Run the following command to deploy a HCL DX 9.5 CF192 or later release container on Google Kubernetes Engine using dxctl. Syntax to deploy DX container: ./mac/dxctl --deploy -p /home/$USER/deployments/myfirst_deployment.properties Note: These steps result in a DX 95 CF192 or later deployment being created. Generate a TLS Certificate Create a TLS certification to be used by the deployment: For development purposes: Using OpenSSL, you can create a private key: openssl genrsa -out my-key.pem 2048 Using OpenSSL, you can create a certificate signed by the private key: openssl req -x509 -key my-key.pem -out my-cert.pem -days 365 -subj '/CN=my-cert' -new Create a TLS certification: $ kubectl create secret tls dx-tls-cert --cert=my-cert.pem --key=my-key.pem -n caps-dx-gke Note: The default name is the dx-tls-cert , and this can be changed in the configuration. In the example, caps-dx-gke is the Kubernetes namespace. You can set your preferred namespace, but you must consistently use this namespace in subsequent commands. Final Output The external IP from Load balancer in the below example can be used to access PORTAL. Syntax for the output command: $ kubectl get all -n NAMESPACE The deployed system will be available at: https://external-ip/wps/portal, where external-ip is the IP address of your system. Update the HCL Digital Experience 9.5 GKE deployment to a later release To update the deployment to a later HCL DX 9.5 Container Update release, perform the following steps: Update the deployment properties file with the new image values and run the Update command. On Mac ./mac/dxctl --update -p properties/myfirst_deployment.properties On Windows .\\win\\dxctl.exe --update -p properties\\myfirst_deployment.properties On Linux ./linux/dxctl -\u2013update -p properties/myfirst_deployment.properties Note: If using HCL DX 9.5 Container Update CF192 or later, the dxctl tool can be used to Update the deployment. The dxctl tool does not deploy or update the DxDeployment custom resource definition. Prior to running an Update process, administrators should check the DxDeployment custom resource definition ( hcl-dx-cloud-scripts/deploy/crds/git.cwp.pnp-hcl.com_dxdeployments_crd.yaml ) for changes and update accordingly: Kubernetes command: kubectl delete crd dxdeployments.git.cwp.pnp-hcl.com CAUTION: Since crd is a cluster-wide resource, the use of kubectl delete crd dxdeployments.git.cwp.pnp-hcl.com causes a service outage for all the dx-deployment across the cluster. Kubernetes command: kubectl create -f deploy/crds/git.cwp.pnp-hcl.com_dxdeployments_crd.yaml Additional considerations: Once the database is transferred, the DBTYPE might need to be updated, so you can scale the instances higher. Additionally, once the database is transferred, the number of replicas could be increased. Delete the HCL Digital Experience 9.5 GKE deployment Removing the entire deployment requires several steps, this is by design. Remove the deployment but allow for redeployment with the same volumes: ./linux/dxctl --destroy -p properties/hybrid-deployment.properties Remove the entire namespace/project: ./linux/dxctl --destroy -p properties/hybrid-deployment.properties -all true If you still find some resources like services that are not deleted, run the following command: kubectl patch services $(kubectl get services -n $NAMESPACE | grep -v \"NAME\" |awk '{print $1}') -p '{\"metadata\":{\"finalizers\":null}}' -n $NAMESPACE Parent topic: Deploying HCL Digital Experience Containers to Google Kubernetes Engine (GKE)","title":"Deploying DX CF192 and later release Containers to Google Kubernetes Engine \\(GKE\\)"},{"location":"containerization/google_gke_cf192andlater/#deploying-dx-cf192-and-later-release-containers-to-google-kubernetes-engine-gke","text":"Learn how to deploy HCL Digital Experience (DX) 9.5 CF192 and later release containers along with Ambassador to Kubernetes, as verified in Google Kubernetes Engine (GKE) .","title":"Deploying DX CF192 and later release Containers to Google Kubernetes Engine (GKE)"},{"location":"containerization/google_gke_cf192andlater/#about-this-task","text":"Follow these steps to deploy HCL Digital Experience 9.5 Container Update CF192 and later release along with Ambassador to Kubernetes, as verified in Google Kubernetes Engine (GKE) . This deployment relies heavily on Kubernetes Operators for full functionality. Note: Refer to the latest HCL DX 9.5 Container Update Release CF192 and later file listings in the Docker deployment topic.","title":"About this task"},{"location":"containerization/google_gke_cf192andlater/#prerequisites","text":"Prior to using the procedure below, it is assumed that the HCL DX Administrator is generally experienced in using Kubernetes. Additionally, the DX Administrator must have the appropriate access to the target environment. If not, following are some preliminary steps that need to be taken. Setup KUBECONFIG to refer to the target server. This ensures any kubectl commands executed locally affect the target environment. Use kubectl get {pods, pv, storageclass} to get appropriate information from the artifacts running in the target Kubernetes environment. Google Kubernetes Engine (GKE) Cluster Google Container Registry (Or any other registry configured to use with GKE) The following tools must be installed on your system: Docker kubectl Google Cloud SDK Volume requirement: Requires an AccessMode of ReadWriteMany Requires a minimum of 40 GB , with the default request set to 100 GB RECLAIM POLICY = Retain For Digital Asset Management, additional volume is required. Notes: HCL Digital Experience is input-output (I/O) intensive and requires a high performing file system for optimization. There are various ways to do this and NFS is one option. For more details, see NFS Server . For more information, see the Detailed System Requirements page.","title":"Prerequisites"},{"location":"containerization/google_gke_cf192andlater/#download-hcl-digital-experience-95-cf192-or-later-containers","text":"Download container Download HCL DX 9.5 CF192 or later package and extract it to the Local file system. Note: Here local can be a local system, or any other system that the administrator uses to connect to the Kubernetes cluster. Change directory Open a terminal window and change to the root directory of the extracted package. Docker load Load the containers into your Docker repository: ``` docker load < hcl-dx-core-image-v95_xxxxxxxx-xxxx.tar.gz - ``` docker load < hcl-dx-ambassador-image-xxx.tar.gz - ``` docker load -i hcl-dx-cloud-operator-image-v95_xxxxxxxx-xxxx.tar.gz - ``` docker load -i hcl-dx-image-processor-image-v95_xxxxxxxx-xxxx.tar.gz - ``` docker load -i hcl-dx-digital-asset-management-operator-image-v95_xxxxxxxx-xxxx.tar.gz - ``` docker load -i hcl-dx-postgres-image-v95_xxxxxxxx-xxxx.tar.gz - ``` docker load -i hcl-dx-ringapi-image-v95_xxxxxxxx-xxxx.tar.gz - ``` docker load -i hcl-dx-redis-image-xxx.tar.gz **Note:** Either **`-i`** or **`<`** works for the load command. In case you encounter an error when using one of the options, try running the command using the other. Docker tag and push Get the Docker images in your local Docker repository to your target Kubernetes system by tagging and pushing them appropriately. If you used docker load to get your images on the target environment, proceed to the next step. Syntax for tagging: docker tag <local image:tag or image id> <destination image:tag> Syntax for pushing: docker push <image:tag>","title":"Download HCL Digital Experience 9.5 CF192 or later containers"},{"location":"containerization/google_gke_cf192andlater/#deployment","text":"Persistence volume Create (or have the Kubernetes Administrator create) a persistent volume and storage class where the AccessMode must be ReadWriteMany and the persistent volume reclaim policy must be Retain . NFS Server Provide the HCL DX 9.5 CF192 and later Docker image access to the volume mount created in order to copy the profile. There are various ways to do this and NFS is one option. If NFS is used, here are the parameters that have been tested to work: rw (Default) sync (Default after NFS 1.0, means that the server does not reply until after the commit) insecure ** (Requires requests originate on ports less than 1024) root_squash ** (Map requests to the nobody user). hard ** (Required because this means the system will keep trying to write until it works.) nfsvers=4.1 rsize=8388608 (Avoids dropped packages, default 8192) wsize=8388608 (Avoids dropped packages, default 8192) timeo=600 (60 seconds) retrans=2 (Number of retries after a time out) noresvport ** (Tells the NFS client to use a new Transmission Control Protocol (TCP) source port when a network connection is reestablished. This helps to ensure that the EFS file system has uninterrupted availability after a network recovery event. Note: Those marked with ** are critical and, in many cases, it is recommended to have the rsize and wsize set to 8388608. Log in to cluster Before using the dxctl tool to deploy, you must be logged in to the targeted cluster using the cloud platform specific CLI (like Red Hat OpenShift, Amazon EKS, Microsoft Azure AKS, Google GKE). Command-line syntax: gcloud container clusters get-credentials cluster_name --region region_name --project project_name Change directory Change to the extracted files directory, ./hcl-dx-cloud-scripts. [root]$ cd ./ hcl-dx-cloud-scripts Download HCL DX dxctl tool Instructions for downloading the latest packages, see A Step-By-Step Guide to Downloading DX Products and Accessing Customer Support . Using DX Container Update CF192 and later, the directory structure might look as follows: For more information on dxctl tool, see dxctl Configuring the dxctl properties for the DX 95 CF192 or later deployment Copy one of the provided properties files to further modify your deployment. Syntax for copying the properties file: mkdir -p /home/$USER/deployments/ The modified properties file can be used for the deployment, and the same must be used for any further updates. Syntax for deployment using the properties file: cp dxctl/properties/full-deployment.properties /home/$USER/deployments/myfirst_deployment.properties Update the dxctl properties file values. Syntax for updating the properties file: dx.namespace: caps-dx-gke dx.image: dxen dx.tag: v95_CF192_20210224-004909_xxxxxxxxx_95_CF192_6035c973 dx.storageclass:dx-deploy-stg dx.volume: jen-core-pv dx.volume.size:60 remote.search.enabled:false openldap.enabled:false api.enabled: false composer.enabled: false dam.enabled: false ingress.image:dx-build-output/common/ambassador ingress.tag:1.5.4 ingress.redis.image:redis ingress.redis.tag:5.0.1 dx.operator.image: dx-build-output/hcldx-cloud-operator/hcldx-cloud-operator dx.operator.tag: v95_CF192_20210225-0546_xxxxxxxxx_95_CF192 Important: With HCL DX 9.5 Container Update CF197 and later, dam.features in full-deployment properties is added for use in a future container update release, and should not be modified except with direct guidance from HCL Support. Note: With HCL DX 9.5 Container Update CF193 and later, persist.force.read in full-deployment properties is added to enable a read-only Postgres pod for Digital Asset Management. This enables a failover capability for the Postgres service supporting DAM. Another option to enable a read-only pod is to set the persist.minreplicas: option set to greater than 1. Example: Deploying using HCL DX dxctl tool Run the following command to deploy a HCL DX 9.5 CF192 or later release container on Google Kubernetes Engine using dxctl. Syntax to deploy DX container: ./mac/dxctl --deploy -p /home/$USER/deployments/myfirst_deployment.properties Note: These steps result in a DX 95 CF192 or later deployment being created.","title":"Deployment"},{"location":"containerization/google_gke_cf192andlater/#generate-a-tls-certificate","text":"Create a TLS certification to be used by the deployment: For development purposes: Using OpenSSL, you can create a private key: openssl genrsa -out my-key.pem 2048 Using OpenSSL, you can create a certificate signed by the private key: openssl req -x509 -key my-key.pem -out my-cert.pem -days 365 -subj '/CN=my-cert' -new Create a TLS certification: $ kubectl create secret tls dx-tls-cert --cert=my-cert.pem --key=my-key.pem -n caps-dx-gke Note: The default name is the dx-tls-cert , and this can be changed in the configuration. In the example, caps-dx-gke is the Kubernetes namespace. You can set your preferred namespace, but you must consistently use this namespace in subsequent commands.","title":"Generate a TLS Certificate"},{"location":"containerization/google_gke_cf192andlater/#final-output","text":"The external IP from Load balancer in the below example can be used to access PORTAL. Syntax for the output command: $ kubectl get all -n NAMESPACE The deployed system will be available at: https://external-ip/wps/portal, where external-ip is the IP address of your system.","title":"Final Output"},{"location":"containerization/google_gke_cf192andlater/#update-the-hcl-digital-experience-95-gke-deployment-to-a-later-release","text":"To update the deployment to a later HCL DX 9.5 Container Update release, perform the following steps: Update the deployment properties file with the new image values and run the Update command. On Mac ./mac/dxctl --update -p properties/myfirst_deployment.properties On Windows .\\win\\dxctl.exe --update -p properties\\myfirst_deployment.properties On Linux ./linux/dxctl -\u2013update -p properties/myfirst_deployment.properties Note: If using HCL DX 9.5 Container Update CF192 or later, the dxctl tool can be used to Update the deployment. The dxctl tool does not deploy or update the DxDeployment custom resource definition. Prior to running an Update process, administrators should check the DxDeployment custom resource definition ( hcl-dx-cloud-scripts/deploy/crds/git.cwp.pnp-hcl.com_dxdeployments_crd.yaml ) for changes and update accordingly: Kubernetes command: kubectl delete crd dxdeployments.git.cwp.pnp-hcl.com CAUTION: Since crd is a cluster-wide resource, the use of kubectl delete crd dxdeployments.git.cwp.pnp-hcl.com causes a service outage for all the dx-deployment across the cluster. Kubernetes command: kubectl create -f deploy/crds/git.cwp.pnp-hcl.com_dxdeployments_crd.yaml Additional considerations: Once the database is transferred, the DBTYPE might need to be updated, so you can scale the instances higher. Additionally, once the database is transferred, the number of replicas could be increased.","title":"Update the HCL Digital Experience 9.5 GKE deployment to a later release"},{"location":"containerization/google_gke_cf192andlater/#delete-the-hcl-digital-experience-95-gke-deployment","text":"Removing the entire deployment requires several steps, this is by design. Remove the deployment but allow for redeployment with the same volumes: ./linux/dxctl --destroy -p properties/hybrid-deployment.properties Remove the entire namespace/project: ./linux/dxctl --destroy -p properties/hybrid-deployment.properties -all true If you still find some resources like services that are not deleted, run the following command: kubectl patch services $(kubectl get services -n $NAMESPACE | grep -v \"NAME\" |awk '{print $1}') -p '{\"metadata\":{\"finalizers\":null}}' -n $NAMESPACE Parent topic: Deploying HCL Digital Experience Containers to Google Kubernetes Engine (GKE)","title":"Delete the HCL Digital Experience 9.5 GKE deployment"},{"location":"containerization/hybrid_deployment_HCL_SoFy/","text":"Deploying HCL Digital Experience 9.5 with HCL Solution Factory (SoFy) The HCL Solution Factory (SoFy) platform offers the ability for organizations to quickly prototype, test and deploy HCL Digital Experience and other solutions, and can enable organizations to speed cloud-native adoption. HCL SoFy is a next generation software development platform that accelerates deployment and integration of cloud-native products through the application of cloud-centered technologies and practices. These include the following: running in docker containers, creation of stand-alone and individually scalable services, enablement for cloud scaling and orchestration, continuous delivery of updates, and opening up capabilities with new REST APIs. Using HCL SoFy to access and deploy HCL Digital Experience 9.5 and other HCL software offerings you can quickly gain hands-on experience working with these cloud-native solutions. Before you begin Before you explore HCL Digital Experience and form a solution on HCL SoFy , you must obtain access to the platform. You can request access through the contact form located at: https://hcltechsw.com/products/sofy/request-access . Once you gain access, it is recommended to read through the provided user guides to get familiar with the SoFy solution builder. Video: HCL Sofy \u2013 A Quick Tour You can also refer to the HCL Software Academy on how to Setup DX Demo in SoFy lab . Parent topic: Digital Experience on containerized platforms","title":"Deploying HCL Digital Experience 9.5 with HCL Solution Factory \\(SoFy\\)"},{"location":"containerization/hybrid_deployment_HCL_SoFy/#deploying-hcl-digital-experience-95-with-hcl-solution-factory-sofy","text":"The HCL Solution Factory (SoFy) platform offers the ability for organizations to quickly prototype, test and deploy HCL Digital Experience and other solutions, and can enable organizations to speed cloud-native adoption. HCL SoFy is a next generation software development platform that accelerates deployment and integration of cloud-native products through the application of cloud-centered technologies and practices. These include the following: running in docker containers, creation of stand-alone and individually scalable services, enablement for cloud scaling and orchestration, continuous delivery of updates, and opening up capabilities with new REST APIs. Using HCL SoFy to access and deploy HCL Digital Experience 9.5 and other HCL software offerings you can quickly gain hands-on experience working with these cloud-native solutions.","title":"Deploying HCL Digital Experience 9.5 with HCL Solution Factory (SoFy)"},{"location":"containerization/hybrid_deployment_HCL_SoFy/#before-you-begin","text":"Before you explore HCL Digital Experience and form a solution on HCL SoFy , you must obtain access to the platform. You can request access through the contact form located at: https://hcltechsw.com/products/sofy/request-access . Once you gain access, it is recommended to read through the provided user guides to get familiar with the SoFy solution builder. Video: HCL Sofy \u2013 A Quick Tour You can also refer to the HCL Software Academy on how to Setup DX Demo in SoFy lab . Parent topic: Digital Experience on containerized platforms","title":"Before you begin"},{"location":"containerization/hybrid_deployment_helm/","text":"Hybrid Deployment - Helm This section describes how to install HCL Digital Experience 9.5 Container Update CF198 and later Portal Server and Web Content Manager services to on-premises platforms, operating with Digital Asset Management, Content Composer, Experience API deployed to cloud-based Kubernetes and OpenShift platforms using the Helm deployment method. Overview The HCL Digital Experience 9.5 Hybrid deployment reference architecture and topics describe an approach to deploy and manage HCL Digital Experience 9.5 core Portal Server and Web Content Manager services on premises, and connect to cloud native components Digital Asset Management, Content Composer, Experience API and related services using Helm, in a production environment. Prerequisites HCL Digital Experience V9.5 CF198 or a higher release is deployed to supported on-premises platforms in a standalone, cluster, or farm topology. See the Roadmaps to deploy your Digital Experience 9.5 system topic for more information. Practitioner Studio is enabled in the Digital Experience 9.5 CF198 or higher installation. See the How to enable Practitioner Studio topic for instructions. A common domain that uses an SSL connection is established for both the on-premise HCL DX 9.5 CF198 and higher on-premise environments and the target Red Hat Open Shift or Amazon EKS, Azure AKS, or Google GKE platform deployment to contain the cloud native components (HCL DX Experience API, Digital Asset Management and Content Composer). For example, mytargetcloud.dx.com and myonprem.dx.com would have the same domain: dx.com. Single sign-on must be enabled on HCL DX 9.5 CF198 or a higher on-premises environment. On DMGR or WAS Admin console, under Security > Global Security > Web & SIP Security > Single Sign-On , the Enabled box is checked and the Domain name is set to common domain. For example, dx.com. A high-performance network connection is established between the HCL DX 9.5 CF19 and higher on-premises environment and the target DX Red Hat Open Shift or Kubernetes platform deployment. Volume Requirement : Requires an AccessMode of ReadWriteMany . Refer to the Storage Class and Volume topic for more information. Ensure you have obtained a backup of the HCL DX 9.5 on-premises deployment. See the Backup and Restore topic for additional information. Step 1: Configure Networking between the on-premises DX 9.5 CF198 or later deployment so that the HCL DX 9.5 Container Update CF198 or later components are accessible externally from the Kubernetes or OpenShift platform cluster. Reference the Configure Networking topic in the Helm Planning sections of the Help Center. Step 2: Set the Core application deployment parameter in your custom-values.yaml file to false . Refer to the Planning your container deployment using Helm Help Center topic for more information. Step 3: Proceed to configuration instructions listed in this Help Center topic: Helm Deployment Configuration .","title":"Hybrid Deployment - Helm"},{"location":"containerization/hybrid_deployment_helm/#hybrid-deployment-helm","text":"This section describes how to install HCL Digital Experience 9.5 Container Update CF198 and later Portal Server and Web Content Manager services to on-premises platforms, operating with Digital Asset Management, Content Composer, Experience API deployed to cloud-based Kubernetes and OpenShift platforms using the Helm deployment method.","title":"Hybrid Deployment - Helm"},{"location":"containerization/hybrid_deployment_helm/#overview","text":"The HCL Digital Experience 9.5 Hybrid deployment reference architecture and topics describe an approach to deploy and manage HCL Digital Experience 9.5 core Portal Server and Web Content Manager services on premises, and connect to cloud native components Digital Asset Management, Content Composer, Experience API and related services using Helm, in a production environment.","title":"Overview"},{"location":"containerization/hybrid_deployment_helm/#prerequisites","text":"HCL Digital Experience V9.5 CF198 or a higher release is deployed to supported on-premises platforms in a standalone, cluster, or farm topology. See the Roadmaps to deploy your Digital Experience 9.5 system topic for more information. Practitioner Studio is enabled in the Digital Experience 9.5 CF198 or higher installation. See the How to enable Practitioner Studio topic for instructions. A common domain that uses an SSL connection is established for both the on-premise HCL DX 9.5 CF198 and higher on-premise environments and the target Red Hat Open Shift or Amazon EKS, Azure AKS, or Google GKE platform deployment to contain the cloud native components (HCL DX Experience API, Digital Asset Management and Content Composer). For example, mytargetcloud.dx.com and myonprem.dx.com would have the same domain: dx.com. Single sign-on must be enabled on HCL DX 9.5 CF198 or a higher on-premises environment. On DMGR or WAS Admin console, under Security > Global Security > Web & SIP Security > Single Sign-On , the Enabled box is checked and the Domain name is set to common domain. For example, dx.com. A high-performance network connection is established between the HCL DX 9.5 CF19 and higher on-premises environment and the target DX Red Hat Open Shift or Kubernetes platform deployment. Volume Requirement : Requires an AccessMode of ReadWriteMany . Refer to the Storage Class and Volume topic for more information. Ensure you have obtained a backup of the HCL DX 9.5 on-premises deployment. See the Backup and Restore topic for additional information. Step 1: Configure Networking between the on-premises DX 9.5 CF198 or later deployment so that the HCL DX 9.5 Container Update CF198 or later components are accessible externally from the Kubernetes or OpenShift platform cluster. Reference the Configure Networking topic in the Helm Planning sections of the Help Center. Step 2: Set the Core application deployment parameter in your custom-values.yaml file to false . Refer to the Planning your container deployment using Helm Help Center topic for more information. Step 3: Proceed to configuration instructions listed in this Help Center topic: Helm Deployment Configuration .","title":"Prerequisites"},{"location":"containerization/hybrid_deployment_operator/","text":"Hybrid deployment - Operator This section describes how to install HCL Digital Experience 9.5 Portal Server and Web Content Manager services to on-premises platforms, operating with Digital Asset Management, Content Composer, Experience API deployed to cloud-based Kubernetes and OpenShift platforms deployed using the Operator (dxctl) method. Overview Many organizations are using cloud and containerized deployments as part of their overall systems environments. In parallel, organizations continue to operate software applications and processes on-premises. The HCL Digital Experience 9.5 Hybrid deployment reference architecture and topics describe an approach to deploy and manage HCL Digital Experience 9.5 core Portal Server and Web Content Manager services on premises, and connect to cloud native components Digital Asset Management, Content Composer, Experience API and related services in a production environment. Notes: The hybrid deployment of cloud-based components HCL Digital Asset Management, Content Composer, and Experience API is supported on Red Hat OpenShift with the HCL DX 9.5 CF19 release. It is not yet supported with an on-premises clustered environment. The HCL DX hybrid deployment model will be supported on additional Kubernetes platforms in later release updates. Virtual Portal support with Content Composer is not yet supported. Support for this component in a virtual portal deployment model will be available in later releases. Prerequisites HCL Digital Experience V9.5 CF19 or higher is deployed to supported on-premises platforms, in a standalone, cluster, or farm topology. See the Roadmaps to deploy your Digital Experience 9.5 system topic for more information. Practitioner Studio has been enabled in the Digital Experience 9.5 CF19 or higher installation. See the How to enable Practitioner Studio topic for instructions. A common domain, using an SSL connection, is established for both the on premise HCL DX 9.5 CF19 and higher on-premises environment, and the target Red Hat Open Shift platform deployment to contain cloud native components HCL DX Experience API, Digital Asset Management and Content Composer. For example, mytargetcloud.dx.com and myonprem.dx.com would have the same domain: dx.com. Single sign-on must be enabled on HCL DX 9.5 CF19 or higher on-premises environment. On DMGR or WAS Admin console under Security > Global Security > Web & SIP Security > Single Sign-On , Enabled is checked and Domain name is set to common domain. For example, dx.com. A high-performance network connection is established between the HCL DX 9.5 CF19 and higher on-premises environment, and the target DX Red Hat Open Shift platform deployment. dxctl tool. Volume Requirement : Requires an AccessMode of ReadWriteMany. Reference the Storage Class and Volume topic for more information. Ensure you have obtained a backup of the HCL DX 9.5 on-premises deployment. See the Backup and Restore topic for additional information. Enabling Hybrid Deployment support in the HCL Digital Experience 9.5 on-premises environment Follow the steps below to enable Hybrid deployment support in the HCL Digital Experience 9.5 on-premises environment. Access the latest HCL DX 9.5 CF19 or higher release software from the HCL Software License Portal . The package will include the file hcl-dx-cloud-scripts, which should be downloaded and extracted to your local system. This will present the following deploy, dxctl and scripts directories as shown below: Configure Properties of the dxctl tool. Navigate to the dxctl/properties directory and open the hybrid-deployment.properties file in your favorite editor. Sample properties for deploying Digital Asset Management, Content Composer, and the Experience API for use with an on-premise DX environment are shown below. Use following example to modify the values in the dxctl/properties/hybrid-deployment.properties file to reflect your target Red Hat Open Shift environment to deploy the Content Composer, Digital Asset Management, and the Experience API components. Note: For a Hybrid deployment, the following items should be enabled and/or not included in the deployment: Enable api.enabled(eAPI), composer.enabled(Content Composer) and/or dam.enabled(DAM) to true. Not included **dx.tag** This is not required for a hybrid deployment as DX Portal and WCM is installed on premises. **dx.database** This is not required for a hybrid deployment as it is installed with DX Portal and WCM on premises. See the Reference list below for explanations of the file items. dx.namespace: dxhybwin dx.config.cors: https://portal-dxhybwin.apps.dxdev.dx-dev.net:10042 hybrid.enabled: true hybrid.host: portal-dxhybwin.apps.dxdev.dx-dev.net hybrd.port: 10042 api.enabled: true api.tag: v1.3.0_20201019-1240_develop composer.enabled: true composer.tag: v1.3.0_20201019-1239_develop dam.enabled: true dam.volume: dxhybwin-dam dam.stgclass: dx-deploy-stg dam.tag: v1.3.0_20201019-1259_develop imgproc.tag: v1.3.0_20201015-1133_develop override.ingress.host: dx-hybrid-service-dxhybwin-dxhybwin.apps.hcl-dxdev.dx-dev.net dam.operator.tag: v95_CF19_20201020_dev_build Reference list : dx.namespace - The project or the namespace to create or use for deployment. dx.tag - Tag of the latest DX HCL DX 9.5 Portal and Web Content Manager image. dx.database - By default, and initially, this is Derby. HCL DX 9.5 supports Apache Derby, Oracle Database, IBM DB2, or Microsoft SQL Server. Acceptable values are derby , oracle , db2 , or msSql . dx.config.cors - URL of the on-premises HCL DX 9.5 CF19 or higher Portal and Web Content Manager server. hybrid.enabled - Boolean value to enable/disable. hybrid.host - URL of On-premises DX 9.5 Portal and Web Content Manager server without port. hybrd.port - Port of the on-premises HCL DX 9.5 CF19 or higher Portal and Web Content Manager server. api.enabled - Boolean value to enable/disable the Experience API. api.tag - Tag of the your Experience API image. composer.enabled - Boolean value to enable/disable Content Composer. composer.tag - Tag of the latest Content Composer image. dam.enabled - Boolean value to enable/disable Digital Asset Management. dam.volume - Volume for Digital Asset Management. dam.stgclass - Storage class for Digital Asset Management. dam.tag - Tag of your Digital Asset Management image. imgproc.tag - Tag of your Image-Processor image. override.ingress.host - Generated base URL of the route. dx.operator.tag - Tag of your hcldx-cloud-operator image. dam.operator.tag - Tag of your Docker hcl-dam-operator tag. Deploy using the dxctl tool Login to the Red Hat OpenShift platform using Kubectl. Log in to the target Red Hat OpenShift platform using the following OpenShift command: $ oc login Enter your username and password in response to system prompts. See the example below: Deploy using dxctl. On your local workstation, navigate to the dxctl folder: $ cd ./hcl-dx-cloud-scripts/dxctl Execute the below command to deploy from the local workstation to the target Red Hat OpenShift platform to contain the HCL DX 9.5 CF19 and higher cloud native components using the dxctl tool based on configured properties: From a MacOS workstation: MacBook-Pro:macuser$ ./mac/dxctl --deploy -p properties/hybrid-deployment.properties From a Windows workstation: Cmd> ./win/dxctl -\u2013deploy -p properties/hybrid-deployment.properties Note: On Windows 10 MD and PowerShell, rename the dxctl file to dxctl.exe and run the deploy command. From a Linux workstation: $ ./linux/dxctl \u2013deploy -p properties/hybrid-deployment.properties Validate the Deployment Login to the Red Hat OpenShift Console. Login to OpenShift Dashboard Console with your credentials: Once logged in, search for the HCL DX 9.5 project: Ensure the deployment and pods are running and in a ready state. Access the HCL Digital Experience 9.5 on-premises server. Access the host URL of the HCL Digital Experience 9.5 on-premises deployment, which is defined in the hybrid-deployment.properties file and add the path below to the URL: /wps/myportal. Login to the HCL DX 9.5 on-premises deployment using your appropriate credentials. Once logged in, click the Open Applications Menu in the right top corner. If the Web Content and Digital Assets menu items do not appear in the menu selections, follow the steps below to enable Content Composer and Digital Asset Management using the Configuration Engine. Enable Content Composer and Digital Asset Management Locate the Content Composer and Digital Asset Management URLs. The URLs will match the location values of the Red Hat OpenShift route of the component. Copy the Content Composer and Digital Asset Management URL from the Red Hat OpenShift dashboard console and add the suffix/static as in the example below: Content Composer \u2013 Content UI URL Example : https://dx-hybrid-service-dxhybwin-dxhybwin.apps.comp-dxdev.hcl-dx-dev.net/dx/ui/content/static Digital Asset Management UI URL Example : https://dx-hybrid-service-dxhybwin-dxhybwin.apps.comp-dxdev.hcl-dx-dev.net/dx/ui/dam/static Navigate to the ConfigEngine service. Connect/login to the HCL DX 9.5 on-premises system and open a command line prompt. Navigate to the following path on your deployment: C:\\> cd <path to wp_profile>\\ConfigEngine Enable Content Composer and Digital Asset Management to the Hybrid deployment. If the on-premises HCL DX 9.5 Portal and Web Content Manager deployment is installed to a Windows platform, execute: Enable Content Composer : <Path to wp_profile>\\ConfigEngine\\ConfigEngine.bat enable-headless-content -Dstatic.ui.url=CONTENT_UI_URL -DWasPassword=... -DPortalAdminPwd=... Note: In the command above, the CONTENT_UI_URL=Route URL is copied from the Red Hat OpenShift dashboard with /static . -DWasPassword=type is the IBM WebSphere Application Server password and -DPortalAdminPwd=type is the DX admin password. Enable Digital Asset Management : <Path to wp_profile>\\ConfigEngine\\ConfigEngine.bat enable-media-library -Dstatic.ui.url=DAM_URL -DWasPassword=... -DPortalAdminPwd=... Note: In the command above, the DAM_URL=Route URL is copied from the Red Hat OpenShift dashboard with /static . -DWasPassword=type is the IBM WebSphere Application Server password and -DPortalAdminPwd=type is the DX admin password. If the on-premises HCL DX 9.5 Portal and Web Content Manager deployment is installed to a Linux platform, execute: Enable Content Composer : <Path to wp_profile>\\ConfigEngine\\ConfigEngine.sh enable-headless-content -Dstatic.ui.url=CONTENT_UI_URL -DWasPassword=... -DPortalAdminPwd=... Note: In the command above, the CONTENT_UI_URL=Route URL is copied from the Red Hat OpenShift dashboard with /static . -DWasPassword=type is the IBM WebSphere Application Server password and -DPortalAdminPwd=type is the DX admin password. Enable Digital Asset Management : <Path to wp_profile>\\ConfigEngine\\ConfigEngine.sh enable-media-library -Dstatic.ui.url=DAM_URL -DWasPassword=... -DPortalAdminPwd=... Note: In the command above, the DAM_URL=Route URL is copied from the Red Hat OpenShift dashboard with /static . -DWasPassword=type is the IBM WebSphere Application Server password and -DPortalAdminPwd=type is the DX admin password. Once the above steps are completed, log in to the Digital Experience 9.5 deployment and validate the Web Content and Digital Assets menu items appear. Example : Parent topic: Digital Experience on containerized platforms","title":"Hybrid deployment - Operator"},{"location":"containerization/hybrid_deployment_operator/#hybrid-deployment-operator","text":"This section describes how to install HCL Digital Experience 9.5 Portal Server and Web Content Manager services to on-premises platforms, operating with Digital Asset Management, Content Composer, Experience API deployed to cloud-based Kubernetes and OpenShift platforms deployed using the Operator (dxctl) method.","title":"Hybrid deployment - Operator"},{"location":"containerization/hybrid_deployment_operator/#overview","text":"Many organizations are using cloud and containerized deployments as part of their overall systems environments. In parallel, organizations continue to operate software applications and processes on-premises. The HCL Digital Experience 9.5 Hybrid deployment reference architecture and topics describe an approach to deploy and manage HCL Digital Experience 9.5 core Portal Server and Web Content Manager services on premises, and connect to cloud native components Digital Asset Management, Content Composer, Experience API and related services in a production environment. Notes: The hybrid deployment of cloud-based components HCL Digital Asset Management, Content Composer, and Experience API is supported on Red Hat OpenShift with the HCL DX 9.5 CF19 release. It is not yet supported with an on-premises clustered environment. The HCL DX hybrid deployment model will be supported on additional Kubernetes platforms in later release updates. Virtual Portal support with Content Composer is not yet supported. Support for this component in a virtual portal deployment model will be available in later releases.","title":"Overview"},{"location":"containerization/hybrid_deployment_operator/#prerequisites","text":"HCL Digital Experience V9.5 CF19 or higher is deployed to supported on-premises platforms, in a standalone, cluster, or farm topology. See the Roadmaps to deploy your Digital Experience 9.5 system topic for more information. Practitioner Studio has been enabled in the Digital Experience 9.5 CF19 or higher installation. See the How to enable Practitioner Studio topic for instructions. A common domain, using an SSL connection, is established for both the on premise HCL DX 9.5 CF19 and higher on-premises environment, and the target Red Hat Open Shift platform deployment to contain cloud native components HCL DX Experience API, Digital Asset Management and Content Composer. For example, mytargetcloud.dx.com and myonprem.dx.com would have the same domain: dx.com. Single sign-on must be enabled on HCL DX 9.5 CF19 or higher on-premises environment. On DMGR or WAS Admin console under Security > Global Security > Web & SIP Security > Single Sign-On , Enabled is checked and Domain name is set to common domain. For example, dx.com. A high-performance network connection is established between the HCL DX 9.5 CF19 and higher on-premises environment, and the target DX Red Hat Open Shift platform deployment. dxctl tool. Volume Requirement : Requires an AccessMode of ReadWriteMany. Reference the Storage Class and Volume topic for more information. Ensure you have obtained a backup of the HCL DX 9.5 on-premises deployment. See the Backup and Restore topic for additional information.","title":"Prerequisites"},{"location":"containerization/hybrid_deployment_operator/#enabling-hybrid-deployment-support-in-the-hcl-digital-experience-95-on-premises-environment","text":"Follow the steps below to enable Hybrid deployment support in the HCL Digital Experience 9.5 on-premises environment. Access the latest HCL DX 9.5 CF19 or higher release software from the HCL Software License Portal . The package will include the file hcl-dx-cloud-scripts, which should be downloaded and extracted to your local system. This will present the following deploy, dxctl and scripts directories as shown below: Configure Properties of the dxctl tool. Navigate to the dxctl/properties directory and open the hybrid-deployment.properties file in your favorite editor. Sample properties for deploying Digital Asset Management, Content Composer, and the Experience API for use with an on-premise DX environment are shown below. Use following example to modify the values in the dxctl/properties/hybrid-deployment.properties file to reflect your target Red Hat Open Shift environment to deploy the Content Composer, Digital Asset Management, and the Experience API components. Note: For a Hybrid deployment, the following items should be enabled and/or not included in the deployment: Enable api.enabled(eAPI), composer.enabled(Content Composer) and/or dam.enabled(DAM) to true. Not included **dx.tag** This is not required for a hybrid deployment as DX Portal and WCM is installed on premises. **dx.database** This is not required for a hybrid deployment as it is installed with DX Portal and WCM on premises. See the Reference list below for explanations of the file items. dx.namespace: dxhybwin dx.config.cors: https://portal-dxhybwin.apps.dxdev.dx-dev.net:10042 hybrid.enabled: true hybrid.host: portal-dxhybwin.apps.dxdev.dx-dev.net hybrd.port: 10042 api.enabled: true api.tag: v1.3.0_20201019-1240_develop composer.enabled: true composer.tag: v1.3.0_20201019-1239_develop dam.enabled: true dam.volume: dxhybwin-dam dam.stgclass: dx-deploy-stg dam.tag: v1.3.0_20201019-1259_develop imgproc.tag: v1.3.0_20201015-1133_develop override.ingress.host: dx-hybrid-service-dxhybwin-dxhybwin.apps.hcl-dxdev.dx-dev.net dam.operator.tag: v95_CF19_20201020_dev_build Reference list : dx.namespace - The project or the namespace to create or use for deployment. dx.tag - Tag of the latest DX HCL DX 9.5 Portal and Web Content Manager image. dx.database - By default, and initially, this is Derby. HCL DX 9.5 supports Apache Derby, Oracle Database, IBM DB2, or Microsoft SQL Server. Acceptable values are derby , oracle , db2 , or msSql . dx.config.cors - URL of the on-premises HCL DX 9.5 CF19 or higher Portal and Web Content Manager server. hybrid.enabled - Boolean value to enable/disable. hybrid.host - URL of On-premises DX 9.5 Portal and Web Content Manager server without port. hybrd.port - Port of the on-premises HCL DX 9.5 CF19 or higher Portal and Web Content Manager server. api.enabled - Boolean value to enable/disable the Experience API. api.tag - Tag of the your Experience API image. composer.enabled - Boolean value to enable/disable Content Composer. composer.tag - Tag of the latest Content Composer image. dam.enabled - Boolean value to enable/disable Digital Asset Management. dam.volume - Volume for Digital Asset Management. dam.stgclass - Storage class for Digital Asset Management. dam.tag - Tag of your Digital Asset Management image. imgproc.tag - Tag of your Image-Processor image. override.ingress.host - Generated base URL of the route. dx.operator.tag - Tag of your hcldx-cloud-operator image. dam.operator.tag - Tag of your Docker hcl-dam-operator tag.","title":"Enabling Hybrid Deployment support in the HCL Digital Experience 9.5 on-premises environment"},{"location":"containerization/hybrid_deployment_operator/#deploy-using-the-dxctl-tool","text":"Login to the Red Hat OpenShift platform using Kubectl. Log in to the target Red Hat OpenShift platform using the following OpenShift command: $ oc login Enter your username and password in response to system prompts. See the example below: Deploy using dxctl. On your local workstation, navigate to the dxctl folder: $ cd ./hcl-dx-cloud-scripts/dxctl Execute the below command to deploy from the local workstation to the target Red Hat OpenShift platform to contain the HCL DX 9.5 CF19 and higher cloud native components using the dxctl tool based on configured properties: From a MacOS workstation: MacBook-Pro:macuser$ ./mac/dxctl --deploy -p properties/hybrid-deployment.properties From a Windows workstation: Cmd> ./win/dxctl -\u2013deploy -p properties/hybrid-deployment.properties Note: On Windows 10 MD and PowerShell, rename the dxctl file to dxctl.exe and run the deploy command. From a Linux workstation: $ ./linux/dxctl \u2013deploy -p properties/hybrid-deployment.properties","title":"Deploy using the dxctl tool"},{"location":"containerization/hybrid_deployment_operator/#validate-the-deployment","text":"Login to the Red Hat OpenShift Console. Login to OpenShift Dashboard Console with your credentials: Once logged in, search for the HCL DX 9.5 project: Ensure the deployment and pods are running and in a ready state. Access the HCL Digital Experience 9.5 on-premises server. Access the host URL of the HCL Digital Experience 9.5 on-premises deployment, which is defined in the hybrid-deployment.properties file and add the path below to the URL: /wps/myportal. Login to the HCL DX 9.5 on-premises deployment using your appropriate credentials. Once logged in, click the Open Applications Menu in the right top corner. If the Web Content and Digital Assets menu items do not appear in the menu selections, follow the steps below to enable Content Composer and Digital Asset Management using the Configuration Engine.","title":"Validate the Deployment"},{"location":"containerization/hybrid_deployment_operator/#enable-content-composer-and-digital-asset-management","text":"Locate the Content Composer and Digital Asset Management URLs. The URLs will match the location values of the Red Hat OpenShift route of the component. Copy the Content Composer and Digital Asset Management URL from the Red Hat OpenShift dashboard console and add the suffix/static as in the example below: Content Composer \u2013 Content UI URL Example : https://dx-hybrid-service-dxhybwin-dxhybwin.apps.comp-dxdev.hcl-dx-dev.net/dx/ui/content/static Digital Asset Management UI URL Example : https://dx-hybrid-service-dxhybwin-dxhybwin.apps.comp-dxdev.hcl-dx-dev.net/dx/ui/dam/static Navigate to the ConfigEngine service. Connect/login to the HCL DX 9.5 on-premises system and open a command line prompt. Navigate to the following path on your deployment: C:\\> cd <path to wp_profile>\\ConfigEngine Enable Content Composer and Digital Asset Management to the Hybrid deployment. If the on-premises HCL DX 9.5 Portal and Web Content Manager deployment is installed to a Windows platform, execute: Enable Content Composer : <Path to wp_profile>\\ConfigEngine\\ConfigEngine.bat enable-headless-content -Dstatic.ui.url=CONTENT_UI_URL -DWasPassword=... -DPortalAdminPwd=... Note: In the command above, the CONTENT_UI_URL=Route URL is copied from the Red Hat OpenShift dashboard with /static . -DWasPassword=type is the IBM WebSphere Application Server password and -DPortalAdminPwd=type is the DX admin password. Enable Digital Asset Management : <Path to wp_profile>\\ConfigEngine\\ConfigEngine.bat enable-media-library -Dstatic.ui.url=DAM_URL -DWasPassword=... -DPortalAdminPwd=... Note: In the command above, the DAM_URL=Route URL is copied from the Red Hat OpenShift dashboard with /static . -DWasPassword=type is the IBM WebSphere Application Server password and -DPortalAdminPwd=type is the DX admin password. If the on-premises HCL DX 9.5 Portal and Web Content Manager deployment is installed to a Linux platform, execute: Enable Content Composer : <Path to wp_profile>\\ConfigEngine\\ConfigEngine.sh enable-headless-content -Dstatic.ui.url=CONTENT_UI_URL -DWasPassword=... -DPortalAdminPwd=... Note: In the command above, the CONTENT_UI_URL=Route URL is copied from the Red Hat OpenShift dashboard with /static . -DWasPassword=type is the IBM WebSphere Application Server password and -DPortalAdminPwd=type is the DX admin password. Enable Digital Asset Management : <Path to wp_profile>\\ConfigEngine\\ConfigEngine.sh enable-media-library -Dstatic.ui.url=DAM_URL -DWasPassword=... -DPortalAdminPwd=... Note: In the command above, the DAM_URL=Route URL is copied from the Red Hat OpenShift dashboard with /static . -DWasPassword=type is the IBM WebSphere Application Server password and -DPortalAdminPwd=type is the DX admin password. Once the above steps are completed, log in to the Digital Experience 9.5 deployment and validate the Web Content and Digital Assets menu items appear. Example : Parent topic: Digital Experience on containerized platforms","title":"Enable Content Composer and Digital Asset Management"},{"location":"containerization/install_config_cc_dam/","text":"Install the HCL Digital Experience 9.5 components This section provides a high-level overview of the architecture and the steps to install, configure, and update the HCL Digital Experience 9.5 components: Experience API, Content Composer, and Digital Asset Management. Video : Install HCL Digital Experience components (Experience API, Content Composer, and Digital Asset Management) on Red Hat OpenShift High-level architecture and topology Prerequisite DX Administrators can choose to install the DX Core containers then proceed to install Content Composer and Digital Asset Management containers to the supported Kubernetes container platforms as outlined in the following steps. See the Deployment section for the latest DX 9.5 container file listings. Deploying the HCL Digital Asset Management or Content Composer components is supported on Kubernetes or OpenShift platforms and is not supported for deployment to Docker platforms. See the System requirements section for more information and the latest updates. Note: For initial deployments, it is recommended to install the HCL Digital Experience 9.5 components (Experience API, Content Composer, and Digital Asset Management) to a non-production (test) HCL Digital Experience 9.5 environment. Installing the HCL Digital Experience 9.5 Container components Follow these steps to install your HCL Digital Experience 9.5 components (Experience API, Content Composer, and Digital Asset Management): Asset Management components If installing in conjunction with HCL Digital Experience 9.5 CF181 or higher, follow the instructions in the Container Deployment topic. This page lists the latest HCL Digital Experience 9.5 CF181 or higher product images available and how to obtain and load the images into your Docker repository before continuing with these instructions. If installing to an existing HCL Digital Experience 9.5 CF181 or higher Kubernetes environment: Verify that you can access the HCL Digital Experience 9.5 CF181 or higher Practitioner Studio by logging in to your HCL Digital Experience 9.5 Practitioner Studio interface. See the HCL Digital Experience 9.5 Practitioner Studio topic for information. Download and extract the HCL Digital Experience 9.5 components from your Digital Experience entitlements from the HCL Software License Portal to the local file system. Sample download package name : hcl-dx-kubernetes-v95-CF181-other.zip or higher, depending on the DX 9.5 Container Update version you are installing. Example : **hcl-dx-kubernetes-v95-CF181-other.zip:** HCL Experience API (Docker image) - hcl-dx-ringapi-image-v1.0.0_xxxxxxxx-xxxx.tar.gz Postgres - hcl-dx-postgres-image-v1.0.0_xxxxxxxx-xxxx.tar.gz HCL Digital Asset Management (Operator) - hcl-dx-medialibrary-operator-image-v95_CF181_xxxxxxxx-xxxx.tar.gz HCL Digital Asset Management (Image processor) - hcl-dx-image-processor-image-v1.0.0_xxxxxxxx-xxxx.tar.gz HCL Digital Asset Management (Docker image) - hcl-dx-digital-asset-manager-image-v1.0.0_xxxxxxxx-xxxx.tar.gz HCL Content Composer (Docker image) - hcl-dx-content-composer-image-v1.0.0_xxxxxxxx-xxxx.tar.gz Extract the images to the local file system. Open a terminal window and change to the root directory of the extracted package images. Load the images into your Docker environment. Example: Docker load < hcl-dx-ringapi-image-v1.0.0_xxxxxxxx-xxxx.tar.gz Docker load < hcl-dx-medialibrary-operator-image-v95_CF181_xxxxxxxx-xxxx.tar.gz Docker load < hcl-dx-digital-asset-manager-image-v1.0.0_xxxxxxxx-xxxx.tar.gz Docker load < hcl-dx-content-composer-image-v1.0.0_xxxxxxxx-xxxx.tar.gz Docker load < hcl-dx-image-processor-image-v1.0.0_xxxxxxxx-xxxx.tar.gz Docker load < hcl-dx-postgres-image-v1.0.0_xxxxxxxx-xxxx.tar.gz Note: Either -i or < works for the load command. In case you encounter an error when using one, try running the command using the other. Get the Docker images in your local Docker repository to your target Kubernetes system by tagging and pushing them appropriately. If you used docker load to get your images on the target environment, proceed to the next step. Install the HCL Digital Experience 9.5 CF181 or higher Experience API, Content Composer, and Digital Asset Management components by using the following steps. Container Update CF182 or higher is required if deploying to Microsoft Azure Kubernetes Service (AKS). Notes: The config map name value used must be the same as the HCL Digital Experience 9.5 CF181 and higher deployment. By default, the config map deployment name value is dx-deployment. The HCL Experience API must be installed to access and use the HCL Content Composer and the HCL Digital Asset Management features. Reminder : If you are currently running an HCL Digital Experience 9.5 CF181 or higher Kubernetes deployment in production, adding new components requires an outage and setup time so plan it carefully. If you are creating the dx-deployment config map, you can use the following content (adjusting the image tag values to match your environment) to create a YAML file and use a command line client to create the config map which is used to deploy the HCL Experience API, HCL Content Composer, and HCL Digital Asset Management CF181 and later components. Note: It is possible to deploy the services for the HCL Experience API and HCL Content Composer and/or Digital Asset Management, if either of those combinations is preferred, by removing either the HCL Content Composer or HCL Digital Asset Management service lines from the YAML file. Confirm your HCL Digital Experience 9.5 CF181 and higher container instance is up and running on Amazon EKS, Microsoft Azure (CF182 or higher), or Red Hat OpenShift platform. Note: If you are adding components for HCL Content Composer, HCL Digital Asset Management, and HCL Experience API to an existing HCL Digital Experience 9.5 environment (must be at level 9.5 CF181 or higher) deployment, you must stop the deployment and restart it with one (1) replica. Reminder : For an initial deployment, it is not advisable to deploy these components to a production HCL Digital Experience 9.5 deployment. Update the HCL Digital Experience 9.5 CF181 or higher container deployment configuration map to deploy the HCL Experience API, HCL Content Composer, and HCL Digital Asset Management CF181 and higher components. Note: The config map name value used to support the CF181 or higher components must be the same as the HCL Digital Experience 9.5 CF181 and higher deployment. By default, the config map deployment name value is dx-deployment . Create a YAML file with the following config map settings: kind: `ConfigMap` metadata: name: dx-deployment Use the following example YAML ( dx-deploy-config-map.yaml ) to deploy the HCL Experience API, HCL Content Composer, and HCL Digital Asset Management CF181 or higher components. If deploying HCL Content Composer and HCL Digital Asset Management CF181 components, replace their file names in the sample YAML file services lines used. Note: It is possible to deploy the services for the HCL Experience API and HCL Content Composer and/or Digital Asset Management by removing either the HCL Content Composer or HCL Digital Asset Management service lines from the YAML file. ``` kind: ConfigMap metadata: name: dx-deployment data: dx.deploy.dam.persistence.tag: v1.0.0_20200622-1806 dx.deploy.dam.persistence.image: portal/persistence/postgres dx.deploy.dam.volume: volume name dx.deploy.dam.imgprocessor.tag: v95_CF181_20200622-1550 dx.deploy.remotesearch.tag: v95_CF181_20200622-1550 dx.deploy.dam.imgprocessor.image: portal/image-processor dx.deploy.dam.storageclass: dx-deploy-stg dx.deploy.remotesearch.image: dxrs dx.deploy.openldap.tag: v1.0.0-release_20200622_1592846796 dx.deploy.openldap.image: dx-openldap dx.deploy.contentui.tag: v1.0.0_20200622-1709 dx.deploy.contentui.image: portal/content-ui dx.deploy.remotesearch.enabled: 'true' dx.deploy.dam.tag: v1.0.0_20200622-1718 dx.deploy.experienceapi.tag: v1.0.0_20200622-1719 dx.deploy.experienceapi.image: portal/api/ringapi dx.deploy.dam.image: portal/media-library dx.deploy.openldap.enabled: 'true' dx.deploy.contentui.enabled: 'true' dx.deploy.experienceapi.enabled: 'true' dx.deploy.dam.enabled: 'true' dx.deploy.dam.operator.tag: v95_CF181_20200622-1756 dx.deploy.dam.operator.image: hcl-medialibrary-operator dx.deploy.remotesearch.volume.storageclass: gp2 ``` Notes: The deployment of HCL Content Composer and HCL Experience API components create: The dx.deploy.contentui.enabled and dx.deploy.experienceapi.enabled configurations tell the operator to deploy HCL Content Composer and HCL Experience API components. This defaults to using the same repository as the HCL Digital Experience 9.5 CF181 or higher container core deployment. Services dx-deployment-service-content-ui and dx-deployment-service-ring-api , and a route for each. Administrators can override the repository by adding the following to the config map entries: dx.deploy.contentui.repository The dx.deploy.dam.enabled tells the operator to deploy the HCL Digital Asset Management component. Note that there are 4 required sets of image/tag parameters: The HCL Digital Asset Management operator component uses prefixdx.deploy.dam.operator . The Postgres datastore component uses dx.deploy.dam.persistence . The HCL Digital Asset Management library services use dx.deploy.dam . The Image processor uses dx.deploy.dam.persistence . To override the repository values for the components above, use dx.deploy.COMPONENT.repository The last two parameters in the example YAML file provide the storage class and volume (must be ReadWriteMany ) for the HCL Digital Asset Management component. This is where the persistence layer maintains the datastore layer. The dx.deploy.dam.volume: volume name setting is optional if the storage class used/specified by dx.deploy.dam.storageclass is self-provisioning. A dx.dam.config.cors config map setting is auto-generated and provides the ability for Cross Origin Resource Sharing across Content Composer and Digital Asset Management resources. In the Digital Experience 9.5 core deployment, the dx.config.cors setting is set in the DX configuration map. Reference the Containerization Deployment pages for additional details. An additional self-provisioning volume is created for each of the HCL Digital Asset Management Persistence (Postgres) pods. The access mode of these self-provisioning persistent volumes must include ReadWriteOnce . If this volume is not present the images are lost and shows blank if/when the HCL Digital Asset Management library is restarted. Administrators can override the repository by adding to: dx.deploy.contentui.repository In addition, the following default settings are configurable: dx.deploy.contentui.resources.cpurequest , the default is 1. dx.deploy.contentui.resources.cpulimit , the default is 3. dx.deploy.contentui.resources.memoryrequest , the default is 2G. dx.deploy.contentui.resources.memorylimit , the default is 4G. dx.deploy.experienceapi.resources.cpurequest , the default is 1. dx.deploy.experienceapi.resources.cpulimit , the default is 3. dx.deploy.experienceapi.resources.memoryrequest , the default is 2G. dx.deploy.experienceapi.resources.memorylimit , the default is 4G. Additional configuration options are currently not supported. Deploy the YAML ( dx-deploy-config-map.yaml ) by issuing the following: Kubernetes command: ``` kubectl apply -f dx-deploy-config-map.yaml -n your-namespace - OpenShift command: - ``` oc project your-namespace followed by - ``` oc apply -f dx-deploy-config-map.yaml ``` Stop and restart the HCL Digital Experience 9.5 CF181 and higher container deployment. Note: If you are adding components for HCL Content Composer, HCL Digital Asset Management, and HCL Experience API to an existing HCL Digital Experience 9.5 environment (must be at level 9.5 CF181 or higher) deployment, you must stop the deployment and restart it with one (1) replica. Once it is fully started, you can safely scale it to N instances. Reminder : As outlined in this section, adding new components to a production deployment requires an outage and some setup time. It is advisable to plan carefully if you are currently running a Digital Experience container deployment in a supported Kubernetes environment. Change to the extracted hcl-dx-cloud-scripts directory. ./scripts/removeDx.sh NAMESPACE Note: This script removes resources from the existing deployment (pods, statefulsets, etc) but does not remove persisted data or existing configmaps. Remove the claimRef from the PersistedVolume. Note: Instructions to re-use the Persistent Volume may also be viewed in the Deploy HCL Digital Experience 9.5 Container to Amazon EKS topic. Open the persistent volume in a visual editor (vi) using the Kubernetes or OpenShift command line client command: kubectl edit pv <pv name> or oc edit pv <pv name> Remove the claimRef section: claimRef: apiVersion: v1 kind: PersistentVolumeClaim name: dx-deploy-pvc namespace: awseks-demo resourceVersion: \"488931120\" uid: ebd58361-0e2a-11ea-b02e-02f8fe687954 Ensure you get the ' persistentvolume/your_namespace edited ' message. Change to the extracted hcl-dx-cloud-scripts directory. ./scripts/deployDx.sh NAMESPACE REPLICAS REPOSITORY IMAGENAME IMAGETAG VOLUMENAME STORAGECLASS DBTYPE or ./scripts/deployDx.sh NAMESPACE REPLICAS REPOSITORY IMAGENAME IMAGETAG VOLUMENAME STORAGECLASS DBTYPE INGRESSIMAGE INGRESSTAG Note: You must restart the deployment with one (1) replica. Once it is fully started, you can safely scale it to N instances. Reminder : As outlined in this section, adding new components to a production deployment requires an outage and some setup time. It is advisable to plan carefully if you are currently running a Digital Experience container deployment in a supported Kubernetes environment. Access the HCL Content Composer and HCL Digital Asset Management components by navigating to Practitioner Studio > Web Content > Content , or Practitioner Studio > Digital Assets . https://your-portal.net/wps/myportal/Practitioner/Web Content/Content Library https://your-portal.net/wps/myportal/Practitioner/Digital Assets Access the HCL Experience API Explorer at the following URL: http://<HOST>:<PORT>dx/api/core/v1/explorer For example, http://127.0.0.1:3000/dx/api/core/v1/explorer (Optional) Configure Digital Asset Management with a CDN If you are using a content delivery network (CDN) such as Akamai , using Vary: Origin may prevent you from caching content. To bypass this limitation, your CDN configuration must strip the Vary header on the way in, to reinstate your ability to cache content. On the way out, you can append the Origin parameter to the Vary header when serving a response using 'Modify Outgoing Response Header' . Parent topic: Operator-based deployment","title":"Install the HCL Digital Experience 9.5 components"},{"location":"containerization/install_config_cc_dam/#install-the-hcl-digital-experience-95-components","text":"This section provides a high-level overview of the architecture and the steps to install, configure, and update the HCL Digital Experience 9.5 components: Experience API, Content Composer, and Digital Asset Management. Video : Install HCL Digital Experience components (Experience API, Content Composer, and Digital Asset Management) on Red Hat OpenShift","title":"Install the HCL Digital Experience 9.5 components"},{"location":"containerization/install_config_cc_dam/#high-level-architecture-and-topology","text":"","title":"High-level architecture and topology"},{"location":"containerization/install_config_cc_dam/#prerequisite","text":"DX Administrators can choose to install the DX Core containers then proceed to install Content Composer and Digital Asset Management containers to the supported Kubernetes container platforms as outlined in the following steps. See the Deployment section for the latest DX 9.5 container file listings. Deploying the HCL Digital Asset Management or Content Composer components is supported on Kubernetes or OpenShift platforms and is not supported for deployment to Docker platforms. See the System requirements section for more information and the latest updates. Note: For initial deployments, it is recommended to install the HCL Digital Experience 9.5 components (Experience API, Content Composer, and Digital Asset Management) to a non-production (test) HCL Digital Experience 9.5 environment.","title":"Prerequisite"},{"location":"containerization/install_config_cc_dam/#installing-the-hcl-digital-experience-95-container-components","text":"Follow these steps to install your HCL Digital Experience 9.5 components (Experience API, Content Composer, and Digital Asset Management): Asset Management components If installing in conjunction with HCL Digital Experience 9.5 CF181 or higher, follow the instructions in the Container Deployment topic. This page lists the latest HCL Digital Experience 9.5 CF181 or higher product images available and how to obtain and load the images into your Docker repository before continuing with these instructions. If installing to an existing HCL Digital Experience 9.5 CF181 or higher Kubernetes environment: Verify that you can access the HCL Digital Experience 9.5 CF181 or higher Practitioner Studio by logging in to your HCL Digital Experience 9.5 Practitioner Studio interface. See the HCL Digital Experience 9.5 Practitioner Studio topic for information. Download and extract the HCL Digital Experience 9.5 components from your Digital Experience entitlements from the HCL Software License Portal to the local file system. Sample download package name : hcl-dx-kubernetes-v95-CF181-other.zip or higher, depending on the DX 9.5 Container Update version you are installing. Example : **hcl-dx-kubernetes-v95-CF181-other.zip:** HCL Experience API (Docker image) - hcl-dx-ringapi-image-v1.0.0_xxxxxxxx-xxxx.tar.gz Postgres - hcl-dx-postgres-image-v1.0.0_xxxxxxxx-xxxx.tar.gz HCL Digital Asset Management (Operator) - hcl-dx-medialibrary-operator-image-v95_CF181_xxxxxxxx-xxxx.tar.gz HCL Digital Asset Management (Image processor) - hcl-dx-image-processor-image-v1.0.0_xxxxxxxx-xxxx.tar.gz HCL Digital Asset Management (Docker image) - hcl-dx-digital-asset-manager-image-v1.0.0_xxxxxxxx-xxxx.tar.gz HCL Content Composer (Docker image) - hcl-dx-content-composer-image-v1.0.0_xxxxxxxx-xxxx.tar.gz Extract the images to the local file system. Open a terminal window and change to the root directory of the extracted package images. Load the images into your Docker environment. Example: Docker load < hcl-dx-ringapi-image-v1.0.0_xxxxxxxx-xxxx.tar.gz Docker load < hcl-dx-medialibrary-operator-image-v95_CF181_xxxxxxxx-xxxx.tar.gz Docker load < hcl-dx-digital-asset-manager-image-v1.0.0_xxxxxxxx-xxxx.tar.gz Docker load < hcl-dx-content-composer-image-v1.0.0_xxxxxxxx-xxxx.tar.gz Docker load < hcl-dx-image-processor-image-v1.0.0_xxxxxxxx-xxxx.tar.gz Docker load < hcl-dx-postgres-image-v1.0.0_xxxxxxxx-xxxx.tar.gz Note: Either -i or < works for the load command. In case you encounter an error when using one, try running the command using the other. Get the Docker images in your local Docker repository to your target Kubernetes system by tagging and pushing them appropriately. If you used docker load to get your images on the target environment, proceed to the next step. Install the HCL Digital Experience 9.5 CF181 or higher Experience API, Content Composer, and Digital Asset Management components by using the following steps. Container Update CF182 or higher is required if deploying to Microsoft Azure Kubernetes Service (AKS). Notes: The config map name value used must be the same as the HCL Digital Experience 9.5 CF181 and higher deployment. By default, the config map deployment name value is dx-deployment. The HCL Experience API must be installed to access and use the HCL Content Composer and the HCL Digital Asset Management features. Reminder : If you are currently running an HCL Digital Experience 9.5 CF181 or higher Kubernetes deployment in production, adding new components requires an outage and setup time so plan it carefully. If you are creating the dx-deployment config map, you can use the following content (adjusting the image tag values to match your environment) to create a YAML file and use a command line client to create the config map which is used to deploy the HCL Experience API, HCL Content Composer, and HCL Digital Asset Management CF181 and later components. Note: It is possible to deploy the services for the HCL Experience API and HCL Content Composer and/or Digital Asset Management, if either of those combinations is preferred, by removing either the HCL Content Composer or HCL Digital Asset Management service lines from the YAML file. Confirm your HCL Digital Experience 9.5 CF181 and higher container instance is up and running on Amazon EKS, Microsoft Azure (CF182 or higher), or Red Hat OpenShift platform. Note: If you are adding components for HCL Content Composer, HCL Digital Asset Management, and HCL Experience API to an existing HCL Digital Experience 9.5 environment (must be at level 9.5 CF181 or higher) deployment, you must stop the deployment and restart it with one (1) replica. Reminder : For an initial deployment, it is not advisable to deploy these components to a production HCL Digital Experience 9.5 deployment. Update the HCL Digital Experience 9.5 CF181 or higher container deployment configuration map to deploy the HCL Experience API, HCL Content Composer, and HCL Digital Asset Management CF181 and higher components. Note: The config map name value used to support the CF181 or higher components must be the same as the HCL Digital Experience 9.5 CF181 and higher deployment. By default, the config map deployment name value is dx-deployment . Create a YAML file with the following config map settings: kind: `ConfigMap` metadata: name: dx-deployment Use the following example YAML ( dx-deploy-config-map.yaml ) to deploy the HCL Experience API, HCL Content Composer, and HCL Digital Asset Management CF181 or higher components. If deploying HCL Content Composer and HCL Digital Asset Management CF181 components, replace their file names in the sample YAML file services lines used. Note: It is possible to deploy the services for the HCL Experience API and HCL Content Composer and/or Digital Asset Management by removing either the HCL Content Composer or HCL Digital Asset Management service lines from the YAML file. ``` kind: ConfigMap metadata: name: dx-deployment data: dx.deploy.dam.persistence.tag: v1.0.0_20200622-1806 dx.deploy.dam.persistence.image: portal/persistence/postgres dx.deploy.dam.volume: volume name dx.deploy.dam.imgprocessor.tag: v95_CF181_20200622-1550 dx.deploy.remotesearch.tag: v95_CF181_20200622-1550 dx.deploy.dam.imgprocessor.image: portal/image-processor dx.deploy.dam.storageclass: dx-deploy-stg dx.deploy.remotesearch.image: dxrs dx.deploy.openldap.tag: v1.0.0-release_20200622_1592846796 dx.deploy.openldap.image: dx-openldap dx.deploy.contentui.tag: v1.0.0_20200622-1709 dx.deploy.contentui.image: portal/content-ui dx.deploy.remotesearch.enabled: 'true' dx.deploy.dam.tag: v1.0.0_20200622-1718 dx.deploy.experienceapi.tag: v1.0.0_20200622-1719 dx.deploy.experienceapi.image: portal/api/ringapi dx.deploy.dam.image: portal/media-library dx.deploy.openldap.enabled: 'true' dx.deploy.contentui.enabled: 'true' dx.deploy.experienceapi.enabled: 'true' dx.deploy.dam.enabled: 'true' dx.deploy.dam.operator.tag: v95_CF181_20200622-1756 dx.deploy.dam.operator.image: hcl-medialibrary-operator dx.deploy.remotesearch.volume.storageclass: gp2 ``` Notes: The deployment of HCL Content Composer and HCL Experience API components create: The dx.deploy.contentui.enabled and dx.deploy.experienceapi.enabled configurations tell the operator to deploy HCL Content Composer and HCL Experience API components. This defaults to using the same repository as the HCL Digital Experience 9.5 CF181 or higher container core deployment. Services dx-deployment-service-content-ui and dx-deployment-service-ring-api , and a route for each. Administrators can override the repository by adding the following to the config map entries: dx.deploy.contentui.repository The dx.deploy.dam.enabled tells the operator to deploy the HCL Digital Asset Management component. Note that there are 4 required sets of image/tag parameters: The HCL Digital Asset Management operator component uses prefixdx.deploy.dam.operator . The Postgres datastore component uses dx.deploy.dam.persistence . The HCL Digital Asset Management library services use dx.deploy.dam . The Image processor uses dx.deploy.dam.persistence . To override the repository values for the components above, use dx.deploy.COMPONENT.repository The last two parameters in the example YAML file provide the storage class and volume (must be ReadWriteMany ) for the HCL Digital Asset Management component. This is where the persistence layer maintains the datastore layer. The dx.deploy.dam.volume: volume name setting is optional if the storage class used/specified by dx.deploy.dam.storageclass is self-provisioning. A dx.dam.config.cors config map setting is auto-generated and provides the ability for Cross Origin Resource Sharing across Content Composer and Digital Asset Management resources. In the Digital Experience 9.5 core deployment, the dx.config.cors setting is set in the DX configuration map. Reference the Containerization Deployment pages for additional details. An additional self-provisioning volume is created for each of the HCL Digital Asset Management Persistence (Postgres) pods. The access mode of these self-provisioning persistent volumes must include ReadWriteOnce . If this volume is not present the images are lost and shows blank if/when the HCL Digital Asset Management library is restarted. Administrators can override the repository by adding to: dx.deploy.contentui.repository In addition, the following default settings are configurable: dx.deploy.contentui.resources.cpurequest , the default is 1. dx.deploy.contentui.resources.cpulimit , the default is 3. dx.deploy.contentui.resources.memoryrequest , the default is 2G. dx.deploy.contentui.resources.memorylimit , the default is 4G. dx.deploy.experienceapi.resources.cpurequest , the default is 1. dx.deploy.experienceapi.resources.cpulimit , the default is 3. dx.deploy.experienceapi.resources.memoryrequest , the default is 2G. dx.deploy.experienceapi.resources.memorylimit , the default is 4G. Additional configuration options are currently not supported. Deploy the YAML ( dx-deploy-config-map.yaml ) by issuing the following: Kubernetes command: ``` kubectl apply -f dx-deploy-config-map.yaml -n your-namespace - OpenShift command: - ``` oc project your-namespace followed by - ``` oc apply -f dx-deploy-config-map.yaml ``` Stop and restart the HCL Digital Experience 9.5 CF181 and higher container deployment. Note: If you are adding components for HCL Content Composer, HCL Digital Asset Management, and HCL Experience API to an existing HCL Digital Experience 9.5 environment (must be at level 9.5 CF181 or higher) deployment, you must stop the deployment and restart it with one (1) replica. Once it is fully started, you can safely scale it to N instances. Reminder : As outlined in this section, adding new components to a production deployment requires an outage and some setup time. It is advisable to plan carefully if you are currently running a Digital Experience container deployment in a supported Kubernetes environment. Change to the extracted hcl-dx-cloud-scripts directory. ./scripts/removeDx.sh NAMESPACE Note: This script removes resources from the existing deployment (pods, statefulsets, etc) but does not remove persisted data or existing configmaps. Remove the claimRef from the PersistedVolume. Note: Instructions to re-use the Persistent Volume may also be viewed in the Deploy HCL Digital Experience 9.5 Container to Amazon EKS topic. Open the persistent volume in a visual editor (vi) using the Kubernetes or OpenShift command line client command: kubectl edit pv <pv name> or oc edit pv <pv name> Remove the claimRef section: claimRef: apiVersion: v1 kind: PersistentVolumeClaim name: dx-deploy-pvc namespace: awseks-demo resourceVersion: \"488931120\" uid: ebd58361-0e2a-11ea-b02e-02f8fe687954 Ensure you get the ' persistentvolume/your_namespace edited ' message. Change to the extracted hcl-dx-cloud-scripts directory. ./scripts/deployDx.sh NAMESPACE REPLICAS REPOSITORY IMAGENAME IMAGETAG VOLUMENAME STORAGECLASS DBTYPE or ./scripts/deployDx.sh NAMESPACE REPLICAS REPOSITORY IMAGENAME IMAGETAG VOLUMENAME STORAGECLASS DBTYPE INGRESSIMAGE INGRESSTAG Note: You must restart the deployment with one (1) replica. Once it is fully started, you can safely scale it to N instances. Reminder : As outlined in this section, adding new components to a production deployment requires an outage and some setup time. It is advisable to plan carefully if you are currently running a Digital Experience container deployment in a supported Kubernetes environment. Access the HCL Content Composer and HCL Digital Asset Management components by navigating to Practitioner Studio > Web Content > Content , or Practitioner Studio > Digital Assets . https://your-portal.net/wps/myportal/Practitioner/Web Content/Content Library https://your-portal.net/wps/myportal/Practitioner/Digital Assets Access the HCL Experience API Explorer at the following URL: http://<HOST>:<PORT>dx/api/core/v1/explorer For example, http://127.0.0.1:3000/dx/api/core/v1/explorer","title":"Installing the HCL Digital Experience 9.5 Container components"},{"location":"containerization/install_config_cc_dam/#optional-configure-digital-asset-management-with-a-cdn","text":"If you are using a content delivery network (CDN) such as Akamai , using Vary: Origin may prevent you from caching content. To bypass this limitation, your CDN configuration must strip the Vary header on the way in, to reinstate your ability to cache content. On the way out, you can append the Origin parameter to the Vary header when serving a response using 'Modify Outgoing Response Header' . Parent topic: Operator-based deployment","title":"(Optional) Configure Digital Asset Management with a CDN"},{"location":"containerization/kubernetes_eks/","text":"Deploy DX Container to Amazon EKS Learn how to deploy, find, understand, and customize the different releases of HCL Digital Experience 9.5 containers, along with Ambassador to Kubernetes, as verified in Amazon Elastic Kubernetes Service (Amazon EKS) . Deploy DX Container to Amazon EKS Learn how to deploy different releases of HCL Digital Experience 9.5 containers, along with Ambassador to Kubernetes, as verified in Amazon Elastic Kubernetes Service (Amazon EKS) . Finding the Kubernetes EKS deployment This section describes how to find your HCL DX deployment. Understanding the HCL DX 9.5 container deployment on Amazon EKS This section describes the output and artifacts created when deploying HCL Digital Experience 9.5 container release in on Amazon Elastic Kubernetes Service (EKS). Customizing the Kubernetes EKS deployment This section describes how to customize your HCL Portal deployment. Parent topic: HCL Digital Experience 9.5 Container Deployment","title":"Deploy DX Container to Amazon EKS"},{"location":"containerization/kubernetes_eks/#deploy-dx-container-to-amazon-eks","text":"Learn how to deploy, find, understand, and customize the different releases of HCL Digital Experience 9.5 containers, along with Ambassador to Kubernetes, as verified in Amazon Elastic Kubernetes Service (Amazon EKS) . Deploy DX Container to Amazon EKS Learn how to deploy different releases of HCL Digital Experience 9.5 containers, along with Ambassador to Kubernetes, as verified in Amazon Elastic Kubernetes Service (Amazon EKS) . Finding the Kubernetes EKS deployment This section describes how to find your HCL DX deployment. Understanding the HCL DX 9.5 container deployment on Amazon EKS This section describes the output and artifacts created when deploying HCL Digital Experience 9.5 container release in on Amazon Elastic Kubernetes Service (EKS). Customizing the Kubernetes EKS deployment This section describes how to customize your HCL Portal deployment. Parent topic: HCL Digital Experience 9.5 Container Deployment","title":"Deploy DX Container to Amazon EKS"},{"location":"containerization/kubernetes_eks_cf191andearlier/","text":"Deploy DX CF191 and earlier release Containers to Amazon EKS This section describes how to deploy HCL Digital Experience 9.5 CF191 and earlier release containers, along with the Ambassador, to Kubernetes as verified in Amazon Elastic Kubernetes Service (Amazon EKS) . Prerequisites Prior to using the procedure below, it is assumed that the HCL DX Administrator is generally experienced in using Kubernetes. Additionally, the DX Administrator must have the appropriate access to the target environment. If not, following are some preliminary steps that need to be taken. Setup KUBECONFIG to refer to the target server. This will ensure any kubectl commands executed locally affect the target environment. Amazon EKS Cluster The following tools must be installed on a machine other than the Portal server: Docker AWS Command Line Interface (CLI) - used to get image details. Volume requirement: Requires an AccessMode of ReadWriteMany Requires a minimum of 40 GB , with the default request set to 100 GB RECLAIM POLICY = Retain For DAM, additional volume is needed. For more details on storage class and volume, see Sample storage class and volume . Note: HCL Digital Experience is input-output (I/O) intensive which requires a high performing file system for optimization; NFS is an option for this. Hardware: 4 cores / 7 GB - - - 5 cores / 9 GB Amazon Elastic Container Registry (ECR) or any container registry access, for tagging and pushing. See the support topic for the HCL Digital Experience detailed system requirements . Download and extract the contents of the HCL DX 9.5 package to the local (local to cloud or system). If deploying HCL Digital Experience 9.5 Container Update release, the image and package names are as follows: CF183-core.zip files: HCL DX notices V9.5 CF183.txt hcl-dx-ambassador-image-154.tar.gz hcl-dx-cloud-operator-image-v95_CF183_20200819-1711.tar.gz hcl-dx-cloud-scripts-v95_CF183_20200819-1711.zip hcl-dx-core-image-v95_CF183_20200819-1159.tar.gz hcl-dx-redis-image-5.0.1.tar.gz Note: Images included in the \u2018other\u2019 package released with CF183 are optional and used to support use of OpenLDAP, Remote Search, the Experience API, Content Composer, and Digital Asset Management components and services. About this task Follow these steps to deploy HCL Digital Experience 9.5 CF183 and higher container release, along with Ambassador to Kubernetes, as verified in Amazon Elastic Kubernetes Service (Amazon EKS) . This deployment relies heavily on Kubernetes Operators for full functionality. Note: Reference the latest HCL DX 9.5 Container Release and Update file listings in the Docker deployment topic. DX Container Management Change directory Open a terminal window and change to the root directory of the extracted package. Docker load Load the containers into your Docker repository: ``` docker load < hcl-dx-core-image-v95_CF183_20200819-1159.tar.gz - ``` docker load < hcl-dx-ambassador-image-154.tar.gz - ``` docker load < hcl-dx-cloud-operator-image-v95_CF183_20200819-1711.tar.gz - ``` docker load < hcl-dx-redis-image-5.0.1.tar.gz **Note:** Either **`-i`** or **`<`** works for the load command. In case you encounter an error when using one, try running the command using the other. ![](../images/container_eks_load_01.png \"Loading containers into your Docker repository\") Docker tag and push Get the Docker images in your local Docker repository to your target Kubernetes system by tagging and pushing them appropriately. If you used docker load to get your images on the target environment, proceed to the next step. ``` docker tag - ``` docker push <image:tag> DX Deployment Unzip Extract the HCL DX deployment scripts onto your environment as follows: unzip hcl-dx-cloud-scripts-v95_CF183_20200819-1711.zip Change directory Change to the extracted files directory, cd hcl-dx-cloud-scripts Custom resource definition Install the DxDeployment custom resource definition. Do not modify the git_v1_dxdeployment_crd.yaml file. Customize ./deploy/crds/git_v1_dxdeployment_cr.yaml, if required Use either of the following commands: ``` kubectl create -f hcl-dx-cloud-scripts/deploy/crds/git_v1_dxdeployment_crd.yaml - ``` ./scripts/deployCrd.sh Persistence volume Create (or have the Kubernetes Administrator create) a persistent volume and storage class where the AccessMode must be ReadWriteMany and the persistent volume reclaim policy must be Retain . For more details on storage class and volume, see Sample storage class and volume NFS server Provide the HCL DX 9.5 CF183 and higher Docker image access to the volume mount created in order to copy the profile. There are various ways to do this and NFS is one option. If NFS is used, here are the parameters that have been tested to work: rw, (Default) sync , (Default after NFS 1.0, means that the server does not reply until after the commit) insecure ,** (Requires requests originate on ports less than 1024) root_squash ,** (Map requests to the nobody user). hard ,** (Required because this means the system will keep trying to write until it works.) nfsvers=4.1 , rsize=8388608 , (Avoids dropped packages, default 8192) wsize=8388608 , (Avoids dropped packages, default 8192) timeo=600 , (60 seconds) retrans=2 , (Number of retries after a time out) noresvport ** (Tells the NFS client to use a new Transmission Control Protocol (TCP) source port when a network connection is reestablished. Doing this helps make sure that the EFS file system has uninterrupted availability after a network recovery event.) Note: Those marked with ** are critical and, in many cases, it is recommended to have the rsize and wsize set to 8388608 . Update YAML Replace the REPOSITORY NAME , IMAGE TAG , AMBASSADOR , and REDIS values in operator.yaml Deploy Create the DX container deployment. Run the deployDx.sh script to create the namespace, install the project scoped service account, role, role binding, operator, and deployment. ./scripts/deployDx.sh NAMESPACE REPLICAS REPOSITORY IMAGENAME IMAGETAG VOLUMENAME STORAGECLASS DBTYPE INGRESSIMAGE INGRESSTAG NAMESPACE - the project or the namespace to create or use for deployment. This namespace will be used in subsequent commands. REPLICAS - the number of initial instances for the deployment. REPOSITORY - your local repository, the repository used by Kubernetes. IMAGENAME - the name of the dxCore image, as added to the repository above. IMAGETAG - the tag for the target image as added to the repository above. VOLUMENAME - the volume to be used by the deployment for persistence, this must use AccessMode ReadWriteMany . STORAGECLASS - the storage class name used to create the persistent volume. DBTYPE - the database type. By default, and initially, this is Derby. HCL DX 9.5 uses Apache Derby, Oracle Database, IBM DB2, or Microsoft SQL Server. Acceptable values are derby , oracle , db2 , or msSql . INGRESSIMAGE - The image name to use for ambassador (Native K8s). INGRESSTAG - The image tag to use for ambassador (Native K8s). For example: ``` $cd hcl-dx-cloud-scripts $scripts/deployDx.sh dx-11 1 REPO_NAME dxen v95_CF183_20200818-1342 dx-pv-11 dx-deploy-stg derby ambassador 154 ``` Generate TLS Certificate Create a TLS certification to be used by the deployment: For development purposes: Using OpenSSL, you can create a private key: openssl genrsa -out my-key.pem 2048 Using OpenSSL, you can create a certificate signed by the private key: openssl req -x509 -key my-key.pem -out my-cert.pem -days 365 -subj '/CN=my-cert Create a TLS certification: kubectl create secret tls dx-tls-cert --cert=my-cert.pem --key=my-key.pem -n aws-mynamespace Note: The default name is the dx-tls-cert this can be changed in the configuration. aws-mynamespace is your Kubernetes namespace. You can set your preferred namespace but you must consistently use this namespace in subsequent commands. See Customizing the Kubernetes deployment . Final Output External IP from Load balancer in the below example can be used to access PORTAL Output $ kubectl get all -n NAMESPACE https://EXTERNAL_IP/wps/portal Parent topic: Deploy DX Container to Amazon EKS","title":"Deploy DX CF191 and earlier release Containers to Amazon EKS"},{"location":"containerization/kubernetes_eks_cf191andearlier/#deploy-dx-cf191-and-earlier-release-containers-to-amazon-eks","text":"This section describes how to deploy HCL Digital Experience 9.5 CF191 and earlier release containers, along with the Ambassador, to Kubernetes as verified in Amazon Elastic Kubernetes Service (Amazon EKS) .","title":"Deploy DX CF191 and earlier release Containers to Amazon EKS"},{"location":"containerization/kubernetes_eks_cf191andearlier/#prerequisites","text":"Prior to using the procedure below, it is assumed that the HCL DX Administrator is generally experienced in using Kubernetes. Additionally, the DX Administrator must have the appropriate access to the target environment. If not, following are some preliminary steps that need to be taken. Setup KUBECONFIG to refer to the target server. This will ensure any kubectl commands executed locally affect the target environment. Amazon EKS Cluster The following tools must be installed on a machine other than the Portal server: Docker AWS Command Line Interface (CLI) - used to get image details. Volume requirement: Requires an AccessMode of ReadWriteMany Requires a minimum of 40 GB , with the default request set to 100 GB RECLAIM POLICY = Retain For DAM, additional volume is needed. For more details on storage class and volume, see Sample storage class and volume . Note: HCL Digital Experience is input-output (I/O) intensive which requires a high performing file system for optimization; NFS is an option for this. Hardware: 4 cores / 7 GB - - - 5 cores / 9 GB Amazon Elastic Container Registry (ECR) or any container registry access, for tagging and pushing. See the support topic for the HCL Digital Experience detailed system requirements . Download and extract the contents of the HCL DX 9.5 package to the local (local to cloud or system). If deploying HCL Digital Experience 9.5 Container Update release, the image and package names are as follows: CF183-core.zip files: HCL DX notices V9.5 CF183.txt hcl-dx-ambassador-image-154.tar.gz hcl-dx-cloud-operator-image-v95_CF183_20200819-1711.tar.gz hcl-dx-cloud-scripts-v95_CF183_20200819-1711.zip hcl-dx-core-image-v95_CF183_20200819-1159.tar.gz hcl-dx-redis-image-5.0.1.tar.gz Note: Images included in the \u2018other\u2019 package released with CF183 are optional and used to support use of OpenLDAP, Remote Search, the Experience API, Content Composer, and Digital Asset Management components and services.","title":"Prerequisites"},{"location":"containerization/kubernetes_eks_cf191andearlier/#about-this-task","text":"Follow these steps to deploy HCL Digital Experience 9.5 CF183 and higher container release, along with Ambassador to Kubernetes, as verified in Amazon Elastic Kubernetes Service (Amazon EKS) . This deployment relies heavily on Kubernetes Operators for full functionality. Note: Reference the latest HCL DX 9.5 Container Release and Update file listings in the Docker deployment topic.","title":"About this task"},{"location":"containerization/kubernetes_eks_cf191andearlier/#dx-container-management","text":"Change directory Open a terminal window and change to the root directory of the extracted package. Docker load Load the containers into your Docker repository: ``` docker load < hcl-dx-core-image-v95_CF183_20200819-1159.tar.gz - ``` docker load < hcl-dx-ambassador-image-154.tar.gz - ``` docker load < hcl-dx-cloud-operator-image-v95_CF183_20200819-1711.tar.gz - ``` docker load < hcl-dx-redis-image-5.0.1.tar.gz **Note:** Either **`-i`** or **`<`** works for the load command. In case you encounter an error when using one, try running the command using the other. ![](../images/container_eks_load_01.png \"Loading containers into your Docker repository\") Docker tag and push Get the Docker images in your local Docker repository to your target Kubernetes system by tagging and pushing them appropriately. If you used docker load to get your images on the target environment, proceed to the next step. ``` docker tag - ``` docker push <image:tag>","title":"DX Container Management"},{"location":"containerization/kubernetes_eks_cf191andearlier/#dx-deployment","text":"Unzip Extract the HCL DX deployment scripts onto your environment as follows: unzip hcl-dx-cloud-scripts-v95_CF183_20200819-1711.zip Change directory Change to the extracted files directory, cd hcl-dx-cloud-scripts Custom resource definition Install the DxDeployment custom resource definition. Do not modify the git_v1_dxdeployment_crd.yaml file. Customize ./deploy/crds/git_v1_dxdeployment_cr.yaml, if required Use either of the following commands: ``` kubectl create -f hcl-dx-cloud-scripts/deploy/crds/git_v1_dxdeployment_crd.yaml - ``` ./scripts/deployCrd.sh Persistence volume Create (or have the Kubernetes Administrator create) a persistent volume and storage class where the AccessMode must be ReadWriteMany and the persistent volume reclaim policy must be Retain . For more details on storage class and volume, see Sample storage class and volume NFS server Provide the HCL DX 9.5 CF183 and higher Docker image access to the volume mount created in order to copy the profile. There are various ways to do this and NFS is one option. If NFS is used, here are the parameters that have been tested to work: rw, (Default) sync , (Default after NFS 1.0, means that the server does not reply until after the commit) insecure ,** (Requires requests originate on ports less than 1024) root_squash ,** (Map requests to the nobody user). hard ,** (Required because this means the system will keep trying to write until it works.) nfsvers=4.1 , rsize=8388608 , (Avoids dropped packages, default 8192) wsize=8388608 , (Avoids dropped packages, default 8192) timeo=600 , (60 seconds) retrans=2 , (Number of retries after a time out) noresvport ** (Tells the NFS client to use a new Transmission Control Protocol (TCP) source port when a network connection is reestablished. Doing this helps make sure that the EFS file system has uninterrupted availability after a network recovery event.) Note: Those marked with ** are critical and, in many cases, it is recommended to have the rsize and wsize set to 8388608 . Update YAML Replace the REPOSITORY NAME , IMAGE TAG , AMBASSADOR , and REDIS values in operator.yaml Deploy Create the DX container deployment. Run the deployDx.sh script to create the namespace, install the project scoped service account, role, role binding, operator, and deployment. ./scripts/deployDx.sh NAMESPACE REPLICAS REPOSITORY IMAGENAME IMAGETAG VOLUMENAME STORAGECLASS DBTYPE INGRESSIMAGE INGRESSTAG NAMESPACE - the project or the namespace to create or use for deployment. This namespace will be used in subsequent commands. REPLICAS - the number of initial instances for the deployment. REPOSITORY - your local repository, the repository used by Kubernetes. IMAGENAME - the name of the dxCore image, as added to the repository above. IMAGETAG - the tag for the target image as added to the repository above. VOLUMENAME - the volume to be used by the deployment for persistence, this must use AccessMode ReadWriteMany . STORAGECLASS - the storage class name used to create the persistent volume. DBTYPE - the database type. By default, and initially, this is Derby. HCL DX 9.5 uses Apache Derby, Oracle Database, IBM DB2, or Microsoft SQL Server. Acceptable values are derby , oracle , db2 , or msSql . INGRESSIMAGE - The image name to use for ambassador (Native K8s). INGRESSTAG - The image tag to use for ambassador (Native K8s). For example: ``` $cd hcl-dx-cloud-scripts $scripts/deployDx.sh dx-11 1 REPO_NAME dxen v95_CF183_20200818-1342 dx-pv-11 dx-deploy-stg derby ambassador 154 ```","title":"DX Deployment"},{"location":"containerization/kubernetes_eks_cf191andearlier/#generate-tls-certificate","text":"Create a TLS certification to be used by the deployment: For development purposes: Using OpenSSL, you can create a private key: openssl genrsa -out my-key.pem 2048 Using OpenSSL, you can create a certificate signed by the private key: openssl req -x509 -key my-key.pem -out my-cert.pem -days 365 -subj '/CN=my-cert Create a TLS certification: kubectl create secret tls dx-tls-cert --cert=my-cert.pem --key=my-key.pem -n aws-mynamespace Note: The default name is the dx-tls-cert this can be changed in the configuration. aws-mynamespace is your Kubernetes namespace. You can set your preferred namespace but you must consistently use this namespace in subsequent commands. See Customizing the Kubernetes deployment .","title":"Generate TLS Certificate"},{"location":"containerization/kubernetes_eks_cf191andearlier/#final-output","text":"External IP from Load balancer in the below example can be used to access PORTAL Output $ kubectl get all -n NAMESPACE https://EXTERNAL_IP/wps/portal Parent topic: Deploy DX Container to Amazon EKS","title":"Final Output"},{"location":"containerization/kubernetes_eks_cf192andlater/","text":"Deploy DX CF192 and later release Containers to Amazon EKS This section describes how to deploy HCL Digital Experience 9.5 CF192 and later release containers, along with the Ambassador, to Kubernetes as verified in Amazon Elastic Kubernetes Service (Amazon EKS) . Prerequisites Prior to using the following procedures, it is assumed that the HCL DX Administrator is generally experienced in using Kubernetes. Additionally, the DX Administrator must have the appropriate access to the target environment. If not, the following are some preliminary steps that must be taken. Setup KUBECONFIG to refer to the target server. This ensures any kubectl commands executed locally affect the target environment. Amazon EKS Cluster The following tools must be installed on a machine other than the Portal server: Docker AWS Command Line Interface (CLI) - used to get image details. dxctl tool - If deploying Digital Experience Container Update CF192 or later, the dcxtl tool is used to install and configure the deployment. Documentation resource: Deploy DX Container to Microsoft Azure Kubernetes Service (AKS) Volume requirement: Requires an AccessMode of ReadWriteMany Requires a minimum of 40 GB , with the default request set to 100 GB RECLAIM POLICY = Retain For DAM, additional volume is needed. For more details on storage class and volume, see Sample storage class and volume . Note: HCL Digital Experience is input-output (I/O) intensive which requires a high performing file system for optimization; NFS is an option for this. Hardware: 4 cores / 7 GB - - - 5 cores / 9 GB Amazon Elastic Container Registry (ECR) or any container registry access, for tagging and pushing. See the support topic for the HCL Digital Experience detailed system requirements . Download and extract the contents of the HCL DX 9.5 package to the local file system. This can be a local workstation or a local cloud platform. Note: Reference the latest HCL DX 9.5 Container Release and Update file listings in the Docker deployment topic. If deploying HCL Digital Experience 9.5 Container Update CF192 release, the image and package names are as follows: CF192-core.zip files: HCL DX notices V9.5 CF192.txt dxclient_v1.2.0_20210305-1758.zip hcl-dx-ambassador-image-154.tar.gz hcl-dx-cloud-operator-image-v95_CF192_20210305-2309.tar.gz hcl-dx-cloud-scripts-v95_CF192_20210305-2309.zip hcl-dx-content-composer-image-v1.6.0_20210305-1756.tar.gz hcl-dx-core-image-v95_CF192_20210305-1758.tar.gz hcl-dx-digital-asset-management-operator-image-v95_CF192_20210305-1757.tar.gz hcl-dx-digital-asset-manager-image-v1.6.0_20210305-1802.tar.gz hcl-dx-experience-api-sample-ui-v0.2.0.20210305-1805.zip hcl-dx-image-processor-image-v1.6.0_20210305-1758.tar.gz hcl-dx-openldap-image-v1.0.0-master_20210305_1614986151.tar.gz hcl-dx-postgres-image-v1.6.0_20210305-1800.tar.gz hcl-dx-redis-image-5.0.1.tar.gz hcl-dx-remote-search-image-v95_CF192_20210305-1758.tar.gz hcl-dx-ringapi-image-v1.6.0_20210305-1802.tar.gz Note: Images included in the \u2018other\u2019 package released with CF192 are optional (in addition to HCL DX 9.5 core Portal and Web Content Manager) and are used to support the use of OpenLDAP, Remote Search, the Experience API, Content Composer, and Digital Asset Management components and services. About this task Follow these steps to deploy HCL Digital Experience 9.5 CF192 and later container release, along with Ambassador to Kubernetes, as verified in Amazon Elastic Kubernetes Service (Amazon EKS) . This deployment relies heavily on Kubernetes Operators for full functionality. If deploying a Container Update CF191 or earlier, view the instructions to deploy using script-based commands , instead of the dxctl tool commands used in this section. DX Container Management Follow these steps to deploy the HCL Digital Experience 9.5 CF192 and later container release in Amazon EKS Change directory Open a terminal window and change to the root directory of the extracted package. Docker load Load the containers into your Docker repository: ``` docker load < hcl-dx-core-image-v95_CF192_20210225-004909.tar.gz - ``` docker load < hcl-dx-ambassador-image-154.tar.gz - ``` docker load < hcl-dx-cloud-operator-image-v95_CF192_20210225-0546.tar.gz - ``` docker load < hcl-dx-image-processor-image-v1.6.0_20210226-0014.tar.gz - ``` docker load < hcl-dx-digital-asset-management-operator-image-v95_CF192_20210226-0040.tar.gz - ``` docker load < hcl-dx-postgres-image-v1.6.0_20210226-0009.tar.gz - ``` docker load < hcl-dx-ringapi-image-v1.6.0_20210226-0055.tar.gz - ``` docker load < hcl-dx-redis-image-5.0.1.tar.gz **Note:** Either **`-i`** or **`<`** works for the load command. In case you encounter an error when using one, try running the command using the other. Docker tag and push Get the Docker images in your local Docker repository to your target Kubernetes system by tagging and pushing them appropriately. If you used docker load to get your images on the target environment, proceed to the next step. ``` docker tag - ``` docker push <image:tag> Persistence volume Set the Persistent volume Create (or have the Kubernetes Administrator create) a persistent volume and storage class where the AccessMode must be ReadWriteMany and the persistent volume reclaim policy must be Retain . For more details on storage class and volume, see Sample storage class and volume NFS server Provide the HCL DX 9.5 CF192 and later Docker image access to the volume mount created in order to copy the profile. There are various ways to do this and NFS is one option. If NFS is used, following are the parameters that are tested to work: rw, (Default) sync , (Default after NFS 1.0, means that the server does not reply until after the commit) insecure ,** (Requires requests originate on ports less than 1024) root_squash ,** (Map requests to the nobody user). hard ,** (Required because this means the system will keep trying to write until it works.) nfsvers=4.1 , rsize=8388608 , (Avoids dropped packages, default 8192) wsize=8388608 , (Avoids dropped packages, default 8192) timeo=600 , (60 seconds) retrans=2 , (Number of retries after a time out) noresvport ** (Tells the NFS client to use a new Transmission Control Protocol (TCP) source port when a network connection is reestablished. Doing this helps make sure that the EFS file system has uninterrupted availability after a network recovery event.) Note: Those marked with ** are critical and, in many cases, it is recommended to have the rsize and wsize set to 8388608 . Login to the Kubernetes cluster Before using the dxctl tool to deploy, you must be logged in to the targeted cluster using the cloud platform-specific CLI (Red Hat OpenShift, Amazon EKS, Microsoft Azure AKS, or Google GKE). Example: aws eks update-kubeconfig --name <eks_cluster> --region <region> Configure and deploy Configure and deploy using HCL DX dxctl tool . Change directory Change to the extracted files directory: cd hcl-dx-cloud-scripts Using DX Container Update CF192 and later, the directory structure appears as follows: Configure dxctl Configure the dxctl properties for the HCL DX Container CF192 and later deployment. Copy one of the provided properties files to further modify for your deployment. The modified properties file can be used for the deployment and the same file must be used for further updates. mkdir -p /home/$USER/deployments/ cp dxctl/properties/full-deployment.properties /home/$USER/deployments/myfirst_deployment.properties Update the dxctl properties file values. See the following sample values: ``` dx.namespace: kube-eg-cf192-0225 - ``` dx.image: dxen - ``` dx.tag: v95_CF192_20210225-035822_xxxxxxx_95_CF192_60374773 ``` dx.storageclass:dx-deploy-stg ``` - ``` dx.volume: kube-eg-d2-core-pv - ``` dx.volume.size:60 - ``` remote.search.enabled:false - ``` openldap.enabled:false - ``` api.enabled: false - ``` composer.enabled: false - ``` dam.enabled: false - ``` ingress.image:dx-build-output/common/ambassador - ``` ingress.tag:1.5.4 - ``` ingress.redis.image:redis - ``` ingress.redis.tag:5.0.1 - ``` dx.operator.image: dx-build-output/hcldx-cloud-operator/hcldx-cloud-operator - ``` dx.operator.tag: v95_CF192_20210225-0546_xxxxxxxxx_95_CF192 **Important:** With HCL DX 9.5 Container Update CF197 and later, dam.features in full-deployment properties is added for use in a future container update release, and should not be modified except with direct guidance from HCL Support. **Note:** With HCL DX 9.5 Container Update CF193 and later, persist.force.read in full-deployment properties is added to enable a read-only Postgres pod for Digital Asset Management. This enables a failover capability for the Postgres service supporting DAM. Another option to enable a read-only pod is to set the persist.minreplicas: option set to greater than 1. Example: ![](../images/Container_deploy_amazon.png) Deploy using dxctl tool Run the dxctl command to deploy the HCL DX 9.5 CF192 and later release to Amazon EKS. For Windows: ./win/dxctl --deploy -p /home/$USER/deployments/myfirst_deployment.properties For Linux: ./linux/dxctl --deploy -p /home/$USER/deployments/myfirst_deployment.properties For Mac: ./mac/dxctl -\u2013update -p /home/$USER/deployments/myfirst_deployment.properties Note: These steps create the DX 9.5 CF192 and later deployment. Generate TLS Certificate Create a TLS certification to be used by the deployment: For development purposes: Using OpenSSL, you can create a private key: openssl genrsa -out my-key.pem 2048 Using OpenSSL, you can create a certificate signed by the private key: openssl req -x509 -key my-key.pem -out my-cert.pem -days 365 -subj '/CN=my-cert Create a TLS certification: kubectl create secret tls dx-tls-cert --cert=my-cert.pem --key=my-key.pem -n aws-mynamespace Note: The default name is the dx-tls-cert this can be changed in the configuration. aws-mynamespace is your Kubernetes namespace. You can set your preferred namespace but you must consistently use this namespace in subsequent commands. See Customizing the Kubernetes deployment . Access the deployment Obtain the external IP from the platform load balancer as shown in following example to access the HCL DX 9.5 CF192 and later deployment: Output: $ kubectl get all -n NAMESPACE Example: The deployed system can be accessed at: https://external-ip/wps/portal Update To update the deployment to later HCL DX 9.5 Container Update releases, follow these steps: If using HCL DX 9.5 Container Update CF191 and earlier release, update the deployment properties file with new image values and run the Update command. Example: On Mac: ./mac/dxctl -\u2013update -p properties/myfirst_deployment.properties On Windows: .\\win\\dxctl --update -p properties\\myfirst_deployment.properties On Linux: ./linux/dxctl -\u2013update -p properties/myfirst_deployment.properties Note: If using HCL DX 9.5 Container Update CF192 or later, the dxctl tool can be used to Update the deployment. The dxctl tool does not deploy or update the DxDeployment custom resource definition. Prior to running an Update process, administrators should check the DxDeployment custom resource definition ( hcl-dx-cloud-scripts/deploy/crds/git.cwp.pnp-hcl.com_dxdeployments_crd.yaml ) for changes and update accordingly: Kubernetes command: kubectl delete crd dxdeployments.git.cwp.pnp-hcl.com CAUTION: Since crd is a cluster-wide resource, the use of kubectl delete crd dxdeployments.git.cwp.pnp-hcl.com causes a service outage for all the dx-deployment across the cluster. Kubernetes command: kubectl create -f deploy/crds/git.cwp.pnp-hcl.com_dxdeployments_crd.yaml Additional considerations: For example, once the database is transferred, the DBTYPE must be updated so you can scale the instances higher. Additionally, once the database is transferred, the number of replicas could be increased. There are additional options to customize the deployment. Delete To delete the deployment, follow either of these methods: Method 1: Remove the deployment but allow for redeployment with the same volumes: Example: ../linux/dxctl --destroy -p properties/myfirst_deployment.properties Method 2: Remove the entire namespace/project: Example: ./linux/dxctl --destroy -p properties/myfirst_deployment.properties -all true If some deployment resources (such as services) are not deleted, run the following command: kubectl patch services $(kubectl get services -n $NAMESPACE | grep -v \"NAME\" |awk '{print $1}') -p '{\"metadata\":{\"finalizers\":null}}' -n $NAMESPACE Parent topic: Deploy DX Container to Amazon EKS","title":"Deploy DX CF192 and later release Containers to Amazon EKS"},{"location":"containerization/kubernetes_eks_cf192andlater/#deploy-dx-cf192-and-later-release-containers-to-amazon-eks","text":"This section describes how to deploy HCL Digital Experience 9.5 CF192 and later release containers, along with the Ambassador, to Kubernetes as verified in Amazon Elastic Kubernetes Service (Amazon EKS) .","title":"Deploy DX CF192 and later release Containers to Amazon EKS"},{"location":"containerization/kubernetes_eks_cf192andlater/#prerequisites","text":"Prior to using the following procedures, it is assumed that the HCL DX Administrator is generally experienced in using Kubernetes. Additionally, the DX Administrator must have the appropriate access to the target environment. If not, the following are some preliminary steps that must be taken. Setup KUBECONFIG to refer to the target server. This ensures any kubectl commands executed locally affect the target environment. Amazon EKS Cluster The following tools must be installed on a machine other than the Portal server: Docker AWS Command Line Interface (CLI) - used to get image details. dxctl tool - If deploying Digital Experience Container Update CF192 or later, the dcxtl tool is used to install and configure the deployment. Documentation resource: Deploy DX Container to Microsoft Azure Kubernetes Service (AKS) Volume requirement: Requires an AccessMode of ReadWriteMany Requires a minimum of 40 GB , with the default request set to 100 GB RECLAIM POLICY = Retain For DAM, additional volume is needed. For more details on storage class and volume, see Sample storage class and volume . Note: HCL Digital Experience is input-output (I/O) intensive which requires a high performing file system for optimization; NFS is an option for this. Hardware: 4 cores / 7 GB - - - 5 cores / 9 GB Amazon Elastic Container Registry (ECR) or any container registry access, for tagging and pushing. See the support topic for the HCL Digital Experience detailed system requirements . Download and extract the contents of the HCL DX 9.5 package to the local file system. This can be a local workstation or a local cloud platform. Note: Reference the latest HCL DX 9.5 Container Release and Update file listings in the Docker deployment topic. If deploying HCL Digital Experience 9.5 Container Update CF192 release, the image and package names are as follows: CF192-core.zip files: HCL DX notices V9.5 CF192.txt dxclient_v1.2.0_20210305-1758.zip hcl-dx-ambassador-image-154.tar.gz hcl-dx-cloud-operator-image-v95_CF192_20210305-2309.tar.gz hcl-dx-cloud-scripts-v95_CF192_20210305-2309.zip hcl-dx-content-composer-image-v1.6.0_20210305-1756.tar.gz hcl-dx-core-image-v95_CF192_20210305-1758.tar.gz hcl-dx-digital-asset-management-operator-image-v95_CF192_20210305-1757.tar.gz hcl-dx-digital-asset-manager-image-v1.6.0_20210305-1802.tar.gz hcl-dx-experience-api-sample-ui-v0.2.0.20210305-1805.zip hcl-dx-image-processor-image-v1.6.0_20210305-1758.tar.gz hcl-dx-openldap-image-v1.0.0-master_20210305_1614986151.tar.gz hcl-dx-postgres-image-v1.6.0_20210305-1800.tar.gz hcl-dx-redis-image-5.0.1.tar.gz hcl-dx-remote-search-image-v95_CF192_20210305-1758.tar.gz hcl-dx-ringapi-image-v1.6.0_20210305-1802.tar.gz Note: Images included in the \u2018other\u2019 package released with CF192 are optional (in addition to HCL DX 9.5 core Portal and Web Content Manager) and are used to support the use of OpenLDAP, Remote Search, the Experience API, Content Composer, and Digital Asset Management components and services.","title":"Prerequisites"},{"location":"containerization/kubernetes_eks_cf192andlater/#about-this-task","text":"Follow these steps to deploy HCL Digital Experience 9.5 CF192 and later container release, along with Ambassador to Kubernetes, as verified in Amazon Elastic Kubernetes Service (Amazon EKS) . This deployment relies heavily on Kubernetes Operators for full functionality. If deploying a Container Update CF191 or earlier, view the instructions to deploy using script-based commands , instead of the dxctl tool commands used in this section.","title":"About this task"},{"location":"containerization/kubernetes_eks_cf192andlater/#dx-container-management","text":"Follow these steps to deploy the HCL Digital Experience 9.5 CF192 and later container release in Amazon EKS Change directory Open a terminal window and change to the root directory of the extracted package. Docker load Load the containers into your Docker repository: ``` docker load < hcl-dx-core-image-v95_CF192_20210225-004909.tar.gz - ``` docker load < hcl-dx-ambassador-image-154.tar.gz - ``` docker load < hcl-dx-cloud-operator-image-v95_CF192_20210225-0546.tar.gz - ``` docker load < hcl-dx-image-processor-image-v1.6.0_20210226-0014.tar.gz - ``` docker load < hcl-dx-digital-asset-management-operator-image-v95_CF192_20210226-0040.tar.gz - ``` docker load < hcl-dx-postgres-image-v1.6.0_20210226-0009.tar.gz - ``` docker load < hcl-dx-ringapi-image-v1.6.0_20210226-0055.tar.gz - ``` docker load < hcl-dx-redis-image-5.0.1.tar.gz **Note:** Either **`-i`** or **`<`** works for the load command. In case you encounter an error when using one, try running the command using the other. Docker tag and push Get the Docker images in your local Docker repository to your target Kubernetes system by tagging and pushing them appropriately. If you used docker load to get your images on the target environment, proceed to the next step. ``` docker tag - ``` docker push <image:tag>","title":"DX Container Management"},{"location":"containerization/kubernetes_eks_cf192andlater/#persistence-volume","text":"Set the Persistent volume Create (or have the Kubernetes Administrator create) a persistent volume and storage class where the AccessMode must be ReadWriteMany and the persistent volume reclaim policy must be Retain . For more details on storage class and volume, see Sample storage class and volume NFS server Provide the HCL DX 9.5 CF192 and later Docker image access to the volume mount created in order to copy the profile. There are various ways to do this and NFS is one option. If NFS is used, following are the parameters that are tested to work: rw, (Default) sync , (Default after NFS 1.0, means that the server does not reply until after the commit) insecure ,** (Requires requests originate on ports less than 1024) root_squash ,** (Map requests to the nobody user). hard ,** (Required because this means the system will keep trying to write until it works.) nfsvers=4.1 , rsize=8388608 , (Avoids dropped packages, default 8192) wsize=8388608 , (Avoids dropped packages, default 8192) timeo=600 , (60 seconds) retrans=2 , (Number of retries after a time out) noresvport ** (Tells the NFS client to use a new Transmission Control Protocol (TCP) source port when a network connection is reestablished. Doing this helps make sure that the EFS file system has uninterrupted availability after a network recovery event.) Note: Those marked with ** are critical and, in many cases, it is recommended to have the rsize and wsize set to 8388608 . Login to the Kubernetes cluster Before using the dxctl tool to deploy, you must be logged in to the targeted cluster using the cloud platform-specific CLI (Red Hat OpenShift, Amazon EKS, Microsoft Azure AKS, or Google GKE). Example: aws eks update-kubeconfig --name <eks_cluster> --region <region>","title":"Persistence volume"},{"location":"containerization/kubernetes_eks_cf192andlater/#configure-and-deploy","text":"Configure and deploy using HCL DX dxctl tool . Change directory Change to the extracted files directory: cd hcl-dx-cloud-scripts Using DX Container Update CF192 and later, the directory structure appears as follows: Configure dxctl Configure the dxctl properties for the HCL DX Container CF192 and later deployment. Copy one of the provided properties files to further modify for your deployment. The modified properties file can be used for the deployment and the same file must be used for further updates. mkdir -p /home/$USER/deployments/ cp dxctl/properties/full-deployment.properties /home/$USER/deployments/myfirst_deployment.properties Update the dxctl properties file values. See the following sample values: ``` dx.namespace: kube-eg-cf192-0225 - ``` dx.image: dxen - ``` dx.tag: v95_CF192_20210225-035822_xxxxxxx_95_CF192_60374773 ``` dx.storageclass:dx-deploy-stg ``` - ``` dx.volume: kube-eg-d2-core-pv - ``` dx.volume.size:60 - ``` remote.search.enabled:false - ``` openldap.enabled:false - ``` api.enabled: false - ``` composer.enabled: false - ``` dam.enabled: false - ``` ingress.image:dx-build-output/common/ambassador - ``` ingress.tag:1.5.4 - ``` ingress.redis.image:redis - ``` ingress.redis.tag:5.0.1 - ``` dx.operator.image: dx-build-output/hcldx-cloud-operator/hcldx-cloud-operator - ``` dx.operator.tag: v95_CF192_20210225-0546_xxxxxxxxx_95_CF192 **Important:** With HCL DX 9.5 Container Update CF197 and later, dam.features in full-deployment properties is added for use in a future container update release, and should not be modified except with direct guidance from HCL Support. **Note:** With HCL DX 9.5 Container Update CF193 and later, persist.force.read in full-deployment properties is added to enable a read-only Postgres pod for Digital Asset Management. This enables a failover capability for the Postgres service supporting DAM. Another option to enable a read-only pod is to set the persist.minreplicas: option set to greater than 1. Example: ![](../images/Container_deploy_amazon.png) Deploy using dxctl tool Run the dxctl command to deploy the HCL DX 9.5 CF192 and later release to Amazon EKS. For Windows: ./win/dxctl --deploy -p /home/$USER/deployments/myfirst_deployment.properties For Linux: ./linux/dxctl --deploy -p /home/$USER/deployments/myfirst_deployment.properties For Mac: ./mac/dxctl -\u2013update -p /home/$USER/deployments/myfirst_deployment.properties Note: These steps create the DX 9.5 CF192 and later deployment.","title":"Configure and deploy"},{"location":"containerization/kubernetes_eks_cf192andlater/#generate-tls-certificate","text":"Create a TLS certification to be used by the deployment: For development purposes: Using OpenSSL, you can create a private key: openssl genrsa -out my-key.pem 2048 Using OpenSSL, you can create a certificate signed by the private key: openssl req -x509 -key my-key.pem -out my-cert.pem -days 365 -subj '/CN=my-cert Create a TLS certification: kubectl create secret tls dx-tls-cert --cert=my-cert.pem --key=my-key.pem -n aws-mynamespace Note: The default name is the dx-tls-cert this can be changed in the configuration. aws-mynamespace is your Kubernetes namespace. You can set your preferred namespace but you must consistently use this namespace in subsequent commands. See Customizing the Kubernetes deployment .","title":"Generate TLS Certificate"},{"location":"containerization/kubernetes_eks_cf192andlater/#access-the-deployment","text":"Obtain the external IP from the platform load balancer as shown in following example to access the HCL DX 9.5 CF192 and later deployment: Output: $ kubectl get all -n NAMESPACE Example: The deployed system can be accessed at: https://external-ip/wps/portal","title":"Access the deployment"},{"location":"containerization/kubernetes_eks_cf192andlater/#update","text":"To update the deployment to later HCL DX 9.5 Container Update releases, follow these steps: If using HCL DX 9.5 Container Update CF191 and earlier release, update the deployment properties file with new image values and run the Update command. Example: On Mac: ./mac/dxctl -\u2013update -p properties/myfirst_deployment.properties On Windows: .\\win\\dxctl --update -p properties\\myfirst_deployment.properties On Linux: ./linux/dxctl -\u2013update -p properties/myfirst_deployment.properties Note: If using HCL DX 9.5 Container Update CF192 or later, the dxctl tool can be used to Update the deployment. The dxctl tool does not deploy or update the DxDeployment custom resource definition. Prior to running an Update process, administrators should check the DxDeployment custom resource definition ( hcl-dx-cloud-scripts/deploy/crds/git.cwp.pnp-hcl.com_dxdeployments_crd.yaml ) for changes and update accordingly: Kubernetes command: kubectl delete crd dxdeployments.git.cwp.pnp-hcl.com CAUTION: Since crd is a cluster-wide resource, the use of kubectl delete crd dxdeployments.git.cwp.pnp-hcl.com causes a service outage for all the dx-deployment across the cluster. Kubernetes command: kubectl create -f deploy/crds/git.cwp.pnp-hcl.com_dxdeployments_crd.yaml Additional considerations: For example, once the database is transferred, the DBTYPE must be updated so you can scale the instances higher. Additionally, once the database is transferred, the number of replicas could be increased. There are additional options to customize the deployment.","title":"Update"},{"location":"containerization/kubernetes_eks_cf192andlater/#delete","text":"To delete the deployment, follow either of these methods: Method 1: Remove the deployment but allow for redeployment with the same volumes: Example: ../linux/dxctl --destroy -p properties/myfirst_deployment.properties Method 2: Remove the entire namespace/project: Example: ./linux/dxctl --destroy -p properties/myfirst_deployment.properties -all true If some deployment resources (such as services) are not deleted, run the following command: kubectl patch services $(kubectl get services -n $NAMESPACE | grep -v \"NAME\" |awk '{print $1}') -p '{\"metadata\":{\"finalizers\":null}}' -n $NAMESPACE Parent topic: Deploy DX Container to Amazon EKS","title":"Delete"},{"location":"containerization/kubernetes_remote_search/","text":"Configure Remote Search in OpenShift and Kubernetes This section shows how to configure Remote Search for your HCL Digital Experience 9.5 environments on supported Red Hat OpenShift and Kubernetes container platforms. Note: Prior to Container Update CF195, the HCL Digital Experience 9.5 Remote Search image is supported for deployment to Red Hat OpenShift. With the Container Update CF195 release, Remote Search can be configured for deployment on supported Kubernetes platforms. Introduction Using HCL Digital Experience 9.5 Remote Search images in the supported cloud container platforms, such as Red Hat OpenShift, require a different setup and configuration steps than those used to set up Remote Search on a non-Docker or Kubernetes container platform . As information, the serverindex.xml file on the Remote Search server when deployed to on-premises environments may have a host name that is not accurate in a container environment with respect to the actual host name of the server hosting the Remote Search server. Follow the guidance in this section to define collections in the core HCL DX 9.5 container environment with respect to JCR text search collections, rather than guidance published for the on-premises (non-Docker or Kubernetes) platforms for the JCR collection URL. Deploying Remote Search in HCL Digital Experience 9.5 OpenShift and Kubernetes platforms Prerequisite : Download the HCL Digital Experience 9.5 Docker containers from your HCL Digital Experience entitlements from the HCL Software License Portal . The HCL DX 9.5 container update CF181 and later packages include a core software and Remote search container. Load both of these images into an OpenShift release platform supported by HCL DX 9.5 such as Red Hat OpenShift. Use CF195 and later if you deploy to a Kubernetes platform. See the following Additional Routing Configuration for supported Kubernetes platforms topic for information about deploying to Kubernetes container platforms such as Amazon EKS, Azure AKS, or Google GKE. In this example, the OpenShift load command can be used. Note that if your organization has a corporate OpenShift repository, you might use OpenShift pull instead to put it into your local repository. hcl-dx-core-image-v95_CF181_xxxxxxxx-xxxx.tar.gz hcl-dx-dxrs-image-v95_CF181_xxxxxxxx-xxxx.tar.gz The first one (dx-core-image), is the core HCL DX 9.5 Portal and Web Content Manager image while the second one (dx-dxrs-image) is the remote search image. After the Remote Search images are loaded to the Kubernetes environment that you deploy to, follow deployment steps for that platform presented in the HCL Digital Experience 9.5 Container Deployment topic pages. EJBs and host names HCL Digital Experience 9.5 Container core and Portal Remote Search each use WebSphere Application Server as a base. As these components are on different hosts (containers), they need to communicate via IP. The initial conversation between HCL Digital Experience 9.5 core and the Remote Search server takes place over IIOP (rmi) which is the internet protocol of EJBs. Ideally, the /etc/hosts file of both containers would have the host name of the other. In other words, the /etc/hosts file of the HCL Digital Experience Container core would have a host reference for the Remote Search and vice versa. However, three factors make this impossible. The containers are based on Red Hat UBI, the /etc/hosts file is owned by root , and the root password (and sudo ) is not available. Apply the command below to define host references for the Remote Search service from the Digital Experience Container core. Therefore, a way to force the Kubernetes environment, such as Red Hat OpenShift to write the /etc/hosts file at container initialization time is needed. HCL DX 9.5 Container operators that execute image deployment to Kubernetes platforms such as Red Hat OpenShift create the correct host-name in /etc/hosts for the local container. In addition, these operators execute a DNS resolution on foreign host-names as long as they are on the same Kubernetes deployment. Portal and Portal Remote Search both use WebSphere Application Server as a base. As they are on different hosts (containers), they have to be able to talk to each other via IP. The initial conversation between Portal DX and the Remote Search server take place over IIOP (rmi) which is the internet protocol of EJBs. Defining serverindex.xml on the Remote Search server When deploying the Remote Search image on supported Kubernetes platforms, additional configuration settings for the serverindex.xml are required. When deployed to Kubernetes, the HCL DX 9.5 container operators are configured to check to ensure that the server name is correct. Note that dx-deployment-service-remotesearch is a DNS resolvable name from the point of view of the HCL Digital Experience 9.5 Server. The remote search server includes the \u201cping\u201d command. You can use this to verify that the host name dx-deployment-service-remotesearch resolves to a valid IP address. Now, when the HCL DX 9.5 server communicates to the Remote Search server over IIOP, the Remote Search Server returns dx-deployment-service-remotesearch as the host name of the Remote Search Server. The HCL DX 9.5 Server has configuration that appends the port to the host name that was just returned. Remote Search services configuration The following guidance aligns with the Remote Search services configuration instructions available in the Remote Search services topic for deployment to non-container HCL Digital Experience servers. All of the instructions contained in the Remote Search services topic must be completed in a Kubernetes container-based HCL Digital Experience deployment. The following guidance outlines specific settings that were used in the Remote Search service DX 9.5 image deployment to supported Kubernetes platforms. Create a single sign-on (SSO) domain between HCL Digital Experience 9.5 container and the Remote Search service container by following the non-container on-premises procedure for Creating a single sign-on domain between HCL Portal and the Remote Search service . This entails exchanging SSL certificates and LTPA domain tokens. Note: When retrieving the SSL certificates from the host server, use the URL configuration host as defined in the table below (dx-deployment-service-remotesearch) as the host, and the appropriate port for the SSL access. You must also complete Setting the search user ID and Removing search collections before creating a new search service. Create a new search service and use the following values for a Remote Search services configuration to a Kubernetes container deployment. See the section on Creating a new search service for more information. For testing Search Services configuration, the following are used: Item Value IIOP_URL iiop://dx-deployment-service-remotesearch:2809 PSE TYPE Select ejb from the pull down. EJB ejb/com/ibm/hrl/portlets/WsPse/WebScannerLiteEJBHome DefaultCollectionsDirectory Leave empty. Search service implementation Select Portal Search Service Type from the pull down. CONFIG_FOLDER_PATH Did not set (differs from non-container instructions). Note: Once completed and saved, the HCL Digital Experience 9.5 container deployment has a new search service called Remote PSE service EJB , with a green check mark confirming that the service was correctly set up and is able to communicate with the Remote Search container. Based on the previously created Remote Search service, create a Portal Search Collection and a JCR Search Collection using the following parameters. Use the following parameters to create a Portal search collection . Parameter Value Search collection name Portal Search Collection Search collection location /opt/HCL/AppServer/profiles/prs_profile/SearchCollections/PortalSearchCollection Note: The \u201csearch collection location\u201d is relative to the remote search container. Furthermore, one places the collection in the profile of the Remote Search server because the profile of the remote search server is persisted. One obviously wants the search indexes persisted across restarts. Use the following parameters to create a Content Source JCR search collection . The Collect documents linked from this URL is https://dx-deployment-service:10042/wps/seedlist/myserver?Source=com.ibm.lotus.search.plugins.seedlist.retriever.portal.PortalRetrieverFactory&Action=GetDocuments&Range=100&locale=en-US Note that the host and port are the Kubernetes (for example, Red Hat OpenShift) service host and the port to which 10042 was mapped. In this case, 10042 is the HttpQueueInboundDefaultSecure port on the HCL DX 9.5 Server. Note also that one can put this URL in a browser (on the OpenShift host) and confirm that the response is an ATOM feed. On the Security panel, use dx-deployment-service as the host name, along with the username wpsadmin and the associated password for wpsadmin . One can also specify Realm as CrawlerUsersRealm Complete the following configuration parameters to enable search in the Web Content Manager Authoring i interfaces: Parameter Value Search collection name JCRCollection1 Search collection location /opt/HCL/AppServer/profiles/prs_profile/SearchCollections/JCRCollection1 JCR Content Source Configuration Use the following URL for Collect documents linked from this URL : https://dx-deployment-service:10042/wps/seedlist/myserver?Action=GetDocuments&Format=ATOM&Locale=en_US&Range=100&Source=com.ibm.lotus.search.plugins.seedlist.retriever.jcr.JCRRetrieverFactory&Start=0&SeedlistId=1@OOTB_CRAWLER1 The parsing of the SeedlistId positional parameter in this URL uses an index of the virtual portal being crawled. In this case 1 (in 2 places) represents the base virtual portal. Note: The host and port are the Kubernetes (for example, Red Hat OpenShift ) service host and the port to which 10042 was mapped. In this case, 10042 is the HttpQueueInboundDefaultSecure port on the HCL DX 9.5 server. Note also that one can put this URL in a browser (on the OpenShift host) and confirm that the response is an ATOM feed. On the Security panel, use dx-deployment-service as the host name, along with the username wpsadmin and the associated password for wpsadmin . One can also specify Realm as CrawlerUsersRealm Configure WCM Authoring Portlet search function Note: Even though the documents are gathered by the Remote Search function from the JCR, additional configuration is needed in order for the HCL Web Content Manager (WCM) Authoring Portlet search to use document search. Set the following values for this configuration. Set the Custom properties for the WebSphere Application Server Resource Environment Provider, JCR ConfigService , using the following values: Property Value jcr.textsearch.enabled true jcr.textsearch.indexdirectory /opt/HCL/AppServer/profiles/prs_profile/SearchCollections jcr.textsearch.PSE.type ejb jcr.textsearch.EJB.IIOP.URL iiop://dx-deployment-service-remotesearch:2809 jcr.textsearch.EJB.EJBName ejb/com/ibm/hrl/portlets/WsPse/WebScannerLiteEJBHome Note: On the jcr.textsearch.indexdirectory , the sub-directory JCRCollection1 is NOT included in the path. Additional Routing Configuration for supported Kubernetes platforms To configure Remote Search to DX 9.5 container deployments to supported Kubernetes platforms: Amazon Elastic Kubernetes Service (EKS), Microsoft Azure Kubernetes Service (AKS), or Google Kubernetes Engine (GKE) requires specific steps. The HCL DX 9.5 core and Remote Search services each require /ibm/console as the route path when accessing the Admin Console. Due to the overlapping of the path mappings, to configure Remote Search, DX administrators can apply a solution to expose the Remote Search route via an additional Load balancer, as follows: Create a new service for Remote Search with service type as Loadbalancer. Note: Do not alter the Remote Search Service created by the DX-Operator. Sample Yaml: apiVersion: v1 kind: Service metadata: labels: app: dx-deployment-remotesearch release: dx-deployment name: dx-deployment-service-remotesearch-lb spec: ports: - name: was-admin port: 9060 protocol: TCP targetPort: 9060 - name: was-admin-sec port: 9043 protocol: TCP targetPort: 9043 - name: boot-port port: 2809 protocol: TCP targetPort: 2809 - name: rs-port port: 9403 protocol: TCP targetPort: 9403 selector: app: dx-deployment-remotesearch sessionAffinity: None type: LoadBalancer Apply this configuration using the following example command: $ kubectl apply -f filename.yaml Remote Search Routes (example results): Access the Remote Search Admin Console via the external IP address of your DX 9.5 Container deployment: Example: https://35.xxx.174.3:9043/ibm/console Parent topic: Customizing your container deployment","title":"Configure Remote Search in OpenShift and Kubernetes"},{"location":"containerization/kubernetes_remote_search/#configure-remote-search-in-openshift-and-kubernetes","text":"This section shows how to configure Remote Search for your HCL Digital Experience 9.5 environments on supported Red Hat OpenShift and Kubernetes container platforms. Note: Prior to Container Update CF195, the HCL Digital Experience 9.5 Remote Search image is supported for deployment to Red Hat OpenShift. With the Container Update CF195 release, Remote Search can be configured for deployment on supported Kubernetes platforms.","title":"Configure Remote Search in OpenShift and Kubernetes"},{"location":"containerization/kubernetes_remote_search/#introduction","text":"Using HCL Digital Experience 9.5 Remote Search images in the supported cloud container platforms, such as Red Hat OpenShift, require a different setup and configuration steps than those used to set up Remote Search on a non-Docker or Kubernetes container platform . As information, the serverindex.xml file on the Remote Search server when deployed to on-premises environments may have a host name that is not accurate in a container environment with respect to the actual host name of the server hosting the Remote Search server. Follow the guidance in this section to define collections in the core HCL DX 9.5 container environment with respect to JCR text search collections, rather than guidance published for the on-premises (non-Docker or Kubernetes) platforms for the JCR collection URL.","title":"Introduction"},{"location":"containerization/kubernetes_remote_search/#deploying-remote-search-in-hcl-digital-experience-95-openshift-and-kubernetes-platforms","text":"Prerequisite : Download the HCL Digital Experience 9.5 Docker containers from your HCL Digital Experience entitlements from the HCL Software License Portal . The HCL DX 9.5 container update CF181 and later packages include a core software and Remote search container. Load both of these images into an OpenShift release platform supported by HCL DX 9.5 such as Red Hat OpenShift. Use CF195 and later if you deploy to a Kubernetes platform. See the following Additional Routing Configuration for supported Kubernetes platforms topic for information about deploying to Kubernetes container platforms such as Amazon EKS, Azure AKS, or Google GKE. In this example, the OpenShift load command can be used. Note that if your organization has a corporate OpenShift repository, you might use OpenShift pull instead to put it into your local repository. hcl-dx-core-image-v95_CF181_xxxxxxxx-xxxx.tar.gz hcl-dx-dxrs-image-v95_CF181_xxxxxxxx-xxxx.tar.gz The first one (dx-core-image), is the core HCL DX 9.5 Portal and Web Content Manager image while the second one (dx-dxrs-image) is the remote search image. After the Remote Search images are loaded to the Kubernetes environment that you deploy to, follow deployment steps for that platform presented in the HCL Digital Experience 9.5 Container Deployment topic pages.","title":"Deploying Remote Search in HCL Digital Experience 9.5 OpenShift and Kubernetes platforms"},{"location":"containerization/kubernetes_remote_search/#ejbs-and-host-names","text":"HCL Digital Experience 9.5 Container core and Portal Remote Search each use WebSphere Application Server as a base. As these components are on different hosts (containers), they need to communicate via IP. The initial conversation between HCL Digital Experience 9.5 core and the Remote Search server takes place over IIOP (rmi) which is the internet protocol of EJBs. Ideally, the /etc/hosts file of both containers would have the host name of the other. In other words, the /etc/hosts file of the HCL Digital Experience Container core would have a host reference for the Remote Search and vice versa. However, three factors make this impossible. The containers are based on Red Hat UBI, the /etc/hosts file is owned by root , and the root password (and sudo ) is not available. Apply the command below to define host references for the Remote Search service from the Digital Experience Container core. Therefore, a way to force the Kubernetes environment, such as Red Hat OpenShift to write the /etc/hosts file at container initialization time is needed. HCL DX 9.5 Container operators that execute image deployment to Kubernetes platforms such as Red Hat OpenShift create the correct host-name in /etc/hosts for the local container. In addition, these operators execute a DNS resolution on foreign host-names as long as they are on the same Kubernetes deployment. Portal and Portal Remote Search both use WebSphere Application Server as a base. As they are on different hosts (containers), they have to be able to talk to each other via IP. The initial conversation between Portal DX and the Remote Search server take place over IIOP (rmi) which is the internet protocol of EJBs.","title":"EJBs and host names"},{"location":"containerization/kubernetes_remote_search/#defining-serverindexxml-on-the-remote-search-server","text":"When deploying the Remote Search image on supported Kubernetes platforms, additional configuration settings for the serverindex.xml are required. When deployed to Kubernetes, the HCL DX 9.5 container operators are configured to check to ensure that the server name is correct. Note that dx-deployment-service-remotesearch is a DNS resolvable name from the point of view of the HCL Digital Experience 9.5 Server. The remote search server includes the \u201cping\u201d command. You can use this to verify that the host name dx-deployment-service-remotesearch resolves to a valid IP address. Now, when the HCL DX 9.5 server communicates to the Remote Search server over IIOP, the Remote Search Server returns dx-deployment-service-remotesearch as the host name of the Remote Search Server. The HCL DX 9.5 Server has configuration that appends the port to the host name that was just returned.","title":"Defining serverindex.xml on the Remote Search server"},{"location":"containerization/kubernetes_remote_search/#remote-search-services-configuration","text":"The following guidance aligns with the Remote Search services configuration instructions available in the Remote Search services topic for deployment to non-container HCL Digital Experience servers. All of the instructions contained in the Remote Search services topic must be completed in a Kubernetes container-based HCL Digital Experience deployment. The following guidance outlines specific settings that were used in the Remote Search service DX 9.5 image deployment to supported Kubernetes platforms. Create a single sign-on (SSO) domain between HCL Digital Experience 9.5 container and the Remote Search service container by following the non-container on-premises procedure for Creating a single sign-on domain between HCL Portal and the Remote Search service . This entails exchanging SSL certificates and LTPA domain tokens. Note: When retrieving the SSL certificates from the host server, use the URL configuration host as defined in the table below (dx-deployment-service-remotesearch) as the host, and the appropriate port for the SSL access. You must also complete Setting the search user ID and Removing search collections before creating a new search service. Create a new search service and use the following values for a Remote Search services configuration to a Kubernetes container deployment. See the section on Creating a new search service for more information. For testing Search Services configuration, the following are used: Item Value IIOP_URL iiop://dx-deployment-service-remotesearch:2809 PSE TYPE Select ejb from the pull down. EJB ejb/com/ibm/hrl/portlets/WsPse/WebScannerLiteEJBHome DefaultCollectionsDirectory Leave empty. Search service implementation Select Portal Search Service Type from the pull down. CONFIG_FOLDER_PATH Did not set (differs from non-container instructions). Note: Once completed and saved, the HCL Digital Experience 9.5 container deployment has a new search service called Remote PSE service EJB , with a green check mark confirming that the service was correctly set up and is able to communicate with the Remote Search container. Based on the previously created Remote Search service, create a Portal Search Collection and a JCR Search Collection using the following parameters. Use the following parameters to create a Portal search collection . Parameter Value Search collection name Portal Search Collection Search collection location /opt/HCL/AppServer/profiles/prs_profile/SearchCollections/PortalSearchCollection Note: The \u201csearch collection location\u201d is relative to the remote search container. Furthermore, one places the collection in the profile of the Remote Search server because the profile of the remote search server is persisted. One obviously wants the search indexes persisted across restarts. Use the following parameters to create a Content Source JCR search collection . The Collect documents linked from this URL is https://dx-deployment-service:10042/wps/seedlist/myserver?Source=com.ibm.lotus.search.plugins.seedlist.retriever.portal.PortalRetrieverFactory&Action=GetDocuments&Range=100&locale=en-US Note that the host and port are the Kubernetes (for example, Red Hat OpenShift) service host and the port to which 10042 was mapped. In this case, 10042 is the HttpQueueInboundDefaultSecure port on the HCL DX 9.5 Server. Note also that one can put this URL in a browser (on the OpenShift host) and confirm that the response is an ATOM feed. On the Security panel, use dx-deployment-service as the host name, along with the username wpsadmin and the associated password for wpsadmin . One can also specify Realm as CrawlerUsersRealm Complete the following configuration parameters to enable search in the Web Content Manager Authoring i interfaces: Parameter Value Search collection name JCRCollection1 Search collection location /opt/HCL/AppServer/profiles/prs_profile/SearchCollections/JCRCollection1","title":"Remote Search services configuration"},{"location":"containerization/kubernetes_remote_search/#jcr-content-source-configuration","text":"Use the following URL for Collect documents linked from this URL : https://dx-deployment-service:10042/wps/seedlist/myserver?Action=GetDocuments&Format=ATOM&Locale=en_US&Range=100&Source=com.ibm.lotus.search.plugins.seedlist.retriever.jcr.JCRRetrieverFactory&Start=0&SeedlistId=1@OOTB_CRAWLER1 The parsing of the SeedlistId positional parameter in this URL uses an index of the virtual portal being crawled. In this case 1 (in 2 places) represents the base virtual portal. Note: The host and port are the Kubernetes (for example, Red Hat OpenShift ) service host and the port to which 10042 was mapped. In this case, 10042 is the HttpQueueInboundDefaultSecure port on the HCL DX 9.5 server. Note also that one can put this URL in a browser (on the OpenShift host) and confirm that the response is an ATOM feed. On the Security panel, use dx-deployment-service as the host name, along with the username wpsadmin and the associated password for wpsadmin . One can also specify Realm as CrawlerUsersRealm","title":"JCR Content Source Configuration"},{"location":"containerization/kubernetes_remote_search/#configure-wcm-authoring-portlet-search-function","text":"Note: Even though the documents are gathered by the Remote Search function from the JCR, additional configuration is needed in order for the HCL Web Content Manager (WCM) Authoring Portlet search to use document search. Set the following values for this configuration. Set the Custom properties for the WebSphere Application Server Resource Environment Provider, JCR ConfigService , using the following values: Property Value jcr.textsearch.enabled true jcr.textsearch.indexdirectory /opt/HCL/AppServer/profiles/prs_profile/SearchCollections jcr.textsearch.PSE.type ejb jcr.textsearch.EJB.IIOP.URL iiop://dx-deployment-service-remotesearch:2809 jcr.textsearch.EJB.EJBName ejb/com/ibm/hrl/portlets/WsPse/WebScannerLiteEJBHome Note: On the jcr.textsearch.indexdirectory , the sub-directory JCRCollection1 is NOT included in the path.","title":"Configure WCM Authoring Portlet search function"},{"location":"containerization/kubernetes_remote_search/#additional-routing-configuration-for-supported-kubernetes-platforms","text":"To configure Remote Search to DX 9.5 container deployments to supported Kubernetes platforms: Amazon Elastic Kubernetes Service (EKS), Microsoft Azure Kubernetes Service (AKS), or Google Kubernetes Engine (GKE) requires specific steps. The HCL DX 9.5 core and Remote Search services each require /ibm/console as the route path when accessing the Admin Console. Due to the overlapping of the path mappings, to configure Remote Search, DX administrators can apply a solution to expose the Remote Search route via an additional Load balancer, as follows: Create a new service for Remote Search with service type as Loadbalancer. Note: Do not alter the Remote Search Service created by the DX-Operator. Sample Yaml: apiVersion: v1 kind: Service metadata: labels: app: dx-deployment-remotesearch release: dx-deployment name: dx-deployment-service-remotesearch-lb spec: ports: - name: was-admin port: 9060 protocol: TCP targetPort: 9060 - name: was-admin-sec port: 9043 protocol: TCP targetPort: 9043 - name: boot-port port: 2809 protocol: TCP targetPort: 2809 - name: rs-port port: 9403 protocol: TCP targetPort: 9403 selector: app: dx-deployment-remotesearch sessionAffinity: None type: LoadBalancer Apply this configuration using the following example command: $ kubectl apply -f filename.yaml Remote Search Routes (example results): Access the Remote Search Admin Console via the external IP address of your DX 9.5 Container deployment: Example: https://35.xxx.174.3:9043/ibm/console Parent topic: Customizing your container deployment","title":"Additional Routing Configuration for supported Kubernetes platforms"},{"location":"containerization/limitations_requirements/","text":"Containerization requirements and limitations This section describes the requirements to deploy the HCL Digital Experience 9.5 images to container platforms and current limitations. Attention: Beginning with HCL Digital Experience 9.5 Container Update CF200, HCL has discontinued releasing the HCL Digital Experience (DX) Operator-based deployments and will provide support only for Helm-based deployments . There will be no further updates or code fixes provided for the Operator-based deployments. HCL requires all customers to migrate to Helm-based deployments for their DX installations. HCL will work with our customers as they transition from Operator-based to Helm-based deployments. For more information on the migration process, see Migrating from Operator-based to Helm-based deployments . Consult the HCL Digital Experience 9.5 Support Statements on the HCL Digital Experience Support pages for the latest updates on supported platforms, components, and release levels. Requirements and Limitations for Helm-based deployments This section describes requirements and current limitations for HCL Digital Experience 9.5 Container Update CF200 and later deployments using Helm. HCL DX 9.5 CF200 and later is architected to run on any Certified Kubernetes platform ( https://www.cncf.io/certification/software-conformance ), provided that, the Kubernetes platform is hosted on x86_64 hardware the Kubernetes platform is officially supported by Helm ( https://helm.sh/docs/topics/kubernetes_distros/ ). For the list of Kubernetes versions that are tested and supported by HCL, refer to the HCL DX supported hardware and software statements page. Even though the platforms might be Certified Kubernetes platforms, you might find the environments varying slightly based on the vendors. HCL Support will make a reasonable effort to assist the customer in problem resolution in scenarios where the Kubernetes version is still under support by the vendor. If there are any unresolved issues, HCL Support will provide alternative implementation recommendations or open Feature Requests for the problem scenario. Internally, HCL tests DX against a range of Kubernetes platforms that is regularly reviewed and updated. We do not test with every single platform vendor, but aim to cover a representative sample of popular Kubernetes implementations. See the HCL DX supported hardware and software statements on the HCL Support Knowledge Base for additional details. To deploy HCL Digital Experience 9.5 CF200 to the supported Kubernetes platforms using Helm, the following are required: Helm installation : Download and install Helm to your target environment. HCL DX 9.5 CF200 and later container deployment is tested and is supported with Helm v3. For more information regarding the supported Helm version for individual Kubernetes versions, refer Helm documentation . Migration : For information about migrating from Operator-based to Helm-based deployments, see Migrating from Operator-based to Helm-based deployments . Container platform capacity resource requirements : The following table outlines the default minimum and maximum capacity of container resources requested by the HCL DX 9.5 Container Components in the Helm-based deployments. Component Resource name Pod Minimum CPU Pod Minimum Memory No. of Pods Minimum Core core 0.8 3072MB 1 Ring API ringApi 0.1 128MB 1 Content Composer contentComposer 0.1 128MB 1 Design Studio designStudio 0.1 128MB 1 Digital Asset Management digitalAssetManagement 0.25 1024MB 1 DAM Persistence Connection Pool persistenceConnectionPool 0.5 512MB 1 DAM Persistence Node persistenceNode 1 1024MB 1 DAM Persistence Metrics Exporter persistenceMetricsExporter 0.1 128MB 0 Image processor imageProcessor 0.1 1280MB 1 Open LDAP openLdap 0.2 512MB 1 Remote search remoteSearch 0.25 768MB 1 (Max 1 Pod) Runtime Controller runtimeController 0.1 256MB 1 Ambassador Ingress ambassadorIngress 0.2 300MB 1 Ambassador Redis ambassadorRedis 0.1 256MB 0 Sidecar sidecar 0.1 64MB 0 Requirements and Limitations for Operator-based deployments Attention: Beginning with HCL Digital Experience 9.5 Container Update CF200, HCL has discontinued releasing the HCL Digital Experience (DX) Operator-based deployments and will provide support only for Helm-based deployments . There will be no further updates or code fixes provided for the Operator-based deployments. HCL requires all customers to migrate to Helm-based deployments for their DX installations. HCL will work with our customers as they transition from Operator-based to Helm-based deployments. For more information on the migration process, see Migrating from Operator-based to Helm-based deployments . The following describes the requirements to deploy the HCL Digital Experience 9.5 images to container platforms and current limitations using the Operator-based deployment process: HCL Digital Experience 9.5 is supported on Docker, Red Hat OpenShift, Amazon Elastic Kubernetes Service (EKS), and Microsoft Azure Kubernetes Service (AKS), and Google Kubernetes Engine (GKE). Other Kubernetes platforms are not fully supported. The HCL Operator is not likely to work, however, support for additional Kubernetes as a Service (KaaS) is ongoing and additions is reflected in the HCL Digital Experience 9.5 Support Statements. Additional features and functions may be tied to the use of the HCL DX Operators for deployment. HCL highly recommends following the deployment strategies outlined within this documentation. HCL Digital Experience 9.5 containerization is focused on deployment and it uses an operator-based deployment. The goals are: To introduce a supported containerized deployment that HCL can continually extend; To provide customers with the best possible experience; To provide a high level of customization in the deployment and continue to expand on that, along with increased automation; and To maintain separation of product and custom code. Customers need to follow the recommended deployment model to ensure the availability of future functions and prevent potential conflicts. Notes: HCL Digital Experience is a database-intensive application, it is not recommended to use Apache Derby for production use. For specific versions of databases supported for production, see the HCL Digital Experience 9.5 Support Statements on the HCL Digital Experience Support pages. Creation of Virtual Portals take longer when implemented in Red Hat OpenShift. Plan for adequate time to allow processing, and re-verify the results are completed by refreshing the web browser administrative panel. Customers should not modify the HCL Digital Experience 9.5 Docker images provided by HCL for deployment. This restriction includes use of these images as a base to create a new image, which results in a new image ID and an unsupported configuration. Instead, customers deploying the images should follow best practices and maintain customizations in the wp_profile and the deployment database. Scripts and custom files should be stored in wp_profile (/opt/HCL/wp_profile/). See the Deployment Help Center topics for more information Customers should not run multiple HCL Digital Experience 9.5 container deployments in a single Kubernetes namespace (in the case of Red Hat OpenShift, in a single OpenShift project). This configuration is not supported at this time. It is not supported to run two different versions of HCL Digital Experience 9.5 container deployments in a single Kubernetes cluster. Use of Web Application Bridge is currently unsupported on HCL Digital Experience 9.5 deployments to container platforms such as Kubernetes and Red Hat OpenShift, using the Operator-based deployment method. Beginning with HCL DX Container Update CF199, Web Application Bridge can be used in container deployments using the Helm deployment method. Supported file system requirements : Requires an **AccessMode** of **ReadWriteMany** . Requires a minimum of 40 GB , with the default request set to 100 GB . Note: HCL Digital Experience is input-output (I/O) intensive and requires a high performing file system for optimization. Container platform capacity requirements : The following table outlines the minimum and maximum capacity requested and managed by HCL DX 9.5 Container Components: Component Pod minimum CPU Pod maximum CPU Pod minimum memory Pod maximum memory No. of minimum pods DX 9.5 Core 2 5 6 GB 8 GB 1 Experience API 0.5 1 1 GB 2 GB 1 Content Composer 0.5 1 1 GB 2 GB 1 Digital Asset Management 0.5 2 1 GB 2 GB 3 Persistence 1 2 1 GB 3 GB 1 Image processor 1 2 2 GB 2 GB 1 Remote search 1 3 1 GB 4 GB 1 Operators Shared - minimal Shared - minimal Shared - minimal Shared - minimal 2 Ambassador 0.3 1 400 MB 600 MB 3 Redis 0.3 1 400 MB 600 MB 3 Postgres-RO 1 2 1 GB 3 GB 1 Additional considerations in implementation : ConfigEngine and ConfigWizard should only be used when there is a single instance When more than one instance is running, the ConfigEngine is disabled and the ConfigWizard route is removed. As an example, the Site Builder is calling the ConfigEngine in the background. But because multiple instances are running, an Error 500 occurs because the ConfigEngine is disabled. AllConfigEngine.sh tasks should be run in configure mode with only one instance running. JavaServer Faces (JSF) portlet bridge With DX 9.5 Container Update CF171 and higher, WebSphere Application Server 9.0.5.2 is included and that IBM fix pack removed the IBM JSF portlet bridge. If you are using JSF portlets and leverage the JSF portlet bridge, proceed to the HCL DX 9.5 Container Update CF18 for the required JavaServer Faces Bridge support before moving to a container-based deployment. The HCL JavaServer Faces Bridge is added to HCL Digital Experience offerings with Container Update CF18 and CF18 on-premises platform CF update. For more information please see What's New in Container Update CF18 . Note: For information about the limitations related to JSF 2.2 support, see Limitations when running HCL DX Portlet Bridge on WebSphere Application Server 9.0 . Parent topic: Digital Experience on containerized platforms","title":"Containerization requirements and limitations"},{"location":"containerization/limitations_requirements/#containerization-requirements-and-limitations","text":"This section describes the requirements to deploy the HCL Digital Experience 9.5 images to container platforms and current limitations. Attention: Beginning with HCL Digital Experience 9.5 Container Update CF200, HCL has discontinued releasing the HCL Digital Experience (DX) Operator-based deployments and will provide support only for Helm-based deployments . There will be no further updates or code fixes provided for the Operator-based deployments. HCL requires all customers to migrate to Helm-based deployments for their DX installations. HCL will work with our customers as they transition from Operator-based to Helm-based deployments. For more information on the migration process, see Migrating from Operator-based to Helm-based deployments . Consult the HCL Digital Experience 9.5 Support Statements on the HCL Digital Experience Support pages for the latest updates on supported platforms, components, and release levels.","title":"Containerization requirements and limitations"},{"location":"containerization/limitations_requirements/#requirements-and-limitations-for-helm-based-deployments","text":"This section describes requirements and current limitations for HCL Digital Experience 9.5 Container Update CF200 and later deployments using Helm. HCL DX 9.5 CF200 and later is architected to run on any Certified Kubernetes platform ( https://www.cncf.io/certification/software-conformance ), provided that, the Kubernetes platform is hosted on x86_64 hardware the Kubernetes platform is officially supported by Helm ( https://helm.sh/docs/topics/kubernetes_distros/ ). For the list of Kubernetes versions that are tested and supported by HCL, refer to the HCL DX supported hardware and software statements page. Even though the platforms might be Certified Kubernetes platforms, you might find the environments varying slightly based on the vendors. HCL Support will make a reasonable effort to assist the customer in problem resolution in scenarios where the Kubernetes version is still under support by the vendor. If there are any unresolved issues, HCL Support will provide alternative implementation recommendations or open Feature Requests for the problem scenario. Internally, HCL tests DX against a range of Kubernetes platforms that is regularly reviewed and updated. We do not test with every single platform vendor, but aim to cover a representative sample of popular Kubernetes implementations. See the HCL DX supported hardware and software statements on the HCL Support Knowledge Base for additional details. To deploy HCL Digital Experience 9.5 CF200 to the supported Kubernetes platforms using Helm, the following are required: Helm installation : Download and install Helm to your target environment. HCL DX 9.5 CF200 and later container deployment is tested and is supported with Helm v3. For more information regarding the supported Helm version for individual Kubernetes versions, refer Helm documentation . Migration : For information about migrating from Operator-based to Helm-based deployments, see Migrating from Operator-based to Helm-based deployments . Container platform capacity resource requirements : The following table outlines the default minimum and maximum capacity of container resources requested by the HCL DX 9.5 Container Components in the Helm-based deployments. Component Resource name Pod Minimum CPU Pod Minimum Memory No. of Pods Minimum Core core 0.8 3072MB 1 Ring API ringApi 0.1 128MB 1 Content Composer contentComposer 0.1 128MB 1 Design Studio designStudio 0.1 128MB 1 Digital Asset Management digitalAssetManagement 0.25 1024MB 1 DAM Persistence Connection Pool persistenceConnectionPool 0.5 512MB 1 DAM Persistence Node persistenceNode 1 1024MB 1 DAM Persistence Metrics Exporter persistenceMetricsExporter 0.1 128MB 0 Image processor imageProcessor 0.1 1280MB 1 Open LDAP openLdap 0.2 512MB 1 Remote search remoteSearch 0.25 768MB 1 (Max 1 Pod) Runtime Controller runtimeController 0.1 256MB 1 Ambassador Ingress ambassadorIngress 0.2 300MB 1 Ambassador Redis ambassadorRedis 0.1 256MB 0 Sidecar sidecar 0.1 64MB 0","title":"Requirements and Limitations for Helm-based deployments"},{"location":"containerization/limitations_requirements/#requirements-and-limitations-for-operator-based-deployments","text":"Attention: Beginning with HCL Digital Experience 9.5 Container Update CF200, HCL has discontinued releasing the HCL Digital Experience (DX) Operator-based deployments and will provide support only for Helm-based deployments . There will be no further updates or code fixes provided for the Operator-based deployments. HCL requires all customers to migrate to Helm-based deployments for their DX installations. HCL will work with our customers as they transition from Operator-based to Helm-based deployments. For more information on the migration process, see Migrating from Operator-based to Helm-based deployments . The following describes the requirements to deploy the HCL Digital Experience 9.5 images to container platforms and current limitations using the Operator-based deployment process: HCL Digital Experience 9.5 is supported on Docker, Red Hat OpenShift, Amazon Elastic Kubernetes Service (EKS), and Microsoft Azure Kubernetes Service (AKS), and Google Kubernetes Engine (GKE). Other Kubernetes platforms are not fully supported. The HCL Operator is not likely to work, however, support for additional Kubernetes as a Service (KaaS) is ongoing and additions is reflected in the HCL Digital Experience 9.5 Support Statements. Additional features and functions may be tied to the use of the HCL DX Operators for deployment. HCL highly recommends following the deployment strategies outlined within this documentation. HCL Digital Experience 9.5 containerization is focused on deployment and it uses an operator-based deployment. The goals are: To introduce a supported containerized deployment that HCL can continually extend; To provide customers with the best possible experience; To provide a high level of customization in the deployment and continue to expand on that, along with increased automation; and To maintain separation of product and custom code. Customers need to follow the recommended deployment model to ensure the availability of future functions and prevent potential conflicts. Notes: HCL Digital Experience is a database-intensive application, it is not recommended to use Apache Derby for production use. For specific versions of databases supported for production, see the HCL Digital Experience 9.5 Support Statements on the HCL Digital Experience Support pages. Creation of Virtual Portals take longer when implemented in Red Hat OpenShift. Plan for adequate time to allow processing, and re-verify the results are completed by refreshing the web browser administrative panel. Customers should not modify the HCL Digital Experience 9.5 Docker images provided by HCL for deployment. This restriction includes use of these images as a base to create a new image, which results in a new image ID and an unsupported configuration. Instead, customers deploying the images should follow best practices and maintain customizations in the wp_profile and the deployment database. Scripts and custom files should be stored in wp_profile (/opt/HCL/wp_profile/). See the Deployment Help Center topics for more information Customers should not run multiple HCL Digital Experience 9.5 container deployments in a single Kubernetes namespace (in the case of Red Hat OpenShift, in a single OpenShift project). This configuration is not supported at this time. It is not supported to run two different versions of HCL Digital Experience 9.5 container deployments in a single Kubernetes cluster. Use of Web Application Bridge is currently unsupported on HCL Digital Experience 9.5 deployments to container platforms such as Kubernetes and Red Hat OpenShift, using the Operator-based deployment method. Beginning with HCL DX Container Update CF199, Web Application Bridge can be used in container deployments using the Helm deployment method. Supported file system requirements : Requires an **AccessMode** of **ReadWriteMany** . Requires a minimum of 40 GB , with the default request set to 100 GB . Note: HCL Digital Experience is input-output (I/O) intensive and requires a high performing file system for optimization. Container platform capacity requirements : The following table outlines the minimum and maximum capacity requested and managed by HCL DX 9.5 Container Components: Component Pod minimum CPU Pod maximum CPU Pod minimum memory Pod maximum memory No. of minimum pods DX 9.5 Core 2 5 6 GB 8 GB 1 Experience API 0.5 1 1 GB 2 GB 1 Content Composer 0.5 1 1 GB 2 GB 1 Digital Asset Management 0.5 2 1 GB 2 GB 3 Persistence 1 2 1 GB 3 GB 1 Image processor 1 2 2 GB 2 GB 1 Remote search 1 3 1 GB 4 GB 1 Operators Shared - minimal Shared - minimal Shared - minimal Shared - minimal 2 Ambassador 0.3 1 400 MB 600 MB 3 Redis 0.3 1 400 MB 600 MB 3 Postgres-RO 1 2 1 GB 3 GB 1 Additional considerations in implementation : ConfigEngine and ConfigWizard should only be used when there is a single instance When more than one instance is running, the ConfigEngine is disabled and the ConfigWizard route is removed. As an example, the Site Builder is calling the ConfigEngine in the background. But because multiple instances are running, an Error 500 occurs because the ConfigEngine is disabled. AllConfigEngine.sh tasks should be run in configure mode with only one instance running. JavaServer Faces (JSF) portlet bridge With DX 9.5 Container Update CF171 and higher, WebSphere Application Server 9.0.5.2 is included and that IBM fix pack removed the IBM JSF portlet bridge. If you are using JSF portlets and leverage the JSF portlet bridge, proceed to the HCL DX 9.5 Container Update CF18 for the required JavaServer Faces Bridge support before moving to a container-based deployment. The HCL JavaServer Faces Bridge is added to HCL Digital Experience offerings with Container Update CF18 and CF18 on-premises platform CF update. For more information please see What's New in Container Update CF18 . Note: For information about the limitations related to JSF 2.2 support, see Limitations when running HCL DX Portlet Bridge on WebSphere Application Server 9.0 . Parent topic: Digital Experience on containerized platforms","title":"Requirements and Limitations for Operator-based deployments"},{"location":"containerization/maintenance/","text":"Container administration 9.5 The information in this section enables administrators to manage select operations performance controls, and to update and replace their HCL Digital Experience 9.5 container images with the latest 9.5 container update release. New HCL Digital Experience 9.5 CFxxx container images are released on a regular cadence. Images include fixes to HCL Digital Experience (comprised of HCL Portal and HCL Web Content Manager), IBM WebSphere Application Server (WAS) Network Deployment, and the Java Development Kit (JDK), and additional components, such as the Experience API, Digital Asset Management, Content Composer, Remote Search, and more. Consult the Digital Experience Deployment topic for the latest list of DX 9.5 Container Images delivered through the Container Update releases. Customers should not apply maintenance to an HCL Digital Experience 9.5 container image. Instead, they should run the update process as described below. Customers should not extend the HCL Digital Experience 9.5 container images. They are not intended to be used in the FROM instruction as a parent image. Critical hot fixes are built for HCL Digital Experience 9.5 container releases when required outside of the container release process. HCL Digital Experience customers can contact HCL Customer Support if a critical fix is required for their HCL Digital Experience containerized deployment. There is a separation of product and customer code. Customizations should be kept in the wp_profile in the persistent volume and the external and the external database. As HCL Digital Experience 9.5 container development moves forward with the deployment type, an effort to better separate custom code from product code is planned. Video tutorial: HCL Digital Experience - Update an HCL Portal Docker Container Starting with 9.5, under the HCL Digital Experience container update releases, as new HCL Digital Experience 9.5 images become available from HCL, customers can modify the custom resource instance to use 9.5. The initial HCL Digital Experience 9.5 container update release available to DX customers in the HCL Software License Portal page. This pattern is possible because customizations are not made to the image but isolated to the persistent volume and external database, which follows best practices. The procedure for updating to a new release of the HCL Digital Experience 9.5 image is detailed in the Update the Digital Experience 9.5 Core Kubernetes Container Deployment . Update the Digital Experience 9.5 Core Kubernetes or Red Hat OpenShift container deployment Update the Digital Experience 9.5 Core Kubernetes container deployment. Update the HCL DX 9.5 Experience API, Content Composer, and Digital Asset Management components This section provides the steps to update the HCL Digital Experience 9.5 Experience API, HCL Digital Experience 9.5 Content Composer, and HCL Digital Experience 9.5 Digital Asset Management components. Optional: Configuration Settings to Manage Digital Asset Management Media upload storage services This section outlines optional configuration steps to tune Digital Asset Management storage services. HCL Digital Experience 9.5 Docker and Container initialization performance Beginning with from HCL Digital Experience 9.5 Container Update CF192 release, container DX applications initialization performance is improved. Review the following guidance for information, defaults, and options to manage container applications initialization performance when deployed to Docker, Red Hat OpenShift, and Kubernetes platforms. Customizing your container deployment This section outlines the customization options when deploying HCL Digital Experience Container. Backup and recovery procedures Containerization This section shows the deployment architecture and provides the instructions to create and manage backup and recovery of HCL Digital Experience components in containerized DX 9.5 environments. Parent topic: Operator-based deployment","title":"Container administration 9.5"},{"location":"containerization/maintenance/#container-administration-95","text":"The information in this section enables administrators to manage select operations performance controls, and to update and replace their HCL Digital Experience 9.5 container images with the latest 9.5 container update release. New HCL Digital Experience 9.5 CFxxx container images are released on a regular cadence. Images include fixes to HCL Digital Experience (comprised of HCL Portal and HCL Web Content Manager), IBM WebSphere Application Server (WAS) Network Deployment, and the Java Development Kit (JDK), and additional components, such as the Experience API, Digital Asset Management, Content Composer, Remote Search, and more. Consult the Digital Experience Deployment topic for the latest list of DX 9.5 Container Images delivered through the Container Update releases. Customers should not apply maintenance to an HCL Digital Experience 9.5 container image. Instead, they should run the update process as described below. Customers should not extend the HCL Digital Experience 9.5 container images. They are not intended to be used in the FROM instruction as a parent image. Critical hot fixes are built for HCL Digital Experience 9.5 container releases when required outside of the container release process. HCL Digital Experience customers can contact HCL Customer Support if a critical fix is required for their HCL Digital Experience containerized deployment. There is a separation of product and customer code. Customizations should be kept in the wp_profile in the persistent volume and the external and the external database. As HCL Digital Experience 9.5 container development moves forward with the deployment type, an effort to better separate custom code from product code is planned. Video tutorial: HCL Digital Experience - Update an HCL Portal Docker Container Starting with 9.5, under the HCL Digital Experience container update releases, as new HCL Digital Experience 9.5 images become available from HCL, customers can modify the custom resource instance to use 9.5. The initial HCL Digital Experience 9.5 container update release available to DX customers in the HCL Software License Portal page. This pattern is possible because customizations are not made to the image but isolated to the persistent volume and external database, which follows best practices. The procedure for updating to a new release of the HCL Digital Experience 9.5 image is detailed in the Update the Digital Experience 9.5 Core Kubernetes Container Deployment . Update the Digital Experience 9.5 Core Kubernetes or Red Hat OpenShift container deployment Update the Digital Experience 9.5 Core Kubernetes container deployment. Update the HCL DX 9.5 Experience API, Content Composer, and Digital Asset Management components This section provides the steps to update the HCL Digital Experience 9.5 Experience API, HCL Digital Experience 9.5 Content Composer, and HCL Digital Experience 9.5 Digital Asset Management components. Optional: Configuration Settings to Manage Digital Asset Management Media upload storage services This section outlines optional configuration steps to tune Digital Asset Management storage services. HCL Digital Experience 9.5 Docker and Container initialization performance Beginning with from HCL Digital Experience 9.5 Container Update CF192 release, container DX applications initialization performance is improved. Review the following guidance for information, defaults, and options to manage container applications initialization performance when deployed to Docker, Red Hat OpenShift, and Kubernetes platforms. Customizing your container deployment This section outlines the customization options when deploying HCL Digital Experience Container. Backup and recovery procedures Containerization This section shows the deployment architecture and provides the instructions to create and manage backup and recovery of HCL Digital Experience components in containerized DX 9.5 environments. Parent topic: Operator-based deployment","title":"Container administration 9.5"},{"location":"containerization/monitor_helm_deployment_metrics/","text":"Monitor the Digital Experience deployment using metrics This topic outlines the use of standards-based metrics to monitor activity and performance of DX container deployments. Prometheus metrics and Grafana The Digital Experience 9.5 Helm deployment supports monitoring the deployment activity with advanced metrics and visualization, by exposing standards-based Prometheus -compatible metrics. Prometheus metrics components can scrape the metrics of most of the DX 9.5 container applications. The collected data is queried from Prometheus and are visualized in operations dashboard solutions, such as Grafana . The following information can advise administrators which Digital Experience 9.5 applications can use these tools with some usage examples. Digital Experience 9.5 applications and Prometheus metrics The following Digital Experience 9.5 applications expose metrics that can be tracked with Prometheus metrics. Core Remote Search Content Composer Design Studio Digital Asset Management Image Processor Experience API DAM persistence Ambassador Application Port Route Core 10038 /metrics Remote Search 9060 /metrics Content Composer 3000 /probe/metrics Design Studio 3000 /probe/metrics Digital Asset Management 3000 /probe/metrics Image Processor 3000 /probe/metrics Ring API 3000 /probe/metrics DAM Persistence 9187 /metrics Ambassador 8877 /metrics Important: HCL Digital Experience 9.5 does not include a deployment of Prometheus or Grafana . When metrics are enabled in the DX 9.5 Helm chart , the application exposes Prometheus-compatible metrics. Those metrics can be consumed by any common Prometheus installation. HCL DX 9.5 metrics are compatible with the following deployment and discovery types of Prometheus in Kubernetes environments: Prometheus - Discovers metrics by evaluating the annotation of the services Prometheus Operator - Discovers metrics using the ServiceMonitor custom resources Administrators can configure the HCL DX 9.5 metrics depending on their specific Prometheus deployment, as outlined in the following sections. Configure Prometheus metrics To configure the metrics for the Digital Experience 9.5 applications in the DX 9.5 Helm chart, enable scraping in the custom-values.yaml used for the DX 9.5 deployment. The metrics are configured independently for each DX 9.5 application. Parameter Description Default value metrics.<application>.scrape Determines if the metrics of this application are scraped by Prometheus. false metrics.<application>.prometheusDiscoveryType Determines how Prometheus discovers the metrics of a service. Accepts \"annotation\" and \"serviceMonitor\" . The \"serviceMonitor\" setting requires that the ServiceMonitor CRD (which comes with the Prometheus Operator), is installed in the cluster. \"annotation\" Example configurations : Enable the metrics for DX 9.5 core and add the appropriate annotation for Prometheus: ``` metrics: core: scrape: true # prometheusDiscoveryType is optional here as \"annotation\" is the default prometheusDiscoveryType: \"annotation\" ``` Enable the metrics for DX 9.5 Core and create a ServiceMonitor for Prometheus Operator: ``` metrics: core: scrape: true prometheusDiscoveryType: \"serviceMonitor\" ``` Grafana dashboards The exposed DX 9.5 Applications metrics are compatible with a set of existing Grafana operations dashboards that are available from the Grafana dashboard page, as well as a set of Granada-supported custom dashboards provided in JSON format. See following examples, which can be imported directly into Grafana. Publicly available operations dashboards You can directly download or import the following dashboards from the Grafana community page using the IDs or links. ID Dashboard Applications 14151 WebSphere Application Server PMI metrics dashboard Core, Remote Search 11159 NodeJS application dashboard Content Composer, Design Studio, Digital Asset Management, Image Processor, Experience API 9628 PostgreSQL database DAM persistence 10850 Ambassador dashboard Ambassador HCL Digital Experience custom dashboards The following dashboards are provided by HCL Software for use with HCL Digital Experience 9.5 deployments. These examples expose custom metrics for DX applications or provide enhanced features for existing dashboards. They are available in the public HCL Software Github repository . Dashboard Application(s) dam_dashboard.json Digital Asset Management References to Prometheus and Grafana installations Important: The resources outline here are optional deployment examples. HCL Software does not provide direct support for any issues related to the Prometheus metrics or the Grafana visualization tools. To leverage the full potential of the Digital Experience 9.5 applications metrics, an existing Prometheus and Grafana deployment can be used. Following is a list of additional metrics tracking and visualization services (non-exhaustive) that you can consider when developing solutions according to your deployment needs: kube-prometheus-stack Helm chart that includes: The Prometheus Operator Highly available Prometheus Highly available Alertmanager Prometheus node-exporter Prometheus adapter for Kubernetes metrics APIs kube-state-metrics Grafana Note: The kube-prometheus-stack Helm chart is based on the kube-prometheus repository, and comes with a set of tools to monitor the Kubernetes cluster, as well as pre-installed Grafana dashboards for visualization. prometheus and grafana are provided as independent Helm charts.","title":"Monitor the Digital Experience deployment using metrics"},{"location":"containerization/monitor_helm_deployment_metrics/#monitor-the-digital-experience-deployment-using-metrics","text":"This topic outlines the use of standards-based metrics to monitor activity and performance of DX container deployments.","title":"Monitor the Digital Experience deployment using metrics"},{"location":"containerization/monitor_helm_deployment_metrics/#prometheus-metrics-and-grafana","text":"The Digital Experience 9.5 Helm deployment supports monitoring the deployment activity with advanced metrics and visualization, by exposing standards-based Prometheus -compatible metrics. Prometheus metrics components can scrape the metrics of most of the DX 9.5 container applications. The collected data is queried from Prometheus and are visualized in operations dashboard solutions, such as Grafana . The following information can advise administrators which Digital Experience 9.5 applications can use these tools with some usage examples.","title":"Prometheus metrics and Grafana"},{"location":"containerization/monitor_helm_deployment_metrics/#digital-experience-95-applications-and-prometheus-metrics","text":"The following Digital Experience 9.5 applications expose metrics that can be tracked with Prometheus metrics. Core Remote Search Content Composer Design Studio Digital Asset Management Image Processor Experience API DAM persistence Ambassador Application Port Route Core 10038 /metrics Remote Search 9060 /metrics Content Composer 3000 /probe/metrics Design Studio 3000 /probe/metrics Digital Asset Management 3000 /probe/metrics Image Processor 3000 /probe/metrics Ring API 3000 /probe/metrics DAM Persistence 9187 /metrics Ambassador 8877 /metrics Important: HCL Digital Experience 9.5 does not include a deployment of Prometheus or Grafana . When metrics are enabled in the DX 9.5 Helm chart , the application exposes Prometheus-compatible metrics. Those metrics can be consumed by any common Prometheus installation. HCL DX 9.5 metrics are compatible with the following deployment and discovery types of Prometheus in Kubernetes environments: Prometheus - Discovers metrics by evaluating the annotation of the services Prometheus Operator - Discovers metrics using the ServiceMonitor custom resources Administrators can configure the HCL DX 9.5 metrics depending on their specific Prometheus deployment, as outlined in the following sections.","title":"Digital Experience 9.5 applications and Prometheus metrics"},{"location":"containerization/monitor_helm_deployment_metrics/#configure-prometheus-metrics","text":"To configure the metrics for the Digital Experience 9.5 applications in the DX 9.5 Helm chart, enable scraping in the custom-values.yaml used for the DX 9.5 deployment. The metrics are configured independently for each DX 9.5 application. Parameter Description Default value metrics.<application>.scrape Determines if the metrics of this application are scraped by Prometheus. false metrics.<application>.prometheusDiscoveryType Determines how Prometheus discovers the metrics of a service. Accepts \"annotation\" and \"serviceMonitor\" . The \"serviceMonitor\" setting requires that the ServiceMonitor CRD (which comes with the Prometheus Operator), is installed in the cluster. \"annotation\" Example configurations : Enable the metrics for DX 9.5 core and add the appropriate annotation for Prometheus: ``` metrics: core: scrape: true # prometheusDiscoveryType is optional here as \"annotation\" is the default prometheusDiscoveryType: \"annotation\" ``` Enable the metrics for DX 9.5 Core and create a ServiceMonitor for Prometheus Operator: ``` metrics: core: scrape: true prometheusDiscoveryType: \"serviceMonitor\" ```","title":"Configure Prometheus metrics"},{"location":"containerization/monitor_helm_deployment_metrics/#grafana-dashboards","text":"The exposed DX 9.5 Applications metrics are compatible with a set of existing Grafana operations dashboards that are available from the Grafana dashboard page, as well as a set of Granada-supported custom dashboards provided in JSON format. See following examples, which can be imported directly into Grafana. Publicly available operations dashboards You can directly download or import the following dashboards from the Grafana community page using the IDs or links. ID Dashboard Applications 14151 WebSphere Application Server PMI metrics dashboard Core, Remote Search 11159 NodeJS application dashboard Content Composer, Design Studio, Digital Asset Management, Image Processor, Experience API 9628 PostgreSQL database DAM persistence 10850 Ambassador dashboard Ambassador","title":"Grafana dashboards"},{"location":"containerization/monitor_helm_deployment_metrics/#hcl-digital-experience-custom-dashboards","text":"The following dashboards are provided by HCL Software for use with HCL Digital Experience 9.5 deployments. These examples expose custom metrics for DX applications or provide enhanced features for existing dashboards. They are available in the public HCL Software Github repository . Dashboard Application(s) dam_dashboard.json Digital Asset Management","title":"HCL Digital Experience custom dashboards"},{"location":"containerization/monitor_helm_deployment_metrics/#references-to-prometheus-and-grafana-installations","text":"Important: The resources outline here are optional deployment examples. HCL Software does not provide direct support for any issues related to the Prometheus metrics or the Grafana visualization tools. To leverage the full potential of the Digital Experience 9.5 applications metrics, an existing Prometheus and Grafana deployment can be used. Following is a list of additional metrics tracking and visualization services (non-exhaustive) that you can consider when developing solutions according to your deployment needs: kube-prometheus-stack Helm chart that includes: The Prometheus Operator Highly available Prometheus Highly available Alertmanager Prometheus node-exporter Prometheus adapter for Kubernetes metrics APIs kube-state-metrics Grafana Note: The kube-prometheus-stack Helm chart is based on the kube-prometheus repository, and comes with a set of tools to monitor the Kubernetes cluster, as well as pre-installed Grafana dashboards for visualization. prometheus and grafana are provided as independent Helm charts.","title":"References to Prometheus and Grafana installations"},{"location":"containerization/openshift/","text":"Deploy DX 9.5 Container to Red Hat OpenShift Learn how to deploy HCL Digital Experience (DX) 9.5 to Red Hat OpenShift platform. Deploying DX Container to Red Hat OpenShift Learn how to deploy different release of HCL Digital Experience (DX) 9.5 using the Red Hat OpenShift platform. Finding the OpenShift deployment This section describes how to find your HCL Portal deployment. Understanding the OpenShift deployment This section describes the output and artifacts created when deploying HCL Digital Experience 9.5 Docker images to Red Hat OpenShift. Deploying Custom Code in OpenShift This section outlines deploying custom code to HCL Digital Experience in OpenShift. Parent topic: HCL Digital Experience 9.5 Container Deployment","title":"Deploy DX 9.5 Container to Red Hat OpenShift"},{"location":"containerization/openshift/#deploy-dx-95-container-to-red-hat-openshift","text":"Learn how to deploy HCL Digital Experience (DX) 9.5 to Red Hat OpenShift platform. Deploying DX Container to Red Hat OpenShift Learn how to deploy different release of HCL Digital Experience (DX) 9.5 using the Red Hat OpenShift platform. Finding the OpenShift deployment This section describes how to find your HCL Portal deployment. Understanding the OpenShift deployment This section describes the output and artifacts created when deploying HCL Digital Experience 9.5 Docker images to Red Hat OpenShift. Deploying Custom Code in OpenShift This section outlines deploying custom code to HCL Digital Experience in OpenShift. Parent topic: HCL Digital Experience 9.5 Container Deployment","title":"Deploy DX 9.5 Container to Red Hat OpenShift"},{"location":"containerization/openshift_cf191andearlier/","text":"Deploying DX CF191 and earlier release Containers to Red Hat OpenShift Learn how to deploy HCL Digital Experience (DX) 9.5 CF191 and earlier release Containers using the Red Hat OpenShift platform. Prerequisites Prior to using the procedure below, it is assumed that the HCL DX Administrator is generally experienced in using Kubernetes. Additionally, the DX Administrator must have cluster admin access to the OpenShift environment. The following tools must be installed on a machine other than the Portal server: Docker OpenShift Command Line Interface (CLI) or kubectl Volume requirement: Requires an AccessMode of ReadWriteMany Requires a minimum of 40 GB , with the default request set to 100 GB RECLAIM POLICY = Retain Note: HCL Digital Experience is input-output (I/O) intensive which requires a high performing file system for optimization. Note: Reference the latest HCL DX 9.5 Container Release and Update file listings in the Docker deployment topic. Video: Getting Started to deploy HCL DX 9.5 in Red Hat OpenShift Procedure Follow these steps to deploy the HCL Digital Experience (DX) 9.5 container release CF191 or earlier to Red Hat OpenShift. Download the HCL Digital Experience Container Update CF191 or earlier container product and extract it to your local file system: -rw- r--r-- 1 hcl-dx-cloud-operator-image-v95_xxxxxxxx-xxxx.tar.gz -rw- r--r-- 1 hcl-dx-core-image-v95_xxxxxxxx-xxxx.tar.gz -rw- r--r-- 1 hcl-dx-openshift-scripts-v95_xxxxxxxx-xxxx.zip Note: If using HCL DX 9.5 container update release CF183 and higher, the hcl-dx-openshift-scripts-v95_xxxxxxxx-xxxx.zip file is renamed to hcl-dx-cloud-scripts-v95_xxxxxxxx-xxxx.zip. The file name change also affects the directory name for future steps. Open a terminal window and change to the root directory of the extracted package. Load the containers into your Docker repository: ``` docker load < hcl-dx-cloud-operator-image-v95_xxxxxxxx-xxxx.tar.gz - ``` docker load < hcl-dx-core-image-v95_xxxxxxxx-xxxx.tar.gz ![](../images/container_openshift_load_01.png \"Loading containers into your Docker repository\") Extract the HCL DX deployment scripts: unzip hcl-dx-openshift-scripts-v95_xxxxxxxx-xxxx.zip Distribute the Docker images in your local Docker repository to your target OpenShift repository by tagging and pushing them appropriately. If you used docker load to place your images in the target repository, skip this and proceed to the next step. Syntax for tagging: docker tag <image_name>:<image_tag> <openshift_registry>/<image_name>:<tag> Syntax for pushing: docker push <openshift_registry>/<image_name>:<tag> Change to the extracted files directory. ./hcl-dx-openshift-scripts Install the DxDeployment custom resource definition. Do not modify the git_v1_dxdeployment_crd.yaml file. Customize ./deploy/crds/git_v1_dxdeployment_cr.yaml if required. Use either of the following commands: - ./scripts/deployCrd.sh - kubectl create -f hcl-dx-openshift-scripts/deploy/crds/git_v1_dxdeployment_crd.yaml Create (or have the OpenShift administrator create) a persistent volume where the AccessMode is set to ReadWriteMany and the persistent volume reclaim policy set to Retain . See the second item in the Prerequisites . To create the namespace, install the project scoped service account, role, role binding, operator, and deployment, run the deployDx.sh script. ./scripts/deployDx.sh NAMESPACE REPLICAS REPOSITORY IMAGENAME IMAGETAG VOLUMENAME STORAGECLASS DBTYPE Note: For the initial 9.5 release, you need to edit the operator.yaml file and ensure the IMAGENAME and IMAGETAG are correct. NAMESPACE - the project or the namespace to create or use for deployment. REPLICAS - the number of initial instances for the deployment. REPOSITORY - your local repository, the repository used by OpenShift/Kubernetes. IMAGENAME - the name of the dxCore image, as added to the repository above. IMAGETAG - the tag for the target image as added to the above repository. VOLUMENAME - if you have a self provisioning storage class, you can use the keyword 'create' (or leave it blank) instead of the volume name. STORAGECLASS - the storage class name used to create the persistent volume. DBTYPE - the database type. By default, and initially, this is Derby. HCL DX 9.5 uses Apache Derby, Oracle Database, IBM DB2, or Microsoft SQL Server. Acceptable values are derby , oracle , db2 , or msSql . Note: For more information, see sections on Understanding the OpenShift deployment and Customizing the container deployment . Update To update the deployment, follow these steps: Run the updateDx.sh script with updated values: ./scripts/updateDx.sh NAMESPACE REPLICAS REPOSITORY IMAGENAME IMAGETAG VOLUMENAME STORAGECLASS DBTYPE NAMESPACE - the project or the namespace to create or use for deployment. REPLICAS - the number of initial instances for the deployment. REPOSITORY - your local repository, the repository used by OpenShift/Kubernetes. IMAGENAME - the name of the dxCore image, as added to the repository above. IMAGETAG - the tag for the target image as added to the above repository. VOLUMENAME - the volume to be used by the deployment for persistence, this must use AccessMode ReadWriteMany . STORAGECLASS - the storage class name used to create the persistent volume. DBTYPE - the database type. By default, and initially, this is Derby. For example, once the database is transferred, the DBTYPE will need to be updated so you can scale the instances higher. Additionally, once the database is transferred, the number of replicas could be increased. There are additional options to customize the deployment . Delete Removing the entire deployment requires several steps, this is by design. Run the following to remove the deployment in a specific namespace: ./scripts/removeDx.sh NAMESPACE NAMESPACE - the project or the namespace created or used for deployment. Use any of the following commands to remove a namespace: OpenShift commands: oc delete \"project project\"_name oc delete -f dxNameSpace_NAMESPACE.yaml where NAMESPACE is the namespace to be removed. Kubernetes command: kubectl delete -f dxNameSpace_NAMESPACE.yaml where NAMESPACE is the namespace to be removed. The persistent volume associated to the deployment needs to be cleaned up by your Administrator. To reuse a persistent volume, see the following steps: Open the persistent volume in a visual editor (vi) using any of the following commands: OpenShift command: oc edit pv your_namespace Kubernetes command: kubectl edit pv your_namespace Remove the claimRef section: ``` claimRef: apiVersion: v1 kind: PersistentVolumeClaim name: dx-deploy-pvc namespace: your_namespace resourceVersion: \"488931120\" uid: ebd58361-0e2a-11ea-b02e-02f8fe687954 ``` Ensure you get the 'persistentvolume/your_namespace edited' message. You may need to manually remove any data remaining from the previous deployment. Parent topic: Deploying DX Container to Red Hat OpenShift","title":"Deploying DX CF191 and earlier release Containers to Red Hat OpenShift"},{"location":"containerization/openshift_cf191andearlier/#deploying-dx-cf191-and-earlier-release-containers-to-red-hat-openshift","text":"Learn how to deploy HCL Digital Experience (DX) 9.5 CF191 and earlier release Containers using the Red Hat OpenShift platform.","title":"Deploying DX CF191 and earlier release Containers to Red Hat OpenShift"},{"location":"containerization/openshift_cf191andearlier/#prerequisites","text":"Prior to using the procedure below, it is assumed that the HCL DX Administrator is generally experienced in using Kubernetes. Additionally, the DX Administrator must have cluster admin access to the OpenShift environment. The following tools must be installed on a machine other than the Portal server: Docker OpenShift Command Line Interface (CLI) or kubectl Volume requirement: Requires an AccessMode of ReadWriteMany Requires a minimum of 40 GB , with the default request set to 100 GB RECLAIM POLICY = Retain Note: HCL Digital Experience is input-output (I/O) intensive which requires a high performing file system for optimization. Note: Reference the latest HCL DX 9.5 Container Release and Update file listings in the Docker deployment topic. Video: Getting Started to deploy HCL DX 9.5 in Red Hat OpenShift","title":"Prerequisites"},{"location":"containerization/openshift_cf191andearlier/#procedure","text":"Follow these steps to deploy the HCL Digital Experience (DX) 9.5 container release CF191 or earlier to Red Hat OpenShift. Download the HCL Digital Experience Container Update CF191 or earlier container product and extract it to your local file system: -rw- r--r-- 1 hcl-dx-cloud-operator-image-v95_xxxxxxxx-xxxx.tar.gz -rw- r--r-- 1 hcl-dx-core-image-v95_xxxxxxxx-xxxx.tar.gz -rw- r--r-- 1 hcl-dx-openshift-scripts-v95_xxxxxxxx-xxxx.zip Note: If using HCL DX 9.5 container update release CF183 and higher, the hcl-dx-openshift-scripts-v95_xxxxxxxx-xxxx.zip file is renamed to hcl-dx-cloud-scripts-v95_xxxxxxxx-xxxx.zip. The file name change also affects the directory name for future steps. Open a terminal window and change to the root directory of the extracted package. Load the containers into your Docker repository: ``` docker load < hcl-dx-cloud-operator-image-v95_xxxxxxxx-xxxx.tar.gz - ``` docker load < hcl-dx-core-image-v95_xxxxxxxx-xxxx.tar.gz ![](../images/container_openshift_load_01.png \"Loading containers into your Docker repository\") Extract the HCL DX deployment scripts: unzip hcl-dx-openshift-scripts-v95_xxxxxxxx-xxxx.zip Distribute the Docker images in your local Docker repository to your target OpenShift repository by tagging and pushing them appropriately. If you used docker load to place your images in the target repository, skip this and proceed to the next step. Syntax for tagging: docker tag <image_name>:<image_tag> <openshift_registry>/<image_name>:<tag> Syntax for pushing: docker push <openshift_registry>/<image_name>:<tag> Change to the extracted files directory. ./hcl-dx-openshift-scripts Install the DxDeployment custom resource definition. Do not modify the git_v1_dxdeployment_crd.yaml file. Customize ./deploy/crds/git_v1_dxdeployment_cr.yaml if required. Use either of the following commands: - ./scripts/deployCrd.sh - kubectl create -f hcl-dx-openshift-scripts/deploy/crds/git_v1_dxdeployment_crd.yaml Create (or have the OpenShift administrator create) a persistent volume where the AccessMode is set to ReadWriteMany and the persistent volume reclaim policy set to Retain . See the second item in the Prerequisites . To create the namespace, install the project scoped service account, role, role binding, operator, and deployment, run the deployDx.sh script. ./scripts/deployDx.sh NAMESPACE REPLICAS REPOSITORY IMAGENAME IMAGETAG VOLUMENAME STORAGECLASS DBTYPE Note: For the initial 9.5 release, you need to edit the operator.yaml file and ensure the IMAGENAME and IMAGETAG are correct. NAMESPACE - the project or the namespace to create or use for deployment. REPLICAS - the number of initial instances for the deployment. REPOSITORY - your local repository, the repository used by OpenShift/Kubernetes. IMAGENAME - the name of the dxCore image, as added to the repository above. IMAGETAG - the tag for the target image as added to the above repository. VOLUMENAME - if you have a self provisioning storage class, you can use the keyword 'create' (or leave it blank) instead of the volume name. STORAGECLASS - the storage class name used to create the persistent volume. DBTYPE - the database type. By default, and initially, this is Derby. HCL DX 9.5 uses Apache Derby, Oracle Database, IBM DB2, or Microsoft SQL Server. Acceptable values are derby , oracle , db2 , or msSql . Note: For more information, see sections on Understanding the OpenShift deployment and Customizing the container deployment .","title":"Procedure"},{"location":"containerization/openshift_cf191andearlier/#update","text":"To update the deployment, follow these steps: Run the updateDx.sh script with updated values: ./scripts/updateDx.sh NAMESPACE REPLICAS REPOSITORY IMAGENAME IMAGETAG VOLUMENAME STORAGECLASS DBTYPE NAMESPACE - the project or the namespace to create or use for deployment. REPLICAS - the number of initial instances for the deployment. REPOSITORY - your local repository, the repository used by OpenShift/Kubernetes. IMAGENAME - the name of the dxCore image, as added to the repository above. IMAGETAG - the tag for the target image as added to the above repository. VOLUMENAME - the volume to be used by the deployment for persistence, this must use AccessMode ReadWriteMany . STORAGECLASS - the storage class name used to create the persistent volume. DBTYPE - the database type. By default, and initially, this is Derby. For example, once the database is transferred, the DBTYPE will need to be updated so you can scale the instances higher. Additionally, once the database is transferred, the number of replicas could be increased. There are additional options to customize the deployment .","title":"Update"},{"location":"containerization/openshift_cf191andearlier/#delete","text":"Removing the entire deployment requires several steps, this is by design. Run the following to remove the deployment in a specific namespace: ./scripts/removeDx.sh NAMESPACE NAMESPACE - the project or the namespace created or used for deployment. Use any of the following commands to remove a namespace: OpenShift commands: oc delete \"project project\"_name oc delete -f dxNameSpace_NAMESPACE.yaml where NAMESPACE is the namespace to be removed. Kubernetes command: kubectl delete -f dxNameSpace_NAMESPACE.yaml where NAMESPACE is the namespace to be removed. The persistent volume associated to the deployment needs to be cleaned up by your Administrator. To reuse a persistent volume, see the following steps: Open the persistent volume in a visual editor (vi) using any of the following commands: OpenShift command: oc edit pv your_namespace Kubernetes command: kubectl edit pv your_namespace Remove the claimRef section: ``` claimRef: apiVersion: v1 kind: PersistentVolumeClaim name: dx-deploy-pvc namespace: your_namespace resourceVersion: \"488931120\" uid: ebd58361-0e2a-11ea-b02e-02f8fe687954 ``` Ensure you get the 'persistentvolume/your_namespace edited' message. You may need to manually remove any data remaining from the previous deployment. Parent topic: Deploying DX Container to Red Hat OpenShift","title":"Delete"},{"location":"containerization/openshift_cf192andlater/","text":"Deploying DX CF192 and later release Containers to Red Hat OpenShift Learn how to deploy HCL Digital Experience (DX) 9.5 DX CF192 and later release Containers using the Red Hat OpenShift platform. Prerequisites Prior to using the procedure below, it is assumed that the HCL DX Administrator is generally experienced in using Kubernetes. Additionally, the DX Administrator must have cluster admin access to the OpenShift environment. The following tools must be installed on a machine other than the Portal server: Docker Red Hat OpenShift Command Line Interface (CLI) or kubectl If deploying Digital Experience Container Update CF192 and later, the dxctl tool is used to install and configure the deployment Volume requirement: Requires an AccessMode of ReadWriteMany Requires a minimum of 40 GB , with the default request set to 100 GB RECLAIM POLICY = Retain Note: HCL Digital Experience is input-output (I/O) intensive which requires a high performing file system for optimization. About this task Follow these steps to deploy HCL Digital Experience 9.5 container release in Red Hat OpenShift Container Update CF192 and later. If deploying a Container Update CF191 and earlier, see the instructions to deploy using script commands instead of the dxctl tool in this section. Note: Reference the latest HCL DX 9.5 Container Release and Update file listings in the Docker deployment topic. Video: Getting Started to deploy HCL DX 9.5 in Red Hat OpenShift Procedure Follow these steps to deploy the HCL Digital Experience (DX) 9.5 CF192 and later container release in Red Hat OpenShift. Note: Reference the latest HCL DX 9.5 Container Release and Update file listings in the Docker deployment topic . Download the HCL Digital Experience Container Update CF192 and later release container product and extract it to your local file system: -rw- r--r-- 1 hcl-dx-cloud-operator-image-v95_xxxxxxxx-xxxx.tar.gz -rw- r--r-- 1 hcl-dx-core-image-v95_xxxxxxxx-xxxx.tar.gz -rw- r--r-- 1 hcl-dx-openshift-scripts-v95_xxxxxxxx-xxxx.zip Note: If using HCL DX 9.5 container update release CF183 and later, the hcl-dx-openshift-scripts-v95_xxxxxxxx-xxxx.zip file is renamed to hcl-dx-cloud-scripts-v95_xxxxxxxx-xxxx.zip. The file name change also affects the directory name for future steps. Open a terminal window and change to the root directory of the extracted package. Load the containers into your Docker repository: ``` docker load < hcl-dx-cloud-operator-image-v95_xxxxxxxx-xxxx.tar.gz - ``` docker load < hcl-dx-core-image-v95_xxxxxxxx-xxxx.tar.gz ![](../images/container_openshift_load_01.png \"Loading containers into your Docker repository\") Extract the HCL DX deployment scripts: unzip hcl-dx-openshift-scripts-v95_xxxxxxxx-xxxx.zip Distribute the Docker images in your local Docker repository to your target OpenShift repository by tagging and pushing them appropriately. If you used docker load to place your images in the target repository, skip this and proceed to the next step. Syntax for tagging: docker tag <image_name>:<image_tag> <openshift_registry>/<image_name>:<tag> Syntax for pushing: docker push <openshift_registry>/<image_name>:<tag> Create (or have the OpenShift administrator create) a persistent volume where the AccessMode is set to ReadWriteMany and the persistent volume reclaim policy set to Retain . For more details refer to the Volume requirements section above. Deploy using the HCL DX dxctl tool . Before using the dxctl tool to deploy, you must be logged in to the targeted cluster using the cloud platform specific CLI. (Red Hat OpenShift, Amazon EKS, Microsoft Azure AKS, Google GKE). Example: Change to the extracted files directory, using DX Container Update CF192 and later, the directory structure appears as follows: ./hcl-dx-openshift-scripts Configuring dxctl properties for the DX 9.5 Container CF192 and later deployment: Copy one of the provided properties files to further modify for your deployment. The modified properties file can be used for the deployment and the same file must be used for further updates. Example: mkdir -p /home/$USER/deployments/ cp dxctl/properties/full-deployment.properties /home/$USER/deployments/myfirst_deployment.properties Update the dxctl properties file values. Sample values: dx.namespace: caps-dx-deploy dx.image: dxen dx.tag: v95_CF192_20210223-004909 _release_95_CF192_603477b7 dx.storageclass:dx-deploy-stg dx.volume: caps-dx-core dx.volume.size:100 remote.search.enabled:false openldap.enabled:false api.enabled: false composer.enabled: false dam.enabled: false dx.operator.image: dx-build-output/hcldx-cloud-operator/hcldx-cloud-operator dx.operator.tag: v95_CF192_20210223-0546 _release_95_CF192 Example: Important: With HCL DX 9.5 Container Update CF197 and later, dam.features in full-deployment properties is added for use in a future container update release, and should not be modified except with direct guidance from HCL Support. Note: With HCL DX 9.5 Container Update CF193 and later, persist.force.read in full-deployment properties is added to enable a read-only Postgres pod for Digital Asset Management. This enables a failover capability for the Postgres service supporting DAM. Another option to enable a read-only pod is to set the persist.minreplicas: option set to greater than 1. Example: Deploy using dxctl : Run the command below using the dxctl tool to deploy the HCL DX 9.5 CF192 and later container on Red Hat Openshift: ./mac/dxctl --deploy -p /home/$USER/deployments/myfirst_deployment.properties Example: Note: This set of steps result in a DX 9.5 CF192 and later deployment being created. Note: For more information, see sections on Understanding the OpenShift deployment and Customizing the container deployment . Update To update the deployment to later HCL DX 9.5 Container Update releases, follow these steps: If using HCL DX 9.5 Container Update CF191 and earlier release, update the deployment properties file with the new image values, and then run the Update command. Examples: On Mac: ./mac/dxctl --update -p properties/myfirst_deployment.properties On Windows: .\\win\\dxctl.exe --update -p properties\\myfirst_deployment.properties On Linux: ./linux/dxctl -\u2013update -p properties/myfirst_deployment.properties Additional considerations: For example, once the database is transferred, the DBTYPE must be updated so you can scale the instances higher. Additionally, once the database is transferred, the number of replicas could be increased. There are additional options to customize the deployment . Note: If using HCL DX 9.5 Container Update CF192 and later, the dxctl tool can be used to update the deployment. The dxctl tool does not deploy or update the DxDeployment custom resource definition. Prior to running an update process, administrators should check the DxDeployment custom resource definition (hcl-dx-cloud-scripts/deploy/crds/git.cwp.pnp-hcl.com_dxdeployments_crd.yaml) for changes and update accordingly: Red Hat OpenShift command: oc delete crd dxdeployments.git.cwp.pnp-hcl.com CAUTION: Since crd is a cluster-wide resource, the use of oc delete crd dxdeployments.git.cwp.pnp-hcl.com causes a service outage for all the dx-deployment across the cluster. Red Hat OpenShift command: oc create -f deploy/crds/git.cwp.pnp-hcl.com_dxdeployments_crd.yaml Note: The default IBM WebSphere certificate that ships with Digital Experience 9.5 Docker images (only) expired on April 26, 2021. A new certificate is added to Digital Experience 9.5 Container Update CF194 and later docker images. If you are unable to update to CF194 for any reason, see the following HCL Digital Experience support tech note for manual steps to update the expired certificate: Manual Steps to Apply the Digital Experience 9.5 Container Deployment Core Certificate Update . The updated certificate included with Digital Experience Container Update CF194 updates the Kubernetes secrets used by the DX 9.5 Red Hat OpenShift routes. Following a successful upgrade to DX 95 Container Update CF194, it is necessary to manually delete the secure Digital Experience 9.5 route if deployed on OpenShift. The operator recreates the route using the updated secrets data. If you are using additional custom routes that utilize the Digital Experience 9.5 container secrets, edit or delete/recreate them to use the updated secrets data. For example: oc delete route `<deployment name>`-service-dx-home-sec Delete To delete the deployment, follow one of two methods: Method 1: Remove the deployment but allow for redeployment with the same volumes: Examples: . ./linux/dxctl --destroy -p properties/myfirst_deployment.properties Method 2: Remove the entire namespace/project: Example: ./linux/dxctl --destroy -p properties/myfirst_deployment.properties -all true NAMESPACE - the project or the namespace created or used for deployment. If some deployment resources such as services are not deleted, the following command can be run: kubectl patch services $(kubectl get services -n $NAMESPACE | grep -v \"NAME\" |awk '{print $1}') -p '{\"metadata\":{\"finalizers\":null}}' -n $NAMESPACE Parent topic: Deploying DX Container to Red Hat OpenShift","title":"Deploying DX CF192 and later release Containers to Red Hat OpenShift"},{"location":"containerization/openshift_cf192andlater/#deploying-dx-cf192-and-later-release-containers-to-red-hat-openshift","text":"Learn how to deploy HCL Digital Experience (DX) 9.5 DX CF192 and later release Containers using the Red Hat OpenShift platform.","title":"Deploying DX CF192 and later release Containers to Red Hat OpenShift"},{"location":"containerization/openshift_cf192andlater/#prerequisites","text":"Prior to using the procedure below, it is assumed that the HCL DX Administrator is generally experienced in using Kubernetes. Additionally, the DX Administrator must have cluster admin access to the OpenShift environment. The following tools must be installed on a machine other than the Portal server: Docker Red Hat OpenShift Command Line Interface (CLI) or kubectl If deploying Digital Experience Container Update CF192 and later, the dxctl tool is used to install and configure the deployment Volume requirement: Requires an AccessMode of ReadWriteMany Requires a minimum of 40 GB , with the default request set to 100 GB RECLAIM POLICY = Retain Note: HCL Digital Experience is input-output (I/O) intensive which requires a high performing file system for optimization.","title":"Prerequisites"},{"location":"containerization/openshift_cf192andlater/#about-this-task","text":"Follow these steps to deploy HCL Digital Experience 9.5 container release in Red Hat OpenShift Container Update CF192 and later. If deploying a Container Update CF191 and earlier, see the instructions to deploy using script commands instead of the dxctl tool in this section. Note: Reference the latest HCL DX 9.5 Container Release and Update file listings in the Docker deployment topic. Video: Getting Started to deploy HCL DX 9.5 in Red Hat OpenShift","title":"About this task"},{"location":"containerization/openshift_cf192andlater/#procedure","text":"Follow these steps to deploy the HCL Digital Experience (DX) 9.5 CF192 and later container release in Red Hat OpenShift. Note: Reference the latest HCL DX 9.5 Container Release and Update file listings in the Docker deployment topic . Download the HCL Digital Experience Container Update CF192 and later release container product and extract it to your local file system: -rw- r--r-- 1 hcl-dx-cloud-operator-image-v95_xxxxxxxx-xxxx.tar.gz -rw- r--r-- 1 hcl-dx-core-image-v95_xxxxxxxx-xxxx.tar.gz -rw- r--r-- 1 hcl-dx-openshift-scripts-v95_xxxxxxxx-xxxx.zip Note: If using HCL DX 9.5 container update release CF183 and later, the hcl-dx-openshift-scripts-v95_xxxxxxxx-xxxx.zip file is renamed to hcl-dx-cloud-scripts-v95_xxxxxxxx-xxxx.zip. The file name change also affects the directory name for future steps. Open a terminal window and change to the root directory of the extracted package. Load the containers into your Docker repository: ``` docker load < hcl-dx-cloud-operator-image-v95_xxxxxxxx-xxxx.tar.gz - ``` docker load < hcl-dx-core-image-v95_xxxxxxxx-xxxx.tar.gz ![](../images/container_openshift_load_01.png \"Loading containers into your Docker repository\") Extract the HCL DX deployment scripts: unzip hcl-dx-openshift-scripts-v95_xxxxxxxx-xxxx.zip Distribute the Docker images in your local Docker repository to your target OpenShift repository by tagging and pushing them appropriately. If you used docker load to place your images in the target repository, skip this and proceed to the next step. Syntax for tagging: docker tag <image_name>:<image_tag> <openshift_registry>/<image_name>:<tag> Syntax for pushing: docker push <openshift_registry>/<image_name>:<tag> Create (or have the OpenShift administrator create) a persistent volume where the AccessMode is set to ReadWriteMany and the persistent volume reclaim policy set to Retain . For more details refer to the Volume requirements section above. Deploy using the HCL DX dxctl tool . Before using the dxctl tool to deploy, you must be logged in to the targeted cluster using the cloud platform specific CLI. (Red Hat OpenShift, Amazon EKS, Microsoft Azure AKS, Google GKE). Example: Change to the extracted files directory, using DX Container Update CF192 and later, the directory structure appears as follows: ./hcl-dx-openshift-scripts Configuring dxctl properties for the DX 9.5 Container CF192 and later deployment: Copy one of the provided properties files to further modify for your deployment. The modified properties file can be used for the deployment and the same file must be used for further updates. Example: mkdir -p /home/$USER/deployments/ cp dxctl/properties/full-deployment.properties /home/$USER/deployments/myfirst_deployment.properties Update the dxctl properties file values. Sample values: dx.namespace: caps-dx-deploy dx.image: dxen dx.tag: v95_CF192_20210223-004909 _release_95_CF192_603477b7 dx.storageclass:dx-deploy-stg dx.volume: caps-dx-core dx.volume.size:100 remote.search.enabled:false openldap.enabled:false api.enabled: false composer.enabled: false dam.enabled: false dx.operator.image: dx-build-output/hcldx-cloud-operator/hcldx-cloud-operator dx.operator.tag: v95_CF192_20210223-0546 _release_95_CF192 Example: Important: With HCL DX 9.5 Container Update CF197 and later, dam.features in full-deployment properties is added for use in a future container update release, and should not be modified except with direct guidance from HCL Support. Note: With HCL DX 9.5 Container Update CF193 and later, persist.force.read in full-deployment properties is added to enable a read-only Postgres pod for Digital Asset Management. This enables a failover capability for the Postgres service supporting DAM. Another option to enable a read-only pod is to set the persist.minreplicas: option set to greater than 1. Example: Deploy using dxctl : Run the command below using the dxctl tool to deploy the HCL DX 9.5 CF192 and later container on Red Hat Openshift: ./mac/dxctl --deploy -p /home/$USER/deployments/myfirst_deployment.properties Example: Note: This set of steps result in a DX 9.5 CF192 and later deployment being created. Note: For more information, see sections on Understanding the OpenShift deployment and Customizing the container deployment .","title":"Procedure"},{"location":"containerization/openshift_cf192andlater/#update","text":"To update the deployment to later HCL DX 9.5 Container Update releases, follow these steps: If using HCL DX 9.5 Container Update CF191 and earlier release, update the deployment properties file with the new image values, and then run the Update command. Examples: On Mac: ./mac/dxctl --update -p properties/myfirst_deployment.properties On Windows: .\\win\\dxctl.exe --update -p properties\\myfirst_deployment.properties On Linux: ./linux/dxctl -\u2013update -p properties/myfirst_deployment.properties Additional considerations: For example, once the database is transferred, the DBTYPE must be updated so you can scale the instances higher. Additionally, once the database is transferred, the number of replicas could be increased. There are additional options to customize the deployment . Note: If using HCL DX 9.5 Container Update CF192 and later, the dxctl tool can be used to update the deployment. The dxctl tool does not deploy or update the DxDeployment custom resource definition. Prior to running an update process, administrators should check the DxDeployment custom resource definition (hcl-dx-cloud-scripts/deploy/crds/git.cwp.pnp-hcl.com_dxdeployments_crd.yaml) for changes and update accordingly: Red Hat OpenShift command: oc delete crd dxdeployments.git.cwp.pnp-hcl.com CAUTION: Since crd is a cluster-wide resource, the use of oc delete crd dxdeployments.git.cwp.pnp-hcl.com causes a service outage for all the dx-deployment across the cluster. Red Hat OpenShift command: oc create -f deploy/crds/git.cwp.pnp-hcl.com_dxdeployments_crd.yaml Note: The default IBM WebSphere certificate that ships with Digital Experience 9.5 Docker images (only) expired on April 26, 2021. A new certificate is added to Digital Experience 9.5 Container Update CF194 and later docker images. If you are unable to update to CF194 for any reason, see the following HCL Digital Experience support tech note for manual steps to update the expired certificate: Manual Steps to Apply the Digital Experience 9.5 Container Deployment Core Certificate Update . The updated certificate included with Digital Experience Container Update CF194 updates the Kubernetes secrets used by the DX 9.5 Red Hat OpenShift routes. Following a successful upgrade to DX 95 Container Update CF194, it is necessary to manually delete the secure Digital Experience 9.5 route if deployed on OpenShift. The operator recreates the route using the updated secrets data. If you are using additional custom routes that utilize the Digital Experience 9.5 container secrets, edit or delete/recreate them to use the updated secrets data. For example: oc delete route `<deployment name>`-service-dx-home-sec","title":"Update"},{"location":"containerization/openshift_cf192andlater/#delete","text":"To delete the deployment, follow one of two methods: Method 1: Remove the deployment but allow for redeployment with the same volumes: Examples: . ./linux/dxctl --destroy -p properties/myfirst_deployment.properties Method 2: Remove the entire namespace/project: Example: ./linux/dxctl --destroy -p properties/myfirst_deployment.properties -all true NAMESPACE - the project or the namespace created or used for deployment. If some deployment resources such as services are not deleted, the following command can be run: kubectl patch services $(kubectl get services -n $NAMESPACE | grep -v \"NAME\" |awk '{print $1}') -p '{\"metadata\":{\"finalizers\":null}}' -n $NAMESPACE Parent topic: Deploying DX Container to Red Hat OpenShift","title":"Delete"},{"location":"containerization/operator_backup_and_recovery_procedures/","text":"Backup and recovery procedures Containerization This section shows the deployment architecture and provides the instructions to create and manage backup and recovery of HCL Digital Experience components in containerized DX 9.5 environments. Digital Experience 9.5 Container Deployment Architecture Learn about the HCL DX 9.5 Container deployment architecture to get a better understanding of the backup and recovery options. Note: This topology is also available in the Install the HCL Digital Experience 9.5 components topic. Instructions to back up the Digital Experience 9.5 Container components The following sections describe how the administrators can create and manage backups and recovery of DX 9.5 Container components such as wp_profile, persistence layer - database, and the media in Digital Asset Management. 1. wp-profile backup Backup the file systems in the Digital Experience 9.5 container profile ( Persistent volume claim wp_profile ). Refer to the Backup and Restore topic and component backup guidance for more information. Note: The HCL Digital Asset Management (DAM) component uploads folder and the DAM persistent mount for the primary instance dx-deployment-persistence-0 in the statefulset dx-deployment-persistence (https://console-openshift-console.apps.hcl-dxdev.hcl-dx-dev.net/k8s/ns/master-tests/statefulsets/dx-deployment-persistence) . To create a backup of the profile Persistent volume claim wp_profile , it is recommended that: The DX has only one instance. The DX 9.5 container instance is stopped using the HCL Portal and HCL Web Content Manager command as follows: ``` kubectl exec --stdin --tty -n -- /bin/bash cd /opt/HCL/wp_profile/bin/ /stopServer.sh WebSphere_Portal -username -password ``` The entire /opt/HCL/wp_profile directory is backed up. In the command line interface, run the following command to back up the Digital Experience 9.5 Persistent volume claim wp_profile : Before running the tar command, ensure that the backup file system that you are using has ~50% free profile. ``` cd /opt/HCL/wp_profile tar -cvpzf backup.tar.gz --exclude=/backup.tar.gz --one-file-system /opt/HCL/wp_profile/* ``` After the tar backup command is completed, it is recommended that a copy of the backup.tar.gz file is created and placed to alternate long term storage. Recover from wp_profile pervasive volume backup You can extract the backup of the wp_profile volume to recover any files you need to restore. If the version of the backup matches the current fixpack level, you can use the extracted files to populate the original pervasive volume. The procedure to do this depends on how the backup was created. Any changes that occurred after the backup was created will not be recovered. The portal database must be restored to the backup that was created when the backup of wp_profile was created. 2. Persistence layer - database backup Run the following command to back up the container components that are managed through the DX Persistence layer: pg_dump name_of_database > name_of_backup_file To back up the system components on a remote system: pg_dump -U user_name -h remote_host -p remote_port name_of_database > name_of_backup_file After the backup command is completed, it is recommended that a copy of the resulting file is created and placed to an alternate long term storage. See the Backup and restore DAM image topic for more information. 3. Digital Asset Management media backup Use the following commands to back up the Digital Asset Management media uploads volume: A command similar to the backup command outlined in Step 1 to create a backup of wp_profile can be used to back up the two /opt/app/upload and /etc/config Digital Asset Management mount points. Refer to the following examples: tar -cvpzf backupml.tar.gz --exclude=/backupml.tar.gz --one-file-system /opt/app/upload tar -C/ -cvpzf backupmlcfg.tar.gz --exclude=/backupmlcfg.tar.gz --one-file-system etc/config/* See the Backup and restore DAM image topic for more information. Alternatively, the Kubernetes documentation pages present additional options to backup and clone persistent volumes. Volume SnapShots: (1.17 [beta] and later) CSI Volume Cloning Note: If either of the methods described in Step 2 or Step 3 is used, it is important to understand fuzzy backups with the wp_profile. A fuzzy backup is a copy of data files or directories that were operating in one state when the backup started, but in a different state by the time the backup completed. In case a volume snapshot or Container Storage Interface (CSI) volume cloning approach is used with the wp_profile , it is important that the snapshot is taken with the Digital Experience instance in shutdown state to ensure that recovery is performed. HCL Digital Experience has successfully tested the volume snapshot and CSI volume cloning methods with HCL Digital Experience 9.5 container deployments. It is recommended that customers perform the additional testing if they are using options Step 2 and Step 3 to manage the wp_profile backup. Restore Digital Asset Management image to previous version This shows you how to restore the HCL Digital Experience 9.5 Digital Asset Management image to a previous version. Back up and restore a DAM image This topic shows you how to backup and restore for Digital Asset Management persistence and binaries in an Operator-based deployment using dxctl . Parent topic: Container administration 9.5","title":"Backup and recovery procedures Containerization"},{"location":"containerization/operator_backup_and_recovery_procedures/#backup-and-recovery-procedures-containerization","text":"This section shows the deployment architecture and provides the instructions to create and manage backup and recovery of HCL Digital Experience components in containerized DX 9.5 environments.","title":"Backup and recovery procedures Containerization"},{"location":"containerization/operator_backup_and_recovery_procedures/#digital-experience-95-container-deployment-architecture","text":"Learn about the HCL DX 9.5 Container deployment architecture to get a better understanding of the backup and recovery options. Note: This topology is also available in the Install the HCL Digital Experience 9.5 components topic.","title":"Digital Experience 9.5 Container Deployment Architecture"},{"location":"containerization/operator_backup_and_recovery_procedures/#instructions-to-back-up-the-digital-experience-95-container-components","text":"The following sections describe how the administrators can create and manage backups and recovery of DX 9.5 Container components such as wp_profile, persistence layer - database, and the media in Digital Asset Management. 1. wp-profile backup Backup the file systems in the Digital Experience 9.5 container profile ( Persistent volume claim wp_profile ). Refer to the Backup and Restore topic and component backup guidance for more information. Note: The HCL Digital Asset Management (DAM) component uploads folder and the DAM persistent mount for the primary instance dx-deployment-persistence-0 in the statefulset dx-deployment-persistence (https://console-openshift-console.apps.hcl-dxdev.hcl-dx-dev.net/k8s/ns/master-tests/statefulsets/dx-deployment-persistence) . To create a backup of the profile Persistent volume claim wp_profile , it is recommended that: The DX has only one instance. The DX 9.5 container instance is stopped using the HCL Portal and HCL Web Content Manager command as follows: ``` kubectl exec --stdin --tty -n -- /bin/bash cd /opt/HCL/wp_profile/bin/ /stopServer.sh WebSphere_Portal -username -password ``` The entire /opt/HCL/wp_profile directory is backed up. In the command line interface, run the following command to back up the Digital Experience 9.5 Persistent volume claim wp_profile : Before running the tar command, ensure that the backup file system that you are using has ~50% free profile. ``` cd /opt/HCL/wp_profile tar -cvpzf backup.tar.gz --exclude=/backup.tar.gz --one-file-system /opt/HCL/wp_profile/* ``` After the tar backup command is completed, it is recommended that a copy of the backup.tar.gz file is created and placed to alternate long term storage. Recover from wp_profile pervasive volume backup You can extract the backup of the wp_profile volume to recover any files you need to restore. If the version of the backup matches the current fixpack level, you can use the extracted files to populate the original pervasive volume. The procedure to do this depends on how the backup was created. Any changes that occurred after the backup was created will not be recovered. The portal database must be restored to the backup that was created when the backup of wp_profile was created. 2. Persistence layer - database backup Run the following command to back up the container components that are managed through the DX Persistence layer: pg_dump name_of_database > name_of_backup_file To back up the system components on a remote system: pg_dump -U user_name -h remote_host -p remote_port name_of_database > name_of_backup_file After the backup command is completed, it is recommended that a copy of the resulting file is created and placed to an alternate long term storage. See the Backup and restore DAM image topic for more information. 3. Digital Asset Management media backup Use the following commands to back up the Digital Asset Management media uploads volume: A command similar to the backup command outlined in Step 1 to create a backup of wp_profile can be used to back up the two /opt/app/upload and /etc/config Digital Asset Management mount points. Refer to the following examples: tar -cvpzf backupml.tar.gz --exclude=/backupml.tar.gz --one-file-system /opt/app/upload tar -C/ -cvpzf backupmlcfg.tar.gz --exclude=/backupmlcfg.tar.gz --one-file-system etc/config/* See the Backup and restore DAM image topic for more information. Alternatively, the Kubernetes documentation pages present additional options to backup and clone persistent volumes. Volume SnapShots: (1.17 [beta] and later) CSI Volume Cloning Note: If either of the methods described in Step 2 or Step 3 is used, it is important to understand fuzzy backups with the wp_profile. A fuzzy backup is a copy of data files or directories that were operating in one state when the backup started, but in a different state by the time the backup completed. In case a volume snapshot or Container Storage Interface (CSI) volume cloning approach is used with the wp_profile , it is important that the snapshot is taken with the Digital Experience instance in shutdown state to ensure that recovery is performed. HCL Digital Experience has successfully tested the volume snapshot and CSI volume cloning methods with HCL Digital Experience 9.5 container deployments. It is recommended that customers perform the additional testing if they are using options Step 2 and Step 3 to manage the wp_profile backup. Restore Digital Asset Management image to previous version This shows you how to restore the HCL Digital Experience 9.5 Digital Asset Management image to a previous version. Back up and restore a DAM image This topic shows you how to backup and restore for Digital Asset Management persistence and binaries in an Operator-based deployment using dxctl . Parent topic: Container administration 9.5","title":"Instructions to back up the Digital Experience 9.5 Container components"},{"location":"containerization/optional_digital_asset_management_storage_configuration_settings/","text":"Optional: Configuration Settings to Manage Digital Asset Management Media upload storage services This section outlines optional configuration steps to tune Digital Asset Management storage services. Reference the HCL Digital Experience Deployment topic for the latest list of HCL Digital Experience 9.5 container files available for your implementation, and instructions to install to supported container platforms. As outlined in the steps to install and configure HCL Digital Asset Management, four files are provided for deployment: HCL Digital Asset Management (Operator) HCL Digital Experience Digital Asset Management (Docker image) HCL Digital Experience Digital Asset Management (Image processor) Postgres Persistence Layer There are two independent volume types used in the deployment and runtime of the Digital Asset Management: There is a volume per persistence layer, this volume is self-provisioned and defaults to the platform\u2019s default storage class and therefore the volume has not been made configurable. See the Sample Storage Class and Volume topic for additional information to set storage class and volume using sample storage class and volume scripts for HCL Digital Experience 9.5 CF171 and higher container releases deployed to Amazon Elastic Container Service (EKS) or Red Hat OpenShift environment. There is a Digital Asset Management Media storage upload folder that is related to the upload performance of assets inside the Digital Asset Management library. This folder is a read/write/many folder and therefore is shared by all instances. There are 2 main settings for the Digital Asset Management upload folder: dam.deploy.dam.storageclass (REQUIRED) dam.deploy.dam.volume (OPTIONAL) There are two choices to configure this volume: DX Administrator specifies volume: In this model, the DX administrator sets both the dam.deploy.dam.storageclass and dam.deploy.dam.volume before initial deployment, and therefore tells the deployment to use a specific storage class and a specific volume provisioned within that storage class. This option provides a bit more control to the DX Administrator. DX Administrator specifies only the dam.deploy.dam.storageclass , and allows either a volume from a pool of volumes to be used or a volume to be provisioned based on the storage class configuration. Note: It is highly recommended that the storage class used have a Reclaim Policy of RETAIN!! This is not enforced and not an issue if the volumes are managed correctly: When a user is done with their volume, they can delete the Persistent Volume Claim (PVC) objects from the API that allows reclamation of the resource. The Reclaim policy for a PersistentVolume tells the cluster what to do with the volume * after it has been released of its claim. Exercise caution when using the DELETE policy.* See the following sections for additional information: Deployment Containerization Limitations/Requirements Parent topic: Container administration 9.5","title":"Optional: Configuration Settings to Manage Digital Asset Management Media upload storage services"},{"location":"containerization/optional_digital_asset_management_storage_configuration_settings/#optional-configuration-settings-to-manage-digital-asset-management-media-upload-storage-services","text":"This section outlines optional configuration steps to tune Digital Asset Management storage services. Reference the HCL Digital Experience Deployment topic for the latest list of HCL Digital Experience 9.5 container files available for your implementation, and instructions to install to supported container platforms. As outlined in the steps to install and configure HCL Digital Asset Management, four files are provided for deployment: HCL Digital Asset Management (Operator) HCL Digital Experience Digital Asset Management (Docker image) HCL Digital Experience Digital Asset Management (Image processor) Postgres Persistence Layer There are two independent volume types used in the deployment and runtime of the Digital Asset Management: There is a volume per persistence layer, this volume is self-provisioned and defaults to the platform\u2019s default storage class and therefore the volume has not been made configurable. See the Sample Storage Class and Volume topic for additional information to set storage class and volume using sample storage class and volume scripts for HCL Digital Experience 9.5 CF171 and higher container releases deployed to Amazon Elastic Container Service (EKS) or Red Hat OpenShift environment. There is a Digital Asset Management Media storage upload folder that is related to the upload performance of assets inside the Digital Asset Management library. This folder is a read/write/many folder and therefore is shared by all instances. There are 2 main settings for the Digital Asset Management upload folder: dam.deploy.dam.storageclass (REQUIRED) dam.deploy.dam.volume (OPTIONAL) There are two choices to configure this volume: DX Administrator specifies volume: In this model, the DX administrator sets both the dam.deploy.dam.storageclass and dam.deploy.dam.volume before initial deployment, and therefore tells the deployment to use a specific storage class and a specific volume provisioned within that storage class. This option provides a bit more control to the DX Administrator. DX Administrator specifies only the dam.deploy.dam.storageclass , and allows either a volume from a pool of volumes to be used or a volume to be provisioned based on the storage class configuration. Note: It is highly recommended that the storage class used have a Reclaim Policy of RETAIN!! This is not enforced and not an issue if the volumes are managed correctly: When a user is done with their volume, they can delete the Persistent Volume Claim (PVC) objects from the API that allows reclamation of the resource. The Reclaim policy for a PersistentVolume tells the cluster what to do with the volume * after it has been released of its claim. Exercise caution when using the DELETE policy.* See the following sections for additional information: Deployment Containerization Limitations/Requirements Parent topic: Container administration 9.5","title":"Optional: Configuration Settings to Manage Digital Asset Management Media upload storage services"},{"location":"containerization/overview/","text":"Containerization overview Learn more about the containerization architecture, including the supported container platforms in deploying HCL Digital Experience images for your environment. Overview HCL introduced full support for containerization in Digital Experience (DX) 9.5. HCL Digital Experience users can deploy HCL Digital Experience images in Docker, Red Hat OpenShift 4.1 and higher, also Amazon Elastic Kubernetes Service (EKS), Microsoft Azure Kubernetes Service (AKS) and Google Kubernetes Engine (GKE) for test, development, staging, and production environments. See the Digital Experience on containerized platforms topic for the latest information on supported platforms and container packages. Whether developing, testing, or running a full production environment, use of Docker images and containers are preferred for the ease of deploying applications, including the latest version of HCL Digital Experience. Deploy in a fraction of the time it takes compared to traditional deployment models. Please see the Containerization Limitations/Requirements for specific versions and Deployment sections of the documentation before you begin. Parent topic: Digital Experience on containerized platforms","title":"Containerization overview"},{"location":"containerization/overview/#containerization-overview","text":"Learn more about the containerization architecture, including the supported container platforms in deploying HCL Digital Experience images for your environment.","title":"Containerization overview"},{"location":"containerization/overview/#overview","text":"HCL introduced full support for containerization in Digital Experience (DX) 9.5. HCL Digital Experience users can deploy HCL Digital Experience images in Docker, Red Hat OpenShift 4.1 and higher, also Amazon Elastic Kubernetes Service (EKS), Microsoft Azure Kubernetes Service (AKS) and Google Kubernetes Engine (GKE) for test, development, staging, and production environments. See the Digital Experience on containerized platforms topic for the latest information on supported platforms and container packages. Whether developing, testing, or running a full production environment, use of Docker images and containers are preferred for the ease of deploying applications, including the latest version of HCL Digital Experience. Deploy in a fraction of the time it takes compared to traditional deployment models. Please see the Containerization Limitations/Requirements for specific versions and Deployment sections of the documentation before you begin. Parent topic: Digital Experience on containerized platforms","title":"Overview"},{"location":"containerization/persistent_volumes_helm/","text":"PersistentVolumes and related operations considerations This topic provides details covering the PersistentVolumes (PVs) and related operations considerations in storing data for DX 9.5 stateful applications. Digital Experience 9.5 container-based stateful applications (DX 9.5 Core, Digital Asset Management, and Persistence) require PersistentVolumes (PVs) to store their data. Refer to the Deploy DX 9.5 applications to container platforms using Helm topic for a description of the DX 9.5 Applications details. As Kubernetes and OpenShift Pods do not have their own persistent file storage, the use of PVs is a must. For more information on PVs, consult the Kubernetes documentation . Note: You need to consider the type of PVs before you perform an installation. The type of volumes used depends on the type of deployment you are performing. If you are using only ReadWriteOnce (RWO) persistent volumes for all applications, you will not be able to scale them up to multiple Pods. Core The DX 9.5 Core application requires multiple PersistentVolumes (PVs) of different types and sizes for its operation. From an application perspective, there are three different things that need to be persisted: Profiles (called wp_profile and cw_profile ) Logs Transaction logs While the profile needs to be shared between all DX 9.5 Core Pods, the logs and transaction logs are per Pod and not shared. This means that the persistent volume used for the profile must be ReadWriteMany (RWX). The persistent volumes used for logs and transaction logs are established as ReadWriteOnce (RWO) for proper operations performance. For example, in a DX 9.5 Core deployment: To deploy one Core Pod, 3 PVs will be needed. To deploy two Core Pods, the number of required PVs increases by two, resulting in 5 PVs needed, since the second Pod shares the existing profile PV with the first Pod, but requires its own log and transaction log PVs. The following formula example can be used to calculate the required PV count per Core Pods to be deployed: # Formula to calculate PV count n(PV) = 1 + m(Core Pods) * 2 # E.g. for 3 Pods: 1 + 3 * 2 = 7 PVs In typical operations, the persistent volumes for logs and transaction logs are relatively small. Digital Asset Management The Digital Asset Management (DAM) application requires one (1) PV for storing binary asset data. This persistent volume is shared between all Digital Asset Management Pods. The PV used must be ReadWriteMany (RWX) . Persistence Persistence consists of at least two Pods. One which acts as a read/write primary node, and at least one that acts as a read-only fallback. All Persistence Pods work with ReadWriteOnce (RWO) persistent volumes, since there is no sharing of storage between the Pods. Therefore, the minimum required amount of PVs for Persistence is 2. Remote Search Remote Search requires 1 persistent volume for storing the profile (called prs_profile ) with the type ReadWriteOnce (RWO). Remote Search is limited to only one Pod, therefore, requires one PV for that Pod. Refer to Networking configuration for next steps.","title":"PersistentVolumes and related operations considerations"},{"location":"containerization/persistent_volumes_helm/#persistentvolumes-and-related-operations-considerations","text":"This topic provides details covering the PersistentVolumes (PVs) and related operations considerations in storing data for DX 9.5 stateful applications. Digital Experience 9.5 container-based stateful applications (DX 9.5 Core, Digital Asset Management, and Persistence) require PersistentVolumes (PVs) to store their data. Refer to the Deploy DX 9.5 applications to container platforms using Helm topic for a description of the DX 9.5 Applications details. As Kubernetes and OpenShift Pods do not have their own persistent file storage, the use of PVs is a must. For more information on PVs, consult the Kubernetes documentation . Note: You need to consider the type of PVs before you perform an installation. The type of volumes used depends on the type of deployment you are performing. If you are using only ReadWriteOnce (RWO) persistent volumes for all applications, you will not be able to scale them up to multiple Pods.","title":"PersistentVolumes and related operations considerations"},{"location":"containerization/persistent_volumes_helm/#core","text":"The DX 9.5 Core application requires multiple PersistentVolumes (PVs) of different types and sizes for its operation. From an application perspective, there are three different things that need to be persisted: Profiles (called wp_profile and cw_profile ) Logs Transaction logs While the profile needs to be shared between all DX 9.5 Core Pods, the logs and transaction logs are per Pod and not shared. This means that the persistent volume used for the profile must be ReadWriteMany (RWX). The persistent volumes used for logs and transaction logs are established as ReadWriteOnce (RWO) for proper operations performance. For example, in a DX 9.5 Core deployment: To deploy one Core Pod, 3 PVs will be needed. To deploy two Core Pods, the number of required PVs increases by two, resulting in 5 PVs needed, since the second Pod shares the existing profile PV with the first Pod, but requires its own log and transaction log PVs. The following formula example can be used to calculate the required PV count per Core Pods to be deployed: # Formula to calculate PV count n(PV) = 1 + m(Core Pods) * 2 # E.g. for 3 Pods: 1 + 3 * 2 = 7 PVs In typical operations, the persistent volumes for logs and transaction logs are relatively small.","title":"Core"},{"location":"containerization/persistent_volumes_helm/#digital-asset-management","text":"The Digital Asset Management (DAM) application requires one (1) PV for storing binary asset data. This persistent volume is shared between all Digital Asset Management Pods. The PV used must be ReadWriteMany (RWX) .","title":"Digital Asset Management"},{"location":"containerization/persistent_volumes_helm/#persistence","text":"Persistence consists of at least two Pods. One which acts as a read/write primary node, and at least one that acts as a read-only fallback. All Persistence Pods work with ReadWriteOnce (RWO) persistent volumes, since there is no sharing of storage between the Pods. Therefore, the minimum required amount of PVs for Persistence is 2.","title":"Persistence"},{"location":"containerization/persistent_volumes_helm/#remote-search","text":"Remote Search requires 1 persistent volume for storing the profile (called prs_profile ) with the type ReadWriteOnce (RWO). Remote Search is limited to only one Pod, therefore, requires one PV for that Pod. Refer to Networking configuration for next steps.","title":"Remote Search"},{"location":"containerization/personalization/","text":"Personalization rules This topic contains the commands that the administrators can use to export and import the personalization (PZN) rules from the source server to the target server as specified by the user. Export PZN rules Command description The pzn-export command is used to export the rules from the source server location specified by the user. dxclient pzn-export Help command This command shows the help information for pzn-export command usage: dxclient pzn-export -h Command options Use this attribute to specify the protocol with which to connect to the DX server: -dxProtocol <value> Use this attribute to specify the hostname of the target DX server: -hostname <value> Use this attribute to specify the port on which to connect to the DX server,for Kubernetes Environment dxPort is 443: -dxPort <value> Use this attribute to specify the username to authenticate with the DX server: -dxUsername <value> Use this attribute to specify the password for the user in the dxUsername attribute: -dxPassword <value> Use this attribute to specify the location in the target workspace, which is the parent for the published nodes. The target path must exist before publishing: -targetPath <value> Use this attribute to specify the name of the workspace containing the rules in DX server (default targetWorkspace is 'ROOTWORKSPACE'): -targetWorkspace <value> Note: The targetPath and targetWorkspace parameters are optional. If the user does not pass the respective parameters, then the default values are taken. Use this attribute to specify the path to the context root on the DX server (for example, /wps): -dxContextRoot <value> Log files from command execution can be found in the logs directory of the DXClient installation. Example: ``` dxclient pzn-export -dxProtocol -hostname -dxPort -dxUsername -dxPassword ``` The outputfile for pzn export is generated in the following path: store/outputFiles/pznrules Import PZN rules Command description The pzn-import command is used to import the rules into the target server. dxclient pzn-import Required files Rules file: This file should contain the configuration XML representation of all the currently selected personalization objects. Help command This command shows the help information for pzn-import command usage: dxclient pzn-import -h Command options Use this attribute to specify the protocol with which to connect to the DX server -dxProtocol <value> Use this attribute to specify the hostname of the target DX server -hostname <value> Use this attribute to specify the port on which to connect to the DX server,for Kubernetes Environment dxPort is 443 -dxPort <value> Use this attribute to specify the username to authenticate with the DX server -dxUsername <value> Use this attribute to specify the password for the user in the \"dxUsername\" attribute -dxPassword <value> Use this attribute to specify the config wizard home (route change only in case of Open Shift Kubernetes Environment, otherwise same as hostname) that is required for authenticating to the cw_profile -dxConnectHostname <value> Use this attribute to specify the username that is required for authenticating to the cw_profile -dxConnectUsername <value> Use this attribute to specify the password that is required for authenticating to the cw_profile -dxConnectPassword <value> Use this attribute to specify the port number of the cw_profile(for Kubernetes Environment dxConnectPort is 443) -dxConnectPort <value> Use this attribute to specify the import file path that is required while executing the pzn import task -rulesFilePath <Absolute or relative path to import nodes file> Use this attribute to specify the location in the target workspace, which is the parent for the published nodes. The target path must exist before publishing -targetPath <value> Use this attribute to specify the name of the workspace containing the rules in DX server (default targetWorkspace is 'ROOTWORKSPACE') -targetWorkspace <value> Use this attribute to specify the path to the context root on the DX server (for example, /wps): -dxContextRoot <value> Notes: For Kubernetes environments, dxProtocol should be http , hostname should be localhost, dxPort should be 10039 as DXConnect doesn't support https due to SSL Handshake challenges at this time. The dxProtocol , hostname , dxPort , targetWorkspace , and targetPath parameters are optional. If the user does not pass the respective parameters, then the default values are taken. Log files from command execution can be found in the logs directory of the DXClient installation. Example: dxclient pzn-import -dxProtocol <dxProtocol> -hostname <hostname> -dxPort <dxPort> -dxUsername <dxUsername> -dxPassword <dxPassword> -dxConnectHostname <dxConnectHostname> -dxConnectUsername <dxConnectUsername> -dxConnectPassword <dxConnectPassword> -dxConnectPort <dxConnectPort> -rulesFilePath <rulesFilePath> Parent topic: DXClient Artifact Types","title":"Personalization rules"},{"location":"containerization/personalization/#personalization-rules","text":"This topic contains the commands that the administrators can use to export and import the personalization (PZN) rules from the source server to the target server as specified by the user.","title":"Personalization rules"},{"location":"containerization/personalization/#export-pzn-rules","text":"Command description The pzn-export command is used to export the rules from the source server location specified by the user. dxclient pzn-export Help command This command shows the help information for pzn-export command usage: dxclient pzn-export -h Command options Use this attribute to specify the protocol with which to connect to the DX server: -dxProtocol <value> Use this attribute to specify the hostname of the target DX server: -hostname <value> Use this attribute to specify the port on which to connect to the DX server,for Kubernetes Environment dxPort is 443: -dxPort <value> Use this attribute to specify the username to authenticate with the DX server: -dxUsername <value> Use this attribute to specify the password for the user in the dxUsername attribute: -dxPassword <value> Use this attribute to specify the location in the target workspace, which is the parent for the published nodes. The target path must exist before publishing: -targetPath <value> Use this attribute to specify the name of the workspace containing the rules in DX server (default targetWorkspace is 'ROOTWORKSPACE'): -targetWorkspace <value> Note: The targetPath and targetWorkspace parameters are optional. If the user does not pass the respective parameters, then the default values are taken. Use this attribute to specify the path to the context root on the DX server (for example, /wps): -dxContextRoot <value> Log files from command execution can be found in the logs directory of the DXClient installation. Example: ``` dxclient pzn-export -dxProtocol -hostname -dxPort -dxUsername -dxPassword ``` The outputfile for pzn export is generated in the following path: store/outputFiles/pznrules","title":"Export PZN rules"},{"location":"containerization/personalization/#import-pzn-rules","text":"Command description The pzn-import command is used to import the rules into the target server. dxclient pzn-import Required files Rules file: This file should contain the configuration XML representation of all the currently selected personalization objects. Help command This command shows the help information for pzn-import command usage: dxclient pzn-import -h Command options Use this attribute to specify the protocol with which to connect to the DX server -dxProtocol <value> Use this attribute to specify the hostname of the target DX server -hostname <value> Use this attribute to specify the port on which to connect to the DX server,for Kubernetes Environment dxPort is 443 -dxPort <value> Use this attribute to specify the username to authenticate with the DX server -dxUsername <value> Use this attribute to specify the password for the user in the \"dxUsername\" attribute -dxPassword <value> Use this attribute to specify the config wizard home (route change only in case of Open Shift Kubernetes Environment, otherwise same as hostname) that is required for authenticating to the cw_profile -dxConnectHostname <value> Use this attribute to specify the username that is required for authenticating to the cw_profile -dxConnectUsername <value> Use this attribute to specify the password that is required for authenticating to the cw_profile -dxConnectPassword <value> Use this attribute to specify the port number of the cw_profile(for Kubernetes Environment dxConnectPort is 443) -dxConnectPort <value> Use this attribute to specify the import file path that is required while executing the pzn import task -rulesFilePath <Absolute or relative path to import nodes file> Use this attribute to specify the location in the target workspace, which is the parent for the published nodes. The target path must exist before publishing -targetPath <value> Use this attribute to specify the name of the workspace containing the rules in DX server (default targetWorkspace is 'ROOTWORKSPACE') -targetWorkspace <value> Use this attribute to specify the path to the context root on the DX server (for example, /wps): -dxContextRoot <value> Notes: For Kubernetes environments, dxProtocol should be http , hostname should be localhost, dxPort should be 10039 as DXConnect doesn't support https due to SSL Handshake challenges at this time. The dxProtocol , hostname , dxPort , targetWorkspace , and targetPath parameters are optional. If the user does not pass the respective parameters, then the default values are taken. Log files from command execution can be found in the logs directory of the DXClient installation. Example: dxclient pzn-import -dxProtocol <dxProtocol> -hostname <hostname> -dxPort <dxPort> -dxUsername <dxUsername> -dxPassword <dxPassword> -dxConnectHostname <dxConnectHostname> -dxConnectUsername <dxConnectUsername> -dxConnectPassword <dxConnectPassword> -dxConnectPort <dxConnectPort> -rulesFilePath <rulesFilePath> Parent topic: DXClient Artifact Types","title":"Import PZN rules"},{"location":"containerization/portlets/","text":"Portlets This topic provides information about the deployment and undeployment of portlets. Deploy Portlets The deploy-portlet command is used to deploy one or more new or updated portlets from a source client or server environment to target HCL DX 9.5 CF19 or later server using a provided input XMLAccess file and deployable Portlet WAR file. Note: The synchronization mode of all nodes in a clustered DX environment must be consistently set for a newly deployed portlet to be automatically started; otherwise redeployment or a manual start is required. Required files XMLAccess file This xml file should contain the definition of the web application along with the details of the portlet(s) to be deployed. The web archive file path referred to in this file inside the URL element is ignored, but the URL element itself must exist as it is dynamically replaced when the command is executed. A sample XML file for deploying portlet(s) can be found in the samples directory of DXClient (samples/DeployPortlet.xml) or in DX server located in the following directory: PortalServer_root/doc/xml-samples/DeployPortlet.xml. Portlet Application web archive file This web archive .war file should contain the necessary portlet artifacts for deployment, as per the JSR 286 portlet standard. Refer to Importing WAR files Command dxclient deploy-portlet -xmlFile <path> -warFile <path> Help command This command shows the help document on the deploy-portlet command usage: dxclient deploy-portlet -h Command options Use this attribute to specify the protocol with which to connect to the DX server ( wp_profile ): -dxProtocol <value> Use this attribute to specify the hostname of the target DX server: -hostname <value> Use this attribute to specify the port on which to connect to the DX server ( wp_profile ): -dxPort <value> Use this attribute to specify the path to DX configuration endpoint (e.g. /wps/config): -xmlConfigPath <value> Use this attribute to specify the username to authenticate with the DX server ( wp_profile ): -dxUsername <value> Use this attribute to specify the password for the user in the dxUsername attribute: -dxPassword <value> Use this attribute to specify the local path to the XMLAccess file: -xmlFile <Absolute or relative path to XMLAccess input file> Use this attribute to specify the local path to the WAR file to be deployed: -warFile <Absolute or relative path to deployable war file> Use this attribute to specify the Configuration Wizard Console port number: -dxConnectPort <value> Use this attribute to specify the config wizard home (change to the appropriate route in the case of an OpenShift Kubernetes Environment, otherwise the value will typically be the same as the hostname) that is required for authenticating with the DXConnect application: -dxConnectHostname <value> Use this attribute to specify the Configuration Wizard Administrator username that is required for authenticating with the DXConnect application: -dxConnectUsername <value> Use this attribute to specify the Configuration Wizard Administrator password that is required for authenticating with the DXConnect application: -dxConnectPassword <value> Log files from command execution can be found in the logs directory of the DXClient installation. Undeploy portlets The undeploy-portlet command is used to undeploy the portlets in the target DX servers. Note: Undeploy-portlet command takes a backup of the XML file of the deployed portlet application and application (EAR) if user has given enableBackup as true. By default, enableBackup is set to true and placed in the store/outputFiles/portlets/backup/undeploy-portlet/ . In case, if the undeployed portlet is required again, then the user can restore the portlet WAR file from the downloaded portlet application EAR file along with the exported deployable portlet application XML file. Command description This command invokes the undeploy-portlet tool inside the DXClient. The undeploy-portlet dxtool uses the provided files and executes the undeploy portlet task. dxclient undeploy-portlet Help command This command shows the help information for undeploy-portlet command usage: dxclient undeploy-portlet -h Required files This file should contain the definition of the web application along with the undeploy portlet. dxclient undeploy-portlet -xmlFile <path> Command options Use this attribute to specify the hostname of the target DX server: -hostname <value> Use this attribute to specify the protocol with which to connect to the DX server (wp_profile): -dxProtocol <value> Use this attribute to specify the port on which to connect to the DX server ( wp_profile ): -dxPort <value> Use this attribute to specify the path to DX configuration endpoint (e.g. /wps/configwps/config): -xmlConfigPath <value> Use this attribute to specify the username to authenticate with the DX server ( wp_profile ): -dxUsername <value> Use this attribute to specify the password for the user in the dxUsername attribute: -dxPassword <value> Use this attribute to specify the local path to the XMLAccess file: -xmlFile <xml file name with absolute path of the xmlaccess input file> Use this attribute to take the backup of portlet application before undeploying it: -enableBackup <value> Commands required when enableBackup is set to true Use this attribute to specify the config wizard home (route change only in case of Open Shift Kubernetes Environment, otherwise same as hostname) that is required for authenticating to the cw_profile -dxConnectHostname <value> Use this attribute to specify the port number of the cw_profile(for Kubernetes Environment dxConnectPort is 443) -dxConnectPort <value> Use this attribute to specify the username that is required for authenticating to the cw_profile -dxConnectUsername <value> Use this attribute to specify the password that is required for authenticating to the cw_profile -dxConnectPassword <value> Use this attribute to specify Soap port of the DX server -dxSoapPort <Soap port of the DX server> Specify either the dxProfileName or dxProfilePath of the DX core server: Use this attribute to specify the profile name of the DX core server (for example: wp_profile ): -dxProfileName <Profile name of the DX core server> OR Use this attribute to specify the profile path of the DX server (for example: /opt/HCL/wp_profile ): -dxProfilePath <Path of the DX core server profile> The values that are passed through the command line override the default values. Example: dxclient undeploy-portlet -dxProtocol <dxProtocol> -hostname <host-name> -dxPort <dxPort> -xmlConfigPath <xmlConfigPath> -dxUsername <dxUsername> -dxPassword <dxPassword> -xmlFile <xml-file-with-path> Example usage when enableBackup is set to true: dxclient undeploy-portlet -dxProtocol <dxProtocol> -hostname <host-name> -dxPort <dxPort> -xmlConfigPath <xmlConfigPath> -dxUsername <dxUsername> -dxPassword <dxPassword> -xmlFile <xml-file-with-path> -enableBackup true -dxSoapPort <dxSoapPort> -dxConnectHostname <hostname> -dxConnectPort <dxConnectPort> -dxConnectUsername <dxConnectUsername> -dxConnectPassword <dxConnectPassword> -dxProfileName <Profile name of the DX core server profile> Parent topic: DXClient Artifact Types","title":"Portlets"},{"location":"containerization/portlets/#portlets","text":"This topic provides information about the deployment and undeployment of portlets.","title":"Portlets"},{"location":"containerization/portlets/#deploy-portlets","text":"The deploy-portlet command is used to deploy one or more new or updated portlets from a source client or server environment to target HCL DX 9.5 CF19 or later server using a provided input XMLAccess file and deployable Portlet WAR file. Note: The synchronization mode of all nodes in a clustered DX environment must be consistently set for a newly deployed portlet to be automatically started; otherwise redeployment or a manual start is required. Required files XMLAccess file This xml file should contain the definition of the web application along with the details of the portlet(s) to be deployed. The web archive file path referred to in this file inside the URL element is ignored, but the URL element itself must exist as it is dynamically replaced when the command is executed. A sample XML file for deploying portlet(s) can be found in the samples directory of DXClient (samples/DeployPortlet.xml) or in DX server located in the following directory: PortalServer_root/doc/xml-samples/DeployPortlet.xml. Portlet Application web archive file This web archive .war file should contain the necessary portlet artifacts for deployment, as per the JSR 286 portlet standard. Refer to Importing WAR files Command dxclient deploy-portlet -xmlFile <path> -warFile <path> Help command This command shows the help document on the deploy-portlet command usage: dxclient deploy-portlet -h Command options Use this attribute to specify the protocol with which to connect to the DX server ( wp_profile ): -dxProtocol <value> Use this attribute to specify the hostname of the target DX server: -hostname <value> Use this attribute to specify the port on which to connect to the DX server ( wp_profile ): -dxPort <value> Use this attribute to specify the path to DX configuration endpoint (e.g. /wps/config): -xmlConfigPath <value> Use this attribute to specify the username to authenticate with the DX server ( wp_profile ): -dxUsername <value> Use this attribute to specify the password for the user in the dxUsername attribute: -dxPassword <value> Use this attribute to specify the local path to the XMLAccess file: -xmlFile <Absolute or relative path to XMLAccess input file> Use this attribute to specify the local path to the WAR file to be deployed: -warFile <Absolute or relative path to deployable war file> Use this attribute to specify the Configuration Wizard Console port number: -dxConnectPort <value> Use this attribute to specify the config wizard home (change to the appropriate route in the case of an OpenShift Kubernetes Environment, otherwise the value will typically be the same as the hostname) that is required for authenticating with the DXConnect application: -dxConnectHostname <value> Use this attribute to specify the Configuration Wizard Administrator username that is required for authenticating with the DXConnect application: -dxConnectUsername <value> Use this attribute to specify the Configuration Wizard Administrator password that is required for authenticating with the DXConnect application: -dxConnectPassword <value> Log files from command execution can be found in the logs directory of the DXClient installation.","title":"Deploy Portlets"},{"location":"containerization/portlets/#undeploy-portlets","text":"The undeploy-portlet command is used to undeploy the portlets in the target DX servers. Note: Undeploy-portlet command takes a backup of the XML file of the deployed portlet application and application (EAR) if user has given enableBackup as true. By default, enableBackup is set to true and placed in the store/outputFiles/portlets/backup/undeploy-portlet/ . In case, if the undeployed portlet is required again, then the user can restore the portlet WAR file from the downloaded portlet application EAR file along with the exported deployable portlet application XML file. Command description This command invokes the undeploy-portlet tool inside the DXClient. The undeploy-portlet dxtool uses the provided files and executes the undeploy portlet task. dxclient undeploy-portlet Help command This command shows the help information for undeploy-portlet command usage: dxclient undeploy-portlet -h Required files This file should contain the definition of the web application along with the undeploy portlet. dxclient undeploy-portlet -xmlFile <path> Command options Use this attribute to specify the hostname of the target DX server: -hostname <value> Use this attribute to specify the protocol with which to connect to the DX server (wp_profile): -dxProtocol <value> Use this attribute to specify the port on which to connect to the DX server ( wp_profile ): -dxPort <value> Use this attribute to specify the path to DX configuration endpoint (e.g. /wps/configwps/config): -xmlConfigPath <value> Use this attribute to specify the username to authenticate with the DX server ( wp_profile ): -dxUsername <value> Use this attribute to specify the password for the user in the dxUsername attribute: -dxPassword <value> Use this attribute to specify the local path to the XMLAccess file: -xmlFile <xml file name with absolute path of the xmlaccess input file> Use this attribute to take the backup of portlet application before undeploying it: -enableBackup <value> Commands required when enableBackup is set to true Use this attribute to specify the config wizard home (route change only in case of Open Shift Kubernetes Environment, otherwise same as hostname) that is required for authenticating to the cw_profile -dxConnectHostname <value> Use this attribute to specify the port number of the cw_profile(for Kubernetes Environment dxConnectPort is 443) -dxConnectPort <value> Use this attribute to specify the username that is required for authenticating to the cw_profile -dxConnectUsername <value> Use this attribute to specify the password that is required for authenticating to the cw_profile -dxConnectPassword <value> Use this attribute to specify Soap port of the DX server -dxSoapPort <Soap port of the DX server> Specify either the dxProfileName or dxProfilePath of the DX core server: Use this attribute to specify the profile name of the DX core server (for example: wp_profile ): -dxProfileName <Profile name of the DX core server> OR Use this attribute to specify the profile path of the DX server (for example: /opt/HCL/wp_profile ): -dxProfilePath <Path of the DX core server profile> The values that are passed through the command line override the default values. Example: dxclient undeploy-portlet -dxProtocol <dxProtocol> -hostname <host-name> -dxPort <dxPort> -xmlConfigPath <xmlConfigPath> -dxUsername <dxUsername> -dxPassword <dxPassword> -xmlFile <xml-file-with-path> Example usage when enableBackup is set to true: dxclient undeploy-portlet -dxProtocol <dxProtocol> -hostname <host-name> -dxPort <dxPort> -xmlConfigPath <xmlConfigPath> -dxUsername <dxUsername> -dxPassword <dxPassword> -xmlFile <xml-file-with-path> -enableBackup true -dxSoapPort <dxSoapPort> -dxConnectHostname <hostname> -dxConnectPort <dxConnectPort> -dxConnectUsername <dxConnectUsername> -dxConnectPassword <dxConnectPassword> -dxProfileName <Profile name of the DX core server profile> Parent topic: DXClient Artifact Types","title":"Undeploy portlets"},{"location":"containerization/resourceenvironments/","text":"Resource environment provider This topic describes the commands that are used to create, update, delete, and retrieve custom properties from an existing resource environment provider. It also provides the commands to export or import multiple resource environment providers. Resource environment commands Command description: The resource-env-provider command is used to create, update or delete a custom property from an existing Resource Environment Provider, and to export or import multiple resource environment providers. dxclient resource-env-provider Help command: This command shows the help information for resource-env-provider command usage: dxclient resource-env-provider -h Help command for creating the resource environment property: ``` dxclient resource-env-provider create-property -h ``` Help command for updating the resource environment property: dxclient resource-env-provider update-property -h Help command for deleting the resource environment property: dxclient resource-env-provider delete-property -h Help command for retrieving the resource environment property: dxclient resource-env-provider retrieve-property -h Help command for exporting the resource environment property: dxclient resource-env-provider export-properties -h Help command for importing the resource environment property: dxclient resource-env-provider import-properties -h Commands: Create a custom property from an existing resource environment: ``` resource-env-provider create-property [OPTIONS] ``` Update a custom property from an existing resource environment: resource-env-provider update-property [OPTIONS] Delete a custom property from an existing resource environment: resource-env-provider delete-property[OPTIONS] Retrieve a custom property from an existing resource environment provider: resource-env-provider retrieve-property [OPTIONS] Export all the existing resource environment providers: resource-env-provider export-properties [OPTIONS] Import all the existing resource environment providers provided in the input file containing the resource environment providers: resource-env-provider import-properties [OPTIONS] Command options required to create, update, delete, and retrieve resource environment providers: Use this attribute to specify the protocol with which to connect to the server: -dxProtocol <value> Use this attribute to specify the hostname of the target server: -hostname <value> Use this attribute to specify the port on which to connect to the server (for Kubernetes Environment, dxPort is 443): -dxPort <value> Use this attribute to specify the username that is required for authenticating with the server: -dxUsername <value> Use this attribute to specify the password that is required for authenticating with the server: -dxPassword <value> Use this attribute to specify the config wizard home (route change is only in case of Open Shift Kubernetes Environment, otherwise it is the same as hostname) that is required for authenticating to the cw_profile: -dxConnectHostname <value> Use this attribute to specify the port number of the cw_profile (for Kubernetes Environment, dxConnectPort is 443): -dxConnectPort <value> Use this attribute to specify the username that is required for authenticating to the cw_profile: -dxConnectUsername <value> Use this attribute to specify the password that is required for authenticating to the cw_profile: -dxConnectPassword <value> Use this attribute to specify the name of the Resource Environment Provider: -providerName <value> Use this attribute to specify the name of the Custom Property: -propertyName <value> Use this attribute to specify the value of the Custom Property: -propertyValue <value> Use this attribute to specify the description of the Custom Property: -propertyDesc <value> Command options required to export and import resource environment providers: Use this attribute to specify the configuration wizard home (route change is only in the case of Open Shift Kubernetes Environment, otherwise it is same as hostname) that is required for authenticating to the cw_profile: -dxConnectHostname <value> Use this attribute to specify the port number of the cw_profile(for Kubernetes Environment, dxConnectPort is 443): -dxConnectPort <value> Use this attribute to specify the username that is required for authenticating to the cw_profile: -dxConnectUsername <value> Use this attribute to specify the password that is required for authenticating to the cw_profile: -dxConnectPassword <value> Use this attribute to specify the username of the DX WAS server: -dxWASUsername <value> Use this attribute to specify the password of the DX WAS server: -dxWASPassword <value> Use this attribute to specify the profile name of the DX core server: -dxProfileName <Profile name of the DX core server> For importing resource environment properties, use this attribute to specify the File path: -filePath <value> Example: For creating property: ``` dxclient resource-env-provider create-property -providerName -propertyName -propertyValue ``` For updating property: dxclient resource-env-provider update-property -providerName <providerName> -propertyName <propertyName> -propertyValue <modifiedpropertyValue> For deleting property: dxclient resource-env-provider delete-property -providerName <providerName> -propertyName <propertyName> -propertyValue <modifiedpropertyValue> For retrieving property: dxclient resource-env-provider retrieve-property -providerName <providerName> -propertyName <propertyName> For exporting property: dxclient resource-env-provider export-properties -dxProfileName <dxProfileName> For importing property: dxclient resource-env-provider import-properties -dxProfileName <dxProfileName> -filePath <filePath> Parent topic: DXClient Artifact Types","title":"Resource environment provider"},{"location":"containerization/resourceenvironments/#resource-environment-provider","text":"This topic describes the commands that are used to create, update, delete, and retrieve custom properties from an existing resource environment provider. It also provides the commands to export or import multiple resource environment providers.","title":"Resource environment provider"},{"location":"containerization/resourceenvironments/#resource-environment-commands","text":"Command description: The resource-env-provider command is used to create, update or delete a custom property from an existing Resource Environment Provider, and to export or import multiple resource environment providers. dxclient resource-env-provider Help command: This command shows the help information for resource-env-provider command usage: dxclient resource-env-provider -h Help command for creating the resource environment property: ``` dxclient resource-env-provider create-property -h ``` Help command for updating the resource environment property: dxclient resource-env-provider update-property -h Help command for deleting the resource environment property: dxclient resource-env-provider delete-property -h Help command for retrieving the resource environment property: dxclient resource-env-provider retrieve-property -h Help command for exporting the resource environment property: dxclient resource-env-provider export-properties -h Help command for importing the resource environment property: dxclient resource-env-provider import-properties -h Commands: Create a custom property from an existing resource environment: ``` resource-env-provider create-property [OPTIONS] ``` Update a custom property from an existing resource environment: resource-env-provider update-property [OPTIONS] Delete a custom property from an existing resource environment: resource-env-provider delete-property[OPTIONS] Retrieve a custom property from an existing resource environment provider: resource-env-provider retrieve-property [OPTIONS] Export all the existing resource environment providers: resource-env-provider export-properties [OPTIONS] Import all the existing resource environment providers provided in the input file containing the resource environment providers: resource-env-provider import-properties [OPTIONS] Command options required to create, update, delete, and retrieve resource environment providers: Use this attribute to specify the protocol with which to connect to the server: -dxProtocol <value> Use this attribute to specify the hostname of the target server: -hostname <value> Use this attribute to specify the port on which to connect to the server (for Kubernetes Environment, dxPort is 443): -dxPort <value> Use this attribute to specify the username that is required for authenticating with the server: -dxUsername <value> Use this attribute to specify the password that is required for authenticating with the server: -dxPassword <value> Use this attribute to specify the config wizard home (route change is only in case of Open Shift Kubernetes Environment, otherwise it is the same as hostname) that is required for authenticating to the cw_profile: -dxConnectHostname <value> Use this attribute to specify the port number of the cw_profile (for Kubernetes Environment, dxConnectPort is 443): -dxConnectPort <value> Use this attribute to specify the username that is required for authenticating to the cw_profile: -dxConnectUsername <value> Use this attribute to specify the password that is required for authenticating to the cw_profile: -dxConnectPassword <value> Use this attribute to specify the name of the Resource Environment Provider: -providerName <value> Use this attribute to specify the name of the Custom Property: -propertyName <value> Use this attribute to specify the value of the Custom Property: -propertyValue <value> Use this attribute to specify the description of the Custom Property: -propertyDesc <value> Command options required to export and import resource environment providers: Use this attribute to specify the configuration wizard home (route change is only in the case of Open Shift Kubernetes Environment, otherwise it is same as hostname) that is required for authenticating to the cw_profile: -dxConnectHostname <value> Use this attribute to specify the port number of the cw_profile(for Kubernetes Environment, dxConnectPort is 443): -dxConnectPort <value> Use this attribute to specify the username that is required for authenticating to the cw_profile: -dxConnectUsername <value> Use this attribute to specify the password that is required for authenticating to the cw_profile: -dxConnectPassword <value> Use this attribute to specify the username of the DX WAS server: -dxWASUsername <value> Use this attribute to specify the password of the DX WAS server: -dxWASPassword <value> Use this attribute to specify the profile name of the DX core server: -dxProfileName <Profile name of the DX core server> For importing resource environment properties, use this attribute to specify the File path: -filePath <value> Example: For creating property: ``` dxclient resource-env-provider create-property -providerName -propertyName -propertyValue ``` For updating property: dxclient resource-env-provider update-property -providerName <providerName> -propertyName <propertyName> -propertyValue <modifiedpropertyValue> For deleting property: dxclient resource-env-provider delete-property -providerName <providerName> -propertyName <propertyName> -propertyValue <modifiedpropertyValue> For retrieving property: dxclient resource-env-provider retrieve-property -providerName <providerName> -propertyName <propertyName> For exporting property: dxclient resource-env-provider export-properties -dxProfileName <dxProfileName> For importing property: dxclient resource-env-provider import-properties -dxProfileName <dxProfileName> -filePath <filePath> Parent topic: DXClient Artifact Types","title":"Resource environment commands"},{"location":"containerization/run_core_config_engine/","text":"Running DX Core configuration tasks This topic shows how to run manual Core configuration tasks on your HCL DX 9.5 CF197 and later container deployments. Running Core Config Engine tasks In an HCL Digital Experience 9.5 Container deployment using Helm , some DX 9.5 Core configuration tasks (such as change of context root) are now performed using the Helm upgrade route. However, others (such as database migration) are performed using a Config Engine task, as they would be in an on-premise or hybrid environment. Steps to run a Config Engine task: Open a shell on a DX Core pod. The following example instructions uses pod \u20180\u2019 as it should always be available: kubectl exec -it -n < namespace > dx-deployment-core-0 -c core -- /bin/bash Create the semaphore file. On the Core pod, use the following command to create a file which tells the Kubernetes probes that a Configuration task is in progress: touch /opt/app/configInProgress Run the Config Engine command. Follow the instructions for the particular configuration task that you need to perform. See DB Transfer Config Engine task for an example. Remove the semaphore file. On the Core pod, use the following command to delete the file which tells the Kubernetes probes that a configuration task is in progress: rm -f /opt/app/configInProgress You can now close the shell on the Core pod: exit (Optional) Restart other Core pods. If you have multiple Core pods running, and if the configuration task you just performed requires a server restart, you should now restart all the Core pods other than the one on which you ran the task. To do this, run the following command for each other Core pod. For example, if you have Core pods dx-deployment-core-0 , dx-deployment-core-1 , and dx-deployment-core-2 and performed the configuration task on pod 0, then run the following command below for pods dx-deployment-core-1 and dx-deployment-core-2 : kubectl delete pod -n < namespace > < pod-name > Note: To reduce the impact on availability, it is recommended that you wait for a pod to be ready again before running the command for the next pod. Parent topic: Update deployment to a later version","title":"Running DX Core configuration tasks"},{"location":"containerization/run_core_config_engine/#running-dx-core-configuration-tasks","text":"This topic shows how to run manual Core configuration tasks on your HCL DX 9.5 CF197 and later container deployments.","title":"Running DX Core configuration tasks"},{"location":"containerization/run_core_config_engine/#running-core-config-engine-tasks","text":"In an HCL Digital Experience 9.5 Container deployment using Helm , some DX 9.5 Core configuration tasks (such as change of context root) are now performed using the Helm upgrade route. However, others (such as database migration) are performed using a Config Engine task, as they would be in an on-premise or hybrid environment. Steps to run a Config Engine task: Open a shell on a DX Core pod. The following example instructions uses pod \u20180\u2019 as it should always be available: kubectl exec -it -n < namespace > dx-deployment-core-0 -c core -- /bin/bash Create the semaphore file. On the Core pod, use the following command to create a file which tells the Kubernetes probes that a Configuration task is in progress: touch /opt/app/configInProgress Run the Config Engine command. Follow the instructions for the particular configuration task that you need to perform. See DB Transfer Config Engine task for an example. Remove the semaphore file. On the Core pod, use the following command to delete the file which tells the Kubernetes probes that a configuration task is in progress: rm -f /opt/app/configInProgress You can now close the shell on the Core pod: exit (Optional) Restart other Core pods. If you have multiple Core pods running, and if the configuration task you just performed requires a server restart, you should now restart all the Core pods other than the one on which you ran the task. To do this, run the following command for each other Core pod. For example, if you have Core pods dx-deployment-core-0 , dx-deployment-core-1 , and dx-deployment-core-2 and performed the configuration task on pod 0, then run the following command below for pods dx-deployment-core-1 and dx-deployment-core-2 : kubectl delete pod -n < namespace > < pod-name > Note: To reduce the impact on availability, it is recommended that you wait for a pod to be ready again before running the command for the next pod. Parent topic: Update deployment to a later version","title":"Running Core Config Engine tasks"},{"location":"containerization/sample_pipelines_docker_dxclient/","text":"Sample Pipelines for the DXClient Docker image file This sample shows how to pull DXClient docker image from the given artifactory, run the DXClient tool in the docker and then deploy a portlet, theme, and script application. It is designed to be run from a Jenkins job that provides the following parameters: Parameter Value Notes DEPLOY_PORTLET Select this to deploy the portlet DEPLOY_THEME Select this to deploy the theme DEPLOY_SCRIPT_APPLICATION Select this to deploy the script application AGENT_LABEL Jenkins agent label Determines on which agents the pipeline can run ARTIFACTORY_URL URL to DXClient docker image file Docker image will be pulled out from this URL REPO_PATH Repository path of the DXClient docker image Docker image will be pulled out from this folder IMAGE_TAG docker image tag Docker image will be pulled out using this image tag ARTIFACT_PATH URL (except filenames) for artifacts to be deployed Artifacts fetched via curl ARTIFACT_CREDENTIALS_ID Credentials ID in Jenkins store User name / password credentials needed to access artifact URLs DX_HOST Host name or IP address of DX server Artifacts will be deployed to this server DX_PROTOCOL Protocol to connect to DX server http or https DX_PORT Port to connect to DX serve Port for the DX main profile DX_CREDENTIALS_ID Credentials ID in Jenkins store User name / password credentials needed to access DX server DXCONNECT_HOST Host name or IP address of the DXConnect servlet (route change only in case of Open Shift Kubernetes Environment. For other case, this parameter should be same as DX_HOST) Hostname for the DX Configuration Wizard profile DXCONNECT_PORT Port to connect to DXConnect servlet Port for the DX config wizard profile DXCONNECT_CREDENTIALS_ID Credentials ID in Jenkins store User name / password credentials needed to access DX server config wizard profile XML_CONFIG_PATH URL path to the config servlet for xmlaccess Defaults to '/wps/config' CONTENT_HANDLER_PATH Alternate path for the portal context root or the content handler servlet Default to /wps/mycontenthandler/ DX_PROFILE_NAME Profile name of the DX server DX_PROFILE_PATH Profile path of the DX server DX_SOAP_PORT Soap Port number of the DX server PORTLET_WAR_ARTIFACT_NAME Filename of WAR to deploy the portlet Required for deploy portlet PORTLET_XML_ARTIFACT_NAME Filename of xmlaccess script used to deploy the portlet Required for deploy portlet THEME_EAR_APPLICATION_NAME Application name for the EAR file to deploy the theme Required for EAR theme deployment THEME_EAR_ARTIFACT_NAME File name of EAR application to deploy theme Required for EAR theme deployment THEME_REGISTRATION_FILE File name of XML file to register the theme Required for theme registration THEME_NAME WEBDAV theme name Required for WEBDAV theme deployment THEME_ARTIFACT_NAME WEBDAV theme zip file name Required for WEBDAV theme deployment SCRIPT_APP_ARTIFACT_NAME Filename of compressed script application to deploy Required for deploy script application MAIN_HTML_FILE File name of Main HTML file within the script application Required for deploy script application WCM_SITE_AREA SiteArea of the Script Application content Required for deploy script application CONTENT_NAME Name of the Script Application instance to be created or updated Required for deploy script application Parent topic: Deploy DX components using HCL DXClient and DXConnect","title":"Sample Pipelines for the DXClient Docker image file"},{"location":"containerization/sample_pipelines_docker_dxclient/#sample-pipelines-for-the-dxclient-docker-image-file","text":"This sample shows how to pull DXClient docker image from the given artifactory, run the DXClient tool in the docker and then deploy a portlet, theme, and script application. It is designed to be run from a Jenkins job that provides the following parameters: Parameter Value Notes DEPLOY_PORTLET Select this to deploy the portlet DEPLOY_THEME Select this to deploy the theme DEPLOY_SCRIPT_APPLICATION Select this to deploy the script application AGENT_LABEL Jenkins agent label Determines on which agents the pipeline can run ARTIFACTORY_URL URL to DXClient docker image file Docker image will be pulled out from this URL REPO_PATH Repository path of the DXClient docker image Docker image will be pulled out from this folder IMAGE_TAG docker image tag Docker image will be pulled out using this image tag ARTIFACT_PATH URL (except filenames) for artifacts to be deployed Artifacts fetched via curl ARTIFACT_CREDENTIALS_ID Credentials ID in Jenkins store User name / password credentials needed to access artifact URLs DX_HOST Host name or IP address of DX server Artifacts will be deployed to this server DX_PROTOCOL Protocol to connect to DX server http or https DX_PORT Port to connect to DX serve Port for the DX main profile DX_CREDENTIALS_ID Credentials ID in Jenkins store User name / password credentials needed to access DX server DXCONNECT_HOST Host name or IP address of the DXConnect servlet (route change only in case of Open Shift Kubernetes Environment. For other case, this parameter should be same as DX_HOST) Hostname for the DX Configuration Wizard profile DXCONNECT_PORT Port to connect to DXConnect servlet Port for the DX config wizard profile DXCONNECT_CREDENTIALS_ID Credentials ID in Jenkins store User name / password credentials needed to access DX server config wizard profile XML_CONFIG_PATH URL path to the config servlet for xmlaccess Defaults to '/wps/config' CONTENT_HANDLER_PATH Alternate path for the portal context root or the content handler servlet Default to /wps/mycontenthandler/ DX_PROFILE_NAME Profile name of the DX server DX_PROFILE_PATH Profile path of the DX server DX_SOAP_PORT Soap Port number of the DX server PORTLET_WAR_ARTIFACT_NAME Filename of WAR to deploy the portlet Required for deploy portlet PORTLET_XML_ARTIFACT_NAME Filename of xmlaccess script used to deploy the portlet Required for deploy portlet THEME_EAR_APPLICATION_NAME Application name for the EAR file to deploy the theme Required for EAR theme deployment THEME_EAR_ARTIFACT_NAME File name of EAR application to deploy theme Required for EAR theme deployment THEME_REGISTRATION_FILE File name of XML file to register the theme Required for theme registration THEME_NAME WEBDAV theme name Required for WEBDAV theme deployment THEME_ARTIFACT_NAME WEBDAV theme zip file name Required for WEBDAV theme deployment SCRIPT_APP_ARTIFACT_NAME Filename of compressed script application to deploy Required for deploy script application MAIN_HTML_FILE File name of Main HTML file within the script application Required for deploy script application WCM_SITE_AREA SiteArea of the Script Application content Required for deploy script application CONTENT_NAME Name of the Script Application instance to be created or updated Required for deploy script application Parent topic: Deploy DX components using HCL DXClient and DXConnect","title":"Sample Pipelines for the DXClient Docker image file"},{"location":"containerization/sample_pipelines_for_use_with_dx_client_and_automation_servers/","text":"Sample Pipelines for use with HCL DXClient and Automation servers A CI/CD pipeline can help automate processes in the development and test cycle, including deploying code to test and production environments. HCL DX 9.5 provides sample pipelines for use with the DXClient tooling to demonstrate how the deployment of portlets, Script Applications, Themes, DX Application, export and import of WCM libraries, etc., can be automated. Note: The sample pipelines referred in this topic are supported only until the HCL Digital Experience Container update version CF195. We recommend that you refer to the following sample pipelines for releases CF196 and later. Sample Pipelines for the DXClient Docker image file Sample Pipelines for the DXClient node package file Sample Pipeline details Sample Pipelines are provided for deploying or updating a portlet application, Script Application, or Themes. The sample pipelines are made available under the samples folder in the DXClient root folder. Developers and administrators can use these pipelines as a basis for Jenkins automation server jobs. Deploy portlet This sample shows how to install the DXClient tool in a pipeline and then deploy or update a portlet. It is designed to be run from a Jenkins job that provides the following parameters: Parameter Value Notes AGENT_LABEL Jenkins agent label Determines on which agents the pipeline can run TOOL_PACKAGE_URL URL to DXClient zip Fetched via curl TOOL_CREDENTIALS_ID Credentials ID in Jenkins store User name/password credentials needed to access tool package URL ARTEFACT_PATH URL (except filenames) for artifacts to be deployed Artifacts fetched via curl WAR_ARTEFACT_NAME Filename of WAR to deploy XMLACCESS_ARTEFACT_NAME Filename of XMLAccess script used to deploy ARTEFACT_CREDENTIALS_ID Credentials ID in Jenkins store User name/password credentials needed to access artifact URLs DX_HOST Hostname or IP address of DX server Artifacts will be deployed to this server DX_PROTOCOL Protocol to connect to DX server HTTP or HTTPS DX_PORT Port to connect to DX server Port for the DX main profile XML_CONFIG_PATH URL path to the Configuration servlet for XMLAccess Defaults to /wps/config' DX_CREDENTIALS_ID Credentials ID in Jenkins store User name/password credentials needed to access DX server DXCONNECT_HOST Host name or IP address of the DXConnect servlet (route change only in case of Open Shift Kubernetes Environment. For other case, this parameter should be same as DX_HOST) Hostname for the DX Configuration Wizard profile DXCONNECT_PORT Port to connect to DXConnect servlet Port for the DX Configuration Wizard profile DXCONNECT_CREDENTIALS_ID Credentials ID in Jenkins store User name / password credentials needed to access DX server Configuration Wizard profile Deploy script application This sample shows how to install the DXClient tool in a pipeline and then deploy a Script Application. It is designed to be run from a Jenkins job that provides the following parameters: Parameter Value Notes AGENT_LABEL Jenkins agent label Determines on which agents the pipeline can run TOOL_PACKAGE_URL URL to DXClient zip Fetched via curl TOOL_CREDENTIALS_ID Credentials ID in Jenkins store User name/password credentials needed to access tool package URL ARTIFACT_PATH URL (except filenames) for artifacts to be deployed Artifacts fetched via curl ARTIFACT_NAME Filename of zipped script application to deploy ARTIFACT_CREDENTIALS_ID Credentials ID in Jenkins store User name/password credentials needed to access artifact URLs DX_HOST Host name or IP address of DX server Artifacts will be deployed to this server DX_PROTOCOL Protocol to connect to DX server HTTP or HTTPS DX_PORT Port to connect to DX server Port for the DX main profile DX_CREDENTIALS_ID Credentials ID in Jenkins store User name/password credentials needed to access DX server WCMSITEAREA SiteArea of the Script Application content CONTENTNAME Name of the Script Application instance to be created or updated Restore script application This sample shows how to install the DXClient tool in a pipeline and then restore an existing script application to any of its specified previous version. It is designed to be run from a Jenkins job that provides the following parameters: Parameter Value Notes AGENT_LABEL Jenkins agent label Determines on which agents the pipeline can run TOOL_PACKAGE_URL URL to DXClient zip Fetched via curl TOOL_CREDENTIALS_ID Credentials ID in Jenkins store User name/password credentials needed to access tool package URL DX_HOST Host name or IP address of DX server Artifacts will be deployed to this server DX_PROTOCOL Protocol to connect to DX server HTTP or HTTPS DX_PORT Port to connect to DX server Port for the DX main profile DX_CREDENTIALS_ID Credentials ID in Jenkins store User name/password credentials needed to access DX server CONTENT_ID WCM content item unique ID Script application will be stored in this content item VERSION_NAME Version name of script application Name of the version that should store the script application RESTORE_AS_PUBLISHED Selected version to restore or draft Restore as a draft or replace the published version Deploy DX application This sample shows how to install the DXClient tool in a pipeline and then deploy or update a DX application. It is designed to be run from a Jenkins job that provides the following parameters: Parameter Value Notes AGENT_LABEL Jenkins agent label Determines on which agents the pipeline can run TOOL_PACKAGE_URL URL to DXClient zip Fetched via curl TOOL_CREDENTIALS_ID Credentials ID in Jenkins store User name/password credentials needed to access tool package URL ARTIFACT_PATH URL (except filenames) for artifacts to be deployed Artifacts fetched via curl ARTIFACT_CREDENTIALS_ID Credentials ID in Jenkins store User name/password credentials needed to access artifact URLs DX_CREDENTIALS_ID Credentials ID in Jenkins store User name/password credentials needed to access DX server DXCONNECT_CREDENTIALS_ID Credentials ID in Jenkins store User name/password credentials needed to access DX Server Configuration Wizard profile DX_PROTOCOL Protocol to connect to DX server HTTP or HTTPS DX_HOST Host name or IP address of DX server Artifacts will be deployed to this server DX_PORT Port to connect to DX server Port for the DX main profile DXCONNECT_HOST Host name or IP address of the DXConnect servlet (route change only in case of Open Shift Kubernetes Environment. For other case, this parameter should be same as DX_HOST) Hostname for the DX Configuration Wizard profile DXCONNECT_PORT Port to connect to DXConnect servlet Port for the DX Configuration Wizard profile. Default to 10202 APPLICATION_FILE File name of EAR application to deploy Required for EAR deployment APPLICATION_NAME Application name for the EAR file to deploy Required for EAR deployment DX_SOAP_PORT Soap Port number of the DX server Required for EAR deployment DX_PROFILE_PATH Profile path of the DX server Required for EAR deployment Restart DX Core server This sample shows how to restart the DX Core server using the DXClient tool in a pipeline. It is designed to be run from a Jenkins job that requires the following parameters: Parameter Value Notes AGENT_LABEL Jenkins agent label Determines on which agents the pipeline can run TOOL_PACKAGE_URL URL to DXClient zip Fetched via curl TOOL_CREDENTIALS_ID Credentials ID in Jenkins store User name/password credentials needed to access tool package URL DX_CREDENTIALS_ID Credentials ID in Jenkins store User name/password credentials needed to access DX Core server DXCONNECT_CREDENTIALS_ID Credentials ID in Jenkins store User name/password credentials needed to access DX Core Server Configuration Wizard profile DXCONNECT_HOST Host name or IP address of the DXConnect servlet (route change only in case of Open Shift Kubernetes Environment. For other case, this parameter should be same as DX_HOST) Hostname for the DX Configuration Wizard profile DXCONNECT_PORT Port to connect to DXConnect servlet Port for the DX Configuration Wizard profile. Default to 10202 DX_PROFILE_PATH Profile path of the DX Core server Required for restarting the DX Core server Manage syndication This sample shows how to install the DXClient tool in a pipeline and then enable or disable the syndicator or subscriber. It is designed to be run from a Jenkins job that requires the following parameters: Parameter Value Notes AGENT_LABEL Jenkins agent label Determines on which agents the pipeline can run TOOL_PACKAGE_URL URL to DXClient zip Fetched via curl TOOL_CREDENTIALS_ID Credentials ID in Jenkins store User name/password credentials needed to access tool package URL DX_CREDENTIALS_ID Credentials ID in Jenkins store User name/password credentials needed to access DX server DX_PROTOCOL Protocol to connect to DX server HTTP or HTTPS DX_HOST Host name or IP address of DX server Artifacts will be deployed to this server DX_PORT Port to connect to DX server Port for the DX main profile CONTENT_HANDLER_PATH Alternate path for the portal context root or the content handler servlet Default to /wps/mycontenthandler/ SYNDICATOR_OR_SUBSCRIBER This can be syndicator or subscriber UUID_FOR_SYNDICATION UUID of the syndicator/subscriber instance ENABLE Use true or false to enable or disable the syndicator/subscriber Deploy theme This sample shows how to install the DXClient tool in a pipeline and then deploy or update a theme. It is designed to be run from a Jenkins job that provides the following parameters: Parameter Value Notes AGENT_LABEL Jenkins agent label Determines on which agents the pipeline can run TOOL_PACKAGE_URL URL to DXClient zip Fetched via curl TOOL_CREDENTIALS_ID Credentials ID in Jenkins store User name/password credentials needed to access tool package URL ARTEFACT_PATH URL (except filenames) for artifacts to be deployed Artifacts fetched via curl ARTEFACT_CREDENTIALS_ID Credentials ID in Jenkins store User name/password credentials needed to access artifact URLs DX_HOST Host name or IP address of DX server Artifacts will be deployed to this server DX_PROTOCOL Protocol to connect to DX server HTTP or HTTPS DX_PORT Port to connect to DX server Port for the DX main profile DX_CREDENTIALS_ID Credentials ID in Jenkins store User name/password credentials needed to access DX server DXCONNECT_CREDENTIALS_ID Credentials ID in Jenkins store User name / password credentials needed to access DX server Configuration Wizard profile DXCONNECT_HOST Host name or IP address of the DXConnect servlet (route change only in case of Open Shift Kubernetes Environment. For other case, this parameter should be same as DX_HOST) Hostname for the DX Configuration Wizard profile DXCONNECT_PORT Port to connect to DXConnect servlet Port for the DX Configuration Wizard profile. Default to 10202 APPLICATION_FILE File name of EAR application to deploy Required for EAR deployment APPLICATION_NAME Application name for the EAR file to deploy Required for EAR deployment DX_SOAP_PORT Soap Port number of the DX server Required for EAR deployment DX_PROFILE_PATH Profile path of the DX server Required for EAR deployment XML_FILE File name of XML file to register the theme Required for theme registration XML_CONFIG_PATH URL path to the Configuration endpoint Defaults to /wps/config' THEME_NAME WebDAV theme name Required for WebDAV deployment THEME_PATH WebDAV theme zip file Required for WebDAV deployment CONTENT_HANDLER_PATH Alternate path for the portal context root or the content handler servlet Default to /wps/mycontenthandler/ Parent topic: Deploy DX components using HCL DXClient and DXConnect","title":"Sample Pipelines for use with HCL DXClient and Automation servers"},{"location":"containerization/sample_pipelines_for_use_with_dx_client_and_automation_servers/#sample-pipelines-for-use-with-hcl-dxclient-and-automation-servers","text":"A CI/CD pipeline can help automate processes in the development and test cycle, including deploying code to test and production environments. HCL DX 9.5 provides sample pipelines for use with the DXClient tooling to demonstrate how the deployment of portlets, Script Applications, Themes, DX Application, export and import of WCM libraries, etc., can be automated. Note: The sample pipelines referred in this topic are supported only until the HCL Digital Experience Container update version CF195. We recommend that you refer to the following sample pipelines for releases CF196 and later. Sample Pipelines for the DXClient Docker image file Sample Pipelines for the DXClient node package file","title":"Sample Pipelines for use with HCL DXClient and Automation servers"},{"location":"containerization/sample_pipelines_for_use_with_dx_client_and_automation_servers/#sample-pipeline-details","text":"Sample Pipelines are provided for deploying or updating a portlet application, Script Application, or Themes. The sample pipelines are made available under the samples folder in the DXClient root folder. Developers and administrators can use these pipelines as a basis for Jenkins automation server jobs.","title":"Sample Pipeline details"},{"location":"containerization/sample_pipelines_for_use_with_dx_client_and_automation_servers/#deploy-portlet","text":"This sample shows how to install the DXClient tool in a pipeline and then deploy or update a portlet. It is designed to be run from a Jenkins job that provides the following parameters: Parameter Value Notes AGENT_LABEL Jenkins agent label Determines on which agents the pipeline can run TOOL_PACKAGE_URL URL to DXClient zip Fetched via curl TOOL_CREDENTIALS_ID Credentials ID in Jenkins store User name/password credentials needed to access tool package URL ARTEFACT_PATH URL (except filenames) for artifacts to be deployed Artifacts fetched via curl WAR_ARTEFACT_NAME Filename of WAR to deploy XMLACCESS_ARTEFACT_NAME Filename of XMLAccess script used to deploy ARTEFACT_CREDENTIALS_ID Credentials ID in Jenkins store User name/password credentials needed to access artifact URLs DX_HOST Hostname or IP address of DX server Artifacts will be deployed to this server DX_PROTOCOL Protocol to connect to DX server HTTP or HTTPS DX_PORT Port to connect to DX server Port for the DX main profile XML_CONFIG_PATH URL path to the Configuration servlet for XMLAccess Defaults to /wps/config' DX_CREDENTIALS_ID Credentials ID in Jenkins store User name/password credentials needed to access DX server DXCONNECT_HOST Host name or IP address of the DXConnect servlet (route change only in case of Open Shift Kubernetes Environment. For other case, this parameter should be same as DX_HOST) Hostname for the DX Configuration Wizard profile DXCONNECT_PORT Port to connect to DXConnect servlet Port for the DX Configuration Wizard profile DXCONNECT_CREDENTIALS_ID Credentials ID in Jenkins store User name / password credentials needed to access DX server Configuration Wizard profile","title":"Deploy portlet"},{"location":"containerization/sample_pipelines_for_use_with_dx_client_and_automation_servers/#deploy-script-application","text":"This sample shows how to install the DXClient tool in a pipeline and then deploy a Script Application. It is designed to be run from a Jenkins job that provides the following parameters: Parameter Value Notes AGENT_LABEL Jenkins agent label Determines on which agents the pipeline can run TOOL_PACKAGE_URL URL to DXClient zip Fetched via curl TOOL_CREDENTIALS_ID Credentials ID in Jenkins store User name/password credentials needed to access tool package URL ARTIFACT_PATH URL (except filenames) for artifacts to be deployed Artifacts fetched via curl ARTIFACT_NAME Filename of zipped script application to deploy ARTIFACT_CREDENTIALS_ID Credentials ID in Jenkins store User name/password credentials needed to access artifact URLs DX_HOST Host name or IP address of DX server Artifacts will be deployed to this server DX_PROTOCOL Protocol to connect to DX server HTTP or HTTPS DX_PORT Port to connect to DX server Port for the DX main profile DX_CREDENTIALS_ID Credentials ID in Jenkins store User name/password credentials needed to access DX server WCMSITEAREA SiteArea of the Script Application content CONTENTNAME Name of the Script Application instance to be created or updated","title":"Deploy script application"},{"location":"containerization/sample_pipelines_for_use_with_dx_client_and_automation_servers/#restore-script-application","text":"This sample shows how to install the DXClient tool in a pipeline and then restore an existing script application to any of its specified previous version. It is designed to be run from a Jenkins job that provides the following parameters: Parameter Value Notes AGENT_LABEL Jenkins agent label Determines on which agents the pipeline can run TOOL_PACKAGE_URL URL to DXClient zip Fetched via curl TOOL_CREDENTIALS_ID Credentials ID in Jenkins store User name/password credentials needed to access tool package URL DX_HOST Host name or IP address of DX server Artifacts will be deployed to this server DX_PROTOCOL Protocol to connect to DX server HTTP or HTTPS DX_PORT Port to connect to DX server Port for the DX main profile DX_CREDENTIALS_ID Credentials ID in Jenkins store User name/password credentials needed to access DX server CONTENT_ID WCM content item unique ID Script application will be stored in this content item VERSION_NAME Version name of script application Name of the version that should store the script application RESTORE_AS_PUBLISHED Selected version to restore or draft Restore as a draft or replace the published version","title":"Restore script application"},{"location":"containerization/sample_pipelines_for_use_with_dx_client_and_automation_servers/#deploy-dx-application","text":"This sample shows how to install the DXClient tool in a pipeline and then deploy or update a DX application. It is designed to be run from a Jenkins job that provides the following parameters: Parameter Value Notes AGENT_LABEL Jenkins agent label Determines on which agents the pipeline can run TOOL_PACKAGE_URL URL to DXClient zip Fetched via curl TOOL_CREDENTIALS_ID Credentials ID in Jenkins store User name/password credentials needed to access tool package URL ARTIFACT_PATH URL (except filenames) for artifacts to be deployed Artifacts fetched via curl ARTIFACT_CREDENTIALS_ID Credentials ID in Jenkins store User name/password credentials needed to access artifact URLs DX_CREDENTIALS_ID Credentials ID in Jenkins store User name/password credentials needed to access DX server DXCONNECT_CREDENTIALS_ID Credentials ID in Jenkins store User name/password credentials needed to access DX Server Configuration Wizard profile DX_PROTOCOL Protocol to connect to DX server HTTP or HTTPS DX_HOST Host name or IP address of DX server Artifacts will be deployed to this server DX_PORT Port to connect to DX server Port for the DX main profile DXCONNECT_HOST Host name or IP address of the DXConnect servlet (route change only in case of Open Shift Kubernetes Environment. For other case, this parameter should be same as DX_HOST) Hostname for the DX Configuration Wizard profile DXCONNECT_PORT Port to connect to DXConnect servlet Port for the DX Configuration Wizard profile. Default to 10202 APPLICATION_FILE File name of EAR application to deploy Required for EAR deployment APPLICATION_NAME Application name for the EAR file to deploy Required for EAR deployment DX_SOAP_PORT Soap Port number of the DX server Required for EAR deployment DX_PROFILE_PATH Profile path of the DX server Required for EAR deployment","title":"Deploy DX application"},{"location":"containerization/sample_pipelines_for_use_with_dx_client_and_automation_servers/#restart-dx-core-server","text":"This sample shows how to restart the DX Core server using the DXClient tool in a pipeline. It is designed to be run from a Jenkins job that requires the following parameters: Parameter Value Notes AGENT_LABEL Jenkins agent label Determines on which agents the pipeline can run TOOL_PACKAGE_URL URL to DXClient zip Fetched via curl TOOL_CREDENTIALS_ID Credentials ID in Jenkins store User name/password credentials needed to access tool package URL DX_CREDENTIALS_ID Credentials ID in Jenkins store User name/password credentials needed to access DX Core server DXCONNECT_CREDENTIALS_ID Credentials ID in Jenkins store User name/password credentials needed to access DX Core Server Configuration Wizard profile DXCONNECT_HOST Host name or IP address of the DXConnect servlet (route change only in case of Open Shift Kubernetes Environment. For other case, this parameter should be same as DX_HOST) Hostname for the DX Configuration Wizard profile DXCONNECT_PORT Port to connect to DXConnect servlet Port for the DX Configuration Wizard profile. Default to 10202 DX_PROFILE_PATH Profile path of the DX Core server Required for restarting the DX Core server","title":"Restart DX Core server"},{"location":"containerization/sample_pipelines_for_use_with_dx_client_and_automation_servers/#manage-syndication","text":"This sample shows how to install the DXClient tool in a pipeline and then enable or disable the syndicator or subscriber. It is designed to be run from a Jenkins job that requires the following parameters: Parameter Value Notes AGENT_LABEL Jenkins agent label Determines on which agents the pipeline can run TOOL_PACKAGE_URL URL to DXClient zip Fetched via curl TOOL_CREDENTIALS_ID Credentials ID in Jenkins store User name/password credentials needed to access tool package URL DX_CREDENTIALS_ID Credentials ID in Jenkins store User name/password credentials needed to access DX server DX_PROTOCOL Protocol to connect to DX server HTTP or HTTPS DX_HOST Host name or IP address of DX server Artifacts will be deployed to this server DX_PORT Port to connect to DX server Port for the DX main profile CONTENT_HANDLER_PATH Alternate path for the portal context root or the content handler servlet Default to /wps/mycontenthandler/ SYNDICATOR_OR_SUBSCRIBER This can be syndicator or subscriber UUID_FOR_SYNDICATION UUID of the syndicator/subscriber instance ENABLE Use true or false to enable or disable the syndicator/subscriber","title":"Manage syndication"},{"location":"containerization/sample_pipelines_for_use_with_dx_client_and_automation_servers/#deploy-theme","text":"This sample shows how to install the DXClient tool in a pipeline and then deploy or update a theme. It is designed to be run from a Jenkins job that provides the following parameters: Parameter Value Notes AGENT_LABEL Jenkins agent label Determines on which agents the pipeline can run TOOL_PACKAGE_URL URL to DXClient zip Fetched via curl TOOL_CREDENTIALS_ID Credentials ID in Jenkins store User name/password credentials needed to access tool package URL ARTEFACT_PATH URL (except filenames) for artifacts to be deployed Artifacts fetched via curl ARTEFACT_CREDENTIALS_ID Credentials ID in Jenkins store User name/password credentials needed to access artifact URLs DX_HOST Host name or IP address of DX server Artifacts will be deployed to this server DX_PROTOCOL Protocol to connect to DX server HTTP or HTTPS DX_PORT Port to connect to DX server Port for the DX main profile DX_CREDENTIALS_ID Credentials ID in Jenkins store User name/password credentials needed to access DX server DXCONNECT_CREDENTIALS_ID Credentials ID in Jenkins store User name / password credentials needed to access DX server Configuration Wizard profile DXCONNECT_HOST Host name or IP address of the DXConnect servlet (route change only in case of Open Shift Kubernetes Environment. For other case, this parameter should be same as DX_HOST) Hostname for the DX Configuration Wizard profile DXCONNECT_PORT Port to connect to DXConnect servlet Port for the DX Configuration Wizard profile. Default to 10202 APPLICATION_FILE File name of EAR application to deploy Required for EAR deployment APPLICATION_NAME Application name for the EAR file to deploy Required for EAR deployment DX_SOAP_PORT Soap Port number of the DX server Required for EAR deployment DX_PROFILE_PATH Profile path of the DX server Required for EAR deployment XML_FILE File name of XML file to register the theme Required for theme registration XML_CONFIG_PATH URL path to the Configuration endpoint Defaults to /wps/config' THEME_NAME WebDAV theme name Required for WebDAV deployment THEME_PATH WebDAV theme zip file Required for WebDAV deployment CONTENT_HANDLER_PATH Alternate path for the portal context root or the content handler servlet Default to /wps/mycontenthandler/ Parent topic: Deploy DX components using HCL DXClient and DXConnect","title":"Deploy theme"},{"location":"containerization/sample_pipelines_node_dxclient/","text":"Sample Pipelines for the DXClient node package file This topic describes how to install the DXClient tool in a pipeline, by providing a few sample pipelines such as pipelines for deploying a portlet, theme, and script application. It is designed to be run from a Jenkins job with the following parameters: Parameter Value Notes DEPLOY_PORTLET Select this to deploy the portlet DEPLOY_THEME Select this to deploy the theme DEPLOY_SCRIPT_APPLICATION Select this to deploy the script application AGENT_LABEL Jenkins agent label Determines on which agents the pipeline can run TOOL_PACKAGE_URL URL to DXClient zip Fetched via curl TOOL_CREDENTIALS_ID Credentials ID in Jenkins store User name / password credentials needed to access tool package URL ARTIFACT_PATH URL (except filenames) for artifacts to be deployed Artifacts fetched via curl ARTIFACT_CREDENTIALS_ID Credentials ID in Jenkins store User name / password credentials needed to access artifact URLs DX_HOST Host name or IP address of DX server Artifacts will be deployed to this server DX_PROTOCOL Protocol to connect to DX server http or https DX_PORT Port to connect to DX serve Port for the DX main profile DX_CREDENTIALS_ID Credentials ID in Jenkins store User name / password credentials needed to access DX server DXCONNECT_HOST Host name or IP address of the DXConnect servlet (route change only in case of Open Shift Kubernetes Environment. For other case, this parameter should be same as DX_HOST) Hostname for the DX Configuration Wizard profile DXCONNECT_PORT Port to connect to DXConnect servlet Port for the DX config wizard profile DXCONNECT_CREDENTIALS_ID Credentials ID in Jenkins store User name / password credentials needed to access DX server config wizard profile XML_CONFIG_PATH URL path to the config servlet for xmlaccess Defaults to '/wps/config' CONTENT_HANDLER_PATH Alternate path for the portal context root or the content handler servlet Default to /wps/mycontenthandler/ DX_PROFILE_NAME Profile name of the DX server DX_PROFILE_PATH Profile path of the DX server DX_SOAP_PORT Soap Port number of the DX server PORTLET_WAR_ARTIFACT_NAME Filename of WAR to deploy the portlet Required for deploy portlet PORTLET_XML_ARTIFACT_NAME Filename of xmlaccess script used to deploy the portlet Required for deploy portlet THEME_EAR_APPLICATION_NAME Application name for the EAR file to deploy the theme Required for EAR theme deployment THEME_EAR_ARTIFACT_NAME File name of EAR application to deploy theme Required for EAR theme deployment THEME_REGISTRATION_FILE File name of XML file to register the theme Required for theme registration THEME_NAME WEBDAV theme name Required for WEBDAV theme deployment THEME_ARTIFACT_NAME WEBDAV theme zip file name Required for WEBDAV theme deployment SCRIPT_APP_ARTIFACT_NAME Filename of zipped script application to deploy Required for deploy script application MAIN_HTML_FILE File name of Main HTML file within the script application Required for deploy script application WCM_SITE_AREA SiteArea of the Script Application content Required for deploy script application CONTENT_NAME Name of the Script Application instance to be created or updated Required for deploy script application Parent topic: Deploy DX components using HCL DXClient and DXConnect","title":"Sample Pipelines for the DXClient node package file"},{"location":"containerization/sample_pipelines_node_dxclient/#sample-pipelines-for-the-dxclient-node-package-file","text":"This topic describes how to install the DXClient tool in a pipeline, by providing a few sample pipelines such as pipelines for deploying a portlet, theme, and script application. It is designed to be run from a Jenkins job with the following parameters: Parameter Value Notes DEPLOY_PORTLET Select this to deploy the portlet DEPLOY_THEME Select this to deploy the theme DEPLOY_SCRIPT_APPLICATION Select this to deploy the script application AGENT_LABEL Jenkins agent label Determines on which agents the pipeline can run TOOL_PACKAGE_URL URL to DXClient zip Fetched via curl TOOL_CREDENTIALS_ID Credentials ID in Jenkins store User name / password credentials needed to access tool package URL ARTIFACT_PATH URL (except filenames) for artifacts to be deployed Artifacts fetched via curl ARTIFACT_CREDENTIALS_ID Credentials ID in Jenkins store User name / password credentials needed to access artifact URLs DX_HOST Host name or IP address of DX server Artifacts will be deployed to this server DX_PROTOCOL Protocol to connect to DX server http or https DX_PORT Port to connect to DX serve Port for the DX main profile DX_CREDENTIALS_ID Credentials ID in Jenkins store User name / password credentials needed to access DX server DXCONNECT_HOST Host name or IP address of the DXConnect servlet (route change only in case of Open Shift Kubernetes Environment. For other case, this parameter should be same as DX_HOST) Hostname for the DX Configuration Wizard profile DXCONNECT_PORT Port to connect to DXConnect servlet Port for the DX config wizard profile DXCONNECT_CREDENTIALS_ID Credentials ID in Jenkins store User name / password credentials needed to access DX server config wizard profile XML_CONFIG_PATH URL path to the config servlet for xmlaccess Defaults to '/wps/config' CONTENT_HANDLER_PATH Alternate path for the portal context root or the content handler servlet Default to /wps/mycontenthandler/ DX_PROFILE_NAME Profile name of the DX server DX_PROFILE_PATH Profile path of the DX server DX_SOAP_PORT Soap Port number of the DX server PORTLET_WAR_ARTIFACT_NAME Filename of WAR to deploy the portlet Required for deploy portlet PORTLET_XML_ARTIFACT_NAME Filename of xmlaccess script used to deploy the portlet Required for deploy portlet THEME_EAR_APPLICATION_NAME Application name for the EAR file to deploy the theme Required for EAR theme deployment THEME_EAR_ARTIFACT_NAME File name of EAR application to deploy theme Required for EAR theme deployment THEME_REGISTRATION_FILE File name of XML file to register the theme Required for theme registration THEME_NAME WEBDAV theme name Required for WEBDAV theme deployment THEME_ARTIFACT_NAME WEBDAV theme zip file name Required for WEBDAV theme deployment SCRIPT_APP_ARTIFACT_NAME Filename of zipped script application to deploy Required for deploy script application MAIN_HTML_FILE File name of Main HTML file within the script application Required for deploy script application WCM_SITE_AREA SiteArea of the Script Application content Required for deploy script application CONTENT_NAME Name of the Script Application instance to be created or updated Required for deploy script application Parent topic: Deploy DX components using HCL DXClient and DXConnect","title":"Sample Pipelines for the DXClient node package file"},{"location":"containerization/sample_storage_class_volume/","text":"Sample storage class and volume for HCL Digital Experience 9.5 containers Learn how to set storage class and volume using a sample storage class and volume scripts for HCL Digital Experience 9.5 CF171 and higher container releases deployed to Amazon Elastic Container Service (EKS) or Red Hat OpenShift environment. It is recommended to set a separate storage class and volume for production, especially if you have more than one project in the Kubernetes (Amazon EKS or Red Hat OpenShift) environment. This is a good practice because it prevents projects from overlapping storage volumes. See video: Understanding the Core Persistent Volumes in HCL Digital Experience Container Update CF194 Follow these steps to create a new persistent volume and storage class, in either Amazon EKS or OpenShift. Use and save the following as your storage class file: kind: StorageClass apiVersion: storage.k8s.io/v1 metadata: name: dx-deploy-stg provisioner: kubernetes.io/no-provisioner reclaimPolicy: Retain volumeBindingMode: WaitForFirstConsumer Use and save the following as your storage volume file: kind: PersistentVolume apiVersion: v1 metadata: name: wp-profile-volume spec: capacity: storage: 100Gi nfs: server: your_nfs_server.com path: /exports/volume_name accessModes: - ReadWriteMany persistentVolumeReclaimPolicy: Retain storageClassName: dx-deploy-stg mountOptions: - hard - nfsvers=4.1 - rsize=8388608 - wsize=8388608 - timeo=600 - retrans=2 - noresvport volumeMode: Filesystem Copy both files to your local file system. Change at least the server and path in your sample volume .yaml file to an appropriate NFS server and volume. To create the storage class, run the following command: kubectl apply -f subclass.yaml To create the storage volume, run the following command: kubectl apply -f SampleZVolume.yaml Continue with deployment. Note: In these examples, NFS volumes have been used. You can use the following sample yaml to create the volume in Amazon EKS OpenShift with the corrected values: nfs: \u2028 server: your_nfs_server.com \u2028 path: /exports/volume_name Parent topic: Customizing your container deployment","title":"Sample\u00a0storage class and volume for HCL Digital Experience 9.5 containers"},{"location":"containerization/sample_storage_class_volume/#sample-storage-class-and-volume-for-hcl-digital-experience-95-containers","text":"Learn how to set storage class and volume using a sample storage class and volume scripts for HCL Digital Experience 9.5 CF171 and higher container releases deployed to Amazon Elastic Container Service (EKS) or Red Hat OpenShift environment. It is recommended to set a separate storage class and volume for production, especially if you have more than one project in the Kubernetes (Amazon EKS or Red Hat OpenShift) environment. This is a good practice because it prevents projects from overlapping storage volumes. See video: Understanding the Core Persistent Volumes in HCL Digital Experience Container Update CF194 Follow these steps to create a new persistent volume and storage class, in either Amazon EKS or OpenShift. Use and save the following as your storage class file: kind: StorageClass apiVersion: storage.k8s.io/v1 metadata: name: dx-deploy-stg provisioner: kubernetes.io/no-provisioner reclaimPolicy: Retain volumeBindingMode: WaitForFirstConsumer Use and save the following as your storage volume file: kind: PersistentVolume apiVersion: v1 metadata: name: wp-profile-volume spec: capacity: storage: 100Gi nfs: server: your_nfs_server.com path: /exports/volume_name accessModes: - ReadWriteMany persistentVolumeReclaimPolicy: Retain storageClassName: dx-deploy-stg mountOptions: - hard - nfsvers=4.1 - rsize=8388608 - wsize=8388608 - timeo=600 - retrans=2 - noresvport volumeMode: Filesystem Copy both files to your local file system. Change at least the server and path in your sample volume .yaml file to an appropriate NFS server and volume. To create the storage class, run the following command: kubectl apply -f subclass.yaml To create the storage volume, run the following command: kubectl apply -f SampleZVolume.yaml Continue with deployment. Note: In these examples, NFS volumes have been used. You can use the following sample yaml to create the volume in Amazon EKS OpenShift with the corrected values: nfs: \u2028 server: your_nfs_server.com \u2028 path: /exports/volume_name Parent topic: Customizing your container deployment","title":"Sample\u00a0storage class and volume for HCL Digital Experience 9.5 containers"},{"location":"containerization/scriptapplications/","text":"Script applications This topic provides information about the deployment, undeployment, and restoration of script applications. Deploy script applications The deploy-scriptapplication command is used with the DXClient tool to push or pull Script Applications between a local development workstation or automation server and DX 9.5 CF19 or later servers. The command will push or pull the files that make up a script application to or from a Script Application instance stored in a Web Content Manager library on the server. Required Files : The script application push command in the DXClient tool requires a Script Application zip file or an extracted folder of the same (identified by the prebuiltZip or contentRoot attributes respectively). For more information on Script Applications, refer to the Script Application topics in the HCL DX Help Center. Command This command invokes the deploy-scriptapplication command inside the DXClient tool to either push or pull a script application: dxclient deploy-scriptapplication Subcommands Use this command to create or update the content of a Script Application on the HCL DX server: push [options] Use this command to download the content of a Script Application from the HCL DX server: pull [options] Help command This command shows the help document on the deploy-scriptapplication command: dxclient deploy-scriptapplication pull -h dxclient deploy-scriptapplication push -h Options for the pull subcommand Use this attribute to specify the protocol with which to connect to the DX server: -dxProtocol <value> Use this attribute to specify the hostname of the target DX server: -hostname <value> Use this attribute to specify the port on which to connect to the DX server: -dxPort <value> Use this attribute to specify the path to the content handler servlet on DX server (example: /wps/mycontenthandler ): -contenthandlerPath <value> Use this attribute to specify the context of the virtual portal that contains the Script Application instance that you want to retrieve, if any: -virtualPortalContext <value> Use this attribute to specify the context of the portal project that manages the publication of changes to the Script Application instance, if any: -projectContext <value> Use this attribute to specify the username to authenticate with the DX server: -dxUsername <value> Use this attribute to specify the password for the user in the dxUsername attribute: -dxPassword <value> Use this attribute to specify the WCM content ID of the Script Application content item: -wcmContentId <value> Options for the push subcommand Use this attribute to specify the protocol with which to connect to the DX server: -dxProtocol <value> Use this attribute to specify the hostname of the target DX server: -hostname <value> Use this attribute to specify the port on which to connect to the DX server: -dxPort <value> Use this attribute to specify the path to the content handler servlet on the DX server (e.g. /wps/mycontenthandler): -contenthandlerPath <value> Use this attribute to specify the context of the virtual portal that should receive the Script Application instance being pushed, if any: -virtualPortalContext <value> Use this attribute to specify the context of the portal project that manages the publication of changes to the Script Application instance, if any: -projectContext <value> Use this attribute to specify the username to authenticate with the DX server: -dxUsername <value> Use this attribute to specify the password for the user in the dxUsername attribute: -dxPassword <value> Use this attribute to specify the WCM ID of the Script Application content item: -wcmContentId <value> Use this attribute to specify the SiteArea containing the Script Application content item: -wcmSiteArea <value> Use this attribute to specify the name of the Script Application content item to be created or updated: -wcmContentName <value> Use this attribute to specify the full WCM path of the Script Application content item to be created or updated: -wcmContentPath <value> Use this attribute to set or update the title of the Script Application content item: -wcmContentTitle <value> Use this attribute to specify the main HTML file name that is present within the Script Application: -mainHtmlFile <value> Use this attribute to specify the absolute or relative path to the Script Application's content as a ZIP file: -prebuiltZip <value> Use this attribute to specify the absolute or relative path to the Script Application's content in a directory: contentRoot <value> Notes: At least one of (a) wcmContentId , (b) wcmContentPath or (c) both wcmContentName and wcmSiteArea must be specified. If multiple options are provided, then the priority order goes as follows: (a), then (b), and then (c). Use wcmContentId only if you are updating an existing Script Application instance - for new Script Applications specify either (a) wcmContentPath or (b) both wcmContentName and wcmSiteArea . mainHtmlFile is mandatory. The outputfile for pull will be generated inside store/outputFiles/sp-pull-output. When prebuiltZip is specified, the main HTML file path must be relative to the top-level directory in the compressed file. Command options passed through the command line will override values set in the config.json file. Example: For Script Application Pull: dxclient deploy-scriptapplication pull -wcmContentId <wcmContentId> If all required options are configured in config.json of the DX Client tool, then execute: dxclient deploy-scriptapplication pull For Script Application Push, if the Script Application is extracted to a folder named temp at the root of the DXClient machine: dxclient deploy-scriptapplication push -contentRoot /temp -wcmSiteArea \"Script Application Library/Script Applications/\" -wcmContentName DemoScriptApplication If the Script Application is available as a .zip file in a folder named temp on the DXClient tool location, execute: dxclient deploy-scriptapplication push -prebuiltZip /temp/DemoScriptApplication.zip -wcmSiteArea \"Script Application Library/Script Applications/\" -wcmContentName DemoScriptApplication If all required options are configured in the config.json at the /dist/src/configuration path of the DXClient tool, then execute: dxclient deploy-scriptapplication push Undeploy script applications The undeploy-scriptapplication command is used to remove a script application from a target HCL DX 9.5 CF192 or later servers. Required file This command invokes the undeploy-scriptapplication tool inside the DXClient. The undeploy-scriptapplication dxtool uses the provided files and execute the undeploy scriptapplication task. Command dxclient undeploy-scriptapplication -wcmContentId <value> Help command This command shows the help information for undeploy-scriptapplication command usage: dxclient undeploy-scriptapplication -h Command options Use this attribute to specify the protocol with which to connect to the DX server: -dxProtocol <value> Use this attribute to specify the hostname of the target DX server: -hostname <value> Use this attribute to specify the port on which to connect to the DX server: -dxPort <value> Use this attribute to specify the path to the content handler servlet on DX server (example, /wps/mycontenthandler ): -contenthandlerPath <value> Use this attribute to specify the context of the virtual portal that contains the Script Application instance that you want to retrieve, if any: -virtualPortalContext <value> Use this attribute to specify the context of the portal project that manages the publication of changes to the Script Application instance, if any: -projectContext <value> Use this attribute to specify the username to authenticate with the DX server: -dxUsername <value> Use this attribute to specify the password for the user in the dxUsername attribute: -dxPassword <value> Use this attribute to specify the WCM content ID of the Script Application content item: -wcmContentId <value> Use this tag to forcefully delete the Script Application. -f Command options passed through the command line will override values set in the config.json file. Log files from command execution can be found in the logs directory of the DXClient installation. Example: dxclient undeploy-scriptapplication -wcmContentId <wcm-content-id> dxclient undeploy-scriptapplication -wcmContentId <wcm-content-id> -f Restore Script Application The restore-scriptapplication command is used to restore a script application into one of its previous versions present in the target HCL DX 9.5 CF 19 or later servers. Required file This command invokes the restore-scriptapplication tool inside the DXClient. The restore-scriptapplication dxtool uses the provided files and execute the restore scriptapplication task. Command dxclient restore-scriptapplication -wcmContentId <value> -versionName <version-name> Help command This command shows the help information for restore-scriptapplication command usage: dxclient restore-scriptapplication -h Command options Use this attribute to specify the protocol with which to connect to the DX server: -dxProtocol <value> Use this attribute to specify the hostname of the target DX server: -hostname <value> Use this attribute to specify the port on which to connect to the DX server: -dxPort <value> Use this attribute to specify the path to the content handler servlet on DX server (example, /wps/mycontenthandler ): -contenthandlerPath <value> Use this attribute to specify the context of the virtual portal that contains the Script Application instance that you want to retrieve, if any: -virtualPortalContext <value> Use this attribute to specify the context of the portal project that manages the publication of changes to the Script Application instance, if any: -projectContext <value> Use this attribute to specify the username to authenticate with the DX server: -dxUsername <value> Use this attribute to specify the password for the user in the dxUsername attribute: -dxPassword <value> Use this attribute to specify the WCM content ID of the Script Application content item: -wcmContentId <value> Use this attribute to specify the versionName for the Script Application. -versionName <value> Use this attribute to specify the restore as a draft or replace the published version of Script Application. -restoreAsPublished <value> Command options passed through the command line will override values set in the config.json file. Log files from command execution can be found in the logs directory of the DXClient installation. Example: dxclient restore-scriptapplication -wcmContentID <wcm-content-id> -versionName <version-name> -restoreAsPublished <restore-as-published> Parent topic: DXClient Artifact Types","title":"Script applications"},{"location":"containerization/scriptapplications/#script-applications","text":"This topic provides information about the deployment, undeployment, and restoration of script applications.","title":"Script applications"},{"location":"containerization/scriptapplications/#deploy-script-applications","text":"The deploy-scriptapplication command is used with the DXClient tool to push or pull Script Applications between a local development workstation or automation server and DX 9.5 CF19 or later servers. The command will push or pull the files that make up a script application to or from a Script Application instance stored in a Web Content Manager library on the server. Required Files : The script application push command in the DXClient tool requires a Script Application zip file or an extracted folder of the same (identified by the prebuiltZip or contentRoot attributes respectively). For more information on Script Applications, refer to the Script Application topics in the HCL DX Help Center. Command This command invokes the deploy-scriptapplication command inside the DXClient tool to either push or pull a script application: dxclient deploy-scriptapplication Subcommands Use this command to create or update the content of a Script Application on the HCL DX server: push [options] Use this command to download the content of a Script Application from the HCL DX server: pull [options] Help command This command shows the help document on the deploy-scriptapplication command: dxclient deploy-scriptapplication pull -h dxclient deploy-scriptapplication push -h Options for the pull subcommand Use this attribute to specify the protocol with which to connect to the DX server: -dxProtocol <value> Use this attribute to specify the hostname of the target DX server: -hostname <value> Use this attribute to specify the port on which to connect to the DX server: -dxPort <value> Use this attribute to specify the path to the content handler servlet on DX server (example: /wps/mycontenthandler ): -contenthandlerPath <value> Use this attribute to specify the context of the virtual portal that contains the Script Application instance that you want to retrieve, if any: -virtualPortalContext <value> Use this attribute to specify the context of the portal project that manages the publication of changes to the Script Application instance, if any: -projectContext <value> Use this attribute to specify the username to authenticate with the DX server: -dxUsername <value> Use this attribute to specify the password for the user in the dxUsername attribute: -dxPassword <value> Use this attribute to specify the WCM content ID of the Script Application content item: -wcmContentId <value> Options for the push subcommand Use this attribute to specify the protocol with which to connect to the DX server: -dxProtocol <value> Use this attribute to specify the hostname of the target DX server: -hostname <value> Use this attribute to specify the port on which to connect to the DX server: -dxPort <value> Use this attribute to specify the path to the content handler servlet on the DX server (e.g. /wps/mycontenthandler): -contenthandlerPath <value> Use this attribute to specify the context of the virtual portal that should receive the Script Application instance being pushed, if any: -virtualPortalContext <value> Use this attribute to specify the context of the portal project that manages the publication of changes to the Script Application instance, if any: -projectContext <value> Use this attribute to specify the username to authenticate with the DX server: -dxUsername <value> Use this attribute to specify the password for the user in the dxUsername attribute: -dxPassword <value> Use this attribute to specify the WCM ID of the Script Application content item: -wcmContentId <value> Use this attribute to specify the SiteArea containing the Script Application content item: -wcmSiteArea <value> Use this attribute to specify the name of the Script Application content item to be created or updated: -wcmContentName <value> Use this attribute to specify the full WCM path of the Script Application content item to be created or updated: -wcmContentPath <value> Use this attribute to set or update the title of the Script Application content item: -wcmContentTitle <value> Use this attribute to specify the main HTML file name that is present within the Script Application: -mainHtmlFile <value> Use this attribute to specify the absolute or relative path to the Script Application's content as a ZIP file: -prebuiltZip <value> Use this attribute to specify the absolute or relative path to the Script Application's content in a directory: contentRoot <value> Notes: At least one of (a) wcmContentId , (b) wcmContentPath or (c) both wcmContentName and wcmSiteArea must be specified. If multiple options are provided, then the priority order goes as follows: (a), then (b), and then (c). Use wcmContentId only if you are updating an existing Script Application instance - for new Script Applications specify either (a) wcmContentPath or (b) both wcmContentName and wcmSiteArea . mainHtmlFile is mandatory. The outputfile for pull will be generated inside store/outputFiles/sp-pull-output. When prebuiltZip is specified, the main HTML file path must be relative to the top-level directory in the compressed file. Command options passed through the command line will override values set in the config.json file. Example: For Script Application Pull: dxclient deploy-scriptapplication pull -wcmContentId <wcmContentId> If all required options are configured in config.json of the DX Client tool, then execute: dxclient deploy-scriptapplication pull For Script Application Push, if the Script Application is extracted to a folder named temp at the root of the DXClient machine: dxclient deploy-scriptapplication push -contentRoot /temp -wcmSiteArea \"Script Application Library/Script Applications/\" -wcmContentName DemoScriptApplication If the Script Application is available as a .zip file in a folder named temp on the DXClient tool location, execute: dxclient deploy-scriptapplication push -prebuiltZip /temp/DemoScriptApplication.zip -wcmSiteArea \"Script Application Library/Script Applications/\" -wcmContentName DemoScriptApplication If all required options are configured in the config.json at the /dist/src/configuration path of the DXClient tool, then execute: dxclient deploy-scriptapplication push","title":"Deploy script applications"},{"location":"containerization/scriptapplications/#undeploy-script-applications","text":"The undeploy-scriptapplication command is used to remove a script application from a target HCL DX 9.5 CF192 or later servers. Required file This command invokes the undeploy-scriptapplication tool inside the DXClient. The undeploy-scriptapplication dxtool uses the provided files and execute the undeploy scriptapplication task. Command dxclient undeploy-scriptapplication -wcmContentId <value> Help command This command shows the help information for undeploy-scriptapplication command usage: dxclient undeploy-scriptapplication -h Command options Use this attribute to specify the protocol with which to connect to the DX server: -dxProtocol <value> Use this attribute to specify the hostname of the target DX server: -hostname <value> Use this attribute to specify the port on which to connect to the DX server: -dxPort <value> Use this attribute to specify the path to the content handler servlet on DX server (example, /wps/mycontenthandler ): -contenthandlerPath <value> Use this attribute to specify the context of the virtual portal that contains the Script Application instance that you want to retrieve, if any: -virtualPortalContext <value> Use this attribute to specify the context of the portal project that manages the publication of changes to the Script Application instance, if any: -projectContext <value> Use this attribute to specify the username to authenticate with the DX server: -dxUsername <value> Use this attribute to specify the password for the user in the dxUsername attribute: -dxPassword <value> Use this attribute to specify the WCM content ID of the Script Application content item: -wcmContentId <value> Use this tag to forcefully delete the Script Application. -f Command options passed through the command line will override values set in the config.json file. Log files from command execution can be found in the logs directory of the DXClient installation. Example: dxclient undeploy-scriptapplication -wcmContentId <wcm-content-id> dxclient undeploy-scriptapplication -wcmContentId <wcm-content-id> -f","title":"Undeploy script applications"},{"location":"containerization/scriptapplications/#restore-script-application","text":"The restore-scriptapplication command is used to restore a script application into one of its previous versions present in the target HCL DX 9.5 CF 19 or later servers. Required file This command invokes the restore-scriptapplication tool inside the DXClient. The restore-scriptapplication dxtool uses the provided files and execute the restore scriptapplication task. Command dxclient restore-scriptapplication -wcmContentId <value> -versionName <version-name> Help command This command shows the help information for restore-scriptapplication command usage: dxclient restore-scriptapplication -h Command options Use this attribute to specify the protocol with which to connect to the DX server: -dxProtocol <value> Use this attribute to specify the hostname of the target DX server: -hostname <value> Use this attribute to specify the port on which to connect to the DX server: -dxPort <value> Use this attribute to specify the path to the content handler servlet on DX server (example, /wps/mycontenthandler ): -contenthandlerPath <value> Use this attribute to specify the context of the virtual portal that contains the Script Application instance that you want to retrieve, if any: -virtualPortalContext <value> Use this attribute to specify the context of the portal project that manages the publication of changes to the Script Application instance, if any: -projectContext <value> Use this attribute to specify the username to authenticate with the DX server: -dxUsername <value> Use this attribute to specify the password for the user in the dxUsername attribute: -dxPassword <value> Use this attribute to specify the WCM content ID of the Script Application content item: -wcmContentId <value> Use this attribute to specify the versionName for the Script Application. -versionName <value> Use this attribute to specify the restore as a draft or replace the published version of Script Application. -restoreAsPublished <value> Command options passed through the command line will override values set in the config.json file. Log files from command execution can be found in the logs directory of the DXClient installation. Example: dxclient restore-scriptapplication -wcmContentID <wcm-content-id> -versionName <version-name> -restoreAsPublished <restore-as-published> Parent topic: DXClient Artifact Types","title":"Restore Script Application"},{"location":"containerization/sharedlibrary/","text":"Shared library Shared libraries are jar files representing code that is shared across multiple components of the customer, for example, portlets, themes, preprocessors, and others. Shared library The shared-library command is used to manage the jar files in the provided default shared library location. Default shared Library: DXCLib Default shared library location: <dx-server-profile>/PortalServer/sharedLibrary Note: For Shared Library artifact, the DX Server needs to be at HCL DX 9.5 CF196 or higher. The default shared library DXCLib is already configured and associated to application server. The shared-library command uses two sub-commands upload and delete to manage files in the DX server. The sub-command upload is used to upload jar files and sub-command delete is used to delete the files from the default shared library location provided below. Command Description This command invokes the shared library upload task inside the DXClient. This is used to upload jar files into the default shared library location. dxclient shared-library upload This command invokes the shared library delete task inside the DXClient. This is used to delete jar files from the default shared library location. dxclient shared-library delete Help command This command shows the help information for shared-library upload command usage: dxclient shared-library upload -h This command shows the help information for shared-library delete command usage: dxclient shared-library delete -h Common Command options Use this attribute to specify the username that is required for authenticating with the server -dxUsername <value> Use this attribute to specify the password that is required for authenticating with the server -dxPassword <value> Use this attribute to specify the config wizard home (route change only in case of Open Shift Kubernetes Environment, otherwise same as hostname) that is required for authenticating to the cw_profile -dxConnectHostname <value> Use this attribute to specify the port number of the cw_profile(for Kubernetes Environment dxConnectPort is 443) -dxConnectPort <value> Use this attribute to specify the username that is required for authenticating to the cw_profile -dxConnectUsername <value> Use this attribute to specify the password that is required for authenticating to the cw_profile. -dxConnectPassword <value> Use this attribute to specify the profile name of the DX Core -dxProfileName <Name of the DX server profile> Command option for upload Use this attribute to specify the path to a jar/zip file or folder containing jars in it. -libFilePath <value> Command option for delete Use this attribute to specify the names of the jar files present in the shared library location on the server. -libFileNames <value> Note: For upload, the folder or zip file should contain only jars files that are to be uploaded to the default shared library location. Example: Use this attribute to specify the path to a jar/zip file or folder containing jars in it. ``` dxclient shared-library upload -dxUsername -dxPassword -dxConnectHostname -dxConnectPort -dxConnectUsername -dxConnectPassword -dxProfileName -libFilePath dxclient shared-library delete -dxUsername -dxPassword -dxConnectHostname -dxConnectPort -dxConnectUsername -dxConnectPassword -dxProfileName -libFileNames -libFilePath ``` Parent topic: DXClient Artifact Types","title":"Shared library"},{"location":"containerization/sharedlibrary/#shared-library","text":"Shared libraries are jar files representing code that is shared across multiple components of the customer, for example, portlets, themes, preprocessors, and others.","title":"Shared library"},{"location":"containerization/sharedlibrary/#shared-library_1","text":"The shared-library command is used to manage the jar files in the provided default shared library location. Default shared Library: DXCLib Default shared library location: <dx-server-profile>/PortalServer/sharedLibrary Note: For Shared Library artifact, the DX Server needs to be at HCL DX 9.5 CF196 or higher. The default shared library DXCLib is already configured and associated to application server. The shared-library command uses two sub-commands upload and delete to manage files in the DX server. The sub-command upload is used to upload jar files and sub-command delete is used to delete the files from the default shared library location provided below. Command Description This command invokes the shared library upload task inside the DXClient. This is used to upload jar files into the default shared library location. dxclient shared-library upload This command invokes the shared library delete task inside the DXClient. This is used to delete jar files from the default shared library location. dxclient shared-library delete Help command This command shows the help information for shared-library upload command usage: dxclient shared-library upload -h This command shows the help information for shared-library delete command usage: dxclient shared-library delete -h Common Command options Use this attribute to specify the username that is required for authenticating with the server -dxUsername <value> Use this attribute to specify the password that is required for authenticating with the server -dxPassword <value> Use this attribute to specify the config wizard home (route change only in case of Open Shift Kubernetes Environment, otherwise same as hostname) that is required for authenticating to the cw_profile -dxConnectHostname <value> Use this attribute to specify the port number of the cw_profile(for Kubernetes Environment dxConnectPort is 443) -dxConnectPort <value> Use this attribute to specify the username that is required for authenticating to the cw_profile -dxConnectUsername <value> Use this attribute to specify the password that is required for authenticating to the cw_profile. -dxConnectPassword <value> Use this attribute to specify the profile name of the DX Core -dxProfileName <Name of the DX server profile> Command option for upload Use this attribute to specify the path to a jar/zip file or folder containing jars in it. -libFilePath <value> Command option for delete Use this attribute to specify the names of the jar files present in the shared library location on the server. -libFileNames <value> Note: For upload, the folder or zip file should contain only jars files that are to be uploaded to the default shared library location. Example: Use this attribute to specify the path to a jar/zip file or folder containing jars in it. ``` dxclient shared-library upload -dxUsername -dxPassword -dxConnectHostname -dxConnectPort -dxConnectUsername -dxConnectPassword -dxProfileName -libFilePath dxclient shared-library delete -dxUsername -dxPassword -dxConnectHostname -dxConnectPort -dxConnectUsername -dxConnectPassword -dxProfileName -libFileNames -libFilePath ``` Parent topic: DXClient Artifact Types","title":"Shared library"},{"location":"containerization/syndicatorsandsubscribers/","text":"Managing Web Content Syndicators and Subscribers using DXClient The section provides information about using the DXClient process to automate the management of Web Content Manager Syndicators, Subscribers, and get-syndication reports. For more information on the process and settings of the Web Content Manager Syndicators and Subscribers, see How to manage syndicators and subscribers . Managing syndicators The manage-syndicator command is used to enable or disable the syndicator using the provided input. Command description This command invokes the manage-syndicator tool inside the DXClient. It is used to enable or disable the syndicator. dxclient manage-syndicator Help command This command shows the help document on the manage-syndicator command usage: dxclient manage-syndicator -h Command options Use this attribute to specify the hostname of the target server. -hostname <value> Use this attribute to specify the protocol with which to connect to the server. -dxProtocol <value> Use this attribute to specify the port on which to connect to the server(for Kubernetes Environment dxPort is 443) -dxPort <value> Use this attribute to specify the username that is required for authenticating with the server. -dxUsername <value> Use this attribute to specify the password that is required for authenticating with the server. -dxPassword <value> Use this attribute to specify the path to the contenthandler servlet on the DX server (example: /wps/mycontenthandler). -contenthandlerPath <value> Use this attribute to specify the UUID of the syndicator instance. -UUID <value> Use true or false to enable or disable the syndicator. -enable <value> The options that are passed through the command line override the default values. Example: dxclient manage-syndicator -dxProtocol <dxProtocol> -hostname <host-name> -dxPort <dxPort> -dxUsername <dxUsername> -dxPassword <dxPassword> -contenthandlerPath <contenthandlerPath> -UUID <UUID> -enable <enable> Manage-syndicator get-syndication-report The manage-syndicator get-syndication-report command is used to fetch the failed reports of the syndicator. Command description This command invokes the syndicator-faileditems tool inside the DXClient, which is used to fetch the failed reports. dxclient manage-syndicator get-syndication-report Help command This command shows the help document on the manage-syndicator get-syndication-report command usage: dxclient manage-syndicator get-syndication-report -h Command options Use this attribute to specify the hostname of the target server -hostname <value> Use this attribute to specify the protocol with which to connect to the server -dxProtocol <value> Use this attribute to specify the port on which to connect to the server (for Kubernetes Environment, dxPort is 443) -dxPort <value> Use this attribute to specify the username that is required for authenticating with the server -dxUsername <value> Use this attribute to specify the password that is required for authenticating with the server -dxPassword <value> Use this attribute to specify the path to the contenthandler servlet on the DX server (for example, /wps/mycontenthandler) -contenthandlerPath <value> Use this attribute to specify the UUID of the syndicator instance -UUID <value> The options that are passed through the command line override the default values. Example usage with UUID: dxclient manage-syndicator get-syndication-report -dxProtocol <dxProtocol> -hostname <host-name> -dxPort <dxPort> -dxUsername <dxUsername> -dxPassword <dxPassword> -contenthandlerPath <contenthandlerPath> -UUID <UUID> Example usage without UUID: dxclient manage-syndicator get-syndication-report -dxProtocol <dxProtocol> -hostname <host-name> -dxPort <dxPort> -dxUsername <dxUsername> -dxPassword <dxPassword> -contenthandlerPath <contenthandlerPath> Note: If UUID of a syndicator is specified, then the command provides the report for only the particular syndicator that is present in the target DX Server; otherwise, it provides the failure report for all syndicators. Managing subscribers The manage-subscriber command is used to enable or disable the subscriber using the provided input. Command description This command invokes the manage-subscriber tool inside the DXClient. It is used to enable/disable the subscriber. dxclient manage-subscriber Help command This command shows the help document on the manage-syndicator command usage: dxclient manage-subscriber -h Command options Use this attribute to specify the hostname of the target server. -hostname <value> Use this attribute to specify the protocol with which to connect to the server. -dxProtocol <value> Use this attribute to specify the port on which to connect to the server(for Kubernetes Environment dxPort is 443). -dxPort <value> Use this attribute to specify the username that is required for authenticating with the server. -dxUsername <value> Use this attribute to specify the password that is required for authenticating with the server. -dxPassword <value> Use this attribute to specify the path to the contenthandler servlet on the DX server (for example, /wps/mycontenthandler). -contenthandlerPath <value> Use this attribute to specify the UUID of the subscriber instance. -UUID <value> Use this attribute to specify the enable or disable the subscriber instance. Use true or false to enable or disable the subscriber. -enable <value> The options passed through command line overrides the default values. Example: dxclient manage-subscriber -dxProtocol <dxProtocol> -hostname <host-name> -dxPort <dxPort> -dxUsername <dxUsername> -dxPassword <dxPassword> -contenthandlerPath <contenthandlerPath> -UUID <UUID> -enable <enable> Create Syndication Relation The create-syndication-relation command is used to create the syndication relation between syndicator and subscriber in the DX server. Command description Use the create-syndication-relation to create syndication relation: dxclient create-syndication-relation Help command This command shows the help information for create-syndication-relation command usage: dxclient create-syndication-relation -h Command options Use this attribute to specify the protocol with which to connect to the DX server: -dxProtocol <value> Use this attribute to specify the hostname of the target DX server: -hostname <value> Use this attribute to specify the port on which to connect to the DX server (for Kubernetes Environment, dxPort is 443): -dxPort <value> Use this attribute to specify the username to authenticate with the DX server -dxUsername <value> Use this attribute to specify the password for the user in the \"dxUsername\" attribute -dxPassword <value> The path to the contenthandler servlet on the Script Application server: -contenthandlerPath <value> Syndicator URL of target server, for example, http(s)://host:port/wps/wcm: -syndicatorUrl <value> Use this attribute to specify the new syndicator name: -syndicatorName <value> Use this attribute to specify the new subscriber name: -subscriberName <value> Use this attribute to specify the Credential Vault Name of source server: -vaultSlotName <value> Whether the syndicator/subscriber pair is enabled on creation: isEnabled (default is true): -isEnabled <value> Whether the syndicator/subscriber pair is updateAfterCreation : updateAfterCreation (default is true): -updateAfterCreation <value> The libraries to syndicate eg. all-items,liveItems,liveProjectsItem,all-items,published-items and all-items-and-versions: -syndicationType <value> Use this attribute to specify the Libraries Name of target Server: -webContentLibraries <value> Use this attribute to specify the Subscriber URL, for example, http(s)://host:port/wps/wcm: -subscriberURL <value> Use this attribute to specify the Syndicator/subscriber mode: -mode <value> Use this attribute to specify the Credential Vault Name: -syndicatorVaultSlotName <value> Use this attribute to specify the path to the context root on the DX server (for example, /wps): -dxContextRoot <value> Use this attribute to specify the path to the Virtual portal Context: -virtualPortalContext <value> Log files from command execution can be found in the logs directory of the DXClient installation. Example: ``` dxclient create-syndication-relation -dxProtocol -hostname -dxPort -contenthandlerPath -dxUsername -dxPassword -syndicatorUrl -syndicatorName -subscriberName -vaultSlotName -isEnabled -updateAfterCreation -syndicationType -webContentLibraries -subscriberURL -mode -syndicatorVaultSlotName -dxContextRoot -virtualPortalContext ``` Parent topic: DXClient Artifact Types","title":"Managing Web Content Syndicators and Subscribers using DXClient"},{"location":"containerization/syndicatorsandsubscribers/#managing-web-content-syndicators-and-subscribers-using-dxclient","text":"The section provides information about using the DXClient process to automate the management of Web Content Manager Syndicators, Subscribers, and get-syndication reports. For more information on the process and settings of the Web Content Manager Syndicators and Subscribers, see How to manage syndicators and subscribers .","title":"Managing Web Content Syndicators and Subscribers using DXClient"},{"location":"containerization/syndicatorsandsubscribers/#managing-syndicators","text":"The manage-syndicator command is used to enable or disable the syndicator using the provided input. Command description This command invokes the manage-syndicator tool inside the DXClient. It is used to enable or disable the syndicator. dxclient manage-syndicator Help command This command shows the help document on the manage-syndicator command usage: dxclient manage-syndicator -h Command options Use this attribute to specify the hostname of the target server. -hostname <value> Use this attribute to specify the protocol with which to connect to the server. -dxProtocol <value> Use this attribute to specify the port on which to connect to the server(for Kubernetes Environment dxPort is 443) -dxPort <value> Use this attribute to specify the username that is required for authenticating with the server. -dxUsername <value> Use this attribute to specify the password that is required for authenticating with the server. -dxPassword <value> Use this attribute to specify the path to the contenthandler servlet on the DX server (example: /wps/mycontenthandler). -contenthandlerPath <value> Use this attribute to specify the UUID of the syndicator instance. -UUID <value> Use true or false to enable or disable the syndicator. -enable <value> The options that are passed through the command line override the default values. Example: dxclient manage-syndicator -dxProtocol <dxProtocol> -hostname <host-name> -dxPort <dxPort> -dxUsername <dxUsername> -dxPassword <dxPassword> -contenthandlerPath <contenthandlerPath> -UUID <UUID> -enable <enable>","title":"Managing syndicators"},{"location":"containerization/syndicatorsandsubscribers/#manage-syndicator-get-syndication-report","text":"The manage-syndicator get-syndication-report command is used to fetch the failed reports of the syndicator. Command description This command invokes the syndicator-faileditems tool inside the DXClient, which is used to fetch the failed reports. dxclient manage-syndicator get-syndication-report Help command This command shows the help document on the manage-syndicator get-syndication-report command usage: dxclient manage-syndicator get-syndication-report -h Command options Use this attribute to specify the hostname of the target server -hostname <value> Use this attribute to specify the protocol with which to connect to the server -dxProtocol <value> Use this attribute to specify the port on which to connect to the server (for Kubernetes Environment, dxPort is 443) -dxPort <value> Use this attribute to specify the username that is required for authenticating with the server -dxUsername <value> Use this attribute to specify the password that is required for authenticating with the server -dxPassword <value> Use this attribute to specify the path to the contenthandler servlet on the DX server (for example, /wps/mycontenthandler) -contenthandlerPath <value> Use this attribute to specify the UUID of the syndicator instance -UUID <value> The options that are passed through the command line override the default values. Example usage with UUID: dxclient manage-syndicator get-syndication-report -dxProtocol <dxProtocol> -hostname <host-name> -dxPort <dxPort> -dxUsername <dxUsername> -dxPassword <dxPassword> -contenthandlerPath <contenthandlerPath> -UUID <UUID> Example usage without UUID: dxclient manage-syndicator get-syndication-report -dxProtocol <dxProtocol> -hostname <host-name> -dxPort <dxPort> -dxUsername <dxUsername> -dxPassword <dxPassword> -contenthandlerPath <contenthandlerPath> Note: If UUID of a syndicator is specified, then the command provides the report for only the particular syndicator that is present in the target DX Server; otherwise, it provides the failure report for all syndicators.","title":"Manage-syndicator get-syndication-report"},{"location":"containerization/syndicatorsandsubscribers/#managing-subscribers","text":"The manage-subscriber command is used to enable or disable the subscriber using the provided input. Command description This command invokes the manage-subscriber tool inside the DXClient. It is used to enable/disable the subscriber. dxclient manage-subscriber Help command This command shows the help document on the manage-syndicator command usage: dxclient manage-subscriber -h Command options Use this attribute to specify the hostname of the target server. -hostname <value> Use this attribute to specify the protocol with which to connect to the server. -dxProtocol <value> Use this attribute to specify the port on which to connect to the server(for Kubernetes Environment dxPort is 443). -dxPort <value> Use this attribute to specify the username that is required for authenticating with the server. -dxUsername <value> Use this attribute to specify the password that is required for authenticating with the server. -dxPassword <value> Use this attribute to specify the path to the contenthandler servlet on the DX server (for example, /wps/mycontenthandler). -contenthandlerPath <value> Use this attribute to specify the UUID of the subscriber instance. -UUID <value> Use this attribute to specify the enable or disable the subscriber instance. Use true or false to enable or disable the subscriber. -enable <value> The options passed through command line overrides the default values. Example: dxclient manage-subscriber -dxProtocol <dxProtocol> -hostname <host-name> -dxPort <dxPort> -dxUsername <dxUsername> -dxPassword <dxPassword> -contenthandlerPath <contenthandlerPath> -UUID <UUID> -enable <enable>","title":"Managing subscribers"},{"location":"containerization/syndicatorsandsubscribers/#create-syndication-relation","text":"The create-syndication-relation command is used to create the syndication relation between syndicator and subscriber in the DX server. Command description Use the create-syndication-relation to create syndication relation: dxclient create-syndication-relation Help command This command shows the help information for create-syndication-relation command usage: dxclient create-syndication-relation -h Command options Use this attribute to specify the protocol with which to connect to the DX server: -dxProtocol <value> Use this attribute to specify the hostname of the target DX server: -hostname <value> Use this attribute to specify the port on which to connect to the DX server (for Kubernetes Environment, dxPort is 443): -dxPort <value> Use this attribute to specify the username to authenticate with the DX server -dxUsername <value> Use this attribute to specify the password for the user in the \"dxUsername\" attribute -dxPassword <value> The path to the contenthandler servlet on the Script Application server: -contenthandlerPath <value> Syndicator URL of target server, for example, http(s)://host:port/wps/wcm: -syndicatorUrl <value> Use this attribute to specify the new syndicator name: -syndicatorName <value> Use this attribute to specify the new subscriber name: -subscriberName <value> Use this attribute to specify the Credential Vault Name of source server: -vaultSlotName <value> Whether the syndicator/subscriber pair is enabled on creation: isEnabled (default is true): -isEnabled <value> Whether the syndicator/subscriber pair is updateAfterCreation : updateAfterCreation (default is true): -updateAfterCreation <value> The libraries to syndicate eg. all-items,liveItems,liveProjectsItem,all-items,published-items and all-items-and-versions: -syndicationType <value> Use this attribute to specify the Libraries Name of target Server: -webContentLibraries <value> Use this attribute to specify the Subscriber URL, for example, http(s)://host:port/wps/wcm: -subscriberURL <value> Use this attribute to specify the Syndicator/subscriber mode: -mode <value> Use this attribute to specify the Credential Vault Name: -syndicatorVaultSlotName <value> Use this attribute to specify the path to the context root on the DX server (for example, /wps): -dxContextRoot <value> Use this attribute to specify the path to the Virtual portal Context: -virtualPortalContext <value> Log files from command execution can be found in the logs directory of the DXClient installation. Example: ``` dxclient create-syndication-relation -dxProtocol -hostname -dxPort -contenthandlerPath -dxUsername -dxPassword -syndicatorUrl -syndicatorName -subscriberName -vaultSlotName -isEnabled -updateAfterCreation -syndicationType -webContentLibraries -subscriberURL -mode -syndicatorVaultSlotName -dxContextRoot -virtualPortalContext ``` Parent topic: DXClient Artifact Types","title":"Create Syndication Relation"},{"location":"containerization/t_customize_dx_url/","text":"Customizing the HCL DX URL when deployed to container platforms This section describes the procedures to define custom context root URLs, or no context root URL definitions, when deploying your HCL DX 9.5 software to the supported container platforms. Note: Defining the custom context root URL feature is available in HCL DX 9.5 Container Update CF193 and later. Prerequisites and Notes: The following configuration procedure is supported for DX container deployments to Kubernetes and OpenShift platforms. To change the HCL DX URL hybrid container deployment and on-premise deployment, refer to the following topic: Customizing the HCL DX URL for hybrid deployment . The dxctl tool is used for this configuration process. Before running the dxctl tool, the administrator must log on to the targeted DX cluster using the cloud-specific CLI login commands for the supported Kubernetes and OpenShift platforms; such as Microsoft Azure Kubernetes Services (AKS), Google Kubernetes Engine (GKE), Amazon Elastic Kubernetes Service (EKS), or Red Hat OpenShift. For example, to log in to your DX container cluster on the Red Hat OpenShift platform, use the oc login command. Ensure that you have updated the DxDeployment custom resource definition to the HCL DX 9.5 Container Update CF192 and later releases. For more information, see Customizing the container deployment . For more information on the custom URI management for HCL Digital Experience, refer to the following topic: Changing the portal URI after an installation . If you have already defined a custom Digital Experience URL in your existing container deployment, it is mandatory to configure the following properties with the existing values. Otherwise, the properties are updated with the default values. Customize the context root in your Digital Experience container deployment: The following are the default configuration property values for the context root changes. ``` Path dx.path.contextroot: wps dx.path.home: portal dx.path.personalized: myportal ``` To change the default values to your custom requirements, update the following properties. For example: ``` Path dx.path.contextroot: hcl dx.path.home: dx dx.path.personalized: mydx ``` Important: Do not use the same value for the dx.path.home and dx.path.personalized properties. To apply the HCL Digital Experience custom URI during a new DX Container deployment, run the following command: $ dxctl --deploy -p properties/full-deployment.properties To change the custom URI of a previous DX 9.5 Container deployment, then update the properties as specified in Step 1 , and then run the following command: $ dxctl --update -p properties/full-deployment.properties Additional Considerations and Example: Review the following manual, required and optional steps to complete the context root customization updates. Perform the steps that are related to your DX deployment details. (Some optional steps may not apply to your deployment). Optional step: If your DX deployment includes custom themes that use Dojo, update those themes to refer to the correct Dojo context root. The default Dojo context root in HCL Digital Experience is /wps/portal_dojo. After you run the modify-servlet-path and modify-servlet-path-portlets tasks, the Dojo context root is changed to include the new value in the WpsContextRoot parameter as the prefix. For example, if the new WpsContextRoot value is myco, then the new Dojo context root becomes /myco/portal_dojo. If your theme includes hard-coded references to /wps/portal_dojo, update those references to the new context root. If you migrated a custom theme, you might find that it has references to /portal_dojo without the /wps prefix. Look for these references in both the WAR file and in the WebDAV storage for your theme. Required step: Refresh your search collection and select Regather to update the documents. Log on to the Digital Experience platform as the administrator. Navigate to the Practitioner Studio menu. Select Search: Open the Manage Search portlet. Click Search Collections. Click the search collection that you want to update. For example: Default Search Collection. Start the Digital Experience search collection crawler service for each content collection source: Notes: If the documents are not stored in the search collection but a schedule is defined for the crawler, then the crawler automatically runs at the scheduled time. You can also start the crawler manually. If the documents are already collected, then select Regather documents to update the documents with the new context root information. Click Collections from All Services in the breadcrumb trail and select the next search collection to modify. Optional step: From the Web Content interface of Practitioner Studio, update the Web Content Manager syndicator and subscriber servers that reference your modified DX Container site URL. If you do not use syndication, skip this step. Log on to the site that syndicates to this instance. Open the Syndicators page. Click the edit icon by the syndicator that you want to edit. Update the URL with the new context root information. Log on to the site that subscribes to this instance. Open the Subscribers page. Click the edit icon of the subscriber that you want to edit. Update the URL with the new context root information. Configure no context root in your Digital Experience container deployment To configure no context root, update the following property values. For example: ``` Path dx.path.contextroot: \" \" dx.path.home: \" \" dx.path.personalized: mydx dx.ready.path: / dx.live.path: / ``` Note: If the context root is removed, the home path must be removed as well. It may take more time than usual for the DX-Core pod to get to a running state during the update process. Before log in (no context root): https://dx-cr-demo-service-dx-cr-01-dx-cr-01.apps.sample.domain.net/!ut/p/z1/04_Sj9CPykssy0xPLMnMz0vMAfljo8ziDVCAo4FTkJGTsYGBu7OJfjhYgbmHi7u7oYFhgL-bu4BoJmrt7e After log in (personalized context root): After log in (personalized context root): https://dx-cr-demo-service-dx-cr-01-dx-cr-01.apps.sample.domain.net/mydx/woodburnstudio/home/!ut/p/z1/04_Sj9CPykssy0xPLMnMz0vMAfljo8ziDVCAo4FTkJGTsYGBu7OJfjhYgbmHi7u7oYFhgL-bu4BoJmrt7e Important: Do not use the same value for the dx.path.home and dx.path.personalized properties. To apply the HCL Digital Experience custom URI during a new DX container deployment, run the following command: $ dxctl --deploy -p properties/full-deployment.properties To change the custom URI of a previous HCL DX 9.5 container deployment, update the property values as specified in step 1, and run the following command: $ dxctl --update -p properties/full-deployment.properties Parent topic: Customizing your container deployment","title":"Customizing the HCL DX URL when deployed to container platforms"},{"location":"containerization/t_customize_dx_url/#customizing-the-hcl-dx-url-when-deployed-to-container-platforms","text":"This section describes the procedures to define custom context root URLs, or no context root URL definitions, when deploying your HCL DX 9.5 software to the supported container platforms. Note: Defining the custom context root URL feature is available in HCL DX 9.5 Container Update CF193 and later. Prerequisites and Notes: The following configuration procedure is supported for DX container deployments to Kubernetes and OpenShift platforms. To change the HCL DX URL hybrid container deployment and on-premise deployment, refer to the following topic: Customizing the HCL DX URL for hybrid deployment . The dxctl tool is used for this configuration process. Before running the dxctl tool, the administrator must log on to the targeted DX cluster using the cloud-specific CLI login commands for the supported Kubernetes and OpenShift platforms; such as Microsoft Azure Kubernetes Services (AKS), Google Kubernetes Engine (GKE), Amazon Elastic Kubernetes Service (EKS), or Red Hat OpenShift. For example, to log in to your DX container cluster on the Red Hat OpenShift platform, use the oc login command. Ensure that you have updated the DxDeployment custom resource definition to the HCL DX 9.5 Container Update CF192 and later releases. For more information, see Customizing the container deployment . For more information on the custom URI management for HCL Digital Experience, refer to the following topic: Changing the portal URI after an installation . If you have already defined a custom Digital Experience URL in your existing container deployment, it is mandatory to configure the following properties with the existing values. Otherwise, the properties are updated with the default values. Customize the context root in your Digital Experience container deployment: The following are the default configuration property values for the context root changes. ```","title":"Customizing the HCL DX URL when deployed to container platforms"},{"location":"containerization/t_customize_dx_url/#path","text":"dx.path.contextroot: wps dx.path.home: portal dx.path.personalized: myportal ``` To change the default values to your custom requirements, update the following properties. For example: ```","title":"Path"},{"location":"containerization/t_customize_dx_url/#path_1","text":"dx.path.contextroot: hcl dx.path.home: dx dx.path.personalized: mydx ``` Important: Do not use the same value for the dx.path.home and dx.path.personalized properties. To apply the HCL Digital Experience custom URI during a new DX Container deployment, run the following command: $ dxctl --deploy -p properties/full-deployment.properties To change the custom URI of a previous DX 9.5 Container deployment, then update the properties as specified in Step 1 , and then run the following command: $ dxctl --update -p properties/full-deployment.properties","title":"Path"},{"location":"containerization/t_customize_dx_url/#additional-considerations-and-example","text":"Review the following manual, required and optional steps to complete the context root customization updates. Perform the steps that are related to your DX deployment details. (Some optional steps may not apply to your deployment). Optional step: If your DX deployment includes custom themes that use Dojo, update those themes to refer to the correct Dojo context root. The default Dojo context root in HCL Digital Experience is /wps/portal_dojo. After you run the modify-servlet-path and modify-servlet-path-portlets tasks, the Dojo context root is changed to include the new value in the WpsContextRoot parameter as the prefix. For example, if the new WpsContextRoot value is myco, then the new Dojo context root becomes /myco/portal_dojo. If your theme includes hard-coded references to /wps/portal_dojo, update those references to the new context root. If you migrated a custom theme, you might find that it has references to /portal_dojo without the /wps prefix. Look for these references in both the WAR file and in the WebDAV storage for your theme. Required step: Refresh your search collection and select Regather to update the documents. Log on to the Digital Experience platform as the administrator. Navigate to the Practitioner Studio menu. Select Search: Open the Manage Search portlet. Click Search Collections. Click the search collection that you want to update. For example: Default Search Collection. Start the Digital Experience search collection crawler service for each content collection source: Notes: If the documents are not stored in the search collection but a schedule is defined for the crawler, then the crawler automatically runs at the scheduled time. You can also start the crawler manually. If the documents are already collected, then select Regather documents to update the documents with the new context root information. Click Collections from All Services in the breadcrumb trail and select the next search collection to modify. Optional step: From the Web Content interface of Practitioner Studio, update the Web Content Manager syndicator and subscriber servers that reference your modified DX Container site URL. If you do not use syndication, skip this step. Log on to the site that syndicates to this instance. Open the Syndicators page. Click the edit icon by the syndicator that you want to edit. Update the URL with the new context root information. Log on to the site that subscribes to this instance. Open the Subscribers page. Click the edit icon of the subscriber that you want to edit. Update the URL with the new context root information. Configure no context root in your Digital Experience container deployment To configure no context root, update the following property values. For example: ```","title":"Additional Considerations and Example:"},{"location":"containerization/t_customize_dx_url/#path_2","text":"dx.path.contextroot: \" \" dx.path.home: \" \" dx.path.personalized: mydx dx.ready.path: / dx.live.path: / ``` Note: If the context root is removed, the home path must be removed as well. It may take more time than usual for the DX-Core pod to get to a running state during the update process. Before log in (no context root): https://dx-cr-demo-service-dx-cr-01-dx-cr-01.apps.sample.domain.net/!ut/p/z1/04_Sj9CPykssy0xPLMnMz0vMAfljo8ziDVCAo4FTkJGTsYGBu7OJfjhYgbmHi7u7oYFhgL-bu4BoJmrt7e After log in (personalized context root): After log in (personalized context root): https://dx-cr-demo-service-dx-cr-01-dx-cr-01.apps.sample.domain.net/mydx/woodburnstudio/home/!ut/p/z1/04_Sj9CPykssy0xPLMnMz0vMAfljo8ziDVCAo4FTkJGTsYGBu7OJfjhYgbmHi7u7oYFhgL-bu4BoJmrt7e Important: Do not use the same value for the dx.path.home and dx.path.personalized properties. To apply the HCL Digital Experience custom URI during a new DX container deployment, run the following command: $ dxctl --deploy -p properties/full-deployment.properties To change the custom URI of a previous HCL DX 9.5 container deployment, update the property values as specified in step 1, and run the following command: $ dxctl --update -p properties/full-deployment.properties Parent topic: Customizing your container deployment","title":"Path"},{"location":"containerization/t_customize_dx_url_hybrid_deployment/","text":"Customizing the HCL DX URL for hybrid deployment HCL Digital Experience and Web Services for Remote Portlets are installed with a default URI or context root. This section describes how to change default URI or context root of the portal and hybrid deployment. Prerequisites Refer to the following topic documentation for hybrid deployment prerequisites: Hybrid deployment - Operator Hybrid Deployment - Helm Customize the context root of the portal and hybrid deployment The following steps refer to a current running state of the HCL DX Experience on-premise: Stop the HCL Digital Experience server. Navigate to wp_profile inside your portal installed location and run the following command: ./bin/stopServer.sh WebSphere_Portal -user <username> -password <password> For example: ./bin/stopServer.sh WebSphere_Portal -user wpsadmin -password wpsadmin Update context root in the config engine property files. Locate the wkplc.properties and wkplc_comp.properties files in the wp_profile/ConfigEngine/properties directory. For example: cd wp_profile/ConfigEngine/properties Edit wkplc.properties file in the wp_profile/ConfigEngine/properties directory and create a backup copy before you change any values. Enter the appropriate value for your environment in the WpsContextRoot property. For example: Property Default value New values for Context-root New values for No-context-root WpsContextRoot wps hcl Edit wkplc_comp.properties file in the wp_profile/ConfigEngine/properties directory and create backup copy before you change any values. Enter the appropriate value for your environment in the following properties: Property Default value New values for Context-root New values for No-context-root WpsContextRoot wsp/wsrp hcl/wsrp /wsrp WpsPersonalisedPath myportal mydx mydx WpsDefaultHome portal dx Save and close the file. Note: Do not enter the same value for WpsPersonalizedHome and WpsDefaultHome . Open a command prompt and change to the wp_profile/ConfigEngine directory. To change the context root for the values that you entered in the WpsContextRoot , WsrpContextRoot , WpsPersonalizedHome , and or WpsDefaultHome properties, run the below task: For AIX\u00ae, HP-UX, and Linux\u2122 Solaris: ./ConfigEngine.sh modify-servlet-path modify-servlet-path-portlets -DWasPassword=<password> -DPortalAdminPwd=<password> -DWpsContextRoot=<value> -DWpsDefaultHome=<value> -DWpsPersonalizedHome=<value> For Windows: ConfigEngine.bat modify-servlet-path modify-servlet-path-portlets -DWasPassword=<password> -DPortalAdminPwd=<password> -DWpsContextRoot=<value> -DWpsDefaultHome=<value> -DWpsPersonalizedHome=<value> For IBM i ConfigEngine.sh modify-servlet-path modify-servlet-path-portlets -DWasPassword=<password> -DPortalAdminPwd=<password> -DWpsContextRoot=<value> -DWpsDefaultHome=<value> -DWpsPersonalizedHome=<value> For z/OS: ./ConfigEngine.sh modify-servlet-path modify-servlet-path-portlets -DWasPassword=<password> -DPortalAdminPwd=<password> -DWpsContextRoot=<value> -DWpsDefaultHome=<value> -DWpsPersonalizedHome=<value> For example: ./ConfigEngine.sh modify-servlet-path modify-servlet-path-portlets -DWasPassword=wpsadmin -DPortalAdminPwd=wpsadmin -DWpsContextRoot=hcl -DWpsDefaultHome=dx -DWpsPersonalizedHome=mydx Note: Check the output for any error messages before you proceed with the next task. If any of the configuration tasks fail, verify the values in the wkplc.properties and wkplc_comp.properties files. Start the HCL Digital Experience server. Navigate to wp_profile inside your portal installed location and run below command: ./bin/startServer.sh WebSphere_Portal -user <username> -password <password> For example: ./bin/startServer.sh WebSphere_Portal -user wpsadmin -password wpsadmin Now, access the portal with the changed context root. Follow these steps for hybrid deployment based on changed context root. Download the dxctl tool . Find to edit the hybrid-deployment.properties file located under hcl-dx-cloud-scripts/dxctl/properties directory. Put the values for the following properties based on the DX portal context root changes made in previous steps: dx.path.contextroot dx.path.personalized dx.path.home To change the other properties, refer to Step 2 of Enabling Hybrid Deployment support in the HCL Digital Experience 9.5 on-premises environment . Note: When updating deployment, set the following properties if DX context root is configured in your existing deployment: Property Values for context-root Values for no context-root dx.path.contextroot hcl dx.path.personalized mydx mydx dx.path.home dx Once the hybrid-deployment.properties file is ready, process the deployment by following below command: ./os/dxctl --deploy -p ./properties/hybrid-deployment.properties For example: Once hybrid deployment is successful, then DAM and CC from the DX portal. Note: Make sure DAM and CC are enabled and the correct on-prem host is configured under Manage Pages . If DAM and CC are not enabled, refer to Step 2 of Enabling Hybrid Deployment support in the HCL Digital Experience 9.5 on-premises environment . Now, access HCL DX with no context root. Refer to Ste 5-e for hybrid deployment and update the below properties in the hybrid-deployment.properties file as per no context root changes for DX portal. Once the deployment is successful, update the DAM and CC path from Site Management > Manage Pages in DX Portal. Now, access DAM and CC in DX Portal. Parent topic: Digital Experience on containerized platforms","title":"Customizing the HCL DX URL for hybrid deployment"},{"location":"containerization/t_customize_dx_url_hybrid_deployment/#customizing-the-hcl-dx-url-for-hybrid-deployment","text":"HCL Digital Experience and Web Services for Remote Portlets are installed with a default URI or context root. This section describes how to change default URI or context root of the portal and hybrid deployment.","title":"Customizing the HCL DX URL for hybrid deployment"},{"location":"containerization/t_customize_dx_url_hybrid_deployment/#prerequisites","text":"Refer to the following topic documentation for hybrid deployment prerequisites: Hybrid deployment - Operator Hybrid Deployment - Helm","title":"Prerequisites"},{"location":"containerization/t_customize_dx_url_hybrid_deployment/#customize-the-context-root-of-the-portal-and-hybrid-deployment","text":"The following steps refer to a current running state of the HCL DX Experience on-premise: Stop the HCL Digital Experience server. Navigate to wp_profile inside your portal installed location and run the following command: ./bin/stopServer.sh WebSphere_Portal -user <username> -password <password> For example: ./bin/stopServer.sh WebSphere_Portal -user wpsadmin -password wpsadmin Update context root in the config engine property files. Locate the wkplc.properties and wkplc_comp.properties files in the wp_profile/ConfigEngine/properties directory. For example: cd wp_profile/ConfigEngine/properties Edit wkplc.properties file in the wp_profile/ConfigEngine/properties directory and create a backup copy before you change any values. Enter the appropriate value for your environment in the WpsContextRoot property. For example: Property Default value New values for Context-root New values for No-context-root WpsContextRoot wps hcl Edit wkplc_comp.properties file in the wp_profile/ConfigEngine/properties directory and create backup copy before you change any values. Enter the appropriate value for your environment in the following properties: Property Default value New values for Context-root New values for No-context-root WpsContextRoot wsp/wsrp hcl/wsrp /wsrp WpsPersonalisedPath myportal mydx mydx WpsDefaultHome portal dx Save and close the file. Note: Do not enter the same value for WpsPersonalizedHome and WpsDefaultHome . Open a command prompt and change to the wp_profile/ConfigEngine directory. To change the context root for the values that you entered in the WpsContextRoot , WsrpContextRoot , WpsPersonalizedHome , and or WpsDefaultHome properties, run the below task: For AIX\u00ae, HP-UX, and Linux\u2122 Solaris: ./ConfigEngine.sh modify-servlet-path modify-servlet-path-portlets -DWasPassword=<password> -DPortalAdminPwd=<password> -DWpsContextRoot=<value> -DWpsDefaultHome=<value> -DWpsPersonalizedHome=<value> For Windows: ConfigEngine.bat modify-servlet-path modify-servlet-path-portlets -DWasPassword=<password> -DPortalAdminPwd=<password> -DWpsContextRoot=<value> -DWpsDefaultHome=<value> -DWpsPersonalizedHome=<value> For IBM i ConfigEngine.sh modify-servlet-path modify-servlet-path-portlets -DWasPassword=<password> -DPortalAdminPwd=<password> -DWpsContextRoot=<value> -DWpsDefaultHome=<value> -DWpsPersonalizedHome=<value> For z/OS: ./ConfigEngine.sh modify-servlet-path modify-servlet-path-portlets -DWasPassword=<password> -DPortalAdminPwd=<password> -DWpsContextRoot=<value> -DWpsDefaultHome=<value> -DWpsPersonalizedHome=<value> For example: ./ConfigEngine.sh modify-servlet-path modify-servlet-path-portlets -DWasPassword=wpsadmin -DPortalAdminPwd=wpsadmin -DWpsContextRoot=hcl -DWpsDefaultHome=dx -DWpsPersonalizedHome=mydx Note: Check the output for any error messages before you proceed with the next task. If any of the configuration tasks fail, verify the values in the wkplc.properties and wkplc_comp.properties files. Start the HCL Digital Experience server. Navigate to wp_profile inside your portal installed location and run below command: ./bin/startServer.sh WebSphere_Portal -user <username> -password <password> For example: ./bin/startServer.sh WebSphere_Portal -user wpsadmin -password wpsadmin Now, access the portal with the changed context root. Follow these steps for hybrid deployment based on changed context root. Download the dxctl tool . Find to edit the hybrid-deployment.properties file located under hcl-dx-cloud-scripts/dxctl/properties directory. Put the values for the following properties based on the DX portal context root changes made in previous steps: dx.path.contextroot dx.path.personalized dx.path.home To change the other properties, refer to Step 2 of Enabling Hybrid Deployment support in the HCL Digital Experience 9.5 on-premises environment . Note: When updating deployment, set the following properties if DX context root is configured in your existing deployment: Property Values for context-root Values for no context-root dx.path.contextroot hcl dx.path.personalized mydx mydx dx.path.home dx Once the hybrid-deployment.properties file is ready, process the deployment by following below command: ./os/dxctl --deploy -p ./properties/hybrid-deployment.properties For example: Once hybrid deployment is successful, then DAM and CC from the DX portal. Note: Make sure DAM and CC are enabled and the correct on-prem host is configured under Manage Pages . If DAM and CC are not enabled, refer to Step 2 of Enabling Hybrid Deployment support in the HCL Digital Experience 9.5 on-premises environment . Now, access HCL DX with no context root. Refer to Ste 5-e for hybrid deployment and update the below properties in the hybrid-deployment.properties file as per no context root changes for DX portal. Once the deployment is successful, update the DAM and CC path from Site Management > Manage Pages in DX Portal. Now, access DAM and CC in DX Portal. Parent topic: Digital Experience on containerized platforms","title":"Customize the context root of the portal and hybrid deployment"},{"location":"containerization/themes/","text":"Themes This topic provides information about the deployment and undeployment of themes artifacts. Deploy theme The deploy-theme command is used to deploy a theme (EAR and WebDAV based) from a source client or server environment to a target HCL DX 9.5 CF192 or later server using the provided theme registration XML file, deployable EAR file, and WebDAV theme collection. Required files Theme Registration XML file: This XML file is required to register the theme into DX Server. Theme deployable EAR file: This EAR file containing theme data is used for deploying into the WebSphere Application Server. WebDAV theme collection: The theme collection folder/zip is used to create or update the collection in WebDAV file store of the DX Server. Notes: This command can execute below one or more tasks together: Theme Registration Theme EAR deployment WebDAV theme collection Command dxclient deploy-theme -xmlFile <path> -applicationFile <path> -applicationName <application name> -themeName <theme collection name> -themePath <folder/zip path of theme collection> Help command This command shows the help document on the deploy-theme command usage: dxclient deploy-theme -h Common Command options Use this attribute to specify the protocol with which to connect to the DX server ( wp_profile ): -dxProtocol <value> Use this attribute to specify the hostname of the target DX server: -hostname <value> Use this attribute to specify the port on which to connect to the DX server ( wp_profile ): -dxPort <value> Use this attribute to specify the username to authenticate with the DX server ( wp_profile ): -dxUsername <value> Use this attribute to specify the password for the user in the dxUsername attribute: -dxPassword <value> Use this attribute and re-trigger the command to check the status of any previous request that was incomplete. -requestId <Unique ID of a previously triggered deploy theme request> Required options for Theme Registration Use this attribute to specify the local path to the theme registration XML file: -xmlFile <Absolute or relative path to theme registration xml input file> Use this attribute to specify the path to DX configuration endpoint (for example, /wps/config): -xmlConfigPath <value> Note: For theme registration, a backup of the complete DX configuration export (not including users) is taken and placed in store/outputFiles/themes/backup/foldername folder. Required options for Theme EAR deployment Use this attribute to specify the Configuration Wizard Console port number: -dxConnectPort <value> Use this attribute to specify the config wizard home (change to the appropriate route in the case of an OpenShift Kubernetes Environment, otherwise the value is typically the same as the hostname) that is required for authenticating with the DXConnect application: -dxConnectHostname <value> Use this attribute to specify the Configuration Wizard Administrator username that is required for authenticating with the DXConnect application: -dxConnectUsername <value> Use this attribute to specify the Configuration Wizard Administrator password that is required for authenticating with the DXConnect application: -dxConnectPassword <value> Use this attribute to specify Soap port of the DX server: -dxSoapPort <Soap port of the DX server> Specify either the dxProfileName or dxProfilePath of the DX core server: Use this attribute to specify the profile name of the DX core server (for example: wp_profile ): -dxProfileName <Profile name of the DX core server> OR Use this attribute to specify the profile path of the DX server (for example: /opt/HCL/wp_profile ): -dxProfilePath <Path of the DX core server profile> Use this attribute to specify the theme EAR file path that is required while executing the deploy theme task: \u2013applicationFile <Absolute or relative path to deployable theme ear file> Use this attribute to specify the theme application name: -applicationName <value> Required options for creating/updating WebDAV theme collection Use this attribute to specify the theme name of the collection created under WebDAV server in DX: -themeName <value> Use this attribute to specify the theme file path that contains all static files to be pushed into DX theme, it accepts either folder or zip file path of the WebDAV theme collection: -themePath <value> Use this attribute to specify the path to the contenthandler servlet on the DX server (e.g. /wps/mycontenthandler): -contenthandlerPath <value> Notes: For new WebDAV theme collection, DXClient tool adds the provided collection (folder/zip) to the WebDAV file store. For existing WebDAV theme collection, the existing theme collection is replaced by the provided theme collection during the update. To get the latest theme collection from the DX server, see Exporting content from the filestore and make modifications on the same folder to get it updated in the DX Server WebDAV file store. For WebDAV theme collection update, a backup of the existing theme collection is taken and placed in store/outputFiles/themes/backup/foldername folder. Log files from command execution can be found in the logs directory of the DXClient installation. Example: dxclient deploy-theme -dxProtocol <http/https> -hostname <host-name> -dxPort <dxPort> -xmlConfigPath <xmlConfigPath> -dxUsername <dxUsername> -dxPassword <dxPassword> -dxSoapPort <dxSoapPort> -dxConnectHostname <hostname> -dxConnectPort <dxConnectPort> -dxConnectUsername <dxConnectUsername> -dxConnectPassword <dxConnectPassword> -xmlFile <xml-file-with-path> -applicationFile <application-file-with-path> -applicationName <application name> -themeName <theme-name> -themePath <theme-path> -dxProfileName <Profile name of the DX core server> Undeploy theme The undeploy-theme command can be used to undeploy a theme, including the EAR application and WebDAV files, and it also unregisters the registered theme from the target DX server. Note: If enableBackup is set to true, then undeploy-theme takes a backup of the deployed EAR theme, WebDAV theme collection, and completes DX configuration export (without users) and place it in the backup folder. When the user is downloading EAR, WeDAV, and XML to backup, we must separate it by the folder names store/outputFiles/themes/backup/foldername . The backup of EAR is placed in store/outputFiles/themes/backup/application . Users can restore the theme by using the backup files. Note: Pages might lose the applied theme references in the restored themes. Command description This command invokes the undeploy-theme tool inside the DXClient. This command uses the unregistered theme XML file, theme EAR application name and WebDAV theme collection name, and executes the undeploy theme task. ``` dxclient undeploy-theme ``` Help command This command shows the help document on the undeploy-theme command usage: dxclient undeploy-theme -h Required files Theme Unregistration XML file: This XML file is required to unregister the theme from target DX Server and must contain the details of the theme. The XML file must be provided when executing the undeploy theme task. This command can execute one or more of the following tasks at the same time: Theme unregistration Undeploy theme EAR application Undeploy WebDAV theme collection Common commands Use this attribute to specify the hostname of the target server -hostname <value> Use this attribute to specify the protocol with which to connect to the server -dxProtocol <value> Use this attribute to specify the port on which to connect to the server (for Kubernetes Environment, dxPort is 443 ) -dxPort <value> Use this attribute to specify the username that is required for server authentication -dxUsername <value> Use this attribute to specify the password that is required for server authentication -dxPassword <value> Use this attribute to specify the path to the contenthandler servlet on the DX server (e.g. /wps/mycontenthandler) -contenthandlerPath <value> Use this attribute to take the backup before undeploying theme -enableBackup <value> Note: User can set the enableBackup parameter as true to take backup before undeploying theme. The value is set to false by default. The options passed through command line override the default values. Required options for Theme Unregistration: Use this attribute to specify the theme registration xml file that is used while executing the undeploy theme task. For example, see the Theme-registration.xml file in the directory dxclient/samples/ -xmlFile <xml file name with absolute path of the xmlaccess input file> Use this attribute to specify the path to DX configuration endpoint -xmlConfigPath <value> Required options for undeploying theme EAR application: Use this attribute to specify the configuration wizard home (change of route is only in case of Open Shift Kubernetes Enviornment, otherwise the route remains the same as hostname) that is required for authenticating to the cw_profile -dxConnectHostname <value> Use this attribute to specify the port number of the cw_profile (for Kubernetes Environment dxConnectPort is 443) -dxConnectPort <value> Use this attribute to specify the username that is required for authenticating to the cw_profile -dxConnectUsername <value> Use this attribute to specify the password that is required for authenticating to the cw_profile -dxConnectPassword <value> Use this attribute to specify Soap port of the DX server -dxSoapPort <Soap port of the DX server> Specify either the dxProfileName or dxProfilePath of the DX core server: Use this attribute to specify the profile name of the DX core server (for example: wp_profile ): -dxProfileName <Profile name of the DX core server> OR Use this attribute to specify the profile path of the DX server (for example: /opt/HCL/wp_profile ): -dxProfilePath <Path of the DX core server profile> Use this attribute to specify the EAR application name -applicationName <value> Required options for undeploying WebDAV theme collection: Use this attribute to specify the theme name of the collection created under WebDAV -themeName <value> Example: dxclient undeploy-theme -dxProtocol <http/https> -hostname <host-name> -dxPort <dxPort> -dxUsername <dxUsername> -dxPassword <dxPassword> -dxSoapPort <dxSoapPort> -dxConnectHostname <hostname> -dxConnectPort <dxConnectPort> -dxConnectUsername <dxConnectUsername> -dxConnectPassword <dxConnectPassword> -xmlFile <xml-file-with-path> -applicationName <application name> -themeName <theme-name> -enableBackup <enable-backup> -dxProfileName <Profile name of the DX core server profile> Parent topic: DXClient Artifact Types","title":"Themes"},{"location":"containerization/themes/#themes","text":"This topic provides information about the deployment and undeployment of themes artifacts.","title":"Themes"},{"location":"containerization/themes/#deploy-theme","text":"The deploy-theme command is used to deploy a theme (EAR and WebDAV based) from a source client or server environment to a target HCL DX 9.5 CF192 or later server using the provided theme registration XML file, deployable EAR file, and WebDAV theme collection. Required files Theme Registration XML file: This XML file is required to register the theme into DX Server. Theme deployable EAR file: This EAR file containing theme data is used for deploying into the WebSphere Application Server. WebDAV theme collection: The theme collection folder/zip is used to create or update the collection in WebDAV file store of the DX Server. Notes: This command can execute below one or more tasks together: Theme Registration Theme EAR deployment WebDAV theme collection Command dxclient deploy-theme -xmlFile <path> -applicationFile <path> -applicationName <application name> -themeName <theme collection name> -themePath <folder/zip path of theme collection> Help command This command shows the help document on the deploy-theme command usage: dxclient deploy-theme -h Common Command options Use this attribute to specify the protocol with which to connect to the DX server ( wp_profile ): -dxProtocol <value> Use this attribute to specify the hostname of the target DX server: -hostname <value> Use this attribute to specify the port on which to connect to the DX server ( wp_profile ): -dxPort <value> Use this attribute to specify the username to authenticate with the DX server ( wp_profile ): -dxUsername <value> Use this attribute to specify the password for the user in the dxUsername attribute: -dxPassword <value> Use this attribute and re-trigger the command to check the status of any previous request that was incomplete. -requestId <Unique ID of a previously triggered deploy theme request> Required options for Theme Registration Use this attribute to specify the local path to the theme registration XML file: -xmlFile <Absolute or relative path to theme registration xml input file> Use this attribute to specify the path to DX configuration endpoint (for example, /wps/config): -xmlConfigPath <value> Note: For theme registration, a backup of the complete DX configuration export (not including users) is taken and placed in store/outputFiles/themes/backup/foldername folder. Required options for Theme EAR deployment Use this attribute to specify the Configuration Wizard Console port number: -dxConnectPort <value> Use this attribute to specify the config wizard home (change to the appropriate route in the case of an OpenShift Kubernetes Environment, otherwise the value is typically the same as the hostname) that is required for authenticating with the DXConnect application: -dxConnectHostname <value> Use this attribute to specify the Configuration Wizard Administrator username that is required for authenticating with the DXConnect application: -dxConnectUsername <value> Use this attribute to specify the Configuration Wizard Administrator password that is required for authenticating with the DXConnect application: -dxConnectPassword <value> Use this attribute to specify Soap port of the DX server: -dxSoapPort <Soap port of the DX server> Specify either the dxProfileName or dxProfilePath of the DX core server: Use this attribute to specify the profile name of the DX core server (for example: wp_profile ): -dxProfileName <Profile name of the DX core server> OR Use this attribute to specify the profile path of the DX server (for example: /opt/HCL/wp_profile ): -dxProfilePath <Path of the DX core server profile> Use this attribute to specify the theme EAR file path that is required while executing the deploy theme task: \u2013applicationFile <Absolute or relative path to deployable theme ear file> Use this attribute to specify the theme application name: -applicationName <value> Required options for creating/updating WebDAV theme collection Use this attribute to specify the theme name of the collection created under WebDAV server in DX: -themeName <value> Use this attribute to specify the theme file path that contains all static files to be pushed into DX theme, it accepts either folder or zip file path of the WebDAV theme collection: -themePath <value> Use this attribute to specify the path to the contenthandler servlet on the DX server (e.g. /wps/mycontenthandler): -contenthandlerPath <value> Notes: For new WebDAV theme collection, DXClient tool adds the provided collection (folder/zip) to the WebDAV file store. For existing WebDAV theme collection, the existing theme collection is replaced by the provided theme collection during the update. To get the latest theme collection from the DX server, see Exporting content from the filestore and make modifications on the same folder to get it updated in the DX Server WebDAV file store. For WebDAV theme collection update, a backup of the existing theme collection is taken and placed in store/outputFiles/themes/backup/foldername folder. Log files from command execution can be found in the logs directory of the DXClient installation. Example: dxclient deploy-theme -dxProtocol <http/https> -hostname <host-name> -dxPort <dxPort> -xmlConfigPath <xmlConfigPath> -dxUsername <dxUsername> -dxPassword <dxPassword> -dxSoapPort <dxSoapPort> -dxConnectHostname <hostname> -dxConnectPort <dxConnectPort> -dxConnectUsername <dxConnectUsername> -dxConnectPassword <dxConnectPassword> -xmlFile <xml-file-with-path> -applicationFile <application-file-with-path> -applicationName <application name> -themeName <theme-name> -themePath <theme-path> -dxProfileName <Profile name of the DX core server>","title":"Deploy theme"},{"location":"containerization/themes/#undeploy-theme","text":"The undeploy-theme command can be used to undeploy a theme, including the EAR application and WebDAV files, and it also unregisters the registered theme from the target DX server. Note: If enableBackup is set to true, then undeploy-theme takes a backup of the deployed EAR theme, WebDAV theme collection, and completes DX configuration export (without users) and place it in the backup folder. When the user is downloading EAR, WeDAV, and XML to backup, we must separate it by the folder names store/outputFiles/themes/backup/foldername . The backup of EAR is placed in store/outputFiles/themes/backup/application . Users can restore the theme by using the backup files. Note: Pages might lose the applied theme references in the restored themes. Command description This command invokes the undeploy-theme tool inside the DXClient. This command uses the unregistered theme XML file, theme EAR application name and WebDAV theme collection name, and executes the undeploy theme task. ``` dxclient undeploy-theme ``` Help command This command shows the help document on the undeploy-theme command usage: dxclient undeploy-theme -h Required files Theme Unregistration XML file: This XML file is required to unregister the theme from target DX Server and must contain the details of the theme. The XML file must be provided when executing the undeploy theme task. This command can execute one or more of the following tasks at the same time: Theme unregistration Undeploy theme EAR application Undeploy WebDAV theme collection Common commands Use this attribute to specify the hostname of the target server -hostname <value> Use this attribute to specify the protocol with which to connect to the server -dxProtocol <value> Use this attribute to specify the port on which to connect to the server (for Kubernetes Environment, dxPort is 443 ) -dxPort <value> Use this attribute to specify the username that is required for server authentication -dxUsername <value> Use this attribute to specify the password that is required for server authentication -dxPassword <value> Use this attribute to specify the path to the contenthandler servlet on the DX server (e.g. /wps/mycontenthandler) -contenthandlerPath <value> Use this attribute to take the backup before undeploying theme -enableBackup <value> Note: User can set the enableBackup parameter as true to take backup before undeploying theme. The value is set to false by default. The options passed through command line override the default values. Required options for Theme Unregistration: Use this attribute to specify the theme registration xml file that is used while executing the undeploy theme task. For example, see the Theme-registration.xml file in the directory dxclient/samples/ -xmlFile <xml file name with absolute path of the xmlaccess input file> Use this attribute to specify the path to DX configuration endpoint -xmlConfigPath <value> Required options for undeploying theme EAR application: Use this attribute to specify the configuration wizard home (change of route is only in case of Open Shift Kubernetes Enviornment, otherwise the route remains the same as hostname) that is required for authenticating to the cw_profile -dxConnectHostname <value> Use this attribute to specify the port number of the cw_profile (for Kubernetes Environment dxConnectPort is 443) -dxConnectPort <value> Use this attribute to specify the username that is required for authenticating to the cw_profile -dxConnectUsername <value> Use this attribute to specify the password that is required for authenticating to the cw_profile -dxConnectPassword <value> Use this attribute to specify Soap port of the DX server -dxSoapPort <Soap port of the DX server> Specify either the dxProfileName or dxProfilePath of the DX core server: Use this attribute to specify the profile name of the DX core server (for example: wp_profile ): -dxProfileName <Profile name of the DX core server> OR Use this attribute to specify the profile path of the DX server (for example: /opt/HCL/wp_profile ): -dxProfilePath <Path of the DX core server profile> Use this attribute to specify the EAR application name -applicationName <value> Required options for undeploying WebDAV theme collection: Use this attribute to specify the theme name of the collection created under WebDAV -themeName <value> Example: dxclient undeploy-theme -dxProtocol <http/https> -hostname <host-name> -dxPort <dxPort> -dxUsername <dxUsername> -dxPassword <dxPassword> -dxSoapPort <dxSoapPort> -dxConnectHostname <hostname> -dxConnectPort <dxConnectPort> -dxConnectUsername <dxConnectUsername> -dxConnectPassword <dxConnectPassword> -xmlFile <xml-file-with-path> -applicationName <application name> -themeName <theme-name> -enableBackup <enable-backup> -dxProfileName <Profile name of the DX core server profile> Parent topic: DXClient Artifact Types","title":"Undeploy theme"},{"location":"containerization/troubleshooting/","text":"Troubleshooting cloud container Containers This section lists the basics of troubleshooting the containerized image or your deployment. If the issue is suspected to be specific to the containerized image or deployment, please collect the following information. Otherwise, please follow the standard Mustgather for the reported problem. General Provide the proper context regarding the issue. What is failing? What events occurred leading up to the failure? What are the expected results if unclear? Include error messages, logs, screen captures, and other information that may help describe the problem. Include the results of ' docker inspect *IMAGEID* '. Kubernetes Include the following information: ``` kubectl version - ``` kubectl get nodes - ``` kubectl describe customresourcedefinitions - ``` kubectl describe DxDeployment -n <your_namespace> - ``` kubectl api-resources - ``` kubectl api-versions - Command or procedure used for deployment. **Note:** See the section for the recommended deployment method, [Deploy HCL Digital Experience 9.5 Container to Amazon EKS](kubernetes_eks.md). - The files generated at the time of the deployment and documented at the end of the section on [Understanding the HCL 9.5 Container deployment on Amazon Elastic Kubernetes Service](understanding_kubernetes_eks_deployment.md). OpenShift Include the following information: ``` oc version - ``` oc get nodes - ``` oc describe customresourcedefinitions - ``` oc describe DxDeployment -n <your_namespace> - To set project: ``` oc project <your_namespace> ``` - ``` oc api-resources - ``` oc api-versions - Command or procedure used for deployment. **Note:** See the section for the recommended deployment method, [Red Hat OpenShift](openshift.md). - The files generated at the time of the deployment and documented at the end of the section on [Understanding the OpenShift deployment](understanding_openshift_deployment.md). Docker What is the version of the Docker engine? What is the operating system? What is the exact command used to start (or attempt to start) the container? Include results of docker images . Include results of docker ps -a Issue Solution - Out of memory |Ensure that the memory request and the limit defined in the custom resource are high enough for the specified heap size in the Portal configuration| |- DX pod will not start - Unschedulable pods - Pod has unbound immediate PersistentVolumeClaims |Ensure that the specified volume exists, and meets the deployment requirements. To reuse a volume, see the Delete topic.| Logging and tracing for HCL Digital Experience Containers and services - Access the tracing options that can be used to capture logging and tracing for HCL Digital Experience (DX) 9.5 container based services with container update CF181 and higher releases. Parent topic: Operator-based deployment","title":"Troubleshooting cloud container Containers"},{"location":"containerization/troubleshooting/#troubleshooting-cloud-container-containers","text":"This section lists the basics of troubleshooting the containerized image or your deployment. If the issue is suspected to be specific to the containerized image or deployment, please collect the following information. Otherwise, please follow the standard Mustgather for the reported problem. General Provide the proper context regarding the issue. What is failing? What events occurred leading up to the failure? What are the expected results if unclear? Include error messages, logs, screen captures, and other information that may help describe the problem. Include the results of ' docker inspect *IMAGEID* '. Kubernetes Include the following information: ``` kubectl version - ``` kubectl get nodes - ``` kubectl describe customresourcedefinitions - ``` kubectl describe DxDeployment -n <your_namespace> - ``` kubectl api-resources - ``` kubectl api-versions - Command or procedure used for deployment. **Note:** See the section for the recommended deployment method, [Deploy HCL Digital Experience 9.5 Container to Amazon EKS](kubernetes_eks.md). - The files generated at the time of the deployment and documented at the end of the section on [Understanding the HCL 9.5 Container deployment on Amazon Elastic Kubernetes Service](understanding_kubernetes_eks_deployment.md). OpenShift Include the following information: ``` oc version - ``` oc get nodes - ``` oc describe customresourcedefinitions - ``` oc describe DxDeployment -n <your_namespace> - To set project: ``` oc project <your_namespace> ``` - ``` oc api-resources - ``` oc api-versions - Command or procedure used for deployment. **Note:** See the section for the recommended deployment method, [Red Hat OpenShift](openshift.md). - The files generated at the time of the deployment and documented at the end of the section on [Understanding the OpenShift deployment](understanding_openshift_deployment.md). Docker What is the version of the Docker engine? What is the operating system? What is the exact command used to start (or attempt to start) the container? Include results of docker images . Include results of docker ps -a Issue Solution - Out of memory |Ensure that the memory request and the limit defined in the custom resource are high enough for the specified heap size in the Portal configuration| |- DX pod will not start - Unschedulable pods - Pod has unbound immediate PersistentVolumeClaims |Ensure that the specified volume exists, and meets the deployment requirements. To reuse a volume, see the Delete topic.| Logging and tracing for HCL Digital Experience Containers and services - Access the tracing options that can be used to capture logging and tracing for HCL Digital Experience (DX) 9.5 container based services with container update CF181 and higher releases. Parent topic: Operator-based deployment","title":"Troubleshooting cloud container Containers"},{"location":"containerization/troubleshooting_dxclient/","text":"Troubleshooting DXClient Logs can be enabled and disabled as desired by DX developers and administrators through configuration options in the config.json file of DXClient. The log files can be viewed inside the logs folder within the DXClient installation folder. Enable or disable logs Enable logger The DXClient tool Logs can be enabled by setting the parameter enableLogger: true in the config.json file. Disable logger The DXClient tool Logs can be disabled by setting the parameter enableLogger: false in the config.json file. Parent topic: Deploy DX components using HCL DXClient and DXConnect","title":"Troubleshooting DXClient"},{"location":"containerization/troubleshooting_dxclient/#troubleshooting-dxclient","text":"Logs can be enabled and disabled as desired by DX developers and administrators through configuration options in the config.json file of DXClient. The log files can be viewed inside the logs folder within the DXClient installation folder.","title":"Troubleshooting DXClient"},{"location":"containerization/troubleshooting_dxclient/#enable-or-disable-logs","text":"Enable logger The DXClient tool Logs can be enabled by setting the parameter enableLogger: true in the config.json file. Disable logger The DXClient tool Logs can be disabled by setting the parameter enableLogger: false in the config.json file. Parent topic: Deploy DX components using HCL DXClient and DXConnect","title":"Enable or disable logs"},{"location":"containerization/understanding_kubernetes_eks_deployment/","text":"Understanding the HCL DX 9.5 container deployment on Amazon EKS This section describes the output and artifacts created when deploying HCL Digital Experience 9.5 container release in on Amazon Elastic Kubernetes Service (EKS). Note: All modifications must be done on the custom resource instance and not the individual pieces of the deployment. See Customizing the Kubernetes deployment for details. Deploy with the following command: ./scripts/deployDx.sh dx14 1 AWS_OWNER_ID.dkr.ecr.us-east-2.amazonaws.com dxen v95_CF184_20200916-2009 dxh1-dam dx deploy-stg derby ambassador 154 Results in the following output: Namespace: dx14 - REPLICAS: 1 - Repository: AWS_OWNER_ID.dkr.ecr.us-east-2.amazonaws.com - Image Name: dxen - Image Tag: v95_CF184_20200916-2009 - Volume Name: dxh1-dam - Storage Class Name: dx-deploy-stg - Database Type: derby - namespace/awseks-demo created serviceaccount/hcldx-cloud-operator created role.rbac.authorization.k8s.io/hcldx-cloud-operator created rolebinding.rbac.authorization.k8s.io/hcldx-cloud-operator created deployment.apps/hcldx-cloud-operator created dxdeployment.git.cwp.pnp-hcl.com/dx-deployment created The following artifacts are created during deployment: Artifacts Project/Namespace The Project / Namespace gets created if it does not already exist. The Kubernetes Dashboard can be installed on your local using the following link: https://kubernetes.io/docs/tasks/access-application-cluster/web-ui-dashboard/ kubectl get namespaces Service Account Service Accounts for the operator and ambassador deployments. kubectl get serviceaccounts -n dx14 Role A Role that defines the access required by the operator. kubectl get role -n dx14 For more detailed information, use the describe command. Role Binding A Role Binding that binds the operator service account to the operator role. kubectl describe rolebinding -n dx14 Deployment A Deployment that defines/describes the operator Replica Set. kubectl get deployment -n dx14 Replica Sets Replica Sets based on the deployments of the ambassador and the operator, that maintains a stable set of replica pods. kubectl get replicaset -n dx14 Metrics and Services Services expose HCL Digital Experience running as part of the Stateful Set and provide metrics for the operator created. kubectl get service -n dx14 Secrets There are several secrets that are created. kubectl get secrets -n dx14 kubectl describe secret dx-deployment-wps -n dx14 Kubernetes command to update existing secrets: kubectl edit secret dx-deployment-wps -n dx14 Use base64 encoded values when updating secrets. Most Linux operating systems will allow you to generate base64 values with this command: echo 'wpsadmin' | base64 Config Map A Config Map is created to handle clustering in scenarios where multiple operators are deployed. kubectl get configmap -n dx14 Persistent Volume Claims One or more Persistent Volume Claims are created, one for the shared profile, and another, if configured, for the logs of each pod. kubectl get pvc -n dx14 Stateful Set A Stateful Set is created for the HCL Digital Experience core. A Stateful Set manages pods that are based on an identical container specification. kubectl get statefulset -n dx14 Pods Pods are part of the Stateful Set, running HCL Portal. kubectl get pods -l app=dx-deployment -n dx14' (limits to pods in the StatefulSetSpec) kubectl get pods -n dx14 Ambassador To expose the DX server, HCL is leveraging Ambassador . Ambassador is deployed and configured by default. There are many artifacts included. Custom resources that help define Ambassador: AuthService , ConsulResolver , KubernetesEndpointResolver , KubernetesServiceResolver , Mapping , Module , RateLimitService , TCPMapping , TLSContext , TracingService . Ambassador deployment Ambassador replica set Ambassador pods (by default, 3) Ambassador service and Ambassador admin service An instance of TLS context kubectl describe TLSContext -n dx14 Mapping An instance of Mapping for each target: DX Home Secure, WAS Home Secure, etc. kubectl get mapping -n dx14 Extras There are several files created for each deployment. It is recommended to keep these files. File 1 dxNameSpace_NAMESPACE.yaml can be used to delete the namespace / project if needed. File 2 git_v1_dxdeployment_cr_NAMESPACE.yaml is a representation of the last deployed deployment for the given namespace / project . Note: With multiple instances of Digital Experience 9.5 containers writing to a shared Transaction log (tranlog) directory, there is a possibility of data corruption which could lead to DX server startup issues. To avoid this possibility, beginning with CF192, for each DX 9.5 instance the deployment creates an additional dynamic Persistent Volume (pv) and Persistent Volume Claim (pvc) to contain the tranlog data of the individual instances. Parent topic: Deploy DX Container to Amazon EKS","title":"Understanding the HCL DX 9.5 container deployment on Amazon EKS"},{"location":"containerization/understanding_kubernetes_eks_deployment/#understanding-the-hcl-dx-95-container-deployment-on-amazon-eks","text":"This section describes the output and artifacts created when deploying HCL Digital Experience 9.5 container release in on Amazon Elastic Kubernetes Service (EKS). Note: All modifications must be done on the custom resource instance and not the individual pieces of the deployment. See Customizing the Kubernetes deployment for details. Deploy with the following command: ./scripts/deployDx.sh dx14 1 AWS_OWNER_ID.dkr.ecr.us-east-2.amazonaws.com dxen v95_CF184_20200916-2009 dxh1-dam dx deploy-stg derby ambassador 154 Results in the following output: Namespace: dx14 - REPLICAS: 1 - Repository: AWS_OWNER_ID.dkr.ecr.us-east-2.amazonaws.com - Image Name: dxen - Image Tag: v95_CF184_20200916-2009 - Volume Name: dxh1-dam - Storage Class Name: dx-deploy-stg - Database Type: derby - namespace/awseks-demo created serviceaccount/hcldx-cloud-operator created role.rbac.authorization.k8s.io/hcldx-cloud-operator created rolebinding.rbac.authorization.k8s.io/hcldx-cloud-operator created deployment.apps/hcldx-cloud-operator created dxdeployment.git.cwp.pnp-hcl.com/dx-deployment created The following artifacts are created during deployment:","title":"Understanding the HCL DX 9.5 container deployment on Amazon EKS"},{"location":"containerization/understanding_kubernetes_eks_deployment/#artifacts","text":"Project/Namespace The Project / Namespace gets created if it does not already exist. The Kubernetes Dashboard can be installed on your local using the following link: https://kubernetes.io/docs/tasks/access-application-cluster/web-ui-dashboard/ kubectl get namespaces Service Account Service Accounts for the operator and ambassador deployments. kubectl get serviceaccounts -n dx14 Role A Role that defines the access required by the operator. kubectl get role -n dx14 For more detailed information, use the describe command. Role Binding A Role Binding that binds the operator service account to the operator role. kubectl describe rolebinding -n dx14 Deployment A Deployment that defines/describes the operator Replica Set. kubectl get deployment -n dx14 Replica Sets Replica Sets based on the deployments of the ambassador and the operator, that maintains a stable set of replica pods. kubectl get replicaset -n dx14 Metrics and Services Services expose HCL Digital Experience running as part of the Stateful Set and provide metrics for the operator created. kubectl get service -n dx14 Secrets There are several secrets that are created. kubectl get secrets -n dx14 kubectl describe secret dx-deployment-wps -n dx14 Kubernetes command to update existing secrets: kubectl edit secret dx-deployment-wps -n dx14 Use base64 encoded values when updating secrets. Most Linux operating systems will allow you to generate base64 values with this command: echo 'wpsadmin' | base64 Config Map A Config Map is created to handle clustering in scenarios where multiple operators are deployed. kubectl get configmap -n dx14 Persistent Volume Claims One or more Persistent Volume Claims are created, one for the shared profile, and another, if configured, for the logs of each pod. kubectl get pvc -n dx14 Stateful Set A Stateful Set is created for the HCL Digital Experience core. A Stateful Set manages pods that are based on an identical container specification. kubectl get statefulset -n dx14 Pods Pods are part of the Stateful Set, running HCL Portal. kubectl get pods -l app=dx-deployment -n dx14' (limits to pods in the StatefulSetSpec) kubectl get pods -n dx14 Ambassador To expose the DX server, HCL is leveraging Ambassador . Ambassador is deployed and configured by default. There are many artifacts included. Custom resources that help define Ambassador: AuthService , ConsulResolver , KubernetesEndpointResolver , KubernetesServiceResolver , Mapping , Module , RateLimitService , TCPMapping , TLSContext , TracingService . Ambassador deployment Ambassador replica set Ambassador pods (by default, 3) Ambassador service and Ambassador admin service An instance of TLS context kubectl describe TLSContext -n dx14 Mapping An instance of Mapping for each target: DX Home Secure, WAS Home Secure, etc. kubectl get mapping -n dx14 Extras There are several files created for each deployment. It is recommended to keep these files. File 1 dxNameSpace_NAMESPACE.yaml can be used to delete the namespace / project if needed. File 2 git_v1_dxdeployment_cr_NAMESPACE.yaml is a representation of the last deployed deployment for the given namespace / project . Note: With multiple instances of Digital Experience 9.5 containers writing to a shared Transaction log (tranlog) directory, there is a possibility of data corruption which could lead to DX server startup issues. To avoid this possibility, beginning with CF192, for each DX 9.5 instance the deployment creates an additional dynamic Persistent Volume (pv) and Persistent Volume Claim (pvc) to contain the tranlog data of the individual instances. Parent topic: Deploy DX Container to Amazon EKS","title":"Artifacts"},{"location":"containerization/understanding_openshift_deployment/","text":"Understanding the OpenShift deployment This section describes the output and artifacts created when deploying HCL Digital Experience 9.5 Docker images to Red Hat OpenShift. Note: All modifications must be done on the custom resource instance and not the individual pieces of the deployment. See Customizing the container deployment for details. Deploy with the following command: ./scripts/deployDx.sh your_namespace 1 your_repository dxen v95_CF184_20200916-2009 dxh1-dam dx deploy-stg derby Results in the following output: Namespace: your_namespace - REPLICAS: 1 - Repository: your_repository - Image Name: dxen - Image Tag: v95_CF184_20200916-2009 - Volume Name: dxh1-dam - Storage Class Name: dx-deploy-stg - Database Type: derby - namespace/your_namespace created serviceaccount/hcldx-cloud-operator created role.rbac.authorization.k8s.io/hcldx-cloud-operator created rolebinding.rbac.authorization.k8s.io/hcldx-cloud-operator created deployment.apps/hcldx-cloud-operator created dxdeployment.git.cwp.pnp-hcl.com/dx-deployment created The following artifacts are created during deployment: Artifacts Note: Before executing OpenShift CLI, we need to set the project: oc project project_name Project/Namespace The Project / Namespace gets created if it does not already exist. Example Kubernetes command: kubectl get namespaces your_namespace Example OpenShift CLI command: oc get project your_namespace Note: dx-latest is the project name in this example. Service Account The operator is scoped to the same namespace as the project namespace. It is also possible to implement multiple DX 9.5 deployments in one namespace, sharing a single operator. Note: The Operator is used to deploy, configure, and manage the HCL DX9.5 deployment to Red Hat OpenShift. Consult the Red Hat OpenShift Operator documentation for more information. Example Kubernetes command: kubectl get serviceaccounts -n your_namespace Example OpenShift CLI command: oc get serviceaccount Role A Role that defines the access required by the operator. Example Kubernetes command: kubectl get role -n your_namespace Example OpenShift CLI command: oc get roles Role Binding A Role Binding that binds the operator service account to the operator role. Example Kubernetes command: kubectl get rolebinding -n your_namespace Example OpenShift CLI command: oc get rolebinding Deployment A Deployment that defines/describes the operator Replica Set. Example Kubernetes command: kubectl get deployment -n your_namespace Example OpenShift CLI command: oc get deployment Replica Sets A Replica Set based on the deployment. This maintains a stable set of replica pods. Example Kubernetes command: kubectl get replicaset -n your_namespace Example OpenShift CLI command: oc get replicasets Metrics and Services Services are created to expose HCL Digital Experience running as part of the Stateful Set and to provide metrics for the operator. Example Kubernetes command: kubectl get service -n your_namespace Example OpenShift CLI command: oc get service Secrets There are several secrets that are created. Example Kubernetes command: kubectl get secrets -n your_namespace Example OpenShift CLI command: oc get secret Example Kubernetes details command: kubectl describe secret dx-deployment-wps -n your_namespace Example Kubernetes update existing secrets command: kubectl edit secret dx-deployment-wps -n your_namespace Use double base64 encoded values when updating secrets. Most Linux operating systems will allow you to generate double base64 values with this command: echo 'wpsadmin' | base64 | base64 Config Map A Config Map is created to handle clustering in scenarios where multiple operators are deployed. Example Kubernetes command: kubectl get configmap -n your_namespace Example OpenShift CLI command: oc get configmap Persistent Volume Claims One or more Persistent Volume Claims are created, one for the shared profile, and another, if configured, for the logs of each pod. Example Kubernetes command: kubectl get pvc -n your_namespace Example OpenShift command: oc get pvc Note: Logs are shown when logging is configured. Stateful Set A Stateful Set is created for the HCL Digital Experience core. A Stateful Set manages pods that are based on an identical container specification. Example Kubernetes command: kubectl get statefulset -n your_namespace Example OpenShift CLI command: oc get statefulset Pods Pods are part of the Stateful Set, running HCL Portal. Example Kubernetes commands: kubectl get pods -n your_namespace kubectl get pods -l app=app_name -n your_namespace Example OpenShift CLI command: oc get pods oc get pods -l app=app_name Routes These are used to expose various ports in the HCL Digital Experience service, including those used to access HCL Portal, the WAS console, and the Config Wizard. Example Kubernetes command: kubectl get routes Example OpenShift CLI command: oc get routes Extras There are several files created for each deployment. It is recommended to keep these files. File 1 'dxNameSpace_NAMESPACE.yaml' can be used to delete the namespace / project if needed. File 2 'git_v1_dxdeployment_cr_NAMESPACE.yaml' is a representation of the last deployed deployment for the given namespace / project . Note: With multiple instances of Digital Experience 9.5 containers writing to a shared Transaction log (tranlog) directory, there is a possibility of data corruption which could lead to DX server startup issues. To avoid this possibility, beginning with CF192, for each DX 9.5 instance the deployment creates an additional dynamic Persistent Volume (pv) and Persistent Volume Claim (pvc) to contain the tranlog data of the individual instances. Parent topic: Deploy DX 9.5 Container to Red Hat OpenShift","title":"Understanding the OpenShift deployment"},{"location":"containerization/understanding_openshift_deployment/#understanding-the-openshift-deployment","text":"This section describes the output and artifacts created when deploying HCL Digital Experience 9.5 Docker images to Red Hat OpenShift. Note: All modifications must be done on the custom resource instance and not the individual pieces of the deployment. See Customizing the container deployment for details. Deploy with the following command: ./scripts/deployDx.sh your_namespace 1 your_repository dxen v95_CF184_20200916-2009 dxh1-dam dx deploy-stg derby Results in the following output: Namespace: your_namespace - REPLICAS: 1 - Repository: your_repository - Image Name: dxen - Image Tag: v95_CF184_20200916-2009 - Volume Name: dxh1-dam - Storage Class Name: dx-deploy-stg - Database Type: derby - namespace/your_namespace created serviceaccount/hcldx-cloud-operator created role.rbac.authorization.k8s.io/hcldx-cloud-operator created rolebinding.rbac.authorization.k8s.io/hcldx-cloud-operator created deployment.apps/hcldx-cloud-operator created dxdeployment.git.cwp.pnp-hcl.com/dx-deployment created The following artifacts are created during deployment:","title":"Understanding the OpenShift deployment"},{"location":"containerization/understanding_openshift_deployment/#artifacts","text":"Note: Before executing OpenShift CLI, we need to set the project: oc project project_name Project/Namespace The Project / Namespace gets created if it does not already exist. Example Kubernetes command: kubectl get namespaces your_namespace Example OpenShift CLI command: oc get project your_namespace Note: dx-latest is the project name in this example. Service Account The operator is scoped to the same namespace as the project namespace. It is also possible to implement multiple DX 9.5 deployments in one namespace, sharing a single operator. Note: The Operator is used to deploy, configure, and manage the HCL DX9.5 deployment to Red Hat OpenShift. Consult the Red Hat OpenShift Operator documentation for more information. Example Kubernetes command: kubectl get serviceaccounts -n your_namespace Example OpenShift CLI command: oc get serviceaccount Role A Role that defines the access required by the operator. Example Kubernetes command: kubectl get role -n your_namespace Example OpenShift CLI command: oc get roles Role Binding A Role Binding that binds the operator service account to the operator role. Example Kubernetes command: kubectl get rolebinding -n your_namespace Example OpenShift CLI command: oc get rolebinding Deployment A Deployment that defines/describes the operator Replica Set. Example Kubernetes command: kubectl get deployment -n your_namespace Example OpenShift CLI command: oc get deployment Replica Sets A Replica Set based on the deployment. This maintains a stable set of replica pods. Example Kubernetes command: kubectl get replicaset -n your_namespace Example OpenShift CLI command: oc get replicasets Metrics and Services Services are created to expose HCL Digital Experience running as part of the Stateful Set and to provide metrics for the operator. Example Kubernetes command: kubectl get service -n your_namespace Example OpenShift CLI command: oc get service Secrets There are several secrets that are created. Example Kubernetes command: kubectl get secrets -n your_namespace Example OpenShift CLI command: oc get secret Example Kubernetes details command: kubectl describe secret dx-deployment-wps -n your_namespace Example Kubernetes update existing secrets command: kubectl edit secret dx-deployment-wps -n your_namespace Use double base64 encoded values when updating secrets. Most Linux operating systems will allow you to generate double base64 values with this command: echo 'wpsadmin' | base64 | base64 Config Map A Config Map is created to handle clustering in scenarios where multiple operators are deployed. Example Kubernetes command: kubectl get configmap -n your_namespace Example OpenShift CLI command: oc get configmap Persistent Volume Claims One or more Persistent Volume Claims are created, one for the shared profile, and another, if configured, for the logs of each pod. Example Kubernetes command: kubectl get pvc -n your_namespace Example OpenShift command: oc get pvc Note: Logs are shown when logging is configured. Stateful Set A Stateful Set is created for the HCL Digital Experience core. A Stateful Set manages pods that are based on an identical container specification. Example Kubernetes command: kubectl get statefulset -n your_namespace Example OpenShift CLI command: oc get statefulset Pods Pods are part of the Stateful Set, running HCL Portal. Example Kubernetes commands: kubectl get pods -n your_namespace kubectl get pods -l app=app_name -n your_namespace Example OpenShift CLI command: oc get pods oc get pods -l app=app_name Routes These are used to expose various ports in the HCL Digital Experience service, including those used to access HCL Portal, the WAS console, and the Config Wizard. Example Kubernetes command: kubectl get routes Example OpenShift CLI command: oc get routes Extras There are several files created for each deployment. It is recommended to keep these files. File 1 'dxNameSpace_NAMESPACE.yaml' can be used to delete the namespace / project if needed. File 2 'git_v1_dxdeployment_cr_NAMESPACE.yaml' is a representation of the last deployed deployment for the given namespace / project . Note: With multiple instances of Digital Experience 9.5 containers writing to a shared Transaction log (tranlog) directory, there is a possibility of data corruption which could lead to DX server startup issues. To avoid this possibility, beginning with CF192, for each DX 9.5 instance the deployment creates an additional dynamic Persistent Volume (pv) and Persistent Volume Claim (pvc) to contain the tranlog data of the individual instances. Parent topic: Deploy DX 9.5 Container to Red Hat OpenShift","title":"Artifacts"},{"location":"containerization/update_config_cc_dam/","text":"Update the HCL DX 9.5 Experience API, Content Composer, and Digital Asset Management components This section provides the steps to update the HCL Digital Experience 9.5 Experience API, HCL Digital Experience 9.5 Content Composer, and HCL Digital Experience 9.5 Digital Asset Management components. Update the HCL Digital Experience 9.5 Experience API, Content Composer, and Digital Asset Management images New HCL Digital Experience 9.5 CFxxx container images are released on a regular cadence, through the HCL DX 9.5 Container Update deliveries . Consult the Digital Experience 9.5 Container Deployment topic for the latest list of DX 9.5 Container Images that are available. Customers should not apply maintenance to an HCL Digital Experience 9.5 container image. Instead, they should run the update process as described below. Customers should not extend the HCL Digital Experience 9.5 container images. They are not intended to be used in the FROM instruction as a parent image. To update the Experience API, Content Composer, and Digital Asset Management images to a later container update version, follow these steps: Note: All images must be moved to the target release. Create a backup of the Digital Asset Management components. Follow instructions to do so outlined in the HCL Digital Experience Containerization Backup and recovery procedures topic. Update the Experience API, Content Composer, and Digital Asset Management component images to a later container update by modifying the image tag for each component to be updated with the later versions tag, as in this example: Note: It is possible to deploy the services for the HCL Experience API and HCL Content Composer and/or Digital Asset Management by removing either the HCL Content Composer or HCL Digital Asset Management service lines from the YAML file. kind: ConfigMap metadata: name: dx-deployment ``` data: dx.deploy.dam.persistence.tag: v1.0.0_20200622-1806 dx.deploy.dam.persistence.image: portal/persistence/postgres dx.deploy.dam.volume: volume name dx.deploy.dam.imgprocessor.tag: v95_CF181_20200622-1550 dx.deploy.remotesearch.tag: v95_CF181_20200622-1550 dx.deploy.dam.imgprocessor.image: portal/image-processor dx.deploy.dam.storageclass: dx-deploy-stg dx.deploy.remotesearch.image: dxrs dx.deploy.openldap.tag: v1.0.0-release_20200622_1592846796 dx.deploy.openldap.image: dx-openldap dx.deploy.contentui.tag: v1.0.0_20200622-1709 dx.deploy.contentui.image: portal/content-ui dx.deploy.remotesearch.enabled: 'true' dx.deploy.dam.tag: v1.0.0_20200622-1718 dx.deploy.experienceapi.tag: v1.0.0_20200622-1719 dx.deploy.experienceapi.image: portal/api/ringapi dx.deploy.dam.image: portal/media-library dx.deploy.openldap.enabled: 'true' dx.deploy.contentui.enabled: 'true' dx.deploy.experienceapi.enabled: 'true' dx.deploy.dam.enabled: 'true' dx.deploy.dam.operator.tag: v95_CF181_20200622-1756 dx.deploy.dam.operator.image: hcl-medialibrary-operator dx.deploy.remotesearch.volume.storageclass: gp2 ``` Deploy the YAML ( dx-deploy-config-map.yaml ) with the updated Experience API, Content Composer and Digital Asset Management file names listed by issuing the command: Kubernetes: ``` kubectl apply -f dx-deploy-config-map.yaml -n your-namespace or - ``` kubectl edit configmap name-of-map -n project - OpenShift: - ``` oc project your-namespace followed by - ``` oc apply -f dx-deploy-config-map.yaml to perform the update. The deployment will automatically restart a few times and make appropriate configuration changes during these restarts. Once complete, the deployment is upgraded. HCL Digital Experience Solution Feedback HCL Digital Experience is interested in your experience and feedback working with HCL Digital Experience 9.5 release software. To offer comments or issues on your findings, please access the HCL Digital Experience 9.5 Feedback Reporting application . Parent topic: Container administration 9.5","title":"Update the HCL DX 9.5 Experience API, Content Composer, and Digital Asset Management components"},{"location":"containerization/update_config_cc_dam/#update-the-hcl-dx-95-experience-api-content-composer-and-digital-asset-management-components","text":"This section provides the steps to update the HCL Digital Experience 9.5 Experience API, HCL Digital Experience 9.5 Content Composer, and HCL Digital Experience 9.5 Digital Asset Management components.","title":"Update the HCL DX 9.5 Experience API, Content Composer, and Digital Asset Management components"},{"location":"containerization/update_config_cc_dam/#update-the-hcl-digital-experience-95-experience-api-content-composer-and-digital-asset-management-images","text":"New HCL Digital Experience 9.5 CFxxx container images are released on a regular cadence, through the HCL DX 9.5 Container Update deliveries . Consult the Digital Experience 9.5 Container Deployment topic for the latest list of DX 9.5 Container Images that are available. Customers should not apply maintenance to an HCL Digital Experience 9.5 container image. Instead, they should run the update process as described below. Customers should not extend the HCL Digital Experience 9.5 container images. They are not intended to be used in the FROM instruction as a parent image. To update the Experience API, Content Composer, and Digital Asset Management images to a later container update version, follow these steps: Note: All images must be moved to the target release. Create a backup of the Digital Asset Management components. Follow instructions to do so outlined in the HCL Digital Experience Containerization Backup and recovery procedures topic. Update the Experience API, Content Composer, and Digital Asset Management component images to a later container update by modifying the image tag for each component to be updated with the later versions tag, as in this example: Note: It is possible to deploy the services for the HCL Experience API and HCL Content Composer and/or Digital Asset Management by removing either the HCL Content Composer or HCL Digital Asset Management service lines from the YAML file. kind: ConfigMap metadata: name: dx-deployment ``` data: dx.deploy.dam.persistence.tag: v1.0.0_20200622-1806 dx.deploy.dam.persistence.image: portal/persistence/postgres dx.deploy.dam.volume: volume name dx.deploy.dam.imgprocessor.tag: v95_CF181_20200622-1550 dx.deploy.remotesearch.tag: v95_CF181_20200622-1550 dx.deploy.dam.imgprocessor.image: portal/image-processor dx.deploy.dam.storageclass: dx-deploy-stg dx.deploy.remotesearch.image: dxrs dx.deploy.openldap.tag: v1.0.0-release_20200622_1592846796 dx.deploy.openldap.image: dx-openldap dx.deploy.contentui.tag: v1.0.0_20200622-1709 dx.deploy.contentui.image: portal/content-ui dx.deploy.remotesearch.enabled: 'true' dx.deploy.dam.tag: v1.0.0_20200622-1718 dx.deploy.experienceapi.tag: v1.0.0_20200622-1719 dx.deploy.experienceapi.image: portal/api/ringapi dx.deploy.dam.image: portal/media-library dx.deploy.openldap.enabled: 'true' dx.deploy.contentui.enabled: 'true' dx.deploy.experienceapi.enabled: 'true' dx.deploy.dam.enabled: 'true' dx.deploy.dam.operator.tag: v95_CF181_20200622-1756 dx.deploy.dam.operator.image: hcl-medialibrary-operator dx.deploy.remotesearch.volume.storageclass: gp2 ``` Deploy the YAML ( dx-deploy-config-map.yaml ) with the updated Experience API, Content Composer and Digital Asset Management file names listed by issuing the command: Kubernetes: ``` kubectl apply -f dx-deploy-config-map.yaml -n your-namespace or - ``` kubectl edit configmap name-of-map -n project - OpenShift: - ``` oc project your-namespace followed by - ``` oc apply -f dx-deploy-config-map.yaml to perform the update. The deployment will automatically restart a few times and make appropriate configuration changes during these restarts. Once complete, the deployment is upgraded.","title":"Update the HCL Digital Experience 9.5 Experience API, Content Composer, and Digital Asset Management images"},{"location":"containerization/update_config_cc_dam/#hcl-digital-experience-solution-feedback","text":"HCL Digital Experience is interested in your experience and feedback working with HCL Digital Experience 9.5 release software. To offer comments or issues on your findings, please access the HCL Digital Experience 9.5 Feedback Reporting application . Parent topic: Container administration 9.5","title":"HCL Digital Experience Solution Feedback"},{"location":"containerization/update_dx_core_kubernetes_container_deployment/","text":"Update the Digital Experience 9.5 Core Kubernetes or Red Hat OpenShift container deployment Update the Digital Experience 9.5 Core Kubernetes container deployment. Follow the processes below to create a backup, then update the Digital Experience 9.5 Core Kubernetes or Red Hat OpenShift Container Deployment to a later Container Update release. New HCL Digital Experience 9.5 CFxxx container images are released on a regular cadence, through the HCL DX 9.5 Container Update deliveries . Consult the Digital Experience 9.5 Container Deployment topic for the latest list of DX 9.5 Container images that are available. HCL DX administrators should not apply maintenance to an HCL Digital Experience 9.5 container image. Instead, they should run the update process as described below. Note: HCL DX 9.5 CF191 images are available and may be installed. HCL DX 9.5 CF191 is supported for new deployments only . DX administrators should not upgrade DX 9.5 container deployments to this release. HCL DX administrators should not extend the HCL Digital Experience 9.5 container images. They are not intended to be used in the FROM instruction as a parent image. It is recommended you create a backup of your DX 9.5 deployment before managing the update processes using the following steps: Create a backup of the wp_profile . To backup the wp_profile , it is recommended that the number of instances is 1 instance, and your Digital Experience 9.5 Container deployment is stopped using the following command: /opt/HCL/wp_profile/stopServer.sh Next, ensure the entire /opt/HCL/wp_profile directory is backed up. A method to generate this backup is shown using the following commands: cd /opt/HCL/wp_profile\u2028 tar -cvpzf backup.tar.gz --exclude=/backup.tar.gz --one-file-system /opt/HCL/wp_profile Note: Before starting the tar ensure that your file system has ~50% free capacity. \u2028Once complete, it is recommended that you copy the backup.tar.gz file that is generated to alternate long term storage. In addition, as outlined in the Backup and Recovery topic, the Digital Experience 9.5 database should be backed up at the same time as the wp_profile . Create a backup of the Persistence layer using the following example commands: pg_dump name_of_database > name_of_backup_file. We recommend backing up the system on a remote system: pg_dump -U user_name -h remote_host -p remote_port name_of_database > name_of_backup_file. If it is done locally, you need to execute into the POD. Once you have completed the command, it is recommended that a copy of the resulting file is created and placed to an alternate long-term storage. Update the HCL Digital Experience 9.5 core deployment files: Note: Beginning with HCL DX 9.5 Container Update CF192, the dxctl process is used to manage updates to later update releases. See the following deployment topics below for the update instructions details. Documentation resource: Deploy HCL Digital Experience 9.5 Container to Red Hat OpenShift Documentation resource: Deploy HCL Digital Experience 9.5 Container to Amazon EKS Documentation resource: Deploy HCL Digital Experience 9.5 Container to Microsoft Azure AKS Documentation resource: Deploy HCL Digital Experience 9.5 Container to Google Kubernetes Engine (GKE) Video: Using dxctl to update HCL DX 9.5 on Red Hat OpenShift to Container Update CF192 Video: Updating the HCL DX 9.5 Portal & IBM WebSphere Application Server Administrator Secrets in OpenShift and Kubernetes Download the later version of the HCL DX 9.5 Container Update packages to update from the HCL Software License Portal. Consult the Digital Experience 9.5 Container Deployment topic for the latest list. Load, tag, and push the later version DX 9.5 Container images to your supported Kubernetes or OpenShift platform (similar to steps followed with your original HCL DX 9.5 image detailed in the HCL DX 9.5 Help Center Deployment topics). Use the following guidance and steps if managing an update to Container Update versions prior to CF192: To upgrade the deployment to a new version, update the IMAGETAG value that was used in the original deployDx.sh execution to the new IMAGETAG . Note: If you performed a database transfer, please ensure the <database>.DbUser and <database>.DbPassword for all Portal databases reflect the current user and password in opt/HCL/wp_profile/ConfigEngine/properties/wkplc_dbdomain.properties prior to updating the Portal Core image. Update the tag in the operator.yaml file to the later HCL DX 9.5 Container Update versions tag. Note: If updating your DX 9.5 container deployment to CF19, complete the following steps before proceeding to step 7. Delete the DxDeployment CRD. This terminates all deployments. OpenShift command: oc delete crd dxdeployments.git.cwp.pnp-hcl.com Kubernetes command: kubectl delete crd dxdeployments.git.cwp.pnp-hcl.com Release claim on the wp_profile persistent volume to make it available: OpenShift command: oc edit pv VOLUME Kubernetes command: kubectl edit pv VOLUME Delete the claimRef section: ``` Example: claimRef: kind: PersistentVolumeClaim namespace: dx-ns name: dx-deployment-pvc uid: 633c67f9-89fe-4ac8-8db1-929ccbb8a657 apiVersion: v1 resourceVersion: '658831' ``` Create the CF19 DxDeployment CRD: OpenShift command: oc create -f deploy/crd/git.cwp.pnp-hcl.com_dxdeployments_crd.yaml Kubernetes command: kubectl create -f deploy/crd/git.cwp.pnp-hcl.com_dxdeployments_crd.yaml To update the HCL Digital Experience 9.5 core deployment files to the later Container Update version, run the updateDx.sh script with updated values, as shown in the following examples: Kubernetes command: ./scripts/updateDx.sh NAMESPACE REPLICAS REPOSITORY IMAGENAME IMAGETAG VOLUMENAME STORAGECLASS DBTYPE INGRESSIMAGE INGRESSTAG OpenShift command: ./scripts/updateDx.sh NAMESPACE REPLICAS REPOSITORY IMAGENAME IMAGETAG VOLUMENAME STORAGECLASS DBTYPE NAMESPACE - the project or the namespace to create or use for deployment. REPLICAS - the number of initial instances for the deployment. REPOSITORY - your local repository, the repository used by OpenShift/ or supported Kubernetes platforms, Amazon EKS or MS Azure AKs IMAGENAME - the name of the dxCore image, as added to the repository above. IMAGETAG - the tag for the target image as added to the above repository. VOLUMENAME - the volume to be used by the deployment for persistence, this must use AccessMode ReadWriteMany . STORAGECLASS - the storage class name used to create the persistent volume. DBTYPE - the database type. By default, and initially, this is Derby. INGRESSIMAGE - The image name to use for ambassador. INGRESSTAG - The image tag to use for ambassador. After the updateDx.sh script has completed, DX administrators are encouraged to check the following log files to ensure the CF update completed successfully. Check the ConfigTrace.log located under the /opt/HCL/wp_profile/ConfigEngine/log/ directory to ensure the update task was successful, as shown in this example: [2020-08-26 19:53:28.658] Target finished: action-apply-cf BUILD SUCCESSFUL 2. Review for any exceptions in the SystemOut.log located under the /opt/HCL/wp\\_profile/logs/WebSphere\\_Portal directory. **Additional steps required for HCL DX 9.5 deployments to supported Kubernetes platforms: Amazon EKS or Microsoft Azure AKS.** Administrators must perform delete/deploy or redeploy the ambassador definitions. This can be done by performing these commands, operating on an MS Azure AKS environment in these examples: kubectl delete crd tracingservices.getambassador.io -n az-demo kubectl delete crd tlscontexts.getambassador.io -n az-demo kubectl delete crd tcpmappings.getambassador.io -n az-demo kubectl delete crd ratelimitservices.getambassador.io -n az-demo kubectl delete crd ratelimits.getambassador.io -n az-demo kubectl delete crd projectversions.getambassador.io -n az-demo kubectl delete crd projects.getambassador.io -n az-demo kubectl delete crd projectsrevisions.getambassador.io -n az-demo kubectl delete crd modules.getambassador.io -n az-demo kubectl delete crd mappings.getambassador.io -n az-demo kubectl delete crd logservices.getambassador.io -n az-demo kubectl delete crd authservices.getambassador.io -n az-demo kubectl delete crd consulresolvers.getambassador.io -n az-demo kubectl delete crd hosts.getambassador.io -n az-demo kubectl delete crd kubernetesserviceresolvers.getambassador.io -n az-demo kubectl delete crd kubernetesendpointresolvers.getambassador.io -n az-demo Upon completion, these are automatically redeployed at version 1 and version 2, provided you have an active deployment. If not, they are redeployed once the HCL DX 9.5 DX is deployed. The previous ambassador version, prior to CF183 at level 0.85.0, is deployed and uses the ambassador version 1 APIs. There are additional options to customize the deployment . For example, once the database is transferred to a non-Derby database, the DBTYPE must updated so you can scale the instances higher. Additionally, once the database is transferred, the number of replicas can be increased. During the Update process, the deployment automatically restarts a few times and make appropriate configuration changes during these restarts. Once complete the deployment is upgraded. For instructions to update the Content Composer, Digital Asset Management, and Experience API container deployment images, see the following topics. Documentation resource: Install the Experience API, Content Composer, and DAM Components Documentation resource: Update the Experience API, Content Composer, and DAM Components Instructions to Delete a DX 9.5 Container Deployment Removing the entire deployment requires several steps, this is by design. To remove the deployment in a specific namespace, run the following: ./scripts/removeDx.sh NAMESPACE NAMESPACE - the project or the namespace created or used for deployment. To remove a namespace, use any of the following commands: OpenShift commands: 'oc delete project **<project\\_name\\>**' 'oc delete -f dxNameSpace_**NAMESPACE**.yaml' where **NAMESPACE** is the namespace to be removed Kubernetes command: 'kubectl delete -f dxNameSpace_**NAMESPACE**.yaml' where **NAMESPACE** is the namespace to be removed The persistent volume associated to the deployment needs to be cleaned up by your Administrator. To reuse a persistent volume, see the following steps: Open the persistent volume in a visual editor (vi) using the: OpenShift command: oc edit pv your_namespace Kubernetes command: kubectl edit pv your_namespace Remove the claimRef section: claimRef: apiVersion: v1 kind: PersistentVolumeClaim name: dx-deploy-pvc namespace: your_namespace resourceVersion: \"488931120\" uid: ebd58361-0e2a-11ea-b02e-02f8fe687954 Ensure you get the 'persistentvolume/your_namespace edited' message. You may need to manually remove any data remaining from the previous deployment. Parent topic: Container administration 9.5","title":"Update the Digital Experience 9.5 Core Kubernetes or Red Hat OpenShift container deployment"},{"location":"containerization/update_dx_core_kubernetes_container_deployment/#update-the-digital-experience-95-core-kubernetes-or-red-hat-openshift-container-deployment","text":"Update the Digital Experience 9.5 Core Kubernetes container deployment. Follow the processes below to create a backup, then update the Digital Experience 9.5 Core Kubernetes or Red Hat OpenShift Container Deployment to a later Container Update release. New HCL Digital Experience 9.5 CFxxx container images are released on a regular cadence, through the HCL DX 9.5 Container Update deliveries . Consult the Digital Experience 9.5 Container Deployment topic for the latest list of DX 9.5 Container images that are available. HCL DX administrators should not apply maintenance to an HCL Digital Experience 9.5 container image. Instead, they should run the update process as described below. Note: HCL DX 9.5 CF191 images are available and may be installed. HCL DX 9.5 CF191 is supported for new deployments only . DX administrators should not upgrade DX 9.5 container deployments to this release. HCL DX administrators should not extend the HCL Digital Experience 9.5 container images. They are not intended to be used in the FROM instruction as a parent image. It is recommended you create a backup of your DX 9.5 deployment before managing the update processes using the following steps: Create a backup of the wp_profile . To backup the wp_profile , it is recommended that the number of instances is 1 instance, and your Digital Experience 9.5 Container deployment is stopped using the following command: /opt/HCL/wp_profile/stopServer.sh Next, ensure the entire /opt/HCL/wp_profile directory is backed up. A method to generate this backup is shown using the following commands: cd /opt/HCL/wp_profile\u2028 tar -cvpzf backup.tar.gz --exclude=/backup.tar.gz --one-file-system /opt/HCL/wp_profile Note: Before starting the tar ensure that your file system has ~50% free capacity. \u2028Once complete, it is recommended that you copy the backup.tar.gz file that is generated to alternate long term storage. In addition, as outlined in the Backup and Recovery topic, the Digital Experience 9.5 database should be backed up at the same time as the wp_profile . Create a backup of the Persistence layer using the following example commands: pg_dump name_of_database > name_of_backup_file. We recommend backing up the system on a remote system: pg_dump -U user_name -h remote_host -p remote_port name_of_database > name_of_backup_file. If it is done locally, you need to execute into the POD. Once you have completed the command, it is recommended that a copy of the resulting file is created and placed to an alternate long-term storage. Update the HCL Digital Experience 9.5 core deployment files: Note: Beginning with HCL DX 9.5 Container Update CF192, the dxctl process is used to manage updates to later update releases. See the following deployment topics below for the update instructions details. Documentation resource: Deploy HCL Digital Experience 9.5 Container to Red Hat OpenShift Documentation resource: Deploy HCL Digital Experience 9.5 Container to Amazon EKS Documentation resource: Deploy HCL Digital Experience 9.5 Container to Microsoft Azure AKS Documentation resource: Deploy HCL Digital Experience 9.5 Container to Google Kubernetes Engine (GKE) Video: Using dxctl to update HCL DX 9.5 on Red Hat OpenShift to Container Update CF192 Video: Updating the HCL DX 9.5 Portal & IBM WebSphere Application Server Administrator Secrets in OpenShift and Kubernetes Download the later version of the HCL DX 9.5 Container Update packages to update from the HCL Software License Portal. Consult the Digital Experience 9.5 Container Deployment topic for the latest list. Load, tag, and push the later version DX 9.5 Container images to your supported Kubernetes or OpenShift platform (similar to steps followed with your original HCL DX 9.5 image detailed in the HCL DX 9.5 Help Center Deployment topics). Use the following guidance and steps if managing an update to Container Update versions prior to CF192: To upgrade the deployment to a new version, update the IMAGETAG value that was used in the original deployDx.sh execution to the new IMAGETAG . Note: If you performed a database transfer, please ensure the <database>.DbUser and <database>.DbPassword for all Portal databases reflect the current user and password in opt/HCL/wp_profile/ConfigEngine/properties/wkplc_dbdomain.properties prior to updating the Portal Core image. Update the tag in the operator.yaml file to the later HCL DX 9.5 Container Update versions tag. Note: If updating your DX 9.5 container deployment to CF19, complete the following steps before proceeding to step 7. Delete the DxDeployment CRD. This terminates all deployments. OpenShift command: oc delete crd dxdeployments.git.cwp.pnp-hcl.com Kubernetes command: kubectl delete crd dxdeployments.git.cwp.pnp-hcl.com Release claim on the wp_profile persistent volume to make it available: OpenShift command: oc edit pv VOLUME Kubernetes command: kubectl edit pv VOLUME Delete the claimRef section: ``` Example: claimRef: kind: PersistentVolumeClaim namespace: dx-ns name: dx-deployment-pvc uid: 633c67f9-89fe-4ac8-8db1-929ccbb8a657 apiVersion: v1 resourceVersion: '658831' ``` Create the CF19 DxDeployment CRD: OpenShift command: oc create -f deploy/crd/git.cwp.pnp-hcl.com_dxdeployments_crd.yaml Kubernetes command: kubectl create -f deploy/crd/git.cwp.pnp-hcl.com_dxdeployments_crd.yaml To update the HCL Digital Experience 9.5 core deployment files to the later Container Update version, run the updateDx.sh script with updated values, as shown in the following examples: Kubernetes command: ./scripts/updateDx.sh NAMESPACE REPLICAS REPOSITORY IMAGENAME IMAGETAG VOLUMENAME STORAGECLASS DBTYPE INGRESSIMAGE INGRESSTAG OpenShift command: ./scripts/updateDx.sh NAMESPACE REPLICAS REPOSITORY IMAGENAME IMAGETAG VOLUMENAME STORAGECLASS DBTYPE NAMESPACE - the project or the namespace to create or use for deployment. REPLICAS - the number of initial instances for the deployment. REPOSITORY - your local repository, the repository used by OpenShift/ or supported Kubernetes platforms, Amazon EKS or MS Azure AKs IMAGENAME - the name of the dxCore image, as added to the repository above. IMAGETAG - the tag for the target image as added to the above repository. VOLUMENAME - the volume to be used by the deployment for persistence, this must use AccessMode ReadWriteMany . STORAGECLASS - the storage class name used to create the persistent volume. DBTYPE - the database type. By default, and initially, this is Derby. INGRESSIMAGE - The image name to use for ambassador. INGRESSTAG - The image tag to use for ambassador. After the updateDx.sh script has completed, DX administrators are encouraged to check the following log files to ensure the CF update completed successfully. Check the ConfigTrace.log located under the /opt/HCL/wp_profile/ConfigEngine/log/ directory to ensure the update task was successful, as shown in this example: [2020-08-26 19:53:28.658] Target finished: action-apply-cf BUILD SUCCESSFUL 2. Review for any exceptions in the SystemOut.log located under the /opt/HCL/wp\\_profile/logs/WebSphere\\_Portal directory. **Additional steps required for HCL DX 9.5 deployments to supported Kubernetes platforms: Amazon EKS or Microsoft Azure AKS.** Administrators must perform delete/deploy or redeploy the ambassador definitions. This can be done by performing these commands, operating on an MS Azure AKS environment in these examples: kubectl delete crd tracingservices.getambassador.io -n az-demo kubectl delete crd tlscontexts.getambassador.io -n az-demo kubectl delete crd tcpmappings.getambassador.io -n az-demo kubectl delete crd ratelimitservices.getambassador.io -n az-demo kubectl delete crd ratelimits.getambassador.io -n az-demo kubectl delete crd projectversions.getambassador.io -n az-demo kubectl delete crd projects.getambassador.io -n az-demo kubectl delete crd projectsrevisions.getambassador.io -n az-demo kubectl delete crd modules.getambassador.io -n az-demo kubectl delete crd mappings.getambassador.io -n az-demo kubectl delete crd logservices.getambassador.io -n az-demo kubectl delete crd authservices.getambassador.io -n az-demo kubectl delete crd consulresolvers.getambassador.io -n az-demo kubectl delete crd hosts.getambassador.io -n az-demo kubectl delete crd kubernetesserviceresolvers.getambassador.io -n az-demo kubectl delete crd kubernetesendpointresolvers.getambassador.io -n az-demo Upon completion, these are automatically redeployed at version 1 and version 2, provided you have an active deployment. If not, they are redeployed once the HCL DX 9.5 DX is deployed. The previous ambassador version, prior to CF183 at level 0.85.0, is deployed and uses the ambassador version 1 APIs. There are additional options to customize the deployment . For example, once the database is transferred to a non-Derby database, the DBTYPE must updated so you can scale the instances higher. Additionally, once the database is transferred, the number of replicas can be increased. During the Update process, the deployment automatically restarts a few times and make appropriate configuration changes during these restarts. Once complete the deployment is upgraded. For instructions to update the Content Composer, Digital Asset Management, and Experience API container deployment images, see the following topics. Documentation resource: Install the Experience API, Content Composer, and DAM Components Documentation resource: Update the Experience API, Content Composer, and DAM Components","title":"Update the Digital Experience 9.5 Core Kubernetes or Red Hat OpenShift container deployment"},{"location":"containerization/update_dx_core_kubernetes_container_deployment/#instructions-to-delete-a-dx-95-container-deployment","text":"Removing the entire deployment requires several steps, this is by design. To remove the deployment in a specific namespace, run the following: ./scripts/removeDx.sh NAMESPACE NAMESPACE - the project or the namespace created or used for deployment. To remove a namespace, use any of the following commands: OpenShift commands: 'oc delete project **<project\\_name\\>**' 'oc delete -f dxNameSpace_**NAMESPACE**.yaml' where **NAMESPACE** is the namespace to be removed Kubernetes command: 'kubectl delete -f dxNameSpace_**NAMESPACE**.yaml' where **NAMESPACE** is the namespace to be removed The persistent volume associated to the deployment needs to be cleaned up by your Administrator. To reuse a persistent volume, see the following steps: Open the persistent volume in a visual editor (vi) using the: OpenShift command: oc edit pv your_namespace Kubernetes command: kubectl edit pv your_namespace Remove the claimRef section: claimRef: apiVersion: v1 kind: PersistentVolumeClaim name: dx-deploy-pvc namespace: your_namespace resourceVersion: \"488931120\" uid: ebd58361-0e2a-11ea-b02e-02f8fe687954 Ensure you get the 'persistentvolume/your_namespace edited' message. You may need to manually remove any data remaining from the previous deployment. Parent topic: Container administration 9.5","title":"Instructions to Delete a DX 9.5 Container Deployment"},{"location":"containerization/update_helm_deployment/","text":"Update Helm deployment configuration This section describes how to update the configuration of an HCL Digital Experience 9.5 CF196 or later deployment to Kubernetes or OpenShift installed using Helm. This section assumes that you prepared your cluster and your custom-values.yaml file, using guidance provided in the Planning your HCL DX 9.5 container deployment using Helm topic, and then installed your deployment using the instructions in the Install topic. Overview of Helm Configuration Updates Once an HCL Digital Experience Kubernetes 9.5 deployment is installed, it is possible to update its configuration directly using the standard Kubernetes or OpenShift commands (for example, by updating values in the various config maps). However, this is NOT the recommended approach. Some of the configuration parameters have interdependencies, as outlined in the Planning section . These require knowledgeable management to make changes that are compatible with interdependency requirements. For example, if you change the context root for DX Core you also need to change the readiness and liveness probes. The recommended approach for configuration changes is to update the custom-values.yaml file used to install the deployment, and then run a Helm upgrade. This has the added benefit that your custom-values.yaml file remains an up-to-date description of the configuration of your environment. Helm Upgrade configuration command After making the needed changes to your custom-values.yaml file, use the following command: ```py Helm upgrade command helm upgrade -n your-namespace -f path/to/your/custom-values.yaml your-release-name path/to/hcl-dx-deployment-vX.X.X_XXXXXXXX-XXXX.tar.gz ``` The your-namespace is the namespace in which your HCL Digital Experience 9.5 deployment is installed and your-release-name is the Helm release name you used when installing. The -f path/to/your/custom-values.yaml parameter must point to the custom-values.yaml you have updated. The path/to/hcl-dx-deployment-vX.X.X_XXXXXXXX-XXXX.tar.gz is the HCL Digital Experience Helm Chart that you extracted in the preparation steps. Parent topic: Operations using Helm","title":"Update Helm deployment configuration"},{"location":"containerization/update_helm_deployment/#update-helm-deployment-configuration","text":"This section describes how to update the configuration of an HCL Digital Experience 9.5 CF196 or later deployment to Kubernetes or OpenShift installed using Helm. This section assumes that you prepared your cluster and your custom-values.yaml file, using guidance provided in the Planning your HCL DX 9.5 container deployment using Helm topic, and then installed your deployment using the instructions in the Install topic. Overview of Helm Configuration Updates Once an HCL Digital Experience Kubernetes 9.5 deployment is installed, it is possible to update its configuration directly using the standard Kubernetes or OpenShift commands (for example, by updating values in the various config maps). However, this is NOT the recommended approach. Some of the configuration parameters have interdependencies, as outlined in the Planning section . These require knowledgeable management to make changes that are compatible with interdependency requirements. For example, if you change the context root for DX Core you also need to change the readiness and liveness probes. The recommended approach for configuration changes is to update the custom-values.yaml file used to install the deployment, and then run a Helm upgrade. This has the added benefit that your custom-values.yaml file remains an up-to-date description of the configuration of your environment. Helm Upgrade configuration command After making the needed changes to your custom-values.yaml file, use the following command: ```py","title":"Update Helm deployment configuration"},{"location":"containerization/update_helm_deployment/#helm-upgrade-command","text":"helm upgrade -n your-namespace -f path/to/your/custom-values.yaml your-release-name path/to/hcl-dx-deployment-vX.X.X_XXXXXXXX-XXXX.tar.gz ``` The your-namespace is the namespace in which your HCL Digital Experience 9.5 deployment is installed and your-release-name is the Helm release name you used when installing. The -f path/to/your/custom-values.yaml parameter must point to the custom-values.yaml you have updated. The path/to/hcl-dx-deployment-vX.X.X_XXXXXXXX-XXXX.tar.gz is the HCL Digital Experience Helm Chart that you extracted in the preparation steps. Parent topic: Operations using Helm","title":"Helm upgrade command"},{"location":"containerization/virtualportals/","text":"Managing virtual portals This topic describes the commands that are used in managing the virtual portal activities such as creating, listing, importing, or exporting virtual portals. Virtual Portal commands Command description The manage-virtual-portal command is used to manage virtual portal tasks such as create, list, export, and import in the DX server. ``` dxclient manage-virtual-portal ``` Help command This command shows the help document on the manage-virtual-portal command: Help command for creating virtual portals: dxclient manage-virtual-portal create -h Help command for listing virtual portals: dxclient manage-virtual-portal list -h Help command for importing virtual portals: dxclient manage-virtual-portal import -h Help command for exporting virtual portals: dxclient manage-virtual-portal export -h Subcommands Create virtual portal task in the DX server: manage-virtual-portal create [OPTIONS] List virtual portal task in the DX server: manage-virtual-portal list [OPTIONS] Import virtual portal task in the DX server: manage-virtual-portal import [OPTIONS] Export virtual portal task in the DX server: manage-virtual-portal export [OPTIONS] Use this attribute and retrigger the command to check the status of any previous request that was incomplete. -requestId <Unique ID of a previously triggered create virtual portal request> Required Commands manage-virtual-portal create command: Use this parameter to specify the username that is required for authenticating with the server -dxUsername <value> Use this parameter to specify the password that is required for authenticating with the server -dxPassword <value> Use this parameter to specify the configuration wizard home (route change only in case of Open Shift Kubernetes Environment, otherwise same as hostname) that is required for authenticating to the cw_profile -dxConnectHostname <value> Use this parameter to specify the port number of the cw_profile(for Kubernetes Environment dxConnectPort is 443) -dxConnectPort <value> Use this parameter to specify the username that is required for authenticating to the cw_profile -dxConnectUsername <value> Use this parameter to specify the password that is required for authenticating to the cw_profile -dxConnectPassword <value> Use this parameter to specify the profile name of the DX core server -dxProfileName <Profile name of the DX core server> Use this parameter to specify the username of the DX WAS server -dxWASUsername <value> Use this parameter to specify the password of the DX WAS server -dxWASPassword <value> Use this parameter to specify the virtual portal Title -vpTitle <value> Use this parameter to specify the virtual portal Realm -vpRealm <value> Use this parameter to specify the virtual portal AdminGroup -vpAdminGroup <value> Use this parameter to specify the virtual portal HostName -vpHostname <value> Use this parameter to specify the virtual portal Context -vpContext <value> Note: Create virtual portal task creates an empty virtual portal in the DX server. Example usage: dxclient manage-virtual-portal create -dxConnectHostname <dxConnectHostname> -dxConnectPort <dxConnectPort> -dxConnectUsername <dxConnectUsername> -dxConnectPassword <dxConnectPassword> -dxProfileName <Profile name of the DX Server> -dxUsername <dxUsername> -dxPassword <dxPassword> -dxWASUsername < Username of the DX WAS server> -dxWASPassword <Password of the DX WAS server> -vpTitle <virtual-portal-Title> -vpRealm <virtual-portal-realm> -vpAdminGroup <virtual-portal-adminGroup> -vpHostname <virtual-portal-hostname> -vpContext<virtual-portal-context> manage-virtual-portal list command Use this parameter to specify the username that is required for authenticating with the server -dxUsername <value> Use this parameter to specify the password that is required for authenticating with the server -dxPassword <value> Use this parameter to specify the configuration wizard home (route change only in case of Open Shift Kubernetes Environment, otherwise same as hostname) that is required for authenticating to the cw_profile -dxConnectHostname <value> Use this parameter to specify the port number of the cw_profile(for Kubernetes Environment dxConnectPort is 443) -dxConnectPort <value> Use this parameter to specify the username that is required for authenticating to the cw_profile -dxConnectUsername <value> Use this parameter to specify the password that is required for authenticating to the cw_profile -dxConnectPassword <value> Use this parameter to specify the profile name of the DX core server -dxProfileName <Profile name of the DX core server> Use this parameter to specify the username of the DX WAS server -dxWASUsername <value> Use this parameter to specify the password of the DX WAS server -dxWASPassword <value> Example usage: dxclient manage-virtual-portal list -dxConnectHostname <dxConnectHostname> -dxConnectPort <dxConnectPort> -dxConnectUsername <dxConnectUsername> -dxConnectPassword <dxConnectPassword> -dxProfileName <profile-name-of-the-DX-server> -dxUsername <dxUsername> -dxPassword <dxPassword> -dxWASUsername <username-of-the-DX-WAS-server> -dxWASPassword <password-of-the-DX-WAS-server> manage-virtual-portal import command: Use this parameter to specify the protocol with which to connect to the server -dxProtocol <value> Use this parameter to specify the username that is required for authenticating with the server -dxUsername <value> Use this parameter to specify the password that is required for authenticating with the server -dxPassword <value> Use this parameter to specify the hostname of the target server -hostname <value> Use this parameter to specify the port on which to connect to the server(for Kubernetes Environment dxPort is 443) -dxPort <value> Use this parameter to specify the path to DX configuration endpoint (for example: /wps/config) -xmlConfigPath <value> Use this parameter to specify the XML file name with absolute path of the input file -xmlFile <value> Use this parameter to specify the virtual portal Context -vpContext <value> Limitation: Currently, import virtual portal feature supports only vpContext and does not support vpHostname . Support for Virtual portal with host name might be added in the future release. Example Usage: dxclient manage-virtual-portal import -dxProtocol <http/https> -hostname <host-name> -dxPort <dxPort> -xmlConfigPath <xmlConfigPath> -dxUsername <dxUsername> -dxPassword <dxPassword> -xmlFile <xml-file-with-path> -vpContext <virtual-portal-context> manage-virtual-portal export command: Use this parameter to specify the protocol with which to connect to the server -dxProtocol <value> Use this parameter to specify the user name that is required for authenticating with the server -dxUsername <value> Use this parameter to specify the password that is required for authenticating with the server -dxPassword <value> Use this parameter to specify the host name of the target server -hostname <value> Use this parameter to specify the port on which to connect to the server(for Kubernetes Environment dxPort is 443) -dxPort <value> Use this parameter to specify the path to DX configuration endpoint (for example: /wps/config) -xmlConfigPath <value> Use this parameter to specify the virtual portal Context -vpContext <value> Use this parameter to specify the virtual portal Title -vpTitle <value> Use this parameter to specify the XML file name with absolute path of the input file to export the virtual portal content. -xmlFile <value> Limitation: Currently, exporting virtual portal feature supports only vpContext and does not support vpHostname . Support for Virtual portal with hostname might be added in the future release. Example: dxclient manage-virtual-portal export -hostname <hostname> -dxProtocol <dxProtocol> -dxPort <dxPort> -dxUsername <dxUsername> -dxPassword <dxPassword> -vpTitle <vpTitle> -vpContext <vpContext> -xmlFile <xml-file-with-path> Log files from running the command can be found in the logs directory of the DXClient installation. Parent topic: DXClient Artifact Types","title":"Managing virtual portals"},{"location":"containerization/virtualportals/#managing-virtual-portals","text":"This topic describes the commands that are used in managing the virtual portal activities such as creating, listing, importing, or exporting virtual portals.","title":"Managing virtual portals"},{"location":"containerization/virtualportals/#virtual-portal-commands","text":"Command description The manage-virtual-portal command is used to manage virtual portal tasks such as create, list, export, and import in the DX server. ``` dxclient manage-virtual-portal ``` Help command This command shows the help document on the manage-virtual-portal command: Help command for creating virtual portals: dxclient manage-virtual-portal create -h Help command for listing virtual portals: dxclient manage-virtual-portal list -h Help command for importing virtual portals: dxclient manage-virtual-portal import -h Help command for exporting virtual portals: dxclient manage-virtual-portal export -h Subcommands Create virtual portal task in the DX server: manage-virtual-portal create [OPTIONS] List virtual portal task in the DX server: manage-virtual-portal list [OPTIONS] Import virtual portal task in the DX server: manage-virtual-portal import [OPTIONS] Export virtual portal task in the DX server: manage-virtual-portal export [OPTIONS] Use this attribute and retrigger the command to check the status of any previous request that was incomplete. -requestId <Unique ID of a previously triggered create virtual portal request> Required Commands manage-virtual-portal create command: Use this parameter to specify the username that is required for authenticating with the server -dxUsername <value> Use this parameter to specify the password that is required for authenticating with the server -dxPassword <value> Use this parameter to specify the configuration wizard home (route change only in case of Open Shift Kubernetes Environment, otherwise same as hostname) that is required for authenticating to the cw_profile -dxConnectHostname <value> Use this parameter to specify the port number of the cw_profile(for Kubernetes Environment dxConnectPort is 443) -dxConnectPort <value> Use this parameter to specify the username that is required for authenticating to the cw_profile -dxConnectUsername <value> Use this parameter to specify the password that is required for authenticating to the cw_profile -dxConnectPassword <value> Use this parameter to specify the profile name of the DX core server -dxProfileName <Profile name of the DX core server> Use this parameter to specify the username of the DX WAS server -dxWASUsername <value> Use this parameter to specify the password of the DX WAS server -dxWASPassword <value> Use this parameter to specify the virtual portal Title -vpTitle <value> Use this parameter to specify the virtual portal Realm -vpRealm <value> Use this parameter to specify the virtual portal AdminGroup -vpAdminGroup <value> Use this parameter to specify the virtual portal HostName -vpHostname <value> Use this parameter to specify the virtual portal Context -vpContext <value> Note: Create virtual portal task creates an empty virtual portal in the DX server. Example usage: dxclient manage-virtual-portal create -dxConnectHostname <dxConnectHostname> -dxConnectPort <dxConnectPort> -dxConnectUsername <dxConnectUsername> -dxConnectPassword <dxConnectPassword> -dxProfileName <Profile name of the DX Server> -dxUsername <dxUsername> -dxPassword <dxPassword> -dxWASUsername < Username of the DX WAS server> -dxWASPassword <Password of the DX WAS server> -vpTitle <virtual-portal-Title> -vpRealm <virtual-portal-realm> -vpAdminGroup <virtual-portal-adminGroup> -vpHostname <virtual-portal-hostname> -vpContext<virtual-portal-context> manage-virtual-portal list command Use this parameter to specify the username that is required for authenticating with the server -dxUsername <value> Use this parameter to specify the password that is required for authenticating with the server -dxPassword <value> Use this parameter to specify the configuration wizard home (route change only in case of Open Shift Kubernetes Environment, otherwise same as hostname) that is required for authenticating to the cw_profile -dxConnectHostname <value> Use this parameter to specify the port number of the cw_profile(for Kubernetes Environment dxConnectPort is 443) -dxConnectPort <value> Use this parameter to specify the username that is required for authenticating to the cw_profile -dxConnectUsername <value> Use this parameter to specify the password that is required for authenticating to the cw_profile -dxConnectPassword <value> Use this parameter to specify the profile name of the DX core server -dxProfileName <Profile name of the DX core server> Use this parameter to specify the username of the DX WAS server -dxWASUsername <value> Use this parameter to specify the password of the DX WAS server -dxWASPassword <value> Example usage: dxclient manage-virtual-portal list -dxConnectHostname <dxConnectHostname> -dxConnectPort <dxConnectPort> -dxConnectUsername <dxConnectUsername> -dxConnectPassword <dxConnectPassword> -dxProfileName <profile-name-of-the-DX-server> -dxUsername <dxUsername> -dxPassword <dxPassword> -dxWASUsername <username-of-the-DX-WAS-server> -dxWASPassword <password-of-the-DX-WAS-server> manage-virtual-portal import command: Use this parameter to specify the protocol with which to connect to the server -dxProtocol <value> Use this parameter to specify the username that is required for authenticating with the server -dxUsername <value> Use this parameter to specify the password that is required for authenticating with the server -dxPassword <value> Use this parameter to specify the hostname of the target server -hostname <value> Use this parameter to specify the port on which to connect to the server(for Kubernetes Environment dxPort is 443) -dxPort <value> Use this parameter to specify the path to DX configuration endpoint (for example: /wps/config) -xmlConfigPath <value> Use this parameter to specify the XML file name with absolute path of the input file -xmlFile <value> Use this parameter to specify the virtual portal Context -vpContext <value> Limitation: Currently, import virtual portal feature supports only vpContext and does not support vpHostname . Support for Virtual portal with host name might be added in the future release. Example Usage: dxclient manage-virtual-portal import -dxProtocol <http/https> -hostname <host-name> -dxPort <dxPort> -xmlConfigPath <xmlConfigPath> -dxUsername <dxUsername> -dxPassword <dxPassword> -xmlFile <xml-file-with-path> -vpContext <virtual-portal-context> manage-virtual-portal export command: Use this parameter to specify the protocol with which to connect to the server -dxProtocol <value> Use this parameter to specify the user name that is required for authenticating with the server -dxUsername <value> Use this parameter to specify the password that is required for authenticating with the server -dxPassword <value> Use this parameter to specify the host name of the target server -hostname <value> Use this parameter to specify the port on which to connect to the server(for Kubernetes Environment dxPort is 443) -dxPort <value> Use this parameter to specify the path to DX configuration endpoint (for example: /wps/config) -xmlConfigPath <value> Use this parameter to specify the virtual portal Context -vpContext <value> Use this parameter to specify the virtual portal Title -vpTitle <value> Use this parameter to specify the XML file name with absolute path of the input file to export the virtual portal content. -xmlFile <value> Limitation: Currently, exporting virtual portal feature supports only vpContext and does not support vpHostname . Support for Virtual portal with hostname might be added in the future release. Example: dxclient manage-virtual-portal export -hostname <hostname> -dxProtocol <dxProtocol> -dxPort <dxPort> -dxUsername <dxUsername> -dxPassword <dxPassword> -vpTitle <vpTitle> -vpContext <vpContext> -xmlFile <xml-file-with-path> Log files from running the command can be found in the logs directory of the DXClient installation. Parent topic: DXClient Artifact Types","title":"Virtual Portal commands"},{"location":"containerization/wcmlibraries/","text":"Exporting and importing WCM libraries This section provides information about how to export and import WCM libraries using DXClient. Note: WCM export and import supports the WCM JCR nodes format. Export WCM libraries The wcm-library-export command is used to export the WCM libraries from the source server to an output location in the <working-directory>/store/ folder. Command description ``` dxclient wcm-library-export ``` Help command This command shows the help document about the wcm-library-export command: dxclient wcm-library-export -h Command options Use this attribute to specify the user name that is required to authenticate to the server: -dxUsername <value> Use this attribute to specify the password that is required to authenticate to the server: -dxPassword <value> Use this attribute to specify the config wizard home (route change only in case of Open Shift Kubernetes Environment, otherwise same as the hostname) that is required for authenticating to the cw_profile : -dxConnectHostname <value> Use this attribute to specify the port number of the cw_profile (for Kubernetes Environment, dxConnectPort is 443): -dxConnectPort <value> Use this attribute to specify the user name that is required for authenticating to the cw_profile : -dxConnectUsername <value> Use this attribute to specify the password that is required for authenticating to the cw_profile : -dxConnectPassword <value> Use this attribute to specify the user name of the DX WAS server: -dxWASUsername <value> Use this attribute to specify the password of the DX WAS server: -dxWASPassword <value> Use this attribute to specify the profile name of the DX core server: -dxProfileName <Profile name of the DX core server> Use this attribute to specify the names of the WCM libraries of the DX core server (for example, \"hello_library,demo_library\"): -librariesName <value> Use this attribute to specify the export libraries. This value can be either true or false. If the value is true, then export the all libraries: -exportAllLibraries <value> Log files from running the command can be found in the logs directory of the DXClient installation. Example: dxclient wcm-library-export -dxProtocol <dxProtocol> -hostname <hostname> -dxPort <dxPort> -dxUsername <dxUsername> -dxPassword <dxPassword> -dxConnectHostname <dxConnectHostname> -dxConnectUsername <dxConnectUsername> -dxConnectPassword <dxConnectPassword> -dxWASUsername <dxWASUsername> -dxProfileName <dxProfileName> -librariesName <librariesName> Import WCM libraries The wcm-library-import command is used to import the WCM libraries from the source server to the target server. Limitation: Ensure that the WCM import.zip file size is not more than 100MB. This limitation will be addressed in the future release. Command description ``` dxclient wcm-library-import ``` Help command Use this attribute to specify the user name that is required to authenticate to the server: -dxUsername <value> Use this attribute to specify the password that is required to authenticate to the server: -dxPassword <value> Use this attribute to specify the config wizard home (route change only in case of Open Shift Kubernetes Environment, otherwise same as hostname) that is required for authenticating to cw_profile : -dxConnectHostname <value> Use this attribute to specify the port number of the cw_profile (for Kubernetes Environment, dxConnectPort is 443): -dxConnectPort <value> Use this attribute to specify the user name that is required for authenticating to the cw_profile : -dxConnectUsername <value> Use this attribute to specify the password that is required for authenticating to cw_profile : -dxConnectPassword <value> Use this attribute to specify the user name of the DX WAS server: -dxWASUsername <value> Use this attribute to specify the password of the DX WAS server: -dxWASPassword <value> Use this attribute to specify the profile name of the DX core server: -dxProfileName <Profile name of the DX core server> Use this attribute to specify the path to a zip file or folder that contains the WCM libraries: -libFilePath <value> Log files from running the command can be found in the logs directory of the DXClient installation. Example: dxclient wcm-library-import -dxProtocol <dxProtocol> -hostname <hostname> -dxPort <dxPort> -dxUsername <dxUsername> -dxPassword <dxPassword> -dxConnectHostname <dxConnectHostname> -dxConnectUsername <dxConnectUsername> -dxConnectPassword <dxConnectPassword> -dxWASUsername <dxWASUsername> -dxProfileName <dxProfileName> -libFilePath <libFilePath> Parent topic: DXClient Artifact Types","title":"Exporting and importing WCM libraries"},{"location":"containerization/wcmlibraries/#exporting-and-importing-wcm-libraries","text":"This section provides information about how to export and import WCM libraries using DXClient. Note: WCM export and import supports the WCM JCR nodes format.","title":"Exporting and importing WCM libraries"},{"location":"containerization/wcmlibraries/#export-wcm-libraries","text":"The wcm-library-export command is used to export the WCM libraries from the source server to an output location in the <working-directory>/store/ folder. Command description ``` dxclient wcm-library-export ``` Help command This command shows the help document about the wcm-library-export command: dxclient wcm-library-export -h Command options Use this attribute to specify the user name that is required to authenticate to the server: -dxUsername <value> Use this attribute to specify the password that is required to authenticate to the server: -dxPassword <value> Use this attribute to specify the config wizard home (route change only in case of Open Shift Kubernetes Environment, otherwise same as the hostname) that is required for authenticating to the cw_profile : -dxConnectHostname <value> Use this attribute to specify the port number of the cw_profile (for Kubernetes Environment, dxConnectPort is 443): -dxConnectPort <value> Use this attribute to specify the user name that is required for authenticating to the cw_profile : -dxConnectUsername <value> Use this attribute to specify the password that is required for authenticating to the cw_profile : -dxConnectPassword <value> Use this attribute to specify the user name of the DX WAS server: -dxWASUsername <value> Use this attribute to specify the password of the DX WAS server: -dxWASPassword <value> Use this attribute to specify the profile name of the DX core server: -dxProfileName <Profile name of the DX core server> Use this attribute to specify the names of the WCM libraries of the DX core server (for example, \"hello_library,demo_library\"): -librariesName <value> Use this attribute to specify the export libraries. This value can be either true or false. If the value is true, then export the all libraries: -exportAllLibraries <value> Log files from running the command can be found in the logs directory of the DXClient installation. Example: dxclient wcm-library-export -dxProtocol <dxProtocol> -hostname <hostname> -dxPort <dxPort> -dxUsername <dxUsername> -dxPassword <dxPassword> -dxConnectHostname <dxConnectHostname> -dxConnectUsername <dxConnectUsername> -dxConnectPassword <dxConnectPassword> -dxWASUsername <dxWASUsername> -dxProfileName <dxProfileName> -librariesName <librariesName>","title":"Export WCM libraries"},{"location":"containerization/wcmlibraries/#import-wcm-libraries","text":"The wcm-library-import command is used to import the WCM libraries from the source server to the target server. Limitation: Ensure that the WCM import.zip file size is not more than 100MB. This limitation will be addressed in the future release. Command description ``` dxclient wcm-library-import ``` Help command Use this attribute to specify the user name that is required to authenticate to the server: -dxUsername <value> Use this attribute to specify the password that is required to authenticate to the server: -dxPassword <value> Use this attribute to specify the config wizard home (route change only in case of Open Shift Kubernetes Environment, otherwise same as hostname) that is required for authenticating to cw_profile : -dxConnectHostname <value> Use this attribute to specify the port number of the cw_profile (for Kubernetes Environment, dxConnectPort is 443): -dxConnectPort <value> Use this attribute to specify the user name that is required for authenticating to the cw_profile : -dxConnectUsername <value> Use this attribute to specify the password that is required for authenticating to cw_profile : -dxConnectPassword <value> Use this attribute to specify the user name of the DX WAS server: -dxWASUsername <value> Use this attribute to specify the password of the DX WAS server: -dxWASPassword <value> Use this attribute to specify the profile name of the DX core server: -dxProfileName <Profile name of the DX core server> Use this attribute to specify the path to a zip file or folder that contains the WCM libraries: -libFilePath <value> Log files from running the command can be found in the logs directory of the DXClient installation. Example: dxclient wcm-library-import -dxProtocol <dxProtocol> -hostname <hostname> -dxPort <dxPort> -dxUsername <dxUsername> -dxPassword <dxPassword> -dxConnectHostname <dxConnectHostname> -dxConnectUsername <dxConnectUsername> -dxConnectPassword <dxConnectPassword> -dxWASUsername <dxWASUsername> -dxProfileName <dxProfileName> -libFilePath <libFilePath> Parent topic: DXClient Artifact Types","title":"Import WCM libraries"},{"location":"containerization/xmlaccess/","text":"XML Access This topic provides information about the xmlaccess command that is used to export or import portlet configurations. XML Access The xmlaccess command is used to export or import pages or portlet configurations from a target HCL DX 9.5 CF19 or later server using the input XMLAccess file. Required file XMLAccess file : This XML file must contain the configuration update or export operation for the web application. Command dxclient xmlaccess -xmlFile <path> Help command This command shows the help information for xmlaccess command usage: dxclient xmlaccess -h Command options Use this attribute to specify the protocol with which to connect to the DX server (wp_profile): -dxProtocol <value> Use this attribute to specify the hostname of the target DX server: -hostname <value> Use this attribute to specify the port on which to connect to the DX server ( wp_profile ): -dxPort <value> Use this attribute to specify the path to DX configuration endpoint (e.g. /wps/config): -xmlConfigPath <value> Use this attribute to specify the username to authenticate with the DX server ( wp_profile ): -dxUsername <value> Use this attribute to specify the password for the user in the dxUsername attribute: -dxPassword <value> Use this attribute to specify the local path to the XMLAccess file: -xmlFile <Absolute or relative path to xmlaccess input file> Command options passed through the command line overrides values set in the config.json file. Log files from command execution can be found in the logs directory of the DXClient installation. Example: dxclient xmlaccess -xmlFile <xml-file-with-path> Parent topic: DXClient Artifact Types","title":"XML Access"},{"location":"containerization/xmlaccess/#xml-access","text":"This topic provides information about the xmlaccess command that is used to export or import portlet configurations.","title":"XML Access"},{"location":"containerization/xmlaccess/#xml-access_1","text":"The xmlaccess command is used to export or import pages or portlet configurations from a target HCL DX 9.5 CF19 or later server using the input XMLAccess file. Required file XMLAccess file : This XML file must contain the configuration update or export operation for the web application. Command dxclient xmlaccess -xmlFile <path> Help command This command shows the help information for xmlaccess command usage: dxclient xmlaccess -h Command options Use this attribute to specify the protocol with which to connect to the DX server (wp_profile): -dxProtocol <value> Use this attribute to specify the hostname of the target DX server: -hostname <value> Use this attribute to specify the port on which to connect to the DX server ( wp_profile ): -dxPort <value> Use this attribute to specify the path to DX configuration endpoint (e.g. /wps/config): -xmlConfigPath <value> Use this attribute to specify the username to authenticate with the DX server ( wp_profile ): -dxUsername <value> Use this attribute to specify the password for the user in the dxUsername attribute: -dxPassword <value> Use this attribute to specify the local path to the XMLAccess file: -xmlFile <Absolute or relative path to xmlaccess input file> Command options passed through the command line overrides values set in the config.json file. Log files from command execution can be found in the logs directory of the DXClient installation. Example: dxclient xmlaccess -xmlFile <xml-file-with-path> Parent topic: DXClient Artifact Types","title":"XML Access"},{"location":"containerization/docker/docker_compose/","text":"Docker image deployment using Docker Compose This section presents availability of a new option to deploy HCL Digital Experience 9.5 Docker images for non-production using Docker Compose . This approach streamlines deployment and configuration of HCL DX 9.5 components. For more information about Docker Compose, see the Docker Compose documentation . Pre-requisite: Download the Docker images for the HCL DX 9.5 Container Update version you wish to deploy. From your HCL Digital Experience entitlements in the HCL Software License Portal , the Docker images are in the HCL_Portal_8.5_9.0_9.5_CFs download package entry. Refer to the Docker image list for the latest HCL DX 9.5 container update releases. Find the HCL DX 9.5 Docker Compose scripts, installation and configuration instructions for non-production use in the repositories on the HCL Software Github . Use the HCL-DX tag to find the DX Docker Compose entry. Video: Use Docker Compose to install HCL DX 9.5 with Cloud Components for Developer Use","title":"Docker image deployment using Docker Compose"},{"location":"containerization/docker/docker_compose/#docker-image-deployment-using-docker-compose","text":"This section presents availability of a new option to deploy HCL Digital Experience 9.5 Docker images for non-production using Docker Compose . This approach streamlines deployment and configuration of HCL DX 9.5 components. For more information about Docker Compose, see the Docker Compose documentation . Pre-requisite: Download the Docker images for the HCL DX 9.5 Container Update version you wish to deploy. From your HCL Digital Experience entitlements in the HCL Software License Portal , the Docker images are in the HCL_Portal_8.5_9.0_9.5_CFs download package entry. Refer to the Docker image list for the latest HCL DX 9.5 container update releases. Find the HCL DX 9.5 Docker Compose scripts, installation and configuration instructions for non-production use in the repositories on the HCL Software Github . Use the HCL-DX tag to find the DX Docker Compose entry. Video: Use Docker Compose to install HCL DX 9.5 with Cloud Components for Developer Use","title":"Docker image deployment using Docker Compose"},{"location":"containerization/docker/docker_image_deployment/","text":"Docker image deployment This section describes the steps in deploying HCL Digital Experience 9.5 containers using Docker. Follow these steps to deploy the HCL Digital Experience 9.5 and later CF container update releases in Docker. Download the Docker image from your HCL Digital Experience entitlements in the HCL Software License Portal , in the HCL_Portal_8.5_9.0_9.5_CFs download package entry. Refer to the Docker image list for the latest HCL DX 9.5 container update releases. Open a terminal window and change to the root directory of the extracted package. Load the container into your Docker repository: docker load < hcl-dx-core-image-v95-xxxxxxxx-xxxx.tar.gz Run the HCL DX Docker container using either of the following commands: ``` docker run -p 10038:10038 -p 10039:10039 -p 10041:10041 -p 10042:10042 -p 10200:10200 -p 10202:10202 hcl/dx/core:v95_xxxxxxxx-xxxx - ``` docker run -p 10038:10038 -p 10039:10039 -p 10041:10041 -p 10042:10042 -p 10200:10200 -p 10202:10202 -v ~/dx-store/ wp_profile:/opt/HCL/wp_profile hcl/dx/core:v95_xxxxxxxx-xxxx In HCL DX 9.5 CF171, Administrators can use this command to run the container if credentials have been updated: - ``` docker run -e WAS_ADMIN=wasadmin -e WAS_PASSWORD=wasadminpwd -e DX_ADMIN=dxadmin -e DX_PASSWORD=dxadminpwd -p 10038:10038 -p 10039:10039 -p 10041:10041 -p 10042:10042 -p 10200:10200 -p 10202:10202 -v ~/dx-store/wp_profile:/opt/HCL/wp_profile hcl/dx/core:v95_xxxxxxxx-xxxx The additional syntax adds the ability for users to pass updated credentials for the HCL Portal Administrators. - ``` -e WAS_ADMIN=wasadmin - ``` -e WAS_PASSWORD=wasadminpwd - ``` -e DX_ADMIN=dxadmin - ``` -e DX_PASSWORD=dxadminpwd ``` **Notes:** - Make sure the ~/dx-store/wp\\_profile directory is created before you start the Docker container. This is required for persistence \\(for using `-v ~/dx-store/wp_profile:/opt/HCL/wp_profile hcl/dx/ core:v95_xxxxxxxx-xxxx`\\). - To use the HCL DX Configuration Wizard, start the Java virtual machine \\(JVM\\) within the running container with the following command: ``` docker exec <CONTAINER ID> /opt/HCL/AppServer/profiles/cw_profile/bin/startServer.sh server1 ``` - For HCL DX 9.5 CF171 and later, access the Configuration Wizard at https://localhost:10202/hcl/wizard. **Note:** For HCL DX 9.5 release earlier than CF171, access the Configuration Wizard at https://localhost:10202/ibm/wizard. - Upgrading an existing HCL DX 9.5 Docker container, using a persisted volume, to HCL DX 9.5 CF171 or HCL DX 9.5 CF172 may require launching the upgraded container twice. For example, if the following command fails with an error, re-running the command allows a successful upgrade and launch the container: ``` docker run -e WAS_ADMIN=wasadmin -e WAS_PASSWORD=wasadminpwd -e DX_ADMIN=dxadmin -e DX_PASSWORD=dxadminpwd -p 10038:10038 -p 10039:10039 -p 10041:10041 -p 10042:10042 -p 10200:10200 -p 10202:10202 -v ~/dx-store/wp_profile:/opt/HCL/wp_profile hcl/dx/core:v95_xxxxxxxx-xxxx ``` This issue is fixed in HCL DX 9.5 CF173. See the following sections for additional information: - [How to upload HCL Digital Experience 9.5 CF container images to a private repository](https://youtu.be/XJONRdpgCuo) - [Docker image list](docker_image_deployment.md) - [Customizing the container deployment](customizing_container_deployment.md) - [Containerization Limitations/Requirements](limitations_requirements.md)","title":"Docker image deployment"},{"location":"containerization/docker/docker_image_deployment/#docker-image-deployment","text":"This section describes the steps in deploying HCL Digital Experience 9.5 containers using Docker. Follow these steps to deploy the HCL Digital Experience 9.5 and later CF container update releases in Docker. Download the Docker image from your HCL Digital Experience entitlements in the HCL Software License Portal , in the HCL_Portal_8.5_9.0_9.5_CFs download package entry. Refer to the Docker image list for the latest HCL DX 9.5 container update releases. Open a terminal window and change to the root directory of the extracted package. Load the container into your Docker repository: docker load < hcl-dx-core-image-v95-xxxxxxxx-xxxx.tar.gz Run the HCL DX Docker container using either of the following commands: ``` docker run -p 10038:10038 -p 10039:10039 -p 10041:10041 -p 10042:10042 -p 10200:10200 -p 10202:10202 hcl/dx/core:v95_xxxxxxxx-xxxx - ``` docker run -p 10038:10038 -p 10039:10039 -p 10041:10041 -p 10042:10042 -p 10200:10200 -p 10202:10202 -v ~/dx-store/ wp_profile:/opt/HCL/wp_profile hcl/dx/core:v95_xxxxxxxx-xxxx In HCL DX 9.5 CF171, Administrators can use this command to run the container if credentials have been updated: - ``` docker run -e WAS_ADMIN=wasadmin -e WAS_PASSWORD=wasadminpwd -e DX_ADMIN=dxadmin -e DX_PASSWORD=dxadminpwd -p 10038:10038 -p 10039:10039 -p 10041:10041 -p 10042:10042 -p 10200:10200 -p 10202:10202 -v ~/dx-store/wp_profile:/opt/HCL/wp_profile hcl/dx/core:v95_xxxxxxxx-xxxx The additional syntax adds the ability for users to pass updated credentials for the HCL Portal Administrators. - ``` -e WAS_ADMIN=wasadmin - ``` -e WAS_PASSWORD=wasadminpwd - ``` -e DX_ADMIN=dxadmin - ``` -e DX_PASSWORD=dxadminpwd ``` **Notes:** - Make sure the ~/dx-store/wp\\_profile directory is created before you start the Docker container. This is required for persistence \\(for using `-v ~/dx-store/wp_profile:/opt/HCL/wp_profile hcl/dx/ core:v95_xxxxxxxx-xxxx`\\). - To use the HCL DX Configuration Wizard, start the Java virtual machine \\(JVM\\) within the running container with the following command: ``` docker exec <CONTAINER ID> /opt/HCL/AppServer/profiles/cw_profile/bin/startServer.sh server1 ``` - For HCL DX 9.5 CF171 and later, access the Configuration Wizard at https://localhost:10202/hcl/wizard. **Note:** For HCL DX 9.5 release earlier than CF171, access the Configuration Wizard at https://localhost:10202/ibm/wizard. - Upgrading an existing HCL DX 9.5 Docker container, using a persisted volume, to HCL DX 9.5 CF171 or HCL DX 9.5 CF172 may require launching the upgraded container twice. For example, if the following command fails with an error, re-running the command allows a successful upgrade and launch the container: ``` docker run -e WAS_ADMIN=wasadmin -e WAS_PASSWORD=wasadminpwd -e DX_ADMIN=dxadmin -e DX_PASSWORD=dxadminpwd -p 10038:10038 -p 10039:10039 -p 10041:10041 -p 10042:10042 -p 10200:10200 -p 10202:10202 -v ~/dx-store/wp_profile:/opt/HCL/wp_profile hcl/dx/core:v95_xxxxxxxx-xxxx ``` This issue is fixed in HCL DX 9.5 CF173. See the following sections for additional information: - [How to upload HCL Digital Experience 9.5 CF container images to a private repository](https://youtu.be/XJONRdpgCuo) - [Docker image list](docker_image_deployment.md) - [Customizing the container deployment](customizing_container_deployment.md) - [Containerization Limitations/Requirements](limitations_requirements.md)","title":"Docker image deployment"},{"location":"containerization/docker/docker_overview/","text":"Docker images for HCL Digital Experience 9.5 HCL Digital Experience 9.5 supports deployments on Docker and popular Kubernetes platforms. Learn more about the latest list of container images and supported deployment platforms. HCL Digital Experience 9.5 core and related component images are provided in your HCL Digital Experience entitlements in the HCL Software Licensing Portal . For the latest list of container images and supported deployment platforms please consult the Docker containers Deployment topic pages in this section. Overview Docker is a platform for developers and sysadmins to develop, deploy, and run applications with containers. Containerization is the use of Linux containers to deploy applications. While the use of containers to deploy applications is not new, containers are favored due to the ease of deploying applications like the latest version of HCL Digital Experience. The HCL Digital Experience containers are launched by running a runtime instance of an image. An image is an executable package that includes everything needed to run the HCL Digital Experience 9.5 application, including the code, a runtime, libraries, environment variables, and configuration files. Because it runs a discrete process, it does not take any more memory other than the executable image with state or user process. Installation, Deployment and Migration Guidance Proceed to the Deployment topic page and follow the installation steps outlined in the Docker or supported Kubernetes platform of choice. Documentation resource: Deployment To migrate an existing on-premises platform Digital Experience deployment to a supported Kubernetes platform, access the Staging topic page in this section. Documentation resource: Staging Once you have completed a Digital Experience 9.5 Container deployment, to update the DX 9.5 container images to the latest Container Update releases, follow steps outlined in the Container Maintenance Help Center topic in this section. Documentation resource: Maintenance Parent topic: DX on Docker","title":"Digital Experience on Docker"},{"location":"containerization/docker/docker_overview/#docker-images-for-hcl-digital-experience-95","text":"HCL Digital Experience 9.5 supports deployments on Docker and popular Kubernetes platforms. Learn more about the latest list of container images and supported deployment platforms. HCL Digital Experience 9.5 core and related component images are provided in your HCL Digital Experience entitlements in the HCL Software Licensing Portal . For the latest list of container images and supported deployment platforms please consult the Docker containers Deployment topic pages in this section.","title":"Docker images for HCL Digital Experience 9.5"},{"location":"containerization/docker/docker_overview/#overview","text":"Docker is a platform for developers and sysadmins to develop, deploy, and run applications with containers. Containerization is the use of Linux containers to deploy applications. While the use of containers to deploy applications is not new, containers are favored due to the ease of deploying applications like the latest version of HCL Digital Experience. The HCL Digital Experience containers are launched by running a runtime instance of an image. An image is an executable package that includes everything needed to run the HCL Digital Experience 9.5 application, including the code, a runtime, libraries, environment variables, and configuration files. Because it runs a discrete process, it does not take any more memory other than the executable image with state or user process.","title":"Overview"},{"location":"containerization/docker/docker_overview/#installation-deployment-and-migration-guidance","text":"Proceed to the Deployment topic page and follow the installation steps outlined in the Docker or supported Kubernetes platform of choice. Documentation resource: Deployment To migrate an existing on-premises platform Digital Experience deployment to a supported Kubernetes platform, access the Staging topic page in this section. Documentation resource: Staging Once you have completed a Digital Experience 9.5 Container deployment, to update the DX 9.5 container images to the latest Container Update releases, follow steps outlined in the Container Maintenance Help Center topic in this section. Documentation resource: Maintenance Parent topic: DX on Docker","title":"Installation, Deployment and Migration Guidance"},{"location":"containerization/docker/docker_remote_search/","text":"Configure Remote Search in Docker This section shows how to configure Remote Search for your HCL Digital Experience 9.5 Docker containers. Introduction To support search services when deployed to Docker container platforms in Kubernetes, administrators should configure Remote Search services. This requires a different setup and configuration steps than those used to set up Remote Search on a non-Docker container platform . Some differences in the non-Docker container platform procedures are outlined below: The serverindex.xml file on the Remote Search server when deployed to on-premises environments may have a host name that is not accurate in a container environment with respect to the actual host name of the server hosting the Remote Search server. Since Docker dynamically allocates the host names for the containers, the /etc/hosts file doesn\u2019t have static entries for the HCL Digital Experience 9.5 container-based server nor the Remote Search server. The WebSphere Application Server ND Administration console will not have correct host names for the HCL Digital Experience container. Deploying Remote Search in HCL Digital Experience 9.5 Docker containers Prerequisite : Download the HCL Digital Experience 9.5 Docker containers from your HCL Digital Experience entitlements from the HCL Software License Portal . The HCL DX 9.5 container update CF181 and higher packages will include a core software and Remote search container. Load both of these images into your Docker repository via the \u201cdocker load\u201d command. Note that if your organization has deployed these containers to a corporate Docker repository, you might use \u201cdocker pull\u201d instead to put it into your local repository. In this example, two Docker images and names are referred to. If a higher HCL Digital Experience 9.5 Container Update release is used, for example, HCL Digital Experience 9.5 CF181, the image names may vary. hcl-dx-core-image-v95_CF181_xxxxxxxx-xxxx.tar.gz hcl-dx-dxrs-image-v95_CF181_xxxxxxxx-xxxx.tar.gz EJBs and host names HCL Digital Experience 9.5 Container core and Portal Remote Search each use WebSphere Application Server as a base. As these components are on different hosts (containers), they need to communicate via IP. The initial conversation between HCL Digital Experience 9.5 core and the Remote Search server takes place over IIOP (rmi) which is the internet protocol of EJBs. Ideally, the /etc/hosts file of both containers would have the host name of the other. In other words, the /etc/hosts file of the HCL Digital Experience Container core would have a host reference for the Remote Search and vice versa. However, three factors make this impossible. The containers are based on Red Hat UBI, the /etc/hosts file is owned by root , and the root password (and sudo ) is not available. Apply the command below to define host references for the Remote Search service from the Digital Experience Container core. Therefore, a way to force Docker to write the /etc/hosts file at container initialization time is needed. This is done via the Docker switch add-host . The situation is further complicated (at least on Linux) by the fact that containers on the default bridge network of Docker cannot DNS name resolve other containers on the same subnet. Therefore, one uses the Docker host as a proxy and starts both containers with the following: docker run \u2013add-host=dockerhost:172.19.0.1 \u2026 This has the effect of adding an entry in the /etc/hosts file on the HCL Digital Experience 9.5 Container core like this: 172.19.0.1 dockerhost Those familiar with Docker deployment practices will recognize 171.19.0.1 as the IP bridge address of the host machine that starts the Docker containers. Since all Docker containers have unique ports and the Docker host machine is not allowed to use these unique ports, one can refer to a port on any container as dockerhost:port_number . Launch the HCL Digital Experience 9.5 Core and Remote Search containers To deploy, following is the complete docker run command for both the HCL Digital Experience 9.5 Core and Remote Search containers. In these examples, wpsadmin / wpsadmin are used as the HCL Digital Experience and WebSphere Application Server admin user ID and password credentials. docker run --add-host=dockerhost:172.19.0.1 -d -e WAS_ADMIN=wpsadmin -e WAS_PASSWORD=wpsadmin -e DX_ADMIN=wpsadmin -e DX_PASSWORD=wpsadmin -p 9043:9043 -p 9403:9403 -p 2809:2809 -p 9060:9060 -v /home/dxengineer/Documents/prs_profile:/opt/HCL/AppServer/profiles/prs_profile hcl/dx/dxrs:v95_CF181_20200622-1550 docker run --add-host=dockerhost:172.19.0.1 -d -e WAS_ADMIN=wpsadmin -e WAS_PASSWORD=wpsadmin -e DX_ADMIN=wpsadmin -e DX_PASSWORD=wpsadmin -p 10038:10038 -p 10039:10039 -p 10041:10041 -p 10042:10042 -v /home/dxengineer/Documents/wp_profile:/opt/HCL/wp_profile hcl/dx/core:v95_CF181_20200622-1550 The persisted profile for each container is located at /home/dxengineer/Documents/. The HCL Digital Experience admin username and password are passed as environment variables. Defining serverindex.xml on the Remote Search server On the HCL DX 9.5 container Remote search server, the serverindex.xml file is located at: /opt/HCL/AppServer/profiles/prs_profile/config/cells/{cell name}/nodes/{node name} Note that immediately after the Remote Search server is started (and since the profile is persisted on a persisted sub-directory), this file can be found at: {persisted volume for remote search profile}/prs_profile/config/cells/{cell name}/nodes/{node name} The serverindex.xml file contains 5 lines: host=\u201d{some hostname}\u201d where {some hostname} might likely be \"localhost\" or some host name like \u201c33b7e5004319\u201d . However, remote search will not work correctly until this host name field is replaced with a host name exactly like the host name in the \u201ciiop\u201d url in the search service is coded. So, for example, if your Portal search service has coded the \"iiop\" URL as \u201ciiop://some.host.com:2809\u201d , the host in serverindex.hml needs to be host=\u201dsome.host.com\u201d . It could be that your \"iiop\" url has the host name \"dockerhost\" if your iiop url lets your docker host route that URL. In that case, change these 5 lines to the following: host=\u201ddockerhost\u201d (apply the string \u201cdockerhost\u201d) Upon completion, when the HCL Digital Experience 9.5 Container core server communicates to the container Remote Search server over \"iiop\", the Remote Search server will return \u201cdockerhost\u201d as the host name of the Remote Search server. The HCL Digital Experience 9.5 Container has a configuration that will append the port to the host name that was just returned. Digital Experience instructions for Remote Search configuration The following guidance aligns with the Remote Search services configuration instructions available in the Remote Search services topic for deployment to non-container HCL Digital Experience servers. All of the instructions contained in the Remote Search services topic should also be completed in a Docker-based HCL Digital Experience deployment. The following guidance outlines specific settings that were used in the Remote Search service DX Docker deployment. Create a single sign-on (SSO) domain between HCL Digital Experience 9.5 container and the Remote Search service container by following the non-container on-premises procedure for Creating a single sign-on domain between HCL Portal and the Remote Search service . This entails exchanging SSL certificates and LTPA domain tokens. Note: When retrieving the SSL certificates from the host server, use dockerhost (as the host) and the appropriate port for the SSL access. In the examples, the Remote Search server is on dockerhost:9443 and the DX host is on dockerhost:10042. You must also complete Setting the search user ID and Removing search collections before creating a new search service. Create a new search service and use the following values for a Remote Search services configuration to a Docker container deployment. See the section on Creating a new search service for more information. Item Value IIOP_URL iiop://dockerhost:2809 PSE TYPE Select ejb from the pull down. EJB ejb/com/ibm/hrl/portlets/WsPse/WebScannerLiteEJBHome DefaultCollectionsDirectory Leave empty. Search service implementation Select Portal Search Service Type from the pull down. CONFIG_FOLDER_PATH Did not set (differs from non-container instructions). Note: Once completed and saved, the HCL Digital Experience 9.5 container deployment has a new search service called Remote PSE service EJB , with a green check mark confirming that the service was correctly set up and is able to communicate with the Remote Search container. Based on the previously created Remote Search service, create a Portal Search Collection and a JCR Search Collection using the following parameters. Use the following parameters to create a Portal search collection . Parameter Value Search collection name Portal Search Collection Search collection location /opt/HCL/AppServer/profiles/prs_profile/SearchCollections/PortalSearchCollection Portal Search Content Source Configuration. Use the following URL for Collect documents linked from this URL : https://dockerhost:10042/wps/seedlist/myserver?Source=com.ibm.lotus.search.plugins.seedlist.retriever.portal.PortalRetrieverFactory&amp;Action=GetDocuments&amp;Range=100&amp;locale=en-US Note: The host and port are the Docker host and port to which 10042 is mapped. In this case, 10042 is the HttpQueueInboundDefaultSecure port on the HCL Digital Experience server. Note that you can also put this URL in a browser (on the Docker host) and confirm that the response is an ATOM feed. On the Security panel, use dockerhost as the host name, along with the username wpsadmin and the associated password for wpsadmin . Use the following parameters to create a JCR search collection . Parameter Value Search collection name JCRCollection1 Search collection location /opt/HCL/AppServer/profiles/prs_profile/SearchCollections/JCRCollection1 JCR Content Source Configuration. Use the following URL for Collect documents linked from this URL : https://dockerhost:10042/wps/seedlist/myserver?Action=GetDocuments&amp;Format=ATOM&amp;Locale=en_US&amp;Range=100&amp;Source=com.ibm.lotus.search.plugins.seedlist.retriever.jcr.JCRRetrieverFactory&amp;Start=0&amp;SeedlistId=1@OOTB_CRAWLER1 Note: The host and port are the Docker host and port to which 10042 is mapped. In this case, 10042 is the HttpQueueInboundDefaultSecure port on the HCL Digital Experience server. Note that you can also put this URL in a browser (on the Docker host) and confirm that the response is an ATOM feed. On the Security panel, use dockerhost as the host name, along with the username wpsadmin and the associated password for wpsadmin . Configure WCM Authoring Portlet search function. Note: Even though the documents are gathered by the Remote Search function from the JCR, additional configuration is needed in order for the HCL Web Content Manager (WCM) Authoring Portlet search to use document search. Set the following values for this configuration. Set the Custom properties for the WebSphere Application Server Resource Environment Provider, JCR ConfigService , using the following values: Property Value jcr.textsearch.enabled true jcr.textsearch.indexdirectory /opt/HCL/AppServer/profiles/prs_profile/SearchCollections jcr.textsearch.PSE.type ejb jcr.textsearch.EJB.IIOP.URL iiop://dockerhost:2809 jcr.textsearch.EJB.EJBName ejb/com/ibm/hrl/portlets/WsPse/WebScannerLiteEJBHome Note: On the jcr.textsearch.indexdirectory , the sub-directory JCRCollection1 is NOT included in the path. Parent topic: Customizing your container deployment","title":"Configure Remote Search in Docker"},{"location":"containerization/docker/docker_remote_search/#configure-remote-search-in-docker","text":"This section shows how to configure Remote Search for your HCL Digital Experience 9.5 Docker containers.","title":"Configure Remote Search in Docker"},{"location":"containerization/docker/docker_remote_search/#introduction","text":"To support search services when deployed to Docker container platforms in Kubernetes, administrators should configure Remote Search services. This requires a different setup and configuration steps than those used to set up Remote Search on a non-Docker container platform . Some differences in the non-Docker container platform procedures are outlined below: The serverindex.xml file on the Remote Search server when deployed to on-premises environments may have a host name that is not accurate in a container environment with respect to the actual host name of the server hosting the Remote Search server. Since Docker dynamically allocates the host names for the containers, the /etc/hosts file doesn\u2019t have static entries for the HCL Digital Experience 9.5 container-based server nor the Remote Search server. The WebSphere Application Server ND Administration console will not have correct host names for the HCL Digital Experience container.","title":"Introduction"},{"location":"containerization/docker/docker_remote_search/#deploying-remote-search-in-hcl-digital-experience-95-docker-containers","text":"Prerequisite : Download the HCL Digital Experience 9.5 Docker containers from your HCL Digital Experience entitlements from the HCL Software License Portal . The HCL DX 9.5 container update CF181 and higher packages will include a core software and Remote search container. Load both of these images into your Docker repository via the \u201cdocker load\u201d command. Note that if your organization has deployed these containers to a corporate Docker repository, you might use \u201cdocker pull\u201d instead to put it into your local repository. In this example, two Docker images and names are referred to. If a higher HCL Digital Experience 9.5 Container Update release is used, for example, HCL Digital Experience 9.5 CF181, the image names may vary. hcl-dx-core-image-v95_CF181_xxxxxxxx-xxxx.tar.gz hcl-dx-dxrs-image-v95_CF181_xxxxxxxx-xxxx.tar.gz","title":"Deploying Remote Search in HCL Digital Experience 9.5 Docker containers"},{"location":"containerization/docker/docker_remote_search/#ejbs-and-host-names","text":"HCL Digital Experience 9.5 Container core and Portal Remote Search each use WebSphere Application Server as a base. As these components are on different hosts (containers), they need to communicate via IP. The initial conversation between HCL Digital Experience 9.5 core and the Remote Search server takes place over IIOP (rmi) which is the internet protocol of EJBs. Ideally, the /etc/hosts file of both containers would have the host name of the other. In other words, the /etc/hosts file of the HCL Digital Experience Container core would have a host reference for the Remote Search and vice versa. However, three factors make this impossible. The containers are based on Red Hat UBI, the /etc/hosts file is owned by root , and the root password (and sudo ) is not available. Apply the command below to define host references for the Remote Search service from the Digital Experience Container core. Therefore, a way to force Docker to write the /etc/hosts file at container initialization time is needed. This is done via the Docker switch add-host . The situation is further complicated (at least on Linux) by the fact that containers on the default bridge network of Docker cannot DNS name resolve other containers on the same subnet. Therefore, one uses the Docker host as a proxy and starts both containers with the following: docker run \u2013add-host=dockerhost:172.19.0.1 \u2026 This has the effect of adding an entry in the /etc/hosts file on the HCL Digital Experience 9.5 Container core like this: 172.19.0.1 dockerhost Those familiar with Docker deployment practices will recognize 171.19.0.1 as the IP bridge address of the host machine that starts the Docker containers. Since all Docker containers have unique ports and the Docker host machine is not allowed to use these unique ports, one can refer to a port on any container as dockerhost:port_number .","title":"EJBs and host names"},{"location":"containerization/docker/docker_remote_search/#launch-the-hcl-digital-experience-95-core-and-remote-search-containers","text":"To deploy, following is the complete docker run command for both the HCL Digital Experience 9.5 Core and Remote Search containers. In these examples, wpsadmin / wpsadmin are used as the HCL Digital Experience and WebSphere Application Server admin user ID and password credentials. docker run --add-host=dockerhost:172.19.0.1 -d -e WAS_ADMIN=wpsadmin -e WAS_PASSWORD=wpsadmin -e DX_ADMIN=wpsadmin -e DX_PASSWORD=wpsadmin -p 9043:9043 -p 9403:9403 -p 2809:2809 -p 9060:9060 -v /home/dxengineer/Documents/prs_profile:/opt/HCL/AppServer/profiles/prs_profile hcl/dx/dxrs:v95_CF181_20200622-1550 docker run --add-host=dockerhost:172.19.0.1 -d -e WAS_ADMIN=wpsadmin -e WAS_PASSWORD=wpsadmin -e DX_ADMIN=wpsadmin -e DX_PASSWORD=wpsadmin -p 10038:10038 -p 10039:10039 -p 10041:10041 -p 10042:10042 -v /home/dxengineer/Documents/wp_profile:/opt/HCL/wp_profile hcl/dx/core:v95_CF181_20200622-1550 The persisted profile for each container is located at /home/dxengineer/Documents/. The HCL Digital Experience admin username and password are passed as environment variables.","title":"Launch the HCL Digital Experience 9.5 Core and Remote Search containers"},{"location":"containerization/docker/docker_remote_search/#defining-serverindexxml-on-the-remote-search-server","text":"On the HCL DX 9.5 container Remote search server, the serverindex.xml file is located at: /opt/HCL/AppServer/profiles/prs_profile/config/cells/{cell name}/nodes/{node name} Note that immediately after the Remote Search server is started (and since the profile is persisted on a persisted sub-directory), this file can be found at: {persisted volume for remote search profile}/prs_profile/config/cells/{cell name}/nodes/{node name} The serverindex.xml file contains 5 lines: host=\u201d{some hostname}\u201d where {some hostname} might likely be \"localhost\" or some host name like \u201c33b7e5004319\u201d . However, remote search will not work correctly until this host name field is replaced with a host name exactly like the host name in the \u201ciiop\u201d url in the search service is coded. So, for example, if your Portal search service has coded the \"iiop\" URL as \u201ciiop://some.host.com:2809\u201d , the host in serverindex.hml needs to be host=\u201dsome.host.com\u201d . It could be that your \"iiop\" url has the host name \"dockerhost\" if your iiop url lets your docker host route that URL. In that case, change these 5 lines to the following: host=\u201ddockerhost\u201d (apply the string \u201cdockerhost\u201d) Upon completion, when the HCL Digital Experience 9.5 Container core server communicates to the container Remote Search server over \"iiop\", the Remote Search server will return \u201cdockerhost\u201d as the host name of the Remote Search server. The HCL Digital Experience 9.5 Container has a configuration that will append the port to the host name that was just returned.","title":"Defining serverindex.xml on the Remote Search server"},{"location":"containerization/docker/docker_remote_search/#digital-experience-instructions-for-remote-search-configuration","text":"The following guidance aligns with the Remote Search services configuration instructions available in the Remote Search services topic for deployment to non-container HCL Digital Experience servers. All of the instructions contained in the Remote Search services topic should also be completed in a Docker-based HCL Digital Experience deployment. The following guidance outlines specific settings that were used in the Remote Search service DX Docker deployment. Create a single sign-on (SSO) domain between HCL Digital Experience 9.5 container and the Remote Search service container by following the non-container on-premises procedure for Creating a single sign-on domain between HCL Portal and the Remote Search service . This entails exchanging SSL certificates and LTPA domain tokens. Note: When retrieving the SSL certificates from the host server, use dockerhost (as the host) and the appropriate port for the SSL access. In the examples, the Remote Search server is on dockerhost:9443 and the DX host is on dockerhost:10042. You must also complete Setting the search user ID and Removing search collections before creating a new search service. Create a new search service and use the following values for a Remote Search services configuration to a Docker container deployment. See the section on Creating a new search service for more information. Item Value IIOP_URL iiop://dockerhost:2809 PSE TYPE Select ejb from the pull down. EJB ejb/com/ibm/hrl/portlets/WsPse/WebScannerLiteEJBHome DefaultCollectionsDirectory Leave empty. Search service implementation Select Portal Search Service Type from the pull down. CONFIG_FOLDER_PATH Did not set (differs from non-container instructions). Note: Once completed and saved, the HCL Digital Experience 9.5 container deployment has a new search service called Remote PSE service EJB , with a green check mark confirming that the service was correctly set up and is able to communicate with the Remote Search container. Based on the previously created Remote Search service, create a Portal Search Collection and a JCR Search Collection using the following parameters. Use the following parameters to create a Portal search collection . Parameter Value Search collection name Portal Search Collection Search collection location /opt/HCL/AppServer/profiles/prs_profile/SearchCollections/PortalSearchCollection Portal Search Content Source Configuration. Use the following URL for Collect documents linked from this URL : https://dockerhost:10042/wps/seedlist/myserver?Source=com.ibm.lotus.search.plugins.seedlist.retriever.portal.PortalRetrieverFactory&amp;Action=GetDocuments&amp;Range=100&amp;locale=en-US Note: The host and port are the Docker host and port to which 10042 is mapped. In this case, 10042 is the HttpQueueInboundDefaultSecure port on the HCL Digital Experience server. Note that you can also put this URL in a browser (on the Docker host) and confirm that the response is an ATOM feed. On the Security panel, use dockerhost as the host name, along with the username wpsadmin and the associated password for wpsadmin . Use the following parameters to create a JCR search collection . Parameter Value Search collection name JCRCollection1 Search collection location /opt/HCL/AppServer/profiles/prs_profile/SearchCollections/JCRCollection1 JCR Content Source Configuration. Use the following URL for Collect documents linked from this URL : https://dockerhost:10042/wps/seedlist/myserver?Action=GetDocuments&amp;Format=ATOM&amp;Locale=en_US&amp;Range=100&amp;Source=com.ibm.lotus.search.plugins.seedlist.retriever.jcr.JCRRetrieverFactory&amp;Start=0&amp;SeedlistId=1@OOTB_CRAWLER1 Note: The host and port are the Docker host and port to which 10042 is mapped. In this case, 10042 is the HttpQueueInboundDefaultSecure port on the HCL Digital Experience server. Note that you can also put this URL in a browser (on the Docker host) and confirm that the response is an ATOM feed. On the Security panel, use dockerhost as the host name, along with the username wpsadmin and the associated password for wpsadmin . Configure WCM Authoring Portlet search function. Note: Even though the documents are gathered by the Remote Search function from the JCR, additional configuration is needed in order for the HCL Web Content Manager (WCM) Authoring Portlet search to use document search. Set the following values for this configuration. Set the Custom properties for the WebSphere Application Server Resource Environment Provider, JCR ConfigService , using the following values: Property Value jcr.textsearch.enabled true jcr.textsearch.indexdirectory /opt/HCL/AppServer/profiles/prs_profile/SearchCollections jcr.textsearch.PSE.type ejb jcr.textsearch.EJB.IIOP.URL iiop://dockerhost:2809 jcr.textsearch.EJB.EJBName ejb/com/ibm/hrl/portlets/WsPse/WebScannerLiteEJBHome Note: On the jcr.textsearch.indexdirectory , the sub-directory JCRCollection1 is NOT included in the path. Parent topic: Customizing your container deployment","title":"Digital Experience instructions for Remote Search configuration"},{"location":"containerization/helm/configure_deployment_helm/","text":"Configuring DX 9.5 deployments to container platforms using Helm This topic covers details the configuration structure in the HCL Digital Experience 9.5 OpenShift and Kubernetes deployment with Helm. Configuration overview In the DX 9.5 component definitions, each application has a dedicated ConfigMap. They contain application specific key/value pairs that are derived from the templates in the DX 9.5 Helm Chart and the values inside the values.yaml (and/or your custom value overrides). Rollout of configuration changes Configuration changes are automatically processed by the HCL Digital Experience 9.5 OpenShift or Kubernetes deployment with Helm. DX 9.5 Container Upgrades Via Helm Operations Details Beginning with HCL DX 9.5 Container Upgrade CF196, Helm deployment is supported on the Google Kubernetes Engine platform (GKE). As Helm deployment methods are supported on the additional DX 9.5 supported OpenShift or Kubernetes platform of choice, it is recommended that administrators use Helm deployment to manage upgrade processes. Note that use of dxctl to manage these operations is also supported, but will be deprecated over time in favor of Helm. When supported on the additional DX 9.5 container platforms, the recommended way to change the configuration of a running deployment is via a Helm upgrade. Once the upgrade command is executed, it calculates and apply all changes that derive from the changes that have been made to the values definitions. The DX Helm deployment uses annotations on each application to share the checksum of the last ConfigMap. This checksum is updated as soon as Helm upgrade is performed and that there has been a change to the configuration of an application. When the checksum is updated, OpenShift or Kubernetes proceeds to roll out the new configuration. Based on the count of Pods per application that you are running, this may cause a downtime in operations. To minimize the impact of operations to configuration changes processing, consider running at least a quorum of 3 Pods per application. This allows OpenShift and Kubernetes to properly roll out the new configurations and maintain availability of the applications operations throughout the entire upgrade processing cycle. Direct Configuration changes in Kubernetes or OpenShift For development and testing, sometimes it is useful to directly adjust configuration in ConfigMaps via Kubernetes (for example, kubectl edit cm ) or OpenShift commands. In that case, the runtime controller is to notice that there has been a change to a ConfigMap and calculates the checksum for the Pod specification of the affected application. Kubernetes or OpenShift thens proceed to roll out the new configuration. This is the same processing methodology applies as when using Helm upgrade definitions. Note: It is recommended that administrators use Helm upgrade for configuration changes, as the DX 9.5 Helm chart contains logic to calculate certain values. If you choose to edit ConfigMaps directly in the Kubernetes or OpenShift console, do note that running a Helm upgrade overwrites the settings you inserted directly/manually in your deployment. It is recommended to apply configuration changes directly on an as-needed basis and only for development and testing purposes. Please also ensure that the keys used inside the ConfigMap are ordered alphabetically . List of HCL DX 9.5 ConfigMaps Name Application <RELEASE-NAME>-content-composer Content Composer <RELEASE-NAME>-core Core <RELEASE-NAME>-design-studio Design Studio (beta) <RELEASE-NAME>-digital-asset-management Digital Asset Management <RELEASE-NAME>-image-processor Image Processor <RELEASE-NAME>-persistence Persistence <RELEASE-NAME>-ring-api Ring API <RELEASE-NAME>-runtime-controller Runtime Controller Parent topic: Overview of the Helm architecture","title":"Configuring DX 9.5 deployments to container platforms using Helm"},{"location":"containerization/helm/configure_deployment_helm/#configuring-dx-95-deployments-to-container-platforms-using-helm","text":"This topic covers details the configuration structure in the HCL Digital Experience 9.5 OpenShift and Kubernetes deployment with Helm.","title":"Configuring DX 9.5 deployments to container platforms using Helm"},{"location":"containerization/helm/configure_deployment_helm/#configuration-overview","text":"In the DX 9.5 component definitions, each application has a dedicated ConfigMap. They contain application specific key/value pairs that are derived from the templates in the DX 9.5 Helm Chart and the values inside the values.yaml (and/or your custom value overrides).","title":"Configuration overview"},{"location":"containerization/helm/configure_deployment_helm/#rollout-of-configuration-changes","text":"Configuration changes are automatically processed by the HCL Digital Experience 9.5 OpenShift or Kubernetes deployment with Helm. DX 9.5 Container Upgrades Via Helm Operations Details Beginning with HCL DX 9.5 Container Upgrade CF196, Helm deployment is supported on the Google Kubernetes Engine platform (GKE). As Helm deployment methods are supported on the additional DX 9.5 supported OpenShift or Kubernetes platform of choice, it is recommended that administrators use Helm deployment to manage upgrade processes. Note that use of dxctl to manage these operations is also supported, but will be deprecated over time in favor of Helm. When supported on the additional DX 9.5 container platforms, the recommended way to change the configuration of a running deployment is via a Helm upgrade. Once the upgrade command is executed, it calculates and apply all changes that derive from the changes that have been made to the values definitions. The DX Helm deployment uses annotations on each application to share the checksum of the last ConfigMap. This checksum is updated as soon as Helm upgrade is performed and that there has been a change to the configuration of an application. When the checksum is updated, OpenShift or Kubernetes proceeds to roll out the new configuration. Based on the count of Pods per application that you are running, this may cause a downtime in operations. To minimize the impact of operations to configuration changes processing, consider running at least a quorum of 3 Pods per application. This allows OpenShift and Kubernetes to properly roll out the new configurations and maintain availability of the applications operations throughout the entire upgrade processing cycle. Direct Configuration changes in Kubernetes or OpenShift For development and testing, sometimes it is useful to directly adjust configuration in ConfigMaps via Kubernetes (for example, kubectl edit cm ) or OpenShift commands. In that case, the runtime controller is to notice that there has been a change to a ConfigMap and calculates the checksum for the Pod specification of the affected application. Kubernetes or OpenShift thens proceed to roll out the new configuration. This is the same processing methodology applies as when using Helm upgrade definitions. Note: It is recommended that administrators use Helm upgrade for configuration changes, as the DX 9.5 Helm chart contains logic to calculate certain values. If you choose to edit ConfigMaps directly in the Kubernetes or OpenShift console, do note that running a Helm upgrade overwrites the settings you inserted directly/manually in your deployment. It is recommended to apply configuration changes directly on an as-needed basis and only for development and testing purposes. Please also ensure that the keys used inside the ConfigMap are ordered alphabetically .","title":"Rollout of configuration changes"},{"location":"containerization/helm/configure_deployment_helm/#list-of-hcl-dx-95-configmaps","text":"Name Application <RELEASE-NAME>-content-composer Content Composer <RELEASE-NAME>-core Core <RELEASE-NAME>-design-studio Design Studio (beta) <RELEASE-NAME>-digital-asset-management Digital Asset Management <RELEASE-NAME>-image-processor Image Processor <RELEASE-NAME>-persistence Persistence <RELEASE-NAME>-ring-api Ring API <RELEASE-NAME>-runtime-controller Runtime Controller Parent topic: Overview of the Helm architecture","title":"List of HCL DX 9.5 ConfigMaps"},{"location":"containerization/helm/container_scaling_helm/","text":"Scaling DX 9.5 container deployments using Helm This topic provides information to apply container scaling capabilities, and how scaling resources are handled within the HCL DX 9.5 deployment using Helm. Refer to HorizontalPodAutoscaler details in Kubernetes and Red Hat OpenShift documentation for more information on these services. Use of HorizontalPodAutoscalers in DX 9.5 Deployments using Helm The following DX 9.5 applications can be configured to leverage HorizontalPodAutoscalers for Kubernetes and OpenShift based automated scaling: Core Content Composer Design Studio (beta) Digital Asset Management Image Processor Ring API HorizontalPodAutoscalers monitor Pod resources such as CPU and Memory usage, and automatically scales up/down applications based on specific thresholds defined and scaling limits. For the above mentioned DX applications, the maximum and minimum count of Replicas can be configured via the values.yaml. The thresholds for CPU and Memory usage are also configurable allowing for load-based automated scaling of these applications. Per default, the automated scaling is not active and needs to be enabled before taking effect. Known limitations Core The HCL Digital Experience 9.5 Core can only be scaled to more than one Pod if you have performed a database transfer from the default packaged Derby database. Prior to that, any other additional Pod except for Pod-0 fails to start, since the default packaged Derby database does not allow for multiple Pods connecting to it. Persistence The Persistence used for Digital Asset Management currently supports scaling only with the updated persistence feature. For more information, see Digital Asset Management persistence architecture . Parent topic: Overview of the Helm architecture","title":"Scaling DX 9.5 container deployments using Helm"},{"location":"containerization/helm/container_scaling_helm/#scaling-dx-95-container-deployments-using-helm","text":"This topic provides information to apply container scaling capabilities, and how scaling resources are handled within the HCL DX 9.5 deployment using Helm. Refer to HorizontalPodAutoscaler details in Kubernetes and Red Hat OpenShift documentation for more information on these services.","title":"Scaling DX 9.5 container deployments using Helm"},{"location":"containerization/helm/container_scaling_helm/#use-of-horizontalpodautoscalers-in-dx-95-deployments-using-helm","text":"The following DX 9.5 applications can be configured to leverage HorizontalPodAutoscalers for Kubernetes and OpenShift based automated scaling: Core Content Composer Design Studio (beta) Digital Asset Management Image Processor Ring API HorizontalPodAutoscalers monitor Pod resources such as CPU and Memory usage, and automatically scales up/down applications based on specific thresholds defined and scaling limits. For the above mentioned DX applications, the maximum and minimum count of Replicas can be configured via the values.yaml. The thresholds for CPU and Memory usage are also configurable allowing for load-based automated scaling of these applications. Per default, the automated scaling is not active and needs to be enabled before taking effect.","title":"Use of HorizontalPodAutoscalers in DX 9.5 Deployments using Helm"},{"location":"containerization/helm/container_scaling_helm/#known-limitations","text":"Core The HCL Digital Experience 9.5 Core can only be scaled to more than one Pod if you have performed a database transfer from the default packaged Derby database. Prior to that, any other additional Pod except for Pod-0 fails to start, since the default packaged Derby database does not allow for multiple Pods connecting to it. Persistence The Persistence used for Digital Asset Management currently supports scaling only with the updated persistence feature. For more information, see Digital Asset Management persistence architecture . Parent topic: Overview of the Helm architecture","title":"Known limitations"},{"location":"containerization/helm/core_interactions_kubernetes/","text":"DX 9.5 Core Interactions with Kubernetes This section provides more detailed information about how the HCL Digital Experience 9.5 Core container interacts with Kubernetes. Understanding this information may assist in interpreting observed behavior or in troubleshooting your HCL DX 9.5 Container deployments in Helm. Volume mount points The persistent volumes used by the DX Core pod are mounted to the following directories in the Core container: profile (WebSphere Application Server profiles for the WebSphere_Portal application server, shared between pods): /opt/HCL/profiles log (WebSphere Application Server logs for the WebSphere_Portal application server, unique to a pod): /opt/HCL/logs tranlog (transaction log, unique to a pod): /opt/HCL/tranlog The logs directory /opt/HCL/wp_profile/logs is symbolically linked to /opt/HCL/logs. The tranlog directory /opt/HCL/wp_profile/tranlog is symbolically linked to /opt/HCL/tranlog. Additional Information about profile directories The profile persistent volume (and thus, the /opt/HCL/profiles directory) contains a directory per container version, named: prof_ < product-version > _ < container-version > for example, prof_95_CF199 . During the Core container startup process the latest version directory is symbolically linked from /opt/HCL/wp_profile. Core container Version-to-Version upgrade When a new version (tag) of the DX 9.5 Core container is specified in your custom values YAML file and you run helm upgrade , Kubernetes recycles all the pods in your Core stateful set one by one. It starts with the highest numbered pod and work downwards, only recycling the next pod when the current pod reports that it is \"ready\". Whenever a Core container is started, it compares its container version with the latest profile version. If they do not match, perform an Update using the process set out below: Kubernetes recycles the highest numbered pod, supplying the new DX 9.5 Container image. Highest numbered pod creates a new profile directory on the shared volume for the new version (named as described above) with contents copied from the previous version profile directory. Pod switches its symbolic link for /opt/HCL/wp_profile to the new directory. Pod performs the actual upgrade (\" applyCF \") and, when this is complete, is declared \"ready\" to Kubernetes. Kubernetes recycles the next highest numbered pod. Pod determines that a profile directory is already populated for the new HCL DX 9.5 container image version, and so, links to that as normal; and onwards Steps 5 and 6 are repeated until there are no further pods using the old image. Note: If you have more than one DX Core pod, those not yet recycled will still use the previous profile directory. Therefore, any configuration changes made during this time that are stored to the profile (for example, the installation of a portlet) are lost, as they are made to the previous profile after it has already been copied. We recommend that you avoid making any configuration changes while a Version-to-Version upgrade is in progress. As of HCL DX 9.5 Container Update CF199, DX profile directories are not automatically removed. If your DX 9.5 deployment has been around through a number of Container upgrades, you may wish to consider removing very old profile directories to save space (leaving, at least, two of the most recent profile directories). Parent topic: Overview of the Helm architecture","title":"DX 9.5 Core Interactions with Kubernetes"},{"location":"containerization/helm/core_interactions_kubernetes/#dx-95-core-interactions-with-kubernetes","text":"This section provides more detailed information about how the HCL Digital Experience 9.5 Core container interacts with Kubernetes. Understanding this information may assist in interpreting observed behavior or in troubleshooting your HCL DX 9.5 Container deployments in Helm.","title":"DX 9.5 Core Interactions with Kubernetes"},{"location":"containerization/helm/core_interactions_kubernetes/#volume-mount-points","text":"The persistent volumes used by the DX Core pod are mounted to the following directories in the Core container: profile (WebSphere Application Server profiles for the WebSphere_Portal application server, shared between pods): /opt/HCL/profiles log (WebSphere Application Server logs for the WebSphere_Portal application server, unique to a pod): /opt/HCL/logs tranlog (transaction log, unique to a pod): /opt/HCL/tranlog The logs directory /opt/HCL/wp_profile/logs is symbolically linked to /opt/HCL/logs. The tranlog directory /opt/HCL/wp_profile/tranlog is symbolically linked to /opt/HCL/tranlog.","title":"Volume mount points"},{"location":"containerization/helm/core_interactions_kubernetes/#additional-information-about-profile-directories","text":"The profile persistent volume (and thus, the /opt/HCL/profiles directory) contains a directory per container version, named: prof_ < product-version > _ < container-version > for example, prof_95_CF199 . During the Core container startup process the latest version directory is symbolically linked from /opt/HCL/wp_profile.","title":"Additional Information about profile directories"},{"location":"containerization/helm/core_interactions_kubernetes/#core-container-version-to-version-upgrade","text":"When a new version (tag) of the DX 9.5 Core container is specified in your custom values YAML file and you run helm upgrade , Kubernetes recycles all the pods in your Core stateful set one by one. It starts with the highest numbered pod and work downwards, only recycling the next pod when the current pod reports that it is \"ready\". Whenever a Core container is started, it compares its container version with the latest profile version. If they do not match, perform an Update using the process set out below: Kubernetes recycles the highest numbered pod, supplying the new DX 9.5 Container image. Highest numbered pod creates a new profile directory on the shared volume for the new version (named as described above) with contents copied from the previous version profile directory. Pod switches its symbolic link for /opt/HCL/wp_profile to the new directory. Pod performs the actual upgrade (\" applyCF \") and, when this is complete, is declared \"ready\" to Kubernetes. Kubernetes recycles the next highest numbered pod. Pod determines that a profile directory is already populated for the new HCL DX 9.5 container image version, and so, links to that as normal; and onwards Steps 5 and 6 are repeated until there are no further pods using the old image. Note: If you have more than one DX Core pod, those not yet recycled will still use the previous profile directory. Therefore, any configuration changes made during this time that are stored to the profile (for example, the installation of a portlet) are lost, as they are made to the previous profile after it has already been copied. We recommend that you avoid making any configuration changes while a Version-to-Version upgrade is in progress. As of HCL DX 9.5 Container Update CF199, DX profile directories are not automatically removed. If your DX 9.5 deployment has been around through a number of Container upgrades, you may wish to consider removing very old profile directories to save space (leaving, at least, two of the most recent profile directories). Parent topic: Overview of the Helm architecture","title":"Core container Version-to-Version upgrade"},{"location":"containerization/helm/dam_persistence_architecture/","text":"Digital Asset Management persistence architecture This topic describes the components of the Digital Asset Management persistence. The updated DAM persistence feature is available from HCL Digital Experience 9.5 Container Update CF198 and later. , persistence-node persistence-node provides the database functionality for HCL Digital Asset Management . The persistence-node is a DX Red Hat Universal Base Image (UBI) container image installed with PostgreSQL and the Replication Manager Service. [repmgr](https://repmgr.org/) is an open-source tool suite for managing replication and failover in a cluster of PostgreSQL servers. repmgr enhances the built-in hot-standby capabilities of PostgreSQL with tools to set up standby servers, monitor replication, and perform administrative tasks, such as failover or manual switchover operations. In case of PostgreSQL master server failure, the repmgr service switches the server role from master to standby. The persistence-node configurations are available in the Helm Chart values.yaml file as persistenceNode . The administrator can configure number of persistence-node under scaling configuration. # Scaling settings for deployed applications scaling: # The default amount of replicas per application replicas: contentComposer: 1 core: 1 designStudio: 1 digitalAssetManagement: 1 imageProcessor: 1 ringApi: 1 persistenceConnectionPool: 1 persistenceNode: 3 ambassadorIngress: 3 ambassadorRedis: 3 Note: Scaling affects only the read requests and ensures fail-over capabilities. Write requests are always directed only to the primary pod. The persistence-node is a stateful application and it requires a volume. The configuration must have a dynamic volume class to start the container. The storageClassName and storage must be updated according to the cloud service provider and project requirement. # Persistent Volumes for Persistence Node persistenceNode: # Database PVC, one per Persistence Node database: storageClassName: \"manual\" requests: storage: \"2Gi\" # Optional volume name to specifically map to. volumeName: persistence-connection-pool The persistence-connection-pool container runs the Pg-pool service. Pg-pool is a middleware that works between persistence-node and HCL Digital Asset Management . The service provides: Connection pooling Load balancing For better performance, administrator can scale the persistence-connection-pool to more than one pod. The persistence-connection-pool configurations are available in Helm Chart values.yaml file as persistenceConnectionPool . # Scaling settings for deployed applications scaling: # The default amount of replicas per application replicas: contentComposer: 1 core: 1 designStudio: 1 digitalAssetManagement: 1 imageProcessor: 1 ringApi: 1 persistenceConnectionPool: 1 persistenceNode: 3 ambassadorIngress: 3 ambassadorRedis: 3 The following is an example of a persistence cluster in a successful deployment. . Parent topic: Overview of the Helm architecture","title":"Digital Asset Management persistence architecture"},{"location":"containerization/helm/dam_persistence_architecture/#digital-asset-management-persistence-architecture","text":"This topic describes the components of the Digital Asset Management persistence. The updated DAM persistence feature is available from HCL Digital Experience 9.5 Container Update CF198 and later. ,","title":"Digital Asset Management persistence architecture"},{"location":"containerization/helm/dam_persistence_architecture/#persistence-node","text":"persistence-node provides the database functionality for HCL Digital Asset Management . The persistence-node is a DX Red Hat Universal Base Image (UBI) container image installed with PostgreSQL and the Replication Manager Service. [repmgr](https://repmgr.org/) is an open-source tool suite for managing replication and failover in a cluster of PostgreSQL servers. repmgr enhances the built-in hot-standby capabilities of PostgreSQL with tools to set up standby servers, monitor replication, and perform administrative tasks, such as failover or manual switchover operations. In case of PostgreSQL master server failure, the repmgr service switches the server role from master to standby. The persistence-node configurations are available in the Helm Chart values.yaml file as persistenceNode . The administrator can configure number of persistence-node under scaling configuration. # Scaling settings for deployed applications scaling: # The default amount of replicas per application replicas: contentComposer: 1 core: 1 designStudio: 1 digitalAssetManagement: 1 imageProcessor: 1 ringApi: 1 persistenceConnectionPool: 1 persistenceNode: 3 ambassadorIngress: 3 ambassadorRedis: 3 Note: Scaling affects only the read requests and ensures fail-over capabilities. Write requests are always directed only to the primary pod. The persistence-node is a stateful application and it requires a volume. The configuration must have a dynamic volume class to start the container. The storageClassName and storage must be updated according to the cloud service provider and project requirement. # Persistent Volumes for Persistence Node persistenceNode: # Database PVC, one per Persistence Node database: storageClassName: \"manual\" requests: storage: \"2Gi\" # Optional volume name to specifically map to. volumeName:","title":"persistence-node"},{"location":"containerization/helm/dam_persistence_architecture/#persistence-connection-pool","text":"The persistence-connection-pool container runs the Pg-pool service. Pg-pool is a middleware that works between persistence-node and HCL Digital Asset Management . The service provides: Connection pooling Load balancing For better performance, administrator can scale the persistence-connection-pool to more than one pod. The persistence-connection-pool configurations are available in Helm Chart values.yaml file as persistenceConnectionPool . # Scaling settings for deployed applications scaling: # The default amount of replicas per application replicas: contentComposer: 1 core: 1 designStudio: 1 digitalAssetManagement: 1 imageProcessor: 1 ringApi: 1 persistenceConnectionPool: 1 persistenceNode: 3 ambassadorIngress: 3 ambassadorRedis: 3 The following is an example of a persistence cluster in a successful deployment. . Parent topic: Overview of the Helm architecture","title":"persistence-connection-pool"},{"location":"containerization/helm/deploy_applications_using_helm/","text":"Deploying DX 9.5 applications to container platforms using Helm This topic provides a list of all DX applications and resource definitions that configure the application runtime and are deployed to containers using Helm on OpenShift or Kubernetes platforms. As outlined in the overview, applications can also include ConfigMaps, Secrets, and Ingress. For more information about Helm applications, consult the Helm documentation . Refer to the DX 9.5 Container component image listing in the DX 9.5 Docker Image file listing topic. Do note that each application defined only lists its next direct dependencies. Sub-dependencies are not explicitly listed. DX 9.5 Core Depends on: No dependencies Type: Stateful HCL DX 9.5 CF196 and later Core contains the primary Portal and Web Content Manager HCL Digital Experience functionality. The standard deployment deploys at least one Pod of Core. If you have an existing on-premise installation of DX 9.5 Core, you can also use that one for your deployment using the Hybrid deployment pattern as described in the DX 9.5 Hybrid deployment topic. Note: Application of the hybrid deployment pattern is not yet supported with Helm in HCL DX 9.5 Container Update CF196, and will be added in a later update release. Ring API Depends on: Core (deployed to OpenShift, Kubernetes or Hybrid on-premise) Type: Stateless The Ring API, a component of the HCL DX Experience API , is a REST API wrapping Core functionality. It provides easy-to-use API endpoints and requires that a DX Core 9.5 instance is deployed and started. That instance can either be running inside the Kubernetes or OpenShift deployment or be an existing external on-premise DX-Core installation using the Hybrid pattern. Content Composer Depends on: Ring API Type: Stateless Content Composer requires the Ring API to be deployed to execute Content authoring capabilities. Digital Asset Management Depends on: Ring API, Image Processor, Persistence Type: Stateful Digital Asset Management requires the Ring API be deployed and operational to communicate with the DX Core, and Image Processor components to perform image manipulation, and Persistence to store its application data. Persistence Depends on: No dependencies Type: Stateful Persistence is used by the Digital Asset Management component to store application data. It consists of a read/write primary node and at least one standby read-only node. The switch between the read/write primary and the read-only nodes is automatically performed by the Runtime Controller. Image Processor Depends on: No dependencies Type: Stateless The Image Processor provides image manipulation capabilities that are leveraged by Digital Asset Management. Design Studio (Beta) Depends on: Core, Ring API Type: Stateless Refer to the Design Studio (Beta) topic section for more information about this application. Runtime Controller Depends on: No dependencies Type: Stateless The Runtime Controller incorporates runtime management functionality for the entire HCL DX 9.5 Container hcl-dx-deployment . It enables automated rollout of configuration changes during runtime and acts as a \u201cwatchdog\u201d to monitor for the automated read/write to read-only fallback of Persistence. Interdependency Matrix This matrix shows which HCL DX applications have dependencies on other applications. This also includes sub-dependencies. For example, if an application uses Ring API, it is also dependent on an operational DX 9.5 Core instance. Application names are defined as follows: Shortname Full Name Core HCL DX 9.5 Core Ring API Ring API CC Content Composer DAM Digital Asset Management DS Design Studio PER Persistence IMG Image Processor Parent topic: Overview of the Helm architecture","title":"Deploying DX 9.5 applications to container platforms using Helm"},{"location":"containerization/helm/deploy_applications_using_helm/#deploying-dx-95-applications-to-container-platforms-using-helm","text":"This topic provides a list of all DX applications and resource definitions that configure the application runtime and are deployed to containers using Helm on OpenShift or Kubernetes platforms. As outlined in the overview, applications can also include ConfigMaps, Secrets, and Ingress. For more information about Helm applications, consult the Helm documentation . Refer to the DX 9.5 Container component image listing in the DX 9.5 Docker Image file listing topic. Do note that each application defined only lists its next direct dependencies. Sub-dependencies are not explicitly listed.","title":"Deploying DX 9.5 applications to container platforms using Helm"},{"location":"containerization/helm/deploy_applications_using_helm/#dx-95-core","text":"Depends on: No dependencies Type: Stateful HCL DX 9.5 CF196 and later Core contains the primary Portal and Web Content Manager HCL Digital Experience functionality. The standard deployment deploys at least one Pod of Core. If you have an existing on-premise installation of DX 9.5 Core, you can also use that one for your deployment using the Hybrid deployment pattern as described in the DX 9.5 Hybrid deployment topic. Note: Application of the hybrid deployment pattern is not yet supported with Helm in HCL DX 9.5 Container Update CF196, and will be added in a later update release.","title":"DX 9.5 Core"},{"location":"containerization/helm/deploy_applications_using_helm/#ring-api","text":"Depends on: Core (deployed to OpenShift, Kubernetes or Hybrid on-premise) Type: Stateless The Ring API, a component of the HCL DX Experience API , is a REST API wrapping Core functionality. It provides easy-to-use API endpoints and requires that a DX Core 9.5 instance is deployed and started. That instance can either be running inside the Kubernetes or OpenShift deployment or be an existing external on-premise DX-Core installation using the Hybrid pattern.","title":"Ring API"},{"location":"containerization/helm/deploy_applications_using_helm/#content-composer","text":"Depends on: Ring API Type: Stateless Content Composer requires the Ring API to be deployed to execute Content authoring capabilities.","title":"Content Composer"},{"location":"containerization/helm/deploy_applications_using_helm/#digital-asset-management","text":"Depends on: Ring API, Image Processor, Persistence Type: Stateful Digital Asset Management requires the Ring API be deployed and operational to communicate with the DX Core, and Image Processor components to perform image manipulation, and Persistence to store its application data.","title":"Digital Asset Management"},{"location":"containerization/helm/deploy_applications_using_helm/#persistence","text":"Depends on: No dependencies Type: Stateful Persistence is used by the Digital Asset Management component to store application data. It consists of a read/write primary node and at least one standby read-only node. The switch between the read/write primary and the read-only nodes is automatically performed by the Runtime Controller.","title":"Persistence"},{"location":"containerization/helm/deploy_applications_using_helm/#image-processor","text":"Depends on: No dependencies Type: Stateless The Image Processor provides image manipulation capabilities that are leveraged by Digital Asset Management.","title":"Image Processor"},{"location":"containerization/helm/deploy_applications_using_helm/#design-studio-beta","text":"Depends on: Core, Ring API Type: Stateless Refer to the Design Studio (Beta) topic section for more information about this application.","title":"Design Studio (Beta)"},{"location":"containerization/helm/deploy_applications_using_helm/#runtime-controller","text":"Depends on: No dependencies Type: Stateless The Runtime Controller incorporates runtime management functionality for the entire HCL DX 9.5 Container hcl-dx-deployment . It enables automated rollout of configuration changes during runtime and acts as a \u201cwatchdog\u201d to monitor for the automated read/write to read-only fallback of Persistence.","title":"Runtime Controller"},{"location":"containerization/helm/deploy_applications_using_helm/#interdependency-matrix","text":"This matrix shows which HCL DX applications have dependencies on other applications. This also includes sub-dependencies. For example, if an application uses Ring API, it is also dependent on an operational DX 9.5 Core instance. Application names are defined as follows: Shortname Full Name Core HCL DX 9.5 Core Ring API Ring API CC Content Composer DAM Digital Asset Management DS Design Studio PER Persistence IMG Image Processor Parent topic: Overview of the Helm architecture","title":"Interdependency Matrix"},{"location":"containerization/helm/docker/","text":"Docker image list This section presents the latest HCL DX 9.5 Docker container update images available. Docker container update file list The HCL DX 9.5 container update releases may be obtained from your HCL Digital Experience entitlements in the HCL Software License Portal , in the HCL_Portal_8.5_9.0_9.5_CFs download package entry. Video: How to upload HCL Digital Experience 9.5 CF container images to a private repository HCL DX 9.5 CF201 Container Update CF201 If deploying the HCL DX 9.5 CF201 release, the package name and images are as follows: HCL DX 9.5 CF201 DXClient files : ``` hcl-dxclient-image-v95_CF201_20220207-1614.zip - ``` hcl-dxclient-v95_CF201_20220207-1613.zip **HCL DX 9.5 CF\\_201-hcl-dx-kubernetes-v95-CF201.zip**: - ``` HCL DX notices V9.5 CF201.txt - ``` hcl-dx-ambassador-image-1142.tar.gz - ``` hcl-dx-content-composer-image-v1.14.0_20220207-1550.tar.gz - ``` hcl-dx-core-image-v95_CF201_20220206-1331.tar.gz - ``` hcl-dx-deployment-v2.4.0_20220207-1606.tgz - ``` hcl-dx-design-studio-image-v0.7.0_20220207-1549.tar.gz - ``` hcl-dx-digital-asset-manager-image-v1.13.0_20220207-1609.tar.gz - ``` hcl-dx-experience-api-sample-ui-v0.2.0.20220207-1549.zip - ``` hcl-dx-image-processor-image-v1.14.0_20220207-1606.tar.gz - ``` hcl-dx-openldap-image-v1.2.0_20220207-1556.tar.gz - ``` hcl-dx-persistence-connection-pool-image-v1.14.0_20220207-1612.tar.gz - ``` hcl-dx-persistence-image-v1.14.0_20220207-1611.tar.gz - ``` hcl-dx-persistence-metrics-exporter-image-v1.12.0_20220207-1611.tar.gz - ``` hcl-dx-persistence-node-image-v1.4_20220207-1549.tar.gz - ``` hcl-dx-redis-image-5.0.14.tar.gz - ``` hcl-dx-remote-search-image-v95_CF201_20220206-1331.tar.gz - ``` hcl-dx-ringapi-image-v1.14.0_20220207-1554.tar.gz - ``` hcl-dx-runtime-controller-image-v95_CF201_20220207-1558.tar.gz - ``` hcl-dx-sidecar-image-v1.0.0_8.4-205.tar.gz ## HCL DX 9.5 CF200 - **Container Update CF200** If deploying the HCL DX 9.5 CF200 release, the package name and images are as follows: **HCL DX 9.5 CF200 DXClient files**: - ``` hcl-dxclient-image-v95_CF200_20211213-1500.zip - ``` hcl-dxclient-v95_CF200_20211213-1459.zip **HCL DX 9.5 CF\\_200-hcl-dx-kubernetes-v95-CF200.zip** **Important:** With the Operator-based deployment being removed starting in HCL DX Container Update 9.5 CF200, you will find some changes in the list of files and their names in CF199 and later releases. For more information, see [List of image files and changes from CF198 and later](#simpletable_cst_4lf_yrb). - ``` HCL DX notices V9.5 CF200.txt - ``` hcl-dx-ambassador-image-1142.tar.gz - ``` hcl-dx-content-composer-image-v1.13.0_20211213-1443.tar.gz - ``` hcl-dx-core-image-v95_CF200_20211213-1442.tar.gz - ``` hcl-dx-deployment-v2.2.0_20211213-1446.tgz - ``` hcl-dx-design-studio-image-v0.6.0_20211213-1448.tar.gz - ``` hcl-dx-digital-asset-manager-image-v1.12.0_20211213-1448.tar.gz - ``` hcl-dx-experience-api-sample-ui-v0.2.0.20211213-1454.zip - ``` hcl-dx-image-processor-image-v1.13.0_20211213-1446.tar.gz - ``` hcl-dx-openldap-image-v1.2.0_20211213-1444.tar.gz - ``` hcl-dx-persistence-connection-pool-image-v1.13.0_20211213-1457.tar.gz - ``` hcl-dx-persistence-image-v1.13.0_20211213-1457.tar.gz - ``` hcl-dx-persistence-metrics-exporter-image-v1.11.0_20211213-1458.tar.gz - ``` hcl-dx-persistence-node-image-v1.3_20211213-1454.tar.gz - ``` hcl-dx-redis-image-5.0.14.tar.gz - ``` hcl-dx-remote-search-image-v95_CF200_20211213-1442.tar.gz - ``` hcl-dx-ringapi-image-v1.13.0_20211213-1457.tar.gz - ``` hcl-dx-runtime-controller-image-v95_CF200_20211213-1444.tar.gz - ``` hcl-dx-sidecar-image-v1.0.0_8.4-205.tar.gz HCL DX 9.5 CF199 Container Update CF199 If deploying the HCL DX 9.5 CF199 release, the package name and images are as follows: HCL DX 9.5 CF199 DXClient files : ``` hcl-dxclient-image-v95_CF199_20211029-1357.zip - ``` hcl-dxclient-v95_CF199_20211029-1357.zip **HCL DX 9.5 CF\\_199-hcl-dx-kubernetes-v95-CF199.zip** - ``` HCL DX notices V9.5 CF199.txt - ``` hcl-dx-ambassador-image-154.tar.gz - ``` hcl-dx-cloud-operator-image-v95_CF199_20211029-1700.tar.gz - ``` hcl-dx-cloud-scripts-v95_CF199_20211029-1700.zip - ``` hcl-dx-content-composer-image-v1.12.0_20211029-1341.tar.gz - ``` hcl-dx-core-image-v95_CF199_20211029-1348.tar.gz - ``` hcl-dx-deployment-v2.1.0_20211029-1346.tgz - ``` hcl-dx-design-studio-image-v0.5.0_20211029-0013.tar.gz - ``` hcl-dx-digital-asset-management-operator-image-v95_CF199_20211029-1342.tar.gz - ``` hcl-dx-digital-asset-manager-image-v1.11.0_20211029-1350.tar.gz - ``` hcl-dx-experience-api-sample-ui-v0.2.0.20211029-1354.zip - ``` hcl-dx-image-processor-image-v1.12.0_20211029-1346.tar.gz - ``` hcl-dx-openldap-image-v1.2.0_20211029-1342.tar.gz - ``` hcl-dx-persistence-connection-pool-image-v1.11.0_20211029-0224.tar.gz - ``` hcl-dx-persistence-image-v1.11.0_20211029-1349.tar.gz - ``` hcl-dx-persistence-metrics-exporter-image-v1.10.0_20211029-1352.tar.gz - ``` hcl-dx-persistence-node-image-v1.1_20211029-0148.tar.gz - ``` hcl-dx-redis-image-5.0.1.tar.gz - ``` hcl-dx-remote-search-image-v95_CF199_20211029-1348.tar.gz - ``` hcl-dx-ringapi-image-v1.12.0_20211029-1357.tar.gz - ``` hcl-dx-runtime-controller-image-v95_CF199_20211029-1344.tar.gz - ``` hcl-dx-sidecar-image-v1.0.0_8.4-205.tar.gz Important: With the Operator-based deployment being deprecated in CF198 and planned to be removed in HCL DX Container Update 9.5 CF200, you will find some changes in the list of files and their names in CF199 and later releases. Component Image name CF198 CF199 DX Core hcl-dx-core-image-vx.x.x_xxxxxxxx-xxxx.tar.gz hcl-dx-core-image-v95_CF198_20210917-1438.tar.gz hcl-dx-core-image-v95_CF199_20211029-1348.tar.gz Ring API hcl-dx-ringapi-image-vx.x.x_xxxxxxxx-xxxx.tar.gz hcl-dx-ringapi-image-v1.11.0_20210917-1441.tar.gz hcl-dx-ringapi-image-v1.12.0_20211029-1357.tar.gz Content Composer hcl-dx-content-composer-image-vx.x.x_xxxxxxxx-xxxx.tar.gz hcl-dx-content-composer-image-v1.10.0_20210917-1437.tar.gz hcl-dx-content-composer-image-v1.12.0_20211029-1341.tar.gz DX Deployment hcl-dx-deployment-vx.x.x_xxxxxxxx-xxxx.tgz hcl-dx-deployment-v2.0.0_20210917-1441.tgz hcl-dx-deployment-v2.1.0_20211029-1346.tgz Design Studio hcl-dx-design-studio-image- vx.x.x_xxxxxxxx-xxxx.tar.gz hcl-dx-site-manager-image-v0.4.0_20210917-1445.tar.gz hcl-dx-design-studio-image-v0.5.0_20211029-0013.tar.gz Digital Asset Management hcl-dx-digital-asset-manager-image- vx.x.x_xxxxxxxx-xxxx.tar.gz hcl-dx-digital-asset-manager-image-v1.10.0_20210917-1444.tar.gz hcl-dx-digital-asset-manager-image-v1.11.0_20211029-1350.tar.gz Persistence Connection Pool hcl-dx-persistence-connection-pool-image- vx.x.x_xxxxxxxx-xxxx.tar.gz hcl-dx-postgres-persistence-pgpool-image-v1.11.0_20210916-0224.tar.gz hcl-dx-persistence-connection-pool-image-v1.11.0_20211029-0224.tar.gz Persistence Node hcl-dx-persistence-node-image-vx.x.x_xxxxxxxx-xxxx.tar.gz hcl-dx-persistence-postgres-repmgr-image-v1.1_20210916-0148.tar.gz hcl-dx-persistence-node-image-v1.1_20211029-0148.tar.gz Persistence Metrics Exporter hcl-dx-persistence-metrics-exporter-image-vx.x.x_xxxxxxxx-xxxx.tar.gz NA hcl-dx-persistence-metrics-exporter-image-v1.10.0_20211029-1352.tar.gz Persistence hcl-dx-persistence-image- vx.x.x_xxxxxxxx-xxxx.tar.gz hcl-dx-postgres-image-v1.11.0_20210917-1444.tar.gz hcl-dx-persistence-image-v1.11.0_20211029-1349.tar.gz DX Experience API hcl-dx-experience-api-sample-ui-vx.x.x.xxxxxxxx-xxxx.zip hcl-dx-experience-api-sample-ui-v0.2.0.20210917-1439.zip hcl-dx-experience-api-sample-ui-v0.2.0.20211029-1354.zip Image processor hcl-dx-image-processor-image-vx.x.x_xxxxxxxx-xxxx.tar.gz hcl-dx-image-processor-image-v1.11.0_20210917-1449.tar.gz hcl-dx-image-processor-image-v1.12.0_20211029-1346.tar.gz Open LDAP hcl-dx-openldap-image-vx.x.x_xxxxxxxx-xxxx.tar.gz hcl-dx-openldap-image-v1.2.0_20210917-1437.tar.gz hcl-dx-openldap-image-v1.2.0_20211029-1342.tar.gz Remote search hcl-dx-remote-search-image-v95_CFxxx_xxxxxxxx-xxxx.tar.gz hcl-dx-remote-search-image-v95_CF198_20210917-1438.tar.gz hcl-dx-remote-search-image-v95_CF199_20211029-1348.tar.gz Runtime Controller hcl-dx-runtime-controller-image-v95_CFxxx_xxxxxxxx-xxxx.tar.gz hcl-dx-runtime-controller-image-v95_CF198_20210917-1441.tar.gz hcl-dx-runtime-controller-image-v95_CF199_20211029-1344.tar.gz Ambassador hcl-dx-ambassador-image-xxx.tar.gz hcl-dx-ambassador-image-154.tar.gz hcl-dx-ambassador-image-154.tar.gz Redis hcl-dx-redis-image-x.x.x.tar.gz hcl-dx-redis-image-5.0.1.tar.gz hcl-dx-redis-image-5.0.1.tar.gz Sidecar hcl-dx-sidecar-image-vx.x._x.x-xxx.tar.gz NA hcl-dx-sidecar-image-v1.0.0_8.4-205.tar.gz Note: The new image files and the change in file names are highlighted in the table. HCL DX 9.5 CF198 CF198 If deploying HCL DX 9.5 CF198 release, the package name and images are as follows: HCL DX 9.5 CF198 DXClient files : ``` hcl-dxclient-image-v95_CF198_20210917-1455.zip - ``` hcl-dxclient-v95_CF198_20210917-1455.zip **HCL DX 9.5 CF198 - hcl-dx-kubernetes-v95-CF198.zip**: - ``` HCL DX notices V9.5 CF198.txt - ``` hcl-dx-ambassador-image-154.tar.gz - ``` hcl-dx-cloud-operator-image-v95_CF198_20210917-1749.tar.gz - ``` hcl-dx-cloud-scripts-v95_CF198_20210917-1749.zip - ``` hcl-dx-content-composer-image-v1.10.0_20210917-1437.tar.gz - ``` hcl-dx-core-image-v95_CF198_20210917-1438.tar.gz - ``` hcl-dx-deployment-v2.0.0_20210917-1441.tgz - ``` hcl-dx-digital-asset-management-operator-image-v95_CF198_20210917-1437.tar.gz - ``` hcl-dx-digital-asset-manager-image-v1.10.0_20210917-1444.tar.gz - ``` hcl-dx-experience-api-sample-ui-v0.2.0.20210917-1439.zip - ``` hcl-dx-image-processor-image-v1.11.0_20210917-1449.tar.gz - ``` hcl-dx-openldap-image-v1.2.0_20210917-1437.tar.gz - ``` hcl-dx-persistence-postgres-repmgr-image-v1.1_20210916-0148.tar.gz - ``` hcl-dx-postgres-image-v1.11.0_20210917-1444.tar.gz - ``` hcl-dx-postgres-persistence-pgpool-image-v1.11.0_20210916-0224.tar.gz - ``` hcl-dx-redis-image-5.0.1.tar.gz - ``` hcl-dx-remote-search-image-v95_CF198_20210917-1438.tar.gz - ``` hcl-dx-ringapi-image-v1.11.0_20210917-1441.tar.gz - ``` hcl-dx-runtime-controller-image-v95_CF198_20210917-1441.tar.gz - ``` hcl-dx-site-manager-image-v0.4.0_20210917-1445.tar.gz HCL DX 9.5 CF197 CF197 If deploying HCL DX 9.5 CF197 release, the package name and images are as follows: HCL DX 9.5 CF197 Client - hcl-dx-client-v95-CF197.zip : ``` hcl-dxclient-image-v95_CF197_20210806-1311.zip - ``` hcl-dxclient-v95_CF197_20210806-1311.zip **HCL DX 9.5 CF197 - hcl-dx-kubernetes-v95-CF197.zip**: - ``` HCL DX notices V9.5 CF197.txt - ``` hcl-dx-ambassador-image-154.tar.gz - ``` hcl-dx-cloud-operator-image-v95_CF197_20210806-1310.tar.gz - ``` hcl-dx-cloud-scripts-v95_CF197_20210806-1310.zip - ``` hcl-dx-content-composer-image-v1.10.0_20210806-1258.tar.gz - ``` hcl-dx-core-image-v95_CF197_20210806-1259.tar.gz - ``` hcl-dx-deployment-v2.0.0_20210806-1300.tgz - ``` hcl-dx-digital-asset-management-operator-image-v95_CF197_20210806-1258.tar.gz - ``` hcl-dx-digital-asset-manager-image-v1.10.0_20210806-1302.tar.gz - ``` hcl-dx-experience-api-sample-ui-v0.2.0.20210806-1308.zip - ``` hcl-dx-image-processor-image-v1.10.0_20210806-1300.tar.gz - ``` hcl-dx-openldap-image-v1.2.0_20210806-1258.tar.gz - ``` hcl-dx-postgres-image-v1.10.0_20210806-1302.tar.gz - ``` hcl-dx-redis-image-5.0.1.tar.gz - ``` hcl-dx-remote-search-image-v95_CF197_20210806-1259.tar.gz - ``` hcl-dx-ringapi-image-v1.10.0_20210806-1311.tar.gz - ``` hcl-dx-runtime-controller-image-v95_CF197_20210806-1258.tar.gz - ``` hcl-dx-site-manager-image-v0.3.0_20210806-1308.tar.gz HCL DX 9.5 CF196 CF196 If deploying HCL DX 9.5 CF196 release, the package name and images are as follows: HCL DX 9.5 CF196 Client - hcl-dx-client-v95-CF196.zip : ``` hcl-dxclient-image-v95_CF196_20210625-2028.zip - ``` hcl-dxclient-v95_CF196_20210625-2029.zip **HCL DX 9.5 CF196 - hcl-dx-kubernetes-v95-CF196.zip**: - ``` HCL DX notices V9.5 CF196.txt - ``` hcl-dx-ambassador-image-154.tar.gz - ``` hcl-dx-cloud-operator-image-v95_CF196_20210625-2033.tar.gz - ``` hcl-dx-cloud-scripts-v95_CF196_20210625-2033.zip - ``` hcl-dx-content-composer-image-v1.9.0_20210625-2012.tar.gz - ``` hcl-dx-core-image-v95_CF196_20210625-2011.tar.gz - ``` hcl-dx-deployment-v1.0.0_20210625-2026.tgz - ``` hcl-dx-digital-asset-management-operator-image-v95_CF196_20210625-2013.tar.gz - ``` hcl-dx-digital-asset-manager-image-v1.9.0_20210625-2016.tar.gz - ``` hcl-dx-experience-api-sample-ui-v0.2.0.20210625-2023.zip - ``` hcl-dx-image-processor-image-v1.8.0_20210625-2015.tar.gz - ``` hcl-dx-openldap-image-v1.2.0_20210625-2013.tar.gz - ``` hcl-dx-postgres-image-v1.9.0_20210625-2016.tar.gz - ``` hcl-dx-redis-image-5.0.1.tar.gz - ``` hcl-dx-remote-search-image-v95_CF196_20210625-2011.tar.gz - ``` hcl-dx-ringapi-image-v1.9.0_20210625-2026.tar.gz - ``` hcl-dx-runtime-controller-image-v95_CF196_20210625-2013.tar.gz - ``` hcl-dx-site-manager-image-v0.2.0_20210625-2023.tar.gz HCL DX 9.5 CF195 CF195 If deploying HCL DX 9.5 CF195 release, the package name and images are as follows: HCL DX 9.5 CF195 Client - hcl-dx-client-v95-CF195.zip : ``` dxclient_v1.4.0_20210514-1713.zip **HCL DX 9.5 CF195 - hcl-dx-kubernetes-v95-CF195.zip**: - ``` HCL DX notices V9.5 CF195.txt - ``` dxclient_v1.4.0_20210514-1713.zip - ``` hcl-dx-ambassador-image-154.tar.gz - ``` hcl-dx-cloud-operator-image-v95_CF195_20210515-0201.tar.gz - ``` hcl-dx-cloud-scripts-v95_CF195_20210514-1707.zip - ``` hcl-dx-content-composer-image-v1.8.0_20210514-1707.tar.gz - ``` hcl-dx-core-image-v95_CF195_20210514-1708.tar.gz - ``` hcl-dx-digital-asset-management-operator-image-v95_CF195_20210514-1714.tar.gz - ``` hcl-dx-digital-asset-manager-image-v1.8.0_20210514-1711.tar.gz - ``` hcl-dx-experience-api-sample-ui-v0.2.0.20210514-1708.zip - ``` hcl-dx-image-processor-image-v1.8.0_20210514-1712.tar.gz - ``` hcl-dx-openldap-image-v1.1.0-master_20210514_1621013302.tar.gz - ``` hcl-dx-postgres-image-v1.8.0_20210514-1708.tar.gz - ``` hcl-dx-redis-image-5.0.1.tar.gz - ``` hcl-dx-remote-search-image-v95_CF195_20210514-1708.tar.gz - ``` hcl-dx-ringapi-image-v1.8.0_20210514-1709.tar.gz ## HCL DX 9.5 CF194 - **CF194** Important note: Please consult the HCL DX Support Knowledge Base article, [Manual Steps to Apply the Digital Experience 9.5 Container Deployment Core Certificate Update](https://support.hcltechsw.com/csm?id=kb_article&sysparm_article=KB0089699), to apply the certificate update to your HCL DX 9.5 container deployment. If deploying HCL DX 9.5 CF194 release, the package name and images are as follows: **HCL DX 9.5 CF194 Client - hcl-dx-client-v95-CF194.zip**: - ``` dxclient_v1.3.0_20210415-2128.zip **HCL DX 9.5 CF194 - hcl-dx-kubernetes-v95-CF194.zip**: - ``` HCL DX notices V9.5 CF194.txt - ``` dxclient_v1.3.0_20210415-2128.zip - ``` hcl-dx-ambassador-image-154.tar.gz - ``` hcl-dx-cloud-operator-image-v95_CF194_20210416-0233.tar.gz - ``` hcl-dx-cloud-scripts-v95_CF194_20210416-0233.zip - ``` hcl-dx-content-composer-image-v1.7.0_20210415-2121.tar.gz - ``` hcl-dx-core-image-v95_CF194_20210415-2120.tar.gz - ``` hcl-dx-digital-asset-management-operator-image-v95_CF194_20210415-2127.tar.gz - ``` hcl-dx-experience-api-sample-ui-v0.2.0.20210415-2121.zip - ``` hcl-dx-image-processor-image-v1.7.0_20210415-2120.tar.gz - ``` hcl-dx-openldap-image-v1.1.0-master_20210416_1618540820.tar.gz - ``` hcl-dx-postgres-image-v1.7.0_20210415-2120.tar.gz - ``` hcl-dx-redis-image-5.0.1.tar.gz - ``` hcl-dx-remote-search-image-v95_CF194_20210415-2120.tar.gz HCL DX 9.5 CF193 CF193 If deploying HCL DX 9.5 CF193 release, the package name and images are as follows: HCL DX 9.5 CF193 Client - hcl-dx-client-v95-CF193.zip : ``` dxclient_v1.3.0_20210331-1335.zip **HCL DX 9.5 CF193 - hcl-dx-kubernetes-v95-CF193.zip**: - ``` HCL DX notices V9.5 CF193.txt - ``` dxclient_v1.3.0_20210331-1335.zip - ``` hcl-dx-ambassador-image-154.tar.gz - ``` hcl-dx-cloud-operator-image-v95_CF193_20210331-1847.tar.gz - ``` hcl-dx-cloud-scripts-v95_CF193_20210331-1847.zip - ``` hcl-dx-content-composer-image-v1.7.0_20210331-1333.tar.gz - ``` hcl-dx-core-image-v95_CF193_20210331-1336.tar.gz - ``` hcl-dx-digital-asset-management-operator-image-v95_CF193_20210331-1335.tar.gz - ``` hcl-dx-digital-asset-manager-image-v1.7.0_20210331-1339.tar.gz - ``` hcl-dx-experience-api-sample-ui-v0.2.0.20210331-1343.zip - ``` hcl-dx-image-processor-image-v1.7.0_20210331-1336.tar.gz - ``` hcl-dx-openldap-image-v1.1.0-master_20210331_1617216873.tar.gz - ``` hcl-dx-postgres-image-v1.7.0_20210331-1337.tar.gz - ``` hcl-dx-redis-image-5.0.1.tar.gz - ``` hcl-dx-remote-search-image-v95_CF193_20210331-1336.tar.gz - ``` hcl-dx-ringapi-image-v1.7.0_20210331-1339.tar.gz ## HCL DX 9.5 CF192 - **CF192** If deploying HCL DX 9.5 CF192 release, the package name and images are as follows: **hcl-dx-kubernetes-v95-CF192.zip**: - ``` HCL DX notices V9.5 CF192.txt - ``` dxclient_v1.2.0_20210305-1758.zip - ``` hcl-dx-ambassador-image-154.tar.gz - ``` hcl-dx-cloud-operator-image-v95_CF192_20210305-2309.tar.gz - ``` hcl-dx-cloud-scripts-v95_CF192_20210305-2309.zip - ``` hcl-dx-content-composer-image-v1.6.0_20210305-1756.tar.gz - ``` hcl-dx-core-image-v95_CF192_20210305-1758.tar.gz - ``` hcl-dx-digital-asset-management-operator-image-v95_CF192_20210305-1757.tar.gz - ``` hcl-dx-digital-asset-manager-image-v1.6.0_20210305-1802.tar.gz - ``` hcl-dx-experience-api-sample-ui-v0.2.0.20210305-1805.zip - ``` hcl-dx-image-processor-image-v1.6.0_20210305-1758.tar.gz - ``` hcl-dx-openldap-image-v1.0.0-master_20210305_1614986151.tar.gz - ``` hcl-dx-postgres-image-v1.6.0_20210305-1800.tar.gz - ``` hcl-dx-redis-image-5.0.1.tar.gz - ``` hcl-dx-remote-search-image-v95_CF192_20210305-1758.tar.gz - ``` hcl-dx-ringapi-image-v1.6.0_20210305-1802.tar.gz ## HCL DX 9.5 CF191 - **CF191** If deploying HCL DX 9.5 CF191 release, the package name and images are as follows: **hcl-dx-kubernetes-v95-CF191.zip** file: - ``` HCL DX notices V9.5 CF191.txt - ``` hcl-dx-ambassador-image-154.tar.gz - ``` hcl-dx-cloud-operator-image-v95_CF191_20201214-1527.tar.gz - ``` hcl-dx-cloud-scripts-v95_CF191_20201214-1527.zip - ``` hcl-dx-content-composer-image-v1.5.0_20201211-2151.tar.gz - ``` hcl-dx-core-image-v95_CF191_20201212-1421.tar.gz - ``` hcl-dx-digital-asset-management-operator-image-v95_CF191_20201211-2152.tar.gz - ``` hcl-dx-digital-asset-manager-image-v1.5.0_20201211-2155.tar.gz - ``` hcl-dx-experience-api-sample-ui-v0.2.0.20201211-2205.zip - ``` hcl-dx-image-processor-image-v1.5.0_20201211-2154.tar.gz - ``` hcl-dx-openldap-image-v1.0.0-master_20201212_1607741365.tar.gz - ``` hcl-dx-postgres-image-v1.5.0_20201211-2155.tar.gz - ``` hcl-dx-redis-image-5.0.1.tar.gz - ``` hcl-dx-remote-search-image-v95_CF191_20201212-1421.tar.gz - ``` hcl-dx-ringapi-image-v1.5.0_20201211-2200.tar.gz - ``` dxclient_v1.1.0_20201211-2153.zip **Note:** HCL DX 9.5 CF191 images are available and may be installed. HCL DX 9.5 CF191 is supported for new deployments only. DX administrators should not upgrade DX 9.5 container deployments to this release. ## HCL DX 9.5 CF19 - **CF19** If deploying HCL DX 9.5 CF19 release, the package name and images are as follows: **hcl-dx-kubernetes-v95-CF19.zip file**: - ``` HCL DX notices V9.5 CF19.txt - ``` hcl-dx-ambassador-image-154.tar.gz - ``` hcl-dx-cloud-operator-image-v95_CF19_20201110-0401.tar.gz - ``` hcl-dx-cloud-scripts-v95_CF19_20201110-0401.zip - ``` hcl-dx-content-composer-image-v1.4.0_20201109-2203.tar.gz - ``` hcl-dx-core-image-v95_CF19_20201109-2312.tar.gz - ``` hcl-dx-digital-asset-management-operator-image-v95_CF19_20201109-2204.tar.gz - ``` hcl-dx-digital-asset-manager-image-v1.4.0_20201109-2206.tar.gz - ``` hcl-dx-experience-api-sample-ui-v0.2.0.20201109-2208.zip - ``` hcl-dx-image-processor-image-v1.4.0_20201109-2204.tar.gz - ``` hcl-dx-openldap-image-v1.0.0-master_20201110_1604981292.tar.gz - ``` hcl-dx-postgres-image-v1.4.0_20201109-2206.tar.gz - ``` hcl-dx-redis-image-5.0.1.tar.gz - ``` hcl-dx-remote-search-image-v95_CF19_20201109-2312.tar.gz - ``` hcl-dx-ringapi-image-v1.4.0_20201109-2209.tar.gz - ``` dxclient_v1.0.0_20201110-2010.zip ## HCL DX 9.5 CF184 - **HCL DX 9.5 Container Update CF184** If deploying HCL DX 9.5 CF184 release, the package name and images are as follows: **hcl-dx-kubernetes-v95-CF184.zip files**: - ``` HCL DX notices V9.5 CF184.txt - ``` hcl-dx-ambassador-image-154.tar.gz - ``` hcl-dx-cloud-operator-image-v95_CF184_20200917-0054.tar.gz - ``` hcl-dx-cloud-scripts-v95_CF184_20200917-0054.zip - ``` hcl-dx-content-composer-image-v1.3.0_20200916-1952.tar.gz - ``` hcl-dx-core-image-v95_CF184_20200916-2009.tar.gz - ``` hcl-dx-digital-asset-management-operator-image-v95_CF184_20200916-2034.tar.gz - ``` hcl-dx-digital-asset-manager-image-v1.3.0_20200916-1953.tar.gz - ``` hcl-dx-image-processor-image-v1.3.0_20200916-1953.tar.gz - ``` hcl-dx-openldap-image-v1.0.0-master_20200917_1600304449.tar.gz - ``` hcl-dx-postgres-image-v1.3.0_20200916-2003.tar.gz - ``` hcl-dx-redis-image-5.0.1.tar.gz - ``` hcl-dx-remote-search-image-v95_CF184_20200916-2009.tar.gz - ``` hcl-dx-ringapi-image-v1.3.0_20200916-1953.tar.gz ## HCL DX 9.5 CF183 - **HCL DX 9.5 Container Update CF183** If deploying HCL DX 9.5 CF183 release, the image and package names are as follows: **CF183-core.zip files**: - ``` HCL DX notices V9.5 CF183.txt - ``` hcl-dx-ambassador-image-154.tar.gz - ``` hcl-dx-cloud-operator-image-v95_CF183_20200818-1852.tar.gz - ``` hcl-dx-cloud-scripts-v95_CF183_20200818-1852.zip - ``` hcl-dx-core-image-v95_CF183_20200818-1342.tar.gz - ``` hcl-dx-redis-image-5.0.1.tar.gz **CF183-other.zip files**: - ``` HCL DX notices V9.5 CF183.txt - ``` hcl-dx-content-composer-image-v1.2.0_20200818-1343.tar.gz - ``` hcl-dx-digital-asset-management-operator-image-v95_CF183_20200818-1344.tar.gz - ``` hcl-dx-digital-asset-manager-image-v1.2.0_20200818-1346.tar.gz - ``` hcl-dx-image-processor-image-v1.2.0_20200818-1345.tar.gz - ``` hcl-dx-openldap-image-v1.0.0-master_20200818_1597758965.tar.gz - ``` hcl-dx-postgres-image-v1.2.0_20200818-1349.tar.gz - ``` hcl-dx-remote-search-image-v95_CF183_20200818-1342.tar.gz - ``` hcl-dx-ringapi-image-v1.2.0_20200818-1351.tar.gz HCL DX 9.5 CF182 CF182 If deploying HCL DX 9.5 CF182 release, the image and package names are as follows: hcl-dx-kubernetes-v95-CF182-core.zip : ``` HCL DX notices V9.5 CF182.txt - ``` hcl-dx-ambassador-image-0850.tar.gz - ``` hcl-dx-cloud-operator-image-v95_CF182_20200720-1708.tar.gz - ``` hcl-dx-cloud-scripts-v95_CF182_20200720-1708.zip - ``` hcl-dx-core-image-v95_CF182_20200720-1645.tar.gz **hcl-dx-kubernetes-v95-CF182-other.zip**: - ``` HCL DX notices V9.5 CF182.txt - ``` hcl-dx-content-composer-image-v1.1.0_20200720-1708.tar.gz - ``` hcl-dx-digital-asset-management-operator-image-v95_CF182_20200720-1716.tar.gz - ``` hcl-dx-digital-asset-manager-image-v1.1.0_20200720-1712.tar.gz - ``` hcl-dx-image-processor-image-v1.1.0_20200720-1716.tar.gz - ``` hcl-dx-openldap-image-v1.0.0-master_20200720_1595265588.tar.gz - ``` hcl-dx-postgres-image-v1.1.0_20200720-1715.tar.gz - ``` hcl-dx-remote-search-image-v95_CF182_20200720-1645.tar.gz - ``` hcl-dx-ringapi-image-v1.1.0_20200720-1707.tar.gz HCL DX 9.5 CF181 CF181 If deploying HCL DX 9.5 CF181 and later container update release, the image and package names add HCL DX 9.5 Content Composer and Digital Asset Management components and supporting services images, as well as Remote Search and OpenLDAP images. See the following list of images presented within the HCL DX 9.5 Container Update CF181 package: hcl-dx-kubernetes-v95-CF181-core.zip : ``` hcl-dx-cloud-scripts-v95_CF181_xxxxxxxx-xxxx.zip - ``` hcl-dx-core-image-v95_CF181_xxxxxxxx-xxxx.tar.gz - ``` hcl-dx-cloud-operator-image-v95_CF181_xxxxxxxx-xxxx.tar.gz - ``` hcl-dx-ambassador-image-xxxx.tar.gz - ``` HCL DX notices V9.5 CF181.txt **hcl-dx-kubernetes-v95-CF181-other.zip**: - ``` hcl-dx-ringapi-image-v1.0.0_xxxxxxxx-xxxx.tar.gz - ``` hcl-dx-postgres-image-v1.0.0_xxxxxxxx-xxxx.tar.gz - ``` hcl-dx-openldap-image-v1.0.0-release_xxxxxxxx_xxxxxxxxxx.tar.gz - ``` hcl-dx-medialibrary-operator-image-v95_CF181_xxxxxxxx-xxxx.tar.gz - ``` hcl-dx-image-processor-image-v1.0.0_xxxxxxxx-xxxx.tar.gz - ``` hcl-dx-dxrs-image-v95_CF181_xxxxxxxx-xxxx.tar.gz ## HCL DX 9.5 CF18 - **CF18** If deploying HCL DX 9.5 CF18 and later container update release, the image and package names included for this are: - ``` hcl-dx-kubernetes-v95-CF18.zip - ``` hcl-dx-core-image-v95_CF18_xxxxxxxx-xxxx.tar.gz - ``` hcl-dx-cloud-operator-image-v95_CF18_xxxxxxxx-xxxx.tar.gz - ``` hcl-dx-cloud-scripts-v95_CF18_xxxxxxxx-xxxx.zip - ``` hcl-dx-ambassador-image-xxxx.tar.gz See the following sections for additional information: Docker image deployment Customizing the container deployment Requirements and limitations Parent topic: Digital Experience on containerized platforms","title":"Docker image list"},{"location":"containerization/helm/docker/#docker-image-list","text":"This section presents the latest HCL DX 9.5 Docker container update images available.","title":"Docker image list"},{"location":"containerization/helm/docker/#docker-container-update-file-list","text":"The HCL DX 9.5 container update releases may be obtained from your HCL Digital Experience entitlements in the HCL Software License Portal , in the HCL_Portal_8.5_9.0_9.5_CFs download package entry. Video: How to upload HCL Digital Experience 9.5 CF container images to a private repository","title":"Docker container update file list"},{"location":"containerization/helm/docker/#hcl-dx-95-cf201","text":"Container Update CF201 If deploying the HCL DX 9.5 CF201 release, the package name and images are as follows: HCL DX 9.5 CF201 DXClient files : ``` hcl-dxclient-image-v95_CF201_20220207-1614.zip - ``` hcl-dxclient-v95_CF201_20220207-1613.zip **HCL DX 9.5 CF\\_201-hcl-dx-kubernetes-v95-CF201.zip**: - ``` HCL DX notices V9.5 CF201.txt - ``` hcl-dx-ambassador-image-1142.tar.gz - ``` hcl-dx-content-composer-image-v1.14.0_20220207-1550.tar.gz - ``` hcl-dx-core-image-v95_CF201_20220206-1331.tar.gz - ``` hcl-dx-deployment-v2.4.0_20220207-1606.tgz - ``` hcl-dx-design-studio-image-v0.7.0_20220207-1549.tar.gz - ``` hcl-dx-digital-asset-manager-image-v1.13.0_20220207-1609.tar.gz - ``` hcl-dx-experience-api-sample-ui-v0.2.0.20220207-1549.zip - ``` hcl-dx-image-processor-image-v1.14.0_20220207-1606.tar.gz - ``` hcl-dx-openldap-image-v1.2.0_20220207-1556.tar.gz - ``` hcl-dx-persistence-connection-pool-image-v1.14.0_20220207-1612.tar.gz - ``` hcl-dx-persistence-image-v1.14.0_20220207-1611.tar.gz - ``` hcl-dx-persistence-metrics-exporter-image-v1.12.0_20220207-1611.tar.gz - ``` hcl-dx-persistence-node-image-v1.4_20220207-1549.tar.gz - ``` hcl-dx-redis-image-5.0.14.tar.gz - ``` hcl-dx-remote-search-image-v95_CF201_20220206-1331.tar.gz - ``` hcl-dx-ringapi-image-v1.14.0_20220207-1554.tar.gz - ``` hcl-dx-runtime-controller-image-v95_CF201_20220207-1558.tar.gz - ``` hcl-dx-sidecar-image-v1.0.0_8.4-205.tar.gz ## HCL DX 9.5 CF200 - **Container Update CF200** If deploying the HCL DX 9.5 CF200 release, the package name and images are as follows: **HCL DX 9.5 CF200 DXClient files**: - ``` hcl-dxclient-image-v95_CF200_20211213-1500.zip - ``` hcl-dxclient-v95_CF200_20211213-1459.zip **HCL DX 9.5 CF\\_200-hcl-dx-kubernetes-v95-CF200.zip** **Important:** With the Operator-based deployment being removed starting in HCL DX Container Update 9.5 CF200, you will find some changes in the list of files and their names in CF199 and later releases. For more information, see [List of image files and changes from CF198 and later](#simpletable_cst_4lf_yrb). - ``` HCL DX notices V9.5 CF200.txt - ``` hcl-dx-ambassador-image-1142.tar.gz - ``` hcl-dx-content-composer-image-v1.13.0_20211213-1443.tar.gz - ``` hcl-dx-core-image-v95_CF200_20211213-1442.tar.gz - ``` hcl-dx-deployment-v2.2.0_20211213-1446.tgz - ``` hcl-dx-design-studio-image-v0.6.0_20211213-1448.tar.gz - ``` hcl-dx-digital-asset-manager-image-v1.12.0_20211213-1448.tar.gz - ``` hcl-dx-experience-api-sample-ui-v0.2.0.20211213-1454.zip - ``` hcl-dx-image-processor-image-v1.13.0_20211213-1446.tar.gz - ``` hcl-dx-openldap-image-v1.2.0_20211213-1444.tar.gz - ``` hcl-dx-persistence-connection-pool-image-v1.13.0_20211213-1457.tar.gz - ``` hcl-dx-persistence-image-v1.13.0_20211213-1457.tar.gz - ``` hcl-dx-persistence-metrics-exporter-image-v1.11.0_20211213-1458.tar.gz - ``` hcl-dx-persistence-node-image-v1.3_20211213-1454.tar.gz - ``` hcl-dx-redis-image-5.0.14.tar.gz - ``` hcl-dx-remote-search-image-v95_CF200_20211213-1442.tar.gz - ``` hcl-dx-ringapi-image-v1.13.0_20211213-1457.tar.gz - ``` hcl-dx-runtime-controller-image-v95_CF200_20211213-1444.tar.gz - ``` hcl-dx-sidecar-image-v1.0.0_8.4-205.tar.gz","title":"HCL DX 9.5 CF201"},{"location":"containerization/helm/docker/#hcl-dx-95-cf199","text":"Container Update CF199 If deploying the HCL DX 9.5 CF199 release, the package name and images are as follows: HCL DX 9.5 CF199 DXClient files : ``` hcl-dxclient-image-v95_CF199_20211029-1357.zip - ``` hcl-dxclient-v95_CF199_20211029-1357.zip **HCL DX 9.5 CF\\_199-hcl-dx-kubernetes-v95-CF199.zip** - ``` HCL DX notices V9.5 CF199.txt - ``` hcl-dx-ambassador-image-154.tar.gz - ``` hcl-dx-cloud-operator-image-v95_CF199_20211029-1700.tar.gz - ``` hcl-dx-cloud-scripts-v95_CF199_20211029-1700.zip - ``` hcl-dx-content-composer-image-v1.12.0_20211029-1341.tar.gz - ``` hcl-dx-core-image-v95_CF199_20211029-1348.tar.gz - ``` hcl-dx-deployment-v2.1.0_20211029-1346.tgz - ``` hcl-dx-design-studio-image-v0.5.0_20211029-0013.tar.gz - ``` hcl-dx-digital-asset-management-operator-image-v95_CF199_20211029-1342.tar.gz - ``` hcl-dx-digital-asset-manager-image-v1.11.0_20211029-1350.tar.gz - ``` hcl-dx-experience-api-sample-ui-v0.2.0.20211029-1354.zip - ``` hcl-dx-image-processor-image-v1.12.0_20211029-1346.tar.gz - ``` hcl-dx-openldap-image-v1.2.0_20211029-1342.tar.gz - ``` hcl-dx-persistence-connection-pool-image-v1.11.0_20211029-0224.tar.gz - ``` hcl-dx-persistence-image-v1.11.0_20211029-1349.tar.gz - ``` hcl-dx-persistence-metrics-exporter-image-v1.10.0_20211029-1352.tar.gz - ``` hcl-dx-persistence-node-image-v1.1_20211029-0148.tar.gz - ``` hcl-dx-redis-image-5.0.1.tar.gz - ``` hcl-dx-remote-search-image-v95_CF199_20211029-1348.tar.gz - ``` hcl-dx-ringapi-image-v1.12.0_20211029-1357.tar.gz - ``` hcl-dx-runtime-controller-image-v95_CF199_20211029-1344.tar.gz - ``` hcl-dx-sidecar-image-v1.0.0_8.4-205.tar.gz Important: With the Operator-based deployment being deprecated in CF198 and planned to be removed in HCL DX Container Update 9.5 CF200, you will find some changes in the list of files and their names in CF199 and later releases. Component Image name CF198 CF199 DX Core hcl-dx-core-image-vx.x.x_xxxxxxxx-xxxx.tar.gz hcl-dx-core-image-v95_CF198_20210917-1438.tar.gz hcl-dx-core-image-v95_CF199_20211029-1348.tar.gz Ring API hcl-dx-ringapi-image-vx.x.x_xxxxxxxx-xxxx.tar.gz hcl-dx-ringapi-image-v1.11.0_20210917-1441.tar.gz hcl-dx-ringapi-image-v1.12.0_20211029-1357.tar.gz Content Composer hcl-dx-content-composer-image-vx.x.x_xxxxxxxx-xxxx.tar.gz hcl-dx-content-composer-image-v1.10.0_20210917-1437.tar.gz hcl-dx-content-composer-image-v1.12.0_20211029-1341.tar.gz DX Deployment hcl-dx-deployment-vx.x.x_xxxxxxxx-xxxx.tgz hcl-dx-deployment-v2.0.0_20210917-1441.tgz hcl-dx-deployment-v2.1.0_20211029-1346.tgz Design Studio hcl-dx-design-studio-image- vx.x.x_xxxxxxxx-xxxx.tar.gz hcl-dx-site-manager-image-v0.4.0_20210917-1445.tar.gz hcl-dx-design-studio-image-v0.5.0_20211029-0013.tar.gz Digital Asset Management hcl-dx-digital-asset-manager-image- vx.x.x_xxxxxxxx-xxxx.tar.gz hcl-dx-digital-asset-manager-image-v1.10.0_20210917-1444.tar.gz hcl-dx-digital-asset-manager-image-v1.11.0_20211029-1350.tar.gz Persistence Connection Pool hcl-dx-persistence-connection-pool-image- vx.x.x_xxxxxxxx-xxxx.tar.gz hcl-dx-postgres-persistence-pgpool-image-v1.11.0_20210916-0224.tar.gz hcl-dx-persistence-connection-pool-image-v1.11.0_20211029-0224.tar.gz Persistence Node hcl-dx-persistence-node-image-vx.x.x_xxxxxxxx-xxxx.tar.gz hcl-dx-persistence-postgres-repmgr-image-v1.1_20210916-0148.tar.gz hcl-dx-persistence-node-image-v1.1_20211029-0148.tar.gz Persistence Metrics Exporter hcl-dx-persistence-metrics-exporter-image-vx.x.x_xxxxxxxx-xxxx.tar.gz NA hcl-dx-persistence-metrics-exporter-image-v1.10.0_20211029-1352.tar.gz Persistence hcl-dx-persistence-image- vx.x.x_xxxxxxxx-xxxx.tar.gz hcl-dx-postgres-image-v1.11.0_20210917-1444.tar.gz hcl-dx-persistence-image-v1.11.0_20211029-1349.tar.gz DX Experience API hcl-dx-experience-api-sample-ui-vx.x.x.xxxxxxxx-xxxx.zip hcl-dx-experience-api-sample-ui-v0.2.0.20210917-1439.zip hcl-dx-experience-api-sample-ui-v0.2.0.20211029-1354.zip Image processor hcl-dx-image-processor-image-vx.x.x_xxxxxxxx-xxxx.tar.gz hcl-dx-image-processor-image-v1.11.0_20210917-1449.tar.gz hcl-dx-image-processor-image-v1.12.0_20211029-1346.tar.gz Open LDAP hcl-dx-openldap-image-vx.x.x_xxxxxxxx-xxxx.tar.gz hcl-dx-openldap-image-v1.2.0_20210917-1437.tar.gz hcl-dx-openldap-image-v1.2.0_20211029-1342.tar.gz Remote search hcl-dx-remote-search-image-v95_CFxxx_xxxxxxxx-xxxx.tar.gz hcl-dx-remote-search-image-v95_CF198_20210917-1438.tar.gz hcl-dx-remote-search-image-v95_CF199_20211029-1348.tar.gz Runtime Controller hcl-dx-runtime-controller-image-v95_CFxxx_xxxxxxxx-xxxx.tar.gz hcl-dx-runtime-controller-image-v95_CF198_20210917-1441.tar.gz hcl-dx-runtime-controller-image-v95_CF199_20211029-1344.tar.gz Ambassador hcl-dx-ambassador-image-xxx.tar.gz hcl-dx-ambassador-image-154.tar.gz hcl-dx-ambassador-image-154.tar.gz Redis hcl-dx-redis-image-x.x.x.tar.gz hcl-dx-redis-image-5.0.1.tar.gz hcl-dx-redis-image-5.0.1.tar.gz Sidecar hcl-dx-sidecar-image-vx.x._x.x-xxx.tar.gz NA hcl-dx-sidecar-image-v1.0.0_8.4-205.tar.gz Note: The new image files and the change in file names are highlighted in the table.","title":"HCL DX 9.5 CF199"},{"location":"containerization/helm/docker/#hcl-dx-95-cf198","text":"CF198 If deploying HCL DX 9.5 CF198 release, the package name and images are as follows: HCL DX 9.5 CF198 DXClient files : ``` hcl-dxclient-image-v95_CF198_20210917-1455.zip - ``` hcl-dxclient-v95_CF198_20210917-1455.zip **HCL DX 9.5 CF198 - hcl-dx-kubernetes-v95-CF198.zip**: - ``` HCL DX notices V9.5 CF198.txt - ``` hcl-dx-ambassador-image-154.tar.gz - ``` hcl-dx-cloud-operator-image-v95_CF198_20210917-1749.tar.gz - ``` hcl-dx-cloud-scripts-v95_CF198_20210917-1749.zip - ``` hcl-dx-content-composer-image-v1.10.0_20210917-1437.tar.gz - ``` hcl-dx-core-image-v95_CF198_20210917-1438.tar.gz - ``` hcl-dx-deployment-v2.0.0_20210917-1441.tgz - ``` hcl-dx-digital-asset-management-operator-image-v95_CF198_20210917-1437.tar.gz - ``` hcl-dx-digital-asset-manager-image-v1.10.0_20210917-1444.tar.gz - ``` hcl-dx-experience-api-sample-ui-v0.2.0.20210917-1439.zip - ``` hcl-dx-image-processor-image-v1.11.0_20210917-1449.tar.gz - ``` hcl-dx-openldap-image-v1.2.0_20210917-1437.tar.gz - ``` hcl-dx-persistence-postgres-repmgr-image-v1.1_20210916-0148.tar.gz - ``` hcl-dx-postgres-image-v1.11.0_20210917-1444.tar.gz - ``` hcl-dx-postgres-persistence-pgpool-image-v1.11.0_20210916-0224.tar.gz - ``` hcl-dx-redis-image-5.0.1.tar.gz - ``` hcl-dx-remote-search-image-v95_CF198_20210917-1438.tar.gz - ``` hcl-dx-ringapi-image-v1.11.0_20210917-1441.tar.gz - ``` hcl-dx-runtime-controller-image-v95_CF198_20210917-1441.tar.gz - ``` hcl-dx-site-manager-image-v0.4.0_20210917-1445.tar.gz","title":"HCL DX 9.5 CF198"},{"location":"containerization/helm/docker/#hcl-dx-95-cf197","text":"CF197 If deploying HCL DX 9.5 CF197 release, the package name and images are as follows: HCL DX 9.5 CF197 Client - hcl-dx-client-v95-CF197.zip : ``` hcl-dxclient-image-v95_CF197_20210806-1311.zip - ``` hcl-dxclient-v95_CF197_20210806-1311.zip **HCL DX 9.5 CF197 - hcl-dx-kubernetes-v95-CF197.zip**: - ``` HCL DX notices V9.5 CF197.txt - ``` hcl-dx-ambassador-image-154.tar.gz - ``` hcl-dx-cloud-operator-image-v95_CF197_20210806-1310.tar.gz - ``` hcl-dx-cloud-scripts-v95_CF197_20210806-1310.zip - ``` hcl-dx-content-composer-image-v1.10.0_20210806-1258.tar.gz - ``` hcl-dx-core-image-v95_CF197_20210806-1259.tar.gz - ``` hcl-dx-deployment-v2.0.0_20210806-1300.tgz - ``` hcl-dx-digital-asset-management-operator-image-v95_CF197_20210806-1258.tar.gz - ``` hcl-dx-digital-asset-manager-image-v1.10.0_20210806-1302.tar.gz - ``` hcl-dx-experience-api-sample-ui-v0.2.0.20210806-1308.zip - ``` hcl-dx-image-processor-image-v1.10.0_20210806-1300.tar.gz - ``` hcl-dx-openldap-image-v1.2.0_20210806-1258.tar.gz - ``` hcl-dx-postgres-image-v1.10.0_20210806-1302.tar.gz - ``` hcl-dx-redis-image-5.0.1.tar.gz - ``` hcl-dx-remote-search-image-v95_CF197_20210806-1259.tar.gz - ``` hcl-dx-ringapi-image-v1.10.0_20210806-1311.tar.gz - ``` hcl-dx-runtime-controller-image-v95_CF197_20210806-1258.tar.gz - ``` hcl-dx-site-manager-image-v0.3.0_20210806-1308.tar.gz","title":"HCL DX 9.5 CF197"},{"location":"containerization/helm/docker/#hcl-dx-95-cf196","text":"CF196 If deploying HCL DX 9.5 CF196 release, the package name and images are as follows: HCL DX 9.5 CF196 Client - hcl-dx-client-v95-CF196.zip : ``` hcl-dxclient-image-v95_CF196_20210625-2028.zip - ``` hcl-dxclient-v95_CF196_20210625-2029.zip **HCL DX 9.5 CF196 - hcl-dx-kubernetes-v95-CF196.zip**: - ``` HCL DX notices V9.5 CF196.txt - ``` hcl-dx-ambassador-image-154.tar.gz - ``` hcl-dx-cloud-operator-image-v95_CF196_20210625-2033.tar.gz - ``` hcl-dx-cloud-scripts-v95_CF196_20210625-2033.zip - ``` hcl-dx-content-composer-image-v1.9.0_20210625-2012.tar.gz - ``` hcl-dx-core-image-v95_CF196_20210625-2011.tar.gz - ``` hcl-dx-deployment-v1.0.0_20210625-2026.tgz - ``` hcl-dx-digital-asset-management-operator-image-v95_CF196_20210625-2013.tar.gz - ``` hcl-dx-digital-asset-manager-image-v1.9.0_20210625-2016.tar.gz - ``` hcl-dx-experience-api-sample-ui-v0.2.0.20210625-2023.zip - ``` hcl-dx-image-processor-image-v1.8.0_20210625-2015.tar.gz - ``` hcl-dx-openldap-image-v1.2.0_20210625-2013.tar.gz - ``` hcl-dx-postgres-image-v1.9.0_20210625-2016.tar.gz - ``` hcl-dx-redis-image-5.0.1.tar.gz - ``` hcl-dx-remote-search-image-v95_CF196_20210625-2011.tar.gz - ``` hcl-dx-ringapi-image-v1.9.0_20210625-2026.tar.gz - ``` hcl-dx-runtime-controller-image-v95_CF196_20210625-2013.tar.gz - ``` hcl-dx-site-manager-image-v0.2.0_20210625-2023.tar.gz","title":"HCL DX 9.5 CF196"},{"location":"containerization/helm/docker/#hcl-dx-95-cf195","text":"CF195 If deploying HCL DX 9.5 CF195 release, the package name and images are as follows: HCL DX 9.5 CF195 Client - hcl-dx-client-v95-CF195.zip : ``` dxclient_v1.4.0_20210514-1713.zip **HCL DX 9.5 CF195 - hcl-dx-kubernetes-v95-CF195.zip**: - ``` HCL DX notices V9.5 CF195.txt - ``` dxclient_v1.4.0_20210514-1713.zip - ``` hcl-dx-ambassador-image-154.tar.gz - ``` hcl-dx-cloud-operator-image-v95_CF195_20210515-0201.tar.gz - ``` hcl-dx-cloud-scripts-v95_CF195_20210514-1707.zip - ``` hcl-dx-content-composer-image-v1.8.0_20210514-1707.tar.gz - ``` hcl-dx-core-image-v95_CF195_20210514-1708.tar.gz - ``` hcl-dx-digital-asset-management-operator-image-v95_CF195_20210514-1714.tar.gz - ``` hcl-dx-digital-asset-manager-image-v1.8.0_20210514-1711.tar.gz - ``` hcl-dx-experience-api-sample-ui-v0.2.0.20210514-1708.zip - ``` hcl-dx-image-processor-image-v1.8.0_20210514-1712.tar.gz - ``` hcl-dx-openldap-image-v1.1.0-master_20210514_1621013302.tar.gz - ``` hcl-dx-postgres-image-v1.8.0_20210514-1708.tar.gz - ``` hcl-dx-redis-image-5.0.1.tar.gz - ``` hcl-dx-remote-search-image-v95_CF195_20210514-1708.tar.gz - ``` hcl-dx-ringapi-image-v1.8.0_20210514-1709.tar.gz ## HCL DX 9.5 CF194 - **CF194** Important note: Please consult the HCL DX Support Knowledge Base article, [Manual Steps to Apply the Digital Experience 9.5 Container Deployment Core Certificate Update](https://support.hcltechsw.com/csm?id=kb_article&sysparm_article=KB0089699), to apply the certificate update to your HCL DX 9.5 container deployment. If deploying HCL DX 9.5 CF194 release, the package name and images are as follows: **HCL DX 9.5 CF194 Client - hcl-dx-client-v95-CF194.zip**: - ``` dxclient_v1.3.0_20210415-2128.zip **HCL DX 9.5 CF194 - hcl-dx-kubernetes-v95-CF194.zip**: - ``` HCL DX notices V9.5 CF194.txt - ``` dxclient_v1.3.0_20210415-2128.zip - ``` hcl-dx-ambassador-image-154.tar.gz - ``` hcl-dx-cloud-operator-image-v95_CF194_20210416-0233.tar.gz - ``` hcl-dx-cloud-scripts-v95_CF194_20210416-0233.zip - ``` hcl-dx-content-composer-image-v1.7.0_20210415-2121.tar.gz - ``` hcl-dx-core-image-v95_CF194_20210415-2120.tar.gz - ``` hcl-dx-digital-asset-management-operator-image-v95_CF194_20210415-2127.tar.gz - ``` hcl-dx-experience-api-sample-ui-v0.2.0.20210415-2121.zip - ``` hcl-dx-image-processor-image-v1.7.0_20210415-2120.tar.gz - ``` hcl-dx-openldap-image-v1.1.0-master_20210416_1618540820.tar.gz - ``` hcl-dx-postgres-image-v1.7.0_20210415-2120.tar.gz - ``` hcl-dx-redis-image-5.0.1.tar.gz - ``` hcl-dx-remote-search-image-v95_CF194_20210415-2120.tar.gz","title":"HCL DX 9.5 CF195"},{"location":"containerization/helm/docker/#hcl-dx-95-cf193","text":"CF193 If deploying HCL DX 9.5 CF193 release, the package name and images are as follows: HCL DX 9.5 CF193 Client - hcl-dx-client-v95-CF193.zip : ``` dxclient_v1.3.0_20210331-1335.zip **HCL DX 9.5 CF193 - hcl-dx-kubernetes-v95-CF193.zip**: - ``` HCL DX notices V9.5 CF193.txt - ``` dxclient_v1.3.0_20210331-1335.zip - ``` hcl-dx-ambassador-image-154.tar.gz - ``` hcl-dx-cloud-operator-image-v95_CF193_20210331-1847.tar.gz - ``` hcl-dx-cloud-scripts-v95_CF193_20210331-1847.zip - ``` hcl-dx-content-composer-image-v1.7.0_20210331-1333.tar.gz - ``` hcl-dx-core-image-v95_CF193_20210331-1336.tar.gz - ``` hcl-dx-digital-asset-management-operator-image-v95_CF193_20210331-1335.tar.gz - ``` hcl-dx-digital-asset-manager-image-v1.7.0_20210331-1339.tar.gz - ``` hcl-dx-experience-api-sample-ui-v0.2.0.20210331-1343.zip - ``` hcl-dx-image-processor-image-v1.7.0_20210331-1336.tar.gz - ``` hcl-dx-openldap-image-v1.1.0-master_20210331_1617216873.tar.gz - ``` hcl-dx-postgres-image-v1.7.0_20210331-1337.tar.gz - ``` hcl-dx-redis-image-5.0.1.tar.gz - ``` hcl-dx-remote-search-image-v95_CF193_20210331-1336.tar.gz - ``` hcl-dx-ringapi-image-v1.7.0_20210331-1339.tar.gz ## HCL DX 9.5 CF192 - **CF192** If deploying HCL DX 9.5 CF192 release, the package name and images are as follows: **hcl-dx-kubernetes-v95-CF192.zip**: - ``` HCL DX notices V9.5 CF192.txt - ``` dxclient_v1.2.0_20210305-1758.zip - ``` hcl-dx-ambassador-image-154.tar.gz - ``` hcl-dx-cloud-operator-image-v95_CF192_20210305-2309.tar.gz - ``` hcl-dx-cloud-scripts-v95_CF192_20210305-2309.zip - ``` hcl-dx-content-composer-image-v1.6.0_20210305-1756.tar.gz - ``` hcl-dx-core-image-v95_CF192_20210305-1758.tar.gz - ``` hcl-dx-digital-asset-management-operator-image-v95_CF192_20210305-1757.tar.gz - ``` hcl-dx-digital-asset-manager-image-v1.6.0_20210305-1802.tar.gz - ``` hcl-dx-experience-api-sample-ui-v0.2.0.20210305-1805.zip - ``` hcl-dx-image-processor-image-v1.6.0_20210305-1758.tar.gz - ``` hcl-dx-openldap-image-v1.0.0-master_20210305_1614986151.tar.gz - ``` hcl-dx-postgres-image-v1.6.0_20210305-1800.tar.gz - ``` hcl-dx-redis-image-5.0.1.tar.gz - ``` hcl-dx-remote-search-image-v95_CF192_20210305-1758.tar.gz - ``` hcl-dx-ringapi-image-v1.6.0_20210305-1802.tar.gz ## HCL DX 9.5 CF191 - **CF191** If deploying HCL DX 9.5 CF191 release, the package name and images are as follows: **hcl-dx-kubernetes-v95-CF191.zip** file: - ``` HCL DX notices V9.5 CF191.txt - ``` hcl-dx-ambassador-image-154.tar.gz - ``` hcl-dx-cloud-operator-image-v95_CF191_20201214-1527.tar.gz - ``` hcl-dx-cloud-scripts-v95_CF191_20201214-1527.zip - ``` hcl-dx-content-composer-image-v1.5.0_20201211-2151.tar.gz - ``` hcl-dx-core-image-v95_CF191_20201212-1421.tar.gz - ``` hcl-dx-digital-asset-management-operator-image-v95_CF191_20201211-2152.tar.gz - ``` hcl-dx-digital-asset-manager-image-v1.5.0_20201211-2155.tar.gz - ``` hcl-dx-experience-api-sample-ui-v0.2.0.20201211-2205.zip - ``` hcl-dx-image-processor-image-v1.5.0_20201211-2154.tar.gz - ``` hcl-dx-openldap-image-v1.0.0-master_20201212_1607741365.tar.gz - ``` hcl-dx-postgres-image-v1.5.0_20201211-2155.tar.gz - ``` hcl-dx-redis-image-5.0.1.tar.gz - ``` hcl-dx-remote-search-image-v95_CF191_20201212-1421.tar.gz - ``` hcl-dx-ringapi-image-v1.5.0_20201211-2200.tar.gz - ``` dxclient_v1.1.0_20201211-2153.zip **Note:** HCL DX 9.5 CF191 images are available and may be installed. HCL DX 9.5 CF191 is supported for new deployments only. DX administrators should not upgrade DX 9.5 container deployments to this release. ## HCL DX 9.5 CF19 - **CF19** If deploying HCL DX 9.5 CF19 release, the package name and images are as follows: **hcl-dx-kubernetes-v95-CF19.zip file**: - ``` HCL DX notices V9.5 CF19.txt - ``` hcl-dx-ambassador-image-154.tar.gz - ``` hcl-dx-cloud-operator-image-v95_CF19_20201110-0401.tar.gz - ``` hcl-dx-cloud-scripts-v95_CF19_20201110-0401.zip - ``` hcl-dx-content-composer-image-v1.4.0_20201109-2203.tar.gz - ``` hcl-dx-core-image-v95_CF19_20201109-2312.tar.gz - ``` hcl-dx-digital-asset-management-operator-image-v95_CF19_20201109-2204.tar.gz - ``` hcl-dx-digital-asset-manager-image-v1.4.0_20201109-2206.tar.gz - ``` hcl-dx-experience-api-sample-ui-v0.2.0.20201109-2208.zip - ``` hcl-dx-image-processor-image-v1.4.0_20201109-2204.tar.gz - ``` hcl-dx-openldap-image-v1.0.0-master_20201110_1604981292.tar.gz - ``` hcl-dx-postgres-image-v1.4.0_20201109-2206.tar.gz - ``` hcl-dx-redis-image-5.0.1.tar.gz - ``` hcl-dx-remote-search-image-v95_CF19_20201109-2312.tar.gz - ``` hcl-dx-ringapi-image-v1.4.0_20201109-2209.tar.gz - ``` dxclient_v1.0.0_20201110-2010.zip ## HCL DX 9.5 CF184 - **HCL DX 9.5 Container Update CF184** If deploying HCL DX 9.5 CF184 release, the package name and images are as follows: **hcl-dx-kubernetes-v95-CF184.zip files**: - ``` HCL DX notices V9.5 CF184.txt - ``` hcl-dx-ambassador-image-154.tar.gz - ``` hcl-dx-cloud-operator-image-v95_CF184_20200917-0054.tar.gz - ``` hcl-dx-cloud-scripts-v95_CF184_20200917-0054.zip - ``` hcl-dx-content-composer-image-v1.3.0_20200916-1952.tar.gz - ``` hcl-dx-core-image-v95_CF184_20200916-2009.tar.gz - ``` hcl-dx-digital-asset-management-operator-image-v95_CF184_20200916-2034.tar.gz - ``` hcl-dx-digital-asset-manager-image-v1.3.0_20200916-1953.tar.gz - ``` hcl-dx-image-processor-image-v1.3.0_20200916-1953.tar.gz - ``` hcl-dx-openldap-image-v1.0.0-master_20200917_1600304449.tar.gz - ``` hcl-dx-postgres-image-v1.3.0_20200916-2003.tar.gz - ``` hcl-dx-redis-image-5.0.1.tar.gz - ``` hcl-dx-remote-search-image-v95_CF184_20200916-2009.tar.gz - ``` hcl-dx-ringapi-image-v1.3.0_20200916-1953.tar.gz ## HCL DX 9.5 CF183 - **HCL DX 9.5 Container Update CF183** If deploying HCL DX 9.5 CF183 release, the image and package names are as follows: **CF183-core.zip files**: - ``` HCL DX notices V9.5 CF183.txt - ``` hcl-dx-ambassador-image-154.tar.gz - ``` hcl-dx-cloud-operator-image-v95_CF183_20200818-1852.tar.gz - ``` hcl-dx-cloud-scripts-v95_CF183_20200818-1852.zip - ``` hcl-dx-core-image-v95_CF183_20200818-1342.tar.gz - ``` hcl-dx-redis-image-5.0.1.tar.gz **CF183-other.zip files**: - ``` HCL DX notices V9.5 CF183.txt - ``` hcl-dx-content-composer-image-v1.2.0_20200818-1343.tar.gz - ``` hcl-dx-digital-asset-management-operator-image-v95_CF183_20200818-1344.tar.gz - ``` hcl-dx-digital-asset-manager-image-v1.2.0_20200818-1346.tar.gz - ``` hcl-dx-image-processor-image-v1.2.0_20200818-1345.tar.gz - ``` hcl-dx-openldap-image-v1.0.0-master_20200818_1597758965.tar.gz - ``` hcl-dx-postgres-image-v1.2.0_20200818-1349.tar.gz - ``` hcl-dx-remote-search-image-v95_CF183_20200818-1342.tar.gz - ``` hcl-dx-ringapi-image-v1.2.0_20200818-1351.tar.gz","title":"HCL DX 9.5 CF193"},{"location":"containerization/helm/docker/#hcl-dx-95-cf182","text":"CF182 If deploying HCL DX 9.5 CF182 release, the image and package names are as follows: hcl-dx-kubernetes-v95-CF182-core.zip : ``` HCL DX notices V9.5 CF182.txt - ``` hcl-dx-ambassador-image-0850.tar.gz - ``` hcl-dx-cloud-operator-image-v95_CF182_20200720-1708.tar.gz - ``` hcl-dx-cloud-scripts-v95_CF182_20200720-1708.zip - ``` hcl-dx-core-image-v95_CF182_20200720-1645.tar.gz **hcl-dx-kubernetes-v95-CF182-other.zip**: - ``` HCL DX notices V9.5 CF182.txt - ``` hcl-dx-content-composer-image-v1.1.0_20200720-1708.tar.gz - ``` hcl-dx-digital-asset-management-operator-image-v95_CF182_20200720-1716.tar.gz - ``` hcl-dx-digital-asset-manager-image-v1.1.0_20200720-1712.tar.gz - ``` hcl-dx-image-processor-image-v1.1.0_20200720-1716.tar.gz - ``` hcl-dx-openldap-image-v1.0.0-master_20200720_1595265588.tar.gz - ``` hcl-dx-postgres-image-v1.1.0_20200720-1715.tar.gz - ``` hcl-dx-remote-search-image-v95_CF182_20200720-1645.tar.gz - ``` hcl-dx-ringapi-image-v1.1.0_20200720-1707.tar.gz","title":"HCL DX 9.5 CF182"},{"location":"containerization/helm/docker/#hcl-dx-95-cf181","text":"CF181 If deploying HCL DX 9.5 CF181 and later container update release, the image and package names add HCL DX 9.5 Content Composer and Digital Asset Management components and supporting services images, as well as Remote Search and OpenLDAP images. See the following list of images presented within the HCL DX 9.5 Container Update CF181 package: hcl-dx-kubernetes-v95-CF181-core.zip : ``` hcl-dx-cloud-scripts-v95_CF181_xxxxxxxx-xxxx.zip - ``` hcl-dx-core-image-v95_CF181_xxxxxxxx-xxxx.tar.gz - ``` hcl-dx-cloud-operator-image-v95_CF181_xxxxxxxx-xxxx.tar.gz - ``` hcl-dx-ambassador-image-xxxx.tar.gz - ``` HCL DX notices V9.5 CF181.txt **hcl-dx-kubernetes-v95-CF181-other.zip**: - ``` hcl-dx-ringapi-image-v1.0.0_xxxxxxxx-xxxx.tar.gz - ``` hcl-dx-postgres-image-v1.0.0_xxxxxxxx-xxxx.tar.gz - ``` hcl-dx-openldap-image-v1.0.0-release_xxxxxxxx_xxxxxxxxxx.tar.gz - ``` hcl-dx-medialibrary-operator-image-v95_CF181_xxxxxxxx-xxxx.tar.gz - ``` hcl-dx-image-processor-image-v1.0.0_xxxxxxxx-xxxx.tar.gz - ``` hcl-dx-dxrs-image-v95_CF181_xxxxxxxx-xxxx.tar.gz ## HCL DX 9.5 CF18 - **CF18** If deploying HCL DX 9.5 CF18 and later container update release, the image and package names included for this are: - ``` hcl-dx-kubernetes-v95-CF18.zip - ``` hcl-dx-core-image-v95_CF18_xxxxxxxx-xxxx.tar.gz - ``` hcl-dx-cloud-operator-image-v95_CF18_xxxxxxxx-xxxx.tar.gz - ``` hcl-dx-cloud-scripts-v95_CF18_xxxxxxxx-xxxx.zip - ``` hcl-dx-ambassador-image-xxxx.tar.gz See the following sections for additional information: Docker image deployment Customizing the container deployment Requirements and limitations Parent topic: Digital Experience on containerized platforms","title":"HCL DX 9.5 CF181"},{"location":"containerization/helm/helm/","text":"Helm-based deployment Learn how to deploy HCL Digital Experience 9.5 containers along with Ambassador to Kubernetes, as verified in Helm. Support to deploy to Red Hat OpenShift, Amazon Elastic Kubernetes Service (Amazon EKS), and Microsoft Azure Kubernetes Service (AKS) using Helm is added in Container Update CF197.","title":"Helm-based deployment"},{"location":"containerization/helm/helm/#helm-based-deployment","text":"Learn how to deploy HCL Digital Experience 9.5 containers along with Ambassador to Kubernetes, as verified in Helm. Support to deploy to Red Hat OpenShift, Amazon Elastic Kubernetes Service (Amazon EKS), and Microsoft Azure Kubernetes Service (AKS) using Helm is added in Container Update CF197.","title":"Helm-based deployment"},{"location":"containerization/helm/helm_access_configwizard/","text":"Accessing the ConfigWizard admin console in a container environment This topic describes how you can access the ConfigWizard admin console in a container environment from your local system. The ConfigWizard admin console opens to the TCP port number 10203, but this port cannot be accessed directly via the Kubernetes ingress controller. Hence, use the following instructions to access the ConfigWizard console. Procedure Connect to your Kubernetes cluster from your workstation via CLI. For instructions, refer to the documentation of your cloud platform provider. Use the following command to find your deployment name space: kubectl get <namespace> Example: ``` sh-3.2$ kubectl get ns NAME STATUS AGE default Active 336d eks-n0-clstrhyb-rel Active 11h eks-rel-helm-fresh Active 15h kube-node-lease Active 336d kube-public Active 336d kube-system Active 336d ``` Use the following command to find your DX core pod name: ``` kubectl get pods -n ``` Example: ``` sh-3.2$ kubectl get pods -n eks-rel-helm-fresh NAME READY STATUS RESTARTS AGE dx-deployment-ambassador-7f954c7d74-46km2 1/1 Running 0 15h dx-deployment-ambassador-7f954c7d74-vfzxw 1/1 Running 0 15h dx-deployment-ambassador-7f954c7d74-wtfqq 1/1 Running 0 15h dx-deployment-ambassador-redis-6c5b8f84c6-7bw8r 1/1 Running 0 15h dx-deployment-ambassador-redis-6c5b8f84c6-j9s7v 1/1 Running 0 15h dx-deployment-ambassador-redis-6c5b8f84c6-nf7p5 1/1 Running 0 15h dx-deployment-content-composer-5cb56f94d8-wlnqw 1/1 Running 0 15h dx-deployment-core-0 3/3 Running 1 15h dx-deployment-design-studio-65d4bdbd89-hh62t 1/1 Running 0 15h dx-deployment-digital-asset-management-0 1/1 Running 4 15h dx-deployment-image-processor-96dc59fcf-956wz 1/1 Running 0 15h dx-deployment-open-ldap-0 1/1 Running 0 15h dx-deployment-persistence-connection-pool-75b77b8b86-pmfrz 1/1 Running 0 15h dx-deployment-persistence-node-0 2/2 Running 0 15h dx-deployment-persistence-node-1 2/2 Running 0 15h dx-deployment-persistence-node-2 2/2 Running 0 15h dx-deployment-remote-search-0 3/3 Running 0 15h dx-deployment-ring-api-845658b658-tt588 1/1 Running 0 15h dx-deployment-runtime-controller-7d9df9db98-h4mrf 1/1 Running 0 15h ``` Enable port-forwarding to your workstation. kubectl port-forward <dx-core pod-name> 10203:10203 -n <namespace> Note: Ensure that the port-forwarding service keeps running in your terminal to access the ConfigWizard admin console. Example: sh-3.2$ kubectl port-forward dx-deployment-core-0 10203:10203 -n eks-rel-helm-fresh Forwarding from 127.0.0.1:10203 -> 10203 Forwarding from [::1]:10203 -> 10203 Navigate to the following URL to open the ConfigWizard admin console: https://localhost:10203/ibm/console","title":"Accessing the ConfigWizard admin console in a container environment"},{"location":"containerization/helm/helm_access_configwizard/#accessing-the-configwizard-admin-console-in-a-container-environment","text":"This topic describes how you can access the ConfigWizard admin console in a container environment from your local system. The ConfigWizard admin console opens to the TCP port number 10203, but this port cannot be accessed directly via the Kubernetes ingress controller. Hence, use the following instructions to access the ConfigWizard console.","title":"Accessing the ConfigWizard admin console in a container environment"},{"location":"containerization/helm/helm_access_configwizard/#procedure","text":"Connect to your Kubernetes cluster from your workstation via CLI. For instructions, refer to the documentation of your cloud platform provider. Use the following command to find your deployment name space: kubectl get <namespace> Example: ``` sh-3.2$ kubectl get ns NAME STATUS AGE default Active 336d eks-n0-clstrhyb-rel Active 11h eks-rel-helm-fresh Active 15h kube-node-lease Active 336d kube-public Active 336d kube-system Active 336d ``` Use the following command to find your DX core pod name: ``` kubectl get pods -n ``` Example: ``` sh-3.2$ kubectl get pods -n eks-rel-helm-fresh NAME READY STATUS RESTARTS AGE dx-deployment-ambassador-7f954c7d74-46km2 1/1 Running 0 15h dx-deployment-ambassador-7f954c7d74-vfzxw 1/1 Running 0 15h dx-deployment-ambassador-7f954c7d74-wtfqq 1/1 Running 0 15h dx-deployment-ambassador-redis-6c5b8f84c6-7bw8r 1/1 Running 0 15h dx-deployment-ambassador-redis-6c5b8f84c6-j9s7v 1/1 Running 0 15h dx-deployment-ambassador-redis-6c5b8f84c6-nf7p5 1/1 Running 0 15h dx-deployment-content-composer-5cb56f94d8-wlnqw 1/1 Running 0 15h dx-deployment-core-0 3/3 Running 1 15h dx-deployment-design-studio-65d4bdbd89-hh62t 1/1 Running 0 15h dx-deployment-digital-asset-management-0 1/1 Running 4 15h dx-deployment-image-processor-96dc59fcf-956wz 1/1 Running 0 15h dx-deployment-open-ldap-0 1/1 Running 0 15h dx-deployment-persistence-connection-pool-75b77b8b86-pmfrz 1/1 Running 0 15h dx-deployment-persistence-node-0 2/2 Running 0 15h dx-deployment-persistence-node-1 2/2 Running 0 15h dx-deployment-persistence-node-2 2/2 Running 0 15h dx-deployment-remote-search-0 3/3 Running 0 15h dx-deployment-ring-api-845658b658-tt588 1/1 Running 0 15h dx-deployment-runtime-controller-7d9df9db98-h4mrf 1/1 Running 0 15h ``` Enable port-forwarding to your workstation. kubectl port-forward <dx-core pod-name> 10203:10203 -n <namespace> Note: Ensure that the port-forwarding service keeps running in your terminal to access the ConfigWizard admin console. Example: sh-3.2$ kubectl port-forward dx-deployment-core-0 10203:10203 -n eks-rel-helm-fresh Forwarding from 127.0.0.1:10203 -> 10203 Forwarding from [::1]:10203 -> 10203 Navigate to the following URL to open the ConfigWizard admin console: https://localhost:10203/ibm/console","title":"Procedure"},{"location":"containerization/helm/helm_additional_tasks/","text":"Additional Helm tasks This topic shows you how to leverage NodeSelectors to allow deploying specific DX 9.5 application Pods only on a specific node. Prepare cluster nodes You must label your Kubernetes or OpenShift cluster nodes to use NodeSelectors . You can do this by editing the node in Kubernetes or OpenShift. The following steps shows how to modify cluster nodes. As the examples here may differ from those given by your cloud provider, you are encouraged to review the documentation reference accompanying your cloud subscription. For this example, the following setup is assumed: The target cluster has multiple nodes. A label purpose is added to a node called k8s-node-4 and assigned the value ingress This can be done using the following commands: Kubectl: ``` Edit Node kubectl edit node k8s-node-4 ``` OpenShift Client: ``` Edit Node kubectl edit node k8s-node-4 ``` The following label is added using the Kubernetes syntax (and other configurations are changed): metadata: labels: purpose: ingress The node is now labeled with the desired target label: Kubectl: ``` Execute lookup via kubectl kubectl get node k8s-node-4 --show-labels Command output NAME STATUS ROLES AGE VERSION LABELS k8s-node-4 Ready 123d v1.20.2 beta.kubernetes.io/arch=amd64,beta.kubernetes.io/os=linux,kubernetes.io/arch=amd64,kubernetes.io/hostname=k8s-node-4,kubernetes.io/os=linux,purpose=ingress Execute lookup via kubectl oc get node k8s-node-4 --show-labels Command output NAME STATUS ROLES AGE VERSION LABELS k8s-node-4 Ready 123d v1.20.2 beta.kubernetes.io/arch=amd64,beta.kubernetes.io/os=linux,kubernetes.io/arch=amd64,kubernetes.io/hostname=k8s-node-4,kubernetes.io/os=linux,purpose=ingress ``` Configure nodes You can assign all pods (deployed by the Helm Chart of HCL Digital Experience 9.5) to specific nodes by using NodeSelectors . Modify your custom-values.yaml file to include the NodeSelector configuration. Make sure to use the proper indentation as YAML is indent-sensitive. Example for Ambassador: nodeSelector: ambassadorIngress: purpose: ingress ambassadorRedis: purpose: ingress This configuration directs the Ambassador Ingress and Ambassador Redis to run nodes with the label purpose: ingress . Once install is completed, the pods are running on your desired node. For example k8s-node-4 . Kubectl: # Use this command to see running Pods incl. Nodes kubectl get pods -o wide -n my-deployment # Command output NAME READY STATUS RESTARTS AGE IP NODE NOMINATED NODE READINESS GATES dx-ambassador-769b86f6ff-knhgt 1/1 Running 0 2m12s 10.244.4.111 k8s-node-4 <none> <none> dx-ambassador-769b86f6ff-qtqmv 1/1 Running 0 2m12s 10.244.4.110 k8s-node-4 <none> <none> dx-ambassador-769b86f6ff-whmw6 1/1 Running 0 2m12s 10.244.4.112 k8s-node-4 <none> <none> dx-ambassador-redis-6cbbf58649-gtqwv 1/1 Running 0 2m12s 10.244.4.106 k8s-node-4 <none> <none> dx-ambassador-redis-6cbbf58649-j8v4d 1/1 Running 0 2m12s 10.244.4.107 k8s-node-4 <none> <none> dx-ambassador-redis-6cbbf58649-qtgqp 1/1 Running 0 2m12s 10.244.4.109 k8s-node-4 <none> <none> OpenShift Client: # Use this command to see running Pods incl. Nodes oc get pods -o wide -n my-deployment # Command output NAME READY STATUS RESTARTS AGE IP NODE NOMINATED NODE dx-ambassador-769b86f6ff-knhgt 1/1 Running 0 2m12s 10.244.4.111 k8s-node-4 <none> dx-ambassador-769b86f6ff-qtqmv 1/1 Running 0 2m12s 10.244.4.110 k8s-node-4 <none> dx-ambassador-769b86f6ff-whmw6 1/1 Running 0 2m12s 10.244.4.112 k8s-node-4 <none> dx-ambassador-redis-6cbbf58649-gtqwv 1/1 Running 0 2m12s 10.244.4.106 k8s-node-4 <none> dx-ambassador-redis-6cbbf58649-j8v4d 1/1 Running 0 2m12s 10.244.4.107 k8s-node-4 <none> dx-ambassador-redis-6cbbf58649-qtgqp 1/1 Running 0 2m12s 10.244.4.109 k8s-node-4 <none> Select DX applications to deploy HCL Digital Experience 9.5 consists of multiple applications and services that can be deployed. Depending on your needs, it might not be necessary to have all applications deployed. Refer to the Applications overview - Deploy DX 9.5 to container platforms using Helm Help Center topic for related information. Disabling or enabling specific applications You can easily enable or disable specific applications by adding the following parts to your custom-values.yaml file: # Controls which application is deployed and configured applications: # Deploys Content Composer contentComposer: true # Deploys Core core: true # Deploys Design Studio designStudio: false # Deploys Digital Asset Management digitalAssetManagement: true # Deploys the Image Processor # Enabling digitalAssetManagement will override this setting with: true imageProcessor: true # Deploy Open LDAP # Setting the ldap type in the core application configuration to dx will override this setting with: true openLdap: true # Deploys the Persistence Layer # Enabling digitalAssetManagement will override this setting with: true persistence: true # Deploys the Remote Search remoteSearch: true # Deploys the Ring API # Enabling either digitalAssetManagement or contentComposer will override this setting with: true ringApi: true # Deploys the Ambassador Ingress and Redis ambassador: true # Deploys the Runtime Controller runtimeController: true You can set applications that you do not want to be deployed to false . As noted in the Applications overview - Deploy DX 9.5 to container platforms using Helm Help Center topic, some DX applications are pre-requisites for others to be deployed. It can appear that you have disabled an application, but it still gets deployed. This is due to other applications requiring that one. Supported LDAP configuration You can specify a LDAP configuration that can be used by HCL Digital Experience 9.5. The Helm chart provides a ldap section under the configuration and core section. This section can be used to configure a none , dx or other LDAP. This defaults to none, so there is no LDAP configured. If you adjust this to other , you can configure an external LDAP that you want to connect to. Core is then configured to use this LDAP. Currently, the configuration capability is quite limited. For more complex configurations, use the ConfigWizard instead. Parameter Values Description type - none - other - dx |- Determines which type of LDAP to use. - Accepts none , dx or other - none : No LDAP configuration - dx : use and configure DX Open LDAP - other : use other LDAP | |bindUser| |- User used to connect to LDAP - Only used if ldap type is other | |bindPassword| |- Password used to connect to LDAP - Only used if ldap type is other | |suffix| |- Suffix in LDAP - Only used if ldap type is other | |host| |- Host of LDAP - Only used if ldap type is other | |port| |- Port of LDAP - Only used if ldap type is other | |attributeMappingLdap|- mail - title - userPassword |- Mapping attributes between LDAP and DX, LDAP attribute names (comma-separated list) | |attributeMappingPortal|- ibm-primaryEmail - ibm-jobTitle - password |- Mapping attributes between LDAP and DX, DX attribute names (comma-separated list) | |attributeNonSupported|- certificate - members |- Non-supported LDAP attributes (comma-separated list) | |serverType|- CUSTOM |- Supported LDAP Server types | |id|- dx_ldap |- LDAP configuration id | Example Configuration You can use the following syntax in your custom-values.yaml file to adjust LDAP settings: # Application configuration configuration: # Application specific configuration for Core core: # Settings for LDAP configuration ldap: # Determines which type of LDAP to use # Accepts: \"none\", \"dx\" or \"other\" # \"none\" - no LDAP configuration # \"dx\" - use DX openLDAP and configure it # \"other\" - use provided configuration for other LDAP type: \"none\" # User used to connect to LDAP, only used if ldap type is \"other\" bindUser: \"\" # Password used to connect to LDAP, only used if ldap type is \"other\" bindPassword: \"\" # Suffix in LDAP, only used if ldap type is \"other\" suffix: \"\" # Host of LDAP, only used if ldap type is \"other\" host: \"\" # Port of LDAP, only used if ldap type is \"other\" port: \"\" # Supported LDAP Server types - CUSTOM serverType: \"CUSTOM\" # LDAP configuration id id: \"dx_ldap\" # Mapping attributes between LDAP and DX, LDAP attribute names (comma-separated list) attributeMappingLdap: \"mail,title,userPassword\" # Mapping attributes between LDAP and DX, DX attribute names (comma-separated list) attributeMappingPortal: \"ibm-primaryEmail,ibm-jobTitle,password\" # Non-supported LDAP attributes (comma-separated list) attributeNonSupported: \"certificate,members\" Refer to the following Help Center documentation for more information about LDAP and Configuration Wizard configuration: Configuration Wizard Enable federated security Troubleshooting: Enable federated security option Authoring/Rendering configuration You can choose if the environment you deploy is configured as a WCM authoring or rendering type. This has implications on things like caching of Core. As default, this defaults to true. The deployment is configured as an authoring environment. If you want to adjust this to deploy a rendering environment, you can use the following syntax in your custom-values.yaml file: # Application configuration configuration: # Application specific configuration for Core core: # Settings for tuning tuning: # Configures if the environment should be configured for authoring or not authoring: true Configuration Wizard configuration You can select whether the Config Wizard is started together with the Core application. This defaults to true. If you want to adjust this setting, you can use the following syntax in your file: # Application configuration configuration: # Application specific configuration for Core core: # Settings for tuning tuning: # Configures if the server for configWizard and dxconnect is started configWizard: true OpenLDAP configuration If you choose to deploy the OpenLDAP container in your deployment, you can change country, organization and suffix, that may be configured in OpenLDAP for use. Use the following syntax in your custom-values.yaml file to adjust the configuration: # Application configuration configuration: # Application specific configuration for Open LDAP openLdap: # Country configuration for Open LDAP country: \"US\" # Org configuration for Open LDAP org: \"DX\" # Suffix configuration for Open LDAP suffix: \"dc=dx,dc=com\" Remote Search configuration You can configure whether the Remote Search configuration through the IBM WebSphere Application Server Solution Console is exposed as an additional port on the Ambassador Ingress or not. This defaults to true. If set to true, you can access the Solution Console using: https://yourhost:9043/ibm/console Use the following syntax in your custom-values.yaml file: # Application configuration configuration: # Application specific configuration for Remote Search remoteSearch: # Should the configuration interface be exposed exposeConfigurationConsole: true Configure scaling The HCL Digital Experience 9.5 Kubernetes deployment using Helm allows you to configure the pod count of each individual application. In addition, it is possible to configure the use of HorizontalPodAutoscalers that scales up and down the applications by adding or removing Pods based on the pod metrics. Refer to the Scaling DX 9.5 container deployments using Helm Help Center topic for detailed overview information. Note: You are not able to use more than one (1) Core Pod until you have performed a database transfer. Configuring pod count Even if you don't want to automatically scale your DX 9.5 deployment based on CPU and memory utilization, you still can control the amount of pods per application. You can use the following syntax to reconfigure the pod count per application in your custom-values.yaml file: # Scaling settings for deployed applications scaling: # The default amount of replicas per application replicas: contentComposer: 1 core: 1 designStudio: 1 digitalAssetManagement: 3 imageProcessor: 5 ringApi: 3 ambassadorIngress: 3 ambassadorRedis: 3 Configuring HorizontalPodAutoscalers The use of HorizontalPodAutoscalers requires your cluster to have the Kubernetes Metrics running. Ensure that this is the case, and reference your cloud provider documentation for further information. You can set up the use of HorizontalPodAutoscalers on a per application basis using the following syntax in your custom-values.yaml file, showing Content Composer, as an example: # Scaling settings for deployed applications scaling: # Automated scaling using HorizontalPodAutoscaler horizontalPodAutoScaler: # Autoscaling settings for Content Composer contentComposer: # Enable or disable autoscaling enabled: true # Minimum and maximum Pod count minReplicas: 1 maxReplicas: 3 # Target CPU utilization scaling threshold targetCPUUtilizationPercentage: 75 # Target Memory utilization scaling threshold targetMemoryUtilizationPercentage: 80 The example configures a HorizontalPodAutoscaler for Content Composer, that scales up to 3 pods maximum. It considers scaling when a CPU utilization of 75% or Memory utilization of 80% per pod is reached. Refer to the default values.yaml file for all configurable applications. Configure credentials HCL Digital Experience 9.5 uses several credentials in its deployment to manage access between applications and from outside the container deployment. Adjusting default credentials You can adjust the default credentials that HCL Digital Experience 9.5 is using by adding the following syntax to your custom-values.yaml file and changing the values you need: # Security related configuration, e.g. default credentials security: # Security configuration for Core core: # Credentials used for IBM WebSphere Application Server administrative access, needs to be adjusted if different credentials are already in place # This setting does currently NOT adjust the existing user credentials. wasUser: \"REDACTED\" wasPassword: \"REDACTED\" # Credentials used for HCL Digital Experience Core administrative access, needs to be adjusted if different credentials are already in place # This setting does currently NOT adjust the existing user credentials wpsUser: \"REDACTED\" wpsPassword: \"REDACTED\" # Security configuration for Digital Asset Management digitalAssetManagement: # Credentials used by the Digital Asset Management to access the persistence database. dbUser: \"REDACTED\" dbPassword: \"REDACTED\" # Credentials used by the persistence database to perform replication between database nodes. replicationUser: \"REDACTED\" replicationPassword: \"REDACTED\" # Security configuration for Open LDAP openLdap: # Admin user for Open LDAP, can not be adjusted currently. ldapUser: \"REDACTED\" # Admin password for Open LDAP ldapPassword: \"REDACTED\" Configure Core sidecar logging Beginning with HCL Digital Experience 9.5 CF199, Kubernetes deployment using Helm allows you to expose logs that are written to files by the DX Core application. The deployment uses sidecar containers, which access the same logs volume as the Core, read the log files, and expose them as their standard output. You can access logs with commands like kubectl logs -n <namespace> <pod-name> <sidecar-container-name> , for example, kubectl logs -n dxns dx-deployment-core-0 system-err-log . See the official Kubernetes documentation for more information. Shared volume The DX Core container and sidecar containers share the same volume. This allows DX Core to write its logs, and have the sidecar containers read those logs. The logs are mounted at /opt/HCL/logs (and symbolically linked from /opt/HCL/wp_profile/logs) in the DX Core container, and at /var/logs/ in the sidecar containers. The different directory paths emphasize that sidecar containers can only read files written by Core under its logs directory. Files in other directories (such as the profile) are not available to the sidecars. Default configuration Two sidecar containers are launched with Core: system-out-log - exposes the log file at /var/logs/WebSphere_Portal/SystemOut.log. system-err-log - exposes the log file at /var/logs/WebSphere_Portal/SystemErr.log. Configure custom sidecar containers Use the following syntax to configure more sidecar containers for additional log files in the custom-values.yaml file. Important: You can only expose log files inside of the /var/logs/ directory. logging: # Core specific logging configuration core: # List of sidecar containers mapping a container name to a file path for a log file to be exposed # Each element must consist of a `containerName` and a `logFilePath` # Example: # customLogSidecarContainers: # - containerName: \"trace\" # logFilePath: \"/var/logs/WebSphere_Portal/trace.log\" customLogSidecarContainers: [] Example: The following example starts a new sidecar container, and exposes the logs in /var/logs/WebSphere_Portal/trace.log. logging: core: customLogSidecarContainers: - containerName: \"trace\" logFilePath: \"/var/logs/WebSphere_Portal/trace.log\" Configure Remote Search sidecar logging Beginning with HCL Digital Experience 9.5 CF199, Kubernetes deployment using Helm allows you to expose logs that are written to files on its PersistentVolumes (PVs) by the DX Remote Search application. The deployment uses sidecar containers, which access the PersistentVolume as the Remote Search container, read the log files, and expose them as their standard output. You can access logs with commands like kubectl logs -n <namespace> <pod-name> <sidecar-container-name> , for example, kubectl logs -n dxns dx-deployment-remote-search-0 system-err-log . See the official Kubernetes documentation for more information. Shared volume The DX Remote Search container and sidecar containers in the same pod share the same volume. This allows DX Remote Search to write its logs, and have the sidecar containers read those logs. The profile volume containing the logs is mounted at /opt/HCL/AppServer/profiles/prs_profile/ in the DX Remote Search container, and at /var/profile/ in the sidecar containers. The different directory paths emphasize that sidecar containers can only read files written by Remote Search under its profile directory. Files in other directories are not available to the sidecars. Default configuration Two sidecar containers are launched with Remote Search: system-out-log - exposes the log file at /var/profile/logs/server1/SystemOut.log. system-err-log - exposes the log file at /var/profile/logs/server1/SystemErr.log. Configure custom sidecar containers Use the following syntax to configure more sidecar containers for additional log files in the custom-values.yaml file. Important: You can only expose log files inside of the /var/profile/ directory. logging: remoteSearch: # List of sidecar containers mapping a container name to a file path for a log file to be exposed # Each element must consist of a `containerName` and a `logFilePath`, the latter must be located in /var/profile # Example: # customLogSidecarContainers: # - containerName: \"trace\" # logFilePath: \"/var/profile/logs/server1/trace.log\" customLogSidecarContainers: [] Example: The following example starts a new sidecar container, and exposes the logs in /var/profile/logs/server1/trace.log. logging: remoteSearch: customLogSidecarContainers: - containerName: \"trace\" logFilePath: \"/var/profile/logs/server1/trace.log\" Configure Labels and Annotations This section documents the configuration of labels and annotations for different DX resources. Annotations Services and Pods To configure annotations for kubernetes services and pods, update your custom-values.yaml file as follows: Notes: Additional annotations are not mandatory for a deployment. Ensure you do not overwrite existing DX annotations such as the following: meta.helm.sh/release-name meta.helm.sh/release-namespace Sample annotations for core service To set annotation KEY1 with value VALUE1 and annotation KEY2 with value VALUE2 on the core service, add the following to your custom-values.yaml file: annotations: service: core: - key: KEY1 value: VALUE1 - key: KEY2 value: VALUE2 Sample annotations for core pods To set annotation KEY1 with value VALUE1 and annotation KEY2 with value VALUE2 on core pods, add the following to your custom-values.yaml file: annotations: pod: core: - key: KEY1 value: VALUE1 - key: KEY2 value: VALUE2 Labels Services and Pods To configure labels for kubernetes services and pods, update your custom-values.yaml file as follows: Notes: Additional labels are not mandatory for a deployment. Ensure that you do not overwrite existing DX Labels such as the following: ``` release ``` ``` helm.sh/chart ``` ``` app.kubernetes.io/version ``` ``` app.kubernetes.io/managed-by ``` ``` app.kubernetes.io/name ``` app.kubernetes.io/instance Sample labels for core services To set label KEY1 with value VALUE1 and label KEY2 with value VALUE2 on the core services, add the following to your custom-values.yaml file: label: service: core: - key: KEY1 value: VALUE1 - key: KEY2 value: VALUE2 Sample labels for core pods To set label KEY1 with value VALUE1 and label KEY2 with value VALUE2 on core pods, add the following to your custom-values.yaml file: label: pod: core: - key: KEY1 value: VALUE1 - key: KEY2 value: VALUE2 Configure environment variables for DX resources This section explains the configuration of environment variables for different DX resources. Environment variables To configure environment variables for kubernetes pods, update your custom-values.yaml file as below. Note: Additional environment values are not mandatory for a deployment. Sample environment variables for core pods To set environment variable KEY1 with value VALUE1 and environment variable KEY2 with value VALUE2 on core pods, add the following to your custom-values.yaml file: environment: pod: core: - name: KEY1 value: VALUE1 - name: KEY2 value: VALUE2 Incubator section in the values.yaml file The Incubator section is in the root level of the values.yaml file in the Helm charts. This section contains the capabilities that are planned to be made available for production environments in the future releases. The configurations within the incubator section are subject to change. The default values within this section are defined in such a way that they do not interfere with the existing deployments. The features and functions within the incubator section are considered experimental and might not be fully documented yet. Note: All features within the incubator section are not recommended to be used in the production environments. Refer to Install and uninstall commands for the next steps. Use ImagePullSecrets To use a container image registry that has access restrictions and requires credentials, you need to leverage ImagePullSecrets in your deployment. Refer to the Kubernetes Documentation for additional information on this topic. In addition, reference your Cloud Provider documentation on how to create ImagePullSecrets . Note: Ensure that the ImagePullSecret has been created in the same namespace that your DX deployment is installed to. Configure deployment to use ImagePullSecrets In order for the HCL Digital Experience 9.5 deployment to leverage ImagePullSecrets you need to adjust your custom-values.yaml file to include the following syntax: images: imagePullSecrets: - name: regcred The name regcred can be different, depending on how you have created your ImagePullSecret and how it is named. Ensure that you reference the correct name in the configuration. It is assume that you have moved the HCL Digital Experience 9.5 images to your registry; make sure it is also configured properly in your custom-values.yaml : images: repository: \"your-repo:port\" All pods created now have that secret configured for pulling DX container images.","title":"Additional Helm tasks"},{"location":"containerization/helm/helm_additional_tasks/#additional-helm-tasks","text":"This topic shows you how to leverage NodeSelectors to allow deploying specific DX 9.5 application Pods only on a specific node.","title":"Additional Helm tasks"},{"location":"containerization/helm/helm_additional_tasks/#prepare-cluster-nodes","text":"You must label your Kubernetes or OpenShift cluster nodes to use NodeSelectors . You can do this by editing the node in Kubernetes or OpenShift. The following steps shows how to modify cluster nodes. As the examples here may differ from those given by your cloud provider, you are encouraged to review the documentation reference accompanying your cloud subscription. For this example, the following setup is assumed: The target cluster has multiple nodes. A label purpose is added to a node called k8s-node-4 and assigned the value ingress This can be done using the following commands: Kubectl: ```","title":"Prepare cluster nodes"},{"location":"containerization/helm/helm_additional_tasks/#edit-node","text":"kubectl edit node k8s-node-4 ``` OpenShift Client: ```","title":"Edit Node"},{"location":"containerization/helm/helm_additional_tasks/#edit-node_1","text":"kubectl edit node k8s-node-4 ``` The following label is added using the Kubernetes syntax (and other configurations are changed): metadata: labels: purpose: ingress The node is now labeled with the desired target label: Kubectl: ```","title":"Edit Node"},{"location":"containerization/helm/helm_additional_tasks/#execute-lookup-via-kubectl","text":"kubectl get node k8s-node-4 --show-labels","title":"Execute lookup via kubectl"},{"location":"containerization/helm/helm_additional_tasks/#command-output","text":"NAME STATUS ROLES AGE VERSION LABELS k8s-node-4 Ready 123d v1.20.2 beta.kubernetes.io/arch=amd64,beta.kubernetes.io/os=linux,kubernetes.io/arch=amd64,kubernetes.io/hostname=k8s-node-4,kubernetes.io/os=linux,purpose=ingress","title":"Command output"},{"location":"containerization/helm/helm_additional_tasks/#execute-lookup-via-kubectl_1","text":"oc get node k8s-node-4 --show-labels","title":"Execute lookup via kubectl"},{"location":"containerization/helm/helm_additional_tasks/#command-output_1","text":"NAME STATUS ROLES AGE VERSION LABELS k8s-node-4 Ready 123d v1.20.2 beta.kubernetes.io/arch=amd64,beta.kubernetes.io/os=linux,kubernetes.io/arch=amd64,kubernetes.io/hostname=k8s-node-4,kubernetes.io/os=linux,purpose=ingress ```","title":"Command output"},{"location":"containerization/helm/helm_additional_tasks/#configure-nodes","text":"You can assign all pods (deployed by the Helm Chart of HCL Digital Experience 9.5) to specific nodes by using NodeSelectors . Modify your custom-values.yaml file to include the NodeSelector configuration. Make sure to use the proper indentation as YAML is indent-sensitive. Example for Ambassador: nodeSelector: ambassadorIngress: purpose: ingress ambassadorRedis: purpose: ingress This configuration directs the Ambassador Ingress and Ambassador Redis to run nodes with the label purpose: ingress . Once install is completed, the pods are running on your desired node. For example k8s-node-4 . Kubectl: # Use this command to see running Pods incl. Nodes kubectl get pods -o wide -n my-deployment # Command output NAME READY STATUS RESTARTS AGE IP NODE NOMINATED NODE READINESS GATES dx-ambassador-769b86f6ff-knhgt 1/1 Running 0 2m12s 10.244.4.111 k8s-node-4 <none> <none> dx-ambassador-769b86f6ff-qtqmv 1/1 Running 0 2m12s 10.244.4.110 k8s-node-4 <none> <none> dx-ambassador-769b86f6ff-whmw6 1/1 Running 0 2m12s 10.244.4.112 k8s-node-4 <none> <none> dx-ambassador-redis-6cbbf58649-gtqwv 1/1 Running 0 2m12s 10.244.4.106 k8s-node-4 <none> <none> dx-ambassador-redis-6cbbf58649-j8v4d 1/1 Running 0 2m12s 10.244.4.107 k8s-node-4 <none> <none> dx-ambassador-redis-6cbbf58649-qtgqp 1/1 Running 0 2m12s 10.244.4.109 k8s-node-4 <none> <none> OpenShift Client: # Use this command to see running Pods incl. Nodes oc get pods -o wide -n my-deployment # Command output NAME READY STATUS RESTARTS AGE IP NODE NOMINATED NODE dx-ambassador-769b86f6ff-knhgt 1/1 Running 0 2m12s 10.244.4.111 k8s-node-4 <none> dx-ambassador-769b86f6ff-qtqmv 1/1 Running 0 2m12s 10.244.4.110 k8s-node-4 <none> dx-ambassador-769b86f6ff-whmw6 1/1 Running 0 2m12s 10.244.4.112 k8s-node-4 <none> dx-ambassador-redis-6cbbf58649-gtqwv 1/1 Running 0 2m12s 10.244.4.106 k8s-node-4 <none> dx-ambassador-redis-6cbbf58649-j8v4d 1/1 Running 0 2m12s 10.244.4.107 k8s-node-4 <none> dx-ambassador-redis-6cbbf58649-qtgqp 1/1 Running 0 2m12s 10.244.4.109 k8s-node-4 <none>","title":"Configure nodes"},{"location":"containerization/helm/helm_additional_tasks/#select-dx-applications-to-deploy","text":"HCL Digital Experience 9.5 consists of multiple applications and services that can be deployed. Depending on your needs, it might not be necessary to have all applications deployed. Refer to the Applications overview - Deploy DX 9.5 to container platforms using Helm Help Center topic for related information. Disabling or enabling specific applications You can easily enable or disable specific applications by adding the following parts to your custom-values.yaml file: # Controls which application is deployed and configured applications: # Deploys Content Composer contentComposer: true # Deploys Core core: true # Deploys Design Studio designStudio: false # Deploys Digital Asset Management digitalAssetManagement: true # Deploys the Image Processor # Enabling digitalAssetManagement will override this setting with: true imageProcessor: true # Deploy Open LDAP # Setting the ldap type in the core application configuration to dx will override this setting with: true openLdap: true # Deploys the Persistence Layer # Enabling digitalAssetManagement will override this setting with: true persistence: true # Deploys the Remote Search remoteSearch: true # Deploys the Ring API # Enabling either digitalAssetManagement or contentComposer will override this setting with: true ringApi: true # Deploys the Ambassador Ingress and Redis ambassador: true # Deploys the Runtime Controller runtimeController: true You can set applications that you do not want to be deployed to false . As noted in the Applications overview - Deploy DX 9.5 to container platforms using Helm Help Center topic, some DX applications are pre-requisites for others to be deployed. It can appear that you have disabled an application, but it still gets deployed. This is due to other applications requiring that one.","title":"Select DX applications to deploy"},{"location":"containerization/helm/helm_additional_tasks/#supported-ldap-configuration","text":"You can specify a LDAP configuration that can be used by HCL Digital Experience 9.5. The Helm chart provides a ldap section under the configuration and core section. This section can be used to configure a none , dx or other LDAP. This defaults to none, so there is no LDAP configured. If you adjust this to other , you can configure an external LDAP that you want to connect to. Core is then configured to use this LDAP. Currently, the configuration capability is quite limited. For more complex configurations, use the ConfigWizard instead. Parameter Values Description type - none - other - dx |- Determines which type of LDAP to use. - Accepts none , dx or other - none : No LDAP configuration - dx : use and configure DX Open LDAP - other : use other LDAP | |bindUser| |- User used to connect to LDAP - Only used if ldap type is other | |bindPassword| |- Password used to connect to LDAP - Only used if ldap type is other | |suffix| |- Suffix in LDAP - Only used if ldap type is other | |host| |- Host of LDAP - Only used if ldap type is other | |port| |- Port of LDAP - Only used if ldap type is other | |attributeMappingLdap|- mail - title - userPassword |- Mapping attributes between LDAP and DX, LDAP attribute names (comma-separated list) | |attributeMappingPortal|- ibm-primaryEmail - ibm-jobTitle - password |- Mapping attributes between LDAP and DX, DX attribute names (comma-separated list) | |attributeNonSupported|- certificate - members |- Non-supported LDAP attributes (comma-separated list) | |serverType|- CUSTOM |- Supported LDAP Server types | |id|- dx_ldap |- LDAP configuration id | Example Configuration You can use the following syntax in your custom-values.yaml file to adjust LDAP settings: # Application configuration configuration: # Application specific configuration for Core core: # Settings for LDAP configuration ldap: # Determines which type of LDAP to use # Accepts: \"none\", \"dx\" or \"other\" # \"none\" - no LDAP configuration # \"dx\" - use DX openLDAP and configure it # \"other\" - use provided configuration for other LDAP type: \"none\" # User used to connect to LDAP, only used if ldap type is \"other\" bindUser: \"\" # Password used to connect to LDAP, only used if ldap type is \"other\" bindPassword: \"\" # Suffix in LDAP, only used if ldap type is \"other\" suffix: \"\" # Host of LDAP, only used if ldap type is \"other\" host: \"\" # Port of LDAP, only used if ldap type is \"other\" port: \"\" # Supported LDAP Server types - CUSTOM serverType: \"CUSTOM\" # LDAP configuration id id: \"dx_ldap\" # Mapping attributes between LDAP and DX, LDAP attribute names (comma-separated list) attributeMappingLdap: \"mail,title,userPassword\" # Mapping attributes between LDAP and DX, DX attribute names (comma-separated list) attributeMappingPortal: \"ibm-primaryEmail,ibm-jobTitle,password\" # Non-supported LDAP attributes (comma-separated list) attributeNonSupported: \"certificate,members\" Refer to the following Help Center documentation for more information about LDAP and Configuration Wizard configuration: Configuration Wizard Enable federated security Troubleshooting: Enable federated security option","title":"Supported LDAP configuration"},{"location":"containerization/helm/helm_additional_tasks/#authoringrendering-configuration","text":"You can choose if the environment you deploy is configured as a WCM authoring or rendering type. This has implications on things like caching of Core. As default, this defaults to true. The deployment is configured as an authoring environment. If you want to adjust this to deploy a rendering environment, you can use the following syntax in your custom-values.yaml file: # Application configuration configuration: # Application specific configuration for Core core: # Settings for tuning tuning: # Configures if the environment should be configured for authoring or not authoring: true","title":"Authoring/Rendering configuration"},{"location":"containerization/helm/helm_additional_tasks/#configuration-wizard-configuration","text":"You can select whether the Config Wizard is started together with the Core application. This defaults to true. If you want to adjust this setting, you can use the following syntax in your file: # Application configuration configuration: # Application specific configuration for Core core: # Settings for tuning tuning: # Configures if the server for configWizard and dxconnect is started configWizard: true","title":"Configuration Wizard configuration"},{"location":"containerization/helm/helm_additional_tasks/#openldap-configuration","text":"If you choose to deploy the OpenLDAP container in your deployment, you can change country, organization and suffix, that may be configured in OpenLDAP for use. Use the following syntax in your custom-values.yaml file to adjust the configuration: # Application configuration configuration: # Application specific configuration for Open LDAP openLdap: # Country configuration for Open LDAP country: \"US\" # Org configuration for Open LDAP org: \"DX\" # Suffix configuration for Open LDAP suffix: \"dc=dx,dc=com\"","title":"OpenLDAP configuration"},{"location":"containerization/helm/helm_additional_tasks/#remote-search-configuration","text":"You can configure whether the Remote Search configuration through the IBM WebSphere Application Server Solution Console is exposed as an additional port on the Ambassador Ingress or not. This defaults to true. If set to true, you can access the Solution Console using: https://yourhost:9043/ibm/console Use the following syntax in your custom-values.yaml file: # Application configuration configuration: # Application specific configuration for Remote Search remoteSearch: # Should the configuration interface be exposed exposeConfigurationConsole: true","title":"Remote Search configuration"},{"location":"containerization/helm/helm_additional_tasks/#configure-scaling","text":"The HCL Digital Experience 9.5 Kubernetes deployment using Helm allows you to configure the pod count of each individual application. In addition, it is possible to configure the use of HorizontalPodAutoscalers that scales up and down the applications by adding or removing Pods based on the pod metrics. Refer to the Scaling DX 9.5 container deployments using Helm Help Center topic for detailed overview information. Note: You are not able to use more than one (1) Core Pod until you have performed a database transfer. Configuring pod count Even if you don't want to automatically scale your DX 9.5 deployment based on CPU and memory utilization, you still can control the amount of pods per application. You can use the following syntax to reconfigure the pod count per application in your custom-values.yaml file: # Scaling settings for deployed applications scaling: # The default amount of replicas per application replicas: contentComposer: 1 core: 1 designStudio: 1 digitalAssetManagement: 3 imageProcessor: 5 ringApi: 3 ambassadorIngress: 3 ambassadorRedis: 3 Configuring HorizontalPodAutoscalers The use of HorizontalPodAutoscalers requires your cluster to have the Kubernetes Metrics running. Ensure that this is the case, and reference your cloud provider documentation for further information. You can set up the use of HorizontalPodAutoscalers on a per application basis using the following syntax in your custom-values.yaml file, showing Content Composer, as an example: # Scaling settings for deployed applications scaling: # Automated scaling using HorizontalPodAutoscaler horizontalPodAutoScaler: # Autoscaling settings for Content Composer contentComposer: # Enable or disable autoscaling enabled: true # Minimum and maximum Pod count minReplicas: 1 maxReplicas: 3 # Target CPU utilization scaling threshold targetCPUUtilizationPercentage: 75 # Target Memory utilization scaling threshold targetMemoryUtilizationPercentage: 80 The example configures a HorizontalPodAutoscaler for Content Composer, that scales up to 3 pods maximum. It considers scaling when a CPU utilization of 75% or Memory utilization of 80% per pod is reached. Refer to the default values.yaml file for all configurable applications.","title":"Configure scaling"},{"location":"containerization/helm/helm_additional_tasks/#configure-credentials","text":"HCL Digital Experience 9.5 uses several credentials in its deployment to manage access between applications and from outside the container deployment. Adjusting default credentials You can adjust the default credentials that HCL Digital Experience 9.5 is using by adding the following syntax to your custom-values.yaml file and changing the values you need: # Security related configuration, e.g. default credentials security: # Security configuration for Core core: # Credentials used for IBM WebSphere Application Server administrative access, needs to be adjusted if different credentials are already in place # This setting does currently NOT adjust the existing user credentials. wasUser: \"REDACTED\" wasPassword: \"REDACTED\" # Credentials used for HCL Digital Experience Core administrative access, needs to be adjusted if different credentials are already in place # This setting does currently NOT adjust the existing user credentials wpsUser: \"REDACTED\" wpsPassword: \"REDACTED\" # Security configuration for Digital Asset Management digitalAssetManagement: # Credentials used by the Digital Asset Management to access the persistence database. dbUser: \"REDACTED\" dbPassword: \"REDACTED\" # Credentials used by the persistence database to perform replication between database nodes. replicationUser: \"REDACTED\" replicationPassword: \"REDACTED\" # Security configuration for Open LDAP openLdap: # Admin user for Open LDAP, can not be adjusted currently. ldapUser: \"REDACTED\" # Admin password for Open LDAP ldapPassword: \"REDACTED\"","title":"Configure credentials"},{"location":"containerization/helm/helm_additional_tasks/#configure-core-sidecar-logging","text":"Beginning with HCL Digital Experience 9.5 CF199, Kubernetes deployment using Helm allows you to expose logs that are written to files by the DX Core application. The deployment uses sidecar containers, which access the same logs volume as the Core, read the log files, and expose them as their standard output. You can access logs with commands like kubectl logs -n <namespace> <pod-name> <sidecar-container-name> , for example, kubectl logs -n dxns dx-deployment-core-0 system-err-log . See the official Kubernetes documentation for more information. Shared volume The DX Core container and sidecar containers share the same volume. This allows DX Core to write its logs, and have the sidecar containers read those logs. The logs are mounted at /opt/HCL/logs (and symbolically linked from /opt/HCL/wp_profile/logs) in the DX Core container, and at /var/logs/ in the sidecar containers. The different directory paths emphasize that sidecar containers can only read files written by Core under its logs directory. Files in other directories (such as the profile) are not available to the sidecars. Default configuration Two sidecar containers are launched with Core: system-out-log - exposes the log file at /var/logs/WebSphere_Portal/SystemOut.log. system-err-log - exposes the log file at /var/logs/WebSphere_Portal/SystemErr.log. Configure custom sidecar containers Use the following syntax to configure more sidecar containers for additional log files in the custom-values.yaml file. Important: You can only expose log files inside of the /var/logs/ directory. logging: # Core specific logging configuration core: # List of sidecar containers mapping a container name to a file path for a log file to be exposed # Each element must consist of a `containerName` and a `logFilePath` # Example: # customLogSidecarContainers: # - containerName: \"trace\" # logFilePath: \"/var/logs/WebSphere_Portal/trace.log\" customLogSidecarContainers: [] Example: The following example starts a new sidecar container, and exposes the logs in /var/logs/WebSphere_Portal/trace.log. logging: core: customLogSidecarContainers: - containerName: \"trace\" logFilePath: \"/var/logs/WebSphere_Portal/trace.log\"","title":"Configure Core sidecar logging"},{"location":"containerization/helm/helm_additional_tasks/#configure-remote-search-sidecar-logging","text":"Beginning with HCL Digital Experience 9.5 CF199, Kubernetes deployment using Helm allows you to expose logs that are written to files on its PersistentVolumes (PVs) by the DX Remote Search application. The deployment uses sidecar containers, which access the PersistentVolume as the Remote Search container, read the log files, and expose them as their standard output. You can access logs with commands like kubectl logs -n <namespace> <pod-name> <sidecar-container-name> , for example, kubectl logs -n dxns dx-deployment-remote-search-0 system-err-log . See the official Kubernetes documentation for more information. Shared volume The DX Remote Search container and sidecar containers in the same pod share the same volume. This allows DX Remote Search to write its logs, and have the sidecar containers read those logs. The profile volume containing the logs is mounted at /opt/HCL/AppServer/profiles/prs_profile/ in the DX Remote Search container, and at /var/profile/ in the sidecar containers. The different directory paths emphasize that sidecar containers can only read files written by Remote Search under its profile directory. Files in other directories are not available to the sidecars. Default configuration Two sidecar containers are launched with Remote Search: system-out-log - exposes the log file at /var/profile/logs/server1/SystemOut.log. system-err-log - exposes the log file at /var/profile/logs/server1/SystemErr.log. Configure custom sidecar containers Use the following syntax to configure more sidecar containers for additional log files in the custom-values.yaml file. Important: You can only expose log files inside of the /var/profile/ directory. logging: remoteSearch: # List of sidecar containers mapping a container name to a file path for a log file to be exposed # Each element must consist of a `containerName` and a `logFilePath`, the latter must be located in /var/profile # Example: # customLogSidecarContainers: # - containerName: \"trace\" # logFilePath: \"/var/profile/logs/server1/trace.log\" customLogSidecarContainers: [] Example: The following example starts a new sidecar container, and exposes the logs in /var/profile/logs/server1/trace.log. logging: remoteSearch: customLogSidecarContainers: - containerName: \"trace\" logFilePath: \"/var/profile/logs/server1/trace.log\"","title":"Configure Remote Search sidecar logging"},{"location":"containerization/helm/helm_additional_tasks/#configure-labels-and-annotations","text":"This section documents the configuration of labels and annotations for different DX resources. Annotations Services and Pods To configure annotations for kubernetes services and pods, update your custom-values.yaml file as follows: Notes: Additional annotations are not mandatory for a deployment. Ensure you do not overwrite existing DX annotations such as the following: meta.helm.sh/release-name meta.helm.sh/release-namespace Sample annotations for core service To set annotation KEY1 with value VALUE1 and annotation KEY2 with value VALUE2 on the core service, add the following to your custom-values.yaml file: annotations: service: core: - key: KEY1 value: VALUE1 - key: KEY2 value: VALUE2 Sample annotations for core pods To set annotation KEY1 with value VALUE1 and annotation KEY2 with value VALUE2 on core pods, add the following to your custom-values.yaml file: annotations: pod: core: - key: KEY1 value: VALUE1 - key: KEY2 value: VALUE2 Labels Services and Pods To configure labels for kubernetes services and pods, update your custom-values.yaml file as follows: Notes: Additional labels are not mandatory for a deployment. Ensure that you do not overwrite existing DX Labels such as the following: ``` release ``` ``` helm.sh/chart ``` ``` app.kubernetes.io/version ``` ``` app.kubernetes.io/managed-by ``` ``` app.kubernetes.io/name ``` app.kubernetes.io/instance Sample labels for core services To set label KEY1 with value VALUE1 and label KEY2 with value VALUE2 on the core services, add the following to your custom-values.yaml file: label: service: core: - key: KEY1 value: VALUE1 - key: KEY2 value: VALUE2 Sample labels for core pods To set label KEY1 with value VALUE1 and label KEY2 with value VALUE2 on core pods, add the following to your custom-values.yaml file: label: pod: core: - key: KEY1 value: VALUE1 - key: KEY2 value: VALUE2","title":"Configure Labels and Annotations"},{"location":"containerization/helm/helm_additional_tasks/#configure-environment-variables-for-dx-resources","text":"This section explains the configuration of environment variables for different DX resources. Environment variables To configure environment variables for kubernetes pods, update your custom-values.yaml file as below. Note: Additional environment values are not mandatory for a deployment. Sample environment variables for core pods To set environment variable KEY1 with value VALUE1 and environment variable KEY2 with value VALUE2 on core pods, add the following to your custom-values.yaml file: environment: pod: core: - name: KEY1 value: VALUE1 - name: KEY2 value: VALUE2","title":"Configure environment variables for DX resources"},{"location":"containerization/helm/helm_additional_tasks/#incubator-section-in-the-valuesyaml-file","text":"The Incubator section is in the root level of the values.yaml file in the Helm charts. This section contains the capabilities that are planned to be made available for production environments in the future releases. The configurations within the incubator section are subject to change. The default values within this section are defined in such a way that they do not interfere with the existing deployments. The features and functions within the incubator section are considered experimental and might not be fully documented yet. Note: All features within the incubator section are not recommended to be used in the production environments. Refer to Install and uninstall commands for the next steps.","title":"Incubator section in the values.yaml file"},{"location":"containerization/helm/helm_additional_tasks/#use-imagepullsecrets","text":"To use a container image registry that has access restrictions and requires credentials, you need to leverage ImagePullSecrets in your deployment. Refer to the Kubernetes Documentation for additional information on this topic. In addition, reference your Cloud Provider documentation on how to create ImagePullSecrets . Note: Ensure that the ImagePullSecret has been created in the same namespace that your DX deployment is installed to.","title":"Use ImagePullSecrets"},{"location":"containerization/helm/helm_additional_tasks/#configure-deployment-to-use-imagepullsecrets","text":"In order for the HCL Digital Experience 9.5 deployment to leverage ImagePullSecrets you need to adjust your custom-values.yaml file to include the following syntax: images: imagePullSecrets: - name: regcred The name regcred can be different, depending on how you have created your ImagePullSecret and how it is named. Ensure that you reference the correct name in the configuration. It is assume that you have moved the HCL Digital Experience 9.5 images to your registry; make sure it is also configured properly in your custom-values.yaml : images: repository: \"your-repo:port\" All pods created now have that secret configured for pulling DX container images.","title":"Configure deployment to use ImagePullSecrets"},{"location":"containerization/helm/helm_backup_and_recovery_procedures/","text":"Backup and recovery procedures for Helm Containerization This section provides the instructions to create and manage backup and recovery of HCL Digital Experience components in containerized DX 9.5 Helm environments. Back up and restore a DAM image This topic shows you how to backup and restore for Digital Asset Management persistence and binaries in a Helm-based deployment. Parent topic: Helm-based deployment","title":"Backup and recovery procedures for Helm Containerization"},{"location":"containerization/helm/helm_backup_and_recovery_procedures/#backup-and-recovery-procedures-for-helm-containerization","text":"This section provides the instructions to create and manage backup and recovery of HCL Digital Experience components in containerized DX 9.5 Helm environments. Back up and restore a DAM image This topic shows you how to backup and restore for Digital Asset Management persistence and binaries in a Helm-based deployment. Parent topic: Helm-based deployment","title":"Backup and recovery procedures for Helm Containerization"},{"location":"containerization/helm/helm_cf192andlater/","text":"Deploying HCL DX CF196 to container platforms using Helm This topic provides administrators with a high-level overview of the HCL Digital Experience 9.5 Kubernetes and OpenShift deployment capabilities using Helm. Beginning with HCL Digital Experience 9.5 Container Update CF196, administrators can deploy HCL DX 9.5 CF196 and later images to supported container platforms using Helm Charts. Using a Helm Chart deployment provides administrators a larger degree of transparency in the deployment operations than the operator-based deployment also available using the HCL DX dxctl process . Overview Helm is a software package manager that simplifies deployment of applications and services to Red Hat OpenShift and Kubernetes container platforms. Helm is a tool for managing Kubernetes applications and deployments. It allows for packaging all required resource definitions into a single package, called a Helm Chart. The Helm Charts provide a convenient way to define application deployments with a predefined set of configurable items. Furthermore, Helm Charts are written using declarative definitions, applying yaml structures and go templates. This approach provides administrators with transparency about the operations the Helm Chart is performing during the DX 9.5 container deployment. In addition to foundation packaging and installation capabilities, Helm can also be used to modify and upgrade existing deployments, if the Helm Charts are built to support this. Configuration changes and application upgrades can both be managed using Helm. For more information about Helm, please reference documentation available on Helm topics for Red Hat Red Hat OpenShift and Kubernetes container platforms. Using Helm Charts for DX 9.5 deployments The HCL Digital Experience 9.5 Deployment Helm Chart (Helm Chart name: hcl-dx-deployment ) follows the standard Helm structures and guidelines. hcl-dx-deployment/ crds/ # Custom Resource definitions used for the Ambassador Ingress templates/ # The directory containing all Helm templates (for example, Kubernetes resources) value-samples/ # Contains sample value files for different types of deployments README.md # README with information on Helm Chart usage and references to further documentation values.yaml # Default chart configuration values values.schema.json # Defines the validation schema for values.yaml Chart.yaml # The Chart yaml file containing chart specific information templates : The templates directory contains all resource definitions, for example, Services and Pods. values.yaml : The values.yaml contains all default values for a deployment. It is possible to customize the deployment overwriting the default values of the values.yaml. values.schema.json : To validate the values entered for a deployment, the values.schema.json provides configuration whenever an install or upgrade is performed with Helm. From Helm Chart to deployment on container platforms As outlined in the flow chart, when performing an install (or upgrade), the Helm Chart reads the values.yaml (and any overridden values, either provided through Helm CLI parameters or additional values files) and perform a schema validation check. After the schema check is successfully performed, Helm runs the templating engine to create the Kubernetes resource definitions out of the templates inside the Helm Charts. As a last step, Helm accesses the Kubernetes or OpenShift Cluster and create the resulting Kubernetes resources in the desired namespace. Deployment structure Basic per application structure Each deployed application follows a similar deployment structure, using a common set of OpenShift or Kubernetes resources that follow naming conventions. Some of the DX 9.5 applications may have a different setup based on their special requirements, for example, the Digital Asset Management component, and its persistence definitions. Stateful applications - Definition DX 9.5 container applications are managed by a StatefulSet, which controls the creation and life cycle of all pods it is responsible for. These Pods use Persistent Volumes for storing their application data, ConfigMaps to adjust application configuration, and Secrets to obtain access credentials. In front of all Pods is a Service which manages routing the traffic to the Pods. This Service is also called by the Ingress to fulfill incoming requests from outside the Kubernetes or OpenShift cluster. Stateless applications - Services Management Ingress and routing For accessing applications from the outside, we deploy an Ingress in form of an Ambassador. This Ingress routes the incoming requests to all application Services, which then distributes the requests to the corresponding Pods hosting the applications. Ambassador uses Mappings that are created by the DX 9.5 Helm deployment to decide which requests needs to be mapped to which application in the DX 9.5 deployment (back-end). When requests are initiated from outside the Kubernetes or OpenShift cluster, the Ambassador tries to fulfill that request by using the configured Mappings. If it finds a matching endpoint, it forwards the request to the corresponding Service, which then forwards the same requests to a Pod that is ready to fulfill the request. The Ambassador performs SSL termination and must be provided with a TLS secret inside Kubernetes that contains the SSL certificate used.","title":"Deploying HCL DX CF196 to container platforms using Helm"},{"location":"containerization/helm/helm_cf192andlater/#deploying-hcl-dx-cf196-to-container-platforms-using-helm","text":"This topic provides administrators with a high-level overview of the HCL Digital Experience 9.5 Kubernetes and OpenShift deployment capabilities using Helm. Beginning with HCL Digital Experience 9.5 Container Update CF196, administrators can deploy HCL DX 9.5 CF196 and later images to supported container platforms using Helm Charts. Using a Helm Chart deployment provides administrators a larger degree of transparency in the deployment operations than the operator-based deployment also available using the HCL DX dxctl process .","title":"Deploying HCL DX CF196 to container platforms using Helm"},{"location":"containerization/helm/helm_cf192andlater/#overview","text":"Helm is a software package manager that simplifies deployment of applications and services to Red Hat OpenShift and Kubernetes container platforms. Helm is a tool for managing Kubernetes applications and deployments. It allows for packaging all required resource definitions into a single package, called a Helm Chart. The Helm Charts provide a convenient way to define application deployments with a predefined set of configurable items. Furthermore, Helm Charts are written using declarative definitions, applying yaml structures and go templates. This approach provides administrators with transparency about the operations the Helm Chart is performing during the DX 9.5 container deployment. In addition to foundation packaging and installation capabilities, Helm can also be used to modify and upgrade existing deployments, if the Helm Charts are built to support this. Configuration changes and application upgrades can both be managed using Helm. For more information about Helm, please reference documentation available on Helm topics for Red Hat Red Hat OpenShift and Kubernetes container platforms.","title":"Overview"},{"location":"containerization/helm/helm_cf192andlater/#using-helm-charts-for-dx-95-deployments","text":"The HCL Digital Experience 9.5 Deployment Helm Chart (Helm Chart name: hcl-dx-deployment ) follows the standard Helm structures and guidelines. hcl-dx-deployment/ crds/ # Custom Resource definitions used for the Ambassador Ingress templates/ # The directory containing all Helm templates (for example, Kubernetes resources) value-samples/ # Contains sample value files for different types of deployments README.md # README with information on Helm Chart usage and references to further documentation values.yaml # Default chart configuration values values.schema.json # Defines the validation schema for values.yaml Chart.yaml # The Chart yaml file containing chart specific information templates : The templates directory contains all resource definitions, for example, Services and Pods. values.yaml : The values.yaml contains all default values for a deployment. It is possible to customize the deployment overwriting the default values of the values.yaml. values.schema.json : To validate the values entered for a deployment, the values.schema.json provides configuration whenever an install or upgrade is performed with Helm.","title":"Using Helm Charts for DX 9.5 deployments"},{"location":"containerization/helm/helm_cf192andlater/#from-helm-chart-to-deployment-on-container-platforms","text":"As outlined in the flow chart, when performing an install (or upgrade), the Helm Chart reads the values.yaml (and any overridden values, either provided through Helm CLI parameters or additional values files) and perform a schema validation check. After the schema check is successfully performed, Helm runs the templating engine to create the Kubernetes resource definitions out of the templates inside the Helm Charts. As a last step, Helm accesses the Kubernetes or OpenShift Cluster and create the resulting Kubernetes resources in the desired namespace.","title":"From Helm Chart to deployment on container platforms"},{"location":"containerization/helm/helm_cf192andlater/#deployment-structure","text":"Basic per application structure Each deployed application follows a similar deployment structure, using a common set of OpenShift or Kubernetes resources that follow naming conventions. Some of the DX 9.5 applications may have a different setup based on their special requirements, for example, the Digital Asset Management component, and its persistence definitions. Stateful applications - Definition DX 9.5 container applications are managed by a StatefulSet, which controls the creation and life cycle of all pods it is responsible for. These Pods use Persistent Volumes for storing their application data, ConfigMaps to adjust application configuration, and Secrets to obtain access credentials. In front of all Pods is a Service which manages routing the traffic to the Pods. This Service is also called by the Ingress to fulfill incoming requests from outside the Kubernetes or OpenShift cluster. Stateless applications - Services Management Ingress and routing For accessing applications from the outside, we deploy an Ingress in form of an Ambassador. This Ingress routes the incoming requests to all application Services, which then distributes the requests to the corresponding Pods hosting the applications. Ambassador uses Mappings that are created by the DX 9.5 Helm deployment to decide which requests needs to be mapped to which application in the DX 9.5 deployment (back-end). When requests are initiated from outside the Kubernetes or OpenShift cluster, the Ambassador tries to fulfill that request by using the configured Mappings. If it finds a matching endpoint, it forwards the request to the corresponding Service, which then forwards the same requests to a Pod that is ready to fulfill the request. The Ambassador performs SSL termination and must be provided with a TLS secret inside Kubernetes that contains the SSL certificate used.","title":"Deployment structure"},{"location":"containerization/helm/helm_configure_networking/","text":"Configure networking This section explains what must be configured from a networking perspective to get HCL Digital Experience 9.5 running in your Kubernetes or OpenShift cluster, and to provide accessibility to your deployment from outside the Cluster. Full Kubernetes or OpenShift deployment If you deploy both Core and all other applications inside OpenShift or Kubernetes, this section shows you what needs to be configured. Core host In a full deployment, the host for both the Core and the other applications are the same. It is recommended to configure the host before you run the deployment. This is only possible if you know the fully qualified domain name (FQDN) or the IP address that the Ambassador Ingress assigns in your deployment beforehand. If that is the case, define the host using the following syntax: # Networking specific configuration networking: # Networking configuration specific to Core core: # Host of Core host: \"your-dx-instance.whateverdomain.com\" If you do not know the hostname beforehand, you can leave it blank and run an additional step later in the installation, that retrieves the assigned hostname from the Ambassador Ingress and configure all applications accordingly. Configure Cross Origin Resource Sharing (CORS) The HCL Digital Experience 9.5 Helm Chart allows you to configure CORS configuration for all the addon to Core applications such as Digital Asset Management or Ring API. This allows you to access the APIs provided by those applications in other applications with ease. You can define a list of allowed hosts for a specific application using the following syntax in your custom-values.yaml : # Networking specific configuration networking: # Networking configurations specific to all addon applications addon: contentComposer: # CORS Origin configuration for Content Composer, comma separated list corsOrigin: \"https://my-different-application.net,https://the-other-application.com\" Refer to the HCL DX 9.5 values.yaml detail for all possible applications that can be configured. Hybrid host Configuring Hybrid Host In a Hybrid deployment, the host for the on-premise DX Core will be added in the core configuration section and the other applications host will be placed under the add-on section. See the following example: networking: # Networking configuration specific to Core core: # Host of Core, must be specified as a FQDN # If you are running hybrid, you need to specify the FQDN of the on-premise Core host # Example: eks-hybrid.dx.com host: \"your-dx-core-instance.whateverdomain.com\" port: \"10042\" contextRoot: \"wps\" personalizedHome: \"myportal\" home: \"portal\" addon: # Host of the addon applications # If you are not running hybrid, you can leave this value empty and the Core host will be used # If you are running hybrid, you need to specify the FQDN of the Kubernetes deployment # Example: eks-hybrid.apps.dx.com host: \"your-dx-apps-instance.whateverdomain.com\" # Port of the addon applications # If you are running hybrid, you can specify a port # If left empty, no specific port will be added to the host port: \"443\" # Setting if SSL is enabled for addon applications # If you are running hybrid, make sure to set this accordingly to the Kubernetes deployment configuration # Will default to true if not set ssl: \"true\" Please refer to the original values.yaml for all available applications that can be configured. See the Planning your container deployment using Helm topic for details. Configure Ingress certificate To have the Ambassador Ingress allow forward requests to your applications, you must provide it with a TLS Certificate. This certificate is used for incoming/outgoing traffic from the outside of the Kubernetes or OpenShift cluster to your applications. Ambassador performs TLS offloading. Generate self-signed certificate It is recommended that you use a properly signed certificate for the Ambassador Ingress . However, it is also possible to create and use a self-signed certificate, for example, for staging or testing environment. Creation of that certificate can be achieved using the following commands for OpenSSL: # Creation of a private key openssl genrsa -out my-key.pem 2048 # Creation of a certificate signed by the private key created before openssl req -x509 -key my-key.pem -out my-cert.pem -days 365 -subj '/CN=my-cert This provides you with a key and cert file that can be used in the next step, creation of the certificate to your deployment. Use certificate Create secret To have your deployment and the Ambassador Ingress use the certificate, you must store it in the Kubernetes or OpenShift cluster as a secret. The secret can be created using the following commands: Note: The secret name can be chosen by you and must be referenced in the next configuration step (the following example uses dx-tls-cert ). The namespace is the Kubernetes namespace where you want to deploy HCL Digital Experience 9.5 to (the example uses digital-experience ). # Create secret with the name \"dx-tls-cert\" # Secret will be created in the namespace \"digital-experience\" # You can either reference the cert and key file created before, or a proper signed certificate e.g. from your CA kubectl create secret tls dx-tls-cert --cert=my-cert.pem --key=my-key.pem -n digital-experience Configure secret in deployment You need to make sure that the reference to the secret is set up correctly in your custom-values.yaml . Otherwise your Ambassador Ingress is not able to answer HTTPS requests due to a missing certificate. You can set the name of the certificate used with the following syntax, the default value is dx-tls-cert : # Networking specific configuration networking: # TLS Certificate secret used for Ambassador Ingress tlsCertSecret: \"dx-tls-cert\" Note: Verify you have entered the correct name. Configure minimum TLS version for Ingress From CF201 and onwards the default minimum TLS version for the Ambassador Ingress is set to v1.2 . TLS v1.2 or higher is recommended to increase security. If support for older TLS versions is still required, then it can be adjusted via the custom-values.yaml . # Networking specific configuration networking: # Set the minimum acceptable TLS version for Amassador Ingress: v1.0, v1.1, # v1.2, or v1.3. It defaults to v1.2 minTlsVersion: \"v1.2\" Refer to Additional tasks for the next steps.","title":"Configure networking"},{"location":"containerization/helm/helm_configure_networking/#configure-networking","text":"This section explains what must be configured from a networking perspective to get HCL Digital Experience 9.5 running in your Kubernetes or OpenShift cluster, and to provide accessibility to your deployment from outside the Cluster.","title":"Configure networking"},{"location":"containerization/helm/helm_configure_networking/#full-kubernetes-or-openshift-deployment","text":"If you deploy both Core and all other applications inside OpenShift or Kubernetes, this section shows you what needs to be configured.","title":"Full Kubernetes or OpenShift deployment"},{"location":"containerization/helm/helm_configure_networking/#core-host","text":"In a full deployment, the host for both the Core and the other applications are the same. It is recommended to configure the host before you run the deployment. This is only possible if you know the fully qualified domain name (FQDN) or the IP address that the Ambassador Ingress assigns in your deployment beforehand. If that is the case, define the host using the following syntax: # Networking specific configuration networking: # Networking configuration specific to Core core: # Host of Core host: \"your-dx-instance.whateverdomain.com\" If you do not know the hostname beforehand, you can leave it blank and run an additional step later in the installation, that retrieves the assigned hostname from the Ambassador Ingress and configure all applications accordingly.","title":"Core host"},{"location":"containerization/helm/helm_configure_networking/#configure-cross-origin-resource-sharing-cors","text":"The HCL Digital Experience 9.5 Helm Chart allows you to configure CORS configuration for all the addon to Core applications such as Digital Asset Management or Ring API. This allows you to access the APIs provided by those applications in other applications with ease. You can define a list of allowed hosts for a specific application using the following syntax in your custom-values.yaml : # Networking specific configuration networking: # Networking configurations specific to all addon applications addon: contentComposer: # CORS Origin configuration for Content Composer, comma separated list corsOrigin: \"https://my-different-application.net,https://the-other-application.com\" Refer to the HCL DX 9.5 values.yaml detail for all possible applications that can be configured.","title":"Configure Cross Origin Resource Sharing (CORS)"},{"location":"containerization/helm/helm_configure_networking/#hybrid-host","text":"Configuring Hybrid Host In a Hybrid deployment, the host for the on-premise DX Core will be added in the core configuration section and the other applications host will be placed under the add-on section. See the following example: networking: # Networking configuration specific to Core core: # Host of Core, must be specified as a FQDN # If you are running hybrid, you need to specify the FQDN of the on-premise Core host # Example: eks-hybrid.dx.com host: \"your-dx-core-instance.whateverdomain.com\" port: \"10042\" contextRoot: \"wps\" personalizedHome: \"myportal\" home: \"portal\" addon: # Host of the addon applications # If you are not running hybrid, you can leave this value empty and the Core host will be used # If you are running hybrid, you need to specify the FQDN of the Kubernetes deployment # Example: eks-hybrid.apps.dx.com host: \"your-dx-apps-instance.whateverdomain.com\" # Port of the addon applications # If you are running hybrid, you can specify a port # If left empty, no specific port will be added to the host port: \"443\" # Setting if SSL is enabled for addon applications # If you are running hybrid, make sure to set this accordingly to the Kubernetes deployment configuration # Will default to true if not set ssl: \"true\" Please refer to the original values.yaml for all available applications that can be configured. See the Planning your container deployment using Helm topic for details.","title":"Hybrid host"},{"location":"containerization/helm/helm_configure_networking/#configure-ingress-certificate","text":"To have the Ambassador Ingress allow forward requests to your applications, you must provide it with a TLS Certificate. This certificate is used for incoming/outgoing traffic from the outside of the Kubernetes or OpenShift cluster to your applications. Ambassador performs TLS offloading.","title":"Configure Ingress certificate"},{"location":"containerization/helm/helm_configure_networking/#generate-self-signed-certificate","text":"It is recommended that you use a properly signed certificate for the Ambassador Ingress . However, it is also possible to create and use a self-signed certificate, for example, for staging or testing environment. Creation of that certificate can be achieved using the following commands for OpenSSL: # Creation of a private key openssl genrsa -out my-key.pem 2048 # Creation of a certificate signed by the private key created before openssl req -x509 -key my-key.pem -out my-cert.pem -days 365 -subj '/CN=my-cert This provides you with a key and cert file that can be used in the next step, creation of the certificate to your deployment.","title":"Generate self-signed certificate"},{"location":"containerization/helm/helm_configure_networking/#use-certificate","text":"Create secret To have your deployment and the Ambassador Ingress use the certificate, you must store it in the Kubernetes or OpenShift cluster as a secret. The secret can be created using the following commands: Note: The secret name can be chosen by you and must be referenced in the next configuration step (the following example uses dx-tls-cert ). The namespace is the Kubernetes namespace where you want to deploy HCL Digital Experience 9.5 to (the example uses digital-experience ). # Create secret with the name \"dx-tls-cert\" # Secret will be created in the namespace \"digital-experience\" # You can either reference the cert and key file created before, or a proper signed certificate e.g. from your CA kubectl create secret tls dx-tls-cert --cert=my-cert.pem --key=my-key.pem -n digital-experience","title":"Use certificate"},{"location":"containerization/helm/helm_configure_networking/#configure-secret-in-deployment","text":"You need to make sure that the reference to the secret is set up correctly in your custom-values.yaml . Otherwise your Ambassador Ingress is not able to answer HTTPS requests due to a missing certificate. You can set the name of the certificate used with the following syntax, the default value is dx-tls-cert : # Networking specific configuration networking: # TLS Certificate secret used for Ambassador Ingress tlsCertSecret: \"dx-tls-cert\" Note: Verify you have entered the correct name.","title":"Configure secret in deployment"},{"location":"containerization/helm/helm_configure_networking/#configure-minimum-tls-version-for-ingress","text":"From CF201 and onwards the default minimum TLS version for the Ambassador Ingress is set to v1.2 . TLS v1.2 or higher is recommended to increase security. If support for older TLS versions is still required, then it can be adjusted via the custom-values.yaml . # Networking specific configuration networking: # Set the minimum acceptable TLS version for Amassador Ingress: v1.0, v1.1, # v1.2, or v1.3. It defaults to v1.2 minTlsVersion: \"v1.2\" Refer to Additional tasks for the next steps.","title":"Configure minimum TLS version for Ingress"},{"location":"containerization/helm/helm_dam_migration/","text":"Migrate Digital Asset Management persistence and binaries This section shows the guidance to back up and restore your DAM persistence and binaries. Follow this guidance to create a backup of the DAM persistence and binaries from your Operator deployment, and restore them to a Helm-based deployment. Back up from an Operator-based deployment You must start Digital Asset Management in maintenance mode, to ensure that no actions are performed during the migration. You can set DAM to maintenance mode by changing the ConfigMap of the Operator deployment: kubectl -n <namespace> edit cm <configmap> Example : kubectl edit cm -n dxns dx-deployment In the data section, add the following entry and save the changes: data: dx.deploy.dam.features: \"maintenance_mode:true\" After saving the changes, the DAM pod restarts automatically. Please wait until the pod restarts before proceeding. Verify that persistence (read-write) and DAM pods are up and running, and are in maintenance mode. Use the following command to see the current status of the pods: kubectl -n <namespace> get pods If more than one DAM or persistence pod is running, scale down the pods to only one of each type. Adjust the dxctl property file: ``` dam.minreplicas:1 dam.maxreplicas:1 persist.minreplicas:1 persist.maxreplicas:1 ``` And apply it using the dxctl tool. ./dxctl -\u2013update -p deployment.properties The changes are applied and any replicas are terminated. Use kubectl to check the progress. Verify that DAM is in maintenance mode by running the following command: kubectl -n <namespace> logs <pod-name> Example : kubectl -n dxns logs dx-deployment-dam-0 If your output looks similar to the following, maintenance mode is enabled and you can continue: Maintenance mode is: true Listening for SIGTERM Maintenance mode is enabled. This mode solely starts the pod without any processes within it. Connect to the persistence pod. The following command opens a shell in the running persistence pod: kubectl exec --stdin --tty pod/<pod-name> -n <namespace> -- /bin/bash Example : kubectl exec --stdin --tty pod/dx-deployment-persistence-0 -n dxns -- /bin/bash Dump the current database using pg_dump : pg_dump dxmediadb > /tmp/dxmediadb.dmp Exit the shell in the persistence pod exit Download the dumped database from the persistence pod to your local system: kubectl cp <namespace>/<pod-name>:<source-file> <target-file> Example: kubectl cp dxns/dx-deployment-persistence-0:/tmp/dxmediadb.dmp /tmp/dxmediadb.dmp Connect to the DAM pod. The following command opens a shell in the running DAM pod: kubectl exec --stdin --tty pod/<pod-name> -n <namespace> -- /bin/bash Example : kubectl exec --stdin --tty pod/dx-deployment-dam-0 -n dxns -- /bin/bash Compress the DAM binaries located in /opt/app/upload: tar -cvpzf backupml.tar.gz --exclude=/backupml.tar.gz --one-file-system --directory /opt/app/upload . Exit the shell in the DAM pod: exit Download the compressed DAM binaries from the DAM pod to your local system: kubectl cp <namespace>/<pod-name>:<source-file> <target-file> Example: kubectl cp dxns/dx-deployment-dam-0:/opt/app/server-v1/backupml.tar.gz /tmp/backupml.tar.gz Restore your back up to the Helm-based deployment Important: Ensure to note the requirements and limitations here . For the new Helm deployment, you must use a different Kubernetes namespace from the one used in the Operator-based deployment. Ensure that the Helm-based deployment is in the correct state before restoring a backup. Ensure that you have extracted the Kubernetes DX configuration from the Operator-based deployment to a valid custom-values.yaml file is done. You must enable migration mode for operatorToHelm by adding or updating the following value in custom-values.yaml: migration: operatorToHelm: enabled: true Disable all the applications, except digitalAssetManagement and the persistence : applications: core: false runtimeController: false contentComposer: false designStudio: false digitalAssetManagement: true imageProcessor: false openLdap: false persistence: true remoteSearch: false ringApi: false ambassador: false Scale down persistence to a single node: scaling: replicas: persistenceNode: 1 You can now start the Helm deployment. If you're running the migration of DAM first: helm install -n <namespace> --create-namespace -f <custom-values.yaml> <prefix> <chart> Example : helm install -n dxns-helm --create-namespace -f custom-values.yaml dx-deployment hcl-dx-deployment If core migration is done first: helm upgrade -n <namespace> -f <custom-values.yaml> <prefix> <chart> Example : helm upgrade -n dxns-helm -f custom-values.yaml dx-deployment hcl-dx-deployment The following outcomes are expected: The DAM and persistence pods are running and kept alive. The DAM application is not running. Upload the backup database. Use the following command to transfer the backup database to the remote persistence pod: kubectl cp <source-file> <namespace>/<pod-name>:<target-file> Example : kubectl cp /tmp/dxmediadb.dmp dxns-helm/dx-deployment-persistence-node-0:/tmp/dxmediadb.dmp Connect to the persistence (read-write) pod. Use the following command to open a shell in the running persistence pod: kubectl exec --stdin --tty pod/<pod-name> -n <namespace> -- /bin/bash Example: kubectl exec --stdin --tty pod/dx-deployment-persistence-node-0 -n dxns-helm -- /bin/bash You must drop the DAM database, if it exists. Disconnect all connections that use the database and drop any existing databases of the Helm deployment. echo \"SELECT pg_terminate_backend(pg_stat_activity.pid) FROM pg_stat_activity WHERE pid <> pg_backend_pid();\" | psql dropdb dxmediadb Restore the database from the previous backup: createdb -O dxuser dxmediadb psql dxmediadb < /tmp/dxmediadb.dmp Exit the shell in the persistence pod: exit Connect to the DAM pod. Use the following command to open a shell in the running DAM pod: kubectl exec --stdin --tty pod/<pod-name> -n <namespace> -- /bin/bash Example: kubectl exec --stdin --tty pod/dx-deployment-digital-asset-management-0 -n dxns-helm -- /bin/bash Restore the DAM binaries: tar -mpxf /tmp/backupml.tar.gz --directory /opt/app/upload rm /backupml.tar.gz Exit the shell in the DAM pod: exit Disable the migration mode and the deployment. Before you can start the final upgrade of the Helm deployment, some adjustments are needed: Disable the migration mode by updating the following value in custom-values.yaml migration: operatorToHelm: enabled: false Enable all relevant applications. You can now upgrade the Helm deployment. helm upgrade -n <namespace> --create-namespace -f <custom-values.yaml> <prefix> <chart> Example : helm upgrade -n dxns-helm --create-namespace -f custom-values.yaml dx-deployment hcl-dx-deployment Parent topic: Migrating from Operator to Helm deployments","title":"Migrate Digital Asset Management persistence and binaries"},{"location":"containerization/helm/helm_dam_migration/#migrate-digital-asset-management-persistence-and-binaries","text":"This section shows the guidance to back up and restore your DAM persistence and binaries. Follow this guidance to create a backup of the DAM persistence and binaries from your Operator deployment, and restore them to a Helm-based deployment. Back up from an Operator-based deployment You must start Digital Asset Management in maintenance mode, to ensure that no actions are performed during the migration. You can set DAM to maintenance mode by changing the ConfigMap of the Operator deployment: kubectl -n <namespace> edit cm <configmap> Example : kubectl edit cm -n dxns dx-deployment In the data section, add the following entry and save the changes: data: dx.deploy.dam.features: \"maintenance_mode:true\" After saving the changes, the DAM pod restarts automatically. Please wait until the pod restarts before proceeding. Verify that persistence (read-write) and DAM pods are up and running, and are in maintenance mode. Use the following command to see the current status of the pods: kubectl -n <namespace> get pods If more than one DAM or persistence pod is running, scale down the pods to only one of each type. Adjust the dxctl property file: ``` dam.minreplicas:1 dam.maxreplicas:1 persist.minreplicas:1 persist.maxreplicas:1 ``` And apply it using the dxctl tool. ./dxctl -\u2013update -p deployment.properties The changes are applied and any replicas are terminated. Use kubectl to check the progress. Verify that DAM is in maintenance mode by running the following command: kubectl -n <namespace> logs <pod-name> Example : kubectl -n dxns logs dx-deployment-dam-0 If your output looks similar to the following, maintenance mode is enabled and you can continue: Maintenance mode is: true Listening for SIGTERM Maintenance mode is enabled. This mode solely starts the pod without any processes within it. Connect to the persistence pod. The following command opens a shell in the running persistence pod: kubectl exec --stdin --tty pod/<pod-name> -n <namespace> -- /bin/bash Example : kubectl exec --stdin --tty pod/dx-deployment-persistence-0 -n dxns -- /bin/bash Dump the current database using pg_dump : pg_dump dxmediadb > /tmp/dxmediadb.dmp Exit the shell in the persistence pod exit Download the dumped database from the persistence pod to your local system: kubectl cp <namespace>/<pod-name>:<source-file> <target-file> Example: kubectl cp dxns/dx-deployment-persistence-0:/tmp/dxmediadb.dmp /tmp/dxmediadb.dmp Connect to the DAM pod. The following command opens a shell in the running DAM pod: kubectl exec --stdin --tty pod/<pod-name> -n <namespace> -- /bin/bash Example : kubectl exec --stdin --tty pod/dx-deployment-dam-0 -n dxns -- /bin/bash Compress the DAM binaries located in /opt/app/upload: tar -cvpzf backupml.tar.gz --exclude=/backupml.tar.gz --one-file-system --directory /opt/app/upload . Exit the shell in the DAM pod: exit Download the compressed DAM binaries from the DAM pod to your local system: kubectl cp <namespace>/<pod-name>:<source-file> <target-file> Example: kubectl cp dxns/dx-deployment-dam-0:/opt/app/server-v1/backupml.tar.gz /tmp/backupml.tar.gz Restore your back up to the Helm-based deployment Important: Ensure to note the requirements and limitations here . For the new Helm deployment, you must use a different Kubernetes namespace from the one used in the Operator-based deployment. Ensure that the Helm-based deployment is in the correct state before restoring a backup. Ensure that you have extracted the Kubernetes DX configuration from the Operator-based deployment to a valid custom-values.yaml file is done. You must enable migration mode for operatorToHelm by adding or updating the following value in custom-values.yaml: migration: operatorToHelm: enabled: true Disable all the applications, except digitalAssetManagement and the persistence : applications: core: false runtimeController: false contentComposer: false designStudio: false digitalAssetManagement: true imageProcessor: false openLdap: false persistence: true remoteSearch: false ringApi: false ambassador: false Scale down persistence to a single node: scaling: replicas: persistenceNode: 1 You can now start the Helm deployment. If you're running the migration of DAM first: helm install -n <namespace> --create-namespace -f <custom-values.yaml> <prefix> <chart> Example : helm install -n dxns-helm --create-namespace -f custom-values.yaml dx-deployment hcl-dx-deployment If core migration is done first: helm upgrade -n <namespace> -f <custom-values.yaml> <prefix> <chart> Example : helm upgrade -n dxns-helm -f custom-values.yaml dx-deployment hcl-dx-deployment The following outcomes are expected: The DAM and persistence pods are running and kept alive. The DAM application is not running. Upload the backup database. Use the following command to transfer the backup database to the remote persistence pod: kubectl cp <source-file> <namespace>/<pod-name>:<target-file> Example : kubectl cp /tmp/dxmediadb.dmp dxns-helm/dx-deployment-persistence-node-0:/tmp/dxmediadb.dmp Connect to the persistence (read-write) pod. Use the following command to open a shell in the running persistence pod: kubectl exec --stdin --tty pod/<pod-name> -n <namespace> -- /bin/bash Example: kubectl exec --stdin --tty pod/dx-deployment-persistence-node-0 -n dxns-helm -- /bin/bash You must drop the DAM database, if it exists. Disconnect all connections that use the database and drop any existing databases of the Helm deployment. echo \"SELECT pg_terminate_backend(pg_stat_activity.pid) FROM pg_stat_activity WHERE pid <> pg_backend_pid();\" | psql dropdb dxmediadb Restore the database from the previous backup: createdb -O dxuser dxmediadb psql dxmediadb < /tmp/dxmediadb.dmp Exit the shell in the persistence pod: exit Connect to the DAM pod. Use the following command to open a shell in the running DAM pod: kubectl exec --stdin --tty pod/<pod-name> -n <namespace> -- /bin/bash Example: kubectl exec --stdin --tty pod/dx-deployment-digital-asset-management-0 -n dxns-helm -- /bin/bash Restore the DAM binaries: tar -mpxf /tmp/backupml.tar.gz --directory /opt/app/upload rm /backupml.tar.gz Exit the shell in the DAM pod: exit Disable the migration mode and the deployment. Before you can start the final upgrade of the Helm deployment, some adjustments are needed: Disable the migration mode by updating the following value in custom-values.yaml migration: operatorToHelm: enabled: false Enable all relevant applications. You can now upgrade the Helm deployment. helm upgrade -n <namespace> --create-namespace -f <custom-values.yaml> <prefix> <chart> Example : helm upgrade -n dxns-helm --create-namespace -f custom-values.yaml dx-deployment hcl-dx-deployment Parent topic: Migrating from Operator to Helm deployments","title":"Migrate Digital Asset Management persistence and binaries"},{"location":"containerization/helm/helm_dam_migration_newDB/","text":"Migrate to new DAM DB in Helm-based deployments This manual migration process to the new DAM DB is mandatory if you have DX CF196 or CF197 deployed using the Helm-based deployment option and are now upgrading to CF200. It is mandatory because you cannot upgrade to a future release, such as CF201, without manually migrating to the new DB. If you already have CF 198 or CF199 installed using the Helm-based deployment option, then you need not manually migrate the DAM DB. 1. Upgrade your existing Helm-based deployments to CF200 To perform the DAM DB migration you must first upgrade your existing DX deployment to CF200. Important: During upgrading to CF200, the Helm-based upgrade procedure detects the old deprecated DAM DB and notifies you with the following warning. The message indicates that the deployment is using an old DAM DB system that is deprecated, hence you must migrate to the new DAM DB. If you do not migrate to a new DAM DB, you might lose data during future DX updates. Warning message: Installation of HCL DX 95 CF200 done. This deployment is using an old DAM Database system and is deprecated. You must migrate this to the new DAM Database. If you receive this message, you must upgrade your DAM Database using the following steps; otherwise you can continue with the upgrade procedure. 2. Back up the existing DAM DB Back up of your existing DAM Database. Ensure that the DX pods are in running state before proceeding with the backup procedure. Connect to the Persistence pod: The following command opens a shell in the running Persistence container. kubectl exec --stdin --tty pod/<pod-name> -n <namespace> -- /bin/bash Example: kubectl exec --stdin --tty pod/dx-deployment-persistence-rw-0 -n dxns -- /bin/bash Dump the current database using the pg_dump command: pg_dump dxmediadb > /tmp/dxmediadb.dmp Exit the Persistence container: Close the shell in the Persistence container. exit Download the dumped database to local system by using the following command: kubectl cp <namespace>/<pod-name>:<source-file> <target-file> Example: kubectl cp dxns/dx-deployment-persistence-0:/tmp/dxmediadb.dmp /tmp/dxmediadb.dmp 3. Migrate to new DB Enable the DAM DB migration mode to migrate your existing DAM DB to the new DB. Change the following configuration in your custom values.yaml file. Enable DAM Database Migration mode: ``` Flags to enable various migration modes migration: damDB: # Enable for DAM Database migration from old DB to new DB enabled: true ``` Scale down persistence nodes to 1: scaling: # The default amount of replicas per application replicas: persistenceNode: 1 Perform an upgrade with the new configuration: helm upgrade dx-deployment . -f < your_custom_value_file.yaml > -n <namespace> The upgrade will turn off the deprecated old Database system and deploy the new DAM Database system. 4. Restore DB from Old DB Backup Restore the data from the old database to the new database. Upload Old DB backup to persistence pod: You can now transfer the backup database to the remote Persistence container. kubectl cp <source-file> <namespace>/<pod-name>:<target-file> Example: kubectl cp /tmp/dxmediadb.dmp dxns/dx-deployment-persistence-node-0:/tmp/dxmediadb.dmp Connect to Persistence pod: The following command opens a shell in the running Persistence container. kubectl exec --stdin --tty pod/<pod-name> -n <namespace> -- /bin/bash Example: kubectl exec --stdin --tty pod/dx-deployment-persistence-node-0 -n dxns -- /bin/bash Drop the DAM database if it exists: Disconnect all connections that use the database and drop any existing databases of the deployment. echo \"SELECT pg_terminate_backend(pg_stat_activity.pid) FROM pg_stat_activity WHERE pid <> pg_backend_pid();\" | psql dropdb dxmediadb Restore the database from the previous backup: createdb -O dxuser dxmediadb psql dxmediadb < /tmp/dxmediadb.dmp Exit the Persistence container: Close the shell in the Persistence container. exit 5. Disable DAM Database Migration mode and Scale the persistence nodes to 3 Once the restore procedure is completed, you can disable the DAM DB migration mode. You must also scale the persistence node to 3 for scalability and availability. Disable DAM Database Migration mode: ``` Flags to enable various migration modes migration: damDB: # Enable for DAM Database migration from old DB to new DB enabled: false ``` Scale up persistence nodes to 3: scaling: # The default amount of replicas per application replicas: persistenceNode: 3 Perform a helm upgrade with the updated values.yaml file: helm upgrade dx-deployment . -f < your_custom_value_file.yaml > -n < namespace > On successful migration, you will receive the following message. Success message: Installation of HCL DX 95 CF200 done. See HCL Digital Experience product documentation website , for further information. You might have to wait for a few minutes until all the persistence pods and DAM pods are back to the running state.","title":"Migrate to new DAM DB in Helm-based deployments"},{"location":"containerization/helm/helm_dam_migration_newDB/#migrate-to-new-dam-db-in-helm-based-deployments","text":"This manual migration process to the new DAM DB is mandatory if you have DX CF196 or CF197 deployed using the Helm-based deployment option and are now upgrading to CF200. It is mandatory because you cannot upgrade to a future release, such as CF201, without manually migrating to the new DB. If you already have CF 198 or CF199 installed using the Helm-based deployment option, then you need not manually migrate the DAM DB.","title":"Migrate to new DAM DB in Helm-based deployments"},{"location":"containerization/helm/helm_dam_migration_newDB/#1-upgrade-your-existing-helm-based-deployments-to-cf200","text":"To perform the DAM DB migration you must first upgrade your existing DX deployment to CF200. Important: During upgrading to CF200, the Helm-based upgrade procedure detects the old deprecated DAM DB and notifies you with the following warning. The message indicates that the deployment is using an old DAM DB system that is deprecated, hence you must migrate to the new DAM DB. If you do not migrate to a new DAM DB, you might lose data during future DX updates. Warning message: Installation of HCL DX 95 CF200 done. This deployment is using an old DAM Database system and is deprecated. You must migrate this to the new DAM Database. If you receive this message, you must upgrade your DAM Database using the following steps; otherwise you can continue with the upgrade procedure.","title":"1. Upgrade your existing Helm-based deployments to CF200"},{"location":"containerization/helm/helm_dam_migration_newDB/#2-back-up-the-existing-dam-db","text":"Back up of your existing DAM Database. Ensure that the DX pods are in running state before proceeding with the backup procedure. Connect to the Persistence pod: The following command opens a shell in the running Persistence container. kubectl exec --stdin --tty pod/<pod-name> -n <namespace> -- /bin/bash Example: kubectl exec --stdin --tty pod/dx-deployment-persistence-rw-0 -n dxns -- /bin/bash Dump the current database using the pg_dump command: pg_dump dxmediadb > /tmp/dxmediadb.dmp Exit the Persistence container: Close the shell in the Persistence container. exit Download the dumped database to local system by using the following command: kubectl cp <namespace>/<pod-name>:<source-file> <target-file> Example: kubectl cp dxns/dx-deployment-persistence-0:/tmp/dxmediadb.dmp /tmp/dxmediadb.dmp","title":"2. Back up the existing DAM DB"},{"location":"containerization/helm/helm_dam_migration_newDB/#3-migrate-to-new-db","text":"Enable the DAM DB migration mode to migrate your existing DAM DB to the new DB. Change the following configuration in your custom values.yaml file. Enable DAM Database Migration mode: ```","title":"3. Migrate to new DB"},{"location":"containerization/helm/helm_dam_migration_newDB/#flags-to-enable-various-migration-modes","text":"migration: damDB: # Enable for DAM Database migration from old DB to new DB enabled: true ``` Scale down persistence nodes to 1: scaling: # The default amount of replicas per application replicas: persistenceNode: 1 Perform an upgrade with the new configuration: helm upgrade dx-deployment . -f < your_custom_value_file.yaml > -n <namespace> The upgrade will turn off the deprecated old Database system and deploy the new DAM Database system.","title":"Flags to enable various migration modes"},{"location":"containerization/helm/helm_dam_migration_newDB/#4-restore-db-from-old-db-backup","text":"Restore the data from the old database to the new database. Upload Old DB backup to persistence pod: You can now transfer the backup database to the remote Persistence container. kubectl cp <source-file> <namespace>/<pod-name>:<target-file> Example: kubectl cp /tmp/dxmediadb.dmp dxns/dx-deployment-persistence-node-0:/tmp/dxmediadb.dmp Connect to Persistence pod: The following command opens a shell in the running Persistence container. kubectl exec --stdin --tty pod/<pod-name> -n <namespace> -- /bin/bash Example: kubectl exec --stdin --tty pod/dx-deployment-persistence-node-0 -n dxns -- /bin/bash Drop the DAM database if it exists: Disconnect all connections that use the database and drop any existing databases of the deployment. echo \"SELECT pg_terminate_backend(pg_stat_activity.pid) FROM pg_stat_activity WHERE pid <> pg_backend_pid();\" | psql dropdb dxmediadb Restore the database from the previous backup: createdb -O dxuser dxmediadb psql dxmediadb < /tmp/dxmediadb.dmp Exit the Persistence container: Close the shell in the Persistence container. exit","title":"4. Restore DB from Old DB Backup"},{"location":"containerization/helm/helm_dam_migration_newDB/#5-disable-dam-database-migration-mode-and-scale-the-persistence-nodes-to-3","text":"Once the restore procedure is completed, you can disable the DAM DB migration mode. You must also scale the persistence node to 3 for scalability and availability. Disable DAM Database Migration mode: ```","title":"5. Disable DAM Database Migration mode and Scale the persistence nodes to 3"},{"location":"containerization/helm/helm_dam_migration_newDB/#flags-to-enable-various-migration-modes_1","text":"migration: damDB: # Enable for DAM Database migration from old DB to new DB enabled: false ``` Scale up persistence nodes to 3: scaling: # The default amount of replicas per application replicas: persistenceNode: 3 Perform a helm upgrade with the updated values.yaml file: helm upgrade dx-deployment . -f < your_custom_value_file.yaml > -n < namespace > On successful migration, you will receive the following message. Success message: Installation of HCL DX 95 CF200 done. See HCL Digital Experience product documentation website , for further information. You might have to wait for a few minutes until all the persistence pods and DAM pods are back to the running state.","title":"Flags to enable various migration modes"},{"location":"containerization/helm/helm_deployment/","text":"Deploying container platforms using Helm Learn to deploy HCL Digital Experience 9.5 CF196 and later release containers to Kubernetes using Helm as verified in Google Kubernetes Engine (GKE) . Beginning with HCL Digital Experience CF197 and later releases, the Helm deployment pattern is supported for new deployments to Red Hat Open Shift , Amazon Elastic Kubernetes Service (EKS) , and Microsoft Azure Kubernetes Service (AKS) . Video: Deploy HCL DX 9.5 Container Update using Helm . About this task This section provides administrators with all Helm-based deployment tasks to deploy HCL Digital Experience CF196 and later releases to supported Kubernetes platforms. This includes preparation, installation, and uninstallation of the deployments using Helm. Note: Beginning with HCL Digital Experience 9.5 Container Update CF199, migration from an Operator (dxctl) based deployment to a Helm deployment of Container Update CF199 or higher is supported. Reference the Help Center topic Migration from Operator (dxctl) to Helm deployment. for more information. Migration from earlier HCL Digital Experience 9.5 Container Update CF196 - CF198 Operator based deployments to Helm deployments is not supported. Follow these steps to prepare for and deploy HCL Digital Experience 9.5 CF196 and later release to Kubernetes using Helm, as verified in Google Kubernetes Engine (GKE) , and with HCL Digital Experience CF197 and later releases, the Helm deployment pattern is supported for new deployments to Red Hat Open Shift , Amazon Elastic Kubernetes Service (EKS) , and Microsoft Azure Kubernetes Service (AKS) . Before you begin: Refer to the latest HCL DX 9.5 Container Update image files list given in the Docker image list topic.","title":"Deploying on containers"},{"location":"containerization/helm/helm_deployment/#deploying-container-platforms-using-helm","text":"Learn to deploy HCL Digital Experience 9.5 CF196 and later release containers to Kubernetes using Helm as verified in Google Kubernetes Engine (GKE) . Beginning with HCL Digital Experience CF197 and later releases, the Helm deployment pattern is supported for new deployments to Red Hat Open Shift , Amazon Elastic Kubernetes Service (EKS) , and Microsoft Azure Kubernetes Service (AKS) . Video: Deploy HCL DX 9.5 Container Update using Helm .","title":"Deploying container platforms using Helm"},{"location":"containerization/helm/helm_deployment/#about-this-task","text":"This section provides administrators with all Helm-based deployment tasks to deploy HCL Digital Experience CF196 and later releases to supported Kubernetes platforms. This includes preparation, installation, and uninstallation of the deployments using Helm. Note: Beginning with HCL Digital Experience 9.5 Container Update CF199, migration from an Operator (dxctl) based deployment to a Helm deployment of Container Update CF199 or higher is supported. Reference the Help Center topic Migration from Operator (dxctl) to Helm deployment. for more information. Migration from earlier HCL Digital Experience 9.5 Container Update CF196 - CF198 Operator based deployments to Helm deployments is not supported. Follow these steps to prepare for and deploy HCL Digital Experience 9.5 CF196 and later release to Kubernetes using Helm, as verified in Google Kubernetes Engine (GKE) , and with HCL Digital Experience CF197 and later releases, the Helm deployment pattern is supported for new deployments to Red Hat Open Shift , Amazon Elastic Kubernetes Service (EKS) , and Microsoft Azure Kubernetes Service (AKS) . Before you begin: Refer to the latest HCL DX 9.5 Container Update image files list given in the Docker image list topic.","title":"About this task"},{"location":"containerization/helm/helm_extract_operator_properties/","text":"Prepare the Operator properties for migration This section shows the guidance to prepare the mapping of your Operator deployment properties, so you can reuse them in your Helm deployment. The Operator-based to Helm-based migration is a strict side-by-side migration. This section outlines the needed steps to configure your new Helm-based deployment with your old Operator-based deployment configuration settings. Once you have extracted the needed data, and have shut down your Operator-based deployment, you can apply your exported data in your new Helm-based deployment. Note that you are not migrating your DX Core database as you will reuse the same database instance in your Helm-based deployment. Important: Ensure that the current HCL DX 9.5 limitations and requirements , as well as limitations specific to a Helm deployment , are met. Ensure that you have followed the preparation process in Planning your container deployment using Helm , and that you have already created your custom-values.yaml. As with any migration activity, we recommend that you make backups of the data of your current environment before proceeding. See Backup and recovery procedures for more information. In case of any errors after migration, you can fall back to your previous Operator-based environment. See Migration to restore Core and DAM Operator deployment for more information. You must have the properties file you used with dxctl in your old Operator deployment. If you do not have the properties file, refer to the dxctl topic to extract the properties file from your existing deployment using the getProperties function. Ensure to prepare any other needed infrastructure-related items (like persistent volumes, Kubernetes load balancer configuration, etc.) before proceeding with migration to Helm. Optionally, you can perform a test deployment to make sure that all prerequisites and requirements for the Helm deployment are met. Follow the installation steps and check if all the functionality of the default deployment is accessible. If you do not prefer to do an initial test, you can skip to start with the Core and DAM migration immediately. Before migrating to Helm, you must migrate the configuration of your Operator-based deployment first. Follow this guidance to prepare the property mappings for your HCL DX 9.5 Operator-based deployment. You can reuse the values from your deployment.properties file in your new custom-values.yaml. Property mappings This section lists the mapping of the dxctl deployment.properties file with the custom-values.yaml. Note: You should only transfer settings that you have adjusted for your Operator deployment. It is not recommended to overwrite all Helm defaults with the defaults of the old Operator deployment. Only migrate settings that are relevant for you, or those that have been adjusted by you prior deploying the Operator with dxctl . dxctl deployment.properties custom-values.yaml Description dx.namespace Not applicable The namespace used for the deployment. This is handed directly to Helm through the command line interface. dx.name Not applicable The deployment name . This is handed directly to Helm through the command line interface. default.repository images.repository Defines the image repository for all container images. dx.pullpolicy images.pullPolicy Defines the image pull policy for all container images. <application>.image images.name.<application> Name of the container image. <application>.tag images.tag.<application> Name of the container tag. <application>.enabled applications.<application> Enables or disables specific applications. dx.pod.nodeselector nodeSelector.<application> NodeSelector used for pods, can now be done per application in Helm dx.config.authoring configuration.core.tuning.authoring Selects if the instance is tuned for authoring or not. composer.enabled applications.contentComposer Selects if Content Composer is deployed or not. dam.enabled applications.digitalAssetManagement Selects if Digital Asset Management is deployed or not. persist.force-read Not applicable Read-only fallback enablement. This is always enabled in Helm. dxctl deployment.properties custom-values.yaml Description dx.volume volumes.core.profile.volumeName The name of the volume used for the DX core profile. dx.volume.size volumes.core.profile.requests.storage Size of the volume used for the DX core profile. dx.storageclass volumes.core.profile.storageClassName StorageClass of the volume used for the DX core profile. dx.splitlogging: false Not applicable. Defines if the log directory uses a separate volume. This is always enabled in Helm. dx.logging.stgclass volumes.core.log.storageClassName StorageClass for the DX core logging volume. dx.logging.size volumes.core.log.requests.storage StorageClass for the DX core logging volume. dx.tranlogging Not applicable. Defines if the transaction log directory uses a separate volume. This is always enabled in Helm. dx.tranlogging.reclaim Not applicable. Reclaim policy for DX core transaction log volume. Determined by PV instead of Helm dx.tranlogging.stgclass volumes.core.tranlog.storageClassName StorageClass for the DX core transaction log volume. dx.tranlogging.size volumes.core.tranlog.requests.storage Size used for the DX core transaction log volume. remote.search.volume volumes.remoteSearch.prsprofile.volumeName Name of the volume used for the DX Remote Search profile. remote.search.stgclass volumes.remoteSearch.prsprofile.storageClassName StorageClass of the volume for the DX Remote Search profile. dam.volume volumes.digitalAssetManagement.binaries.volumeName Name of the volume used for DAM. dam.stgclass volumes.digitalAssetManagement.binaries.storageClassName StorageClass of the volume used for DAM. dxctl deployment.properties custom-values.yaml Description dx.path.contextroot networking.core.contextRoot Context root used for DX. dx.path.personalized networking.core.personalizedHome Personalized URL path for DX. dx.path.home networking.core.home Non-personalized URL path for DX. dx.deploy.host.override networking.core.host Host name to be used instead of the load balancer host name. dx.deploy.host.override.force Not applicable. Force the use of the override host. Obsolete in Helm. dx.config.cors / dam.config.cors networking.addon.<application>.corsOrigin CORS configuration for applications, can be configured per application in Helm. hybrid.enabled Not applicable. Defines if hybrid is enabled or not. Helm derives this from other networking and application settings. hybrid.url networking.core.host URL of the DX core instance in a hybrid deployment. hybrid.port networking.core.port Port of the DX core instance in a hybrid deployment. dxctl deployment.properties custom-values.yaml Description dx.minreplicas scaling.horizontalPodAutoScaler.core.minReplicas Minimum number of pods when scaling is enabled. dx.maxreplicas scaling.horizontalPodAutoScaler.core.maxReplicas Maximum number of pods when scaling is enabled. dx.replicas scaling.replicas.core Default number of pods when scaling is enabled. dx.targetcpuutilizationpercent scaling.horizontalPodAutoScaler.core.targetCPUUtilizationPercentage CPU target for autoscaling. dx.targetmemoryutilizationpercent scaling.horizontalPodAutoScaler.core.targetMemoryUtilizationPercentage Memory target for autoscaling. dxctl deployment.properties custom-values.yaml Description api.minreplicas scaling.horizontalPodAutoScaler.ringApi.minReplicas Minimum number of pods when scaling is enabled. api.maxreplicas scaling.horizontalPodAutoScaler.ringApi.maxReplicas Maximum number of pods when scaling is enabled. api.targetcpuutilizationpercent scaling.horizontalPodAutoScaler.ringApi.targetCPUUtilizationPercentage CPU target for autoscaling. api.targetmemoryutilizationpercent scaling.horizontalPodAutoScaler.ringApi.targetMemoryUtilizationPercentage Memory target for autoscaling. dxctl deployment.properties custom-values.yaml Description composer.minreplicas scaling.horizontalPodAutoScaler.contentComposer.minReplicas Minimum number of pods when scaling is enabled. composer.maxreplicas scaling.horizontalPodAutoScaler.contentComposer.maxReplicas Maximum number of pods when scaling is enabled. composer.targetcpuutilizationpercent scaling.horizontalPodAutoScaler.contentComposer.targetCPUUtilizationPercentage CPU target for autoscaling. composer.targetmemoryutilizationpercent scaling.horizontalPodAutoScaler.contentComposer.targetMemoryUtilizationPercentage Memory target for autoscaling. dxctl deployment.properties custom-values.yaml Description dam.minreplicas scaling.horizontalPodAutoScaler.digitalAssetManagement.minReplicas Minimum number of pods when scaling is enabled. dam.maxreplicas scaling.horizontalPodAutoScaler.digitalAssetManagement.maxReplicas Maximum number of pods when scaling is enabled. dam.targetcpuutilizationpercent scaling.horizontalPodAutoScaler.digitalAssetManagement.targetCPUUtilizationPercentage CPU target for autoscaling. dam.targetmemoryutilizationpercent scaling.horizontalPodAutoScaler.digitalAssetManagement.targetMemoryUtilizationPercentage Memory target for autoscaling. dxctl deployment.properties custom-values.yaml Description imgproc.minreplicas scaling.horizontalPodAutoScaler.imageProcessor.minReplicas Minimum number of pods when scaling is enabled. imgproc.maxreplicas scaling.horizontalPodAutoScaler.imageProcessor.maxReplicas Maximum number of pods when scaling is enabled. imgproc.targetcpuutilizationpercent scaling.horizontalPodAutoScaler.imageProcessor.targetCPUUtilizationPercentage CPU target for autoscaling. imgproc.targetmemoryutilizationpercent scaling.horizontalPodAutoScaler.imageProcessor.targetMemoryUtilizationPercentage Memory target for autoscaling. dxctl deployment.properties custom-values.yaml Description dx.request.cpu resources.core.requests.cpu CPU request. dx.request.memory resources.core.requests.memory Memory request. dx.limit.cpu resources.core.limits.cpu CPU limit. dx.limit.memory resources.core.limits.memory Memory limit. dxctl deployment.properties custom-values.yaml Description api.request.cpu resources.ringApi.requests.cpu CPU request. api.request.memory resources.ringApi.requests.memory Memory request. api.limit.cpu resources.ringApi.limits.cpu CPU limit. api.limit.memory resources.ringApi.limits.memory Memory limit. dxctl deployment.properties custom-values.yaml Description composer.request.cpu resources.contentComposer.requests.cpu CPU request. composer.request.memory resources.contentComposer.requests.memory Memory request. composer.limit.cpu resources.contentComposer.limits.cpu CPU limit. composer.limit.memory resources.contentComposer.limits.memory Memory limit. dxctl deployment.properties custom-values.yaml Description dam.request.cpu resources.digitalAssetManagement.requests.cpu CPU request. dam.request.memory resources.digitalAssetManagement.requests.memory Memory request. dam.limit.cpu resources.digitalAssetManagement.limits.cpu CPU limit. dam.limit.memory resources.digitalAssetManagement.limits.memory Memory limit. dxctl deployment.properties custom-values.yaml Description persist.request.cpu resources.persistence.requests.cpu CPU request. persist.request.memory resources.persistence.requests.memory Memory request. persist.limit.cpu resources.persistence.limits.cpu CPU limit. persist.limit.memory resources.persistence.limits.memory Memory limit. dxctl deployment.properties custom-values.yaml Description imgproc.request.cpu resources.imageProcessor.requests.cpu CPU request. imgproc.request.memory resources.imageProcessor.requests.memory Memory request. imgproc.limit.cpu resources.imageProcessor.limits.cpu CPU limit. imgproc.limit.memory resources.imageProcessor.limits.memory Memory limit. Parent topic: Migrating from Operator to Helm deployments","title":"Prepare the Operator properties for migration"},{"location":"containerization/helm/helm_extract_operator_properties/#prepare-the-operator-properties-for-migration","text":"This section shows the guidance to prepare the mapping of your Operator deployment properties, so you can reuse them in your Helm deployment. The Operator-based to Helm-based migration is a strict side-by-side migration. This section outlines the needed steps to configure your new Helm-based deployment with your old Operator-based deployment configuration settings. Once you have extracted the needed data, and have shut down your Operator-based deployment, you can apply your exported data in your new Helm-based deployment. Note that you are not migrating your DX Core database as you will reuse the same database instance in your Helm-based deployment. Important: Ensure that the current HCL DX 9.5 limitations and requirements , as well as limitations specific to a Helm deployment , are met. Ensure that you have followed the preparation process in Planning your container deployment using Helm , and that you have already created your custom-values.yaml. As with any migration activity, we recommend that you make backups of the data of your current environment before proceeding. See Backup and recovery procedures for more information. In case of any errors after migration, you can fall back to your previous Operator-based environment. See Migration to restore Core and DAM Operator deployment for more information. You must have the properties file you used with dxctl in your old Operator deployment. If you do not have the properties file, refer to the dxctl topic to extract the properties file from your existing deployment using the getProperties function. Ensure to prepare any other needed infrastructure-related items (like persistent volumes, Kubernetes load balancer configuration, etc.) before proceeding with migration to Helm. Optionally, you can perform a test deployment to make sure that all prerequisites and requirements for the Helm deployment are met. Follow the installation steps and check if all the functionality of the default deployment is accessible. If you do not prefer to do an initial test, you can skip to start with the Core and DAM migration immediately. Before migrating to Helm, you must migrate the configuration of your Operator-based deployment first. Follow this guidance to prepare the property mappings for your HCL DX 9.5 Operator-based deployment. You can reuse the values from your deployment.properties file in your new custom-values.yaml. Property mappings This section lists the mapping of the dxctl deployment.properties file with the custom-values.yaml. Note: You should only transfer settings that you have adjusted for your Operator deployment. It is not recommended to overwrite all Helm defaults with the defaults of the old Operator deployment. Only migrate settings that are relevant for you, or those that have been adjusted by you prior deploying the Operator with dxctl . dxctl deployment.properties custom-values.yaml Description dx.namespace Not applicable The namespace used for the deployment. This is handed directly to Helm through the command line interface. dx.name Not applicable The deployment name . This is handed directly to Helm through the command line interface. default.repository images.repository Defines the image repository for all container images. dx.pullpolicy images.pullPolicy Defines the image pull policy for all container images. <application>.image images.name.<application> Name of the container image. <application>.tag images.tag.<application> Name of the container tag. <application>.enabled applications.<application> Enables or disables specific applications. dx.pod.nodeselector nodeSelector.<application> NodeSelector used for pods, can now be done per application in Helm dx.config.authoring configuration.core.tuning.authoring Selects if the instance is tuned for authoring or not. composer.enabled applications.contentComposer Selects if Content Composer is deployed or not. dam.enabled applications.digitalAssetManagement Selects if Digital Asset Management is deployed or not. persist.force-read Not applicable Read-only fallback enablement. This is always enabled in Helm. dxctl deployment.properties custom-values.yaml Description dx.volume volumes.core.profile.volumeName The name of the volume used for the DX core profile. dx.volume.size volumes.core.profile.requests.storage Size of the volume used for the DX core profile. dx.storageclass volumes.core.profile.storageClassName StorageClass of the volume used for the DX core profile. dx.splitlogging: false Not applicable. Defines if the log directory uses a separate volume. This is always enabled in Helm. dx.logging.stgclass volumes.core.log.storageClassName StorageClass for the DX core logging volume. dx.logging.size volumes.core.log.requests.storage StorageClass for the DX core logging volume. dx.tranlogging Not applicable. Defines if the transaction log directory uses a separate volume. This is always enabled in Helm. dx.tranlogging.reclaim Not applicable. Reclaim policy for DX core transaction log volume. Determined by PV instead of Helm dx.tranlogging.stgclass volumes.core.tranlog.storageClassName StorageClass for the DX core transaction log volume. dx.tranlogging.size volumes.core.tranlog.requests.storage Size used for the DX core transaction log volume. remote.search.volume volumes.remoteSearch.prsprofile.volumeName Name of the volume used for the DX Remote Search profile. remote.search.stgclass volumes.remoteSearch.prsprofile.storageClassName StorageClass of the volume for the DX Remote Search profile. dam.volume volumes.digitalAssetManagement.binaries.volumeName Name of the volume used for DAM. dam.stgclass volumes.digitalAssetManagement.binaries.storageClassName StorageClass of the volume used for DAM. dxctl deployment.properties custom-values.yaml Description dx.path.contextroot networking.core.contextRoot Context root used for DX. dx.path.personalized networking.core.personalizedHome Personalized URL path for DX. dx.path.home networking.core.home Non-personalized URL path for DX. dx.deploy.host.override networking.core.host Host name to be used instead of the load balancer host name. dx.deploy.host.override.force Not applicable. Force the use of the override host. Obsolete in Helm. dx.config.cors / dam.config.cors networking.addon.<application>.corsOrigin CORS configuration for applications, can be configured per application in Helm. hybrid.enabled Not applicable. Defines if hybrid is enabled or not. Helm derives this from other networking and application settings. hybrid.url networking.core.host URL of the DX core instance in a hybrid deployment. hybrid.port networking.core.port Port of the DX core instance in a hybrid deployment. dxctl deployment.properties custom-values.yaml Description dx.minreplicas scaling.horizontalPodAutoScaler.core.minReplicas Minimum number of pods when scaling is enabled. dx.maxreplicas scaling.horizontalPodAutoScaler.core.maxReplicas Maximum number of pods when scaling is enabled. dx.replicas scaling.replicas.core Default number of pods when scaling is enabled. dx.targetcpuutilizationpercent scaling.horizontalPodAutoScaler.core.targetCPUUtilizationPercentage CPU target for autoscaling. dx.targetmemoryutilizationpercent scaling.horizontalPodAutoScaler.core.targetMemoryUtilizationPercentage Memory target for autoscaling. dxctl deployment.properties custom-values.yaml Description api.minreplicas scaling.horizontalPodAutoScaler.ringApi.minReplicas Minimum number of pods when scaling is enabled. api.maxreplicas scaling.horizontalPodAutoScaler.ringApi.maxReplicas Maximum number of pods when scaling is enabled. api.targetcpuutilizationpercent scaling.horizontalPodAutoScaler.ringApi.targetCPUUtilizationPercentage CPU target for autoscaling. api.targetmemoryutilizationpercent scaling.horizontalPodAutoScaler.ringApi.targetMemoryUtilizationPercentage Memory target for autoscaling. dxctl deployment.properties custom-values.yaml Description composer.minreplicas scaling.horizontalPodAutoScaler.contentComposer.minReplicas Minimum number of pods when scaling is enabled. composer.maxreplicas scaling.horizontalPodAutoScaler.contentComposer.maxReplicas Maximum number of pods when scaling is enabled. composer.targetcpuutilizationpercent scaling.horizontalPodAutoScaler.contentComposer.targetCPUUtilizationPercentage CPU target for autoscaling. composer.targetmemoryutilizationpercent scaling.horizontalPodAutoScaler.contentComposer.targetMemoryUtilizationPercentage Memory target for autoscaling. dxctl deployment.properties custom-values.yaml Description dam.minreplicas scaling.horizontalPodAutoScaler.digitalAssetManagement.minReplicas Minimum number of pods when scaling is enabled. dam.maxreplicas scaling.horizontalPodAutoScaler.digitalAssetManagement.maxReplicas Maximum number of pods when scaling is enabled. dam.targetcpuutilizationpercent scaling.horizontalPodAutoScaler.digitalAssetManagement.targetCPUUtilizationPercentage CPU target for autoscaling. dam.targetmemoryutilizationpercent scaling.horizontalPodAutoScaler.digitalAssetManagement.targetMemoryUtilizationPercentage Memory target for autoscaling. dxctl deployment.properties custom-values.yaml Description imgproc.minreplicas scaling.horizontalPodAutoScaler.imageProcessor.minReplicas Minimum number of pods when scaling is enabled. imgproc.maxreplicas scaling.horizontalPodAutoScaler.imageProcessor.maxReplicas Maximum number of pods when scaling is enabled. imgproc.targetcpuutilizationpercent scaling.horizontalPodAutoScaler.imageProcessor.targetCPUUtilizationPercentage CPU target for autoscaling. imgproc.targetmemoryutilizationpercent scaling.horizontalPodAutoScaler.imageProcessor.targetMemoryUtilizationPercentage Memory target for autoscaling. dxctl deployment.properties custom-values.yaml Description dx.request.cpu resources.core.requests.cpu CPU request. dx.request.memory resources.core.requests.memory Memory request. dx.limit.cpu resources.core.limits.cpu CPU limit. dx.limit.memory resources.core.limits.memory Memory limit. dxctl deployment.properties custom-values.yaml Description api.request.cpu resources.ringApi.requests.cpu CPU request. api.request.memory resources.ringApi.requests.memory Memory request. api.limit.cpu resources.ringApi.limits.cpu CPU limit. api.limit.memory resources.ringApi.limits.memory Memory limit. dxctl deployment.properties custom-values.yaml Description composer.request.cpu resources.contentComposer.requests.cpu CPU request. composer.request.memory resources.contentComposer.requests.memory Memory request. composer.limit.cpu resources.contentComposer.limits.cpu CPU limit. composer.limit.memory resources.contentComposer.limits.memory Memory limit. dxctl deployment.properties custom-values.yaml Description dam.request.cpu resources.digitalAssetManagement.requests.cpu CPU request. dam.request.memory resources.digitalAssetManagement.requests.memory Memory request. dam.limit.cpu resources.digitalAssetManagement.limits.cpu CPU limit. dam.limit.memory resources.digitalAssetManagement.limits.memory Memory limit. dxctl deployment.properties custom-values.yaml Description persist.request.cpu resources.persistence.requests.cpu CPU request. persist.request.memory resources.persistence.requests.memory Memory request. persist.limit.cpu resources.persistence.limits.cpu CPU limit. persist.limit.memory resources.persistence.limits.memory Memory limit. dxctl deployment.properties custom-values.yaml Description imgproc.request.cpu resources.imageProcessor.requests.cpu CPU request. imgproc.request.memory resources.imageProcessor.requests.memory Memory request. imgproc.limit.cpu resources.imageProcessor.limits.cpu CPU limit. imgproc.limit.memory resources.imageProcessor.limits.memory Memory limit. Parent topic: Migrating from Operator to Helm deployments","title":"Prepare the Operator properties for migration"},{"location":"containerization/helm/helm_fallback_migration_Operator_deployment/","text":"Migrate to restore Core and DAM Operator deployment This section shows the steps necessary to revert a DX 9.5 Container Deployment to the previous Operator-based deployment in case of any error during the migration to Helm. Follow this guidance to create a backup to support the capability to restore the DX 9.5 Core and Digital Asset Management Operator deployment. Restore Core Operator deployment Connect to the Core pod. The following command opens a shell in the running core container: kubectl exec --stdin --tty pod/<pod-name> -n <namespace> -- /bin/bash Example : kubectl exec --stdin --tty pod/dx-deployment-0 -n dxns -- /bin/bash Start the server. Navigate to the profile bin folder and run the startServer command. cd /opt/HCL/wp_profile/bin/./startServer.sh WebSphere_Portal Exit the core container. Close the shell in the core container. exit Reset the scaling of the Core pods. Reset the replication settings for Core to the previous values if necessary. On the operator deployment adjust the DXCTL property file: dx.minreplicas:<min_number_of_replicas> dx.maxreplicas:<max_number_of_replicas> and apply it via DXCTL tool: ./dxctl -\u2013update -p deployment.properties The change is applied after a few seconds and the core pods are started. Use the kubectl get pods command to check the progress. If the pods are not started after a few minutes, force the change to be applied using the following command: kubectl delete statefulset -n <namespace> dx-deployment Restore DAM Operator deployment Disable maintenance mode for DAM. Digital Asset Management must be started without maintenance mode to restore the running status. We achieve this by changing the ConfigMap of the Operator deployment. kubectl -n <namespace> edit cm <configmap> Example: kubectl edit cm -n dxns dx-deployment In the data section, remove maintenance_mode:true from the dx.deploy.dam.features entry and save the changes. If maintenance_mode:true is the only entry for this key, dx.deploy.dam.features can be removed completely. data: dx.deploy.dam.features: \"maintenance_mode:true\" After saving the changes, the DAM pod will restart automatically after some seconds. Please wait until the pod is restarted before proceeding. Reset the scaling of the DAM and Persistence pods. Reset the replication settings for DAM and Persistence to the previous values if necessary. On the operator deployment adjust the DXCTL property file: ``` dam.minreplicas: dam.maxreplicas: persist.minreplicas: persist.maxreplicas: ``` and apply it via DXCTL tool: ./dxctl -\u2013update -p deployment.properties Parent topic: Migrating from Operator to Helm deployments","title":"Migrate to restore Core and DAM Operator deployment"},{"location":"containerization/helm/helm_fallback_migration_Operator_deployment/#migrate-to-restore-core-and-dam-operator-deployment","text":"This section shows the steps necessary to revert a DX 9.5 Container Deployment to the previous Operator-based deployment in case of any error during the migration to Helm. Follow this guidance to create a backup to support the capability to restore the DX 9.5 Core and Digital Asset Management Operator deployment. Restore Core Operator deployment Connect to the Core pod. The following command opens a shell in the running core container: kubectl exec --stdin --tty pod/<pod-name> -n <namespace> -- /bin/bash Example : kubectl exec --stdin --tty pod/dx-deployment-0 -n dxns -- /bin/bash Start the server. Navigate to the profile bin folder and run the startServer command. cd /opt/HCL/wp_profile/bin/./startServer.sh WebSphere_Portal Exit the core container. Close the shell in the core container. exit Reset the scaling of the Core pods. Reset the replication settings for Core to the previous values if necessary. On the operator deployment adjust the DXCTL property file: dx.minreplicas:<min_number_of_replicas> dx.maxreplicas:<max_number_of_replicas> and apply it via DXCTL tool: ./dxctl -\u2013update -p deployment.properties The change is applied after a few seconds and the core pods are started. Use the kubectl get pods command to check the progress. If the pods are not started after a few minutes, force the change to be applied using the following command: kubectl delete statefulset -n <namespace> dx-deployment Restore DAM Operator deployment Disable maintenance mode for DAM. Digital Asset Management must be started without maintenance mode to restore the running status. We achieve this by changing the ConfigMap of the Operator deployment. kubectl -n <namespace> edit cm <configmap> Example: kubectl edit cm -n dxns dx-deployment In the data section, remove maintenance_mode:true from the dx.deploy.dam.features entry and save the changes. If maintenance_mode:true is the only entry for this key, dx.deploy.dam.features can be removed completely. data: dx.deploy.dam.features: \"maintenance_mode:true\" After saving the changes, the DAM pod will restart automatically after some seconds. Please wait until the pod is restarted before proceeding. Reset the scaling of the DAM and Persistence pods. Reset the replication settings for DAM and Persistence to the previous values if necessary. On the operator deployment adjust the DXCTL property file: ``` dam.minreplicas: dam.maxreplicas: persist.minreplicas: persist.maxreplicas: ``` and apply it via DXCTL tool: ./dxctl -\u2013update -p deployment.properties Parent topic: Migrating from Operator to Helm deployments","title":"Migrate to restore Core and DAM Operator deployment"},{"location":"containerization/helm/helm_install_commands/","text":"Install and uninstall commands for HCL DX 9.5 CF196 and later container deployments to Kubernetes and Red Hat OpenShift platforms using Helm The following are install and uninstall commands that are used to deploy or uninstall HCL Digital Experience 9.5 CF196 and later releases to Kubernetes and Red Hat OpenShift platforms using Helm. Note: Deployment using Helm is supported for new deployments to Google Kubernetes Engine (GKE) only with DX 9.5 Container Update CF196. Deployment using Helm is supported for new deployments to Microsoft Azure Kubernetes Service, Amazon Elastic Kubernetes Service, and Red Hat OpenShift beginning with HCL DX Container Update CF197. Install command Important: Modification to any files (chart.yaml, templates, crds) in hcl-dx-deployment-vX.X.X_XXXXXXXX-XXXX.tar.gz, except custom-values.yaml or values.yaml, is not supported. To run the installation of your prepared configurations using Helm, use the following command: # Helm install command helm install -n my-namespace -f path/to/your/custom-values.yaml your-release-name path/to/hcl-dx-deployment-vX.X.X_XXXXXXXX-XXXX.tar.gz The my-namespace is the namespace where your HCL Digital Experience 9.5 deployment is installed to. The -f path/to/your/custom-values.yaml must point to the custom-values.yaml you have created, which contains all deployment configuration. your-release-name is the Helm release name and prefixes all resources created in that installation, such as Pods, Services, and others. path/to/hcl-dx-deployment-vX.X.X_XXXXXXXX-XXXX.tar.gz is the HCL Digital Experience 9.5 Helm Chart that you have extracted as described earlier in the planning and preparation steps. After a successful deployment, Helm responds with the following message: NAME: dx LAST DEPLOYED: Thu Jun 17 14:27:58 2021 NAMESPACE: my-namespace STATUS: deployed REVISION: 1 TEST SUITE: None Hybrid deployment configuration If you are installing in a Hybrid deployment pattern, after successfully running the Helm deployment, you need to configure services in DX Core to be aware of the external host name of your hybrid DX environment. To complete these steps, log on to the DX Core Server and run the following Config Engine tasks to enable other DX applications. In the following examples, replace <host-url> with your corresponding external host name. Content Composer: <Path to wp_profile>/ConfigEngine/ConfigEngine.sh enable-headless-content -Dstatic.ui.url=https://<host-url>/dx/ui/content-ui/static -DWasPassword=<was- password> -DPortalAdminPwd=<admin-password> Digital Asset Manager: <Path to wp_profile>/ConfigEngine/ConfigEngine.sh enable-media-library -Dstatic.ui.url=https://<host-url>/dx/ui/dam/static -DWasPassword=<was- password> -DPortalAdminPwd=<admin-password> Design Studio (Beta): <Path to wp_profile>/ConfigEngine/ConfigEngine.sh enable-content-sites -Dcontentsites.static.ui.url=https://<host-url>/dx/ui/site-manager/static -DWasPassword=<was-password> -DPortalAdminPwd=<admin-password> Default URLs post installation During the configuration process, you might need the following URLs to access different administration user interfaces. Use the following default URLs to access HCL Digital Experience (Portal and WCM), the WebSphere\u00ae Integrated Solutions Console, and the Configuration Wizard: HCL Digital Experience (Portal and WCM) https://yourserver/wps/portal IBM WebSphere\u00ae Integrated Solutions Console https://yourserver/ibm/console IBM WebSphere\u00ae Integrated Solutions Console for Remote Search https://yourserver:9043/ibm/console HCL Digital Experience Configuration Wizard https://yourserver/hcl/wizard Uninstall command To remove your HCL Digital Experience 9.5 deployment from your Cluster deployed using Helm, it is recommended that you use Helm uninstall. To run the uninstall, use the following command as shown in this example: # Helm uninstall command helm uninstall your-release-name -n my-namespace The my-namespace is the namespace where your HCL Digital Experience 9.5 deployment is installed to. your-release-name is the Helm release name you selected during installation. After a successful deployment, Helm responds with the following message: release \"your-release-name\" uninstalled (Optional) External DNS configuration After a successful Helm deployment in a hybrid deployment, you can add a load balancer or an external IP to the DNS registry. Run the following command to get a load balancer external IP: kubectl get services -n <your-namespace> For Amazon EKS, you must add the external IP to route53. (Optional) Automated host extraction As described in the Configure networking topic, there are instances wherein you do not know the resulting external IP or FQDN for your deployment and you left the host value empty. In that case, run a Helm upgrade command, and it automatically polls the Ambassador Ingress and extract the found IP or FQDN from there. The Helm Chart logic goes ahead and populates all application configuration with the correct settings. An example is provided below. You may use the following Helm upgrade command to trigger the automated host extraction: # Helm upgrade command helm upgrade -n my-namespace -f path/to/your/custom-values.yaml your-release-name path/to/hcl-dx-deployment-vX.X.X_XXXXXXXX-XXXX.tar.gz Additional reference Step by Step Guide: How to deploy HCL DX Container Update CF197 and higher to Microsoft Azure Kubernetes Service (AKS) using Helm","title":"Install and uninstall commands for HCL DX 9.5 CF196 and later container deployments to Kubernetes and Red Hat OpenShift platforms using Helm"},{"location":"containerization/helm/helm_install_commands/#install-and-uninstall-commands-for-hcl-dx-95-cf196-and-later-container-deployments-to-kubernetes-and-red-hat-openshift-platforms-using-helm","text":"The following are install and uninstall commands that are used to deploy or uninstall HCL Digital Experience 9.5 CF196 and later releases to Kubernetes and Red Hat OpenShift platforms using Helm. Note: Deployment using Helm is supported for new deployments to Google Kubernetes Engine (GKE) only with DX 9.5 Container Update CF196. Deployment using Helm is supported for new deployments to Microsoft Azure Kubernetes Service, Amazon Elastic Kubernetes Service, and Red Hat OpenShift beginning with HCL DX Container Update CF197.","title":"Install and uninstall commands for HCL DX 9.5 CF196 and later container deployments to Kubernetes and Red Hat OpenShift platforms using Helm"},{"location":"containerization/helm/helm_install_commands/#install-command","text":"Important: Modification to any files (chart.yaml, templates, crds) in hcl-dx-deployment-vX.X.X_XXXXXXXX-XXXX.tar.gz, except custom-values.yaml or values.yaml, is not supported. To run the installation of your prepared configurations using Helm, use the following command: # Helm install command helm install -n my-namespace -f path/to/your/custom-values.yaml your-release-name path/to/hcl-dx-deployment-vX.X.X_XXXXXXXX-XXXX.tar.gz The my-namespace is the namespace where your HCL Digital Experience 9.5 deployment is installed to. The -f path/to/your/custom-values.yaml must point to the custom-values.yaml you have created, which contains all deployment configuration. your-release-name is the Helm release name and prefixes all resources created in that installation, such as Pods, Services, and others. path/to/hcl-dx-deployment-vX.X.X_XXXXXXXX-XXXX.tar.gz is the HCL Digital Experience 9.5 Helm Chart that you have extracted as described earlier in the planning and preparation steps. After a successful deployment, Helm responds with the following message: NAME: dx LAST DEPLOYED: Thu Jun 17 14:27:58 2021 NAMESPACE: my-namespace STATUS: deployed REVISION: 1 TEST SUITE: None","title":"Install command"},{"location":"containerization/helm/helm_install_commands/#hybrid-deployment-configuration","text":"If you are installing in a Hybrid deployment pattern, after successfully running the Helm deployment, you need to configure services in DX Core to be aware of the external host name of your hybrid DX environment. To complete these steps, log on to the DX Core Server and run the following Config Engine tasks to enable other DX applications. In the following examples, replace <host-url> with your corresponding external host name. Content Composer: <Path to wp_profile>/ConfigEngine/ConfigEngine.sh enable-headless-content -Dstatic.ui.url=https://<host-url>/dx/ui/content-ui/static -DWasPassword=<was- password> -DPortalAdminPwd=<admin-password> Digital Asset Manager: <Path to wp_profile>/ConfigEngine/ConfigEngine.sh enable-media-library -Dstatic.ui.url=https://<host-url>/dx/ui/dam/static -DWasPassword=<was- password> -DPortalAdminPwd=<admin-password> Design Studio (Beta): <Path to wp_profile>/ConfigEngine/ConfigEngine.sh enable-content-sites -Dcontentsites.static.ui.url=https://<host-url>/dx/ui/site-manager/static -DWasPassword=<was-password> -DPortalAdminPwd=<admin-password>","title":"Hybrid deployment configuration"},{"location":"containerization/helm/helm_install_commands/#default-urls-post-installation","text":"During the configuration process, you might need the following URLs to access different administration user interfaces. Use the following default URLs to access HCL Digital Experience (Portal and WCM), the WebSphere\u00ae Integrated Solutions Console, and the Configuration Wizard: HCL Digital Experience (Portal and WCM) https://yourserver/wps/portal IBM WebSphere\u00ae Integrated Solutions Console https://yourserver/ibm/console IBM WebSphere\u00ae Integrated Solutions Console for Remote Search https://yourserver:9043/ibm/console HCL Digital Experience Configuration Wizard https://yourserver/hcl/wizard","title":"Default URLs post installation"},{"location":"containerization/helm/helm_install_commands/#uninstall-command","text":"To remove your HCL Digital Experience 9.5 deployment from your Cluster deployed using Helm, it is recommended that you use Helm uninstall. To run the uninstall, use the following command as shown in this example: # Helm uninstall command helm uninstall your-release-name -n my-namespace The my-namespace is the namespace where your HCL Digital Experience 9.5 deployment is installed to. your-release-name is the Helm release name you selected during installation. After a successful deployment, Helm responds with the following message: release \"your-release-name\" uninstalled","title":"Uninstall command"},{"location":"containerization/helm/helm_install_commands/#optional-external-dns-configuration","text":"After a successful Helm deployment in a hybrid deployment, you can add a load balancer or an external IP to the DNS registry. Run the following command to get a load balancer external IP: kubectl get services -n <your-namespace> For Amazon EKS, you must add the external IP to route53.","title":"(Optional) External DNS configuration"},{"location":"containerization/helm/helm_install_commands/#optional-automated-host-extraction","text":"As described in the Configure networking topic, there are instances wherein you do not know the resulting external IP or FQDN for your deployment and you left the host value empty. In that case, run a Helm upgrade command, and it automatically polls the Ambassador Ingress and extract the found IP or FQDN from there. The Helm Chart logic goes ahead and populates all application configuration with the correct settings. An example is provided below. You may use the following Helm upgrade command to trigger the automated host extraction: # Helm upgrade command helm upgrade -n my-namespace -f path/to/your/custom-values.yaml your-release-name path/to/hcl-dx-deployment-vX.X.X_XXXXXXXX-XXXX.tar.gz","title":"(Optional) Automated host extraction"},{"location":"containerization/helm/helm_install_commands/#additional-reference","text":"Step by Step Guide: How to deploy HCL DX Container Update CF197 and higher to Microsoft Azure Kubernetes Service (AKS) using Helm","title":"Additional reference"},{"location":"containerization/helm/helm_operations/","text":"Operations using Helm This topic provides operations guidance for DX administrators to manage DX 9.5 deployments using Helm, such a configuration updates, monitoring, and troubleshooting strategies. For more information about Helm applications, consult the Helm documentation . Refer to the DX 9.5 Container component image listing in the DX 9.5 Docker Image file list topic.","title":"Operations using Helm"},{"location":"containerization/helm/helm_operations/#operations-using-helm","text":"This topic provides operations guidance for DX administrators to manage DX 9.5 deployments using Helm, such a configuration updates, monitoring, and troubleshooting strategies. For more information about Helm applications, consult the Helm documentation . Refer to the DX 9.5 Container component image listing in the DX 9.5 Docker Image file list topic.","title":"Operations using Helm"},{"location":"containerization/helm/helm_operator_core_migration/","text":"Migrate the Core profile This section shows the steps to migrate your Core profile. You can create a backup of the profile and restore it later in the Helm deployment. Follow this guidance to create a backup of the Core profile from your Operator deployment, and restore the profile to a Helm-based deployment. Back up from an Operator-based deployment Ensure that only one Core pod is running. Check how many pods are running with the following command: kubectl -n <namespace> get pods If more than one pod is running, scale down the Core pods so only one (1) pod is running. On the Operator deployment, adjust the dxctl property file: dx.maxreplicas:1 dx.minreplicas:1 then apply the changes in the updated property file using the dxctl tool: ./dxctl -\u2013update -p deployment.properties Once the changes are applied, any replicas will be terminated. You may check the progress by running the kubectl command. Connect to the Core pod . The following command opens a shell in the running Core pod: kubectl exec --stdin --tty pod/<pod-name> -n <namespace> -- /bin/bash For example: kubectl exec --stdin --tty pod/dx-deployment-0 -n dxns -- /bin/bash Stop the Core application before a backup from the wp_profile is created. Navigate to the profile bin folder and run the stopServer command: cd /opt/HCL/wp_profile/bin/ ./stopServer.sh WebSphere_Portal -username <username> -password <password> Note: While the server is stopped, the liveness probe returns a failure result to Kubernetes. Once the maximum allowed number of failures is reached, Kubernetes restarts the pod, closing any kubectl exec session and brings the Core pod back online. However, with the default liveness probe settings in full-deployment.properties , this process takes approximately two (2) hours to occur. If you need to adjust your liveness probe settings to allow time to perform the profile backup (for instance, because you have reduced them considerably from the default in your deployment), make the changes in your full-deployment.properties file, and then apply the changes using dxctl as described in Step 1. Compress the whole Core profile folder /opt/HCL/wp_profile by running the following command: cd /opt/HCL tar -cvpzf core_prof_95_CF199.tar.gz --exclude=/core_prof_95_CF199.tar.gz --one-file-system wp_profile Close the shell in the Core pod using the following command: exit Download the backup Core profile from the Core pod to your local system by running the following command: kubectl cp <namespace>/<pod-name>:<source-file> <target-file> For example: kubectl cp dxns/dx-deployment-0:opt/HCL/core_prof_95_CF199.tar.gz /tmp/core_prof_95_CF199.tar.gz (Optional) Make the old environment unavailable. Kubernetes eventually brings the Core pod back online by restarting it (see the note on liveness probes in Step 2.a). If you want to keep the Operator-based deployment unavailable to users after backing up the profile, you can do the following steps: Adjust the dxctl property file : dx.maxreplicas: 0 dx.minreplicas: 0 dx.replicas: 0 Apply it using the dxctl tool : ./dxctl -\u2013update -p deployment.properties The change is applied after a few seconds and all the additional Core pods are terminated. You can use kubectl get pods to check the progress. If the additional Core pods are not terminated after a few minutes, use the following command to force the changes to be applied: kubectl delete statefulset -n <namespace> dx-deployment If you want to enable the Operator-based deployment Core pod again, set the values of the dxctl property file to values greater than zero and apply the changes using the dxctl tool. Restore your back up to the Helm-based deployment Important: Ensure to note the requirements and limitations here . For the new Helm deployment, you must use a different Kubernetes namespace from the one used in the Operator-based deployment. Ensure that the Helm-based deployment is in the correct state before restoring a backup. Ensure that you have extracted the Kubernetes DX configuration from the Operator-based deployment to a valid custom-values.yaml file. Enable migration mode for operatorToHelm by adding or updating the following value in custom-values.yaml: migration: operatorToHelm: enabled: true Disable all the applications, except runtimeController and the core : applications: core: true runtimeController: true contentComposer: false designStudio: false digitalAssetManagement: false imageProcessor: false openLdap: false persistence: false remoteSearch: false ringApi: false ambassador: false Start the Helm deployment. If you are running the migration of the Core first, run the following command: helm install -n <namespace> --create-namespace -f <custom-values.yaml> <prefix> <chart> For example: ``` helm install -n dxns-helm --create-namespace -f custom-values.yaml dx-deployment hcl-dx-deployment ``` If DAM migration is done first: ``` helm upgrade -n <namespace> -f <custom-values.yaml> <prefix> <chart> ``` For example: ``` helm upgrade -n dxns-helm -f custom-values.yaml dx-deployment hcl-dx-deployment ``` The following outcomes are expected: - The `core` pod is running and kept alive. - The `core` application is not running. - No default profile is created automatically. The folder `/opt/HCL/wp_profile` is empty. 2. **Upload the backup profile.** Use the following command to transfer the backup profile to the remote Core pod: ``` kubectl cp <source-file> <namespace>/<pod-name>:<target-file> ``` For example: ``` kubectl cp /tmp/core_prof_95_CF199.tar.gz dxns-helm/dx-deployment-core-0:/tmp/core_prof_95_CF199.tar.gz ``` 3. **Connect to the Core pod.** Use the following command to pine a shell in the running Core pod: ``` kubectl exec --stdin --tty pod/<pod-name> -n <namespace> -- /bin/bash ``` For example: ``` kubectl exec --stdin --tty pod/dx-deployment-core-0 -n dxns-helm -- /bin/bash ``` 1. **Extract the profile.** Move the core\\_prof\\_95\\_CF199.tar.gz from the /temp folder to the profile folder /opt/HCL/profiles before extracting it: ``` tar -xf /tmp/core_prof_95_CF199.tar.gz --directory /opt/HCL/profiles mv /opt/HCL/profiles/wp_profile /opt/HCL/profiles/prof_95_CF199 rm /tmp/core_prof_95_CF199.tar.gz ``` 2. **Create a symbolink \\(symlink\\)** by running the following command: ``` rm -r /opt/HCL/wp_profile ln -s /opt/HCL/profiles/prof_95_CF199 /opt/HCL/wp_profile ``` 3. **Close the shell in the Core pod** using the following command: ``` exit ``` 4. **Disable the migration mode and the deployment.** **Note:** If Digital Asset Management was used in the Operator-based deployment, you must follow the [DAM migration instructions](helm_dam_migration.md) before disabling migration mode. 1. **Disable the `migration` mode** by updating the following value in custom-values.yaml ``` migration: operatorToHelm: enabled: false ``` 2. **Enable all relevant applications.** 3. **Upgrade the Helm deployment** using the following command: ``` helm upgrade -n <namespace> --create-namespace -f <custom-values.yaml> <prefix> <chart> ``` For example: ``` helm upgrade -n dxns-helm --create-namespace -f custom-values.yaml dx-deployment hcl-dx-deployment ``` 5. **Reconfigure applications to use relative paths.** Coming from old Operator deployments, it can appear that the applications \\(Digital Asset Management, Content Composer, and Design Studio\\) are still configured to use absolute URLs for their rendering. If you use any of these applications, it is highly recommended that you reconfigure them to use relative paths. CAUTION: Reconfigure relative paths for applications that are active in your deployment. Otherwise, the command will fail. Replace the placeholders for `NAMESPACE`, `YOUR_WAS_ADMIN_USER`, and `YOUR_WAS_ADMIN_PASSWORD` with the corresponding values of your deployment. - For Content Composer: ``` kubectl exec -n <NAMESPACE> dx-deployment-core-0 -- bash -c 'cd /opt/HCL/ConfigEngine/ && ./ConfigEngine.sh action-deploy-headless-content-pages -Dcc.static.ui.url=/dx/ui/content/static -DWasPassword=<YOUR_WAS_ADMIN_USER> -DPortalAdminPwd=<YOUR_WAS_ADMIN_PASSWORD>' ``` - For Digital Asset Management: ``` kubectl exec -n <NAMESPACE> dx-deployment-core-0 -- bash -c 'cd /opt/HCL/ConfigEngine/ && ./ConfigEngine.sh action-deploy-media-library-pages -Ddam.static.ui.url=/dx/ui/dam/static -DWasPassword=<YOUR_WAS_ADMIN_USER> -DPortalAdminPwd=<YOUR_WAS_ADMIN_PASSWORD>' ``` - For Design Studio: ``` kubectl exec -n <NAMESPACE> dx-deployment-core-0 -- bash -c 'cd /opt/HCL/ConfigEngine/ && ./ConfigEngine.sh action-deploy-content-sites-pages -Dcontentsites.ui.url=/dx/ui/site-manager/static -DWasPassword=<YOUR_WAS_ADMIN_USER> -DPortalAdminPwd=<YOUR_WAS_ADMIN_PASSWORD>' ``` 6. **Create the secret with your TLS certificate for the Ambassador Ingress in your Helm-based deployment.** To make your migrated Helm deployment accessible, you need to configure the TLS certificate that is used by the Ambassador Ingress. See [Use certificate](helm_configure_networking.md) for more information. 7. \\(**Optional**\\) If you have changed the WAS/Portal Administrator user, update the corresponding secrets \\(`dx-deployment-was` and `dx-deployment-wps`\\) in the Helm-based deployment. 8. **\\(Optional\\)** Configure Remote Search. Skip this step if you have not used Remote Search in your Operator deployment, or if you have no plans to use Remote Search within your Helm-based deployment. Configure Remote Search and re-index your data again. See instructions on [how to configure Remote Search within a Kubernetes environment](kubernetes_remote_search.md). Parent topic: Migrating from Operator to Helm deployments","title":"Migrate the Core profile"},{"location":"containerization/helm/helm_operator_core_migration/#migrate-the-core-profile","text":"This section shows the steps to migrate your Core profile. You can create a backup of the profile and restore it later in the Helm deployment. Follow this guidance to create a backup of the Core profile from your Operator deployment, and restore the profile to a Helm-based deployment. Back up from an Operator-based deployment Ensure that only one Core pod is running. Check how many pods are running with the following command: kubectl -n <namespace> get pods If more than one pod is running, scale down the Core pods so only one (1) pod is running. On the Operator deployment, adjust the dxctl property file: dx.maxreplicas:1 dx.minreplicas:1 then apply the changes in the updated property file using the dxctl tool: ./dxctl -\u2013update -p deployment.properties Once the changes are applied, any replicas will be terminated. You may check the progress by running the kubectl command. Connect to the Core pod . The following command opens a shell in the running Core pod: kubectl exec --stdin --tty pod/<pod-name> -n <namespace> -- /bin/bash For example: kubectl exec --stdin --tty pod/dx-deployment-0 -n dxns -- /bin/bash Stop the Core application before a backup from the wp_profile is created. Navigate to the profile bin folder and run the stopServer command: cd /opt/HCL/wp_profile/bin/ ./stopServer.sh WebSphere_Portal -username <username> -password <password> Note: While the server is stopped, the liveness probe returns a failure result to Kubernetes. Once the maximum allowed number of failures is reached, Kubernetes restarts the pod, closing any kubectl exec session and brings the Core pod back online. However, with the default liveness probe settings in full-deployment.properties , this process takes approximately two (2) hours to occur. If you need to adjust your liveness probe settings to allow time to perform the profile backup (for instance, because you have reduced them considerably from the default in your deployment), make the changes in your full-deployment.properties file, and then apply the changes using dxctl as described in Step 1. Compress the whole Core profile folder /opt/HCL/wp_profile by running the following command: cd /opt/HCL tar -cvpzf core_prof_95_CF199.tar.gz --exclude=/core_prof_95_CF199.tar.gz --one-file-system wp_profile Close the shell in the Core pod using the following command: exit Download the backup Core profile from the Core pod to your local system by running the following command: kubectl cp <namespace>/<pod-name>:<source-file> <target-file> For example: kubectl cp dxns/dx-deployment-0:opt/HCL/core_prof_95_CF199.tar.gz /tmp/core_prof_95_CF199.tar.gz (Optional) Make the old environment unavailable. Kubernetes eventually brings the Core pod back online by restarting it (see the note on liveness probes in Step 2.a). If you want to keep the Operator-based deployment unavailable to users after backing up the profile, you can do the following steps: Adjust the dxctl property file : dx.maxreplicas: 0 dx.minreplicas: 0 dx.replicas: 0 Apply it using the dxctl tool : ./dxctl -\u2013update -p deployment.properties The change is applied after a few seconds and all the additional Core pods are terminated. You can use kubectl get pods to check the progress. If the additional Core pods are not terminated after a few minutes, use the following command to force the changes to be applied: kubectl delete statefulset -n <namespace> dx-deployment If you want to enable the Operator-based deployment Core pod again, set the values of the dxctl property file to values greater than zero and apply the changes using the dxctl tool. Restore your back up to the Helm-based deployment Important: Ensure to note the requirements and limitations here . For the new Helm deployment, you must use a different Kubernetes namespace from the one used in the Operator-based deployment. Ensure that the Helm-based deployment is in the correct state before restoring a backup. Ensure that you have extracted the Kubernetes DX configuration from the Operator-based deployment to a valid custom-values.yaml file. Enable migration mode for operatorToHelm by adding or updating the following value in custom-values.yaml: migration: operatorToHelm: enabled: true Disable all the applications, except runtimeController and the core : applications: core: true runtimeController: true contentComposer: false designStudio: false digitalAssetManagement: false imageProcessor: false openLdap: false persistence: false remoteSearch: false ringApi: false ambassador: false Start the Helm deployment. If you are running the migration of the Core first, run the following command: helm install -n <namespace> --create-namespace -f <custom-values.yaml> <prefix> <chart> For example: ``` helm install -n dxns-helm --create-namespace -f custom-values.yaml dx-deployment hcl-dx-deployment ``` If DAM migration is done first: ``` helm upgrade -n <namespace> -f <custom-values.yaml> <prefix> <chart> ``` For example: ``` helm upgrade -n dxns-helm -f custom-values.yaml dx-deployment hcl-dx-deployment ``` The following outcomes are expected: - The `core` pod is running and kept alive. - The `core` application is not running. - No default profile is created automatically. The folder `/opt/HCL/wp_profile` is empty. 2. **Upload the backup profile.** Use the following command to transfer the backup profile to the remote Core pod: ``` kubectl cp <source-file> <namespace>/<pod-name>:<target-file> ``` For example: ``` kubectl cp /tmp/core_prof_95_CF199.tar.gz dxns-helm/dx-deployment-core-0:/tmp/core_prof_95_CF199.tar.gz ``` 3. **Connect to the Core pod.** Use the following command to pine a shell in the running Core pod: ``` kubectl exec --stdin --tty pod/<pod-name> -n <namespace> -- /bin/bash ``` For example: ``` kubectl exec --stdin --tty pod/dx-deployment-core-0 -n dxns-helm -- /bin/bash ``` 1. **Extract the profile.** Move the core\\_prof\\_95\\_CF199.tar.gz from the /temp folder to the profile folder /opt/HCL/profiles before extracting it: ``` tar -xf /tmp/core_prof_95_CF199.tar.gz --directory /opt/HCL/profiles mv /opt/HCL/profiles/wp_profile /opt/HCL/profiles/prof_95_CF199 rm /tmp/core_prof_95_CF199.tar.gz ``` 2. **Create a symbolink \\(symlink\\)** by running the following command: ``` rm -r /opt/HCL/wp_profile ln -s /opt/HCL/profiles/prof_95_CF199 /opt/HCL/wp_profile ``` 3. **Close the shell in the Core pod** using the following command: ``` exit ``` 4. **Disable the migration mode and the deployment.** **Note:** If Digital Asset Management was used in the Operator-based deployment, you must follow the [DAM migration instructions](helm_dam_migration.md) before disabling migration mode. 1. **Disable the `migration` mode** by updating the following value in custom-values.yaml ``` migration: operatorToHelm: enabled: false ``` 2. **Enable all relevant applications.** 3. **Upgrade the Helm deployment** using the following command: ``` helm upgrade -n <namespace> --create-namespace -f <custom-values.yaml> <prefix> <chart> ``` For example: ``` helm upgrade -n dxns-helm --create-namespace -f custom-values.yaml dx-deployment hcl-dx-deployment ``` 5. **Reconfigure applications to use relative paths.** Coming from old Operator deployments, it can appear that the applications \\(Digital Asset Management, Content Composer, and Design Studio\\) are still configured to use absolute URLs for their rendering. If you use any of these applications, it is highly recommended that you reconfigure them to use relative paths. CAUTION: Reconfigure relative paths for applications that are active in your deployment. Otherwise, the command will fail. Replace the placeholders for `NAMESPACE`, `YOUR_WAS_ADMIN_USER`, and `YOUR_WAS_ADMIN_PASSWORD` with the corresponding values of your deployment. - For Content Composer: ``` kubectl exec -n <NAMESPACE> dx-deployment-core-0 -- bash -c 'cd /opt/HCL/ConfigEngine/ && ./ConfigEngine.sh action-deploy-headless-content-pages -Dcc.static.ui.url=/dx/ui/content/static -DWasPassword=<YOUR_WAS_ADMIN_USER> -DPortalAdminPwd=<YOUR_WAS_ADMIN_PASSWORD>' ``` - For Digital Asset Management: ``` kubectl exec -n <NAMESPACE> dx-deployment-core-0 -- bash -c 'cd /opt/HCL/ConfigEngine/ && ./ConfigEngine.sh action-deploy-media-library-pages -Ddam.static.ui.url=/dx/ui/dam/static -DWasPassword=<YOUR_WAS_ADMIN_USER> -DPortalAdminPwd=<YOUR_WAS_ADMIN_PASSWORD>' ``` - For Design Studio: ``` kubectl exec -n <NAMESPACE> dx-deployment-core-0 -- bash -c 'cd /opt/HCL/ConfigEngine/ && ./ConfigEngine.sh action-deploy-content-sites-pages -Dcontentsites.ui.url=/dx/ui/site-manager/static -DWasPassword=<YOUR_WAS_ADMIN_USER> -DPortalAdminPwd=<YOUR_WAS_ADMIN_PASSWORD>' ``` 6. **Create the secret with your TLS certificate for the Ambassador Ingress in your Helm-based deployment.** To make your migrated Helm deployment accessible, you need to configure the TLS certificate that is used by the Ambassador Ingress. See [Use certificate](helm_configure_networking.md) for more information. 7. \\(**Optional**\\) If you have changed the WAS/Portal Administrator user, update the corresponding secrets \\(`dx-deployment-was` and `dx-deployment-wps`\\) in the Helm-based deployment. 8. **\\(Optional\\)** Configure Remote Search. Skip this step if you have not used Remote Search in your Operator deployment, or if you have no plans to use Remote Search within your Helm-based deployment. Configure Remote Search and re-index your data again. See instructions on [how to configure Remote Search within a Kubernetes environment](kubernetes_remote_search.md). Parent topic: Migrating from Operator to Helm deployments","title":"Migrate the Core profile"},{"location":"containerization/helm/helm_operator_migration/","text":"Migrating from Operator to Helm deployments This topic provides administrators the guidance to migrate HCL Digital Experience Container Update CF199 and later releases from Operator to Helm deployment.","title":"Migrating from Operator to Helm deployments"},{"location":"containerization/helm/helm_operator_migration/#migrating-from-operator-to-helm-deployments","text":"This topic provides administrators the guidance to migrate HCL Digital Experience Container Update CF199 and later releases from Operator to Helm deployment.","title":"Migrating from Operator to Helm deployments"},{"location":"containerization/helm/helm_overview/","text":"Overview of the Helm architecture This topic provides administrators with a high-level overview and important pre-requisite guidance to prepare your container environments for later deployments of the HCL Digital Experience 9.5 Kubernetes and OpenShift deployment capabilities using Helm. Beginning with HCL Digital Experience 9.5 Container Update CF196, administrators can deploy HCL DX 9.5 CF196 and later images to supported container platforms using Helm Charts. Using a Helm Chart deployment provides administrators a larger degree of transparency in the deployment operations than the operator-based deployment also available using the HCL DX dxctl process . Overview Helm is a software package manager that simplifies deployment of applications and services to Red Hat OpenShift and Kubernetes container platforms. Helm is a tool for managing Kubernetes applications and deployments. It allows for packaging all required resource definitions into a single package, called a Helm Chart. The Helm Charts provide a convenient way to define application deployments with a predefined set of configurable items. Furthermore, Helm Charts are written using declarative definitions, applying yaml structures and go templates. This approach provides administrators with transparency about the operations the Helm Chart is performing during the DX 9.5 container deployment. In addition to foundation packaging and installation capabilities, Helm can also be used to modify and upgrade existing deployments, if the Helm Charts are built to support this. Configuration changes and application upgrades can both be managed using Helm. For more information about Helm, please reference documentation available on Helm topics for Red Hat Red Hat OpenShift and Kubernetes container platforms. Helm Chart contents The HCL Digital Experience 9.5 Deployment Helm Chart (Helm Chart name: hcl-dx-deployment ) follows the standard Helm structures and guidelines. hcl-dx-deployment/ crds/ # Custom Resource definitions used for the Ambassador Ingress templates/ # The directory containing all Helm templates for e.g. Kubernetes resources value-samples/ # Contains sample value files for different types of deployments README.md # README with information on Helm Chart usage and references to further documentation values.yaml # Default chart configuration values values.schema.json # Defines the validation schema for values.yaml Chart.yaml # The Chart yaml file containing chart specific information templates : The templates directory contains all resource definitions, for example, Services and Pods. values.yaml : The values.yaml contains all default values for a deployment. It is possible to customize the deployment overwriting the default values of the values.yaml. values.schema.json : To validate the values entered for a deployment, the values.schema.json provides configuration whenever an install or upgrade is performed with Helm. Helm deployment flow As outlined in the flow chart, when performing an install (or upgrade), the Helm Chart reads the values.yaml (and any overridden values, either provided through Helm CLI parameters or additional values files) and perform a schema validation check. After the schema check is successfully performed, Helm runs the templating engine to create the Kubernetes resource definitions out of the templates inside the Helm Charts. As a last step, Helm accesses the Kubernetes or OpenShift Cluster and create the resulting Kubernetes resources in the desired namespace. Deployment structure Basics per application structure Each deployed application follows a similar deployment structure, using a common set of OpenShift or Kubernetes resources that follow naming conventions. Some of the DX 9.5 applications may have a different setup based on their special requirements, for example, the Digital Asset Management component, and its persistence definitions. Stateful applications - Definition DX 9.5 container applications are managed by a StatefulSet, which controls the creation and life cycle of all pods it is responsible for. These Pods use Persistent Volumes for storing their application data, ConfigMaps to adjust application configuration, and Secrets to obtain access credentials. In front of all Pods is a Service which manages routing the traffic to the Pods. This Service is also called by the Ingress to fulfill incoming requests from outside the Kubernetes or OpenShift cluster. Stateless applications - Services Management Ingress and routing For accessing applications from the outside, we deploy an Ingress in form of an Ambassador. This Ingress routes the incoming requests to all application Services, which then distributes the requests to the corresponding Pods hosting the applications. Ambassador uses Mappings that are created by the DX 9.5 Helm deployment to decide which requests needs to be mapped to which application in the DX 9.5 deployment (back-end). When requests are initiated from outside the Kubernetes or OpenShift cluster, the Ambassador tries to fulfill that request by using the configured Mappings. If it finds a matching endpoint, it forwards the request to the corresponding Service, which then forwards the same requests to a Pod that is ready to fulfill the request. The Ambassador performs SSL termination and must be provided with a TLS secret inside Kubernetes that contains the SSL certificate used. DX 9.5 Core Interactions with Kubernetes This section provides more detailed information about how the HCL Digital Experience 9.5 Core container interacts with Kubernetes. Understanding this information may assist in interpreting observed behavior or in troubleshooting your HCL DX 9.5 Container deployments in Helm. Deploying DX 9.5 applications to container platforms using Helm This topic provides a list of all DX applications and resource definitions that configure the application runtime and are deployed to containers using Helm on OpenShift or Kubernetes platforms. As outlined in the overview, applications can also include ConfigMaps, Secrets, and Ingress. PersistentVolumes and related operations considerations This topic provides details covering the PersistentVolumes (PVs) and related operations considerations in storing data for DX 9.5 stateful applications. Configuring DX 9.5 deployments to container platforms using Helm This topic covers details the configuration structure in the HCL Digital Experience 9.5 OpenShift and Kubernetes deployment with Helm. Scaling DX 9.5 container deployments using Helm This topic provides information to apply container scaling capabilities, and how scaling resources are handled within the HCL DX 9.5 deployment using Helm. Refer to HorizontalPodAutoscaler details in Kubernetes and Red Hat OpenShift documentation for more information on these services. Digital Asset Management persistence architecture This topic describes the components of the Digital Asset Management persistence. The updated DAM persistence feature is available from HCL Digital Experience 9.5 Container Update CF198 and later. Parent topic: Helm-based deployment","title":"Overview of the Helm architecture"},{"location":"containerization/helm/helm_overview/#overview-of-the-helm-architecture","text":"This topic provides administrators with a high-level overview and important pre-requisite guidance to prepare your container environments for later deployments of the HCL Digital Experience 9.5 Kubernetes and OpenShift deployment capabilities using Helm. Beginning with HCL Digital Experience 9.5 Container Update CF196, administrators can deploy HCL DX 9.5 CF196 and later images to supported container platforms using Helm Charts. Using a Helm Chart deployment provides administrators a larger degree of transparency in the deployment operations than the operator-based deployment also available using the HCL DX dxctl process .","title":"Overview of the Helm architecture"},{"location":"containerization/helm/helm_overview/#overview","text":"Helm is a software package manager that simplifies deployment of applications and services to Red Hat OpenShift and Kubernetes container platforms. Helm is a tool for managing Kubernetes applications and deployments. It allows for packaging all required resource definitions into a single package, called a Helm Chart. The Helm Charts provide a convenient way to define application deployments with a predefined set of configurable items. Furthermore, Helm Charts are written using declarative definitions, applying yaml structures and go templates. This approach provides administrators with transparency about the operations the Helm Chart is performing during the DX 9.5 container deployment. In addition to foundation packaging and installation capabilities, Helm can also be used to modify and upgrade existing deployments, if the Helm Charts are built to support this. Configuration changes and application upgrades can both be managed using Helm. For more information about Helm, please reference documentation available on Helm topics for Red Hat Red Hat OpenShift and Kubernetes container platforms.","title":"Overview"},{"location":"containerization/helm/helm_overview/#helm-chart-contents","text":"The HCL Digital Experience 9.5 Deployment Helm Chart (Helm Chart name: hcl-dx-deployment ) follows the standard Helm structures and guidelines. hcl-dx-deployment/ crds/ # Custom Resource definitions used for the Ambassador Ingress templates/ # The directory containing all Helm templates for e.g. Kubernetes resources value-samples/ # Contains sample value files for different types of deployments README.md # README with information on Helm Chart usage and references to further documentation values.yaml # Default chart configuration values values.schema.json # Defines the validation schema for values.yaml Chart.yaml # The Chart yaml file containing chart specific information templates : The templates directory contains all resource definitions, for example, Services and Pods. values.yaml : The values.yaml contains all default values for a deployment. It is possible to customize the deployment overwriting the default values of the values.yaml. values.schema.json : To validate the values entered for a deployment, the values.schema.json provides configuration whenever an install or upgrade is performed with Helm.","title":"Helm Chart contents"},{"location":"containerization/helm/helm_overview/#helm-deployment-flow","text":"As outlined in the flow chart, when performing an install (or upgrade), the Helm Chart reads the values.yaml (and any overridden values, either provided through Helm CLI parameters or additional values files) and perform a schema validation check. After the schema check is successfully performed, Helm runs the templating engine to create the Kubernetes resource definitions out of the templates inside the Helm Charts. As a last step, Helm accesses the Kubernetes or OpenShift Cluster and create the resulting Kubernetes resources in the desired namespace.","title":"Helm deployment flow"},{"location":"containerization/helm/helm_overview/#deployment-structure","text":"Basics per application structure Each deployed application follows a similar deployment structure, using a common set of OpenShift or Kubernetes resources that follow naming conventions. Some of the DX 9.5 applications may have a different setup based on their special requirements, for example, the Digital Asset Management component, and its persistence definitions. Stateful applications - Definition DX 9.5 container applications are managed by a StatefulSet, which controls the creation and life cycle of all pods it is responsible for. These Pods use Persistent Volumes for storing their application data, ConfigMaps to adjust application configuration, and Secrets to obtain access credentials. In front of all Pods is a Service which manages routing the traffic to the Pods. This Service is also called by the Ingress to fulfill incoming requests from outside the Kubernetes or OpenShift cluster. Stateless applications - Services Management Ingress and routing For accessing applications from the outside, we deploy an Ingress in form of an Ambassador. This Ingress routes the incoming requests to all application Services, which then distributes the requests to the corresponding Pods hosting the applications. Ambassador uses Mappings that are created by the DX 9.5 Helm deployment to decide which requests needs to be mapped to which application in the DX 9.5 deployment (back-end). When requests are initiated from outside the Kubernetes or OpenShift cluster, the Ambassador tries to fulfill that request by using the configured Mappings. If it finds a matching endpoint, it forwards the request to the corresponding Service, which then forwards the same requests to a Pod that is ready to fulfill the request. The Ambassador performs SSL termination and must be provided with a TLS secret inside Kubernetes that contains the SSL certificate used. DX 9.5 Core Interactions with Kubernetes This section provides more detailed information about how the HCL Digital Experience 9.5 Core container interacts with Kubernetes. Understanding this information may assist in interpreting observed behavior or in troubleshooting your HCL DX 9.5 Container deployments in Helm. Deploying DX 9.5 applications to container platforms using Helm This topic provides a list of all DX applications and resource definitions that configure the application runtime and are deployed to containers using Helm on OpenShift or Kubernetes platforms. As outlined in the overview, applications can also include ConfigMaps, Secrets, and Ingress. PersistentVolumes and related operations considerations This topic provides details covering the PersistentVolumes (PVs) and related operations considerations in storing data for DX 9.5 stateful applications. Configuring DX 9.5 deployments to container platforms using Helm This topic covers details the configuration structure in the HCL Digital Experience 9.5 OpenShift and Kubernetes deployment with Helm. Scaling DX 9.5 container deployments using Helm This topic provides information to apply container scaling capabilities, and how scaling resources are handled within the HCL DX 9.5 deployment using Helm. Refer to HorizontalPodAutoscaler details in Kubernetes and Red Hat OpenShift documentation for more information on these services. Digital Asset Management persistence architecture This topic describes the components of the Digital Asset Management persistence. The updated DAM persistence feature is available from HCL Digital Experience 9.5 Container Update CF198 and later. Parent topic: Helm-based deployment","title":"Deployment structure"},{"location":"containerization/helm/helm_persistent_volume_claims/","text":"Configure PersistentVolumeClaims (PVCs) To run HCL Digital Experience 9.5 Container deployments in your Kubernetes or OpenShift cluster, you need to set up PersistentVolumes (PVs) on your cluster and configure the Helm Chart to create the appropriate PersistentVolumeClaims (PVCs). Before you proceed, review the Persistent Volumes and related operations considerations topic in the DX Help Center. Note: The provisioning of PersistentVolumes (PVs) may differ based on your cluster configuration and your cloud provider. Please reference the documentation of your cloud provider for additional information. Persistent Volume Types Important note: Ensure that your PersistentVolumes (PVs) are created with the Reclaim Policy set to RETAIN. This allows for the reuse of PVs after a PersistentVolumeClaim (PVC) is deleted. This is important to keep data persisted, for example, between deployments or tests. Refrain from using the Reclaim Policy DELETE unless you have the experience in managing these operations successfully, to avoid unpredictable results. This is not recommended in production use, as deleting PVCs causes the Kubernetes or OpenShift cluster to delete the bound PV as well, thus, deleting all the data on it. ReadWriteOnce (RWO) ReadWriteOnce PVs allow only one pod per volume to perform reading and writing transactions. This means that the data on that PV cannot be shared with other pods and is linked to one pod at a time. In the HCL Digital Experience 9.5 Kubernetes or OpenShift deployment using Helm, the only DX applications leveraging RWO PVs are Core and Persistence. Information regarding how to calculate the number of required volumes for the DX Core and Persistence applications is presented in the Persistent Volumes and related operations considerations topic in the DX Help Center. Since Core requires RWO PVs per pod, it may be necessary to have auto-provisioning of such volumes configured in your cluster if you don't know the final maximum number of possible Core pods running at the same time. Each Core pod requires 2 RWO PVs. Since the number of pods for Persistence is limited by design, you need 2 RWO PVs for Persistence. ReadWriteMany (RWX) ReadWriteMany PVs support read and write operations by multiple pods. This means the data on that PV can be shared with other pods and can be linked to multiple pods at a time. In the HCL Digital Experience 9.5 Kubernetes and OpenShift deployment using Helm the only DX applications leveraging RWX PVs are Core and Digital Asset Management. Since the PV can be shared between all Core pods, you need one (1) RWX PV for Core, regardless of the pod count. Since the PV can be shared between all Digital Asset Management pods, you need one (1) RWX PV for Digital Asset Management, regardless of the pod count. Configuration parameters To access the PersistentVolumes (PVs) on your cluster, the HCL Digital Experience 9.5 Kubernetes or OpenShift deployment using Helm creates PersistentVolumeClaims (PVCs) that binds the PVs to the corresponding pods. Each PVC that applications require allows you to configure the following parameters, as shown below. For a PVC of the Core application: # Persistent Volume Setup volumes: # Persistent Volumes for Core core: # Shared profile PVC shared by all Core pods profile: storageClassName: \"manual\" requests: storage: \"10Gi\" # Optional volume name to specifically map to volumeName: Important note: Make sure to properly define the PVC configuration in your custom-values.yaml file before running the deployment. This avoids issues when trying to get your deployment up and running. *StorageClassName * Depending on your Cluster configuration, you may have configured a specific StorageClass that should be used for your PVs and the PVCs of HCL Digital Experience. This property allows you to enter the name of the StorageClass you want the deployment to use. PVCs then only accepts PVs that match the StorageClassName you have defined in the configuration. If there are no PVs that match, the pods remain pending and do not start until a fitting PV is provided by the cluster. If you enter an empty StorageClassName , Kubernetes falls back to the default StorageClass configured in your Cluster. Refer to your cloud provider for additional information about your default StorageClass, since this depends on your Kubernetes or OpenShift environment. Reference the original values.yaml file you have extracted as outlined in the Prepare configuration topic for all configurable PVCs. Requests Storage Storage allows you to define the amount of space that is required by the PVC. Once defined, it only accepts PVs that have the same or more storage capacity as requested. If there are no PVs matching the definitions, the pods remain pending and do not start until a properly-sized PV is provided by the cluster. VolumeName If you want your deployment to pick up a specific PV that you have created, use of the VolumeName can define that instruction. Ensure that the PV you created has a unique name. Then, add that name as a configuration parameter for the PVC. The PVCs only matches with a PV of that name, matching the other requirements-like type ( RWO/RWX , as defined by the deployment itself), storage capacity, and StorageClassName . This allows you to properly prepare your PVs beforehand and ensure that the applications store their data where you want them to. Sample PVC configurations The following are some examples for configuration of the PersistentVolumeClaims (PVCs) using your custom-values.yaml: Fallback to default StorageClass for all applications Leaving an empty StorageClassName causes Kubernetes or OpenShift to fall back to the StorageClass that has been configured as the default one in your cluster: # Persistent Volume Setup volumes: # Persistent Volumes for Core core: # Shared profile PVC shared by all Core pods profile: storageClassName: \"\" # Transaction Log PVC, one per Core pod tranlog: storageClassName: \"\" # Application Log PVC, one per Core pod log: storageClassName: \"\" # Persistent Volumes for Digital Asset Management digitalAssetManagement: # Binary storage PVC, shared by all Digital Asset Management Pods binaries: storageClassName: \"\" # Persistent Volumes for Persistence persistence: # Database PVC, one per Persistence pod database: storageClassName: \"\" # Persistent Volumes for Open LDAP openLdap: # slapd directory PVC, one per Open LDAP pod slapd: storageClassName: \"\" # certificate directory, on per Open LDAP pod certificate: storageClassName: \"\" # ldap directory PVC, one per Open LDAP pod ldap: storageClassName: \"\" # Persistent Volumes for Remote Search remoteSearch: # Remote Search profile PVC, one per Remote Search pod prsprofile: storageClassName: \"\" Specific StorageClasses for all applications Setting the StorageClassName to mycloudstorage causes Kubernetes or OpenShift to create PVCs that only accepts PVs with the StorageClass mycloudstorage : # Persistent Volume Setup volumes: # Persistent Volumes for Core core: # Shared profile PVC shared by all Core pods profile: storageClassName: \"mycloudstorage\" # Transaction Log PVC, one per Core pod tranlog: storageClassName: \"mycloudstorage\" # Application Log PVC, one per Core pod log: storageClassName: \"mycloudstorage\" # Persistent Volumes for Digital Asset Management digitalAssetManagement: # Binary storage PVC, shared by all Digital Asset Management Pods binaries: storageClassName: \"mycloudstorage\" # Persistent Volumes for Persistence persistence: # Database PVC, one per Persistence pod database: storageClassName: \"mycloudstorage\" # Persistent Volumes for Open LDAP openLdap: # slapd directory PVC, one per Open LDAP pod slapd: storageClassName: \"mycloudstorage\" # certificate directory, on per Open LDAP pod certificate: storageClassName: \"mycloudstorage\" # ldap directory PVC, one per Open LDAP pod ldap: storageClassName: \"mycloudstorage\" # Persistent Volumes for Remote Search remoteSearch: # Remote Search profile PVC, one per Remote Search pod prsprofile: storageClassName: \"mycloudstorage\" Specific volume names Specifying a name ensures that Kubernetes or OpenShift only assigns PVs with the matching name to the PVCs created for the applications: # Persistent Volume Setup volumes: # Persistent Volumes for Core core: # Shared profile PVC shared by all Core pods profile: storageClassName: \"mycloudstorage\" # Optional volume name to specifically map to volumeName: \"core-profile\" # Persistent Volumes for Digital Asset Management digitalAssetManagement: # Binary storage PVC, shared by all Digital Asset Management Pods binaries: storageClassName: \"mycloudstorage\" # Optional volume name to specifically map to volumeName: \"dam-binaries\" Adjusted volume size for Core PVCs You may override the default sizes for PVCs by adjusting the storage requests: # Persistent Volume Setup volumes: # Persistent Volumes for Core core: # Shared profile PVC shared by all Core pods profile: storageClassName: \"mycloudstorage\" requests: storage: \"150Gi\" # Transaction Log PVC, one per Core pod tranlog: storageClassName: \"mycloudstorage\" requests: storage: \"1Gi\" # Application Log PVC, one per Core pod log: storageClassName: \"mycloudstorage\" requests: storage: \"1Gi\" Sample Persistent Volume definitions Sample StorageClass It is recommended to have a separate StorageClass for HCL Digital Experience 9.5 deployments in order to prevent other deployed applications in the same Kubernetes or OpenShift cluster to interfere with Persistent Volumes (PVs) that should only be used by HCL Digital Experience. The following example shows a StorageClass with the name dx-deploy-stg that can be created in your cluster for that purpose: kind: StorageClass apiVersion: storage.k8s.io/v1 metadata: name: dx-deploy-stg provisioner: kubernetes.io/no-provisioner reclaimPolicy: Retain volumeBindingMode: WaitForFirstConsumer Applying this yaml on your Kubernetes or OpenShift cluster creates the StorageClass as a cluster-wide resource. Sample Persistent Volume To leverage the StorageClass you created, you can use the following Persistent Volume example, which connects to an NFS Server of your choice to provide a PV: kind: PersistentVolume apiVersion: v1 metadata: name: wp-profile-volume spec: capacity: storage: 100Gi nfs: server: your_nfs_server.com path: /exports/volume_name accessModes: - ReadWriteMany persistentVolumeReclaimPolicy: Retain storageClassName: dx-deploy-stg mountOptions: - hard - nfsvers=4.1 - rsize=8388608 - wsize=8388608 - timeo=600 - retrans=2 - noresvport volumeMode: Filesystem Refer to Networking configuration for the next steps.","title":"Configure PersistentVolumeClaims \\(PVCs\\)"},{"location":"containerization/helm/helm_persistent_volume_claims/#configure-persistentvolumeclaims-pvcs","text":"To run HCL Digital Experience 9.5 Container deployments in your Kubernetes or OpenShift cluster, you need to set up PersistentVolumes (PVs) on your cluster and configure the Helm Chart to create the appropriate PersistentVolumeClaims (PVCs). Before you proceed, review the Persistent Volumes and related operations considerations topic in the DX Help Center. Note: The provisioning of PersistentVolumes (PVs) may differ based on your cluster configuration and your cloud provider. Please reference the documentation of your cloud provider for additional information.","title":"Configure PersistentVolumeClaims (PVCs)"},{"location":"containerization/helm/helm_persistent_volume_claims/#persistent-volume-types","text":"Important note: Ensure that your PersistentVolumes (PVs) are created with the Reclaim Policy set to RETAIN. This allows for the reuse of PVs after a PersistentVolumeClaim (PVC) is deleted. This is important to keep data persisted, for example, between deployments or tests. Refrain from using the Reclaim Policy DELETE unless you have the experience in managing these operations successfully, to avoid unpredictable results. This is not recommended in production use, as deleting PVCs causes the Kubernetes or OpenShift cluster to delete the bound PV as well, thus, deleting all the data on it. ReadWriteOnce (RWO) ReadWriteOnce PVs allow only one pod per volume to perform reading and writing transactions. This means that the data on that PV cannot be shared with other pods and is linked to one pod at a time. In the HCL Digital Experience 9.5 Kubernetes or OpenShift deployment using Helm, the only DX applications leveraging RWO PVs are Core and Persistence. Information regarding how to calculate the number of required volumes for the DX Core and Persistence applications is presented in the Persistent Volumes and related operations considerations topic in the DX Help Center. Since Core requires RWO PVs per pod, it may be necessary to have auto-provisioning of such volumes configured in your cluster if you don't know the final maximum number of possible Core pods running at the same time. Each Core pod requires 2 RWO PVs. Since the number of pods for Persistence is limited by design, you need 2 RWO PVs for Persistence. ReadWriteMany (RWX) ReadWriteMany PVs support read and write operations by multiple pods. This means the data on that PV can be shared with other pods and can be linked to multiple pods at a time. In the HCL Digital Experience 9.5 Kubernetes and OpenShift deployment using Helm the only DX applications leveraging RWX PVs are Core and Digital Asset Management. Since the PV can be shared between all Core pods, you need one (1) RWX PV for Core, regardless of the pod count. Since the PV can be shared between all Digital Asset Management pods, you need one (1) RWX PV for Digital Asset Management, regardless of the pod count.","title":"Persistent Volume Types"},{"location":"containerization/helm/helm_persistent_volume_claims/#configuration-parameters","text":"To access the PersistentVolumes (PVs) on your cluster, the HCL Digital Experience 9.5 Kubernetes or OpenShift deployment using Helm creates PersistentVolumeClaims (PVCs) that binds the PVs to the corresponding pods. Each PVC that applications require allows you to configure the following parameters, as shown below. For a PVC of the Core application: # Persistent Volume Setup volumes: # Persistent Volumes for Core core: # Shared profile PVC shared by all Core pods profile: storageClassName: \"manual\" requests: storage: \"10Gi\" # Optional volume name to specifically map to volumeName: Important note: Make sure to properly define the PVC configuration in your custom-values.yaml file before running the deployment. This avoids issues when trying to get your deployment up and running. *StorageClassName * Depending on your Cluster configuration, you may have configured a specific StorageClass that should be used for your PVs and the PVCs of HCL Digital Experience. This property allows you to enter the name of the StorageClass you want the deployment to use. PVCs then only accepts PVs that match the StorageClassName you have defined in the configuration. If there are no PVs that match, the pods remain pending and do not start until a fitting PV is provided by the cluster. If you enter an empty StorageClassName , Kubernetes falls back to the default StorageClass configured in your Cluster. Refer to your cloud provider for additional information about your default StorageClass, since this depends on your Kubernetes or OpenShift environment. Reference the original values.yaml file you have extracted as outlined in the Prepare configuration topic for all configurable PVCs. Requests Storage Storage allows you to define the amount of space that is required by the PVC. Once defined, it only accepts PVs that have the same or more storage capacity as requested. If there are no PVs matching the definitions, the pods remain pending and do not start until a properly-sized PV is provided by the cluster. VolumeName If you want your deployment to pick up a specific PV that you have created, use of the VolumeName can define that instruction. Ensure that the PV you created has a unique name. Then, add that name as a configuration parameter for the PVC. The PVCs only matches with a PV of that name, matching the other requirements-like type ( RWO/RWX , as defined by the deployment itself), storage capacity, and StorageClassName . This allows you to properly prepare your PVs beforehand and ensure that the applications store their data where you want them to.","title":"Configuration parameters"},{"location":"containerization/helm/helm_persistent_volume_claims/#sample-pvc-configurations","text":"The following are some examples for configuration of the PersistentVolumeClaims (PVCs) using your custom-values.yaml: Fallback to default StorageClass for all applications Leaving an empty StorageClassName causes Kubernetes or OpenShift to fall back to the StorageClass that has been configured as the default one in your cluster: # Persistent Volume Setup volumes: # Persistent Volumes for Core core: # Shared profile PVC shared by all Core pods profile: storageClassName: \"\" # Transaction Log PVC, one per Core pod tranlog: storageClassName: \"\" # Application Log PVC, one per Core pod log: storageClassName: \"\" # Persistent Volumes for Digital Asset Management digitalAssetManagement: # Binary storage PVC, shared by all Digital Asset Management Pods binaries: storageClassName: \"\" # Persistent Volumes for Persistence persistence: # Database PVC, one per Persistence pod database: storageClassName: \"\" # Persistent Volumes for Open LDAP openLdap: # slapd directory PVC, one per Open LDAP pod slapd: storageClassName: \"\" # certificate directory, on per Open LDAP pod certificate: storageClassName: \"\" # ldap directory PVC, one per Open LDAP pod ldap: storageClassName: \"\" # Persistent Volumes for Remote Search remoteSearch: # Remote Search profile PVC, one per Remote Search pod prsprofile: storageClassName: \"\" Specific StorageClasses for all applications Setting the StorageClassName to mycloudstorage causes Kubernetes or OpenShift to create PVCs that only accepts PVs with the StorageClass mycloudstorage : # Persistent Volume Setup volumes: # Persistent Volumes for Core core: # Shared profile PVC shared by all Core pods profile: storageClassName: \"mycloudstorage\" # Transaction Log PVC, one per Core pod tranlog: storageClassName: \"mycloudstorage\" # Application Log PVC, one per Core pod log: storageClassName: \"mycloudstorage\" # Persistent Volumes for Digital Asset Management digitalAssetManagement: # Binary storage PVC, shared by all Digital Asset Management Pods binaries: storageClassName: \"mycloudstorage\" # Persistent Volumes for Persistence persistence: # Database PVC, one per Persistence pod database: storageClassName: \"mycloudstorage\" # Persistent Volumes for Open LDAP openLdap: # slapd directory PVC, one per Open LDAP pod slapd: storageClassName: \"mycloudstorage\" # certificate directory, on per Open LDAP pod certificate: storageClassName: \"mycloudstorage\" # ldap directory PVC, one per Open LDAP pod ldap: storageClassName: \"mycloudstorage\" # Persistent Volumes for Remote Search remoteSearch: # Remote Search profile PVC, one per Remote Search pod prsprofile: storageClassName: \"mycloudstorage\" Specific volume names Specifying a name ensures that Kubernetes or OpenShift only assigns PVs with the matching name to the PVCs created for the applications: # Persistent Volume Setup volumes: # Persistent Volumes for Core core: # Shared profile PVC shared by all Core pods profile: storageClassName: \"mycloudstorage\" # Optional volume name to specifically map to volumeName: \"core-profile\" # Persistent Volumes for Digital Asset Management digitalAssetManagement: # Binary storage PVC, shared by all Digital Asset Management Pods binaries: storageClassName: \"mycloudstorage\" # Optional volume name to specifically map to volumeName: \"dam-binaries\" Adjusted volume size for Core PVCs You may override the default sizes for PVCs by adjusting the storage requests: # Persistent Volume Setup volumes: # Persistent Volumes for Core core: # Shared profile PVC shared by all Core pods profile: storageClassName: \"mycloudstorage\" requests: storage: \"150Gi\" # Transaction Log PVC, one per Core pod tranlog: storageClassName: \"mycloudstorage\" requests: storage: \"1Gi\" # Application Log PVC, one per Core pod log: storageClassName: \"mycloudstorage\" requests: storage: \"1Gi\"","title":"Sample PVC configurations"},{"location":"containerization/helm/helm_persistent_volume_claims/#sample-persistent-volume-definitions","text":"Sample StorageClass It is recommended to have a separate StorageClass for HCL Digital Experience 9.5 deployments in order to prevent other deployed applications in the same Kubernetes or OpenShift cluster to interfere with Persistent Volumes (PVs) that should only be used by HCL Digital Experience. The following example shows a StorageClass with the name dx-deploy-stg that can be created in your cluster for that purpose: kind: StorageClass apiVersion: storage.k8s.io/v1 metadata: name: dx-deploy-stg provisioner: kubernetes.io/no-provisioner reclaimPolicy: Retain volumeBindingMode: WaitForFirstConsumer Applying this yaml on your Kubernetes or OpenShift cluster creates the StorageClass as a cluster-wide resource. Sample Persistent Volume To leverage the StorageClass you created, you can use the following Persistent Volume example, which connects to an NFS Server of your choice to provide a PV: kind: PersistentVolume apiVersion: v1 metadata: name: wp-profile-volume spec: capacity: storage: 100Gi nfs: server: your_nfs_server.com path: /exports/volume_name accessModes: - ReadWriteMany persistentVolumeReclaimPolicy: Retain storageClassName: dx-deploy-stg mountOptions: - hard - nfsvers=4.1 - rsize=8388608 - wsize=8388608 - timeo=600 - retrans=2 - noresvport volumeMode: Filesystem Refer to Networking configuration for the next steps.","title":"Sample Persistent Volume definitions"},{"location":"containerization/helm/helm_planning_deployment/","text":"Planning your container deployment using Helm Helm is a software package manager that simplifies deployment of applications and services to Red Hat OpenShift and Kubernetes container platforms. Before proceeding with your HCL DX 9.5 deployment using Helm, review the following Help Center topics: Deploying HCL DX CF196 to container platforms using Helm for an understanding of the capabilities, deployment structures, configuration and scaling options available for HCL DX 9.5 CF196 and later deployments. Containerization requirements and limitations for an understanding of the requirements, including capacity planning, and current limitations for an HCL Digital Experience 9.5 Container Update CF196 and later deployment using Helm . Prepare your HCL DX 9.5 target environment. This section outlines mandatory and optional tasks that need to be done before installation of the HCL Digital Experience 9.5 Container Update CF196 to Google Kubernetes Engine using Helm. Support to deploy to Red Hat OpenShift, Amazon Elastic Kubernetes Service (Amazon EKS), and Microsoft Azure Kubernetes Service (AKS) using Helm is added in Container Update CF197. This includes preparing your cluster to have proper access to application container images, creating a custom configuration file that fits your deployment needs and configuring network and application settings to allow your HCL Digital Experience 9.5 CF196 and later deployment to work properly. Mandatory tasks: The following tasks are mandatory for HCL Digital Experience 9.5 Container deployment to operate in your Kubernetes cluster using Helm. Prepare a namespace. Before you can deploy HCL Digital Experience, it is recommended that you create a namespace inside your Kubernetes Cluster. You need to create a namespace in your Kubernetes cluster that contains all the resources related to your HCL DX 9.5 Container deployment. It is recommended that this is created before deployment as you may need to add an ImagePullSecret or configure the TLS certificate for the Ambassador Ingress before deployment. Identify a name for your namespace and create it using the following syntax: On Kubernetes platforms Kubectl ``` Command to create a namespace using kubectl This example creates a namespace called \"my-namespace\" kubectl create ns my-namespace ``` OpenShift For OpenShift, you must create a namespace with specific settings. Use the following namespace definition and save it as namespace.yaml. You must replace my-namespace in the template with the name of the namespace you are using. apiVersion: v1 kind: Namespace metadata: name: my-namespace annotations: openshift.io/sa.scc.mcs: \"s0:c24,c4\" openshift.io/sa.scc.supplemental-groups: \"1001/10000\" openshift.io/sa.scc.uid-range: \"1000/10000\" OpenShift client ``` Command to create namespace from template file oc apply -f namespace.yaml ``` Prepare the Helm deployment configuration file. Create a configuration file that fits the needs of your target HCL DX 9.5 Container deployment. The configuration file is the heart of your deployment using Helm. It defines how HCL Digital Experience 9.5 is deployed to supported platforms, and how it behaves during runtime operations. This section explains how to create your own configuration file and how to leverage the existing values.yaml inside the Helm Chart. It also explains how to optionally overwrite settings in case the default set may not be sufficient. Important: Modification to any files (chart.yaml, templates, crds) in hcl-dx-deployment-vX.X.X_XXXXXXXX-XXXX.tar.gz, except custom-values.yaml or values.yaml, is not supported. The configuration flow Helm provides multiple ways to define values that can be processed to run an installation. Processing involves a three-step approach, that is ordered sequentially within a hierarchy. Helm Chart values.yaml Every Helm Chart contains a values.yaml file. It defines all configurable parameters that a Helm Chart accepts and the default values that are used during an installation. If you do not provide any other configuration during an installation, Helm extracts all deployment information from the values.yaml file inside the Helm Chart. All parameters that were not overwritten using any other configuration methods return to their default values from the values.yaml file inside the Helm Chart. Custom value files Helm provides you with a way to maintain your own custom values files. You can specify a custom values file you want to use when running an installation. This custom values file only needs to contain the parameters that you want to overwrite with your preferred settings. Note: There is no need to have the same complete set of parameters inside your custom values file, as there are available by default in the Helm Chart values.yaml . As outlined previously in this section, everything that is not defined in your custom values file are applied using the defaults from values.yaml inside the Helm Charts. Please be aware that the parameters you can configure using your custom values file need to exactly align with those provided by the Helm Charts own values.yaml. You cannot configure anything that is not exposed in the values.yaml definition. Override parameters It is possible to define values using a --set parameter in the Helm CLI during the installation of a Helm Chart. Since there are many values that can be configured in the HCL Digital Experience deployment, we do not recommend this technique, since it makes installation commands very large and confusing. The default HCL DX 9.5 Container values.yaml file HCL DX 9.5 Helm Chart provides a default values.yaml, which contains all possible configuration parameters. To access this file, you may use the following command when you have the HCL DX 9.5 CF196 or later Helm Chart tar.gz file on hand: ``` Command to extract values.ymal from Helm Chart helm show values hcl-dx-deployment.tar.gz > values.yaml ``` The file contains all configurable parameters and their default values. You may use this file as a blueprint to create your own custom-values.yaml . You may also just rename the extracted values.yaml to custom-values.yaml . Note: Having a complete copy of the default values.yaml is not necessary and may bloat your configuration file with values that are already present in the DX Helm Chart. A custom configuration file Helm allows you to provide a custom configuration file during the installation or upgrade process. That file only overwrites settings that are defined within it. For parts of the configuration that are not defined in your custom configuration file, Helm returns to the default values in the values.yaml file inside the DX Helm Chart. This allows you to create a file that only overwrites settings that are required, keeping the overall size of your configuration file small and the maintainability high. This Help Center documentation refers to the custom configuration file as custom-values.yaml . You may name your custom configuration file as preferred. Load container images. This section presents how to load the DX 9.5 Container Update CF196 or later images into your container image repository, tag them to fit your repository structure, and push them to your repository, so that all Nodes in your Kubernetes or OpenShift cluster can deploy HCL Digital Experience 9.5 Pods. To use HCL Digital Experience 9.5 in your Kubernetes or OpenShift cluster, you have to make the container images available to all nodes of your cluster. Usually this is done by providing them through a container image repository. Depending on your cloud provider, there may be different types of default container image repositories already configured. Refer to the documentation of your cloud provider for setup and use of such platform container image repository. It is assumed that you have a repository configured and running, and is technically reachable from all your Kubernetes or OpenShift cluster nodes. In the following guidance, the docker CLI is used as a command reference. Tools like Podman may also be used, but are not described in this documentation. The procedure for the use of such tools are the same. Extract HCL Digital Experience 9.5 package. The HCL Digital Experience 9.5 Container Update packages are provided in a compressed .zip file, that can easily be unzipped using a utility of your choice. Refer to the latest HCL DX 9.5 Container Update Release CF196 and later file listings in the Docker deployment topic: Note: The following are examples using Container Update CF196 files. Replace those references with the HCL DX 9.5 Container Update CFxxx release files you are deploying. ``` Unzip of HCL Digital Experience 9.5 CFxxx package unzip hcl-dx-kubernetes-v95-CF196.zip ``` The package includes all DX 9.5 container images, and Helm Charts as tar.gz files. The content of the package looks similar to the following structure: ``` hcl-dx-kubernetes-v95-CF196.zip HCL DX notices V9.5 CF196.txt Notices file dx-dx-ambassador-image-154.tar.gz Image for the Ambassador Ingress hcl-dx-cloud-operator-image-v95_CFXXX_XXXXXXXX-XXXX.tar.gz Image for the Core Operator (not needed for Helm deployments) hcl-dx-cloud-scripts-v95_CFXXX_XXXXXXXX-XXXX.zip Cloud deployment scripts incl. dxctl (not needed for Helm deployments) hcl-dx-content-composer-image-vX.X.X_XXXXXXXX-XXXX.tar.gz Image for Content Composer hcl-dx-core-image-v95_CFXXX_XXXXXXXX-XXXX.tar.gz Image for Core hcl-dx-digital-asset-management-operator-image-v95_CFXXX_XXXXXXXX-XXXX.tar.gz Image for the Digital Asset Management Operator (not needed for Helm deployments) hcl-dx-digital-asset-manager-image-vX.X.X_XXXXXXXX-XXXX.tar.gz Image for Digital Asset Management hcl-dx-experience-api-sample-ui-vX.X.X.XXXXXXXX-XXXX.zip Sample UI for Experience API hcl-dx-image-processor-image-vX.X.X_XXXXXXXX-XXXX.tar.gz Image for Image Processor hcl-dx-openldap-image-v1.1.0-master_XXXXXXXX_XXXXXXXXXX.tar.gz Image for OpenLDAP hcl-dx-postgres-image-vX.X.X_XXXXXXXX-XXXX.tar.gz Image for Digital Asset Management Persistence hcl-dx-redis-image-X.X.X.tar.gz Image for Ambassador Ingress Redis hcl-dx-remote-search-image-v95_CFXXX_XXXXXXXX-XXXX.tar.gz Image for Remote Search hcl-dx-ringapi-image-vX.X.X_XXXXXXXX-XXXX.tar.gz Image for Ring API hcl-dx-runtime-controller-image-vX.X.X_XXXXXXXX-XXX.tar.gz Image for Runtime Controller hcl-dx-deployment-vX.X.X_XXXXXXXX-XXX.tar.gz Helm Charts ``` Load images locally. To load the individual image files, you may use the following command: ``` Command to load container image into local repository docker load < image-file-name.tar.gz docker load < hcl-dx-core-image-v95_CFXXX_XXXXXXXX-XXXX.tar.gz ``` If you want to load all DX 9.5 CFxxx image files via one command, you may use the following command: ``` Command to load all images at once Since HCL Digital Experience images are all containing the word \"images\", we can filter for fitting tar.gz files ls -f | grep image | xargs -L 1 docker load -i ``` This loads all images to your local repository, ready for further usage. You may verify if the loading is successful with the following command: ``` List all images docker images Command output (minified, example) REPOSITORY TAG IMAGE ID CREATED SIZE hcl/dx/remote-search v95_CF195_20210514-1708 e4c46618f404 4 weeks ago 2.25GB hcl/dx/cloud-operator v95_CF195_20210515-0201 62cc304706a3 4 weeks ago 220MB hcl/dx/core v95_CF195_20210514-1708 36e30c620cdd 4 weeks ago 6.29GB hcl/dx/openldap v1.1.0-master_20210514_1621013302 a5519e06dd17 4 weeks ago 772MB hcl/dx/image-processor v1.8.0_20210514-1712 d5d99d86f81a 4 weeks ago 507MB hcl/dx/digital-asset-manager v1.8.0_20210514-1711 19c8b76b1cad 4 weeks ago 547MB hcl/dx/digital-asset-management-operator v95_CF195_20210514-1714 bc0f5638817a 4 weeks ago 218MB hcl/dx/content-composer v1.8.0_20210514-1707 62b7b54d3895 4 weeks ago 427MB hcl/dx/postgres v1.8.0_20210514-1708 d94672f395ad 4 weeks ago 498MB hcl/dx/ringapi v1.8.0_20210514-1709 505eebb52ebf 4 weeks ago 397MB ``` Re-tag images. If you are using a Kubernetes cluster that is not configured to operate on your local machine, you may need to push the HCL Digital Experience 9.5 container images to a remote repository. To do so, you need to re-tag the images to point to your remote repository. Important Note: Do not change the version tags of the DX 9.5 images, as they are used for uniquely identifying which versions of DX applications are running in your cluster. You may re-tag any image using the following command: ``` Re-tag an existing loaded image docker tag OLD_IMAGE_PATH:VERSION NEW_IMAGE_TAG:VERSION Example command for DX Core: docker tag hcl/dx/core:v95_CF195_20210514-1708 my/test/repository/hcl/dx/core:v95_CF195_20210514-1708 ``` If you want to prefix all HCL Digital Experience 9.5 container images with your repository structure, you may use the following command: ``` Command to prefix all HCL Digital Experience container images export the prefix for the repository structure, without tailing slash export REMOTE_REPO_PREFIX=\"my/test/repository\" First we list all HCL Digital Experience 9.5 Images, then we remove the first line containing the header Then we execute the docker tag command, prefixing each image with the $REMOTE_REPO_PREFIX docker images hcl/dx/* | tail -n +2 | awk -F ' ' '{system(\"docker tag \" $1 \":\" $2 \" $REMOTE_REPO_PREFIX/\" $1 \":\" $2) }' ``` The output may be verified by using the following command: ``` List all images docker images Command output (minified, example) REPOSITORY TAG IMAGE ID CREATED SIZE hcl/dx/remote-search v95_CF195_20210514-1708 e4c46618f404 4 weeks ago 2.25GB my/test/repository/hcl/dx/remote-search v95_CF195_20210514-1708 e4c46618f404 4 weeks ago 2.25 hcl/dx/cloud-operator v95_CF195_20210515-0201 62cc304706a3 4 weeks ago 220MB my/test/repository/hcl/dx/cloud-operator v95_CF195_20210515-0201 62cc304706a3 4 weeks ago 220MB hcl/dx/core v95_CF195_20210514-1708 36e30c620cdd 4 weeks ago 6.29GB my/test/repository/hcl/dx/core v95_CF195_20210514-1708 6e30c620cdd 4 weeks ago 6.29GB hcl/dx/openldap v1.1.0-master_20210514_1621013302 a5519e06dd17 4 weeks ago 772MB my/test/repository/hcl/dx/openldap v1.1.0-master_20210514_1621013302 a5519e06dd17 4 weeks ago 772MB hcl/dx/image-processor v1.8.0_20210514-1712 d5d99d86f81a 4 weeks ago 507MB my/test/repository/hcl/dx/image-processor v1.8.0_20210514-1712 d5d99d86f81a 4 weeks ago 507MB hcl/dx/digital-asset-manager v1.8.0_20210514-1711 19c8b76b1cad 4 weeks ago 547MB my/test/repository/hcl/dx/digital-asset-manager v1.8.0_20210514-1711 19c8b76b1cad 4 weeks ago 547MB hcl/dx/digital-asset-management-operator v95_CF195_20210514-1714 bc0f5638817a 4 weeks ago 218MB my/test/repository/hcl/dx/digital-asset-management-operator v95_CF195_20210514-1714 bc0f5638817a 4 weeks ago 218MB my/test/repository/hcl/dx/content-composer v1.8.0_20210514-1707 62b7b54d3895 4 weeks ago 427MB hcl/dx/content-composer v1.8.0_20210514-1707 62b7b54d3895 4 weeks ago 427MB hcl/dx/postgres v1.8.0_20210514-1708 d94672f395ad 4 weeks ago 498MB my/test/repository/hcl/dx/postgres v1.8.0_20210514-1708 d94672f395ad 4 weeks ago 498MB hcl/dx/ringapi v1.8.0_20210514-1709 505eebb52ebf 4 weeks ago 397MB my/test/repository/hcl/dx/ringapi v1.8.0_20210514-1709 505eebb52ebf 4 weeks ago 397MB ``` Push to repository. You may use the following command to push the container images to your repository: ``` Push the new tagged images docker push NEW_IMAGE_TAG:VERSION Example command for core: docker push my/test/repository/hcl/dx/core:v95_CF195_20210514-1708 ``` If you want to push all your locally processed images, you may use the following command: ``` Command to push all HCL Digital Experience images to a remote repository export the prefix for the repository structure, without tailing slash export REMOTE_REPO_PREFIX=\"my/test/repository\" Push the images, first we filter for the ones necessary Second we execute a docker push for each image docker images $REMOTE_REPO_PREFIX/hcl/dx/* | awk -F ' ' '{system(\"docker push \" $1 \":\" $2)}' ``` After running this command, Docker goes ahead and pushes the images to your remote repository. After the push, the container images are now ready for use by your Kubernetes or OpenShift cluster. Adjust deployment configuration. After you have successfully prepared all DX 9.5 images, you need to configure the images inside your custom-values.yaml. The following syntax may be used to define the correct image configuration for your environment: Note: If deploying to a Hybrid environment, with DX 9.5 Container Update CF198 or later, the Core needs to be set as false, since Core is already installed to an On-premise Server. ``` Fill in the values fitting to your configuration Ensure to use the correct image version tags images: repository: \"my/test/repository\" # Image tag for each application tags: contentComposer: \"v95_CFXXX_XXXXXXXX-XXXX\" core: \"v95_CFXXX_XXXXXXXX-XXXX\" designStudio: \"vX.X.X_XXXXXXXX-XXXX\" digitalAssetManagement: \"vX.X.X_XXXXXXXX-XXXX\" imageProcessor: \"vX.X.X_XXXXXXXX-XXXX\" openLdap: \"vX.X.X_XXXXXXXX-XXXX\" persistence: \"vX.X.X_XXXXXXXX-XXXX\" remoteSearch: \"v95_CFXXX_XXXXXXXX-XXXX\" ringApi: \"vX.X.X_XXXXXXXX-XXXX\" ambassadorIngress: \"vX.X.X_XXXXXXXX-XXXX\" ambassadorRedis: \"vX.X.X_XXXXXXXX-XXXX\" runtimeController: \"vX.X.X_XXXXXXXX-XXXX\" # Image name for each application names: contentComposer: \"hcl/dx/content-composer\" core: \"hcl/dx/core\" designStudio: \"hcl/dx/design-studio\" digitalAssetManagement: \"hcl/dx/digital-asset-manager\" imageProcessor: \"hcl/dx/image-processor\" openLdap: \"hcl/dx/openldap\" persistence: \"hcl/dx/postgres\" remoteSearch: \"hcl/dx/remote-search\" ringApi: \"hcl/dx/ringapi\" ambassadorIngress: \"hcl/dx/ambassador\" ambassadorRedis: \"hcl/dx/redis\" runtimeController: \"hcl/dx/runtime-controller\" ``` Additional tasks: If your remote repository requires access credentials, it is necessary to configure an ImagePullSecret to allow your cluster nodes to have proper access to the HCL DX 9.5 container images. Please refer to Configure Networking topic for instructions on how to configure this. Refer to PersistentVolumeClaims (PVCs) for the next steps.","title":"Planning your container deployment using Helm"},{"location":"containerization/helm/helm_planning_deployment/#planning-your-container-deployment-using-helm","text":"Helm is a software package manager that simplifies deployment of applications and services to Red Hat OpenShift and Kubernetes container platforms. Before proceeding with your HCL DX 9.5 deployment using Helm, review the following Help Center topics: Deploying HCL DX CF196 to container platforms using Helm for an understanding of the capabilities, deployment structures, configuration and scaling options available for HCL DX 9.5 CF196 and later deployments. Containerization requirements and limitations for an understanding of the requirements, including capacity planning, and current limitations for an HCL Digital Experience 9.5 Container Update CF196 and later deployment using Helm . Prepare your HCL DX 9.5 target environment. This section outlines mandatory and optional tasks that need to be done before installation of the HCL Digital Experience 9.5 Container Update CF196 to Google Kubernetes Engine using Helm. Support to deploy to Red Hat OpenShift, Amazon Elastic Kubernetes Service (Amazon EKS), and Microsoft Azure Kubernetes Service (AKS) using Helm is added in Container Update CF197. This includes preparing your cluster to have proper access to application container images, creating a custom configuration file that fits your deployment needs and configuring network and application settings to allow your HCL Digital Experience 9.5 CF196 and later deployment to work properly. Mandatory tasks: The following tasks are mandatory for HCL Digital Experience 9.5 Container deployment to operate in your Kubernetes cluster using Helm. Prepare a namespace. Before you can deploy HCL Digital Experience, it is recommended that you create a namespace inside your Kubernetes Cluster. You need to create a namespace in your Kubernetes cluster that contains all the resources related to your HCL DX 9.5 Container deployment. It is recommended that this is created before deployment as you may need to add an ImagePullSecret or configure the TLS certificate for the Ambassador Ingress before deployment. Identify a name for your namespace and create it using the following syntax: On Kubernetes platforms Kubectl ```","title":"Planning your container deployment using Helm"},{"location":"containerization/helm/helm_planning_deployment/#command-to-create-a-namespace-using-kubectl","text":"","title":"Command to create a namespace using kubectl"},{"location":"containerization/helm/helm_planning_deployment/#this-example-creates-a-namespace-called-my-namespace","text":"kubectl create ns my-namespace ``` OpenShift For OpenShift, you must create a namespace with specific settings. Use the following namespace definition and save it as namespace.yaml. You must replace my-namespace in the template with the name of the namespace you are using. apiVersion: v1 kind: Namespace metadata: name: my-namespace annotations: openshift.io/sa.scc.mcs: \"s0:c24,c4\" openshift.io/sa.scc.supplemental-groups: \"1001/10000\" openshift.io/sa.scc.uid-range: \"1000/10000\" OpenShift client ```","title":"This example creates a namespace called \"my-namespace\""},{"location":"containerization/helm/helm_planning_deployment/#command-to-create-namespace-from-template-file","text":"oc apply -f namespace.yaml ``` Prepare the Helm deployment configuration file. Create a configuration file that fits the needs of your target HCL DX 9.5 Container deployment. The configuration file is the heart of your deployment using Helm. It defines how HCL Digital Experience 9.5 is deployed to supported platforms, and how it behaves during runtime operations. This section explains how to create your own configuration file and how to leverage the existing values.yaml inside the Helm Chart. It also explains how to optionally overwrite settings in case the default set may not be sufficient. Important: Modification to any files (chart.yaml, templates, crds) in hcl-dx-deployment-vX.X.X_XXXXXXXX-XXXX.tar.gz, except custom-values.yaml or values.yaml, is not supported. The configuration flow Helm provides multiple ways to define values that can be processed to run an installation. Processing involves a three-step approach, that is ordered sequentially within a hierarchy. Helm Chart values.yaml Every Helm Chart contains a values.yaml file. It defines all configurable parameters that a Helm Chart accepts and the default values that are used during an installation. If you do not provide any other configuration during an installation, Helm extracts all deployment information from the values.yaml file inside the Helm Chart. All parameters that were not overwritten using any other configuration methods return to their default values from the values.yaml file inside the Helm Chart. Custom value files Helm provides you with a way to maintain your own custom values files. You can specify a custom values file you want to use when running an installation. This custom values file only needs to contain the parameters that you want to overwrite with your preferred settings. Note: There is no need to have the same complete set of parameters inside your custom values file, as there are available by default in the Helm Chart values.yaml . As outlined previously in this section, everything that is not defined in your custom values file are applied using the defaults from values.yaml inside the Helm Charts. Please be aware that the parameters you can configure using your custom values file need to exactly align with those provided by the Helm Charts own values.yaml. You cannot configure anything that is not exposed in the values.yaml definition. Override parameters It is possible to define values using a --set parameter in the Helm CLI during the installation of a Helm Chart. Since there are many values that can be configured in the HCL Digital Experience deployment, we do not recommend this technique, since it makes installation commands very large and confusing. The default HCL DX 9.5 Container values.yaml file HCL DX 9.5 Helm Chart provides a default values.yaml, which contains all possible configuration parameters. To access this file, you may use the following command when you have the HCL DX 9.5 CF196 or later Helm Chart tar.gz file on hand: ```","title":"Command to create namespace from template file"},{"location":"containerization/helm/helm_planning_deployment/#command-to-extract-valuesymal-from-helm-chart","text":"helm show values hcl-dx-deployment.tar.gz > values.yaml ``` The file contains all configurable parameters and their default values. You may use this file as a blueprint to create your own custom-values.yaml . You may also just rename the extracted values.yaml to custom-values.yaml . Note: Having a complete copy of the default values.yaml is not necessary and may bloat your configuration file with values that are already present in the DX Helm Chart. A custom configuration file Helm allows you to provide a custom configuration file during the installation or upgrade process. That file only overwrites settings that are defined within it. For parts of the configuration that are not defined in your custom configuration file, Helm returns to the default values in the values.yaml file inside the DX Helm Chart. This allows you to create a file that only overwrites settings that are required, keeping the overall size of your configuration file small and the maintainability high. This Help Center documentation refers to the custom configuration file as custom-values.yaml . You may name your custom configuration file as preferred. Load container images. This section presents how to load the DX 9.5 Container Update CF196 or later images into your container image repository, tag them to fit your repository structure, and push them to your repository, so that all Nodes in your Kubernetes or OpenShift cluster can deploy HCL Digital Experience 9.5 Pods. To use HCL Digital Experience 9.5 in your Kubernetes or OpenShift cluster, you have to make the container images available to all nodes of your cluster. Usually this is done by providing them through a container image repository. Depending on your cloud provider, there may be different types of default container image repositories already configured. Refer to the documentation of your cloud provider for setup and use of such platform container image repository. It is assumed that you have a repository configured and running, and is technically reachable from all your Kubernetes or OpenShift cluster nodes. In the following guidance, the docker CLI is used as a command reference. Tools like Podman may also be used, but are not described in this documentation. The procedure for the use of such tools are the same. Extract HCL Digital Experience 9.5 package. The HCL Digital Experience 9.5 Container Update packages are provided in a compressed .zip file, that can easily be unzipped using a utility of your choice. Refer to the latest HCL DX 9.5 Container Update Release CF196 and later file listings in the Docker deployment topic: Note: The following are examples using Container Update CF196 files. Replace those references with the HCL DX 9.5 Container Update CFxxx release files you are deploying. ```","title":"Command to extract values.ymal from Helm Chart"},{"location":"containerization/helm/helm_planning_deployment/#unzip-of-hcl-digital-experience-95-cfxxx-package","text":"unzip hcl-dx-kubernetes-v95-CF196.zip ``` The package includes all DX 9.5 container images, and Helm Charts as tar.gz files. The content of the package looks similar to the following structure: ``` hcl-dx-kubernetes-v95-CF196.zip HCL DX notices V9.5 CF196.txt","title":"Unzip of HCL Digital Experience 9.5 CFxxx package"},{"location":"containerization/helm/helm_planning_deployment/#notices-file","text":"dx-dx-ambassador-image-154.tar.gz","title":"Notices file"},{"location":"containerization/helm/helm_planning_deployment/#image-for-the-ambassador-ingress","text":"hcl-dx-cloud-operator-image-v95_CFXXX_XXXXXXXX-XXXX.tar.gz","title":"Image for the Ambassador Ingress"},{"location":"containerization/helm/helm_planning_deployment/#image-for-the-core-operator-not-needed-for-helm-deployments","text":"hcl-dx-cloud-scripts-v95_CFXXX_XXXXXXXX-XXXX.zip","title":"Image for the Core Operator (not needed for Helm deployments)"},{"location":"containerization/helm/helm_planning_deployment/#cloud-deployment-scripts-incl-dxctl-not-needed-for-helm-deployments","text":"hcl-dx-content-composer-image-vX.X.X_XXXXXXXX-XXXX.tar.gz","title":"Cloud deployment scripts incl. dxctl (not needed for Helm deployments)"},{"location":"containerization/helm/helm_planning_deployment/#image-for-content-composer","text":"hcl-dx-core-image-v95_CFXXX_XXXXXXXX-XXXX.tar.gz","title":"Image for Content Composer"},{"location":"containerization/helm/helm_planning_deployment/#image-for-core","text":"hcl-dx-digital-asset-management-operator-image-v95_CFXXX_XXXXXXXX-XXXX.tar.gz","title":"Image for Core"},{"location":"containerization/helm/helm_planning_deployment/#image-for-the-digital-asset-management-operator-not-needed-for-helm-deployments","text":"hcl-dx-digital-asset-manager-image-vX.X.X_XXXXXXXX-XXXX.tar.gz","title":"Image for the Digital Asset Management Operator (not needed for Helm deployments)"},{"location":"containerization/helm/helm_planning_deployment/#image-for-digital-asset-management","text":"hcl-dx-experience-api-sample-ui-vX.X.X.XXXXXXXX-XXXX.zip","title":"Image for Digital Asset Management"},{"location":"containerization/helm/helm_planning_deployment/#sample-ui-for-experience-api","text":"hcl-dx-image-processor-image-vX.X.X_XXXXXXXX-XXXX.tar.gz","title":"Sample UI for Experience API"},{"location":"containerization/helm/helm_planning_deployment/#image-for-image-processor","text":"hcl-dx-openldap-image-v1.1.0-master_XXXXXXXX_XXXXXXXXXX.tar.gz","title":"Image for Image Processor"},{"location":"containerization/helm/helm_planning_deployment/#image-for-openldap","text":"hcl-dx-postgres-image-vX.X.X_XXXXXXXX-XXXX.tar.gz","title":"Image for OpenLDAP"},{"location":"containerization/helm/helm_planning_deployment/#image-for-digital-asset-management-persistence","text":"hcl-dx-redis-image-X.X.X.tar.gz","title":"Image for Digital Asset Management Persistence"},{"location":"containerization/helm/helm_planning_deployment/#image-for-ambassador-ingress-redis","text":"hcl-dx-remote-search-image-v95_CFXXX_XXXXXXXX-XXXX.tar.gz","title":"Image for Ambassador Ingress Redis"},{"location":"containerization/helm/helm_planning_deployment/#image-for-remote-search","text":"hcl-dx-ringapi-image-vX.X.X_XXXXXXXX-XXXX.tar.gz","title":"Image for Remote Search"},{"location":"containerization/helm/helm_planning_deployment/#image-for-ring-api","text":"hcl-dx-runtime-controller-image-vX.X.X_XXXXXXXX-XXX.tar.gz","title":"Image for Ring API"},{"location":"containerization/helm/helm_planning_deployment/#image-for-runtime-controller","text":"hcl-dx-deployment-vX.X.X_XXXXXXXX-XXX.tar.gz","title":"Image for Runtime Controller"},{"location":"containerization/helm/helm_planning_deployment/#helm-charts","text":"``` Load images locally. To load the individual image files, you may use the following command: ```","title":"Helm Charts"},{"location":"containerization/helm/helm_planning_deployment/#command-to-load-container-image-into-local-repository","text":"","title":"Command to load container image into local repository"},{"location":"containerization/helm/helm_planning_deployment/#docker-load-image-file-nametargz","text":"docker load < hcl-dx-core-image-v95_CFXXX_XXXXXXXX-XXXX.tar.gz ``` If you want to load all DX 9.5 CFxxx image files via one command, you may use the following command: ```","title":"docker load &lt; image-file-name.tar.gz"},{"location":"containerization/helm/helm_planning_deployment/#command-to-load-all-images-at-once","text":"","title":"Command to load all images at once"},{"location":"containerization/helm/helm_planning_deployment/#since-hcl-digital-experience-images-are-all-containing-the-word-images","text":"","title":"Since HCL Digital Experience images are all containing the word \"images\","},{"location":"containerization/helm/helm_planning_deployment/#we-can-filter-for-fitting-targz-files","text":"ls -f | grep image | xargs -L 1 docker load -i ``` This loads all images to your local repository, ready for further usage. You may verify if the loading is successful with the following command: ```","title":"we can filter for fitting tar.gz files"},{"location":"containerization/helm/helm_planning_deployment/#list-all-images","text":"docker images","title":"List all images"},{"location":"containerization/helm/helm_planning_deployment/#command-output-minified-example","text":"REPOSITORY TAG IMAGE ID CREATED SIZE hcl/dx/remote-search v95_CF195_20210514-1708 e4c46618f404 4 weeks ago 2.25GB hcl/dx/cloud-operator v95_CF195_20210515-0201 62cc304706a3 4 weeks ago 220MB hcl/dx/core v95_CF195_20210514-1708 36e30c620cdd 4 weeks ago 6.29GB hcl/dx/openldap v1.1.0-master_20210514_1621013302 a5519e06dd17 4 weeks ago 772MB hcl/dx/image-processor v1.8.0_20210514-1712 d5d99d86f81a 4 weeks ago 507MB hcl/dx/digital-asset-manager v1.8.0_20210514-1711 19c8b76b1cad 4 weeks ago 547MB hcl/dx/digital-asset-management-operator v95_CF195_20210514-1714 bc0f5638817a 4 weeks ago 218MB hcl/dx/content-composer v1.8.0_20210514-1707 62b7b54d3895 4 weeks ago 427MB hcl/dx/postgres v1.8.0_20210514-1708 d94672f395ad 4 weeks ago 498MB hcl/dx/ringapi v1.8.0_20210514-1709 505eebb52ebf 4 weeks ago 397MB ``` Re-tag images. If you are using a Kubernetes cluster that is not configured to operate on your local machine, you may need to push the HCL Digital Experience 9.5 container images to a remote repository. To do so, you need to re-tag the images to point to your remote repository. Important Note: Do not change the version tags of the DX 9.5 images, as they are used for uniquely identifying which versions of DX applications are running in your cluster. You may re-tag any image using the following command: ```","title":"Command output (minified, example)"},{"location":"containerization/helm/helm_planning_deployment/#re-tag-an-existing-loaded-image","text":"","title":"Re-tag an existing loaded image"},{"location":"containerization/helm/helm_planning_deployment/#docker-tag-old_image_pathversion-new_image_tagversion","text":"","title":"docker tag OLD_IMAGE_PATH:VERSION NEW_IMAGE_TAG:VERSION"},{"location":"containerization/helm/helm_planning_deployment/#example-command-for-dx-core","text":"docker tag hcl/dx/core:v95_CF195_20210514-1708 my/test/repository/hcl/dx/core:v95_CF195_20210514-1708 ``` If you want to prefix all HCL Digital Experience 9.5 container images with your repository structure, you may use the following command: ```","title":"Example command for DX Core:"},{"location":"containerization/helm/helm_planning_deployment/#command-to-prefix-all-hcl-digital-experience-container-images","text":"","title":"Command to prefix all HCL Digital Experience container images"},{"location":"containerization/helm/helm_planning_deployment/#export-the-prefix-for-the-repository-structure-without-tailing-slash","text":"export REMOTE_REPO_PREFIX=\"my/test/repository\"","title":"export the prefix for the repository structure, without tailing slash"},{"location":"containerization/helm/helm_planning_deployment/#first-we-list-all-hcl-digital-experience-95-images-then-we-remove-the-first-line-containing-the-header","text":"","title":"First we list all HCL Digital Experience 9.5 Images, then we remove the first line containing the header"},{"location":"containerization/helm/helm_planning_deployment/#then-we-execute-the-docker-tag-command-prefixing-each-image-with-the-remote_repo_prefix","text":"docker images hcl/dx/* | tail -n +2 | awk -F ' ' '{system(\"docker tag \" $1 \":\" $2 \" $REMOTE_REPO_PREFIX/\" $1 \":\" $2) }' ``` The output may be verified by using the following command: ```","title":"Then we execute the docker tag command, prefixing each image with the $REMOTE_REPO_PREFIX"},{"location":"containerization/helm/helm_planning_deployment/#list-all-images_1","text":"docker images","title":"List all images"},{"location":"containerization/helm/helm_planning_deployment/#command-output-minified-example_1","text":"REPOSITORY TAG IMAGE ID CREATED SIZE hcl/dx/remote-search v95_CF195_20210514-1708 e4c46618f404 4 weeks ago 2.25GB my/test/repository/hcl/dx/remote-search v95_CF195_20210514-1708 e4c46618f404 4 weeks ago 2.25 hcl/dx/cloud-operator v95_CF195_20210515-0201 62cc304706a3 4 weeks ago 220MB my/test/repository/hcl/dx/cloud-operator v95_CF195_20210515-0201 62cc304706a3 4 weeks ago 220MB hcl/dx/core v95_CF195_20210514-1708 36e30c620cdd 4 weeks ago 6.29GB my/test/repository/hcl/dx/core v95_CF195_20210514-1708 6e30c620cdd 4 weeks ago 6.29GB hcl/dx/openldap v1.1.0-master_20210514_1621013302 a5519e06dd17 4 weeks ago 772MB my/test/repository/hcl/dx/openldap v1.1.0-master_20210514_1621013302 a5519e06dd17 4 weeks ago 772MB hcl/dx/image-processor v1.8.0_20210514-1712 d5d99d86f81a 4 weeks ago 507MB my/test/repository/hcl/dx/image-processor v1.8.0_20210514-1712 d5d99d86f81a 4 weeks ago 507MB hcl/dx/digital-asset-manager v1.8.0_20210514-1711 19c8b76b1cad 4 weeks ago 547MB my/test/repository/hcl/dx/digital-asset-manager v1.8.0_20210514-1711 19c8b76b1cad 4 weeks ago 547MB hcl/dx/digital-asset-management-operator v95_CF195_20210514-1714 bc0f5638817a 4 weeks ago 218MB my/test/repository/hcl/dx/digital-asset-management-operator v95_CF195_20210514-1714 bc0f5638817a 4 weeks ago 218MB my/test/repository/hcl/dx/content-composer v1.8.0_20210514-1707 62b7b54d3895 4 weeks ago 427MB hcl/dx/content-composer v1.8.0_20210514-1707 62b7b54d3895 4 weeks ago 427MB hcl/dx/postgres v1.8.0_20210514-1708 d94672f395ad 4 weeks ago 498MB my/test/repository/hcl/dx/postgres v1.8.0_20210514-1708 d94672f395ad 4 weeks ago 498MB hcl/dx/ringapi v1.8.0_20210514-1709 505eebb52ebf 4 weeks ago 397MB my/test/repository/hcl/dx/ringapi v1.8.0_20210514-1709 505eebb52ebf 4 weeks ago 397MB ``` Push to repository. You may use the following command to push the container images to your repository: ```","title":"Command output (minified, example)"},{"location":"containerization/helm/helm_planning_deployment/#push-the-new-tagged-images","text":"","title":"Push the new tagged images"},{"location":"containerization/helm/helm_planning_deployment/#docker-push-new_image_tagversion","text":"","title":"docker push NEW_IMAGE_TAG:VERSION"},{"location":"containerization/helm/helm_planning_deployment/#example-command-for-core","text":"docker push my/test/repository/hcl/dx/core:v95_CF195_20210514-1708 ``` If you want to push all your locally processed images, you may use the following command: ```","title":"Example command for core:"},{"location":"containerization/helm/helm_planning_deployment/#command-to-push-all-hcl-digital-experience-images-to-a-remote-repository","text":"","title":"Command to push all HCL Digital Experience images to a remote repository"},{"location":"containerization/helm/helm_planning_deployment/#export-the-prefix-for-the-repository-structure-without-tailing-slash_1","text":"export REMOTE_REPO_PREFIX=\"my/test/repository\"","title":"export the prefix for the repository structure, without tailing slash"},{"location":"containerization/helm/helm_planning_deployment/#push-the-images-first-we-filter-for-the-ones-necessary","text":"","title":"Push the images, first we filter for the ones necessary"},{"location":"containerization/helm/helm_planning_deployment/#second-we-execute-a-docker-push-for-each-image","text":"docker images $REMOTE_REPO_PREFIX/hcl/dx/* | awk -F ' ' '{system(\"docker push \" $1 \":\" $2)}' ``` After running this command, Docker goes ahead and pushes the images to your remote repository. After the push, the container images are now ready for use by your Kubernetes or OpenShift cluster. Adjust deployment configuration. After you have successfully prepared all DX 9.5 images, you need to configure the images inside your custom-values.yaml. The following syntax may be used to define the correct image configuration for your environment: Note: If deploying to a Hybrid environment, with DX 9.5 Container Update CF198 or later, the Core needs to be set as false, since Core is already installed to an On-premise Server. ```","title":"Second we execute a docker push for each image"},{"location":"containerization/helm/helm_planning_deployment/#fill-in-the-values-fitting-to-your-configuration","text":"","title":"Fill in the values fitting to your configuration"},{"location":"containerization/helm/helm_planning_deployment/#ensure-to-use-the-correct-image-version-tags","text":"images: repository: \"my/test/repository\" # Image tag for each application tags: contentComposer: \"v95_CFXXX_XXXXXXXX-XXXX\" core: \"v95_CFXXX_XXXXXXXX-XXXX\" designStudio: \"vX.X.X_XXXXXXXX-XXXX\" digitalAssetManagement: \"vX.X.X_XXXXXXXX-XXXX\" imageProcessor: \"vX.X.X_XXXXXXXX-XXXX\" openLdap: \"vX.X.X_XXXXXXXX-XXXX\" persistence: \"vX.X.X_XXXXXXXX-XXXX\" remoteSearch: \"v95_CFXXX_XXXXXXXX-XXXX\" ringApi: \"vX.X.X_XXXXXXXX-XXXX\" ambassadorIngress: \"vX.X.X_XXXXXXXX-XXXX\" ambassadorRedis: \"vX.X.X_XXXXXXXX-XXXX\" runtimeController: \"vX.X.X_XXXXXXXX-XXXX\" # Image name for each application names: contentComposer: \"hcl/dx/content-composer\" core: \"hcl/dx/core\" designStudio: \"hcl/dx/design-studio\" digitalAssetManagement: \"hcl/dx/digital-asset-manager\" imageProcessor: \"hcl/dx/image-processor\" openLdap: \"hcl/dx/openldap\" persistence: \"hcl/dx/postgres\" remoteSearch: \"hcl/dx/remote-search\" ringApi: \"hcl/dx/ringapi\" ambassadorIngress: \"hcl/dx/ambassador\" ambassadorRedis: \"hcl/dx/redis\" runtimeController: \"hcl/dx/runtime-controller\" ``` Additional tasks: If your remote repository requires access credentials, it is necessary to configure an ImagePullSecret to allow your cluster nodes to have proper access to the HCL DX 9.5 container images. Please refer to Configure Networking topic for instructions on how to configure this. Refer to PersistentVolumeClaims (PVCs) for the next steps.","title":"Ensure to use the correct image version tags"},{"location":"containerization/helm/helm_troubleshooting/","text":"Troubleshooting your Helm deployment This section shows how to find and resolve issues when deploying HCL DX 9.5 CF196 and later releases using Helm. Logs Access to the HCL Digital Experience 9.5 component logs is important for maintaining and troubleshooting both your container platform environments and your custom applications. It is also essential for supplying information that may be requested by HCL Software Support . Most component logs can be accessed directly on the Kubernetes or OpenShift platforms via the kubectl logs or OpenShift log access commands. The DX 9.5 Core component has additional important log files that are stored on persistent volumes, and need to be retrieved in a different manner. Accessing DX 9.5 container logs on Kubernetes or OpenShift All container logs from DX 9.5 pods in a deployment with Helm can be combined into a single output using the commands: kubectl logs -n your-namespace -l release=your-release-name --tail=-1 In the example above, the your-namespace reference is the namespace in which your HCL Digital Experience 9.5 deployment is installed and your-release-name is the Helm release name you used when installing. On UNIX-based operating systems, the output can be directed to a file for convenience by appending > some-file-name to the command. Retrieving additional DX Core logs Useful additional DX Core logs are stored on persistent volumes. To retrieve these, repeat the command below for each DX Core pod: kubectl cp -n your-namespace pod-name:opt/HCL/wp_profile/logs/WebSphere_Portal/ . In the example above the your-namespace reference is the namespace in which your HCL Digital Experience 9.5 deployment is installed and pod-name is the particular DX Core pod from which you wish to retrieve logs. Events Pod events can give useful information for troubleshooting, such as why certain pods are not running. To get the events for a pod, you can use the following command: kubectl describe pod -n your-namespace pod-name In the above example, your-namespace is the namespace in which your HCL Digital Experience deployment is installed and pod-name is the particular pod that you wish to examine. PersistentVolumeClaims (PVCs) One of the more common reasons for a pod not starting that can be identified via the pod events (see above) is that it has unbound persistent volume claims. To understand why the claims have not been fulfilled, it is useful to list both the current persistent volume claims and the current persistent volumes and to compare the two. When comparing, it is useful to check mismatches in storage class, access modes and capacity between available volumes and unfulfilled claims. The commands to list these resources are: kubectl get pvc -n your-namespace kubectl get pv In the above example, your-namespace is the namespace in which your HCL Digital Experience 9.5 deployment is installed. Retrieving the deployment configuration In addition to logs, HCL Support may also request configuration information about your deployment. This is can be obtained using kubectl describe commands for different classes of objects and a selector to get all for your deployment. The most likely object types are given in the examples below: kubectl describe pods -n your-namespace -l release=your-release-name kubectl describe deployments -n your-namespace -l release=your-release-name kubectl describe statefulsets -n your-namespace -l release=your-release-name kubectl describe secrets -n your-namespace -l release=your-release-name kubectl describe services -n your-namespace -l release=your-release-name kubectl describe mappings -n your-namespace -l release=your-release-name kubectl describe configmaps -n your-namespace -l release=your-release-name In the above examples, your-namespace is the namespace in which your HCL Digital Experience deployment is installed and your-release-name is the Helm release name you used when installing. On UNIX-based operating systems, the output can be directed to a file by appending > some-file-name to any command. Configure and access logs in Helm This topic shows you how to configure logging in Helm, as well as how to access Kubernetes container logs. Basic monitoring This topic describes options for monitoring an HCL Digital Experience 9.5 Kubernetes deployments installed using Helm. Monitor the Digital Experience deployment using metrics This topic outlines the use of standards-based metrics to monitor activity and performance of DX container deployments. Parent topic: Operations using Helm","title":"Troubleshooting your Helm deployment"},{"location":"containerization/helm/helm_troubleshooting/#troubleshooting-your-helm-deployment","text":"This section shows how to find and resolve issues when deploying HCL DX 9.5 CF196 and later releases using Helm.","title":"Troubleshooting your Helm deployment"},{"location":"containerization/helm/helm_troubleshooting/#logs","text":"Access to the HCL Digital Experience 9.5 component logs is important for maintaining and troubleshooting both your container platform environments and your custom applications. It is also essential for supplying information that may be requested by HCL Software Support . Most component logs can be accessed directly on the Kubernetes or OpenShift platforms via the kubectl logs or OpenShift log access commands. The DX 9.5 Core component has additional important log files that are stored on persistent volumes, and need to be retrieved in a different manner.","title":"Logs"},{"location":"containerization/helm/helm_troubleshooting/#accessing-dx-95-container-logs-on-kubernetes-or-openshift","text":"All container logs from DX 9.5 pods in a deployment with Helm can be combined into a single output using the commands: kubectl logs -n your-namespace -l release=your-release-name --tail=-1 In the example above, the your-namespace reference is the namespace in which your HCL Digital Experience 9.5 deployment is installed and your-release-name is the Helm release name you used when installing. On UNIX-based operating systems, the output can be directed to a file for convenience by appending > some-file-name to the command.","title":"Accessing DX 9.5 container logs on Kubernetes or OpenShift"},{"location":"containerization/helm/helm_troubleshooting/#retrieving-additional-dx-core-logs","text":"Useful additional DX Core logs are stored on persistent volumes. To retrieve these, repeat the command below for each DX Core pod: kubectl cp -n your-namespace pod-name:opt/HCL/wp_profile/logs/WebSphere_Portal/ . In the example above the your-namespace reference is the namespace in which your HCL Digital Experience 9.5 deployment is installed and pod-name is the particular DX Core pod from which you wish to retrieve logs.","title":"Retrieving additional DX Core logs"},{"location":"containerization/helm/helm_troubleshooting/#events","text":"Pod events can give useful information for troubleshooting, such as why certain pods are not running. To get the events for a pod, you can use the following command: kubectl describe pod -n your-namespace pod-name In the above example, your-namespace is the namespace in which your HCL Digital Experience deployment is installed and pod-name is the particular pod that you wish to examine.","title":"Events"},{"location":"containerization/helm/helm_troubleshooting/#persistentvolumeclaims-pvcs","text":"One of the more common reasons for a pod not starting that can be identified via the pod events (see above) is that it has unbound persistent volume claims. To understand why the claims have not been fulfilled, it is useful to list both the current persistent volume claims and the current persistent volumes and to compare the two. When comparing, it is useful to check mismatches in storage class, access modes and capacity between available volumes and unfulfilled claims. The commands to list these resources are: kubectl get pvc -n your-namespace kubectl get pv In the above example, your-namespace is the namespace in which your HCL Digital Experience 9.5 deployment is installed.","title":"PersistentVolumeClaims (PVCs)"},{"location":"containerization/helm/helm_troubleshooting/#retrieving-the-deployment-configuration","text":"In addition to logs, HCL Support may also request configuration information about your deployment. This is can be obtained using kubectl describe commands for different classes of objects and a selector to get all for your deployment. The most likely object types are given in the examples below: kubectl describe pods -n your-namespace -l release=your-release-name kubectl describe deployments -n your-namespace -l release=your-release-name kubectl describe statefulsets -n your-namespace -l release=your-release-name kubectl describe secrets -n your-namespace -l release=your-release-name kubectl describe services -n your-namespace -l release=your-release-name kubectl describe mappings -n your-namespace -l release=your-release-name kubectl describe configmaps -n your-namespace -l release=your-release-name In the above examples, your-namespace is the namespace in which your HCL Digital Experience deployment is installed and your-release-name is the Helm release name you used when installing. On UNIX-based operating systems, the output can be directed to a file by appending > some-file-name to any command. Configure and access logs in Helm This topic shows you how to configure logging in Helm, as well as how to access Kubernetes container logs. Basic monitoring This topic describes options for monitoring an HCL Digital Experience 9.5 Kubernetes deployments installed using Helm. Monitor the Digital Experience deployment using metrics This topic outlines the use of standards-based metrics to monitor activity and performance of DX container deployments. Parent topic: Operations using Helm","title":"Retrieving the deployment configuration"},{"location":"containerization/helm/helm_update_deployment/","text":"Update deployment to a later version This section shows how to update your HCL DX 9.5 Container Update CF197 and later deployment to a newer DX 9.5 Container Update release version. To proceed, administrators should have prepared the container platform cluster, together with the HCL DX 9.5 container deployment custom-values.yaml using the following guidance, Planning your container deployment using Helm , and then install your deployment using the instructions in Install and uninstall commands for HCL DX 9.5 CF196 and later container deployments to Kubernetes and Red Hat OpenShift platforms using Helm . Important: As of HCL DX 9.5 Container Update CF197, you can use this process to update a DX 9.5 deployment from Container Update CF196 on the Google Kubernetes Engine (GKE) platform. Support to update DX 9.5 197 container deployments using Helm to CF198 and later DX 9.5 container versions is provided for Red Hat OpenShift, Amazon EKS, Azure AKS, as well as Google GKE platforms beginning with Container Update CF198. Follow the guidance in this section to update the HCL DX 9.5 container release version CF197 and later deployment, to Kubernetes or Red Hat OpenShift that was installed using Helm. These instructions assume that you have made all configuration changes using the recommended Helm upgrade route described in Updating the DX 9.5 Deployment Configuration . This ensures that your custom-values.yaml file is an updated description of the configuration of your environment. If that is not the case, you must update your custom-values.yaml file first with all configuration changes. Update Ambassador CRDs when updating from CF199 or earlier When updating CF199 or earlier, you need to update the ambassador CRDs to a newer version. As a known pattern, Helm will not update CRDs by design. Important: The CRDs are currently backward compatible. It is still possible to run or perform an install of an older version of DX on that cluster, even when the CRDs are at the latest version. Note: Do not remove/downgrade the CF200 CRDs to an older version while having CF200 or later deployments running on your cluster. Prerequisites: You need to have tar and HCL DX Helm Chart downloaded. Your kubectl configuration must point to the target cluster and the user requires Cluster Admin Access to access it. Note: If you changed the Portal or WAS Administrator user, please ensure you have the correct values for security.core.wasUser/wasPassword and wpsUser/wpsPassword in custom-values.yaml. Note: If you performed a database transfer, please ensure the <database>.DbUser and <database>.DbPassword for all Portal databases reflect the current user and password in /opt/HCL/wp_profile/ConfigEngine/properties/wkplc_dbdomain.properties prior to updating the Portal Core image. Procedure to update CRDs : Locate the hcl-dx-deployment-*.tgz in your downloaded package. Execute the following commands to update the CRDs: # Extract CRD directory from downloaded Helm Chart tar vxf hcl-dx-deployment-*.tgz hcl-dx-deployment/crds # Apply extracted CRDs on cluster level kubectl apply -f hcl-dx-deployment/crds After the action is completed, you can proceed with the DX update procedure. This step is required to be executed only once. Populate your repository with the new images Download the new HCL DX 9.5 container update images you need to upgrade and ensure that they are available in the image repository specified in your custom-values.yaml file. See the Docker image list for the latest HCL DX 9.5 container update images available. Download the Helm charts for the version to be installed Download the Helm charts corresponding to the HCL DX 9.5 container versions you want to install. You must always use the Helm charts that correspond to the container versions you are installing or to which you are upgrading. (Optional) Remove the operatorToHelm property from the existing custom-values.yaml file before upgrading to CF200 and later If you have CF199 deployed, ensure that you remove the operatorToHelm configuration from the custom-values.yaml file before upgrading to CF200, irrespective of whether the property is enabled or not. migration: operatorToHelm: enabled: true Note: The operatorToHelm configuration property is not supported in CF200, hence it must be removed. This property was introduced in CF199 to facilitate migration from the previous Operator-based deployments to Helm-based deployments. Update the image tags Update the image tags in your custom-values.yaml file to match those for the new images in your repository. See Planning your container deployment using Helm for more information. Run the upgrade command After making the changes to the custom-values.yaml file, use the following command to upgrade your HCL DX 9.5 deployment to CF197 and later release version: # Helm upgrade command: helm upgrade -n your-namespace -f path/to/your/custom-values.yaml your-release-name path/to/hcl-dx-deployment-vX.X.X_XXXXXXXX-XXXX.tar.gz In this example: your-namespace is the namespace in which your HCL Digital Experience 9.5 Container Update deployment is installed and your-release-name is the Helm release name you used when installing. The -f path/to/your/custom-values.yaml parameter must point to the custom-values.yaml you updated. path/to/hcl-dx-deployment-vX.X.X_XXXXXXXX-XXXX.tar.gz is the HCL Digital Experience 9.5 Container Update Helm Chart that you extracted in the preparation steps. Parent topic: Deploying container platforms using Helm","title":"Update deployment to a later version"},{"location":"containerization/helm/helm_update_deployment/#update-deployment-to-a-later-version","text":"This section shows how to update your HCL DX 9.5 Container Update CF197 and later deployment to a newer DX 9.5 Container Update release version. To proceed, administrators should have prepared the container platform cluster, together with the HCL DX 9.5 container deployment custom-values.yaml using the following guidance, Planning your container deployment using Helm , and then install your deployment using the instructions in Install and uninstall commands for HCL DX 9.5 CF196 and later container deployments to Kubernetes and Red Hat OpenShift platforms using Helm . Important: As of HCL DX 9.5 Container Update CF197, you can use this process to update a DX 9.5 deployment from Container Update CF196 on the Google Kubernetes Engine (GKE) platform. Support to update DX 9.5 197 container deployments using Helm to CF198 and later DX 9.5 container versions is provided for Red Hat OpenShift, Amazon EKS, Azure AKS, as well as Google GKE platforms beginning with Container Update CF198. Follow the guidance in this section to update the HCL DX 9.5 container release version CF197 and later deployment, to Kubernetes or Red Hat OpenShift that was installed using Helm. These instructions assume that you have made all configuration changes using the recommended Helm upgrade route described in Updating the DX 9.5 Deployment Configuration . This ensures that your custom-values.yaml file is an updated description of the configuration of your environment. If that is not the case, you must update your custom-values.yaml file first with all configuration changes. Update Ambassador CRDs when updating from CF199 or earlier When updating CF199 or earlier, you need to update the ambassador CRDs to a newer version. As a known pattern, Helm will not update CRDs by design. Important: The CRDs are currently backward compatible. It is still possible to run or perform an install of an older version of DX on that cluster, even when the CRDs are at the latest version. Note: Do not remove/downgrade the CF200 CRDs to an older version while having CF200 or later deployments running on your cluster. Prerequisites: You need to have tar and HCL DX Helm Chart downloaded. Your kubectl configuration must point to the target cluster and the user requires Cluster Admin Access to access it. Note: If you changed the Portal or WAS Administrator user, please ensure you have the correct values for security.core.wasUser/wasPassword and wpsUser/wpsPassword in custom-values.yaml. Note: If you performed a database transfer, please ensure the <database>.DbUser and <database>.DbPassword for all Portal databases reflect the current user and password in /opt/HCL/wp_profile/ConfigEngine/properties/wkplc_dbdomain.properties prior to updating the Portal Core image. Procedure to update CRDs : Locate the hcl-dx-deployment-*.tgz in your downloaded package. Execute the following commands to update the CRDs: # Extract CRD directory from downloaded Helm Chart tar vxf hcl-dx-deployment-*.tgz hcl-dx-deployment/crds # Apply extracted CRDs on cluster level kubectl apply -f hcl-dx-deployment/crds After the action is completed, you can proceed with the DX update procedure. This step is required to be executed only once. Populate your repository with the new images Download the new HCL DX 9.5 container update images you need to upgrade and ensure that they are available in the image repository specified in your custom-values.yaml file. See the Docker image list for the latest HCL DX 9.5 container update images available. Download the Helm charts for the version to be installed Download the Helm charts corresponding to the HCL DX 9.5 container versions you want to install. You must always use the Helm charts that correspond to the container versions you are installing or to which you are upgrading. (Optional) Remove the operatorToHelm property from the existing custom-values.yaml file before upgrading to CF200 and later If you have CF199 deployed, ensure that you remove the operatorToHelm configuration from the custom-values.yaml file before upgrading to CF200, irrespective of whether the property is enabled or not. migration: operatorToHelm: enabled: true Note: The operatorToHelm configuration property is not supported in CF200, hence it must be removed. This property was introduced in CF199 to facilitate migration from the previous Operator-based deployments to Helm-based deployments. Update the image tags Update the image tags in your custom-values.yaml file to match those for the new images in your repository. See Planning your container deployment using Helm for more information. Run the upgrade command After making the changes to the custom-values.yaml file, use the following command to upgrade your HCL DX 9.5 deployment to CF197 and later release version: # Helm upgrade command: helm upgrade -n your-namespace -f path/to/your/custom-values.yaml your-release-name path/to/hcl-dx-deployment-vX.X.X_XXXXXXXX-XXXX.tar.gz In this example: your-namespace is the namespace in which your HCL Digital Experience 9.5 Container Update deployment is installed and your-release-name is the Helm release name you used when installing. The -f path/to/your/custom-values.yaml parameter must point to the custom-values.yaml you updated. path/to/hcl-dx-deployment-vX.X.X_XXXXXXXX-XXXX.tar.gz is the HCL Digital Experience 9.5 Container Update Helm Chart that you extracted in the preparation steps. Parent topic: Deploying container platforms using Helm","title":"Update deployment to a later version"},{"location":"containerization/helm/hybrid_deployment_helm/","text":"Hybrid Deployment - Helm This section describes how to install HCL Digital Experience 9.5 Container Update CF198 and later Portal Server and Web Content Manager services to on-premises platforms, operating with Digital Asset Management, Content Composer, Experience API deployed to cloud-based Kubernetes and OpenShift platforms using the Helm deployment method. Overview The HCL Digital Experience 9.5 Hybrid deployment reference architecture and topics describe an approach to deploy and manage HCL Digital Experience 9.5 core Portal Server and Web Content Manager services on premises, and connect to cloud native components Digital Asset Management, Content Composer, Experience API and related services using Helm, in a production environment. Prerequisites HCL Digital Experience V9.5 CF198 or a higher release is deployed to supported on-premises platforms in a standalone, cluster, or farm topology. See the Roadmaps to deploy your Digital Experience 9.5 system topic for more information. Practitioner Studio is enabled in the Digital Experience 9.5 CF198 or higher installation. See the How to enable Practitioner Studio topic for instructions. A common domain that uses an SSL connection is established for both the on-premise HCL DX 9.5 CF198 and higher on-premise environments and the target Red Hat Open Shift or Amazon EKS, Azure AKS, or Google GKE platform deployment to contain the cloud native components (HCL DX Experience API, Digital Asset Management and Content Composer). For example, mytargetcloud.dx.com and myonprem.dx.com would have the same domain: dx.com. Single sign-on must be enabled on HCL DX 9.5 CF198 or a higher on-premises environment. On DMGR or WAS Admin console, under Security > Global Security > Web & SIP Security > Single Sign-On , the Enabled box is checked and the Domain name is set to common domain. For example, dx.com. A high-performance network connection is established between the HCL DX 9.5 CF19 and higher on-premises environment and the target DX Red Hat Open Shift or Kubernetes platform deployment. Volume Requirement : Requires an AccessMode of ReadWriteMany . Refer to the Storage Class and Volume topic for more information. Ensure you have obtained a backup of the HCL DX 9.5 on-premises deployment. See the Backup and Restore topic for additional information. Step 1: Configure Networking between the on-premises DX 9.5 CF198 or later deployment so that the HCL DX 9.5 Container Update CF198 or later components are accessible externally from the Kubernetes or OpenShift platform cluster. Reference the Configure Networking topic in the Helm Planning sections of the Help Center. Step 2: Set the Core application deployment parameter in your custom-values.yaml file to false . Refer to the Planning your container deployment using Helm Help Center topic for more information. Step 3: Proceed to configuration instructions listed in this Help Center topic: Helm Deployment Configuration . Parent topic: Deploying container platforms using Helm Parent topic: Digital Experience on containerized platforms","title":"Hybrid Deployment - Helm"},{"location":"containerization/helm/hybrid_deployment_helm/#hybrid-deployment-helm","text":"This section describes how to install HCL Digital Experience 9.5 Container Update CF198 and later Portal Server and Web Content Manager services to on-premises platforms, operating with Digital Asset Management, Content Composer, Experience API deployed to cloud-based Kubernetes and OpenShift platforms using the Helm deployment method.","title":"Hybrid Deployment - Helm"},{"location":"containerization/helm/hybrid_deployment_helm/#overview","text":"The HCL Digital Experience 9.5 Hybrid deployment reference architecture and topics describe an approach to deploy and manage HCL Digital Experience 9.5 core Portal Server and Web Content Manager services on premises, and connect to cloud native components Digital Asset Management, Content Composer, Experience API and related services using Helm, in a production environment.","title":"Overview"},{"location":"containerization/helm/hybrid_deployment_helm/#prerequisites","text":"HCL Digital Experience V9.5 CF198 or a higher release is deployed to supported on-premises platforms in a standalone, cluster, or farm topology. See the Roadmaps to deploy your Digital Experience 9.5 system topic for more information. Practitioner Studio is enabled in the Digital Experience 9.5 CF198 or higher installation. See the How to enable Practitioner Studio topic for instructions. A common domain that uses an SSL connection is established for both the on-premise HCL DX 9.5 CF198 and higher on-premise environments and the target Red Hat Open Shift or Amazon EKS, Azure AKS, or Google GKE platform deployment to contain the cloud native components (HCL DX Experience API, Digital Asset Management and Content Composer). For example, mytargetcloud.dx.com and myonprem.dx.com would have the same domain: dx.com. Single sign-on must be enabled on HCL DX 9.5 CF198 or a higher on-premises environment. On DMGR or WAS Admin console, under Security > Global Security > Web & SIP Security > Single Sign-On , the Enabled box is checked and the Domain name is set to common domain. For example, dx.com. A high-performance network connection is established between the HCL DX 9.5 CF19 and higher on-premises environment and the target DX Red Hat Open Shift or Kubernetes platform deployment. Volume Requirement : Requires an AccessMode of ReadWriteMany . Refer to the Storage Class and Volume topic for more information. Ensure you have obtained a backup of the HCL DX 9.5 on-premises deployment. See the Backup and Restore topic for additional information. Step 1: Configure Networking between the on-premises DX 9.5 CF198 or later deployment so that the HCL DX 9.5 Container Update CF198 or later components are accessible externally from the Kubernetes or OpenShift platform cluster. Reference the Configure Networking topic in the Helm Planning sections of the Help Center. Step 2: Set the Core application deployment parameter in your custom-values.yaml file to false . Refer to the Planning your container deployment using Helm Help Center topic for more information. Step 3: Proceed to configuration instructions listed in this Help Center topic: Helm Deployment Configuration . Parent topic: Deploying container platforms using Helm Parent topic: Digital Experience on containerized platforms","title":"Prerequisites"},{"location":"containerization/helm/limitations_requirements/","text":"Containerization requirements and limitations This section describes the requirements to deploy the HCL Digital Experience 9.5 images to container platforms and current limitations. Attention: Beginning with HCL Digital Experience 9.5 Container Update CF200, HCL has discontinued releasing the HCL Digital Experience (DX) Operator-based deployments and will provide support only for Helm-based deployments . There will be no further updates or code fixes provided for the Operator-based deployments. HCL requires all customers to migrate to Helm-based deployments for their DX installations. HCL will work with our customers as they transition from Operator-based to Helm-based deployments. For more information on the migration process, see Migrating from Operator-based to Helm-based deployments . Consult the HCL Digital Experience 9.5 Support Statements on the HCL Digital Experience Support pages for the latest updates on supported platforms, components, and release levels. Requirements and Limitations for Helm-based deployments This section describes requirements and current limitations for HCL Digital Experience 9.5 Container Update CF200 and later deployments using Helm. HCL DX 9.5 CF200 and later is architected to run on any Certified Kubernetes platform ( https://www.cncf.io/certification/software-conformance ), provided that, the Kubernetes platform is hosted on x86_64 hardware the Kubernetes platform is officially supported by Helm ( https://helm.sh/docs/topics/kubernetes_distros/ ). For the list of Kubernetes versions that are tested and supported by HCL, refer to the HCL DX supported hardware and software statements page. Even though the platforms might be Certified Kubernetes platforms, you might find the environments varying slightly based on the vendors. HCL Support will make a reasonable effort to assist the customer in problem resolution in scenarios where the Kubernetes version is still under support by the vendor. If there are any unresolved issues, HCL Support will provide alternative implementation recommendations or open Feature Requests for the problem scenario. Internally, HCL tests DX against a range of Kubernetes platforms that is regularly reviewed and updated. We do not test with every single platform vendor, but aim to cover a representative sample of popular Kubernetes implementations. See the HCL DX supported hardware and software statements on the HCL Support Knowledge Base for additional details. To deploy HCL Digital Experience 9.5 CF200 to the supported Kubernetes platforms using Helm, the following are required: Helm installation : Download and install Helm to your target environment. HCL DX 9.5 CF200 and later container deployment is tested and is supported with Helm v3. For more information regarding the supported Helm version for individual Kubernetes versions, refer Helm documentation . Migration : For information about migrating from Operator-based to Helm-based deployments, see Migrating from Operator-based to Helm-based deployments . Container platform capacity resource requirements : The following table outlines the default minimum and maximum capacity of container resources requested by the HCL DX 9.5 Container Components in the Helm-based deployments. Component Resource name Pod Minimum CPU Pod Minimum Memory No. of Pods Minimum Core core 0.8 3072MB 1 Ring API ringApi 0.1 128MB 1 Content Composer contentComposer 0.1 128MB 1 Design Studio designStudio 0.1 128MB 1 Digital Asset Management digitalAssetManagement 0.25 1024MB 1 DAM Persistence Connection Pool persistenceConnectionPool 0.5 512MB 1 DAM Persistence Node persistenceNode 1 1024MB 1 DAM Persistence Metrics Exporter persistenceMetricsExporter 0.1 128MB 0 Image processor imageProcessor 0.1 1280MB 1 Open LDAP openLdap 0.2 512MB 1 Remote search remoteSearch 0.25 768MB 1 (Max 1 Pod) Runtime Controller runtimeController 0.1 256MB 1 Ambassador Ingress ambassadorIngress 0.2 300MB 1 Ambassador Redis ambassadorRedis 0.1 256MB 0 Sidecar sidecar 0.1 64MB 0 Requirements and Limitations for Operator-based deployments Attention: Beginning with HCL Digital Experience 9.5 Container Update CF200, HCL has discontinued releasing the HCL Digital Experience (DX) Operator-based deployments and will provide support only for Helm-based deployments . There will be no further updates or code fixes provided for the Operator-based deployments. HCL requires all customers to migrate to Helm-based deployments for their DX installations. HCL will work with our customers as they transition from Operator-based to Helm-based deployments. For more information on the migration process, see Migrating from Operator-based to Helm-based deployments . The following describes the requirements to deploy the HCL Digital Experience 9.5 images to container platforms and current limitations using the Operator-based deployment process: HCL Digital Experience 9.5 is supported on Docker, Red Hat OpenShift, Amazon Elastic Kubernetes Service (EKS), and Microsoft Azure Kubernetes Service (AKS), and Google Kubernetes Engine (GKE). Other Kubernetes platforms are not fully supported. The HCL Operator is not likely to work, however, support for additional Kubernetes as a Service (KaaS) is ongoing and additions is reflected in the HCL Digital Experience 9.5 Support Statements. Additional features and functions may be tied to the use of the HCL DX Operators for deployment. HCL highly recommends following the deployment strategies outlined within this documentation. HCL Digital Experience 9.5 containerization is focused on deployment and it uses an operator-based deployment. The goals are: To introduce a supported containerized deployment that HCL can continually extend; To provide customers with the best possible experience; To provide a high level of customization in the deployment and continue to expand on that, along with increased automation; and To maintain separation of product and custom code. Customers need to follow the recommended deployment model to ensure the availability of future functions and prevent potential conflicts. Notes: HCL Digital Experience is a database-intensive application, it is not recommended to use Apache Derby for production use. For specific versions of databases supported for production, see the HCL Digital Experience 9.5 Support Statements on the HCL Digital Experience Support pages. Creation of Virtual Portals take longer when implemented in Red Hat OpenShift. Plan for adequate time to allow processing, and re-verify the results are completed by refreshing the web browser administrative panel. Customers should not modify the HCL Digital Experience 9.5 Docker images provided by HCL for deployment. This restriction includes use of these images as a base to create a new image, which results in a new image ID and an unsupported configuration. Instead, customers deploying the images should follow best practices and maintain customizations in the wp_profile and the deployment database. Scripts and custom files should be stored in wp_profile (/opt/HCL/wp_profile/). See the Deployment Help Center topics for more information Customers should not run multiple HCL Digital Experience 9.5 container deployments in a single Kubernetes namespace (in the case of Red Hat OpenShift, in a single OpenShift project). This configuration is not supported at this time. It is not supported to run two different versions of HCL Digital Experience 9.5 container deployments in a single Kubernetes cluster. Use of Web Application Bridge is currently unsupported on HCL Digital Experience 9.5 deployments to container platforms such as Kubernetes and Red Hat OpenShift, using the Operator-based deployment method. Beginning with HCL DX Container Update CF199, Web Application Bridge can be used in container deployments using the Helm deployment method. Supported file system requirements : Requires an **AccessMode** of **ReadWriteMany** . Requires a minimum of 40 GB , with the default request set to 100 GB . Note: HCL Digital Experience is input-output (I/O) intensive and requires a high performing file system for optimization. Container platform capacity requirements : The following table outlines the minimum and maximum capacity requested and managed by HCL DX 9.5 Container Components: Component Pod minimum CPU Pod maximum CPU Pod minimum memory Pod maximum memory No. of minimum pods DX 9.5 Core 2 5 6 GB 8 GB 1 Experience API 0.5 1 1 GB 2 GB 1 Content Composer 0.5 1 1 GB 2 GB 1 Digital Asset Management 0.5 2 1 GB 2 GB 3 Persistence 1 2 1 GB 3 GB 1 Image processor 1 2 2 GB 2 GB 1 Remote search 1 3 1 GB 4 GB 1 Operators Shared - minimal Shared - minimal Shared - minimal Shared - minimal 2 Ambassador 0.3 1 400 MB 600 MB 3 Redis 0.3 1 400 MB 600 MB 3 Postgres-RO 1 2 1 GB 3 GB 1 Additional considerations in implementation : ConfigEngine and ConfigWizard should only be used when there is a single instance When more than one instance is running, the ConfigEngine is disabled and the ConfigWizard route is removed. As an example, the Site Builder is calling the ConfigEngine in the background. But because multiple instances are running, an Error 500 occurs because the ConfigEngine is disabled. AllConfigEngine.sh tasks should be run in configure mode with only one instance running. JavaServer Faces (JSF) portlet bridge With DX 9.5 Container Update CF171 and higher, WebSphere Application Server 9.0.5.2 is included and that IBM fix pack removed the IBM JSF portlet bridge. If you are using JSF portlets and leverage the JSF portlet bridge, proceed to the HCL DX 9.5 Container Update CF18 for the required JavaServer Faces Bridge support before moving to a container-based deployment. The HCL JavaServer Faces Bridge is added to HCL Digital Experience offerings with Container Update CF18 and CF18 on-premises platform CF update. For more information please see What's New in Container Update CF18 . Note: For information about the limitations related to JSF 2.2 support, see Limitations when running HCL DX Portlet Bridge on WebSphere Application Server 9.0 . Parent topic: Digital Experience on containerized platforms","title":"Containerization requirements and limitations"},{"location":"containerization/helm/limitations_requirements/#containerization-requirements-and-limitations","text":"This section describes the requirements to deploy the HCL Digital Experience 9.5 images to container platforms and current limitations. Attention: Beginning with HCL Digital Experience 9.5 Container Update CF200, HCL has discontinued releasing the HCL Digital Experience (DX) Operator-based deployments and will provide support only for Helm-based deployments . There will be no further updates or code fixes provided for the Operator-based deployments. HCL requires all customers to migrate to Helm-based deployments for their DX installations. HCL will work with our customers as they transition from Operator-based to Helm-based deployments. For more information on the migration process, see Migrating from Operator-based to Helm-based deployments . Consult the HCL Digital Experience 9.5 Support Statements on the HCL Digital Experience Support pages for the latest updates on supported platforms, components, and release levels.","title":"Containerization requirements and limitations"},{"location":"containerization/helm/limitations_requirements/#requirements-and-limitations-for-helm-based-deployments","text":"This section describes requirements and current limitations for HCL Digital Experience 9.5 Container Update CF200 and later deployments using Helm. HCL DX 9.5 CF200 and later is architected to run on any Certified Kubernetes platform ( https://www.cncf.io/certification/software-conformance ), provided that, the Kubernetes platform is hosted on x86_64 hardware the Kubernetes platform is officially supported by Helm ( https://helm.sh/docs/topics/kubernetes_distros/ ). For the list of Kubernetes versions that are tested and supported by HCL, refer to the HCL DX supported hardware and software statements page. Even though the platforms might be Certified Kubernetes platforms, you might find the environments varying slightly based on the vendors. HCL Support will make a reasonable effort to assist the customer in problem resolution in scenarios where the Kubernetes version is still under support by the vendor. If there are any unresolved issues, HCL Support will provide alternative implementation recommendations or open Feature Requests for the problem scenario. Internally, HCL tests DX against a range of Kubernetes platforms that is regularly reviewed and updated. We do not test with every single platform vendor, but aim to cover a representative sample of popular Kubernetes implementations. See the HCL DX supported hardware and software statements on the HCL Support Knowledge Base for additional details. To deploy HCL Digital Experience 9.5 CF200 to the supported Kubernetes platforms using Helm, the following are required: Helm installation : Download and install Helm to your target environment. HCL DX 9.5 CF200 and later container deployment is tested and is supported with Helm v3. For more information regarding the supported Helm version for individual Kubernetes versions, refer Helm documentation . Migration : For information about migrating from Operator-based to Helm-based deployments, see Migrating from Operator-based to Helm-based deployments . Container platform capacity resource requirements : The following table outlines the default minimum and maximum capacity of container resources requested by the HCL DX 9.5 Container Components in the Helm-based deployments. Component Resource name Pod Minimum CPU Pod Minimum Memory No. of Pods Minimum Core core 0.8 3072MB 1 Ring API ringApi 0.1 128MB 1 Content Composer contentComposer 0.1 128MB 1 Design Studio designStudio 0.1 128MB 1 Digital Asset Management digitalAssetManagement 0.25 1024MB 1 DAM Persistence Connection Pool persistenceConnectionPool 0.5 512MB 1 DAM Persistence Node persistenceNode 1 1024MB 1 DAM Persistence Metrics Exporter persistenceMetricsExporter 0.1 128MB 0 Image processor imageProcessor 0.1 1280MB 1 Open LDAP openLdap 0.2 512MB 1 Remote search remoteSearch 0.25 768MB 1 (Max 1 Pod) Runtime Controller runtimeController 0.1 256MB 1 Ambassador Ingress ambassadorIngress 0.2 300MB 1 Ambassador Redis ambassadorRedis 0.1 256MB 0 Sidecar sidecar 0.1 64MB 0","title":"Requirements and Limitations for Helm-based deployments"},{"location":"containerization/helm/limitations_requirements/#requirements-and-limitations-for-operator-based-deployments","text":"Attention: Beginning with HCL Digital Experience 9.5 Container Update CF200, HCL has discontinued releasing the HCL Digital Experience (DX) Operator-based deployments and will provide support only for Helm-based deployments . There will be no further updates or code fixes provided for the Operator-based deployments. HCL requires all customers to migrate to Helm-based deployments for their DX installations. HCL will work with our customers as they transition from Operator-based to Helm-based deployments. For more information on the migration process, see Migrating from Operator-based to Helm-based deployments . The following describes the requirements to deploy the HCL Digital Experience 9.5 images to container platforms and current limitations using the Operator-based deployment process: HCL Digital Experience 9.5 is supported on Docker, Red Hat OpenShift, Amazon Elastic Kubernetes Service (EKS), and Microsoft Azure Kubernetes Service (AKS), and Google Kubernetes Engine (GKE). Other Kubernetes platforms are not fully supported. The HCL Operator is not likely to work, however, support for additional Kubernetes as a Service (KaaS) is ongoing and additions is reflected in the HCL Digital Experience 9.5 Support Statements. Additional features and functions may be tied to the use of the HCL DX Operators for deployment. HCL highly recommends following the deployment strategies outlined within this documentation. HCL Digital Experience 9.5 containerization is focused on deployment and it uses an operator-based deployment. The goals are: To introduce a supported containerized deployment that HCL can continually extend; To provide customers with the best possible experience; To provide a high level of customization in the deployment and continue to expand on that, along with increased automation; and To maintain separation of product and custom code. Customers need to follow the recommended deployment model to ensure the availability of future functions and prevent potential conflicts. Notes: HCL Digital Experience is a database-intensive application, it is not recommended to use Apache Derby for production use. For specific versions of databases supported for production, see the HCL Digital Experience 9.5 Support Statements on the HCL Digital Experience Support pages. Creation of Virtual Portals take longer when implemented in Red Hat OpenShift. Plan for adequate time to allow processing, and re-verify the results are completed by refreshing the web browser administrative panel. Customers should not modify the HCL Digital Experience 9.5 Docker images provided by HCL for deployment. This restriction includes use of these images as a base to create a new image, which results in a new image ID and an unsupported configuration. Instead, customers deploying the images should follow best practices and maintain customizations in the wp_profile and the deployment database. Scripts and custom files should be stored in wp_profile (/opt/HCL/wp_profile/). See the Deployment Help Center topics for more information Customers should not run multiple HCL Digital Experience 9.5 container deployments in a single Kubernetes namespace (in the case of Red Hat OpenShift, in a single OpenShift project). This configuration is not supported at this time. It is not supported to run two different versions of HCL Digital Experience 9.5 container deployments in a single Kubernetes cluster. Use of Web Application Bridge is currently unsupported on HCL Digital Experience 9.5 deployments to container platforms such as Kubernetes and Red Hat OpenShift, using the Operator-based deployment method. Beginning with HCL DX Container Update CF199, Web Application Bridge can be used in container deployments using the Helm deployment method. Supported file system requirements : Requires an **AccessMode** of **ReadWriteMany** . Requires a minimum of 40 GB , with the default request set to 100 GB . Note: HCL Digital Experience is input-output (I/O) intensive and requires a high performing file system for optimization. Container platform capacity requirements : The following table outlines the minimum and maximum capacity requested and managed by HCL DX 9.5 Container Components: Component Pod minimum CPU Pod maximum CPU Pod minimum memory Pod maximum memory No. of minimum pods DX 9.5 Core 2 5 6 GB 8 GB 1 Experience API 0.5 1 1 GB 2 GB 1 Content Composer 0.5 1 1 GB 2 GB 1 Digital Asset Management 0.5 2 1 GB 2 GB 3 Persistence 1 2 1 GB 3 GB 1 Image processor 1 2 2 GB 2 GB 1 Remote search 1 3 1 GB 4 GB 1 Operators Shared - minimal Shared - minimal Shared - minimal Shared - minimal 2 Ambassador 0.3 1 400 MB 600 MB 3 Redis 0.3 1 400 MB 600 MB 3 Postgres-RO 1 2 1 GB 3 GB 1 Additional considerations in implementation : ConfigEngine and ConfigWizard should only be used when there is a single instance When more than one instance is running, the ConfigEngine is disabled and the ConfigWizard route is removed. As an example, the Site Builder is calling the ConfigEngine in the background. But because multiple instances are running, an Error 500 occurs because the ConfigEngine is disabled. AllConfigEngine.sh tasks should be run in configure mode with only one instance running. JavaServer Faces (JSF) portlet bridge With DX 9.5 Container Update CF171 and higher, WebSphere Application Server 9.0.5.2 is included and that IBM fix pack removed the IBM JSF portlet bridge. If you are using JSF portlets and leverage the JSF portlet bridge, proceed to the HCL DX 9.5 Container Update CF18 for the required JavaServer Faces Bridge support before moving to a container-based deployment. The HCL JavaServer Faces Bridge is added to HCL Digital Experience offerings with Container Update CF18 and CF18 on-premises platform CF update. For more information please see What's New in Container Update CF18 . Note: For information about the limitations related to JSF 2.2 support, see Limitations when running HCL DX Portlet Bridge on WebSphere Application Server 9.0 . Parent topic: Digital Experience on containerized platforms","title":"Requirements and Limitations for Operator-based deployments"},{"location":"containerization/helm/monitor_helm_deployment_metrics/","text":"Monitor the Digital Experience deployment using metrics This topic outlines the use of standards-based metrics to monitor activity and performance of DX container deployments. Prometheus metrics and Grafana The Digital Experience 9.5 Helm deployment supports monitoring the deployment activity with advanced metrics and visualization, by exposing standards-based Prometheus -compatible metrics. Prometheus metrics components can scrape the metrics of most of the DX 9.5 container applications. The collected data is queried from Prometheus and are visualized in operations dashboard solutions, such as Grafana . The following information can advise administrators which Digital Experience 9.5 applications can use these tools with some usage examples. Digital Experience 9.5 applications and Prometheus metrics The following Digital Experience 9.5 applications expose metrics that can be tracked with Prometheus metrics. Core Remote Search Content Composer Design Studio Digital Asset Management Image Processor Experience API DAM persistence Ambassador Application Port Route Core 10038 /metrics Remote Search 9060 /metrics Content Composer 3000 /probe/metrics Design Studio 3000 /probe/metrics Digital Asset Management 3000 /probe/metrics Image Processor 3000 /probe/metrics Ring API 3000 /probe/metrics DAM Persistence 9187 /metrics Ambassador 8877 /metrics Important: HCL Digital Experience 9.5 does not include a deployment of Prometheus or Grafana . When metrics are enabled in the DX 9.5 Helm chart , the application exposes Prometheus-compatible metrics. Those metrics can be consumed by any common Prometheus installation. HCL DX 9.5 metrics are compatible with the following deployment and discovery types of Prometheus in Kubernetes environments: Prometheus - Discovers metrics by evaluating the annotation of the services Prometheus Operator - Discovers metrics using the ServiceMonitor custom resources Administrators can configure the HCL DX 9.5 metrics depending on their specific Prometheus deployment, as outlined in the following sections. Configure Prometheus metrics To configure the metrics for the Digital Experience 9.5 applications in the DX 9.5 Helm chart, enable scraping in the custom-values.yaml used for the DX 9.5 deployment. The metrics are configured independently for each DX 9.5 application. Parameter Description Default value metrics.<application>.scrape Determines if the metrics of this application are scraped by Prometheus. false metrics.<application>.prometheusDiscoveryType Determines how Prometheus discovers the metrics of a service. Accepts \"annotation\" and \"serviceMonitor\" . The \"serviceMonitor\" setting requires that the ServiceMonitor CRD (which comes with the Prometheus Operator), is installed in the cluster. \"annotation\" Example configurations : Enable the metrics for DX 9.5 core and add the appropriate annotation for Prometheus: ``` metrics: core: scrape: true # prometheusDiscoveryType is optional here as \"annotation\" is the default prometheusDiscoveryType: \"annotation\" ``` Enable the metrics for DX 9.5 Core and create a ServiceMonitor for Prometheus Operator: ``` metrics: core: scrape: true prometheusDiscoveryType: \"serviceMonitor\" ``` Grafana dashboards The exposed DX 9.5 Applications metrics are compatible with a set of existing Grafana operations dashboards that are available from the Grafana dashboard page, as well as a set of Granada-supported custom dashboards provided in JSON format. See following examples, which can be imported directly into Grafana. Publicly available operations dashboards You can directly download or import the following dashboards from the Grafana community page using the IDs or links. ID Dashboard Applications 14151 WebSphere Application Server PMI metrics dashboard Core, Remote Search 11159 NodeJS application dashboard Content Composer, Design Studio, Digital Asset Management, Image Processor, Experience API 9628 PostgreSQL database DAM persistence 10850 Ambassador dashboard Ambassador HCL Digital Experience custom dashboards The following dashboards are provided by HCL Software for use with HCL Digital Experience 9.5 deployments. These examples expose custom metrics for DX applications or provide enhanced features for existing dashboards. They are available in the public HCL Software Github repository . Dashboard Application(s) dam_dashboard.json Digital Asset Management References to Prometheus and Grafana installations Important: The resources outline here are optional deployment examples. HCL Software does not provide direct support for any issues related to the Prometheus metrics or the Grafana visualization tools. To leverage the full potential of the Digital Experience 9.5 applications metrics, an existing Prometheus and Grafana deployment can be used. Following is a list of additional metrics tracking and visualization services (non-exhaustive) that you can consider when developing solutions according to your deployment needs: kube-prometheus-stack Helm chart that includes: The Prometheus Operator Highly available Prometheus Highly available Alertmanager Prometheus node-exporter Prometheus adapter for Kubernetes metrics APIs kube-state-metrics Grafana Note: The kube-prometheus-stack Helm chart is based on the kube-prometheus repository, and comes with a set of tools to monitor the Kubernetes cluster, as well as pre-installed Grafana dashboards for visualization. prometheus and grafana are provided as independent Helm charts. Parent topic: Troubleshooting your Helm deployment","title":"Monitor the Digital Experience deployment using metrics"},{"location":"containerization/helm/monitor_helm_deployment_metrics/#monitor-the-digital-experience-deployment-using-metrics","text":"This topic outlines the use of standards-based metrics to monitor activity and performance of DX container deployments.","title":"Monitor the Digital Experience deployment using metrics"},{"location":"containerization/helm/monitor_helm_deployment_metrics/#prometheus-metrics-and-grafana","text":"The Digital Experience 9.5 Helm deployment supports monitoring the deployment activity with advanced metrics and visualization, by exposing standards-based Prometheus -compatible metrics. Prometheus metrics components can scrape the metrics of most of the DX 9.5 container applications. The collected data is queried from Prometheus and are visualized in operations dashboard solutions, such as Grafana . The following information can advise administrators which Digital Experience 9.5 applications can use these tools with some usage examples.","title":"Prometheus metrics and Grafana"},{"location":"containerization/helm/monitor_helm_deployment_metrics/#digital-experience-95-applications-and-prometheus-metrics","text":"The following Digital Experience 9.5 applications expose metrics that can be tracked with Prometheus metrics. Core Remote Search Content Composer Design Studio Digital Asset Management Image Processor Experience API DAM persistence Ambassador Application Port Route Core 10038 /metrics Remote Search 9060 /metrics Content Composer 3000 /probe/metrics Design Studio 3000 /probe/metrics Digital Asset Management 3000 /probe/metrics Image Processor 3000 /probe/metrics Ring API 3000 /probe/metrics DAM Persistence 9187 /metrics Ambassador 8877 /metrics Important: HCL Digital Experience 9.5 does not include a deployment of Prometheus or Grafana . When metrics are enabled in the DX 9.5 Helm chart , the application exposes Prometheus-compatible metrics. Those metrics can be consumed by any common Prometheus installation. HCL DX 9.5 metrics are compatible with the following deployment and discovery types of Prometheus in Kubernetes environments: Prometheus - Discovers metrics by evaluating the annotation of the services Prometheus Operator - Discovers metrics using the ServiceMonitor custom resources Administrators can configure the HCL DX 9.5 metrics depending on their specific Prometheus deployment, as outlined in the following sections.","title":"Digital Experience 9.5 applications and Prometheus metrics"},{"location":"containerization/helm/monitor_helm_deployment_metrics/#configure-prometheus-metrics","text":"To configure the metrics for the Digital Experience 9.5 applications in the DX 9.5 Helm chart, enable scraping in the custom-values.yaml used for the DX 9.5 deployment. The metrics are configured independently for each DX 9.5 application. Parameter Description Default value metrics.<application>.scrape Determines if the metrics of this application are scraped by Prometheus. false metrics.<application>.prometheusDiscoveryType Determines how Prometheus discovers the metrics of a service. Accepts \"annotation\" and \"serviceMonitor\" . The \"serviceMonitor\" setting requires that the ServiceMonitor CRD (which comes with the Prometheus Operator), is installed in the cluster. \"annotation\" Example configurations : Enable the metrics for DX 9.5 core and add the appropriate annotation for Prometheus: ``` metrics: core: scrape: true # prometheusDiscoveryType is optional here as \"annotation\" is the default prometheusDiscoveryType: \"annotation\" ``` Enable the metrics for DX 9.5 Core and create a ServiceMonitor for Prometheus Operator: ``` metrics: core: scrape: true prometheusDiscoveryType: \"serviceMonitor\" ```","title":"Configure Prometheus metrics"},{"location":"containerization/helm/monitor_helm_deployment_metrics/#grafana-dashboards","text":"The exposed DX 9.5 Applications metrics are compatible with a set of existing Grafana operations dashboards that are available from the Grafana dashboard page, as well as a set of Granada-supported custom dashboards provided in JSON format. See following examples, which can be imported directly into Grafana. Publicly available operations dashboards You can directly download or import the following dashboards from the Grafana community page using the IDs or links. ID Dashboard Applications 14151 WebSphere Application Server PMI metrics dashboard Core, Remote Search 11159 NodeJS application dashboard Content Composer, Design Studio, Digital Asset Management, Image Processor, Experience API 9628 PostgreSQL database DAM persistence 10850 Ambassador dashboard Ambassador","title":"Grafana dashboards"},{"location":"containerization/helm/monitor_helm_deployment_metrics/#hcl-digital-experience-custom-dashboards","text":"The following dashboards are provided by HCL Software for use with HCL Digital Experience 9.5 deployments. These examples expose custom metrics for DX applications or provide enhanced features for existing dashboards. They are available in the public HCL Software Github repository . Dashboard Application(s) dam_dashboard.json Digital Asset Management","title":"HCL Digital Experience custom dashboards"},{"location":"containerization/helm/monitor_helm_deployment_metrics/#references-to-prometheus-and-grafana-installations","text":"Important: The resources outline here are optional deployment examples. HCL Software does not provide direct support for any issues related to the Prometheus metrics or the Grafana visualization tools. To leverage the full potential of the Digital Experience 9.5 applications metrics, an existing Prometheus and Grafana deployment can be used. Following is a list of additional metrics tracking and visualization services (non-exhaustive) that you can consider when developing solutions according to your deployment needs: kube-prometheus-stack Helm chart that includes: The Prometheus Operator Highly available Prometheus Highly available Alertmanager Prometheus node-exporter Prometheus adapter for Kubernetes metrics APIs kube-state-metrics Grafana Note: The kube-prometheus-stack Helm chart is based on the kube-prometheus repository, and comes with a set of tools to monitor the Kubernetes cluster, as well as pre-installed Grafana dashboards for visualization. prometheus and grafana are provided as independent Helm charts. Parent topic: Troubleshooting your Helm deployment","title":"References to Prometheus and Grafana installations"},{"location":"containerization/helm/persistent_volumes_helm/","text":"PersistentVolumes and related operations considerations This topic provides details covering the PersistentVolumes (PVs) and related operations considerations in storing data for DX 9.5 stateful applications. Digital Experience 9.5 container-based stateful applications (DX 9.5 Core, Digital Asset Management, and Persistence) require PersistentVolumes (PVs) to store their data. Refer to the Deploy DX 9.5 applications to container platforms using Helm topic for a description of the DX 9.5 Applications details. As Kubernetes and OpenShift Pods do not have their own persistent file storage, the use of PVs is a must. For more information on PVs, consult the Kubernetes documentation . Note: You need to consider the type of PVs before you perform an installation. The type of volumes used depends on the type of deployment you are performing. If you are using only ReadWriteOnce (RWO) persistent volumes for all applications, you will not be able to scale them up to multiple Pods. Core The DX 9.5 Core application requires multiple PersistentVolumes (PVs) of different types and sizes for its operation. From an application perspective, there are three different things that need to be persisted: Profiles (called wp_profile and cw_profile ) Logs Transaction logs While the profile needs to be shared between all DX 9.5 Core Pods, the logs and transaction logs are per Pod and not shared. This means that the persistent volume used for the profile must be ReadWriteMany (RWX). The persistent volumes used for logs and transaction logs are established as ReadWriteOnce (RWO) for proper operations performance. For example, in a DX 9.5 Core deployment: To deploy one Core Pod, 3 PVs will be needed. To deploy two Core Pods, the number of required PVs increases by two, resulting in 5 PVs needed, since the second Pod shares the existing profile PV with the first Pod, but requires its own log and transaction log PVs. The following formula example can be used to calculate the required PV count per Core Pods to be deployed: # Formula to calculate PV count n(PV) = 1 + m(Core Pods) * 2 # E.g. for 3 Pods: 1 + 3 * 2 = 7 PVs In typical operations, the persistent volumes for logs and transaction logs are relatively small. Digital Asset Management The Digital Asset Management (DAM) application requires one (1) PV for storing binary asset data. This persistent volume is shared between all Digital Asset Management Pods. The PV used must be ReadWriteMany (RWX) . Persistence Persistence consists of at least two Pods. One which acts as a read/write primary node, and at least one that acts as a read-only fallback. All Persistence Pods work with ReadWriteOnce (RWO) persistent volumes, since there is no sharing of storage between the Pods. Therefore, the minimum required amount of PVs for Persistence is 2. Remote Search Remote Search requires 1 persistent volume for storing the profile (called prs_profile ) with the type ReadWriteOnce (RWO). Remote Search is limited to only one Pod, therefore, requires one PV for that Pod. Refer to Networking configuration for next steps. Parent topic: Overview of the Helm architecture","title":"PersistentVolumes and related operations considerations"},{"location":"containerization/helm/persistent_volumes_helm/#persistentvolumes-and-related-operations-considerations","text":"This topic provides details covering the PersistentVolumes (PVs) and related operations considerations in storing data for DX 9.5 stateful applications. Digital Experience 9.5 container-based stateful applications (DX 9.5 Core, Digital Asset Management, and Persistence) require PersistentVolumes (PVs) to store their data. Refer to the Deploy DX 9.5 applications to container platforms using Helm topic for a description of the DX 9.5 Applications details. As Kubernetes and OpenShift Pods do not have their own persistent file storage, the use of PVs is a must. For more information on PVs, consult the Kubernetes documentation . Note: You need to consider the type of PVs before you perform an installation. The type of volumes used depends on the type of deployment you are performing. If you are using only ReadWriteOnce (RWO) persistent volumes for all applications, you will not be able to scale them up to multiple Pods.","title":"PersistentVolumes and related operations considerations"},{"location":"containerization/helm/persistent_volumes_helm/#core","text":"The DX 9.5 Core application requires multiple PersistentVolumes (PVs) of different types and sizes for its operation. From an application perspective, there are three different things that need to be persisted: Profiles (called wp_profile and cw_profile ) Logs Transaction logs While the profile needs to be shared between all DX 9.5 Core Pods, the logs and transaction logs are per Pod and not shared. This means that the persistent volume used for the profile must be ReadWriteMany (RWX). The persistent volumes used for logs and transaction logs are established as ReadWriteOnce (RWO) for proper operations performance. For example, in a DX 9.5 Core deployment: To deploy one Core Pod, 3 PVs will be needed. To deploy two Core Pods, the number of required PVs increases by two, resulting in 5 PVs needed, since the second Pod shares the existing profile PV with the first Pod, but requires its own log and transaction log PVs. The following formula example can be used to calculate the required PV count per Core Pods to be deployed: # Formula to calculate PV count n(PV) = 1 + m(Core Pods) * 2 # E.g. for 3 Pods: 1 + 3 * 2 = 7 PVs In typical operations, the persistent volumes for logs and transaction logs are relatively small.","title":"Core"},{"location":"containerization/helm/persistent_volumes_helm/#digital-asset-management","text":"The Digital Asset Management (DAM) application requires one (1) PV for storing binary asset data. This persistent volume is shared between all Digital Asset Management Pods. The PV used must be ReadWriteMany (RWX) .","title":"Digital Asset Management"},{"location":"containerization/helm/persistent_volumes_helm/#persistence","text":"Persistence consists of at least two Pods. One which acts as a read/write primary node, and at least one that acts as a read-only fallback. All Persistence Pods work with ReadWriteOnce (RWO) persistent volumes, since there is no sharing of storage between the Pods. Therefore, the minimum required amount of PVs for Persistence is 2.","title":"Persistence"},{"location":"containerization/helm/persistent_volumes_helm/#remote-search","text":"Remote Search requires 1 persistent volume for storing the profile (called prs_profile ) with the type ReadWriteOnce (RWO). Remote Search is limited to only one Pod, therefore, requires one PV for that Pod. Refer to Networking configuration for next steps. Parent topic: Overview of the Helm architecture","title":"Remote Search"},{"location":"containerization/helm/planning/docker/","text":"Docker image list This section presents the latest HCL DX 9.5 Docker container update images available. Docker container update file list The HCL DX 9.5 container update releases may be obtained from your HCL Digital Experience entitlements in the HCL Software License Portal , in the HCL_Portal_8.5_9.0_9.5_CFs download package entry. Video: How to upload HCL Digital Experience 9.5 CF container images to a private repository HCL DX 9.5 CF201 Container Update CF201 If deploying the HCL DX 9.5 CF201 release, the package name and images are as follows: HCL DX 9.5 CF201 DXClient files : ``` hcl-dxclient-image-v95_CF201_20220207-1614.zip - ``` hcl-dxclient-v95_CF201_20220207-1613.zip **HCL DX 9.5 CF\\_201-hcl-dx-kubernetes-v95-CF201.zip**: - ``` HCL DX notices V9.5 CF201.txt - ``` hcl-dx-ambassador-image-1142.tar.gz - ``` hcl-dx-content-composer-image-v1.14.0_20220207-1550.tar.gz - ``` hcl-dx-core-image-v95_CF201_20220206-1331.tar.gz - ``` hcl-dx-deployment-v2.4.0_20220207-1606.tgz - ``` hcl-dx-design-studio-image-v0.7.0_20220207-1549.tar.gz - ``` hcl-dx-digital-asset-manager-image-v1.13.0_20220207-1609.tar.gz - ``` hcl-dx-experience-api-sample-ui-v0.2.0.20220207-1549.zip - ``` hcl-dx-image-processor-image-v1.14.0_20220207-1606.tar.gz - ``` hcl-dx-openldap-image-v1.2.0_20220207-1556.tar.gz - ``` hcl-dx-persistence-connection-pool-image-v1.14.0_20220207-1612.tar.gz - ``` hcl-dx-persistence-image-v1.14.0_20220207-1611.tar.gz - ``` hcl-dx-persistence-metrics-exporter-image-v1.12.0_20220207-1611.tar.gz - ``` hcl-dx-persistence-node-image-v1.4_20220207-1549.tar.gz - ``` hcl-dx-redis-image-5.0.14.tar.gz - ``` hcl-dx-remote-search-image-v95_CF201_20220206-1331.tar.gz - ``` hcl-dx-ringapi-image-v1.14.0_20220207-1554.tar.gz - ``` hcl-dx-runtime-controller-image-v95_CF201_20220207-1558.tar.gz - ``` hcl-dx-sidecar-image-v1.0.0_8.4-205.tar.gz ## HCL DX 9.5 CF200 - **Container Update CF200** If deploying the HCL DX 9.5 CF200 release, the package name and images are as follows: **HCL DX 9.5 CF200 DXClient files**: - ``` hcl-dxclient-image-v95_CF200_20211213-1500.zip - ``` hcl-dxclient-v95_CF200_20211213-1459.zip **HCL DX 9.5 CF\\_200-hcl-dx-kubernetes-v95-CF200.zip** **Important:** With the Operator-based deployment being removed starting in HCL DX Container Update 9.5 CF200, you will find some changes in the list of files and their names in CF199 and later releases. For more information, see [List of image files and changes from CF198 and later](#simpletable_cst_4lf_yrb). - ``` HCL DX notices V9.5 CF200.txt - ``` hcl-dx-ambassador-image-1142.tar.gz - ``` hcl-dx-content-composer-image-v1.13.0_20211213-1443.tar.gz - ``` hcl-dx-core-image-v95_CF200_20211213-1442.tar.gz - ``` hcl-dx-deployment-v2.2.0_20211213-1446.tgz - ``` hcl-dx-design-studio-image-v0.6.0_20211213-1448.tar.gz - ``` hcl-dx-digital-asset-manager-image-v1.12.0_20211213-1448.tar.gz - ``` hcl-dx-experience-api-sample-ui-v0.2.0.20211213-1454.zip - ``` hcl-dx-image-processor-image-v1.13.0_20211213-1446.tar.gz - ``` hcl-dx-openldap-image-v1.2.0_20211213-1444.tar.gz - ``` hcl-dx-persistence-connection-pool-image-v1.13.0_20211213-1457.tar.gz - ``` hcl-dx-persistence-image-v1.13.0_20211213-1457.tar.gz - ``` hcl-dx-persistence-metrics-exporter-image-v1.11.0_20211213-1458.tar.gz - ``` hcl-dx-persistence-node-image-v1.3_20211213-1454.tar.gz - ``` hcl-dx-redis-image-5.0.14.tar.gz - ``` hcl-dx-remote-search-image-v95_CF200_20211213-1442.tar.gz - ``` hcl-dx-ringapi-image-v1.13.0_20211213-1457.tar.gz - ``` hcl-dx-runtime-controller-image-v95_CF200_20211213-1444.tar.gz - ``` hcl-dx-sidecar-image-v1.0.0_8.4-205.tar.gz HCL DX 9.5 CF199 Container Update CF199 If deploying the HCL DX 9.5 CF199 release, the package name and images are as follows: HCL DX 9.5 CF199 DXClient files : ``` hcl-dxclient-image-v95_CF199_20211029-1357.zip - ``` hcl-dxclient-v95_CF199_20211029-1357.zip **HCL DX 9.5 CF\\_199-hcl-dx-kubernetes-v95-CF199.zip** - ``` HCL DX notices V9.5 CF199.txt - ``` hcl-dx-ambassador-image-154.tar.gz - ``` hcl-dx-cloud-operator-image-v95_CF199_20211029-1700.tar.gz - ``` hcl-dx-cloud-scripts-v95_CF199_20211029-1700.zip - ``` hcl-dx-content-composer-image-v1.12.0_20211029-1341.tar.gz - ``` hcl-dx-core-image-v95_CF199_20211029-1348.tar.gz - ``` hcl-dx-deployment-v2.1.0_20211029-1346.tgz - ``` hcl-dx-design-studio-image-v0.5.0_20211029-0013.tar.gz - ``` hcl-dx-digital-asset-management-operator-image-v95_CF199_20211029-1342.tar.gz - ``` hcl-dx-digital-asset-manager-image-v1.11.0_20211029-1350.tar.gz - ``` hcl-dx-experience-api-sample-ui-v0.2.0.20211029-1354.zip - ``` hcl-dx-image-processor-image-v1.12.0_20211029-1346.tar.gz - ``` hcl-dx-openldap-image-v1.2.0_20211029-1342.tar.gz - ``` hcl-dx-persistence-connection-pool-image-v1.11.0_20211029-0224.tar.gz - ``` hcl-dx-persistence-image-v1.11.0_20211029-1349.tar.gz - ``` hcl-dx-persistence-metrics-exporter-image-v1.10.0_20211029-1352.tar.gz - ``` hcl-dx-persistence-node-image-v1.1_20211029-0148.tar.gz - ``` hcl-dx-redis-image-5.0.1.tar.gz - ``` hcl-dx-remote-search-image-v95_CF199_20211029-1348.tar.gz - ``` hcl-dx-ringapi-image-v1.12.0_20211029-1357.tar.gz - ``` hcl-dx-runtime-controller-image-v95_CF199_20211029-1344.tar.gz - ``` hcl-dx-sidecar-image-v1.0.0_8.4-205.tar.gz Important: With the Operator-based deployment being deprecated in CF198 and planned to be removed in HCL DX Container Update 9.5 CF200, you will find some changes in the list of files and their names in CF199 and later releases. Component Image name CF198 CF199 DX Core hcl-dx-core-image-vx.x.x_xxxxxxxx-xxxx.tar.gz hcl-dx-core-image-v95_CF198_20210917-1438.tar.gz hcl-dx-core-image-v95_CF199_20211029-1348.tar.gz Ring API hcl-dx-ringapi-image-vx.x.x_xxxxxxxx-xxxx.tar.gz hcl-dx-ringapi-image-v1.11.0_20210917-1441.tar.gz hcl-dx-ringapi-image-v1.12.0_20211029-1357.tar.gz Content Composer hcl-dx-content-composer-image-vx.x.x_xxxxxxxx-xxxx.tar.gz hcl-dx-content-composer-image-v1.10.0_20210917-1437.tar.gz hcl-dx-content-composer-image-v1.12.0_20211029-1341.tar.gz DX Deployment hcl-dx-deployment-vx.x.x_xxxxxxxx-xxxx.tgz hcl-dx-deployment-v2.0.0_20210917-1441.tgz hcl-dx-deployment-v2.1.0_20211029-1346.tgz Design Studio hcl-dx-design-studio-image- vx.x.x_xxxxxxxx-xxxx.tar.gz hcl-dx-site-manager-image-v0.4.0_20210917-1445.tar.gz hcl-dx-design-studio-image-v0.5.0_20211029-0013.tar.gz Digital Asset Management hcl-dx-digital-asset-manager-image- vx.x.x_xxxxxxxx-xxxx.tar.gz hcl-dx-digital-asset-manager-image-v1.10.0_20210917-1444.tar.gz hcl-dx-digital-asset-manager-image-v1.11.0_20211029-1350.tar.gz Persistence Connection Pool hcl-dx-persistence-connection-pool-image- vx.x.x_xxxxxxxx-xxxx.tar.gz hcl-dx-postgres-persistence-pgpool-image-v1.11.0_20210916-0224.tar.gz hcl-dx-persistence-connection-pool-image-v1.11.0_20211029-0224.tar.gz Persistence Node hcl-dx-persistence-node-image-vx.x.x_xxxxxxxx-xxxx.tar.gz hcl-dx-persistence-postgres-repmgr-image-v1.1_20210916-0148.tar.gz hcl-dx-persistence-node-image-v1.1_20211029-0148.tar.gz Persistence Metrics Exporter hcl-dx-persistence-metrics-exporter-image-vx.x.x_xxxxxxxx-xxxx.tar.gz NA hcl-dx-persistence-metrics-exporter-image-v1.10.0_20211029-1352.tar.gz Persistence hcl-dx-persistence-image- vx.x.x_xxxxxxxx-xxxx.tar.gz hcl-dx-postgres-image-v1.11.0_20210917-1444.tar.gz hcl-dx-persistence-image-v1.11.0_20211029-1349.tar.gz DX Experience API hcl-dx-experience-api-sample-ui-vx.x.x.xxxxxxxx-xxxx.zip hcl-dx-experience-api-sample-ui-v0.2.0.20210917-1439.zip hcl-dx-experience-api-sample-ui-v0.2.0.20211029-1354.zip Image processor hcl-dx-image-processor-image-vx.x.x_xxxxxxxx-xxxx.tar.gz hcl-dx-image-processor-image-v1.11.0_20210917-1449.tar.gz hcl-dx-image-processor-image-v1.12.0_20211029-1346.tar.gz Open LDAP hcl-dx-openldap-image-vx.x.x_xxxxxxxx-xxxx.tar.gz hcl-dx-openldap-image-v1.2.0_20210917-1437.tar.gz hcl-dx-openldap-image-v1.2.0_20211029-1342.tar.gz Remote search hcl-dx-remote-search-image-v95_CFxxx_xxxxxxxx-xxxx.tar.gz hcl-dx-remote-search-image-v95_CF198_20210917-1438.tar.gz hcl-dx-remote-search-image-v95_CF199_20211029-1348.tar.gz Runtime Controller hcl-dx-runtime-controller-image-v95_CFxxx_xxxxxxxx-xxxx.tar.gz hcl-dx-runtime-controller-image-v95_CF198_20210917-1441.tar.gz hcl-dx-runtime-controller-image-v95_CF199_20211029-1344.tar.gz Ambassador hcl-dx-ambassador-image-xxx.tar.gz hcl-dx-ambassador-image-154.tar.gz hcl-dx-ambassador-image-154.tar.gz Redis hcl-dx-redis-image-x.x.x.tar.gz hcl-dx-redis-image-5.0.1.tar.gz hcl-dx-redis-image-5.0.1.tar.gz Sidecar hcl-dx-sidecar-image-vx.x._x.x-xxx.tar.gz NA hcl-dx-sidecar-image-v1.0.0_8.4-205.tar.gz Note: The new image files and the change in file names are highlighted in the table. HCL DX 9.5 CF198 CF198 If deploying HCL DX 9.5 CF198 release, the package name and images are as follows: HCL DX 9.5 CF198 DXClient files : ``` hcl-dxclient-image-v95_CF198_20210917-1455.zip - ``` hcl-dxclient-v95_CF198_20210917-1455.zip **HCL DX 9.5 CF198 - hcl-dx-kubernetes-v95-CF198.zip**: - ``` HCL DX notices V9.5 CF198.txt - ``` hcl-dx-ambassador-image-154.tar.gz - ``` hcl-dx-cloud-operator-image-v95_CF198_20210917-1749.tar.gz - ``` hcl-dx-cloud-scripts-v95_CF198_20210917-1749.zip - ``` hcl-dx-content-composer-image-v1.10.0_20210917-1437.tar.gz - ``` hcl-dx-core-image-v95_CF198_20210917-1438.tar.gz - ``` hcl-dx-deployment-v2.0.0_20210917-1441.tgz - ``` hcl-dx-digital-asset-management-operator-image-v95_CF198_20210917-1437.tar.gz - ``` hcl-dx-digital-asset-manager-image-v1.10.0_20210917-1444.tar.gz - ``` hcl-dx-experience-api-sample-ui-v0.2.0.20210917-1439.zip - ``` hcl-dx-image-processor-image-v1.11.0_20210917-1449.tar.gz - ``` hcl-dx-openldap-image-v1.2.0_20210917-1437.tar.gz - ``` hcl-dx-persistence-postgres-repmgr-image-v1.1_20210916-0148.tar.gz - ``` hcl-dx-postgres-image-v1.11.0_20210917-1444.tar.gz - ``` hcl-dx-postgres-persistence-pgpool-image-v1.11.0_20210916-0224.tar.gz - ``` hcl-dx-redis-image-5.0.1.tar.gz - ``` hcl-dx-remote-search-image-v95_CF198_20210917-1438.tar.gz - ``` hcl-dx-ringapi-image-v1.11.0_20210917-1441.tar.gz - ``` hcl-dx-runtime-controller-image-v95_CF198_20210917-1441.tar.gz - ``` hcl-dx-site-manager-image-v0.4.0_20210917-1445.tar.gz HCL DX 9.5 CF197 CF197 If deploying HCL DX 9.5 CF197 release, the package name and images are as follows: HCL DX 9.5 CF197 Client - hcl-dx-client-v95-CF197.zip : ``` hcl-dxclient-image-v95_CF197_20210806-1311.zip - ``` hcl-dxclient-v95_CF197_20210806-1311.zip **HCL DX 9.5 CF197 - hcl-dx-kubernetes-v95-CF197.zip**: - ``` HCL DX notices V9.5 CF197.txt - ``` hcl-dx-ambassador-image-154.tar.gz - ``` hcl-dx-cloud-operator-image-v95_CF197_20210806-1310.tar.gz - ``` hcl-dx-cloud-scripts-v95_CF197_20210806-1310.zip - ``` hcl-dx-content-composer-image-v1.10.0_20210806-1258.tar.gz - ``` hcl-dx-core-image-v95_CF197_20210806-1259.tar.gz - ``` hcl-dx-deployment-v2.0.0_20210806-1300.tgz - ``` hcl-dx-digital-asset-management-operator-image-v95_CF197_20210806-1258.tar.gz - ``` hcl-dx-digital-asset-manager-image-v1.10.0_20210806-1302.tar.gz - ``` hcl-dx-experience-api-sample-ui-v0.2.0.20210806-1308.zip - ``` hcl-dx-image-processor-image-v1.10.0_20210806-1300.tar.gz - ``` hcl-dx-openldap-image-v1.2.0_20210806-1258.tar.gz - ``` hcl-dx-postgres-image-v1.10.0_20210806-1302.tar.gz - ``` hcl-dx-redis-image-5.0.1.tar.gz - ``` hcl-dx-remote-search-image-v95_CF197_20210806-1259.tar.gz - ``` hcl-dx-ringapi-image-v1.10.0_20210806-1311.tar.gz - ``` hcl-dx-runtime-controller-image-v95_CF197_20210806-1258.tar.gz - ``` hcl-dx-site-manager-image-v0.3.0_20210806-1308.tar.gz HCL DX 9.5 CF196 CF196 If deploying HCL DX 9.5 CF196 release, the package name and images are as follows: HCL DX 9.5 CF196 Client - hcl-dx-client-v95-CF196.zip : ``` hcl-dxclient-image-v95_CF196_20210625-2028.zip - ``` hcl-dxclient-v95_CF196_20210625-2029.zip **HCL DX 9.5 CF196 - hcl-dx-kubernetes-v95-CF196.zip**: - ``` HCL DX notices V9.5 CF196.txt - ``` hcl-dx-ambassador-image-154.tar.gz - ``` hcl-dx-cloud-operator-image-v95_CF196_20210625-2033.tar.gz - ``` hcl-dx-cloud-scripts-v95_CF196_20210625-2033.zip - ``` hcl-dx-content-composer-image-v1.9.0_20210625-2012.tar.gz - ``` hcl-dx-core-image-v95_CF196_20210625-2011.tar.gz - ``` hcl-dx-deployment-v1.0.0_20210625-2026.tgz - ``` hcl-dx-digital-asset-management-operator-image-v95_CF196_20210625-2013.tar.gz - ``` hcl-dx-digital-asset-manager-image-v1.9.0_20210625-2016.tar.gz - ``` hcl-dx-experience-api-sample-ui-v0.2.0.20210625-2023.zip - ``` hcl-dx-image-processor-image-v1.8.0_20210625-2015.tar.gz - ``` hcl-dx-openldap-image-v1.2.0_20210625-2013.tar.gz - ``` hcl-dx-postgres-image-v1.9.0_20210625-2016.tar.gz - ``` hcl-dx-redis-image-5.0.1.tar.gz - ``` hcl-dx-remote-search-image-v95_CF196_20210625-2011.tar.gz - ``` hcl-dx-ringapi-image-v1.9.0_20210625-2026.tar.gz - ``` hcl-dx-runtime-controller-image-v95_CF196_20210625-2013.tar.gz - ``` hcl-dx-site-manager-image-v0.2.0_20210625-2023.tar.gz HCL DX 9.5 CF195 CF195 If deploying HCL DX 9.5 CF195 release, the package name and images are as follows: HCL DX 9.5 CF195 Client - hcl-dx-client-v95-CF195.zip : ``` dxclient_v1.4.0_20210514-1713.zip **HCL DX 9.5 CF195 - hcl-dx-kubernetes-v95-CF195.zip**: - ``` HCL DX notices V9.5 CF195.txt - ``` dxclient_v1.4.0_20210514-1713.zip - ``` hcl-dx-ambassador-image-154.tar.gz - ``` hcl-dx-cloud-operator-image-v95_CF195_20210515-0201.tar.gz - ``` hcl-dx-cloud-scripts-v95_CF195_20210514-1707.zip - ``` hcl-dx-content-composer-image-v1.8.0_20210514-1707.tar.gz - ``` hcl-dx-core-image-v95_CF195_20210514-1708.tar.gz - ``` hcl-dx-digital-asset-management-operator-image-v95_CF195_20210514-1714.tar.gz - ``` hcl-dx-digital-asset-manager-image-v1.8.0_20210514-1711.tar.gz - ``` hcl-dx-experience-api-sample-ui-v0.2.0.20210514-1708.zip - ``` hcl-dx-image-processor-image-v1.8.0_20210514-1712.tar.gz - ``` hcl-dx-openldap-image-v1.1.0-master_20210514_1621013302.tar.gz - ``` hcl-dx-postgres-image-v1.8.0_20210514-1708.tar.gz - ``` hcl-dx-redis-image-5.0.1.tar.gz - ``` hcl-dx-remote-search-image-v95_CF195_20210514-1708.tar.gz - ``` hcl-dx-ringapi-image-v1.8.0_20210514-1709.tar.gz ## HCL DX 9.5 CF194 - **CF194** Important note: Please consult the HCL DX Support Knowledge Base article, [Manual Steps to Apply the Digital Experience 9.5 Container Deployment Core Certificate Update](https://support.hcltechsw.com/csm?id=kb_article&sysparm_article=KB0089699), to apply the certificate update to your HCL DX 9.5 container deployment. If deploying HCL DX 9.5 CF194 release, the package name and images are as follows: **HCL DX 9.5 CF194 Client - hcl-dx-client-v95-CF194.zip**: - ``` dxclient_v1.3.0_20210415-2128.zip **HCL DX 9.5 CF194 - hcl-dx-kubernetes-v95-CF194.zip**: - ``` HCL DX notices V9.5 CF194.txt - ``` dxclient_v1.3.0_20210415-2128.zip - ``` hcl-dx-ambassador-image-154.tar.gz - ``` hcl-dx-cloud-operator-image-v95_CF194_20210416-0233.tar.gz - ``` hcl-dx-cloud-scripts-v95_CF194_20210416-0233.zip - ``` hcl-dx-content-composer-image-v1.7.0_20210415-2121.tar.gz - ``` hcl-dx-core-image-v95_CF194_20210415-2120.tar.gz - ``` hcl-dx-digital-asset-management-operator-image-v95_CF194_20210415-2127.tar.gz - ``` hcl-dx-experience-api-sample-ui-v0.2.0.20210415-2121.zip - ``` hcl-dx-image-processor-image-v1.7.0_20210415-2120.tar.gz - ``` hcl-dx-openldap-image-v1.1.0-master_20210416_1618540820.tar.gz - ``` hcl-dx-postgres-image-v1.7.0_20210415-2120.tar.gz - ``` hcl-dx-redis-image-5.0.1.tar.gz - ``` hcl-dx-remote-search-image-v95_CF194_20210415-2120.tar.gz HCL DX 9.5 CF193 CF193 If deploying HCL DX 9.5 CF193 release, the package name and images are as follows: HCL DX 9.5 CF193 Client - hcl-dx-client-v95-CF193.zip : ``` dxclient_v1.3.0_20210331-1335.zip **HCL DX 9.5 CF193 - hcl-dx-kubernetes-v95-CF193.zip**: - ``` HCL DX notices V9.5 CF193.txt - ``` dxclient_v1.3.0_20210331-1335.zip - ``` hcl-dx-ambassador-image-154.tar.gz - ``` hcl-dx-cloud-operator-image-v95_CF193_20210331-1847.tar.gz - ``` hcl-dx-cloud-scripts-v95_CF193_20210331-1847.zip - ``` hcl-dx-content-composer-image-v1.7.0_20210331-1333.tar.gz - ``` hcl-dx-core-image-v95_CF193_20210331-1336.tar.gz - ``` hcl-dx-digital-asset-management-operator-image-v95_CF193_20210331-1335.tar.gz - ``` hcl-dx-digital-asset-manager-image-v1.7.0_20210331-1339.tar.gz - ``` hcl-dx-experience-api-sample-ui-v0.2.0.20210331-1343.zip - ``` hcl-dx-image-processor-image-v1.7.0_20210331-1336.tar.gz - ``` hcl-dx-openldap-image-v1.1.0-master_20210331_1617216873.tar.gz - ``` hcl-dx-postgres-image-v1.7.0_20210331-1337.tar.gz - ``` hcl-dx-redis-image-5.0.1.tar.gz - ``` hcl-dx-remote-search-image-v95_CF193_20210331-1336.tar.gz - ``` hcl-dx-ringapi-image-v1.7.0_20210331-1339.tar.gz ## HCL DX 9.5 CF192 - **CF192** If deploying HCL DX 9.5 CF192 release, the package name and images are as follows: **hcl-dx-kubernetes-v95-CF192.zip**: - ``` HCL DX notices V9.5 CF192.txt - ``` dxclient_v1.2.0_20210305-1758.zip - ``` hcl-dx-ambassador-image-154.tar.gz - ``` hcl-dx-cloud-operator-image-v95_CF192_20210305-2309.tar.gz - ``` hcl-dx-cloud-scripts-v95_CF192_20210305-2309.zip - ``` hcl-dx-content-composer-image-v1.6.0_20210305-1756.tar.gz - ``` hcl-dx-core-image-v95_CF192_20210305-1758.tar.gz - ``` hcl-dx-digital-asset-management-operator-image-v95_CF192_20210305-1757.tar.gz - ``` hcl-dx-digital-asset-manager-image-v1.6.0_20210305-1802.tar.gz - ``` hcl-dx-experience-api-sample-ui-v0.2.0.20210305-1805.zip - ``` hcl-dx-image-processor-image-v1.6.0_20210305-1758.tar.gz - ``` hcl-dx-openldap-image-v1.0.0-master_20210305_1614986151.tar.gz - ``` hcl-dx-postgres-image-v1.6.0_20210305-1800.tar.gz - ``` hcl-dx-redis-image-5.0.1.tar.gz - ``` hcl-dx-remote-search-image-v95_CF192_20210305-1758.tar.gz - ``` hcl-dx-ringapi-image-v1.6.0_20210305-1802.tar.gz ## HCL DX 9.5 CF191 - **CF191** If deploying HCL DX 9.5 CF191 release, the package name and images are as follows: **hcl-dx-kubernetes-v95-CF191.zip** file: - ``` HCL DX notices V9.5 CF191.txt - ``` hcl-dx-ambassador-image-154.tar.gz - ``` hcl-dx-cloud-operator-image-v95_CF191_20201214-1527.tar.gz - ``` hcl-dx-cloud-scripts-v95_CF191_20201214-1527.zip - ``` hcl-dx-content-composer-image-v1.5.0_20201211-2151.tar.gz - ``` hcl-dx-core-image-v95_CF191_20201212-1421.tar.gz - ``` hcl-dx-digital-asset-management-operator-image-v95_CF191_20201211-2152.tar.gz - ``` hcl-dx-digital-asset-manager-image-v1.5.0_20201211-2155.tar.gz - ``` hcl-dx-experience-api-sample-ui-v0.2.0.20201211-2205.zip - ``` hcl-dx-image-processor-image-v1.5.0_20201211-2154.tar.gz - ``` hcl-dx-openldap-image-v1.0.0-master_20201212_1607741365.tar.gz - ``` hcl-dx-postgres-image-v1.5.0_20201211-2155.tar.gz - ``` hcl-dx-redis-image-5.0.1.tar.gz - ``` hcl-dx-remote-search-image-v95_CF191_20201212-1421.tar.gz - ``` hcl-dx-ringapi-image-v1.5.0_20201211-2200.tar.gz - ``` dxclient_v1.1.0_20201211-2153.zip **Note:** HCL DX 9.5 CF191 images are available and may be installed. HCL DX 9.5 CF191 is supported for new deployments only. DX administrators should not upgrade DX 9.5 container deployments to this release. ## HCL DX 9.5 CF19 - **CF19** If deploying HCL DX 9.5 CF19 release, the package name and images are as follows: **hcl-dx-kubernetes-v95-CF19.zip file**: - ``` HCL DX notices V9.5 CF19.txt - ``` hcl-dx-ambassador-image-154.tar.gz - ``` hcl-dx-cloud-operator-image-v95_CF19_20201110-0401.tar.gz - ``` hcl-dx-cloud-scripts-v95_CF19_20201110-0401.zip - ``` hcl-dx-content-composer-image-v1.4.0_20201109-2203.tar.gz - ``` hcl-dx-core-image-v95_CF19_20201109-2312.tar.gz - ``` hcl-dx-digital-asset-management-operator-image-v95_CF19_20201109-2204.tar.gz - ``` hcl-dx-digital-asset-manager-image-v1.4.0_20201109-2206.tar.gz - ``` hcl-dx-experience-api-sample-ui-v0.2.0.20201109-2208.zip - ``` hcl-dx-image-processor-image-v1.4.0_20201109-2204.tar.gz - ``` hcl-dx-openldap-image-v1.0.0-master_20201110_1604981292.tar.gz - ``` hcl-dx-postgres-image-v1.4.0_20201109-2206.tar.gz - ``` hcl-dx-redis-image-5.0.1.tar.gz - ``` hcl-dx-remote-search-image-v95_CF19_20201109-2312.tar.gz - ``` hcl-dx-ringapi-image-v1.4.0_20201109-2209.tar.gz - ``` dxclient_v1.0.0_20201110-2010.zip ## HCL DX 9.5 CF184 - **HCL DX 9.5 Container Update CF184** If deploying HCL DX 9.5 CF184 release, the package name and images are as follows: **hcl-dx-kubernetes-v95-CF184.zip files**: - ``` HCL DX notices V9.5 CF184.txt - ``` hcl-dx-ambassador-image-154.tar.gz - ``` hcl-dx-cloud-operator-image-v95_CF184_20200917-0054.tar.gz - ``` hcl-dx-cloud-scripts-v95_CF184_20200917-0054.zip - ``` hcl-dx-content-composer-image-v1.3.0_20200916-1952.tar.gz - ``` hcl-dx-core-image-v95_CF184_20200916-2009.tar.gz - ``` hcl-dx-digital-asset-management-operator-image-v95_CF184_20200916-2034.tar.gz - ``` hcl-dx-digital-asset-manager-image-v1.3.0_20200916-1953.tar.gz - ``` hcl-dx-image-processor-image-v1.3.0_20200916-1953.tar.gz - ``` hcl-dx-openldap-image-v1.0.0-master_20200917_1600304449.tar.gz - ``` hcl-dx-postgres-image-v1.3.0_20200916-2003.tar.gz - ``` hcl-dx-redis-image-5.0.1.tar.gz - ``` hcl-dx-remote-search-image-v95_CF184_20200916-2009.tar.gz - ``` hcl-dx-ringapi-image-v1.3.0_20200916-1953.tar.gz ## HCL DX 9.5 CF183 - **HCL DX 9.5 Container Update CF183** If deploying HCL DX 9.5 CF183 release, the image and package names are as follows: **CF183-core.zip files**: - ``` HCL DX notices V9.5 CF183.txt - ``` hcl-dx-ambassador-image-154.tar.gz - ``` hcl-dx-cloud-operator-image-v95_CF183_20200818-1852.tar.gz - ``` hcl-dx-cloud-scripts-v95_CF183_20200818-1852.zip - ``` hcl-dx-core-image-v95_CF183_20200818-1342.tar.gz - ``` hcl-dx-redis-image-5.0.1.tar.gz **CF183-other.zip files**: - ``` HCL DX notices V9.5 CF183.txt - ``` hcl-dx-content-composer-image-v1.2.0_20200818-1343.tar.gz - ``` hcl-dx-digital-asset-management-operator-image-v95_CF183_20200818-1344.tar.gz - ``` hcl-dx-digital-asset-manager-image-v1.2.0_20200818-1346.tar.gz - ``` hcl-dx-image-processor-image-v1.2.0_20200818-1345.tar.gz - ``` hcl-dx-openldap-image-v1.0.0-master_20200818_1597758965.tar.gz - ``` hcl-dx-postgres-image-v1.2.0_20200818-1349.tar.gz - ``` hcl-dx-remote-search-image-v95_CF183_20200818-1342.tar.gz - ``` hcl-dx-ringapi-image-v1.2.0_20200818-1351.tar.gz HCL DX 9.5 CF182 CF182 If deploying HCL DX 9.5 CF182 release, the image and package names are as follows: hcl-dx-kubernetes-v95-CF182-core.zip : ``` HCL DX notices V9.5 CF182.txt - ``` hcl-dx-ambassador-image-0850.tar.gz - ``` hcl-dx-cloud-operator-image-v95_CF182_20200720-1708.tar.gz - ``` hcl-dx-cloud-scripts-v95_CF182_20200720-1708.zip - ``` hcl-dx-core-image-v95_CF182_20200720-1645.tar.gz **hcl-dx-kubernetes-v95-CF182-other.zip**: - ``` HCL DX notices V9.5 CF182.txt - ``` hcl-dx-content-composer-image-v1.1.0_20200720-1708.tar.gz - ``` hcl-dx-digital-asset-management-operator-image-v95_CF182_20200720-1716.tar.gz - ``` hcl-dx-digital-asset-manager-image-v1.1.0_20200720-1712.tar.gz - ``` hcl-dx-image-processor-image-v1.1.0_20200720-1716.tar.gz - ``` hcl-dx-openldap-image-v1.0.0-master_20200720_1595265588.tar.gz - ``` hcl-dx-postgres-image-v1.1.0_20200720-1715.tar.gz - ``` hcl-dx-remote-search-image-v95_CF182_20200720-1645.tar.gz - ``` hcl-dx-ringapi-image-v1.1.0_20200720-1707.tar.gz HCL DX 9.5 CF181 CF181 If deploying HCL DX 9.5 CF181 and later container update release, the image and package names add HCL DX 9.5 Content Composer and Digital Asset Management components and supporting services images, as well as Remote Search and OpenLDAP images. See the following list of images presented within the HCL DX 9.5 Container Update CF181 package: hcl-dx-kubernetes-v95-CF181-core.zip : ``` hcl-dx-cloud-scripts-v95_CF181_xxxxxxxx-xxxx.zip - ``` hcl-dx-core-image-v95_CF181_xxxxxxxx-xxxx.tar.gz - ``` hcl-dx-cloud-operator-image-v95_CF181_xxxxxxxx-xxxx.tar.gz - ``` hcl-dx-ambassador-image-xxxx.tar.gz - ``` HCL DX notices V9.5 CF181.txt **hcl-dx-kubernetes-v95-CF181-other.zip**: - ``` hcl-dx-ringapi-image-v1.0.0_xxxxxxxx-xxxx.tar.gz - ``` hcl-dx-postgres-image-v1.0.0_xxxxxxxx-xxxx.tar.gz - ``` hcl-dx-openldap-image-v1.0.0-release_xxxxxxxx_xxxxxxxxxx.tar.gz - ``` hcl-dx-medialibrary-operator-image-v95_CF181_xxxxxxxx-xxxx.tar.gz - ``` hcl-dx-image-processor-image-v1.0.0_xxxxxxxx-xxxx.tar.gz - ``` hcl-dx-dxrs-image-v95_CF181_xxxxxxxx-xxxx.tar.gz ## HCL DX 9.5 CF18 - **CF18** If deploying HCL DX 9.5 CF18 and later container update release, the image and package names included for this are: - ``` hcl-dx-kubernetes-v95-CF18.zip - ``` hcl-dx-core-image-v95_CF18_xxxxxxxx-xxxx.tar.gz - ``` hcl-dx-cloud-operator-image-v95_CF18_xxxxxxxx-xxxx.tar.gz - ``` hcl-dx-cloud-scripts-v95_CF18_xxxxxxxx-xxxx.zip - ``` hcl-dx-ambassador-image-xxxx.tar.gz See the following sections for additional information: Docker image deployment Customizing the container deployment Requirements and limitations Parent topic: Digital Experience on containerized platforms","title":"Docker image list"},{"location":"containerization/helm/planning/docker/#docker-image-list","text":"This section presents the latest HCL DX 9.5 Docker container update images available.","title":"Docker image list"},{"location":"containerization/helm/planning/docker/#docker-container-update-file-list","text":"The HCL DX 9.5 container update releases may be obtained from your HCL Digital Experience entitlements in the HCL Software License Portal , in the HCL_Portal_8.5_9.0_9.5_CFs download package entry. Video: How to upload HCL Digital Experience 9.5 CF container images to a private repository","title":"Docker container update file list"},{"location":"containerization/helm/planning/docker/#hcl-dx-95-cf201","text":"Container Update CF201 If deploying the HCL DX 9.5 CF201 release, the package name and images are as follows: HCL DX 9.5 CF201 DXClient files : ``` hcl-dxclient-image-v95_CF201_20220207-1614.zip - ``` hcl-dxclient-v95_CF201_20220207-1613.zip **HCL DX 9.5 CF\\_201-hcl-dx-kubernetes-v95-CF201.zip**: - ``` HCL DX notices V9.5 CF201.txt - ``` hcl-dx-ambassador-image-1142.tar.gz - ``` hcl-dx-content-composer-image-v1.14.0_20220207-1550.tar.gz - ``` hcl-dx-core-image-v95_CF201_20220206-1331.tar.gz - ``` hcl-dx-deployment-v2.4.0_20220207-1606.tgz - ``` hcl-dx-design-studio-image-v0.7.0_20220207-1549.tar.gz - ``` hcl-dx-digital-asset-manager-image-v1.13.0_20220207-1609.tar.gz - ``` hcl-dx-experience-api-sample-ui-v0.2.0.20220207-1549.zip - ``` hcl-dx-image-processor-image-v1.14.0_20220207-1606.tar.gz - ``` hcl-dx-openldap-image-v1.2.0_20220207-1556.tar.gz - ``` hcl-dx-persistence-connection-pool-image-v1.14.0_20220207-1612.tar.gz - ``` hcl-dx-persistence-image-v1.14.0_20220207-1611.tar.gz - ``` hcl-dx-persistence-metrics-exporter-image-v1.12.0_20220207-1611.tar.gz - ``` hcl-dx-persistence-node-image-v1.4_20220207-1549.tar.gz - ``` hcl-dx-redis-image-5.0.14.tar.gz - ``` hcl-dx-remote-search-image-v95_CF201_20220206-1331.tar.gz - ``` hcl-dx-ringapi-image-v1.14.0_20220207-1554.tar.gz - ``` hcl-dx-runtime-controller-image-v95_CF201_20220207-1558.tar.gz - ``` hcl-dx-sidecar-image-v1.0.0_8.4-205.tar.gz ## HCL DX 9.5 CF200 - **Container Update CF200** If deploying the HCL DX 9.5 CF200 release, the package name and images are as follows: **HCL DX 9.5 CF200 DXClient files**: - ``` hcl-dxclient-image-v95_CF200_20211213-1500.zip - ``` hcl-dxclient-v95_CF200_20211213-1459.zip **HCL DX 9.5 CF\\_200-hcl-dx-kubernetes-v95-CF200.zip** **Important:** With the Operator-based deployment being removed starting in HCL DX Container Update 9.5 CF200, you will find some changes in the list of files and their names in CF199 and later releases. For more information, see [List of image files and changes from CF198 and later](#simpletable_cst_4lf_yrb). - ``` HCL DX notices V9.5 CF200.txt - ``` hcl-dx-ambassador-image-1142.tar.gz - ``` hcl-dx-content-composer-image-v1.13.0_20211213-1443.tar.gz - ``` hcl-dx-core-image-v95_CF200_20211213-1442.tar.gz - ``` hcl-dx-deployment-v2.2.0_20211213-1446.tgz - ``` hcl-dx-design-studio-image-v0.6.0_20211213-1448.tar.gz - ``` hcl-dx-digital-asset-manager-image-v1.12.0_20211213-1448.tar.gz - ``` hcl-dx-experience-api-sample-ui-v0.2.0.20211213-1454.zip - ``` hcl-dx-image-processor-image-v1.13.0_20211213-1446.tar.gz - ``` hcl-dx-openldap-image-v1.2.0_20211213-1444.tar.gz - ``` hcl-dx-persistence-connection-pool-image-v1.13.0_20211213-1457.tar.gz - ``` hcl-dx-persistence-image-v1.13.0_20211213-1457.tar.gz - ``` hcl-dx-persistence-metrics-exporter-image-v1.11.0_20211213-1458.tar.gz - ``` hcl-dx-persistence-node-image-v1.3_20211213-1454.tar.gz - ``` hcl-dx-redis-image-5.0.14.tar.gz - ``` hcl-dx-remote-search-image-v95_CF200_20211213-1442.tar.gz - ``` hcl-dx-ringapi-image-v1.13.0_20211213-1457.tar.gz - ``` hcl-dx-runtime-controller-image-v95_CF200_20211213-1444.tar.gz - ``` hcl-dx-sidecar-image-v1.0.0_8.4-205.tar.gz","title":"HCL DX 9.5 CF201"},{"location":"containerization/helm/planning/docker/#hcl-dx-95-cf199","text":"Container Update CF199 If deploying the HCL DX 9.5 CF199 release, the package name and images are as follows: HCL DX 9.5 CF199 DXClient files : ``` hcl-dxclient-image-v95_CF199_20211029-1357.zip - ``` hcl-dxclient-v95_CF199_20211029-1357.zip **HCL DX 9.5 CF\\_199-hcl-dx-kubernetes-v95-CF199.zip** - ``` HCL DX notices V9.5 CF199.txt - ``` hcl-dx-ambassador-image-154.tar.gz - ``` hcl-dx-cloud-operator-image-v95_CF199_20211029-1700.tar.gz - ``` hcl-dx-cloud-scripts-v95_CF199_20211029-1700.zip - ``` hcl-dx-content-composer-image-v1.12.0_20211029-1341.tar.gz - ``` hcl-dx-core-image-v95_CF199_20211029-1348.tar.gz - ``` hcl-dx-deployment-v2.1.0_20211029-1346.tgz - ``` hcl-dx-design-studio-image-v0.5.0_20211029-0013.tar.gz - ``` hcl-dx-digital-asset-management-operator-image-v95_CF199_20211029-1342.tar.gz - ``` hcl-dx-digital-asset-manager-image-v1.11.0_20211029-1350.tar.gz - ``` hcl-dx-experience-api-sample-ui-v0.2.0.20211029-1354.zip - ``` hcl-dx-image-processor-image-v1.12.0_20211029-1346.tar.gz - ``` hcl-dx-openldap-image-v1.2.0_20211029-1342.tar.gz - ``` hcl-dx-persistence-connection-pool-image-v1.11.0_20211029-0224.tar.gz - ``` hcl-dx-persistence-image-v1.11.0_20211029-1349.tar.gz - ``` hcl-dx-persistence-metrics-exporter-image-v1.10.0_20211029-1352.tar.gz - ``` hcl-dx-persistence-node-image-v1.1_20211029-0148.tar.gz - ``` hcl-dx-redis-image-5.0.1.tar.gz - ``` hcl-dx-remote-search-image-v95_CF199_20211029-1348.tar.gz - ``` hcl-dx-ringapi-image-v1.12.0_20211029-1357.tar.gz - ``` hcl-dx-runtime-controller-image-v95_CF199_20211029-1344.tar.gz - ``` hcl-dx-sidecar-image-v1.0.0_8.4-205.tar.gz Important: With the Operator-based deployment being deprecated in CF198 and planned to be removed in HCL DX Container Update 9.5 CF200, you will find some changes in the list of files and their names in CF199 and later releases. Component Image name CF198 CF199 DX Core hcl-dx-core-image-vx.x.x_xxxxxxxx-xxxx.tar.gz hcl-dx-core-image-v95_CF198_20210917-1438.tar.gz hcl-dx-core-image-v95_CF199_20211029-1348.tar.gz Ring API hcl-dx-ringapi-image-vx.x.x_xxxxxxxx-xxxx.tar.gz hcl-dx-ringapi-image-v1.11.0_20210917-1441.tar.gz hcl-dx-ringapi-image-v1.12.0_20211029-1357.tar.gz Content Composer hcl-dx-content-composer-image-vx.x.x_xxxxxxxx-xxxx.tar.gz hcl-dx-content-composer-image-v1.10.0_20210917-1437.tar.gz hcl-dx-content-composer-image-v1.12.0_20211029-1341.tar.gz DX Deployment hcl-dx-deployment-vx.x.x_xxxxxxxx-xxxx.tgz hcl-dx-deployment-v2.0.0_20210917-1441.tgz hcl-dx-deployment-v2.1.0_20211029-1346.tgz Design Studio hcl-dx-design-studio-image- vx.x.x_xxxxxxxx-xxxx.tar.gz hcl-dx-site-manager-image-v0.4.0_20210917-1445.tar.gz hcl-dx-design-studio-image-v0.5.0_20211029-0013.tar.gz Digital Asset Management hcl-dx-digital-asset-manager-image- vx.x.x_xxxxxxxx-xxxx.tar.gz hcl-dx-digital-asset-manager-image-v1.10.0_20210917-1444.tar.gz hcl-dx-digital-asset-manager-image-v1.11.0_20211029-1350.tar.gz Persistence Connection Pool hcl-dx-persistence-connection-pool-image- vx.x.x_xxxxxxxx-xxxx.tar.gz hcl-dx-postgres-persistence-pgpool-image-v1.11.0_20210916-0224.tar.gz hcl-dx-persistence-connection-pool-image-v1.11.0_20211029-0224.tar.gz Persistence Node hcl-dx-persistence-node-image-vx.x.x_xxxxxxxx-xxxx.tar.gz hcl-dx-persistence-postgres-repmgr-image-v1.1_20210916-0148.tar.gz hcl-dx-persistence-node-image-v1.1_20211029-0148.tar.gz Persistence Metrics Exporter hcl-dx-persistence-metrics-exporter-image-vx.x.x_xxxxxxxx-xxxx.tar.gz NA hcl-dx-persistence-metrics-exporter-image-v1.10.0_20211029-1352.tar.gz Persistence hcl-dx-persistence-image- vx.x.x_xxxxxxxx-xxxx.tar.gz hcl-dx-postgres-image-v1.11.0_20210917-1444.tar.gz hcl-dx-persistence-image-v1.11.0_20211029-1349.tar.gz DX Experience API hcl-dx-experience-api-sample-ui-vx.x.x.xxxxxxxx-xxxx.zip hcl-dx-experience-api-sample-ui-v0.2.0.20210917-1439.zip hcl-dx-experience-api-sample-ui-v0.2.0.20211029-1354.zip Image processor hcl-dx-image-processor-image-vx.x.x_xxxxxxxx-xxxx.tar.gz hcl-dx-image-processor-image-v1.11.0_20210917-1449.tar.gz hcl-dx-image-processor-image-v1.12.0_20211029-1346.tar.gz Open LDAP hcl-dx-openldap-image-vx.x.x_xxxxxxxx-xxxx.tar.gz hcl-dx-openldap-image-v1.2.0_20210917-1437.tar.gz hcl-dx-openldap-image-v1.2.0_20211029-1342.tar.gz Remote search hcl-dx-remote-search-image-v95_CFxxx_xxxxxxxx-xxxx.tar.gz hcl-dx-remote-search-image-v95_CF198_20210917-1438.tar.gz hcl-dx-remote-search-image-v95_CF199_20211029-1348.tar.gz Runtime Controller hcl-dx-runtime-controller-image-v95_CFxxx_xxxxxxxx-xxxx.tar.gz hcl-dx-runtime-controller-image-v95_CF198_20210917-1441.tar.gz hcl-dx-runtime-controller-image-v95_CF199_20211029-1344.tar.gz Ambassador hcl-dx-ambassador-image-xxx.tar.gz hcl-dx-ambassador-image-154.tar.gz hcl-dx-ambassador-image-154.tar.gz Redis hcl-dx-redis-image-x.x.x.tar.gz hcl-dx-redis-image-5.0.1.tar.gz hcl-dx-redis-image-5.0.1.tar.gz Sidecar hcl-dx-sidecar-image-vx.x._x.x-xxx.tar.gz NA hcl-dx-sidecar-image-v1.0.0_8.4-205.tar.gz Note: The new image files and the change in file names are highlighted in the table.","title":"HCL DX 9.5 CF199"},{"location":"containerization/helm/planning/docker/#hcl-dx-95-cf198","text":"CF198 If deploying HCL DX 9.5 CF198 release, the package name and images are as follows: HCL DX 9.5 CF198 DXClient files : ``` hcl-dxclient-image-v95_CF198_20210917-1455.zip - ``` hcl-dxclient-v95_CF198_20210917-1455.zip **HCL DX 9.5 CF198 - hcl-dx-kubernetes-v95-CF198.zip**: - ``` HCL DX notices V9.5 CF198.txt - ``` hcl-dx-ambassador-image-154.tar.gz - ``` hcl-dx-cloud-operator-image-v95_CF198_20210917-1749.tar.gz - ``` hcl-dx-cloud-scripts-v95_CF198_20210917-1749.zip - ``` hcl-dx-content-composer-image-v1.10.0_20210917-1437.tar.gz - ``` hcl-dx-core-image-v95_CF198_20210917-1438.tar.gz - ``` hcl-dx-deployment-v2.0.0_20210917-1441.tgz - ``` hcl-dx-digital-asset-management-operator-image-v95_CF198_20210917-1437.tar.gz - ``` hcl-dx-digital-asset-manager-image-v1.10.0_20210917-1444.tar.gz - ``` hcl-dx-experience-api-sample-ui-v0.2.0.20210917-1439.zip - ``` hcl-dx-image-processor-image-v1.11.0_20210917-1449.tar.gz - ``` hcl-dx-openldap-image-v1.2.0_20210917-1437.tar.gz - ``` hcl-dx-persistence-postgres-repmgr-image-v1.1_20210916-0148.tar.gz - ``` hcl-dx-postgres-image-v1.11.0_20210917-1444.tar.gz - ``` hcl-dx-postgres-persistence-pgpool-image-v1.11.0_20210916-0224.tar.gz - ``` hcl-dx-redis-image-5.0.1.tar.gz - ``` hcl-dx-remote-search-image-v95_CF198_20210917-1438.tar.gz - ``` hcl-dx-ringapi-image-v1.11.0_20210917-1441.tar.gz - ``` hcl-dx-runtime-controller-image-v95_CF198_20210917-1441.tar.gz - ``` hcl-dx-site-manager-image-v0.4.0_20210917-1445.tar.gz","title":"HCL DX 9.5 CF198"},{"location":"containerization/helm/planning/docker/#hcl-dx-95-cf197","text":"CF197 If deploying HCL DX 9.5 CF197 release, the package name and images are as follows: HCL DX 9.5 CF197 Client - hcl-dx-client-v95-CF197.zip : ``` hcl-dxclient-image-v95_CF197_20210806-1311.zip - ``` hcl-dxclient-v95_CF197_20210806-1311.zip **HCL DX 9.5 CF197 - hcl-dx-kubernetes-v95-CF197.zip**: - ``` HCL DX notices V9.5 CF197.txt - ``` hcl-dx-ambassador-image-154.tar.gz - ``` hcl-dx-cloud-operator-image-v95_CF197_20210806-1310.tar.gz - ``` hcl-dx-cloud-scripts-v95_CF197_20210806-1310.zip - ``` hcl-dx-content-composer-image-v1.10.0_20210806-1258.tar.gz - ``` hcl-dx-core-image-v95_CF197_20210806-1259.tar.gz - ``` hcl-dx-deployment-v2.0.0_20210806-1300.tgz - ``` hcl-dx-digital-asset-management-operator-image-v95_CF197_20210806-1258.tar.gz - ``` hcl-dx-digital-asset-manager-image-v1.10.0_20210806-1302.tar.gz - ``` hcl-dx-experience-api-sample-ui-v0.2.0.20210806-1308.zip - ``` hcl-dx-image-processor-image-v1.10.0_20210806-1300.tar.gz - ``` hcl-dx-openldap-image-v1.2.0_20210806-1258.tar.gz - ``` hcl-dx-postgres-image-v1.10.0_20210806-1302.tar.gz - ``` hcl-dx-redis-image-5.0.1.tar.gz - ``` hcl-dx-remote-search-image-v95_CF197_20210806-1259.tar.gz - ``` hcl-dx-ringapi-image-v1.10.0_20210806-1311.tar.gz - ``` hcl-dx-runtime-controller-image-v95_CF197_20210806-1258.tar.gz - ``` hcl-dx-site-manager-image-v0.3.0_20210806-1308.tar.gz","title":"HCL DX 9.5 CF197"},{"location":"containerization/helm/planning/docker/#hcl-dx-95-cf196","text":"CF196 If deploying HCL DX 9.5 CF196 release, the package name and images are as follows: HCL DX 9.5 CF196 Client - hcl-dx-client-v95-CF196.zip : ``` hcl-dxclient-image-v95_CF196_20210625-2028.zip - ``` hcl-dxclient-v95_CF196_20210625-2029.zip **HCL DX 9.5 CF196 - hcl-dx-kubernetes-v95-CF196.zip**: - ``` HCL DX notices V9.5 CF196.txt - ``` hcl-dx-ambassador-image-154.tar.gz - ``` hcl-dx-cloud-operator-image-v95_CF196_20210625-2033.tar.gz - ``` hcl-dx-cloud-scripts-v95_CF196_20210625-2033.zip - ``` hcl-dx-content-composer-image-v1.9.0_20210625-2012.tar.gz - ``` hcl-dx-core-image-v95_CF196_20210625-2011.tar.gz - ``` hcl-dx-deployment-v1.0.0_20210625-2026.tgz - ``` hcl-dx-digital-asset-management-operator-image-v95_CF196_20210625-2013.tar.gz - ``` hcl-dx-digital-asset-manager-image-v1.9.0_20210625-2016.tar.gz - ``` hcl-dx-experience-api-sample-ui-v0.2.0.20210625-2023.zip - ``` hcl-dx-image-processor-image-v1.8.0_20210625-2015.tar.gz - ``` hcl-dx-openldap-image-v1.2.0_20210625-2013.tar.gz - ``` hcl-dx-postgres-image-v1.9.0_20210625-2016.tar.gz - ``` hcl-dx-redis-image-5.0.1.tar.gz - ``` hcl-dx-remote-search-image-v95_CF196_20210625-2011.tar.gz - ``` hcl-dx-ringapi-image-v1.9.0_20210625-2026.tar.gz - ``` hcl-dx-runtime-controller-image-v95_CF196_20210625-2013.tar.gz - ``` hcl-dx-site-manager-image-v0.2.0_20210625-2023.tar.gz","title":"HCL DX 9.5 CF196"},{"location":"containerization/helm/planning/docker/#hcl-dx-95-cf195","text":"CF195 If deploying HCL DX 9.5 CF195 release, the package name and images are as follows: HCL DX 9.5 CF195 Client - hcl-dx-client-v95-CF195.zip : ``` dxclient_v1.4.0_20210514-1713.zip **HCL DX 9.5 CF195 - hcl-dx-kubernetes-v95-CF195.zip**: - ``` HCL DX notices V9.5 CF195.txt - ``` dxclient_v1.4.0_20210514-1713.zip - ``` hcl-dx-ambassador-image-154.tar.gz - ``` hcl-dx-cloud-operator-image-v95_CF195_20210515-0201.tar.gz - ``` hcl-dx-cloud-scripts-v95_CF195_20210514-1707.zip - ``` hcl-dx-content-composer-image-v1.8.0_20210514-1707.tar.gz - ``` hcl-dx-core-image-v95_CF195_20210514-1708.tar.gz - ``` hcl-dx-digital-asset-management-operator-image-v95_CF195_20210514-1714.tar.gz - ``` hcl-dx-digital-asset-manager-image-v1.8.0_20210514-1711.tar.gz - ``` hcl-dx-experience-api-sample-ui-v0.2.0.20210514-1708.zip - ``` hcl-dx-image-processor-image-v1.8.0_20210514-1712.tar.gz - ``` hcl-dx-openldap-image-v1.1.0-master_20210514_1621013302.tar.gz - ``` hcl-dx-postgres-image-v1.8.0_20210514-1708.tar.gz - ``` hcl-dx-redis-image-5.0.1.tar.gz - ``` hcl-dx-remote-search-image-v95_CF195_20210514-1708.tar.gz - ``` hcl-dx-ringapi-image-v1.8.0_20210514-1709.tar.gz ## HCL DX 9.5 CF194 - **CF194** Important note: Please consult the HCL DX Support Knowledge Base article, [Manual Steps to Apply the Digital Experience 9.5 Container Deployment Core Certificate Update](https://support.hcltechsw.com/csm?id=kb_article&sysparm_article=KB0089699), to apply the certificate update to your HCL DX 9.5 container deployment. If deploying HCL DX 9.5 CF194 release, the package name and images are as follows: **HCL DX 9.5 CF194 Client - hcl-dx-client-v95-CF194.zip**: - ``` dxclient_v1.3.0_20210415-2128.zip **HCL DX 9.5 CF194 - hcl-dx-kubernetes-v95-CF194.zip**: - ``` HCL DX notices V9.5 CF194.txt - ``` dxclient_v1.3.0_20210415-2128.zip - ``` hcl-dx-ambassador-image-154.tar.gz - ``` hcl-dx-cloud-operator-image-v95_CF194_20210416-0233.tar.gz - ``` hcl-dx-cloud-scripts-v95_CF194_20210416-0233.zip - ``` hcl-dx-content-composer-image-v1.7.0_20210415-2121.tar.gz - ``` hcl-dx-core-image-v95_CF194_20210415-2120.tar.gz - ``` hcl-dx-digital-asset-management-operator-image-v95_CF194_20210415-2127.tar.gz - ``` hcl-dx-experience-api-sample-ui-v0.2.0.20210415-2121.zip - ``` hcl-dx-image-processor-image-v1.7.0_20210415-2120.tar.gz - ``` hcl-dx-openldap-image-v1.1.0-master_20210416_1618540820.tar.gz - ``` hcl-dx-postgres-image-v1.7.0_20210415-2120.tar.gz - ``` hcl-dx-redis-image-5.0.1.tar.gz - ``` hcl-dx-remote-search-image-v95_CF194_20210415-2120.tar.gz","title":"HCL DX 9.5 CF195"},{"location":"containerization/helm/planning/docker/#hcl-dx-95-cf193","text":"CF193 If deploying HCL DX 9.5 CF193 release, the package name and images are as follows: HCL DX 9.5 CF193 Client - hcl-dx-client-v95-CF193.zip : ``` dxclient_v1.3.0_20210331-1335.zip **HCL DX 9.5 CF193 - hcl-dx-kubernetes-v95-CF193.zip**: - ``` HCL DX notices V9.5 CF193.txt - ``` dxclient_v1.3.0_20210331-1335.zip - ``` hcl-dx-ambassador-image-154.tar.gz - ``` hcl-dx-cloud-operator-image-v95_CF193_20210331-1847.tar.gz - ``` hcl-dx-cloud-scripts-v95_CF193_20210331-1847.zip - ``` hcl-dx-content-composer-image-v1.7.0_20210331-1333.tar.gz - ``` hcl-dx-core-image-v95_CF193_20210331-1336.tar.gz - ``` hcl-dx-digital-asset-management-operator-image-v95_CF193_20210331-1335.tar.gz - ``` hcl-dx-digital-asset-manager-image-v1.7.0_20210331-1339.tar.gz - ``` hcl-dx-experience-api-sample-ui-v0.2.0.20210331-1343.zip - ``` hcl-dx-image-processor-image-v1.7.0_20210331-1336.tar.gz - ``` hcl-dx-openldap-image-v1.1.0-master_20210331_1617216873.tar.gz - ``` hcl-dx-postgres-image-v1.7.0_20210331-1337.tar.gz - ``` hcl-dx-redis-image-5.0.1.tar.gz - ``` hcl-dx-remote-search-image-v95_CF193_20210331-1336.tar.gz - ``` hcl-dx-ringapi-image-v1.7.0_20210331-1339.tar.gz ## HCL DX 9.5 CF192 - **CF192** If deploying HCL DX 9.5 CF192 release, the package name and images are as follows: **hcl-dx-kubernetes-v95-CF192.zip**: - ``` HCL DX notices V9.5 CF192.txt - ``` dxclient_v1.2.0_20210305-1758.zip - ``` hcl-dx-ambassador-image-154.tar.gz - ``` hcl-dx-cloud-operator-image-v95_CF192_20210305-2309.tar.gz - ``` hcl-dx-cloud-scripts-v95_CF192_20210305-2309.zip - ``` hcl-dx-content-composer-image-v1.6.0_20210305-1756.tar.gz - ``` hcl-dx-core-image-v95_CF192_20210305-1758.tar.gz - ``` hcl-dx-digital-asset-management-operator-image-v95_CF192_20210305-1757.tar.gz - ``` hcl-dx-digital-asset-manager-image-v1.6.0_20210305-1802.tar.gz - ``` hcl-dx-experience-api-sample-ui-v0.2.0.20210305-1805.zip - ``` hcl-dx-image-processor-image-v1.6.0_20210305-1758.tar.gz - ``` hcl-dx-openldap-image-v1.0.0-master_20210305_1614986151.tar.gz - ``` hcl-dx-postgres-image-v1.6.0_20210305-1800.tar.gz - ``` hcl-dx-redis-image-5.0.1.tar.gz - ``` hcl-dx-remote-search-image-v95_CF192_20210305-1758.tar.gz - ``` hcl-dx-ringapi-image-v1.6.0_20210305-1802.tar.gz ## HCL DX 9.5 CF191 - **CF191** If deploying HCL DX 9.5 CF191 release, the package name and images are as follows: **hcl-dx-kubernetes-v95-CF191.zip** file: - ``` HCL DX notices V9.5 CF191.txt - ``` hcl-dx-ambassador-image-154.tar.gz - ``` hcl-dx-cloud-operator-image-v95_CF191_20201214-1527.tar.gz - ``` hcl-dx-cloud-scripts-v95_CF191_20201214-1527.zip - ``` hcl-dx-content-composer-image-v1.5.0_20201211-2151.tar.gz - ``` hcl-dx-core-image-v95_CF191_20201212-1421.tar.gz - ``` hcl-dx-digital-asset-management-operator-image-v95_CF191_20201211-2152.tar.gz - ``` hcl-dx-digital-asset-manager-image-v1.5.0_20201211-2155.tar.gz - ``` hcl-dx-experience-api-sample-ui-v0.2.0.20201211-2205.zip - ``` hcl-dx-image-processor-image-v1.5.0_20201211-2154.tar.gz - ``` hcl-dx-openldap-image-v1.0.0-master_20201212_1607741365.tar.gz - ``` hcl-dx-postgres-image-v1.5.0_20201211-2155.tar.gz - ``` hcl-dx-redis-image-5.0.1.tar.gz - ``` hcl-dx-remote-search-image-v95_CF191_20201212-1421.tar.gz - ``` hcl-dx-ringapi-image-v1.5.0_20201211-2200.tar.gz - ``` dxclient_v1.1.0_20201211-2153.zip **Note:** HCL DX 9.5 CF191 images are available and may be installed. HCL DX 9.5 CF191 is supported for new deployments only. DX administrators should not upgrade DX 9.5 container deployments to this release. ## HCL DX 9.5 CF19 - **CF19** If deploying HCL DX 9.5 CF19 release, the package name and images are as follows: **hcl-dx-kubernetes-v95-CF19.zip file**: - ``` HCL DX notices V9.5 CF19.txt - ``` hcl-dx-ambassador-image-154.tar.gz - ``` hcl-dx-cloud-operator-image-v95_CF19_20201110-0401.tar.gz - ``` hcl-dx-cloud-scripts-v95_CF19_20201110-0401.zip - ``` hcl-dx-content-composer-image-v1.4.0_20201109-2203.tar.gz - ``` hcl-dx-core-image-v95_CF19_20201109-2312.tar.gz - ``` hcl-dx-digital-asset-management-operator-image-v95_CF19_20201109-2204.tar.gz - ``` hcl-dx-digital-asset-manager-image-v1.4.0_20201109-2206.tar.gz - ``` hcl-dx-experience-api-sample-ui-v0.2.0.20201109-2208.zip - ``` hcl-dx-image-processor-image-v1.4.0_20201109-2204.tar.gz - ``` hcl-dx-openldap-image-v1.0.0-master_20201110_1604981292.tar.gz - ``` hcl-dx-postgres-image-v1.4.0_20201109-2206.tar.gz - ``` hcl-dx-redis-image-5.0.1.tar.gz - ``` hcl-dx-remote-search-image-v95_CF19_20201109-2312.tar.gz - ``` hcl-dx-ringapi-image-v1.4.0_20201109-2209.tar.gz - ``` dxclient_v1.0.0_20201110-2010.zip ## HCL DX 9.5 CF184 - **HCL DX 9.5 Container Update CF184** If deploying HCL DX 9.5 CF184 release, the package name and images are as follows: **hcl-dx-kubernetes-v95-CF184.zip files**: - ``` HCL DX notices V9.5 CF184.txt - ``` hcl-dx-ambassador-image-154.tar.gz - ``` hcl-dx-cloud-operator-image-v95_CF184_20200917-0054.tar.gz - ``` hcl-dx-cloud-scripts-v95_CF184_20200917-0054.zip - ``` hcl-dx-content-composer-image-v1.3.0_20200916-1952.tar.gz - ``` hcl-dx-core-image-v95_CF184_20200916-2009.tar.gz - ``` hcl-dx-digital-asset-management-operator-image-v95_CF184_20200916-2034.tar.gz - ``` hcl-dx-digital-asset-manager-image-v1.3.0_20200916-1953.tar.gz - ``` hcl-dx-image-processor-image-v1.3.0_20200916-1953.tar.gz - ``` hcl-dx-openldap-image-v1.0.0-master_20200917_1600304449.tar.gz - ``` hcl-dx-postgres-image-v1.3.0_20200916-2003.tar.gz - ``` hcl-dx-redis-image-5.0.1.tar.gz - ``` hcl-dx-remote-search-image-v95_CF184_20200916-2009.tar.gz - ``` hcl-dx-ringapi-image-v1.3.0_20200916-1953.tar.gz ## HCL DX 9.5 CF183 - **HCL DX 9.5 Container Update CF183** If deploying HCL DX 9.5 CF183 release, the image and package names are as follows: **CF183-core.zip files**: - ``` HCL DX notices V9.5 CF183.txt - ``` hcl-dx-ambassador-image-154.tar.gz - ``` hcl-dx-cloud-operator-image-v95_CF183_20200818-1852.tar.gz - ``` hcl-dx-cloud-scripts-v95_CF183_20200818-1852.zip - ``` hcl-dx-core-image-v95_CF183_20200818-1342.tar.gz - ``` hcl-dx-redis-image-5.0.1.tar.gz **CF183-other.zip files**: - ``` HCL DX notices V9.5 CF183.txt - ``` hcl-dx-content-composer-image-v1.2.0_20200818-1343.tar.gz - ``` hcl-dx-digital-asset-management-operator-image-v95_CF183_20200818-1344.tar.gz - ``` hcl-dx-digital-asset-manager-image-v1.2.0_20200818-1346.tar.gz - ``` hcl-dx-image-processor-image-v1.2.0_20200818-1345.tar.gz - ``` hcl-dx-openldap-image-v1.0.0-master_20200818_1597758965.tar.gz - ``` hcl-dx-postgres-image-v1.2.0_20200818-1349.tar.gz - ``` hcl-dx-remote-search-image-v95_CF183_20200818-1342.tar.gz - ``` hcl-dx-ringapi-image-v1.2.0_20200818-1351.tar.gz","title":"HCL DX 9.5 CF193"},{"location":"containerization/helm/planning/docker/#hcl-dx-95-cf182","text":"CF182 If deploying HCL DX 9.5 CF182 release, the image and package names are as follows: hcl-dx-kubernetes-v95-CF182-core.zip : ``` HCL DX notices V9.5 CF182.txt - ``` hcl-dx-ambassador-image-0850.tar.gz - ``` hcl-dx-cloud-operator-image-v95_CF182_20200720-1708.tar.gz - ``` hcl-dx-cloud-scripts-v95_CF182_20200720-1708.zip - ``` hcl-dx-core-image-v95_CF182_20200720-1645.tar.gz **hcl-dx-kubernetes-v95-CF182-other.zip**: - ``` HCL DX notices V9.5 CF182.txt - ``` hcl-dx-content-composer-image-v1.1.0_20200720-1708.tar.gz - ``` hcl-dx-digital-asset-management-operator-image-v95_CF182_20200720-1716.tar.gz - ``` hcl-dx-digital-asset-manager-image-v1.1.0_20200720-1712.tar.gz - ``` hcl-dx-image-processor-image-v1.1.0_20200720-1716.tar.gz - ``` hcl-dx-openldap-image-v1.0.0-master_20200720_1595265588.tar.gz - ``` hcl-dx-postgres-image-v1.1.0_20200720-1715.tar.gz - ``` hcl-dx-remote-search-image-v95_CF182_20200720-1645.tar.gz - ``` hcl-dx-ringapi-image-v1.1.0_20200720-1707.tar.gz","title":"HCL DX 9.5 CF182"},{"location":"containerization/helm/planning/docker/#hcl-dx-95-cf181","text":"CF181 If deploying HCL DX 9.5 CF181 and later container update release, the image and package names add HCL DX 9.5 Content Composer and Digital Asset Management components and supporting services images, as well as Remote Search and OpenLDAP images. See the following list of images presented within the HCL DX 9.5 Container Update CF181 package: hcl-dx-kubernetes-v95-CF181-core.zip : ``` hcl-dx-cloud-scripts-v95_CF181_xxxxxxxx-xxxx.zip - ``` hcl-dx-core-image-v95_CF181_xxxxxxxx-xxxx.tar.gz - ``` hcl-dx-cloud-operator-image-v95_CF181_xxxxxxxx-xxxx.tar.gz - ``` hcl-dx-ambassador-image-xxxx.tar.gz - ``` HCL DX notices V9.5 CF181.txt **hcl-dx-kubernetes-v95-CF181-other.zip**: - ``` hcl-dx-ringapi-image-v1.0.0_xxxxxxxx-xxxx.tar.gz - ``` hcl-dx-postgres-image-v1.0.0_xxxxxxxx-xxxx.tar.gz - ``` hcl-dx-openldap-image-v1.0.0-release_xxxxxxxx_xxxxxxxxxx.tar.gz - ``` hcl-dx-medialibrary-operator-image-v95_CF181_xxxxxxxx-xxxx.tar.gz - ``` hcl-dx-image-processor-image-v1.0.0_xxxxxxxx-xxxx.tar.gz - ``` hcl-dx-dxrs-image-v95_CF181_xxxxxxxx-xxxx.tar.gz ## HCL DX 9.5 CF18 - **CF18** If deploying HCL DX 9.5 CF18 and later container update release, the image and package names included for this are: - ``` hcl-dx-kubernetes-v95-CF18.zip - ``` hcl-dx-core-image-v95_CF18_xxxxxxxx-xxxx.tar.gz - ``` hcl-dx-cloud-operator-image-v95_CF18_xxxxxxxx-xxxx.tar.gz - ``` hcl-dx-cloud-scripts-v95_CF18_xxxxxxxx-xxxx.zip - ``` hcl-dx-ambassador-image-xxxx.tar.gz See the following sections for additional information: Docker image deployment Customizing the container deployment Requirements and limitations Parent topic: Digital Experience on containerized platforms","title":"HCL DX 9.5 CF181"},{"location":"containerization/helm/planning/helm_additional_tasks/","text":"Additional Helm tasks This topic shows you how to leverage NodeSelectors to allow deploying specific DX 9.5 application Pods only on a specific node. Prepare cluster nodes You must label your Kubernetes or OpenShift cluster nodes to use NodeSelectors . You can do this by editing the node in Kubernetes or OpenShift. The following steps shows how to modify cluster nodes. As the examples here may differ from those given by your cloud provider, you are encouraged to review the documentation reference accompanying your cloud subscription. For this example, the following setup is assumed: The target cluster has multiple nodes. A label purpose is added to a node called k8s-node-4 and assigned the value ingress This can be done using the following commands: Kubectl: ``` Edit Node kubectl edit node k8s-node-4 ``` OpenShift Client: ``` Edit Node kubectl edit node k8s-node-4 ``` The following label is added using the Kubernetes syntax (and other configurations are changed): metadata: labels: purpose: ingress The node is now labeled with the desired target label: Kubectl: ``` Execute lookup via kubectl kubectl get node k8s-node-4 --show-labels Command output NAME STATUS ROLES AGE VERSION LABELS k8s-node-4 Ready 123d v1.20.2 beta.kubernetes.io/arch=amd64,beta.kubernetes.io/os=linux,kubernetes.io/arch=amd64,kubernetes.io/hostname=k8s-node-4,kubernetes.io/os=linux,purpose=ingress Execute lookup via kubectl oc get node k8s-node-4 --show-labels Command output NAME STATUS ROLES AGE VERSION LABELS k8s-node-4 Ready 123d v1.20.2 beta.kubernetes.io/arch=amd64,beta.kubernetes.io/os=linux,kubernetes.io/arch=amd64,kubernetes.io/hostname=k8s-node-4,kubernetes.io/os=linux,purpose=ingress ``` Configure nodes You can assign all pods (deployed by the Helm Chart of HCL Digital Experience 9.5) to specific nodes by using NodeSelectors . Modify your custom-values.yaml file to include the NodeSelector configuration. Make sure to use the proper indentation as YAML is indent-sensitive. Example for Ambassador: nodeSelector: ambassadorIngress: purpose: ingress ambassadorRedis: purpose: ingress This configuration directs the Ambassador Ingress and Ambassador Redis to run nodes with the label purpose: ingress . Once install is completed, the pods are running on your desired node. For example k8s-node-4 . Kubectl: # Use this command to see running Pods incl. Nodes kubectl get pods -o wide -n my-deployment # Command output NAME READY STATUS RESTARTS AGE IP NODE NOMINATED NODE READINESS GATES dx-ambassador-769b86f6ff-knhgt 1/1 Running 0 2m12s 10.244.4.111 k8s-node-4 <none> <none> dx-ambassador-769b86f6ff-qtqmv 1/1 Running 0 2m12s 10.244.4.110 k8s-node-4 <none> <none> dx-ambassador-769b86f6ff-whmw6 1/1 Running 0 2m12s 10.244.4.112 k8s-node-4 <none> <none> dx-ambassador-redis-6cbbf58649-gtqwv 1/1 Running 0 2m12s 10.244.4.106 k8s-node-4 <none> <none> dx-ambassador-redis-6cbbf58649-j8v4d 1/1 Running 0 2m12s 10.244.4.107 k8s-node-4 <none> <none> dx-ambassador-redis-6cbbf58649-qtgqp 1/1 Running 0 2m12s 10.244.4.109 k8s-node-4 <none> <none> OpenShift Client: # Use this command to see running Pods incl. Nodes oc get pods -o wide -n my-deployment # Command output NAME READY STATUS RESTARTS AGE IP NODE NOMINATED NODE dx-ambassador-769b86f6ff-knhgt 1/1 Running 0 2m12s 10.244.4.111 k8s-node-4 <none> dx-ambassador-769b86f6ff-qtqmv 1/1 Running 0 2m12s 10.244.4.110 k8s-node-4 <none> dx-ambassador-769b86f6ff-whmw6 1/1 Running 0 2m12s 10.244.4.112 k8s-node-4 <none> dx-ambassador-redis-6cbbf58649-gtqwv 1/1 Running 0 2m12s 10.244.4.106 k8s-node-4 <none> dx-ambassador-redis-6cbbf58649-j8v4d 1/1 Running 0 2m12s 10.244.4.107 k8s-node-4 <none> dx-ambassador-redis-6cbbf58649-qtgqp 1/1 Running 0 2m12s 10.244.4.109 k8s-node-4 <none> Select DX applications to deploy HCL Digital Experience 9.5 consists of multiple applications and services that can be deployed. Depending on your needs, it might not be necessary to have all applications deployed. Refer to the Applications overview - Deploy DX 9.5 to container platforms using Helm Help Center topic for related information. Disabling or enabling specific applications You can easily enable or disable specific applications by adding the following parts to your custom-values.yaml file: # Controls which application is deployed and configured applications: # Deploys Content Composer contentComposer: true # Deploys Core core: true # Deploys Design Studio designStudio: false # Deploys Digital Asset Management digitalAssetManagement: true # Deploys the Image Processor # Enabling digitalAssetManagement will override this setting with: true imageProcessor: true # Deploy Open LDAP # Setting the ldap type in the core application configuration to dx will override this setting with: true openLdap: true # Deploys the Persistence Layer # Enabling digitalAssetManagement will override this setting with: true persistence: true # Deploys the Remote Search remoteSearch: true # Deploys the Ring API # Enabling either digitalAssetManagement or contentComposer will override this setting with: true ringApi: true # Deploys the Ambassador Ingress and Redis ambassador: true # Deploys the Runtime Controller runtimeController: true You can set applications that you do not want to be deployed to false . As noted in the Applications overview - Deploy DX 9.5 to container platforms using Helm Help Center topic, some DX applications are pre-requisites for others to be deployed. It can appear that you have disabled an application, but it still gets deployed. This is due to other applications requiring that one. Supported LDAP configuration You can specify a LDAP configuration that can be used by HCL Digital Experience 9.5. The Helm chart provides a ldap section under the configuration and core section. This section can be used to configure a none , dx or other LDAP. This defaults to none, so there is no LDAP configured. If you adjust this to other , you can configure an external LDAP that you want to connect to. Core is then configured to use this LDAP. Currently, the configuration capability is quite limited. For more complex configurations, use the ConfigWizard instead. Parameter Values Description type - none - other - dx |- Determines which type of LDAP to use. - Accepts none , dx or other - none : No LDAP configuration - dx : use and configure DX Open LDAP - other : use other LDAP | |bindUser| |- User used to connect to LDAP - Only used if ldap type is other | |bindPassword| |- Password used to connect to LDAP - Only used if ldap type is other | |suffix| |- Suffix in LDAP - Only used if ldap type is other | |host| |- Host of LDAP - Only used if ldap type is other | |port| |- Port of LDAP - Only used if ldap type is other | |attributeMappingLdap|- mail - title - userPassword |- Mapping attributes between LDAP and DX, LDAP attribute names (comma-separated list) | |attributeMappingPortal|- ibm-primaryEmail - ibm-jobTitle - password |- Mapping attributes between LDAP and DX, DX attribute names (comma-separated list) | |attributeNonSupported|- certificate - members |- Non-supported LDAP attributes (comma-separated list) | |serverType|- CUSTOM |- Supported LDAP Server types | |id|- dx_ldap |- LDAP configuration id | Example Configuration You can use the following syntax in your custom-values.yaml file to adjust LDAP settings: # Application configuration configuration: # Application specific configuration for Core core: # Settings for LDAP configuration ldap: # Determines which type of LDAP to use # Accepts: \"none\", \"dx\" or \"other\" # \"none\" - no LDAP configuration # \"dx\" - use DX openLDAP and configure it # \"other\" - use provided configuration for other LDAP type: \"none\" # User used to connect to LDAP, only used if ldap type is \"other\" bindUser: \"\" # Password used to connect to LDAP, only used if ldap type is \"other\" bindPassword: \"\" # Suffix in LDAP, only used if ldap type is \"other\" suffix: \"\" # Host of LDAP, only used if ldap type is \"other\" host: \"\" # Port of LDAP, only used if ldap type is \"other\" port: \"\" # Supported LDAP Server types - CUSTOM serverType: \"CUSTOM\" # LDAP configuration id id: \"dx_ldap\" # Mapping attributes between LDAP and DX, LDAP attribute names (comma-separated list) attributeMappingLdap: \"mail,title,userPassword\" # Mapping attributes between LDAP and DX, DX attribute names (comma-separated list) attributeMappingPortal: \"ibm-primaryEmail,ibm-jobTitle,password\" # Non-supported LDAP attributes (comma-separated list) attributeNonSupported: \"certificate,members\" Refer to the following Help Center documentation for more information about LDAP and Configuration Wizard configuration: Configuration Wizard Enable federated security Troubleshooting: Enable federated security option Authoring/Rendering configuration You can choose if the environment you deploy is configured as a WCM authoring or rendering type. This has implications on things like caching of Core. As default, this defaults to true. The deployment is configured as an authoring environment. If you want to adjust this to deploy a rendering environment, you can use the following syntax in your custom-values.yaml file: # Application configuration configuration: # Application specific configuration for Core core: # Settings for tuning tuning: # Configures if the environment should be configured for authoring or not authoring: true Configuration Wizard configuration You can select whether the Config Wizard is started together with the Core application. This defaults to true. If you want to adjust this setting, you can use the following syntax in your file: # Application configuration configuration: # Application specific configuration for Core core: # Settings for tuning tuning: # Configures if the server for configWizard and dxconnect is started configWizard: true OpenLDAP configuration If you choose to deploy the OpenLDAP container in your deployment, you can change country, organization and suffix, that may be configured in OpenLDAP for use. Use the following syntax in your custom-values.yaml file to adjust the configuration: # Application configuration configuration: # Application specific configuration for Open LDAP openLdap: # Country configuration for Open LDAP country: \"US\" # Org configuration for Open LDAP org: \"DX\" # Suffix configuration for Open LDAP suffix: \"dc=dx,dc=com\" Remote Search configuration You can configure whether the Remote Search configuration through the IBM WebSphere Application Server Solution Console is exposed as an additional port on the Ambassador Ingress or not. This defaults to true. If set to true, you can access the Solution Console using: https://yourhost:9043/ibm/console Use the following syntax in your custom-values.yaml file: # Application configuration configuration: # Application specific configuration for Remote Search remoteSearch: # Should the configuration interface be exposed exposeConfigurationConsole: true Configure scaling The HCL Digital Experience 9.5 Kubernetes deployment using Helm allows you to configure the pod count of each individual application. In addition, it is possible to configure the use of HorizontalPodAutoscalers that scales up and down the applications by adding or removing Pods based on the pod metrics. Refer to the Scaling DX 9.5 container deployments using Helm Help Center topic for detailed overview information. Note: You are not able to use more than one (1) Core Pod until you have performed a database transfer. Configuring pod count Even if you don't want to automatically scale your DX 9.5 deployment based on CPU and memory utilization, you still can control the amount of pods per application. You can use the following syntax to reconfigure the pod count per application in your custom-values.yaml file: # Scaling settings for deployed applications scaling: # The default amount of replicas per application replicas: contentComposer: 1 core: 1 designStudio: 1 digitalAssetManagement: 3 imageProcessor: 5 ringApi: 3 ambassadorIngress: 3 ambassadorRedis: 3 Configuring HorizontalPodAutoscalers The use of HorizontalPodAutoscalers requires your cluster to have the Kubernetes Metrics running. Ensure that this is the case, and reference your cloud provider documentation for further information. You can set up the use of HorizontalPodAutoscalers on a per application basis using the following syntax in your custom-values.yaml file, showing Content Composer, as an example: # Scaling settings for deployed applications scaling: # Automated scaling using HorizontalPodAutoscaler horizontalPodAutoScaler: # Autoscaling settings for Content Composer contentComposer: # Enable or disable autoscaling enabled: true # Minimum and maximum Pod count minReplicas: 1 maxReplicas: 3 # Target CPU utilization scaling threshold targetCPUUtilizationPercentage: 75 # Target Memory utilization scaling threshold targetMemoryUtilizationPercentage: 80 The example configures a HorizontalPodAutoscaler for Content Composer, that scales up to 3 pods maximum. It considers scaling when a CPU utilization of 75% or Memory utilization of 80% per pod is reached. Refer to the default values.yaml file for all configurable applications. Configure credentials HCL Digital Experience 9.5 uses several credentials in its deployment to manage access between applications and from outside the container deployment. Adjusting default credentials You can adjust the default credentials that HCL Digital Experience 9.5 is using by adding the following syntax to your custom-values.yaml file and changing the values you need: # Security related configuration, e.g. default credentials security: # Security configuration for Core core: # Credentials used for IBM WebSphere Application Server administrative access, needs to be adjusted if different credentials are already in place # This setting does currently NOT adjust the existing user credentials. wasUser: \"REDACTED\" wasPassword: \"REDACTED\" # Credentials used for HCL Digital Experience Core administrative access, needs to be adjusted if different credentials are already in place # This setting does currently NOT adjust the existing user credentials wpsUser: \"REDACTED\" wpsPassword: \"REDACTED\" # Security configuration for Digital Asset Management digitalAssetManagement: # Credentials used by the Digital Asset Management to access the persistence database. dbUser: \"REDACTED\" dbPassword: \"REDACTED\" # Credentials used by the persistence database to perform replication between database nodes. replicationUser: \"REDACTED\" replicationPassword: \"REDACTED\" # Security configuration for Open LDAP openLdap: # Admin user for Open LDAP, can not be adjusted currently. ldapUser: \"REDACTED\" # Admin password for Open LDAP ldapPassword: \"REDACTED\" Configure Core sidecar logging Beginning with HCL Digital Experience 9.5 CF199, Kubernetes deployment using Helm allows you to expose logs that are written to files by the DX Core application. The deployment uses sidecar containers, which access the same logs volume as the Core, read the log files, and expose them as their standard output. You can access logs with commands like kubectl logs -n <namespace> <pod-name> <sidecar-container-name> , for example, kubectl logs -n dxns dx-deployment-core-0 system-err-log . See the official Kubernetes documentation for more information. Shared volume The DX Core container and sidecar containers share the same volume. This allows DX Core to write its logs, and have the sidecar containers read those logs. The logs are mounted at /opt/HCL/logs (and symbolically linked from /opt/HCL/wp_profile/logs) in the DX Core container, and at /var/logs/ in the sidecar containers. The different directory paths emphasize that sidecar containers can only read files written by Core under its logs directory. Files in other directories (such as the profile) are not available to the sidecars. Default configuration Two sidecar containers are launched with Core: system-out-log - exposes the log file at /var/logs/WebSphere_Portal/SystemOut.log. system-err-log - exposes the log file at /var/logs/WebSphere_Portal/SystemErr.log. Configure custom sidecar containers Use the following syntax to configure more sidecar containers for additional log files in the custom-values.yaml file. Important: You can only expose log files inside of the /var/logs/ directory. logging: # Core specific logging configuration core: # List of sidecar containers mapping a container name to a file path for a log file to be exposed # Each element must consist of a `containerName` and a `logFilePath` # Example: # customLogSidecarContainers: # - containerName: \"trace\" # logFilePath: \"/var/logs/WebSphere_Portal/trace.log\" customLogSidecarContainers: [] Example: The following example starts a new sidecar container, and exposes the logs in /var/logs/WebSphere_Portal/trace.log. logging: core: customLogSidecarContainers: - containerName: \"trace\" logFilePath: \"/var/logs/WebSphere_Portal/trace.log\" Configure Remote Search sidecar logging Beginning with HCL Digital Experience 9.5 CF199, Kubernetes deployment using Helm allows you to expose logs that are written to files on its PersistentVolumes (PVs) by the DX Remote Search application. The deployment uses sidecar containers, which access the PersistentVolume as the Remote Search container, read the log files, and expose them as their standard output. You can access logs with commands like kubectl logs -n <namespace> <pod-name> <sidecar-container-name> , for example, kubectl logs -n dxns dx-deployment-remote-search-0 system-err-log . See the official Kubernetes documentation for more information. Shared volume The DX Remote Search container and sidecar containers in the same pod share the same volume. This allows DX Remote Search to write its logs, and have the sidecar containers read those logs. The profile volume containing the logs is mounted at /opt/HCL/AppServer/profiles/prs_profile/ in the DX Remote Search container, and at /var/profile/ in the sidecar containers. The different directory paths emphasize that sidecar containers can only read files written by Remote Search under its profile directory. Files in other directories are not available to the sidecars. Default configuration Two sidecar containers are launched with Remote Search: system-out-log - exposes the log file at /var/profile/logs/server1/SystemOut.log. system-err-log - exposes the log file at /var/profile/logs/server1/SystemErr.log. Configure custom sidecar containers Use the following syntax to configure more sidecar containers for additional log files in the custom-values.yaml file. Important: You can only expose log files inside of the /var/profile/ directory. logging: remoteSearch: # List of sidecar containers mapping a container name to a file path for a log file to be exposed # Each element must consist of a `containerName` and a `logFilePath`, the latter must be located in /var/profile # Example: # customLogSidecarContainers: # - containerName: \"trace\" # logFilePath: \"/var/profile/logs/server1/trace.log\" customLogSidecarContainers: [] Example: The following example starts a new sidecar container, and exposes the logs in /var/profile/logs/server1/trace.log. logging: remoteSearch: customLogSidecarContainers: - containerName: \"trace\" logFilePath: \"/var/profile/logs/server1/trace.log\" Configure Labels and Annotations This section documents the configuration of labels and annotations for different DX resources. Annotations Services and Pods To configure annotations for kubernetes services and pods, update your custom-values.yaml file as follows: Notes: Additional annotations are not mandatory for a deployment. Ensure you do not overwrite existing DX annotations such as the following: meta.helm.sh/release-name meta.helm.sh/release-namespace Sample annotations for core service To set annotation KEY1 with value VALUE1 and annotation KEY2 with value VALUE2 on the core service, add the following to your custom-values.yaml file: annotations: service: core: - key: KEY1 value: VALUE1 - key: KEY2 value: VALUE2 Sample annotations for core pods To set annotation KEY1 with value VALUE1 and annotation KEY2 with value VALUE2 on core pods, add the following to your custom-values.yaml file: annotations: pod: core: - key: KEY1 value: VALUE1 - key: KEY2 value: VALUE2 Labels Services and Pods To configure labels for kubernetes services and pods, update your custom-values.yaml file as follows: Notes: Additional labels are not mandatory for a deployment. Ensure that you do not overwrite existing DX Labels such as the following: ``` release ``` ``` helm.sh/chart ``` ``` app.kubernetes.io/version ``` ``` app.kubernetes.io/managed-by ``` ``` app.kubernetes.io/name ``` app.kubernetes.io/instance Sample labels for core services To set label KEY1 with value VALUE1 and label KEY2 with value VALUE2 on the core services, add the following to your custom-values.yaml file: label: service: core: - key: KEY1 value: VALUE1 - key: KEY2 value: VALUE2 Sample labels for core pods To set label KEY1 with value VALUE1 and label KEY2 with value VALUE2 on core pods, add the following to your custom-values.yaml file: label: pod: core: - key: KEY1 value: VALUE1 - key: KEY2 value: VALUE2 Configure environment variables for DX resources This section explains the configuration of environment variables for different DX resources. Environment variables To configure environment variables for kubernetes pods, update your custom-values.yaml file as below. Note: Additional environment values are not mandatory for a deployment. Sample environment variables for core pods To set environment variable KEY1 with value VALUE1 and environment variable KEY2 with value VALUE2 on core pods, add the following to your custom-values.yaml file: environment: pod: core: - name: KEY1 value: VALUE1 - name: KEY2 value: VALUE2 Incubator section in the values.yaml file The Incubator section is in the root level of the values.yaml file in the Helm charts. This section contains the capabilities that are planned to be made available for production environments in the future releases. The configurations within the incubator section are subject to change. The default values within this section are defined in such a way that they do not interfere with the existing deployments. The features and functions within the incubator section are considered experimental and might not be fully documented yet. Note: All features within the incubator section are not recommended to be used in the production environments. Refer to Install and uninstall commands for the next steps. Use ImagePullSecrets To use a container image registry that has access restrictions and requires credentials, you need to leverage ImagePullSecrets in your deployment. Refer to the Kubernetes Documentation for additional information on this topic. In addition, reference your Cloud Provider documentation on how to create ImagePullSecrets . Note: Ensure that the ImagePullSecret has been created in the same namespace that your DX deployment is installed to. Configure deployment to use ImagePullSecrets In order for the HCL Digital Experience 9.5 deployment to leverage ImagePullSecrets you need to adjust your custom-values.yaml file to include the following syntax: images: imagePullSecrets: - name: regcred The name regcred can be different, depending on how you have created your ImagePullSecret and how it is named. Ensure that you reference the correct name in the configuration. It is assume that you have moved the HCL Digital Experience 9.5 images to your registry; make sure it is also configured properly in your custom-values.yaml : images: repository: \"your-repo:port\" All pods created now have that secret configured for pulling DX container images. Parent topic: Deploying container platforms using Helm","title":"Additional Helm tasks"},{"location":"containerization/helm/planning/helm_additional_tasks/#additional-helm-tasks","text":"This topic shows you how to leverage NodeSelectors to allow deploying specific DX 9.5 application Pods only on a specific node.","title":"Additional Helm tasks"},{"location":"containerization/helm/planning/helm_additional_tasks/#prepare-cluster-nodes","text":"You must label your Kubernetes or OpenShift cluster nodes to use NodeSelectors . You can do this by editing the node in Kubernetes or OpenShift. The following steps shows how to modify cluster nodes. As the examples here may differ from those given by your cloud provider, you are encouraged to review the documentation reference accompanying your cloud subscription. For this example, the following setup is assumed: The target cluster has multiple nodes. A label purpose is added to a node called k8s-node-4 and assigned the value ingress This can be done using the following commands: Kubectl: ```","title":"Prepare cluster nodes"},{"location":"containerization/helm/planning/helm_additional_tasks/#edit-node","text":"kubectl edit node k8s-node-4 ``` OpenShift Client: ```","title":"Edit Node"},{"location":"containerization/helm/planning/helm_additional_tasks/#edit-node_1","text":"kubectl edit node k8s-node-4 ``` The following label is added using the Kubernetes syntax (and other configurations are changed): metadata: labels: purpose: ingress The node is now labeled with the desired target label: Kubectl: ```","title":"Edit Node"},{"location":"containerization/helm/planning/helm_additional_tasks/#execute-lookup-via-kubectl","text":"kubectl get node k8s-node-4 --show-labels","title":"Execute lookup via kubectl"},{"location":"containerization/helm/planning/helm_additional_tasks/#command-output","text":"NAME STATUS ROLES AGE VERSION LABELS k8s-node-4 Ready 123d v1.20.2 beta.kubernetes.io/arch=amd64,beta.kubernetes.io/os=linux,kubernetes.io/arch=amd64,kubernetes.io/hostname=k8s-node-4,kubernetes.io/os=linux,purpose=ingress","title":"Command output"},{"location":"containerization/helm/planning/helm_additional_tasks/#execute-lookup-via-kubectl_1","text":"oc get node k8s-node-4 --show-labels","title":"Execute lookup via kubectl"},{"location":"containerization/helm/planning/helm_additional_tasks/#command-output_1","text":"NAME STATUS ROLES AGE VERSION LABELS k8s-node-4 Ready 123d v1.20.2 beta.kubernetes.io/arch=amd64,beta.kubernetes.io/os=linux,kubernetes.io/arch=amd64,kubernetes.io/hostname=k8s-node-4,kubernetes.io/os=linux,purpose=ingress ```","title":"Command output"},{"location":"containerization/helm/planning/helm_additional_tasks/#configure-nodes","text":"You can assign all pods (deployed by the Helm Chart of HCL Digital Experience 9.5) to specific nodes by using NodeSelectors . Modify your custom-values.yaml file to include the NodeSelector configuration. Make sure to use the proper indentation as YAML is indent-sensitive. Example for Ambassador: nodeSelector: ambassadorIngress: purpose: ingress ambassadorRedis: purpose: ingress This configuration directs the Ambassador Ingress and Ambassador Redis to run nodes with the label purpose: ingress . Once install is completed, the pods are running on your desired node. For example k8s-node-4 . Kubectl: # Use this command to see running Pods incl. Nodes kubectl get pods -o wide -n my-deployment # Command output NAME READY STATUS RESTARTS AGE IP NODE NOMINATED NODE READINESS GATES dx-ambassador-769b86f6ff-knhgt 1/1 Running 0 2m12s 10.244.4.111 k8s-node-4 <none> <none> dx-ambassador-769b86f6ff-qtqmv 1/1 Running 0 2m12s 10.244.4.110 k8s-node-4 <none> <none> dx-ambassador-769b86f6ff-whmw6 1/1 Running 0 2m12s 10.244.4.112 k8s-node-4 <none> <none> dx-ambassador-redis-6cbbf58649-gtqwv 1/1 Running 0 2m12s 10.244.4.106 k8s-node-4 <none> <none> dx-ambassador-redis-6cbbf58649-j8v4d 1/1 Running 0 2m12s 10.244.4.107 k8s-node-4 <none> <none> dx-ambassador-redis-6cbbf58649-qtgqp 1/1 Running 0 2m12s 10.244.4.109 k8s-node-4 <none> <none> OpenShift Client: # Use this command to see running Pods incl. Nodes oc get pods -o wide -n my-deployment # Command output NAME READY STATUS RESTARTS AGE IP NODE NOMINATED NODE dx-ambassador-769b86f6ff-knhgt 1/1 Running 0 2m12s 10.244.4.111 k8s-node-4 <none> dx-ambassador-769b86f6ff-qtqmv 1/1 Running 0 2m12s 10.244.4.110 k8s-node-4 <none> dx-ambassador-769b86f6ff-whmw6 1/1 Running 0 2m12s 10.244.4.112 k8s-node-4 <none> dx-ambassador-redis-6cbbf58649-gtqwv 1/1 Running 0 2m12s 10.244.4.106 k8s-node-4 <none> dx-ambassador-redis-6cbbf58649-j8v4d 1/1 Running 0 2m12s 10.244.4.107 k8s-node-4 <none> dx-ambassador-redis-6cbbf58649-qtgqp 1/1 Running 0 2m12s 10.244.4.109 k8s-node-4 <none>","title":"Configure nodes"},{"location":"containerization/helm/planning/helm_additional_tasks/#select-dx-applications-to-deploy","text":"HCL Digital Experience 9.5 consists of multiple applications and services that can be deployed. Depending on your needs, it might not be necessary to have all applications deployed. Refer to the Applications overview - Deploy DX 9.5 to container platforms using Helm Help Center topic for related information. Disabling or enabling specific applications You can easily enable or disable specific applications by adding the following parts to your custom-values.yaml file: # Controls which application is deployed and configured applications: # Deploys Content Composer contentComposer: true # Deploys Core core: true # Deploys Design Studio designStudio: false # Deploys Digital Asset Management digitalAssetManagement: true # Deploys the Image Processor # Enabling digitalAssetManagement will override this setting with: true imageProcessor: true # Deploy Open LDAP # Setting the ldap type in the core application configuration to dx will override this setting with: true openLdap: true # Deploys the Persistence Layer # Enabling digitalAssetManagement will override this setting with: true persistence: true # Deploys the Remote Search remoteSearch: true # Deploys the Ring API # Enabling either digitalAssetManagement or contentComposer will override this setting with: true ringApi: true # Deploys the Ambassador Ingress and Redis ambassador: true # Deploys the Runtime Controller runtimeController: true You can set applications that you do not want to be deployed to false . As noted in the Applications overview - Deploy DX 9.5 to container platforms using Helm Help Center topic, some DX applications are pre-requisites for others to be deployed. It can appear that you have disabled an application, but it still gets deployed. This is due to other applications requiring that one.","title":"Select DX applications to deploy"},{"location":"containerization/helm/planning/helm_additional_tasks/#supported-ldap-configuration","text":"You can specify a LDAP configuration that can be used by HCL Digital Experience 9.5. The Helm chart provides a ldap section under the configuration and core section. This section can be used to configure a none , dx or other LDAP. This defaults to none, so there is no LDAP configured. If you adjust this to other , you can configure an external LDAP that you want to connect to. Core is then configured to use this LDAP. Currently, the configuration capability is quite limited. For more complex configurations, use the ConfigWizard instead. Parameter Values Description type - none - other - dx |- Determines which type of LDAP to use. - Accepts none , dx or other - none : No LDAP configuration - dx : use and configure DX Open LDAP - other : use other LDAP | |bindUser| |- User used to connect to LDAP - Only used if ldap type is other | |bindPassword| |- Password used to connect to LDAP - Only used if ldap type is other | |suffix| |- Suffix in LDAP - Only used if ldap type is other | |host| |- Host of LDAP - Only used if ldap type is other | |port| |- Port of LDAP - Only used if ldap type is other | |attributeMappingLdap|- mail - title - userPassword |- Mapping attributes between LDAP and DX, LDAP attribute names (comma-separated list) | |attributeMappingPortal|- ibm-primaryEmail - ibm-jobTitle - password |- Mapping attributes between LDAP and DX, DX attribute names (comma-separated list) | |attributeNonSupported|- certificate - members |- Non-supported LDAP attributes (comma-separated list) | |serverType|- CUSTOM |- Supported LDAP Server types | |id|- dx_ldap |- LDAP configuration id | Example Configuration You can use the following syntax in your custom-values.yaml file to adjust LDAP settings: # Application configuration configuration: # Application specific configuration for Core core: # Settings for LDAP configuration ldap: # Determines which type of LDAP to use # Accepts: \"none\", \"dx\" or \"other\" # \"none\" - no LDAP configuration # \"dx\" - use DX openLDAP and configure it # \"other\" - use provided configuration for other LDAP type: \"none\" # User used to connect to LDAP, only used if ldap type is \"other\" bindUser: \"\" # Password used to connect to LDAP, only used if ldap type is \"other\" bindPassword: \"\" # Suffix in LDAP, only used if ldap type is \"other\" suffix: \"\" # Host of LDAP, only used if ldap type is \"other\" host: \"\" # Port of LDAP, only used if ldap type is \"other\" port: \"\" # Supported LDAP Server types - CUSTOM serverType: \"CUSTOM\" # LDAP configuration id id: \"dx_ldap\" # Mapping attributes between LDAP and DX, LDAP attribute names (comma-separated list) attributeMappingLdap: \"mail,title,userPassword\" # Mapping attributes between LDAP and DX, DX attribute names (comma-separated list) attributeMappingPortal: \"ibm-primaryEmail,ibm-jobTitle,password\" # Non-supported LDAP attributes (comma-separated list) attributeNonSupported: \"certificate,members\" Refer to the following Help Center documentation for more information about LDAP and Configuration Wizard configuration: Configuration Wizard Enable federated security Troubleshooting: Enable federated security option","title":"Supported LDAP configuration"},{"location":"containerization/helm/planning/helm_additional_tasks/#authoringrendering-configuration","text":"You can choose if the environment you deploy is configured as a WCM authoring or rendering type. This has implications on things like caching of Core. As default, this defaults to true. The deployment is configured as an authoring environment. If you want to adjust this to deploy a rendering environment, you can use the following syntax in your custom-values.yaml file: # Application configuration configuration: # Application specific configuration for Core core: # Settings for tuning tuning: # Configures if the environment should be configured for authoring or not authoring: true","title":"Authoring/Rendering configuration"},{"location":"containerization/helm/planning/helm_additional_tasks/#configuration-wizard-configuration","text":"You can select whether the Config Wizard is started together with the Core application. This defaults to true. If you want to adjust this setting, you can use the following syntax in your file: # Application configuration configuration: # Application specific configuration for Core core: # Settings for tuning tuning: # Configures if the server for configWizard and dxconnect is started configWizard: true","title":"Configuration Wizard configuration"},{"location":"containerization/helm/planning/helm_additional_tasks/#openldap-configuration","text":"If you choose to deploy the OpenLDAP container in your deployment, you can change country, organization and suffix, that may be configured in OpenLDAP for use. Use the following syntax in your custom-values.yaml file to adjust the configuration: # Application configuration configuration: # Application specific configuration for Open LDAP openLdap: # Country configuration for Open LDAP country: \"US\" # Org configuration for Open LDAP org: \"DX\" # Suffix configuration for Open LDAP suffix: \"dc=dx,dc=com\"","title":"OpenLDAP configuration"},{"location":"containerization/helm/planning/helm_additional_tasks/#remote-search-configuration","text":"You can configure whether the Remote Search configuration through the IBM WebSphere Application Server Solution Console is exposed as an additional port on the Ambassador Ingress or not. This defaults to true. If set to true, you can access the Solution Console using: https://yourhost:9043/ibm/console Use the following syntax in your custom-values.yaml file: # Application configuration configuration: # Application specific configuration for Remote Search remoteSearch: # Should the configuration interface be exposed exposeConfigurationConsole: true","title":"Remote Search configuration"},{"location":"containerization/helm/planning/helm_additional_tasks/#configure-scaling","text":"The HCL Digital Experience 9.5 Kubernetes deployment using Helm allows you to configure the pod count of each individual application. In addition, it is possible to configure the use of HorizontalPodAutoscalers that scales up and down the applications by adding or removing Pods based on the pod metrics. Refer to the Scaling DX 9.5 container deployments using Helm Help Center topic for detailed overview information. Note: You are not able to use more than one (1) Core Pod until you have performed a database transfer. Configuring pod count Even if you don't want to automatically scale your DX 9.5 deployment based on CPU and memory utilization, you still can control the amount of pods per application. You can use the following syntax to reconfigure the pod count per application in your custom-values.yaml file: # Scaling settings for deployed applications scaling: # The default amount of replicas per application replicas: contentComposer: 1 core: 1 designStudio: 1 digitalAssetManagement: 3 imageProcessor: 5 ringApi: 3 ambassadorIngress: 3 ambassadorRedis: 3 Configuring HorizontalPodAutoscalers The use of HorizontalPodAutoscalers requires your cluster to have the Kubernetes Metrics running. Ensure that this is the case, and reference your cloud provider documentation for further information. You can set up the use of HorizontalPodAutoscalers on a per application basis using the following syntax in your custom-values.yaml file, showing Content Composer, as an example: # Scaling settings for deployed applications scaling: # Automated scaling using HorizontalPodAutoscaler horizontalPodAutoScaler: # Autoscaling settings for Content Composer contentComposer: # Enable or disable autoscaling enabled: true # Minimum and maximum Pod count minReplicas: 1 maxReplicas: 3 # Target CPU utilization scaling threshold targetCPUUtilizationPercentage: 75 # Target Memory utilization scaling threshold targetMemoryUtilizationPercentage: 80 The example configures a HorizontalPodAutoscaler for Content Composer, that scales up to 3 pods maximum. It considers scaling when a CPU utilization of 75% or Memory utilization of 80% per pod is reached. Refer to the default values.yaml file for all configurable applications.","title":"Configure scaling"},{"location":"containerization/helm/planning/helm_additional_tasks/#configure-credentials","text":"HCL Digital Experience 9.5 uses several credentials in its deployment to manage access between applications and from outside the container deployment. Adjusting default credentials You can adjust the default credentials that HCL Digital Experience 9.5 is using by adding the following syntax to your custom-values.yaml file and changing the values you need: # Security related configuration, e.g. default credentials security: # Security configuration for Core core: # Credentials used for IBM WebSphere Application Server administrative access, needs to be adjusted if different credentials are already in place # This setting does currently NOT adjust the existing user credentials. wasUser: \"REDACTED\" wasPassword: \"REDACTED\" # Credentials used for HCL Digital Experience Core administrative access, needs to be adjusted if different credentials are already in place # This setting does currently NOT adjust the existing user credentials wpsUser: \"REDACTED\" wpsPassword: \"REDACTED\" # Security configuration for Digital Asset Management digitalAssetManagement: # Credentials used by the Digital Asset Management to access the persistence database. dbUser: \"REDACTED\" dbPassword: \"REDACTED\" # Credentials used by the persistence database to perform replication between database nodes. replicationUser: \"REDACTED\" replicationPassword: \"REDACTED\" # Security configuration for Open LDAP openLdap: # Admin user for Open LDAP, can not be adjusted currently. ldapUser: \"REDACTED\" # Admin password for Open LDAP ldapPassword: \"REDACTED\"","title":"Configure credentials"},{"location":"containerization/helm/planning/helm_additional_tasks/#configure-core-sidecar-logging","text":"Beginning with HCL Digital Experience 9.5 CF199, Kubernetes deployment using Helm allows you to expose logs that are written to files by the DX Core application. The deployment uses sidecar containers, which access the same logs volume as the Core, read the log files, and expose them as their standard output. You can access logs with commands like kubectl logs -n <namespace> <pod-name> <sidecar-container-name> , for example, kubectl logs -n dxns dx-deployment-core-0 system-err-log . See the official Kubernetes documentation for more information. Shared volume The DX Core container and sidecar containers share the same volume. This allows DX Core to write its logs, and have the sidecar containers read those logs. The logs are mounted at /opt/HCL/logs (and symbolically linked from /opt/HCL/wp_profile/logs) in the DX Core container, and at /var/logs/ in the sidecar containers. The different directory paths emphasize that sidecar containers can only read files written by Core under its logs directory. Files in other directories (such as the profile) are not available to the sidecars. Default configuration Two sidecar containers are launched with Core: system-out-log - exposes the log file at /var/logs/WebSphere_Portal/SystemOut.log. system-err-log - exposes the log file at /var/logs/WebSphere_Portal/SystemErr.log. Configure custom sidecar containers Use the following syntax to configure more sidecar containers for additional log files in the custom-values.yaml file. Important: You can only expose log files inside of the /var/logs/ directory. logging: # Core specific logging configuration core: # List of sidecar containers mapping a container name to a file path for a log file to be exposed # Each element must consist of a `containerName` and a `logFilePath` # Example: # customLogSidecarContainers: # - containerName: \"trace\" # logFilePath: \"/var/logs/WebSphere_Portal/trace.log\" customLogSidecarContainers: [] Example: The following example starts a new sidecar container, and exposes the logs in /var/logs/WebSphere_Portal/trace.log. logging: core: customLogSidecarContainers: - containerName: \"trace\" logFilePath: \"/var/logs/WebSphere_Portal/trace.log\"","title":"Configure Core sidecar logging"},{"location":"containerization/helm/planning/helm_additional_tasks/#configure-remote-search-sidecar-logging","text":"Beginning with HCL Digital Experience 9.5 CF199, Kubernetes deployment using Helm allows you to expose logs that are written to files on its PersistentVolumes (PVs) by the DX Remote Search application. The deployment uses sidecar containers, which access the PersistentVolume as the Remote Search container, read the log files, and expose them as their standard output. You can access logs with commands like kubectl logs -n <namespace> <pod-name> <sidecar-container-name> , for example, kubectl logs -n dxns dx-deployment-remote-search-0 system-err-log . See the official Kubernetes documentation for more information. Shared volume The DX Remote Search container and sidecar containers in the same pod share the same volume. This allows DX Remote Search to write its logs, and have the sidecar containers read those logs. The profile volume containing the logs is mounted at /opt/HCL/AppServer/profiles/prs_profile/ in the DX Remote Search container, and at /var/profile/ in the sidecar containers. The different directory paths emphasize that sidecar containers can only read files written by Remote Search under its profile directory. Files in other directories are not available to the sidecars. Default configuration Two sidecar containers are launched with Remote Search: system-out-log - exposes the log file at /var/profile/logs/server1/SystemOut.log. system-err-log - exposes the log file at /var/profile/logs/server1/SystemErr.log. Configure custom sidecar containers Use the following syntax to configure more sidecar containers for additional log files in the custom-values.yaml file. Important: You can only expose log files inside of the /var/profile/ directory. logging: remoteSearch: # List of sidecar containers mapping a container name to a file path for a log file to be exposed # Each element must consist of a `containerName` and a `logFilePath`, the latter must be located in /var/profile # Example: # customLogSidecarContainers: # - containerName: \"trace\" # logFilePath: \"/var/profile/logs/server1/trace.log\" customLogSidecarContainers: [] Example: The following example starts a new sidecar container, and exposes the logs in /var/profile/logs/server1/trace.log. logging: remoteSearch: customLogSidecarContainers: - containerName: \"trace\" logFilePath: \"/var/profile/logs/server1/trace.log\"","title":"Configure Remote Search sidecar logging"},{"location":"containerization/helm/planning/helm_additional_tasks/#configure-labels-and-annotations","text":"This section documents the configuration of labels and annotations for different DX resources. Annotations Services and Pods To configure annotations for kubernetes services and pods, update your custom-values.yaml file as follows: Notes: Additional annotations are not mandatory for a deployment. Ensure you do not overwrite existing DX annotations such as the following: meta.helm.sh/release-name meta.helm.sh/release-namespace Sample annotations for core service To set annotation KEY1 with value VALUE1 and annotation KEY2 with value VALUE2 on the core service, add the following to your custom-values.yaml file: annotations: service: core: - key: KEY1 value: VALUE1 - key: KEY2 value: VALUE2 Sample annotations for core pods To set annotation KEY1 with value VALUE1 and annotation KEY2 with value VALUE2 on core pods, add the following to your custom-values.yaml file: annotations: pod: core: - key: KEY1 value: VALUE1 - key: KEY2 value: VALUE2 Labels Services and Pods To configure labels for kubernetes services and pods, update your custom-values.yaml file as follows: Notes: Additional labels are not mandatory for a deployment. Ensure that you do not overwrite existing DX Labels such as the following: ``` release ``` ``` helm.sh/chart ``` ``` app.kubernetes.io/version ``` ``` app.kubernetes.io/managed-by ``` ``` app.kubernetes.io/name ``` app.kubernetes.io/instance Sample labels for core services To set label KEY1 with value VALUE1 and label KEY2 with value VALUE2 on the core services, add the following to your custom-values.yaml file: label: service: core: - key: KEY1 value: VALUE1 - key: KEY2 value: VALUE2 Sample labels for core pods To set label KEY1 with value VALUE1 and label KEY2 with value VALUE2 on core pods, add the following to your custom-values.yaml file: label: pod: core: - key: KEY1 value: VALUE1 - key: KEY2 value: VALUE2","title":"Configure Labels and Annotations"},{"location":"containerization/helm/planning/helm_additional_tasks/#configure-environment-variables-for-dx-resources","text":"This section explains the configuration of environment variables for different DX resources. Environment variables To configure environment variables for kubernetes pods, update your custom-values.yaml file as below. Note: Additional environment values are not mandatory for a deployment. Sample environment variables for core pods To set environment variable KEY1 with value VALUE1 and environment variable KEY2 with value VALUE2 on core pods, add the following to your custom-values.yaml file: environment: pod: core: - name: KEY1 value: VALUE1 - name: KEY2 value: VALUE2","title":"Configure environment variables for DX resources"},{"location":"containerization/helm/planning/helm_additional_tasks/#incubator-section-in-the-valuesyaml-file","text":"The Incubator section is in the root level of the values.yaml file in the Helm charts. This section contains the capabilities that are planned to be made available for production environments in the future releases. The configurations within the incubator section are subject to change. The default values within this section are defined in such a way that they do not interfere with the existing deployments. The features and functions within the incubator section are considered experimental and might not be fully documented yet. Note: All features within the incubator section are not recommended to be used in the production environments. Refer to Install and uninstall commands for the next steps.","title":"Incubator section in the values.yaml file"},{"location":"containerization/helm/planning/helm_additional_tasks/#use-imagepullsecrets","text":"To use a container image registry that has access restrictions and requires credentials, you need to leverage ImagePullSecrets in your deployment. Refer to the Kubernetes Documentation for additional information on this topic. In addition, reference your Cloud Provider documentation on how to create ImagePullSecrets . Note: Ensure that the ImagePullSecret has been created in the same namespace that your DX deployment is installed to.","title":"Use ImagePullSecrets"},{"location":"containerization/helm/planning/helm_additional_tasks/#configure-deployment-to-use-imagepullsecrets","text":"In order for the HCL Digital Experience 9.5 deployment to leverage ImagePullSecrets you need to adjust your custom-values.yaml file to include the following syntax: images: imagePullSecrets: - name: regcred The name regcred can be different, depending on how you have created your ImagePullSecret and how it is named. Ensure that you reference the correct name in the configuration. It is assume that you have moved the HCL Digital Experience 9.5 images to your registry; make sure it is also configured properly in your custom-values.yaml : images: repository: \"your-repo:port\" All pods created now have that secret configured for pulling DX container images. Parent topic: Deploying container platforms using Helm","title":"Configure deployment to use ImagePullSecrets"},{"location":"containerization/helm/planning/helm_configure_networking/","text":"Configure networking This section explains what must be configured from a networking perspective to get HCL Digital Experience 9.5 running in your Kubernetes or OpenShift cluster, and to provide accessibility to your deployment from outside the Cluster. Full Kubernetes or OpenShift deployment If you deploy both Core and all other applications inside OpenShift or Kubernetes, this section shows you what needs to be configured. Core host In a full deployment, the host for both the Core and the other applications are the same. It is recommended to configure the host before you run the deployment. This is only possible if you know the fully qualified domain name (FQDN) or the IP address that the Ambassador Ingress assigns in your deployment beforehand. If that is the case, define the host using the following syntax: # Networking specific configuration networking: # Networking configuration specific to Core core: # Host of Core host: \"your-dx-instance.whateverdomain.com\" If you do not know the hostname beforehand, you can leave it blank and run an additional step later in the installation, that retrieves the assigned hostname from the Ambassador Ingress and configure all applications accordingly. Configure Cross Origin Resource Sharing (CORS) The HCL Digital Experience 9.5 Helm Chart allows you to configure CORS configuration for all the addon to Core applications such as Digital Asset Management or Ring API. This allows you to access the APIs provided by those applications in other applications with ease. You can define a list of allowed hosts for a specific application using the following syntax in your custom-values.yaml : # Networking specific configuration networking: # Networking configurations specific to all addon applications addon: contentComposer: # CORS Origin configuration for Content Composer, comma separated list corsOrigin: \"https://my-different-application.net,https://the-other-application.com\" Refer to the HCL DX 9.5 values.yaml detail for all possible applications that can be configured. Hybrid host Configuring Hybrid Host In a Hybrid deployment, the host for the on-premise DX Core will be added in the core configuration section and the other applications host will be placed under the add-on section. See the following example: networking: # Networking configuration specific to Core core: # Host of Core, must be specified as a FQDN # If you are running hybrid, you need to specify the FQDN of the on-premise Core host # Example: eks-hybrid.dx.com host: \"your-dx-core-instance.whateverdomain.com\" port: \"10042\" contextRoot: \"wps\" personalizedHome: \"myportal\" home: \"portal\" addon: # Host of the addon applications # If you are not running hybrid, you can leave this value empty and the Core host will be used # If you are running hybrid, you need to specify the FQDN of the Kubernetes deployment # Example: eks-hybrid.apps.dx.com host: \"your-dx-apps-instance.whateverdomain.com\" # Port of the addon applications # If you are running hybrid, you can specify a port # If left empty, no specific port will be added to the host port: \"443\" # Setting if SSL is enabled for addon applications # If you are running hybrid, make sure to set this accordingly to the Kubernetes deployment configuration # Will default to true if not set ssl: \"true\" Please refer to the original values.yaml for all available applications that can be configured. See the Planning your container deployment using Helm topic for details. Configure Ingress certificate To have the Ambassador Ingress allow forward requests to your applications, you must provide it with a TLS Certificate. This certificate is used for incoming/outgoing traffic from the outside of the Kubernetes or OpenShift cluster to your applications. Ambassador performs TLS offloading. Generate self-signed certificate It is recommended that you use a properly signed certificate for the Ambassador Ingress . However, it is also possible to create and use a self-signed certificate, for example, for staging or testing environment. Creation of that certificate can be achieved using the following commands for OpenSSL: # Creation of a private key openssl genrsa -out my-key.pem 2048 # Creation of a certificate signed by the private key created before openssl req -x509 -key my-key.pem -out my-cert.pem -days 365 -subj '/CN=my-cert This provides you with a key and cert file that can be used in the next step, creation of the certificate to your deployment. Use certificate Create secret To have your deployment and the Ambassador Ingress use the certificate, you must store it in the Kubernetes or OpenShift cluster as a secret. The secret can be created using the following commands: Note: The secret name can be chosen by you and must be referenced in the next configuration step (the following example uses dx-tls-cert ). The namespace is the Kubernetes namespace where you want to deploy HCL Digital Experience 9.5 to (the example uses digital-experience ). # Create secret with the name \"dx-tls-cert\" # Secret will be created in the namespace \"digital-experience\" # You can either reference the cert and key file created before, or a proper signed certificate e.g. from your CA kubectl create secret tls dx-tls-cert --cert=my-cert.pem --key=my-key.pem -n digital-experience Configure secret in deployment You need to make sure that the reference to the secret is set up correctly in your custom-values.yaml . Otherwise your Ambassador Ingress is not able to answer HTTPS requests due to a missing certificate. You can set the name of the certificate used with the following syntax, the default value is dx-tls-cert : # Networking specific configuration networking: # TLS Certificate secret used for Ambassador Ingress tlsCertSecret: \"dx-tls-cert\" Note: Verify you have entered the correct name. Configure minimum TLS version for Ingress From CF201 and onwards the default minimum TLS version for the Ambassador Ingress is set to v1.2 . TLS v1.2 or higher is recommended to increase security. If support for older TLS versions is still required, then it can be adjusted via the custom-values.yaml . # Networking specific configuration networking: # Set the minimum acceptable TLS version for Amassador Ingress: v1.0, v1.1, # v1.2, or v1.3. It defaults to v1.2 minTlsVersion: \"v1.2\" Refer to Additional tasks for the next steps. Parent topic: Deploying container platforms using Helm","title":"Configure networking"},{"location":"containerization/helm/planning/helm_configure_networking/#configure-networking","text":"This section explains what must be configured from a networking perspective to get HCL Digital Experience 9.5 running in your Kubernetes or OpenShift cluster, and to provide accessibility to your deployment from outside the Cluster.","title":"Configure networking"},{"location":"containerization/helm/planning/helm_configure_networking/#full-kubernetes-or-openshift-deployment","text":"If you deploy both Core and all other applications inside OpenShift or Kubernetes, this section shows you what needs to be configured.","title":"Full Kubernetes or OpenShift deployment"},{"location":"containerization/helm/planning/helm_configure_networking/#core-host","text":"In a full deployment, the host for both the Core and the other applications are the same. It is recommended to configure the host before you run the deployment. This is only possible if you know the fully qualified domain name (FQDN) or the IP address that the Ambassador Ingress assigns in your deployment beforehand. If that is the case, define the host using the following syntax: # Networking specific configuration networking: # Networking configuration specific to Core core: # Host of Core host: \"your-dx-instance.whateverdomain.com\" If you do not know the hostname beforehand, you can leave it blank and run an additional step later in the installation, that retrieves the assigned hostname from the Ambassador Ingress and configure all applications accordingly.","title":"Core host"},{"location":"containerization/helm/planning/helm_configure_networking/#configure-cross-origin-resource-sharing-cors","text":"The HCL Digital Experience 9.5 Helm Chart allows you to configure CORS configuration for all the addon to Core applications such as Digital Asset Management or Ring API. This allows you to access the APIs provided by those applications in other applications with ease. You can define a list of allowed hosts for a specific application using the following syntax in your custom-values.yaml : # Networking specific configuration networking: # Networking configurations specific to all addon applications addon: contentComposer: # CORS Origin configuration for Content Composer, comma separated list corsOrigin: \"https://my-different-application.net,https://the-other-application.com\" Refer to the HCL DX 9.5 values.yaml detail for all possible applications that can be configured.","title":"Configure Cross Origin Resource Sharing (CORS)"},{"location":"containerization/helm/planning/helm_configure_networking/#hybrid-host","text":"Configuring Hybrid Host In a Hybrid deployment, the host for the on-premise DX Core will be added in the core configuration section and the other applications host will be placed under the add-on section. See the following example: networking: # Networking configuration specific to Core core: # Host of Core, must be specified as a FQDN # If you are running hybrid, you need to specify the FQDN of the on-premise Core host # Example: eks-hybrid.dx.com host: \"your-dx-core-instance.whateverdomain.com\" port: \"10042\" contextRoot: \"wps\" personalizedHome: \"myportal\" home: \"portal\" addon: # Host of the addon applications # If you are not running hybrid, you can leave this value empty and the Core host will be used # If you are running hybrid, you need to specify the FQDN of the Kubernetes deployment # Example: eks-hybrid.apps.dx.com host: \"your-dx-apps-instance.whateverdomain.com\" # Port of the addon applications # If you are running hybrid, you can specify a port # If left empty, no specific port will be added to the host port: \"443\" # Setting if SSL is enabled for addon applications # If you are running hybrid, make sure to set this accordingly to the Kubernetes deployment configuration # Will default to true if not set ssl: \"true\" Please refer to the original values.yaml for all available applications that can be configured. See the Planning your container deployment using Helm topic for details.","title":"Hybrid host"},{"location":"containerization/helm/planning/helm_configure_networking/#configure-ingress-certificate","text":"To have the Ambassador Ingress allow forward requests to your applications, you must provide it with a TLS Certificate. This certificate is used for incoming/outgoing traffic from the outside of the Kubernetes or OpenShift cluster to your applications. Ambassador performs TLS offloading.","title":"Configure Ingress certificate"},{"location":"containerization/helm/planning/helm_configure_networking/#generate-self-signed-certificate","text":"It is recommended that you use a properly signed certificate for the Ambassador Ingress . However, it is also possible to create and use a self-signed certificate, for example, for staging or testing environment. Creation of that certificate can be achieved using the following commands for OpenSSL: # Creation of a private key openssl genrsa -out my-key.pem 2048 # Creation of a certificate signed by the private key created before openssl req -x509 -key my-key.pem -out my-cert.pem -days 365 -subj '/CN=my-cert This provides you with a key and cert file that can be used in the next step, creation of the certificate to your deployment.","title":"Generate self-signed certificate"},{"location":"containerization/helm/planning/helm_configure_networking/#use-certificate","text":"Create secret To have your deployment and the Ambassador Ingress use the certificate, you must store it in the Kubernetes or OpenShift cluster as a secret. The secret can be created using the following commands: Note: The secret name can be chosen by you and must be referenced in the next configuration step (the following example uses dx-tls-cert ). The namespace is the Kubernetes namespace where you want to deploy HCL Digital Experience 9.5 to (the example uses digital-experience ). # Create secret with the name \"dx-tls-cert\" # Secret will be created in the namespace \"digital-experience\" # You can either reference the cert and key file created before, or a proper signed certificate e.g. from your CA kubectl create secret tls dx-tls-cert --cert=my-cert.pem --key=my-key.pem -n digital-experience","title":"Use certificate"},{"location":"containerization/helm/planning/helm_configure_networking/#configure-secret-in-deployment","text":"You need to make sure that the reference to the secret is set up correctly in your custom-values.yaml . Otherwise your Ambassador Ingress is not able to answer HTTPS requests due to a missing certificate. You can set the name of the certificate used with the following syntax, the default value is dx-tls-cert : # Networking specific configuration networking: # TLS Certificate secret used for Ambassador Ingress tlsCertSecret: \"dx-tls-cert\" Note: Verify you have entered the correct name.","title":"Configure secret in deployment"},{"location":"containerization/helm/planning/helm_configure_networking/#configure-minimum-tls-version-for-ingress","text":"From CF201 and onwards the default minimum TLS version for the Ambassador Ingress is set to v1.2 . TLS v1.2 or higher is recommended to increase security. If support for older TLS versions is still required, then it can be adjusted via the custom-values.yaml . # Networking specific configuration networking: # Set the minimum acceptable TLS version for Amassador Ingress: v1.0, v1.1, # v1.2, or v1.3. It defaults to v1.2 minTlsVersion: \"v1.2\" Refer to Additional tasks for the next steps. Parent topic: Deploying container platforms using Helm","title":"Configure minimum TLS version for Ingress"},{"location":"containerization/helm/planning/helm_persistent_volume_claims/","text":"Configure PersistentVolumeClaims (PVCs) To run HCL Digital Experience 9.5 Container deployments in your Kubernetes or OpenShift cluster, you need to set up PersistentVolumes (PVs) on your cluster and configure the Helm Chart to create the appropriate PersistentVolumeClaims (PVCs). Before you proceed, review the Persistent Volumes and related operations considerations topic in the DX Help Center. Note: The provisioning of PersistentVolumes (PVs) may differ based on your cluster configuration and your cloud provider. Please reference the documentation of your cloud provider for additional information. Persistent Volume Types Important note: Ensure that your PersistentVolumes (PVs) are created with the Reclaim Policy set to RETAIN. This allows for the reuse of PVs after a PersistentVolumeClaim (PVC) is deleted. This is important to keep data persisted, for example, between deployments or tests. Refrain from using the Reclaim Policy DELETE unless you have the experience in managing these operations successfully, to avoid unpredictable results. This is not recommended in production use, as deleting PVCs causes the Kubernetes or OpenShift cluster to delete the bound PV as well, thus, deleting all the data on it. ReadWriteOnce (RWO) ReadWriteOnce PVs allow only one pod per volume to perform reading and writing transactions. This means that the data on that PV cannot be shared with other pods and is linked to one pod at a time. In the HCL Digital Experience 9.5 Kubernetes or OpenShift deployment using Helm, the only DX applications leveraging RWO PVs are Core and Persistence. Information regarding how to calculate the number of required volumes for the DX Core and Persistence applications is presented in the Persistent Volumes and related operations considerations topic in the DX Help Center. Since Core requires RWO PVs per pod, it may be necessary to have auto-provisioning of such volumes configured in your cluster if you don't know the final maximum number of possible Core pods running at the same time. Each Core pod requires 2 RWO PVs. Since the number of pods for Persistence is limited by design, you need 2 RWO PVs for Persistence. ReadWriteMany (RWX) ReadWriteMany PVs support read and write operations by multiple pods. This means the data on that PV can be shared with other pods and can be linked to multiple pods at a time. In the HCL Digital Experience 9.5 Kubernetes and OpenShift deployment using Helm the only DX applications leveraging RWX PVs are Core and Digital Asset Management. Since the PV can be shared between all Core pods, you need one (1) RWX PV for Core, regardless of the pod count. Since the PV can be shared between all Digital Asset Management pods, you need one (1) RWX PV for Digital Asset Management, regardless of the pod count. Configuration parameters To access the PersistentVolumes (PVs) on your cluster, the HCL Digital Experience 9.5 Kubernetes or OpenShift deployment using Helm creates PersistentVolumeClaims (PVCs) that binds the PVs to the corresponding pods. Each PVC that applications require allows you to configure the following parameters, as shown below. For a PVC of the Core application: # Persistent Volume Setup volumes: # Persistent Volumes for Core core: # Shared profile PVC shared by all Core pods profile: storageClassName: \"manual\" requests: storage: \"10Gi\" # Optional volume name to specifically map to volumeName: Important note: Make sure to properly define the PVC configuration in your custom-values.yaml file before running the deployment. This avoids issues when trying to get your deployment up and running. *StorageClassName * Depending on your Cluster configuration, you may have configured a specific StorageClass that should be used for your PVs and the PVCs of HCL Digital Experience. This property allows you to enter the name of the StorageClass you want the deployment to use. PVCs then only accepts PVs that match the StorageClassName you have defined in the configuration. If there are no PVs that match, the pods remain pending and do not start until a fitting PV is provided by the cluster. If you enter an empty StorageClassName , Kubernetes falls back to the default StorageClass configured in your Cluster. Refer to your cloud provider for additional information about your default StorageClass, since this depends on your Kubernetes or OpenShift environment. Reference the original values.yaml file you have extracted as outlined in the Prepare configuration topic for all configurable PVCs. Requests Storage Storage allows you to define the amount of space that is required by the PVC. Once defined, it only accepts PVs that have the same or more storage capacity as requested. If there are no PVs matching the definitions, the pods remain pending and do not start until a properly-sized PV is provided by the cluster. VolumeName If you want your deployment to pick up a specific PV that you have created, use of the VolumeName can define that instruction. Ensure that the PV you created has a unique name. Then, add that name as a configuration parameter for the PVC. The PVCs only matches with a PV of that name, matching the other requirements-like type ( RWO/RWX , as defined by the deployment itself), storage capacity, and StorageClassName . This allows you to properly prepare your PVs beforehand and ensure that the applications store their data where you want them to. Sample PVC configurations The following are some examples for configuration of the PersistentVolumeClaims (PVCs) using your custom-values.yaml: Fallback to default StorageClass for all applications Leaving an empty StorageClassName causes Kubernetes or OpenShift to fall back to the StorageClass that has been configured as the default one in your cluster: # Persistent Volume Setup volumes: # Persistent Volumes for Core core: # Shared profile PVC shared by all Core pods profile: storageClassName: \"\" # Transaction Log PVC, one per Core pod tranlog: storageClassName: \"\" # Application Log PVC, one per Core pod log: storageClassName: \"\" # Persistent Volumes for Digital Asset Management digitalAssetManagement: # Binary storage PVC, shared by all Digital Asset Management Pods binaries: storageClassName: \"\" # Persistent Volumes for Persistence persistence: # Database PVC, one per Persistence pod database: storageClassName: \"\" # Persistent Volumes for Open LDAP openLdap: # slapd directory PVC, one per Open LDAP pod slapd: storageClassName: \"\" # certificate directory, on per Open LDAP pod certificate: storageClassName: \"\" # ldap directory PVC, one per Open LDAP pod ldap: storageClassName: \"\" # Persistent Volumes for Remote Search remoteSearch: # Remote Search profile PVC, one per Remote Search pod prsprofile: storageClassName: \"\" Specific StorageClasses for all applications Setting the StorageClassName to mycloudstorage causes Kubernetes or OpenShift to create PVCs that only accepts PVs with the StorageClass mycloudstorage : # Persistent Volume Setup volumes: # Persistent Volumes for Core core: # Shared profile PVC shared by all Core pods profile: storageClassName: \"mycloudstorage\" # Transaction Log PVC, one per Core pod tranlog: storageClassName: \"mycloudstorage\" # Application Log PVC, one per Core pod log: storageClassName: \"mycloudstorage\" # Persistent Volumes for Digital Asset Management digitalAssetManagement: # Binary storage PVC, shared by all Digital Asset Management Pods binaries: storageClassName: \"mycloudstorage\" # Persistent Volumes for Persistence persistence: # Database PVC, one per Persistence pod database: storageClassName: \"mycloudstorage\" # Persistent Volumes for Open LDAP openLdap: # slapd directory PVC, one per Open LDAP pod slapd: storageClassName: \"mycloudstorage\" # certificate directory, on per Open LDAP pod certificate: storageClassName: \"mycloudstorage\" # ldap directory PVC, one per Open LDAP pod ldap: storageClassName: \"mycloudstorage\" # Persistent Volumes for Remote Search remoteSearch: # Remote Search profile PVC, one per Remote Search pod prsprofile: storageClassName: \"mycloudstorage\" Specific volume names Specifying a name ensures that Kubernetes or OpenShift only assigns PVs with the matching name to the PVCs created for the applications: # Persistent Volume Setup volumes: # Persistent Volumes for Core core: # Shared profile PVC shared by all Core pods profile: storageClassName: \"mycloudstorage\" # Optional volume name to specifically map to volumeName: \"core-profile\" # Persistent Volumes for Digital Asset Management digitalAssetManagement: # Binary storage PVC, shared by all Digital Asset Management Pods binaries: storageClassName: \"mycloudstorage\" # Optional volume name to specifically map to volumeName: \"dam-binaries\" Adjusted volume size for Core PVCs You may override the default sizes for PVCs by adjusting the storage requests: # Persistent Volume Setup volumes: # Persistent Volumes for Core core: # Shared profile PVC shared by all Core pods profile: storageClassName: \"mycloudstorage\" requests: storage: \"150Gi\" # Transaction Log PVC, one per Core pod tranlog: storageClassName: \"mycloudstorage\" requests: storage: \"1Gi\" # Application Log PVC, one per Core pod log: storageClassName: \"mycloudstorage\" requests: storage: \"1Gi\" Sample Persistent Volume definitions Sample StorageClass It is recommended to have a separate StorageClass for HCL Digital Experience 9.5 deployments in order to prevent other deployed applications in the same Kubernetes or OpenShift cluster to interfere with Persistent Volumes (PVs) that should only be used by HCL Digital Experience. The following example shows a StorageClass with the name dx-deploy-stg that can be created in your cluster for that purpose: kind: StorageClass apiVersion: storage.k8s.io/v1 metadata: name: dx-deploy-stg provisioner: kubernetes.io/no-provisioner reclaimPolicy: Retain volumeBindingMode: WaitForFirstConsumer Applying this yaml on your Kubernetes or OpenShift cluster creates the StorageClass as a cluster-wide resource. Sample Persistent Volume To leverage the StorageClass you created, you can use the following Persistent Volume example, which connects to an NFS Server of your choice to provide a PV: kind: PersistentVolume apiVersion: v1 metadata: name: wp-profile-volume spec: capacity: storage: 100Gi nfs: server: your_nfs_server.com path: /exports/volume_name accessModes: - ReadWriteMany persistentVolumeReclaimPolicy: Retain storageClassName: dx-deploy-stg mountOptions: - hard - nfsvers=4.1 - rsize=8388608 - wsize=8388608 - timeo=600 - retrans=2 - noresvport volumeMode: Filesystem Refer to Networking configuration for the next steps. Parent topic: Deploying container platforms using Helm","title":"Configure PersistentVolumeClaims (PVCs)"},{"location":"containerization/helm/planning/helm_persistent_volume_claims/#configure-persistentvolumeclaims-pvcs","text":"To run HCL Digital Experience 9.5 Container deployments in your Kubernetes or OpenShift cluster, you need to set up PersistentVolumes (PVs) on your cluster and configure the Helm Chart to create the appropriate PersistentVolumeClaims (PVCs). Before you proceed, review the Persistent Volumes and related operations considerations topic in the DX Help Center. Note: The provisioning of PersistentVolumes (PVs) may differ based on your cluster configuration and your cloud provider. Please reference the documentation of your cloud provider for additional information.","title":"Configure PersistentVolumeClaims (PVCs)"},{"location":"containerization/helm/planning/helm_persistent_volume_claims/#persistent-volume-types","text":"Important note: Ensure that your PersistentVolumes (PVs) are created with the Reclaim Policy set to RETAIN. This allows for the reuse of PVs after a PersistentVolumeClaim (PVC) is deleted. This is important to keep data persisted, for example, between deployments or tests. Refrain from using the Reclaim Policy DELETE unless you have the experience in managing these operations successfully, to avoid unpredictable results. This is not recommended in production use, as deleting PVCs causes the Kubernetes or OpenShift cluster to delete the bound PV as well, thus, deleting all the data on it. ReadWriteOnce (RWO) ReadWriteOnce PVs allow only one pod per volume to perform reading and writing transactions. This means that the data on that PV cannot be shared with other pods and is linked to one pod at a time. In the HCL Digital Experience 9.5 Kubernetes or OpenShift deployment using Helm, the only DX applications leveraging RWO PVs are Core and Persistence. Information regarding how to calculate the number of required volumes for the DX Core and Persistence applications is presented in the Persistent Volumes and related operations considerations topic in the DX Help Center. Since Core requires RWO PVs per pod, it may be necessary to have auto-provisioning of such volumes configured in your cluster if you don't know the final maximum number of possible Core pods running at the same time. Each Core pod requires 2 RWO PVs. Since the number of pods for Persistence is limited by design, you need 2 RWO PVs for Persistence. ReadWriteMany (RWX) ReadWriteMany PVs support read and write operations by multiple pods. This means the data on that PV can be shared with other pods and can be linked to multiple pods at a time. In the HCL Digital Experience 9.5 Kubernetes and OpenShift deployment using Helm the only DX applications leveraging RWX PVs are Core and Digital Asset Management. Since the PV can be shared between all Core pods, you need one (1) RWX PV for Core, regardless of the pod count. Since the PV can be shared between all Digital Asset Management pods, you need one (1) RWX PV for Digital Asset Management, regardless of the pod count.","title":"Persistent Volume Types"},{"location":"containerization/helm/planning/helm_persistent_volume_claims/#configuration-parameters","text":"To access the PersistentVolumes (PVs) on your cluster, the HCL Digital Experience 9.5 Kubernetes or OpenShift deployment using Helm creates PersistentVolumeClaims (PVCs) that binds the PVs to the corresponding pods. Each PVC that applications require allows you to configure the following parameters, as shown below. For a PVC of the Core application: # Persistent Volume Setup volumes: # Persistent Volumes for Core core: # Shared profile PVC shared by all Core pods profile: storageClassName: \"manual\" requests: storage: \"10Gi\" # Optional volume name to specifically map to volumeName: Important note: Make sure to properly define the PVC configuration in your custom-values.yaml file before running the deployment. This avoids issues when trying to get your deployment up and running. *StorageClassName * Depending on your Cluster configuration, you may have configured a specific StorageClass that should be used for your PVs and the PVCs of HCL Digital Experience. This property allows you to enter the name of the StorageClass you want the deployment to use. PVCs then only accepts PVs that match the StorageClassName you have defined in the configuration. If there are no PVs that match, the pods remain pending and do not start until a fitting PV is provided by the cluster. If you enter an empty StorageClassName , Kubernetes falls back to the default StorageClass configured in your Cluster. Refer to your cloud provider for additional information about your default StorageClass, since this depends on your Kubernetes or OpenShift environment. Reference the original values.yaml file you have extracted as outlined in the Prepare configuration topic for all configurable PVCs. Requests Storage Storage allows you to define the amount of space that is required by the PVC. Once defined, it only accepts PVs that have the same or more storage capacity as requested. If there are no PVs matching the definitions, the pods remain pending and do not start until a properly-sized PV is provided by the cluster. VolumeName If you want your deployment to pick up a specific PV that you have created, use of the VolumeName can define that instruction. Ensure that the PV you created has a unique name. Then, add that name as a configuration parameter for the PVC. The PVCs only matches with a PV of that name, matching the other requirements-like type ( RWO/RWX , as defined by the deployment itself), storage capacity, and StorageClassName . This allows you to properly prepare your PVs beforehand and ensure that the applications store their data where you want them to.","title":"Configuration parameters"},{"location":"containerization/helm/planning/helm_persistent_volume_claims/#sample-pvc-configurations","text":"The following are some examples for configuration of the PersistentVolumeClaims (PVCs) using your custom-values.yaml: Fallback to default StorageClass for all applications Leaving an empty StorageClassName causes Kubernetes or OpenShift to fall back to the StorageClass that has been configured as the default one in your cluster: # Persistent Volume Setup volumes: # Persistent Volumes for Core core: # Shared profile PVC shared by all Core pods profile: storageClassName: \"\" # Transaction Log PVC, one per Core pod tranlog: storageClassName: \"\" # Application Log PVC, one per Core pod log: storageClassName: \"\" # Persistent Volumes for Digital Asset Management digitalAssetManagement: # Binary storage PVC, shared by all Digital Asset Management Pods binaries: storageClassName: \"\" # Persistent Volumes for Persistence persistence: # Database PVC, one per Persistence pod database: storageClassName: \"\" # Persistent Volumes for Open LDAP openLdap: # slapd directory PVC, one per Open LDAP pod slapd: storageClassName: \"\" # certificate directory, on per Open LDAP pod certificate: storageClassName: \"\" # ldap directory PVC, one per Open LDAP pod ldap: storageClassName: \"\" # Persistent Volumes for Remote Search remoteSearch: # Remote Search profile PVC, one per Remote Search pod prsprofile: storageClassName: \"\" Specific StorageClasses for all applications Setting the StorageClassName to mycloudstorage causes Kubernetes or OpenShift to create PVCs that only accepts PVs with the StorageClass mycloudstorage : # Persistent Volume Setup volumes: # Persistent Volumes for Core core: # Shared profile PVC shared by all Core pods profile: storageClassName: \"mycloudstorage\" # Transaction Log PVC, one per Core pod tranlog: storageClassName: \"mycloudstorage\" # Application Log PVC, one per Core pod log: storageClassName: \"mycloudstorage\" # Persistent Volumes for Digital Asset Management digitalAssetManagement: # Binary storage PVC, shared by all Digital Asset Management Pods binaries: storageClassName: \"mycloudstorage\" # Persistent Volumes for Persistence persistence: # Database PVC, one per Persistence pod database: storageClassName: \"mycloudstorage\" # Persistent Volumes for Open LDAP openLdap: # slapd directory PVC, one per Open LDAP pod slapd: storageClassName: \"mycloudstorage\" # certificate directory, on per Open LDAP pod certificate: storageClassName: \"mycloudstorage\" # ldap directory PVC, one per Open LDAP pod ldap: storageClassName: \"mycloudstorage\" # Persistent Volumes for Remote Search remoteSearch: # Remote Search profile PVC, one per Remote Search pod prsprofile: storageClassName: \"mycloudstorage\" Specific volume names Specifying a name ensures that Kubernetes or OpenShift only assigns PVs with the matching name to the PVCs created for the applications: # Persistent Volume Setup volumes: # Persistent Volumes for Core core: # Shared profile PVC shared by all Core pods profile: storageClassName: \"mycloudstorage\" # Optional volume name to specifically map to volumeName: \"core-profile\" # Persistent Volumes for Digital Asset Management digitalAssetManagement: # Binary storage PVC, shared by all Digital Asset Management Pods binaries: storageClassName: \"mycloudstorage\" # Optional volume name to specifically map to volumeName: \"dam-binaries\" Adjusted volume size for Core PVCs You may override the default sizes for PVCs by adjusting the storage requests: # Persistent Volume Setup volumes: # Persistent Volumes for Core core: # Shared profile PVC shared by all Core pods profile: storageClassName: \"mycloudstorage\" requests: storage: \"150Gi\" # Transaction Log PVC, one per Core pod tranlog: storageClassName: \"mycloudstorage\" requests: storage: \"1Gi\" # Application Log PVC, one per Core pod log: storageClassName: \"mycloudstorage\" requests: storage: \"1Gi\"","title":"Sample PVC configurations"},{"location":"containerization/helm/planning/helm_persistent_volume_claims/#sample-persistent-volume-definitions","text":"Sample StorageClass It is recommended to have a separate StorageClass for HCL Digital Experience 9.5 deployments in order to prevent other deployed applications in the same Kubernetes or OpenShift cluster to interfere with Persistent Volumes (PVs) that should only be used by HCL Digital Experience. The following example shows a StorageClass with the name dx-deploy-stg that can be created in your cluster for that purpose: kind: StorageClass apiVersion: storage.k8s.io/v1 metadata: name: dx-deploy-stg provisioner: kubernetes.io/no-provisioner reclaimPolicy: Retain volumeBindingMode: WaitForFirstConsumer Applying this yaml on your Kubernetes or OpenShift cluster creates the StorageClass as a cluster-wide resource. Sample Persistent Volume To leverage the StorageClass you created, you can use the following Persistent Volume example, which connects to an NFS Server of your choice to provide a PV: kind: PersistentVolume apiVersion: v1 metadata: name: wp-profile-volume spec: capacity: storage: 100Gi nfs: server: your_nfs_server.com path: /exports/volume_name accessModes: - ReadWriteMany persistentVolumeReclaimPolicy: Retain storageClassName: dx-deploy-stg mountOptions: - hard - nfsvers=4.1 - rsize=8388608 - wsize=8388608 - timeo=600 - retrans=2 - noresvport volumeMode: Filesystem Refer to Networking configuration for the next steps. Parent topic: Deploying container platforms using Helm","title":"Sample Persistent Volume definitions"},{"location":"containerization/helm/planning/helm_planning_deployment/","text":"Planning your container deployment using Helm Helm is a software package manager that simplifies deployment of applications and services to Red Hat OpenShift and Kubernetes container platforms. Before proceeding with your HCL DX 9.5 deployment using Helm, review the following Help Center topics: Deploying HCL DX CF196 to container platforms using Helm for an understanding of the capabilities, deployment structures, configuration and scaling options available for HCL DX 9.5 CF196 and later deployments. Containerization requirements and limitations for an understanding of the requirements, including capacity planning, and current limitations for an HCL Digital Experience 9.5 Container Update CF196 and later deployment using Helm . Prepare your HCL DX 9.5 target environment. This section outlines mandatory and optional tasks that need to be done before installation of the HCL Digital Experience 9.5 Container Update CF196 to Google Kubernetes Engine using Helm. Support to deploy to Red Hat OpenShift, Amazon Elastic Kubernetes Service (Amazon EKS), and Microsoft Azure Kubernetes Service (AKS) using Helm is added in Container Update CF197. This includes preparing your cluster to have proper access to application container images, creating a custom configuration file that fits your deployment needs and configuring network and application settings to allow your HCL Digital Experience 9.5 CF196 and later deployment to work properly. Mandatory tasks: The following tasks are mandatory for HCL Digital Experience 9.5 Container deployment to operate in your Kubernetes cluster using Helm. Prepare a namespace. Before you can deploy HCL Digital Experience, it is recommended that you create a namespace inside your Kubernetes Cluster. You need to create a namespace in your Kubernetes cluster that contains all the resources related to your HCL DX 9.5 Container deployment. It is recommended that this is created before deployment as you may need to add an ImagePullSecret or configure the TLS certificate for the Ambassador Ingress before deployment. Identify a name for your namespace and create it using the following syntax: On Kubernetes platforms Kubectl ``` Command to create a namespace using kubectl This example creates a namespace called \"my-namespace\" kubectl create ns my-namespace ``` OpenShift For OpenShift, you must create a namespace with specific settings. Use the following namespace definition and save it as namespace.yaml. You must replace my-namespace in the template with the name of the namespace you are using. apiVersion: v1 kind: Namespace metadata: name: my-namespace annotations: openshift.io/sa.scc.mcs: \"s0:c24,c4\" openshift.io/sa.scc.supplemental-groups: \"1001/10000\" openshift.io/sa.scc.uid-range: \"1000/10000\" OpenShift client ``` Command to create namespace from template file oc apply -f namespace.yaml ``` Prepare the Helm deployment configuration file. Create a configuration file that fits the needs of your target HCL DX 9.5 Container deployment. The configuration file is the heart of your deployment using Helm. It defines how HCL Digital Experience 9.5 is deployed to supported platforms, and how it behaves during runtime operations. This section explains how to create your own configuration file and how to leverage the existing values.yaml inside the Helm Chart. It also explains how to optionally overwrite settings in case the default set may not be sufficient. Important: Modification to any files (chart.yaml, templates, crds) in hcl-dx-deployment-vX.X.X_XXXXXXXX-XXXX.tar.gz, except custom-values.yaml or values.yaml, is not supported. The configuration flow Helm provides multiple ways to define values that can be processed to run an installation. Processing involves a three-step approach, that is ordered sequentially within a hierarchy. Helm Chart values.yaml Every Helm Chart contains a values.yaml file. It defines all configurable parameters that a Helm Chart accepts and the default values that are used during an installation. If you do not provide any other configuration during an installation, Helm extracts all deployment information from the values.yaml file inside the Helm Chart. All parameters that were not overwritten using any other configuration methods return to their default values from the values.yaml file inside the Helm Chart. Custom value files Helm provides you with a way to maintain your own custom values files. You can specify a custom values file you want to use when running an installation. This custom values file only needs to contain the parameters that you want to overwrite with your preferred settings. Note: There is no need to have the same complete set of parameters inside your custom values file, as there are available by default in the Helm Chart values.yaml . As outlined previously in this section, everything that is not defined in your custom values file are applied using the defaults from values.yaml inside the Helm Charts. Please be aware that the parameters you can configure using your custom values file need to exactly align with those provided by the Helm Charts own values.yaml. You cannot configure anything that is not exposed in the values.yaml definition. Override parameters It is possible to define values using a --set parameter in the Helm CLI during the installation of a Helm Chart. Since there are many values that can be configured in the HCL Digital Experience deployment, we do not recommend this technique, since it makes installation commands very large and confusing. The default HCL DX 9.5 Container values.yaml file HCL DX 9.5 Helm Chart provides a default values.yaml, which contains all possible configuration parameters. To access this file, you may use the following command when you have the HCL DX 9.5 CF196 or later Helm Chart tar.gz file on hand: ``` Command to extract values.ymal from Helm Chart helm show values hcl-dx-deployment.tar.gz > values.yaml ``` The file contains all configurable parameters and their default values. You may use this file as a blueprint to create your own custom-values.yaml . You may also just rename the extracted values.yaml to custom-values.yaml . Note: Having a complete copy of the default values.yaml is not necessary and may bloat your configuration file with values that are already present in the DX Helm Chart. A custom configuration file Helm allows you to provide a custom configuration file during the installation or upgrade process. That file only overwrites settings that are defined within it. For parts of the configuration that are not defined in your custom configuration file, Helm returns to the default values in the values.yaml file inside the DX Helm Chart. This allows you to create a file that only overwrites settings that are required, keeping the overall size of your configuration file small and the maintainability high. This Help Center documentation refers to the custom configuration file as custom-values.yaml . You may name your custom configuration file as preferred. Load container images. This section presents how to load the DX 9.5 Container Update CF196 or later images into your container image repository, tag them to fit your repository structure, and push them to your repository, so that all Nodes in your Kubernetes or OpenShift cluster can deploy HCL Digital Experience 9.5 Pods. To use HCL Digital Experience 9.5 in your Kubernetes or OpenShift cluster, you have to make the container images available to all nodes of your cluster. Usually this is done by providing them through a container image repository. Depending on your cloud provider, there may be different types of default container image repositories already configured. Refer to the documentation of your cloud provider for setup and use of such platform container image repository. It is assumed that you have a repository configured and running, and is technically reachable from all your Kubernetes or OpenShift cluster nodes. In the following guidance, the docker CLI is used as a command reference. Tools like Podman may also be used, but are not described in this documentation. The procedure for the use of such tools are the same. Extract HCL Digital Experience 9.5 package. The HCL Digital Experience 9.5 Container Update packages are provided in a compressed .zip file, that can easily be unzipped using a utility of your choice. Refer to the latest HCL DX 9.5 Container Update Release CF196 and later file listings in the Docker deployment topic: Note: The following are examples using Container Update CF196 files. Replace those references with the HCL DX 9.5 Container Update CFxxx release files you are deploying. ``` Unzip of HCL Digital Experience 9.5 CFxxx package unzip hcl-dx-kubernetes-v95-CF196.zip ``` The package includes all DX 9.5 container images, and Helm Charts as tar.gz files. The content of the package looks similar to the following structure: ``` hcl-dx-kubernetes-v95-CF196.zip HCL DX notices V9.5 CF196.txt Notices file dx-dx-ambassador-image-154.tar.gz Image for the Ambassador Ingress hcl-dx-cloud-operator-image-v95_CFXXX_XXXXXXXX-XXXX.tar.gz Image for the Core Operator (not needed for Helm deployments) hcl-dx-cloud-scripts-v95_CFXXX_XXXXXXXX-XXXX.zip Cloud deployment scripts incl. dxctl (not needed for Helm deployments) hcl-dx-content-composer-image-vX.X.X_XXXXXXXX-XXXX.tar.gz Image for Content Composer hcl-dx-core-image-v95_CFXXX_XXXXXXXX-XXXX.tar.gz Image for Core hcl-dx-digital-asset-management-operator-image-v95_CFXXX_XXXXXXXX-XXXX.tar.gz Image for the Digital Asset Management Operator (not needed for Helm deployments) hcl-dx-digital-asset-manager-image-vX.X.X_XXXXXXXX-XXXX.tar.gz Image for Digital Asset Management hcl-dx-experience-api-sample-ui-vX.X.X.XXXXXXXX-XXXX.zip Sample UI for Experience API hcl-dx-image-processor-image-vX.X.X_XXXXXXXX-XXXX.tar.gz Image for Image Processor hcl-dx-openldap-image-v1.1.0-master_XXXXXXXX_XXXXXXXXXX.tar.gz Image for OpenLDAP hcl-dx-postgres-image-vX.X.X_XXXXXXXX-XXXX.tar.gz Image for Digital Asset Management Persistence hcl-dx-redis-image-X.X.X.tar.gz Image for Ambassador Ingress Redis hcl-dx-remote-search-image-v95_CFXXX_XXXXXXXX-XXXX.tar.gz Image for Remote Search hcl-dx-ringapi-image-vX.X.X_XXXXXXXX-XXXX.tar.gz Image for Ring API hcl-dx-runtime-controller-image-vX.X.X_XXXXXXXX-XXX.tar.gz Image for Runtime Controller hcl-dx-deployment-vX.X.X_XXXXXXXX-XXX.tar.gz Helm Charts ``` Load images locally. To load the individual image files, you may use the following command: ``` Command to load container image into local repository docker load < image-file-name.tar.gz docker load < hcl-dx-core-image-v95_CFXXX_XXXXXXXX-XXXX.tar.gz ``` If you want to load all DX 9.5 CFxxx image files via one command, you may use the following command: ``` Command to load all images at once Since HCL Digital Experience images are all containing the word \"images\", we can filter for fitting tar.gz files ls -f | grep image | xargs -L 1 docker load -i ``` This loads all images to your local repository, ready for further usage. You may verify if the loading is successful with the following command: ``` List all images docker images Command output (minified, example) REPOSITORY TAG IMAGE ID CREATED SIZE hcl/dx/remote-search v95_CF195_20210514-1708 e4c46618f404 4 weeks ago 2.25GB hcl/dx/cloud-operator v95_CF195_20210515-0201 62cc304706a3 4 weeks ago 220MB hcl/dx/core v95_CF195_20210514-1708 36e30c620cdd 4 weeks ago 6.29GB hcl/dx/openldap v1.1.0-master_20210514_1621013302 a5519e06dd17 4 weeks ago 772MB hcl/dx/image-processor v1.8.0_20210514-1712 d5d99d86f81a 4 weeks ago 507MB hcl/dx/digital-asset-manager v1.8.0_20210514-1711 19c8b76b1cad 4 weeks ago 547MB hcl/dx/digital-asset-management-operator v95_CF195_20210514-1714 bc0f5638817a 4 weeks ago 218MB hcl/dx/content-composer v1.8.0_20210514-1707 62b7b54d3895 4 weeks ago 427MB hcl/dx/postgres v1.8.0_20210514-1708 d94672f395ad 4 weeks ago 498MB hcl/dx/ringapi v1.8.0_20210514-1709 505eebb52ebf 4 weeks ago 397MB ``` Re-tag images. If you are using a Kubernetes cluster that is not configured to operate on your local machine, you may need to push the HCL Digital Experience 9.5 container images to a remote repository. To do so, you need to re-tag the images to point to your remote repository. Important Note: Do not change the version tags of the DX 9.5 images, as they are used for uniquely identifying which versions of DX applications are running in your cluster. You may re-tag any image using the following command: ``` Re-tag an existing loaded image docker tag OLD_IMAGE_PATH:VERSION NEW_IMAGE_TAG:VERSION Example command for DX Core: docker tag hcl/dx/core:v95_CF195_20210514-1708 my/test/repository/hcl/dx/core:v95_CF195_20210514-1708 ``` If you want to prefix all HCL Digital Experience 9.5 container images with your repository structure, you may use the following command: ``` Command to prefix all HCL Digital Experience container images export the prefix for the repository structure, without tailing slash export REMOTE_REPO_PREFIX=\"my/test/repository\" First we list all HCL Digital Experience 9.5 Images, then we remove the first line containing the header Then we execute the docker tag command, prefixing each image with the $REMOTE_REPO_PREFIX docker images hcl/dx/* | tail -n +2 | awk -F ' ' '{system(\"docker tag \" $1 \":\" $2 \" $REMOTE_REPO_PREFIX/\" $1 \":\" $2) }' ``` The output may be verified by using the following command: ``` List all images docker images Command output (minified, example) REPOSITORY TAG IMAGE ID CREATED SIZE hcl/dx/remote-search v95_CF195_20210514-1708 e4c46618f404 4 weeks ago 2.25GB my/test/repository/hcl/dx/remote-search v95_CF195_20210514-1708 e4c46618f404 4 weeks ago 2.25 hcl/dx/cloud-operator v95_CF195_20210515-0201 62cc304706a3 4 weeks ago 220MB my/test/repository/hcl/dx/cloud-operator v95_CF195_20210515-0201 62cc304706a3 4 weeks ago 220MB hcl/dx/core v95_CF195_20210514-1708 36e30c620cdd 4 weeks ago 6.29GB my/test/repository/hcl/dx/core v95_CF195_20210514-1708 6e30c620cdd 4 weeks ago 6.29GB hcl/dx/openldap v1.1.0-master_20210514_1621013302 a5519e06dd17 4 weeks ago 772MB my/test/repository/hcl/dx/openldap v1.1.0-master_20210514_1621013302 a5519e06dd17 4 weeks ago 772MB hcl/dx/image-processor v1.8.0_20210514-1712 d5d99d86f81a 4 weeks ago 507MB my/test/repository/hcl/dx/image-processor v1.8.0_20210514-1712 d5d99d86f81a 4 weeks ago 507MB hcl/dx/digital-asset-manager v1.8.0_20210514-1711 19c8b76b1cad 4 weeks ago 547MB my/test/repository/hcl/dx/digital-asset-manager v1.8.0_20210514-1711 19c8b76b1cad 4 weeks ago 547MB hcl/dx/digital-asset-management-operator v95_CF195_20210514-1714 bc0f5638817a 4 weeks ago 218MB my/test/repository/hcl/dx/digital-asset-management-operator v95_CF195_20210514-1714 bc0f5638817a 4 weeks ago 218MB my/test/repository/hcl/dx/content-composer v1.8.0_20210514-1707 62b7b54d3895 4 weeks ago 427MB hcl/dx/content-composer v1.8.0_20210514-1707 62b7b54d3895 4 weeks ago 427MB hcl/dx/postgres v1.8.0_20210514-1708 d94672f395ad 4 weeks ago 498MB my/test/repository/hcl/dx/postgres v1.8.0_20210514-1708 d94672f395ad 4 weeks ago 498MB hcl/dx/ringapi v1.8.0_20210514-1709 505eebb52ebf 4 weeks ago 397MB my/test/repository/hcl/dx/ringapi v1.8.0_20210514-1709 505eebb52ebf 4 weeks ago 397MB ``` Push to repository. You may use the following command to push the container images to your repository: ``` Push the new tagged images docker push NEW_IMAGE_TAG:VERSION Example command for core: docker push my/test/repository/hcl/dx/core:v95_CF195_20210514-1708 ``` If you want to push all your locally processed images, you may use the following command: ``` Command to push all HCL Digital Experience images to a remote repository export the prefix for the repository structure, without tailing slash export REMOTE_REPO_PREFIX=\"my/test/repository\" Push the images, first we filter for the ones necessary Second we execute a docker push for each image docker images $REMOTE_REPO_PREFIX/hcl/dx/* | awk -F ' ' '{system(\"docker push \" $1 \":\" $2)}' ``` After running this command, Docker goes ahead and pushes the images to your remote repository. After the push, the container images are now ready for use by your Kubernetes or OpenShift cluster. Adjust deployment configuration. After you have successfully prepared all DX 9.5 images, you need to configure the images inside your custom-values.yaml. The following syntax may be used to define the correct image configuration for your environment: Note: If deploying to a Hybrid environment, with DX 9.5 Container Update CF198 or later, the Core needs to be set as false, since Core is already installed to an On-premise Server. ``` Fill in the values fitting to your configuration Ensure to use the correct image version tags images: repository: \"my/test/repository\" # Image tag for each application tags: contentComposer: \"v95_CFXXX_XXXXXXXX-XXXX\" core: \"v95_CFXXX_XXXXXXXX-XXXX\" designStudio: \"vX.X.X_XXXXXXXX-XXXX\" digitalAssetManagement: \"vX.X.X_XXXXXXXX-XXXX\" imageProcessor: \"vX.X.X_XXXXXXXX-XXXX\" openLdap: \"vX.X.X_XXXXXXXX-XXXX\" persistence: \"vX.X.X_XXXXXXXX-XXXX\" remoteSearch: \"v95_CFXXX_XXXXXXXX-XXXX\" ringApi: \"vX.X.X_XXXXXXXX-XXXX\" ambassadorIngress: \"vX.X.X_XXXXXXXX-XXXX\" ambassadorRedis: \"vX.X.X_XXXXXXXX-XXXX\" runtimeController: \"vX.X.X_XXXXXXXX-XXXX\" # Image name for each application names: contentComposer: \"hcl/dx/content-composer\" core: \"hcl/dx/core\" designStudio: \"hcl/dx/design-studio\" digitalAssetManagement: \"hcl/dx/digital-asset-manager\" imageProcessor: \"hcl/dx/image-processor\" openLdap: \"hcl/dx/openldap\" persistence: \"hcl/dx/postgres\" remoteSearch: \"hcl/dx/remote-search\" ringApi: \"hcl/dx/ringapi\" ambassadorIngress: \"hcl/dx/ambassador\" ambassadorRedis: \"hcl/dx/redis\" runtimeController: \"hcl/dx/runtime-controller\" ``` Additional tasks: If your remote repository requires access credentials, it is necessary to configure an ImagePullSecret to allow your cluster nodes to have proper access to the HCL DX 9.5 container images. Please refer to Configure Networking topic for instructions on how to configure this. Refer to PersistentVolumeClaims (PVCs) for the next steps. Parent topic: Deploying container platforms using Helm","title":"Planning your container deployment using Helm"},{"location":"containerization/helm/planning/helm_planning_deployment/#planning-your-container-deployment-using-helm","text":"Helm is a software package manager that simplifies deployment of applications and services to Red Hat OpenShift and Kubernetes container platforms. Before proceeding with your HCL DX 9.5 deployment using Helm, review the following Help Center topics: Deploying HCL DX CF196 to container platforms using Helm for an understanding of the capabilities, deployment structures, configuration and scaling options available for HCL DX 9.5 CF196 and later deployments. Containerization requirements and limitations for an understanding of the requirements, including capacity planning, and current limitations for an HCL Digital Experience 9.5 Container Update CF196 and later deployment using Helm . Prepare your HCL DX 9.5 target environment. This section outlines mandatory and optional tasks that need to be done before installation of the HCL Digital Experience 9.5 Container Update CF196 to Google Kubernetes Engine using Helm. Support to deploy to Red Hat OpenShift, Amazon Elastic Kubernetes Service (Amazon EKS), and Microsoft Azure Kubernetes Service (AKS) using Helm is added in Container Update CF197. This includes preparing your cluster to have proper access to application container images, creating a custom configuration file that fits your deployment needs and configuring network and application settings to allow your HCL Digital Experience 9.5 CF196 and later deployment to work properly. Mandatory tasks: The following tasks are mandatory for HCL Digital Experience 9.5 Container deployment to operate in your Kubernetes cluster using Helm. Prepare a namespace. Before you can deploy HCL Digital Experience, it is recommended that you create a namespace inside your Kubernetes Cluster. You need to create a namespace in your Kubernetes cluster that contains all the resources related to your HCL DX 9.5 Container deployment. It is recommended that this is created before deployment as you may need to add an ImagePullSecret or configure the TLS certificate for the Ambassador Ingress before deployment. Identify a name for your namespace and create it using the following syntax: On Kubernetes platforms Kubectl ```","title":"Planning your container deployment using Helm"},{"location":"containerization/helm/planning/helm_planning_deployment/#command-to-create-a-namespace-using-kubectl","text":"","title":"Command to create a namespace using kubectl"},{"location":"containerization/helm/planning/helm_planning_deployment/#this-example-creates-a-namespace-called-my-namespace","text":"kubectl create ns my-namespace ``` OpenShift For OpenShift, you must create a namespace with specific settings. Use the following namespace definition and save it as namespace.yaml. You must replace my-namespace in the template with the name of the namespace you are using. apiVersion: v1 kind: Namespace metadata: name: my-namespace annotations: openshift.io/sa.scc.mcs: \"s0:c24,c4\" openshift.io/sa.scc.supplemental-groups: \"1001/10000\" openshift.io/sa.scc.uid-range: \"1000/10000\" OpenShift client ```","title":"This example creates a namespace called \"my-namespace\""},{"location":"containerization/helm/planning/helm_planning_deployment/#command-to-create-namespace-from-template-file","text":"oc apply -f namespace.yaml ``` Prepare the Helm deployment configuration file. Create a configuration file that fits the needs of your target HCL DX 9.5 Container deployment. The configuration file is the heart of your deployment using Helm. It defines how HCL Digital Experience 9.5 is deployed to supported platforms, and how it behaves during runtime operations. This section explains how to create your own configuration file and how to leverage the existing values.yaml inside the Helm Chart. It also explains how to optionally overwrite settings in case the default set may not be sufficient. Important: Modification to any files (chart.yaml, templates, crds) in hcl-dx-deployment-vX.X.X_XXXXXXXX-XXXX.tar.gz, except custom-values.yaml or values.yaml, is not supported. The configuration flow Helm provides multiple ways to define values that can be processed to run an installation. Processing involves a three-step approach, that is ordered sequentially within a hierarchy. Helm Chart values.yaml Every Helm Chart contains a values.yaml file. It defines all configurable parameters that a Helm Chart accepts and the default values that are used during an installation. If you do not provide any other configuration during an installation, Helm extracts all deployment information from the values.yaml file inside the Helm Chart. All parameters that were not overwritten using any other configuration methods return to their default values from the values.yaml file inside the Helm Chart. Custom value files Helm provides you with a way to maintain your own custom values files. You can specify a custom values file you want to use when running an installation. This custom values file only needs to contain the parameters that you want to overwrite with your preferred settings. Note: There is no need to have the same complete set of parameters inside your custom values file, as there are available by default in the Helm Chart values.yaml . As outlined previously in this section, everything that is not defined in your custom values file are applied using the defaults from values.yaml inside the Helm Charts. Please be aware that the parameters you can configure using your custom values file need to exactly align with those provided by the Helm Charts own values.yaml. You cannot configure anything that is not exposed in the values.yaml definition. Override parameters It is possible to define values using a --set parameter in the Helm CLI during the installation of a Helm Chart. Since there are many values that can be configured in the HCL Digital Experience deployment, we do not recommend this technique, since it makes installation commands very large and confusing. The default HCL DX 9.5 Container values.yaml file HCL DX 9.5 Helm Chart provides a default values.yaml, which contains all possible configuration parameters. To access this file, you may use the following command when you have the HCL DX 9.5 CF196 or later Helm Chart tar.gz file on hand: ```","title":"Command to create namespace from template file"},{"location":"containerization/helm/planning/helm_planning_deployment/#command-to-extract-valuesymal-from-helm-chart","text":"helm show values hcl-dx-deployment.tar.gz > values.yaml ``` The file contains all configurable parameters and their default values. You may use this file as a blueprint to create your own custom-values.yaml . You may also just rename the extracted values.yaml to custom-values.yaml . Note: Having a complete copy of the default values.yaml is not necessary and may bloat your configuration file with values that are already present in the DX Helm Chart. A custom configuration file Helm allows you to provide a custom configuration file during the installation or upgrade process. That file only overwrites settings that are defined within it. For parts of the configuration that are not defined in your custom configuration file, Helm returns to the default values in the values.yaml file inside the DX Helm Chart. This allows you to create a file that only overwrites settings that are required, keeping the overall size of your configuration file small and the maintainability high. This Help Center documentation refers to the custom configuration file as custom-values.yaml . You may name your custom configuration file as preferred. Load container images. This section presents how to load the DX 9.5 Container Update CF196 or later images into your container image repository, tag them to fit your repository structure, and push them to your repository, so that all Nodes in your Kubernetes or OpenShift cluster can deploy HCL Digital Experience 9.5 Pods. To use HCL Digital Experience 9.5 in your Kubernetes or OpenShift cluster, you have to make the container images available to all nodes of your cluster. Usually this is done by providing them through a container image repository. Depending on your cloud provider, there may be different types of default container image repositories already configured. Refer to the documentation of your cloud provider for setup and use of such platform container image repository. It is assumed that you have a repository configured and running, and is technically reachable from all your Kubernetes or OpenShift cluster nodes. In the following guidance, the docker CLI is used as a command reference. Tools like Podman may also be used, but are not described in this documentation. The procedure for the use of such tools are the same. Extract HCL Digital Experience 9.5 package. The HCL Digital Experience 9.5 Container Update packages are provided in a compressed .zip file, that can easily be unzipped using a utility of your choice. Refer to the latest HCL DX 9.5 Container Update Release CF196 and later file listings in the Docker deployment topic: Note: The following are examples using Container Update CF196 files. Replace those references with the HCL DX 9.5 Container Update CFxxx release files you are deploying. ```","title":"Command to extract values.ymal from Helm Chart"},{"location":"containerization/helm/planning/helm_planning_deployment/#unzip-of-hcl-digital-experience-95-cfxxx-package","text":"unzip hcl-dx-kubernetes-v95-CF196.zip ``` The package includes all DX 9.5 container images, and Helm Charts as tar.gz files. The content of the package looks similar to the following structure: ``` hcl-dx-kubernetes-v95-CF196.zip HCL DX notices V9.5 CF196.txt","title":"Unzip of HCL Digital Experience 9.5 CFxxx package"},{"location":"containerization/helm/planning/helm_planning_deployment/#notices-file","text":"dx-dx-ambassador-image-154.tar.gz","title":"Notices file"},{"location":"containerization/helm/planning/helm_planning_deployment/#image-for-the-ambassador-ingress","text":"hcl-dx-cloud-operator-image-v95_CFXXX_XXXXXXXX-XXXX.tar.gz","title":"Image for the Ambassador Ingress"},{"location":"containerization/helm/planning/helm_planning_deployment/#image-for-the-core-operator-not-needed-for-helm-deployments","text":"hcl-dx-cloud-scripts-v95_CFXXX_XXXXXXXX-XXXX.zip","title":"Image for the Core Operator (not needed for Helm deployments)"},{"location":"containerization/helm/planning/helm_planning_deployment/#cloud-deployment-scripts-incl-dxctl-not-needed-for-helm-deployments","text":"hcl-dx-content-composer-image-vX.X.X_XXXXXXXX-XXXX.tar.gz","title":"Cloud deployment scripts incl. dxctl (not needed for Helm deployments)"},{"location":"containerization/helm/planning/helm_planning_deployment/#image-for-content-composer","text":"hcl-dx-core-image-v95_CFXXX_XXXXXXXX-XXXX.tar.gz","title":"Image for Content Composer"},{"location":"containerization/helm/planning/helm_planning_deployment/#image-for-core","text":"hcl-dx-digital-asset-management-operator-image-v95_CFXXX_XXXXXXXX-XXXX.tar.gz","title":"Image for Core"},{"location":"containerization/helm/planning/helm_planning_deployment/#image-for-the-digital-asset-management-operator-not-needed-for-helm-deployments","text":"hcl-dx-digital-asset-manager-image-vX.X.X_XXXXXXXX-XXXX.tar.gz","title":"Image for the Digital Asset Management Operator (not needed for Helm deployments)"},{"location":"containerization/helm/planning/helm_planning_deployment/#image-for-digital-asset-management","text":"hcl-dx-experience-api-sample-ui-vX.X.X.XXXXXXXX-XXXX.zip","title":"Image for Digital Asset Management"},{"location":"containerization/helm/planning/helm_planning_deployment/#sample-ui-for-experience-api","text":"hcl-dx-image-processor-image-vX.X.X_XXXXXXXX-XXXX.tar.gz","title":"Sample UI for Experience API"},{"location":"containerization/helm/planning/helm_planning_deployment/#image-for-image-processor","text":"hcl-dx-openldap-image-v1.1.0-master_XXXXXXXX_XXXXXXXXXX.tar.gz","title":"Image for Image Processor"},{"location":"containerization/helm/planning/helm_planning_deployment/#image-for-openldap","text":"hcl-dx-postgres-image-vX.X.X_XXXXXXXX-XXXX.tar.gz","title":"Image for OpenLDAP"},{"location":"containerization/helm/planning/helm_planning_deployment/#image-for-digital-asset-management-persistence","text":"hcl-dx-redis-image-X.X.X.tar.gz","title":"Image for Digital Asset Management Persistence"},{"location":"containerization/helm/planning/helm_planning_deployment/#image-for-ambassador-ingress-redis","text":"hcl-dx-remote-search-image-v95_CFXXX_XXXXXXXX-XXXX.tar.gz","title":"Image for Ambassador Ingress Redis"},{"location":"containerization/helm/planning/helm_planning_deployment/#image-for-remote-search","text":"hcl-dx-ringapi-image-vX.X.X_XXXXXXXX-XXXX.tar.gz","title":"Image for Remote Search"},{"location":"containerization/helm/planning/helm_planning_deployment/#image-for-ring-api","text":"hcl-dx-runtime-controller-image-vX.X.X_XXXXXXXX-XXX.tar.gz","title":"Image for Ring API"},{"location":"containerization/helm/planning/helm_planning_deployment/#image-for-runtime-controller","text":"hcl-dx-deployment-vX.X.X_XXXXXXXX-XXX.tar.gz","title":"Image for Runtime Controller"},{"location":"containerization/helm/planning/helm_planning_deployment/#helm-charts","text":"``` Load images locally. To load the individual image files, you may use the following command: ```","title":"Helm Charts"},{"location":"containerization/helm/planning/helm_planning_deployment/#command-to-load-container-image-into-local-repository","text":"","title":"Command to load container image into local repository"},{"location":"containerization/helm/planning/helm_planning_deployment/#docker-load-image-file-nametargz","text":"docker load < hcl-dx-core-image-v95_CFXXX_XXXXXXXX-XXXX.tar.gz ``` If you want to load all DX 9.5 CFxxx image files via one command, you may use the following command: ```","title":"docker load &lt; image-file-name.tar.gz"},{"location":"containerization/helm/planning/helm_planning_deployment/#command-to-load-all-images-at-once","text":"","title":"Command to load all images at once"},{"location":"containerization/helm/planning/helm_planning_deployment/#since-hcl-digital-experience-images-are-all-containing-the-word-images","text":"","title":"Since HCL Digital Experience images are all containing the word \"images\","},{"location":"containerization/helm/planning/helm_planning_deployment/#we-can-filter-for-fitting-targz-files","text":"ls -f | grep image | xargs -L 1 docker load -i ``` This loads all images to your local repository, ready for further usage. You may verify if the loading is successful with the following command: ```","title":"we can filter for fitting tar.gz files"},{"location":"containerization/helm/planning/helm_planning_deployment/#list-all-images","text":"docker images","title":"List all images"},{"location":"containerization/helm/planning/helm_planning_deployment/#command-output-minified-example","text":"REPOSITORY TAG IMAGE ID CREATED SIZE hcl/dx/remote-search v95_CF195_20210514-1708 e4c46618f404 4 weeks ago 2.25GB hcl/dx/cloud-operator v95_CF195_20210515-0201 62cc304706a3 4 weeks ago 220MB hcl/dx/core v95_CF195_20210514-1708 36e30c620cdd 4 weeks ago 6.29GB hcl/dx/openldap v1.1.0-master_20210514_1621013302 a5519e06dd17 4 weeks ago 772MB hcl/dx/image-processor v1.8.0_20210514-1712 d5d99d86f81a 4 weeks ago 507MB hcl/dx/digital-asset-manager v1.8.0_20210514-1711 19c8b76b1cad 4 weeks ago 547MB hcl/dx/digital-asset-management-operator v95_CF195_20210514-1714 bc0f5638817a 4 weeks ago 218MB hcl/dx/content-composer v1.8.0_20210514-1707 62b7b54d3895 4 weeks ago 427MB hcl/dx/postgres v1.8.0_20210514-1708 d94672f395ad 4 weeks ago 498MB hcl/dx/ringapi v1.8.0_20210514-1709 505eebb52ebf 4 weeks ago 397MB ``` Re-tag images. If you are using a Kubernetes cluster that is not configured to operate on your local machine, you may need to push the HCL Digital Experience 9.5 container images to a remote repository. To do so, you need to re-tag the images to point to your remote repository. Important Note: Do not change the version tags of the DX 9.5 images, as they are used for uniquely identifying which versions of DX applications are running in your cluster. You may re-tag any image using the following command: ```","title":"Command output (minified, example)"},{"location":"containerization/helm/planning/helm_planning_deployment/#re-tag-an-existing-loaded-image","text":"","title":"Re-tag an existing loaded image"},{"location":"containerization/helm/planning/helm_planning_deployment/#docker-tag-old_image_pathversion-new_image_tagversion","text":"","title":"docker tag OLD_IMAGE_PATH:VERSION NEW_IMAGE_TAG:VERSION"},{"location":"containerization/helm/planning/helm_planning_deployment/#example-command-for-dx-core","text":"docker tag hcl/dx/core:v95_CF195_20210514-1708 my/test/repository/hcl/dx/core:v95_CF195_20210514-1708 ``` If you want to prefix all HCL Digital Experience 9.5 container images with your repository structure, you may use the following command: ```","title":"Example command for DX Core:"},{"location":"containerization/helm/planning/helm_planning_deployment/#command-to-prefix-all-hcl-digital-experience-container-images","text":"","title":"Command to prefix all HCL Digital Experience container images"},{"location":"containerization/helm/planning/helm_planning_deployment/#export-the-prefix-for-the-repository-structure-without-tailing-slash","text":"export REMOTE_REPO_PREFIX=\"my/test/repository\"","title":"export the prefix for the repository structure, without tailing slash"},{"location":"containerization/helm/planning/helm_planning_deployment/#first-we-list-all-hcl-digital-experience-95-images-then-we-remove-the-first-line-containing-the-header","text":"","title":"First we list all HCL Digital Experience 9.5 Images, then we remove the first line containing the header"},{"location":"containerization/helm/planning/helm_planning_deployment/#then-we-execute-the-docker-tag-command-prefixing-each-image-with-the-remote_repo_prefix","text":"docker images hcl/dx/* | tail -n +2 | awk -F ' ' '{system(\"docker tag \" $1 \":\" $2 \" $REMOTE_REPO_PREFIX/\" $1 \":\" $2) }' ``` The output may be verified by using the following command: ```","title":"Then we execute the docker tag command, prefixing each image with the $REMOTE_REPO_PREFIX"},{"location":"containerization/helm/planning/helm_planning_deployment/#list-all-images_1","text":"docker images","title":"List all images"},{"location":"containerization/helm/planning/helm_planning_deployment/#command-output-minified-example_1","text":"REPOSITORY TAG IMAGE ID CREATED SIZE hcl/dx/remote-search v95_CF195_20210514-1708 e4c46618f404 4 weeks ago 2.25GB my/test/repository/hcl/dx/remote-search v95_CF195_20210514-1708 e4c46618f404 4 weeks ago 2.25 hcl/dx/cloud-operator v95_CF195_20210515-0201 62cc304706a3 4 weeks ago 220MB my/test/repository/hcl/dx/cloud-operator v95_CF195_20210515-0201 62cc304706a3 4 weeks ago 220MB hcl/dx/core v95_CF195_20210514-1708 36e30c620cdd 4 weeks ago 6.29GB my/test/repository/hcl/dx/core v95_CF195_20210514-1708 6e30c620cdd 4 weeks ago 6.29GB hcl/dx/openldap v1.1.0-master_20210514_1621013302 a5519e06dd17 4 weeks ago 772MB my/test/repository/hcl/dx/openldap v1.1.0-master_20210514_1621013302 a5519e06dd17 4 weeks ago 772MB hcl/dx/image-processor v1.8.0_20210514-1712 d5d99d86f81a 4 weeks ago 507MB my/test/repository/hcl/dx/image-processor v1.8.0_20210514-1712 d5d99d86f81a 4 weeks ago 507MB hcl/dx/digital-asset-manager v1.8.0_20210514-1711 19c8b76b1cad 4 weeks ago 547MB my/test/repository/hcl/dx/digital-asset-manager v1.8.0_20210514-1711 19c8b76b1cad 4 weeks ago 547MB hcl/dx/digital-asset-management-operator v95_CF195_20210514-1714 bc0f5638817a 4 weeks ago 218MB my/test/repository/hcl/dx/digital-asset-management-operator v95_CF195_20210514-1714 bc0f5638817a 4 weeks ago 218MB my/test/repository/hcl/dx/content-composer v1.8.0_20210514-1707 62b7b54d3895 4 weeks ago 427MB hcl/dx/content-composer v1.8.0_20210514-1707 62b7b54d3895 4 weeks ago 427MB hcl/dx/postgres v1.8.0_20210514-1708 d94672f395ad 4 weeks ago 498MB my/test/repository/hcl/dx/postgres v1.8.0_20210514-1708 d94672f395ad 4 weeks ago 498MB hcl/dx/ringapi v1.8.0_20210514-1709 505eebb52ebf 4 weeks ago 397MB my/test/repository/hcl/dx/ringapi v1.8.0_20210514-1709 505eebb52ebf 4 weeks ago 397MB ``` Push to repository. You may use the following command to push the container images to your repository: ```","title":"Command output (minified, example)"},{"location":"containerization/helm/planning/helm_planning_deployment/#push-the-new-tagged-images","text":"","title":"Push the new tagged images"},{"location":"containerization/helm/planning/helm_planning_deployment/#docker-push-new_image_tagversion","text":"","title":"docker push NEW_IMAGE_TAG:VERSION"},{"location":"containerization/helm/planning/helm_planning_deployment/#example-command-for-core","text":"docker push my/test/repository/hcl/dx/core:v95_CF195_20210514-1708 ``` If you want to push all your locally processed images, you may use the following command: ```","title":"Example command for core:"},{"location":"containerization/helm/planning/helm_planning_deployment/#command-to-push-all-hcl-digital-experience-images-to-a-remote-repository","text":"","title":"Command to push all HCL Digital Experience images to a remote repository"},{"location":"containerization/helm/planning/helm_planning_deployment/#export-the-prefix-for-the-repository-structure-without-tailing-slash_1","text":"export REMOTE_REPO_PREFIX=\"my/test/repository\"","title":"export the prefix for the repository structure, without tailing slash"},{"location":"containerization/helm/planning/helm_planning_deployment/#push-the-images-first-we-filter-for-the-ones-necessary","text":"","title":"Push the images, first we filter for the ones necessary"},{"location":"containerization/helm/planning/helm_planning_deployment/#second-we-execute-a-docker-push-for-each-image","text":"docker images $REMOTE_REPO_PREFIX/hcl/dx/* | awk -F ' ' '{system(\"docker push \" $1 \":\" $2)}' ``` After running this command, Docker goes ahead and pushes the images to your remote repository. After the push, the container images are now ready for use by your Kubernetes or OpenShift cluster. Adjust deployment configuration. After you have successfully prepared all DX 9.5 images, you need to configure the images inside your custom-values.yaml. The following syntax may be used to define the correct image configuration for your environment: Note: If deploying to a Hybrid environment, with DX 9.5 Container Update CF198 or later, the Core needs to be set as false, since Core is already installed to an On-premise Server. ```","title":"Second we execute a docker push for each image"},{"location":"containerization/helm/planning/helm_planning_deployment/#fill-in-the-values-fitting-to-your-configuration","text":"","title":"Fill in the values fitting to your configuration"},{"location":"containerization/helm/planning/helm_planning_deployment/#ensure-to-use-the-correct-image-version-tags","text":"images: repository: \"my/test/repository\" # Image tag for each application tags: contentComposer: \"v95_CFXXX_XXXXXXXX-XXXX\" core: \"v95_CFXXX_XXXXXXXX-XXXX\" designStudio: \"vX.X.X_XXXXXXXX-XXXX\" digitalAssetManagement: \"vX.X.X_XXXXXXXX-XXXX\" imageProcessor: \"vX.X.X_XXXXXXXX-XXXX\" openLdap: \"vX.X.X_XXXXXXXX-XXXX\" persistence: \"vX.X.X_XXXXXXXX-XXXX\" remoteSearch: \"v95_CFXXX_XXXXXXXX-XXXX\" ringApi: \"vX.X.X_XXXXXXXX-XXXX\" ambassadorIngress: \"vX.X.X_XXXXXXXX-XXXX\" ambassadorRedis: \"vX.X.X_XXXXXXXX-XXXX\" runtimeController: \"vX.X.X_XXXXXXXX-XXXX\" # Image name for each application names: contentComposer: \"hcl/dx/content-composer\" core: \"hcl/dx/core\" designStudio: \"hcl/dx/design-studio\" digitalAssetManagement: \"hcl/dx/digital-asset-manager\" imageProcessor: \"hcl/dx/image-processor\" openLdap: \"hcl/dx/openldap\" persistence: \"hcl/dx/postgres\" remoteSearch: \"hcl/dx/remote-search\" ringApi: \"hcl/dx/ringapi\" ambassadorIngress: \"hcl/dx/ambassador\" ambassadorRedis: \"hcl/dx/redis\" runtimeController: \"hcl/dx/runtime-controller\" ``` Additional tasks: If your remote repository requires access credentials, it is necessary to configure an ImagePullSecret to allow your cluster nodes to have proper access to the HCL DX 9.5 container images. Please refer to Configure Networking topic for instructions on how to configure this. Refer to PersistentVolumeClaims (PVCs) for the next steps. Parent topic: Deploying container platforms using Helm","title":"Ensure to use the correct image version tags"},{"location":"containerization/helm/planning/limitations_requirements/","text":"Containerization requirements and limitations This section describes the requirements to deploy the HCL Digital Experience 9.5 images to container platforms and current limitations. Attention: Beginning with HCL Digital Experience 9.5 Container Update CF200, HCL has discontinued releasing the HCL Digital Experience (DX) Operator-based deployments and will provide support only for Helm-based deployments . There will be no further updates or code fixes provided for the Operator-based deployments. HCL requires all customers to migrate to Helm-based deployments for their DX installations. HCL will work with our customers as they transition from Operator-based to Helm-based deployments. For more information on the migration process, see Migrating from Operator-based to Helm-based deployments . Consult the HCL Digital Experience 9.5 Support Statements on the HCL Digital Experience Support pages for the latest updates on supported platforms, components, and release levels. Requirements and Limitations for Helm-based deployments This section describes requirements and current limitations for HCL Digital Experience 9.5 Container Update CF200 and later deployments using Helm. HCL DX 9.5 CF200 and later is architected to run on any Certified Kubernetes platform ( https://www.cncf.io/certification/software-conformance ), provided that, the Kubernetes platform is hosted on x86_64 hardware the Kubernetes platform is officially supported by Helm ( https://helm.sh/docs/topics/kubernetes_distros/ ). For the list of Kubernetes versions that are tested and supported by HCL, refer to the HCL DX supported hardware and software statements page. Even though the platforms might be Certified Kubernetes platforms, you might find the environments varying slightly based on the vendors. HCL Support will make a reasonable effort to assist the customer in problem resolution in scenarios where the Kubernetes version is still under support by the vendor. If there are any unresolved issues, HCL Support will provide alternative implementation recommendations or open Feature Requests for the problem scenario. Internally, HCL tests DX against a range of Kubernetes platforms that is regularly reviewed and updated. We do not test with every single platform vendor, but aim to cover a representative sample of popular Kubernetes implementations. See the HCL DX supported hardware and software statements on the HCL Support Knowledge Base for additional details. To deploy HCL Digital Experience 9.5 CF200 to the supported Kubernetes platforms using Helm, the following are required: Helm installation : Download and install Helm to your target environment. HCL DX 9.5 CF200 and later container deployment is tested and is supported with Helm v3. For more information regarding the supported Helm version for individual Kubernetes versions, refer Helm documentation . Migration : For information about migrating from Operator-based to Helm-based deployments, see Migrating from Operator-based to Helm-based deployments . Container platform capacity resource requirements : The following table outlines the default minimum and maximum capacity of container resources requested by the HCL DX 9.5 Container Components in the Helm-based deployments. Component Resource name Pod Minimum CPU Pod Minimum Memory No. of Pods Minimum Core core 0.8 3072MB 1 Ring API ringApi 0.1 128MB 1 Content Composer contentComposer 0.1 128MB 1 Design Studio designStudio 0.1 128MB 1 Digital Asset Management digitalAssetManagement 0.25 1024MB 1 DAM Persistence Connection Pool persistenceConnectionPool 0.5 512MB 1 DAM Persistence Node persistenceNode 1 1024MB 1 DAM Persistence Metrics Exporter persistenceMetricsExporter 0.1 128MB 0 Image processor imageProcessor 0.1 1280MB 1 Open LDAP openLdap 0.2 512MB 1 Remote search remoteSearch 0.25 768MB 1 (Max 1 Pod) Runtime Controller runtimeController 0.1 256MB 1 Ambassador Ingress ambassadorIngress 0.2 300MB 1 Ambassador Redis ambassadorRedis 0.1 256MB 0 Sidecar sidecar 0.1 64MB 0 Requirements and Limitations for Operator-based deployments Attention: Beginning with HCL Digital Experience 9.5 Container Update CF200, HCL has discontinued releasing the HCL Digital Experience (DX) Operator-based deployments and will provide support only for Helm-based deployments . There will be no further updates or code fixes provided for the Operator-based deployments. HCL requires all customers to migrate to Helm-based deployments for their DX installations. HCL will work with our customers as they transition from Operator-based to Helm-based deployments. For more information on the migration process, see Migrating from Operator-based to Helm-based deployments . The following describes the requirements to deploy the HCL Digital Experience 9.5 images to container platforms and current limitations using the Operator-based deployment process: HCL Digital Experience 9.5 is supported on Docker, Red Hat OpenShift, Amazon Elastic Kubernetes Service (EKS), and Microsoft Azure Kubernetes Service (AKS), and Google Kubernetes Engine (GKE). Other Kubernetes platforms are not fully supported. The HCL Operator is not likely to work, however, support for additional Kubernetes as a Service (KaaS) is ongoing and additions is reflected in the HCL Digital Experience 9.5 Support Statements. Additional features and functions may be tied to the use of the HCL DX Operators for deployment. HCL highly recommends following the deployment strategies outlined within this documentation. HCL Digital Experience 9.5 containerization is focused on deployment and it uses an operator-based deployment. The goals are: To introduce a supported containerized deployment that HCL can continually extend; To provide customers with the best possible experience; To provide a high level of customization in the deployment and continue to expand on that, along with increased automation; and To maintain separation of product and custom code. Customers need to follow the recommended deployment model to ensure the availability of future functions and prevent potential conflicts. Notes: HCL Digital Experience is a database-intensive application, it is not recommended to use Apache Derby for production use. For specific versions of databases supported for production, see the HCL Digital Experience 9.5 Support Statements on the HCL Digital Experience Support pages. Creation of Virtual Portals take longer when implemented in Red Hat OpenShift. Plan for adequate time to allow processing, and re-verify the results are completed by refreshing the web browser administrative panel. Customers should not modify the HCL Digital Experience 9.5 Docker images provided by HCL for deployment. This restriction includes use of these images as a base to create a new image, which results in a new image ID and an unsupported configuration. Instead, customers deploying the images should follow best practices and maintain customizations in the wp_profile and the deployment database. Scripts and custom files should be stored in wp_profile (/opt/HCL/wp_profile/). See the Deployment Help Center topics for more information Customers should not run multiple HCL Digital Experience 9.5 container deployments in a single Kubernetes namespace (in the case of Red Hat OpenShift, in a single OpenShift project). This configuration is not supported at this time. It is not supported to run two different versions of HCL Digital Experience 9.5 container deployments in a single Kubernetes cluster. Use of Web Application Bridge is currently unsupported on HCL Digital Experience 9.5 deployments to container platforms such as Kubernetes and Red Hat OpenShift, using the Operator-based deployment method. Beginning with HCL DX Container Update CF199, Web Application Bridge can be used in container deployments using the Helm deployment method. Supported file system requirements : Requires an **AccessMode** of **ReadWriteMany** . Requires a minimum of 40 GB , with the default request set to 100 GB . Note: HCL Digital Experience is input-output (I/O) intensive and requires a high performing file system for optimization. Container platform capacity requirements : The following table outlines the minimum and maximum capacity requested and managed by HCL DX 9.5 Container Components: Component Pod minimum CPU Pod maximum CPU Pod minimum memory Pod maximum memory No. of minimum pods DX 9.5 Core 2 5 6 GB 8 GB 1 Experience API 0.5 1 1 GB 2 GB 1 Content Composer 0.5 1 1 GB 2 GB 1 Digital Asset Management 0.5 2 1 GB 2 GB 3 Persistence 1 2 1 GB 3 GB 1 Image processor 1 2 2 GB 2 GB 1 Remote search 1 3 1 GB 4 GB 1 Operators Shared - minimal Shared - minimal Shared - minimal Shared - minimal 2 Ambassador 0.3 1 400 MB 600 MB 3 Redis 0.3 1 400 MB 600 MB 3 Postgres-RO 1 2 1 GB 3 GB 1 Additional considerations in implementation : ConfigEngine and ConfigWizard should only be used when there is a single instance When more than one instance is running, the ConfigEngine is disabled and the ConfigWizard route is removed. As an example, the Site Builder is calling the ConfigEngine in the background. But because multiple instances are running, an Error 500 occurs because the ConfigEngine is disabled. AllConfigEngine.sh tasks should be run in configure mode with only one instance running. JavaServer Faces (JSF) portlet bridge With DX 9.5 Container Update CF171 and higher, WebSphere Application Server 9.0.5.2 is included and that IBM fix pack removed the IBM JSF portlet bridge. If you are using JSF portlets and leverage the JSF portlet bridge, proceed to the HCL DX 9.5 Container Update CF18 for the required JavaServer Faces Bridge support before moving to a container-based deployment. The HCL JavaServer Faces Bridge is added to HCL Digital Experience offerings with Container Update CF18 and CF18 on-premises platform CF update. For more information please see What's New in Container Update CF18 . Note: For information about the limitations related to JSF 2.2 support, see Limitations when running HCL DX Portlet Bridge on WebSphere Application Server 9.0 . Parent topic: Digital Experience on containerized platforms","title":"Containerization requirements and limitations"},{"location":"containerization/helm/planning/limitations_requirements/#containerization-requirements-and-limitations","text":"This section describes the requirements to deploy the HCL Digital Experience 9.5 images to container platforms and current limitations. Attention: Beginning with HCL Digital Experience 9.5 Container Update CF200, HCL has discontinued releasing the HCL Digital Experience (DX) Operator-based deployments and will provide support only for Helm-based deployments . There will be no further updates or code fixes provided for the Operator-based deployments. HCL requires all customers to migrate to Helm-based deployments for their DX installations. HCL will work with our customers as they transition from Operator-based to Helm-based deployments. For more information on the migration process, see Migrating from Operator-based to Helm-based deployments . Consult the HCL Digital Experience 9.5 Support Statements on the HCL Digital Experience Support pages for the latest updates on supported platforms, components, and release levels.","title":"Containerization requirements and limitations"},{"location":"containerization/helm/planning/limitations_requirements/#requirements-and-limitations-for-helm-based-deployments","text":"This section describes requirements and current limitations for HCL Digital Experience 9.5 Container Update CF200 and later deployments using Helm. HCL DX 9.5 CF200 and later is architected to run on any Certified Kubernetes platform ( https://www.cncf.io/certification/software-conformance ), provided that, the Kubernetes platform is hosted on x86_64 hardware the Kubernetes platform is officially supported by Helm ( https://helm.sh/docs/topics/kubernetes_distros/ ). For the list of Kubernetes versions that are tested and supported by HCL, refer to the HCL DX supported hardware and software statements page. Even though the platforms might be Certified Kubernetes platforms, you might find the environments varying slightly based on the vendors. HCL Support will make a reasonable effort to assist the customer in problem resolution in scenarios where the Kubernetes version is still under support by the vendor. If there are any unresolved issues, HCL Support will provide alternative implementation recommendations or open Feature Requests for the problem scenario. Internally, HCL tests DX against a range of Kubernetes platforms that is regularly reviewed and updated. We do not test with every single platform vendor, but aim to cover a representative sample of popular Kubernetes implementations. See the HCL DX supported hardware and software statements on the HCL Support Knowledge Base for additional details. To deploy HCL Digital Experience 9.5 CF200 to the supported Kubernetes platforms using Helm, the following are required: Helm installation : Download and install Helm to your target environment. HCL DX 9.5 CF200 and later container deployment is tested and is supported with Helm v3. For more information regarding the supported Helm version for individual Kubernetes versions, refer Helm documentation . Migration : For information about migrating from Operator-based to Helm-based deployments, see Migrating from Operator-based to Helm-based deployments . Container platform capacity resource requirements : The following table outlines the default minimum and maximum capacity of container resources requested by the HCL DX 9.5 Container Components in the Helm-based deployments. Component Resource name Pod Minimum CPU Pod Minimum Memory No. of Pods Minimum Core core 0.8 3072MB 1 Ring API ringApi 0.1 128MB 1 Content Composer contentComposer 0.1 128MB 1 Design Studio designStudio 0.1 128MB 1 Digital Asset Management digitalAssetManagement 0.25 1024MB 1 DAM Persistence Connection Pool persistenceConnectionPool 0.5 512MB 1 DAM Persistence Node persistenceNode 1 1024MB 1 DAM Persistence Metrics Exporter persistenceMetricsExporter 0.1 128MB 0 Image processor imageProcessor 0.1 1280MB 1 Open LDAP openLdap 0.2 512MB 1 Remote search remoteSearch 0.25 768MB 1 (Max 1 Pod) Runtime Controller runtimeController 0.1 256MB 1 Ambassador Ingress ambassadorIngress 0.2 300MB 1 Ambassador Redis ambassadorRedis 0.1 256MB 0 Sidecar sidecar 0.1 64MB 0","title":"Requirements and Limitations for Helm-based deployments"},{"location":"containerization/helm/planning/limitations_requirements/#requirements-and-limitations-for-operator-based-deployments","text":"Attention: Beginning with HCL Digital Experience 9.5 Container Update CF200, HCL has discontinued releasing the HCL Digital Experience (DX) Operator-based deployments and will provide support only for Helm-based deployments . There will be no further updates or code fixes provided for the Operator-based deployments. HCL requires all customers to migrate to Helm-based deployments for their DX installations. HCL will work with our customers as they transition from Operator-based to Helm-based deployments. For more information on the migration process, see Migrating from Operator-based to Helm-based deployments . The following describes the requirements to deploy the HCL Digital Experience 9.5 images to container platforms and current limitations using the Operator-based deployment process: HCL Digital Experience 9.5 is supported on Docker, Red Hat OpenShift, Amazon Elastic Kubernetes Service (EKS), and Microsoft Azure Kubernetes Service (AKS), and Google Kubernetes Engine (GKE). Other Kubernetes platforms are not fully supported. The HCL Operator is not likely to work, however, support for additional Kubernetes as a Service (KaaS) is ongoing and additions is reflected in the HCL Digital Experience 9.5 Support Statements. Additional features and functions may be tied to the use of the HCL DX Operators for deployment. HCL highly recommends following the deployment strategies outlined within this documentation. HCL Digital Experience 9.5 containerization is focused on deployment and it uses an operator-based deployment. The goals are: To introduce a supported containerized deployment that HCL can continually extend; To provide customers with the best possible experience; To provide a high level of customization in the deployment and continue to expand on that, along with increased automation; and To maintain separation of product and custom code. Customers need to follow the recommended deployment model to ensure the availability of future functions and prevent potential conflicts. Notes: HCL Digital Experience is a database-intensive application, it is not recommended to use Apache Derby for production use. For specific versions of databases supported for production, see the HCL Digital Experience 9.5 Support Statements on the HCL Digital Experience Support pages. Creation of Virtual Portals take longer when implemented in Red Hat OpenShift. Plan for adequate time to allow processing, and re-verify the results are completed by refreshing the web browser administrative panel. Customers should not modify the HCL Digital Experience 9.5 Docker images provided by HCL for deployment. This restriction includes use of these images as a base to create a new image, which results in a new image ID and an unsupported configuration. Instead, customers deploying the images should follow best practices and maintain customizations in the wp_profile and the deployment database. Scripts and custom files should be stored in wp_profile (/opt/HCL/wp_profile/). See the Deployment Help Center topics for more information Customers should not run multiple HCL Digital Experience 9.5 container deployments in a single Kubernetes namespace (in the case of Red Hat OpenShift, in a single OpenShift project). This configuration is not supported at this time. It is not supported to run two different versions of HCL Digital Experience 9.5 container deployments in a single Kubernetes cluster. Use of Web Application Bridge is currently unsupported on HCL Digital Experience 9.5 deployments to container platforms such as Kubernetes and Red Hat OpenShift, using the Operator-based deployment method. Beginning with HCL DX Container Update CF199, Web Application Bridge can be used in container deployments using the Helm deployment method. Supported file system requirements : Requires an **AccessMode** of **ReadWriteMany** . Requires a minimum of 40 GB , with the default request set to 100 GB . Note: HCL Digital Experience is input-output (I/O) intensive and requires a high performing file system for optimization. Container platform capacity requirements : The following table outlines the minimum and maximum capacity requested and managed by HCL DX 9.5 Container Components: Component Pod minimum CPU Pod maximum CPU Pod minimum memory Pod maximum memory No. of minimum pods DX 9.5 Core 2 5 6 GB 8 GB 1 Experience API 0.5 1 1 GB 2 GB 1 Content Composer 0.5 1 1 GB 2 GB 1 Digital Asset Management 0.5 2 1 GB 2 GB 3 Persistence 1 2 1 GB 3 GB 1 Image processor 1 2 2 GB 2 GB 1 Remote search 1 3 1 GB 4 GB 1 Operators Shared - minimal Shared - minimal Shared - minimal Shared - minimal 2 Ambassador 0.3 1 400 MB 600 MB 3 Redis 0.3 1 400 MB 600 MB 3 Postgres-RO 1 2 1 GB 3 GB 1 Additional considerations in implementation : ConfigEngine and ConfigWizard should only be used when there is a single instance When more than one instance is running, the ConfigEngine is disabled and the ConfigWizard route is removed. As an example, the Site Builder is calling the ConfigEngine in the background. But because multiple instances are running, an Error 500 occurs because the ConfigEngine is disabled. AllConfigEngine.sh tasks should be run in configure mode with only one instance running. JavaServer Faces (JSF) portlet bridge With DX 9.5 Container Update CF171 and higher, WebSphere Application Server 9.0.5.2 is included and that IBM fix pack removed the IBM JSF portlet bridge. If you are using JSF portlets and leverage the JSF portlet bridge, proceed to the HCL DX 9.5 Container Update CF18 for the required JavaServer Faces Bridge support before moving to a container-based deployment. The HCL JavaServer Faces Bridge is added to HCL Digital Experience offerings with Container Update CF18 and CF18 on-premises platform CF update. For more information please see What's New in Container Update CF18 . Note: For information about the limitations related to JSF 2.2 support, see Limitations when running HCL DX Portlet Bridge on WebSphere Application Server 9.0 . Parent topic: Digital Experience on containerized platforms","title":"Requirements and Limitations for Operator-based deployments"},{"location":"content_composer/cont_comp_overview/","text":"HCL Content Composer The HCL Content Composer delivers simplified processes for creating and managing Digital Experience site content. Users can access the Content Composer features in HCL Digital Experience 9.5 Container Update CF181 and higher releases. Follow the instructions below to install, configure, and use the HCL Digital Experience 9.5 Content Composer. Limitations The following limitations exist in HCL Content Composer: Content created using Content Composer and Digital Asset Management cannot be used with the HCL Digital Experience Projects capabilities. Content Composer and Digital Asset Management may not be used with HCL DX 9.5 container deployments that set an alternate context root. The use of Content Composer features in a Virtual Portal deployment pattern is not supported for HCL Content Composer 9.5 CF192 and earlier releases. Content Composer Workflow selections can be established in a content template and workflow stages in content items can be progressed by the content author. Workflow item comments and content item workflow approvals by designated reviewers are now available in HCL Content Composer 9.5 CF192 and later releases. When planning to use the Content Composer features in an authoring environment, with the Container Update CF181 release, it is only supported when running with one Digital Experience 9.5 core container (pod). This limitation does not apply when using the Web Content Management Authoring Portlet or when just using the new Digital Asset Management feature. It also does not apply to environments used for rendering. When uploading a file or an image via Experience API or Content Composer, the actual file uploaded may be larger than expected when processing through Experience API or Content Composer. This is because REST data in Experience API must be text-based, which is why when uploading files via Experience API or Content Composer, Base64 is used to convert binary content before sending it to HCL Portal. The size increase caused by the Base64 transformation causes the encoded file or image to be approximately 30% larger than the file size on disk. In Content Composer CF19 and higher releases, there are two modes you can choose between for WCM, authoring performance and rendering performance. If you have tuned WCM for rendering performance, caches are not invalidated immediately. In this setup, if you upload WCM content it will not be immediately available unless you invalidate the cache. There are two ways to do a cache invalidation: On a Kubernetes platform, it is recommended that you use authoring for any kind of content editing; or Use the IBM Extended Cache Monitor for IBM WebSphere Application Server. Documentation resource: IBM Extended Cache Monitor for IBM WebSphere Application Server technology preview HCL Content Composer 9.5 CF191 and higher releases supports the following Content Elements only: Text elements Media elements (File and Image) Date and Time elements Component Reference elements Link elements Option Selection elements User Selection elements If HCL Content Composer CF19 through CF192 are deployed in a Hybrid Configuration, and if image element renditions are set and saved, the results will not be visible to the Content Composer page. This is a known issue, and the underlying content and template are saved successfully. This will be resolved in a future Content Composer update. Content authors may use the WCM Authoring portlet to preview the selected image renditions.","title":"HCL Content Composer"},{"location":"content_composer/cont_comp_overview/#hcl-content-composer","text":"The HCL Content Composer delivers simplified processes for creating and managing Digital Experience site content. Users can access the Content Composer features in HCL Digital Experience 9.5 Container Update CF181 and higher releases. Follow the instructions below to install, configure, and use the HCL Digital Experience 9.5 Content Composer.","title":"HCL Content Composer"},{"location":"content_composer/cont_comp_overview/#limitations","text":"The following limitations exist in HCL Content Composer: Content created using Content Composer and Digital Asset Management cannot be used with the HCL Digital Experience Projects capabilities. Content Composer and Digital Asset Management may not be used with HCL DX 9.5 container deployments that set an alternate context root. The use of Content Composer features in a Virtual Portal deployment pattern is not supported for HCL Content Composer 9.5 CF192 and earlier releases. Content Composer Workflow selections can be established in a content template and workflow stages in content items can be progressed by the content author. Workflow item comments and content item workflow approvals by designated reviewers are now available in HCL Content Composer 9.5 CF192 and later releases. When planning to use the Content Composer features in an authoring environment, with the Container Update CF181 release, it is only supported when running with one Digital Experience 9.5 core container (pod). This limitation does not apply when using the Web Content Management Authoring Portlet or when just using the new Digital Asset Management feature. It also does not apply to environments used for rendering. When uploading a file or an image via Experience API or Content Composer, the actual file uploaded may be larger than expected when processing through Experience API or Content Composer. This is because REST data in Experience API must be text-based, which is why when uploading files via Experience API or Content Composer, Base64 is used to convert binary content before sending it to HCL Portal. The size increase caused by the Base64 transformation causes the encoded file or image to be approximately 30% larger than the file size on disk. In Content Composer CF19 and higher releases, there are two modes you can choose between for WCM, authoring performance and rendering performance. If you have tuned WCM for rendering performance, caches are not invalidated immediately. In this setup, if you upload WCM content it will not be immediately available unless you invalidate the cache. There are two ways to do a cache invalidation: On a Kubernetes platform, it is recommended that you use authoring for any kind of content editing; or Use the IBM Extended Cache Monitor for IBM WebSphere Application Server. Documentation resource: IBM Extended Cache Monitor for IBM WebSphere Application Server technology preview HCL Content Composer 9.5 CF191 and higher releases supports the following Content Elements only: Text elements Media elements (File and Image) Date and Time elements Component Reference elements Link elements Option Selection elements User Selection elements If HCL Content Composer CF19 through CF192 are deployed in a Hybrid Configuration, and if image element renditions are set and saved, the results will not be visible to the Content Composer page. This is a known issue, and the underlying content and template are saved successfully. This will be resolved in a future Content Composer update. Content authors may use the WCM Authoring portlet to preview the selected image renditions.","title":"Limitations"},{"location":"design_studio/design_studio_overview/","text":"Design Studio (Beta) Design Studio (Beta) enables content managers and designers to build and style digital properties quickly without coding. Design Studio enables content managers and designers to build and style their digital site properties quickly. Design Studio presents a modern, intuitive, and role-based tool aggregating all needed functions to visually assemble, curate, design, and model pages, content, and applications in DX sites. Using Design Studio, content authors and site designers can quickly execute DX site projects and updates and speed time to market. Note: Design Studio is provided for Beta evaluation with HCL Digital Experience 9.5 Container Update CF196 and later releases. It is not yet supported for use in production deployments. Requirements and limitations Digital Experience 9.5 Container Update CF196 and later must be installed and operational, along with the Practitioner Studio and Content Composer components, to access and use Design Studio (Beta). Note that Design Studio (Beta) is not supported for production use . Notes: Reference the latest HCL DX 9.5 container release and update file listings in the Docker image listing topic. Design Studio is still in development for release at a later time. This Design Studio (Beta) release presents an opportunity for customers to gain hands-on-experience with the currently available features. HCL Digital Experience welcomes your feedback and suggestions on Design Studio (Beta), and encourages you to present your input through cases and discussions with HCL Support DX leaders. The following Digital Experience 9.5 features and services are not supported with Design Studio (Beta): Deployment in a hybrid pattern . The deployment with virtual portals . The following Digital Experience 9.5 features and services are limited in access or use with Design Studio (Beta): General Access to and use of Design Studio (Beta) features (sites) require administrator role access. Only Google Chrome or Microsoft Edge browsers are supported. Authoring is supported for the English language only. The Palace Hotel site is provided as an example. Additional example sites and updates are added in future Design Studio releases. When you use Design Studio (Beta) with HCL DX 9.5 Container Update 199, the duplication of a WCM Container using the page editor may fail. To work around this, add a new WCM Container, and then add the desired content to the WCM container. Design Studio Site Design features Content must be published before it can be referenced in other site and page create actions. New pages can be created within the sample Palace Studio site provided with Design Studio (Beta). New Sites can be created beginning with Design Studio (Beta) in DX 9.5 Container Update CF198. When duplicating content containers, a duplicated naming issue causes a failure in saving the new name of the duplicated content container. Instead, DX 9.5 CF200 saves the duplicated content container under a default name (e.g. content-container-xxxxxxx-xxxxx-xxxxx-xxxxx). This can be fixed by changing the name of the duplicated content container to a new one. Only Text, Short Text, Image, and Link elements are supported. Content with any element specifically named \"link\" cannot be used in DX 9.5 Container Update CF 201 and higher releases. As a workaround, when naming an element in a content template, add additional words to it (e.g. instead of \"link,\" name it as \"social media link\"). Direct integration of Digital Asset Management (DAM) features is not yet available. DAM assets can be utilized through the linked content.","title":"Design Studio \\(Beta\\)"},{"location":"design_studio/design_studio_overview/#design-studio-beta","text":"Design Studio (Beta) enables content managers and designers to build and style digital properties quickly without coding. Design Studio enables content managers and designers to build and style their digital site properties quickly. Design Studio presents a modern, intuitive, and role-based tool aggregating all needed functions to visually assemble, curate, design, and model pages, content, and applications in DX sites. Using Design Studio, content authors and site designers can quickly execute DX site projects and updates and speed time to market. Note: Design Studio is provided for Beta evaluation with HCL Digital Experience 9.5 Container Update CF196 and later releases. It is not yet supported for use in production deployments.","title":"Design Studio (Beta)"},{"location":"design_studio/design_studio_overview/#requirements-and-limitations","text":"Digital Experience 9.5 Container Update CF196 and later must be installed and operational, along with the Practitioner Studio and Content Composer components, to access and use Design Studio (Beta). Note that Design Studio (Beta) is not supported for production use . Notes: Reference the latest HCL DX 9.5 container release and update file listings in the Docker image listing topic. Design Studio is still in development for release at a later time. This Design Studio (Beta) release presents an opportunity for customers to gain hands-on-experience with the currently available features. HCL Digital Experience welcomes your feedback and suggestions on Design Studio (Beta), and encourages you to present your input through cases and discussions with HCL Support DX leaders. The following Digital Experience 9.5 features and services are not supported with Design Studio (Beta): Deployment in a hybrid pattern . The deployment with virtual portals . The following Digital Experience 9.5 features and services are limited in access or use with Design Studio (Beta): General Access to and use of Design Studio (Beta) features (sites) require administrator role access. Only Google Chrome or Microsoft Edge browsers are supported. Authoring is supported for the English language only. The Palace Hotel site is provided as an example. Additional example sites and updates are added in future Design Studio releases. When you use Design Studio (Beta) with HCL DX 9.5 Container Update 199, the duplication of a WCM Container using the page editor may fail. To work around this, add a new WCM Container, and then add the desired content to the WCM container. Design Studio Site Design features Content must be published before it can be referenced in other site and page create actions. New pages can be created within the sample Palace Studio site provided with Design Studio (Beta). New Sites can be created beginning with Design Studio (Beta) in DX 9.5 Container Update CF198. When duplicating content containers, a duplicated naming issue causes a failure in saving the new name of the duplicated content container. Instead, DX 9.5 CF200 saves the duplicated content container under a default name (e.g. content-container-xxxxxxx-xxxxx-xxxxx-xxxxx). This can be fixed by changing the name of the duplicated content container to a new one. Only Text, Short Text, Image, and Link elements are supported. Content with any element specifically named \"link\" cannot be used in DX 9.5 Container Update CF 201 and higher releases. As a workaround, when naming an element in a content template, add additional words to it (e.g. instead of \"link,\" name it as \"social media link\"). Direct integration of Digital Asset Management (DAM) features is not yet available. DAM assets can be utilized through the linked content.","title":"Requirements and limitations"},{"location":"dev/ext_wp_classpath/","text":"Extending HCL Portal class path There are several options to add the general code that is not part of an EAR or WAR files. Add the custom code to a shared library. Use the administrative console to define a shared library, by creating and associating the shared library with an application, module, or server. For more information, see Managing shared libraries . Documentation resource: Managing shared libraries . Add the shared library to the custom applications or to the entire HCL Portal Server. Adding the shared library to the custom application. You can associate a shared library with an application or module. Classes that are represented by the shared library are then loaded in the application's class loader, making the classes available to the application. For more information, see Associating shared libraries with applications or modules Documentation Resource: Adding the shared library to the custom application Adding the shared library to the entire HCL Portal. You can associate shared libraries with the class loader of a server. Classes that are represented by the shared library are then loaded in a server-wide class loader, making the classes available to all applications deployed on the server. For more information, see Associating shared libraries with servers. Documentation Resource: Add the shared library to the entire HCL Portal If you are developing a PAA, include the compressed files in the PAA components/COMPONENTNAME/shared/app or components/COMPONENTNAME/shared/ext directories. The solution installer handles creating the shared libraries for these files. If you are creating a custom Trust Association Interceptor (TAI) or a custom Java Authentication and Authorization Service (JAAS) module, place a copy of your jar file(s) in the <wp_profile>/classes directory, for example, /opt/HCL/wp_profile/classes/MyCustomTAI.jar.","title":"Extending HCL Portal class path"},{"location":"dev/ext_wp_classpath/#extending-hcl-portal-class-path","text":"There are several options to add the general code that is not part of an EAR or WAR files. Add the custom code to a shared library. Use the administrative console to define a shared library, by creating and associating the shared library with an application, module, or server. For more information, see Managing shared libraries . Documentation resource: Managing shared libraries . Add the shared library to the custom applications or to the entire HCL Portal Server. Adding the shared library to the custom application. You can associate a shared library with an application or module. Classes that are represented by the shared library are then loaded in the application's class loader, making the classes available to the application. For more information, see Associating shared libraries with applications or modules Documentation Resource: Adding the shared library to the custom application Adding the shared library to the entire HCL Portal. You can associate shared libraries with the class loader of a server. Classes that are represented by the shared library are then loaded in a server-wide class loader, making the classes available to all applications deployed on the server. For more information, see Associating shared libraries with servers. Documentation Resource: Add the shared library to the entire HCL Portal If you are developing a PAA, include the compressed files in the PAA components/COMPONENTNAME/shared/app or components/COMPONENTNAME/shared/ext directories. The solution installer handles creating the shared libraries for these files. If you are creating a custom Trust Association Interceptor (TAI) or a custom Java Authentication and Authorization Service (JAAS) module, place a copy of your jar file(s) in the <wp_profile>/classes directory, for example, /opt/HCL/wp_profile/classes/MyCustomTAI.jar.","title":"Extending HCL Portal class path"},{"location":"dev/uprof_rest/","text":"Remote REST service for PUMA The remote PUMA SPI gives you access to user profiles through REST services. It provides a remote interface for user and group management for the configured Portal user repository. It is based on the REST (REpresentational State Transfer) architecture model. The remote REST service for PUMA allows you to remotely perform the following tasks related to user and group data based on the HTTP protocol: Access, retrieve, and modify information about available user or group attributes and their metadata Search for users or groups based on attributes or group membership Create, update, or delete user or group profiles and group membership relations. The first part of this documentation describes the basic interface that lists all possible operations, including their parameters and a minimum schema to describe the resources that are involved. The second part explains specific details for the current implementation of this interface for this version of HCL Portal. Beginning with HCL DX 9.5 Container Update and CF 199 , a new API explorer is available. The new API explorer allows developers using the Portal User Interface APIs to explore and test these APIs. See the topic DX User and Groups REST API Explorer below for details.","title":"Remote REST service for PUMA"},{"location":"dev/uprof_rest/#remote-rest-service-for-puma","text":"The remote PUMA SPI gives you access to user profiles through REST services. It provides a remote interface for user and group management for the configured Portal user repository. It is based on the REST (REpresentational State Transfer) architecture model. The remote REST service for PUMA allows you to remotely perform the following tasks related to user and group data based on the HTTP protocol: Access, retrieve, and modify information about available user or group attributes and their metadata Search for users or groups based on attributes or group membership Create, update, or delete user or group profiles and group membership relations. The first part of this documentation describes the basic interface that lists all possible operations, including their parameters and a minimum schema to describe the resources that are involved. The second part explains specific details for the current implementation of this interface for this version of HCL Portal. Beginning with HCL DX 9.5 Container Update and CF 199 , a new API explorer is available. The new API explorer allows developers using the Portal User Interface APIs to explore and test these APIs. See the topic DX User and Groups REST API Explorer below for details.","title":"Remote REST service for PUMA"},{"location":"dev-portlet/dx_bridge_for_jsf_onwas9x/","text":"Support for JavaServer Faces 2.2 HCL Digital Experience 8.5 and 9.5 includes the HCL Portlet 2.0 Bridge for JSF 2.2. The bridge provides customers an interface to developing and running JSF Portlets. Note: Refer to JavaServer Faces implementation for information about HCL Digital Experience JSF Bridge. Limitations when running HCL DX Portlet Bridge on WebSphere Application Server 9.0 Customers should be aware of the following limitations and best coding practices when running the bridge on WAS 9.0: Not all new JSF 2.2 functionality is supported by the HCL Portlet 2.0 Bridge for JSF 2.2. Following list of features are not supported currently: Resource Library Contract Faces Flow Stateless Views File Upload via <h:inputFile> directive CDI Session Beans are limited to session scope not portlet session scope Portlets must be written to the JSR286 specification. The HCL Portlet 2.0 Bridge for JSF 2.2 is dependent on the use of Apache MyFaces JSF implementation. It does not function with the SUN RI JSF Implementation. HCL provides the GenericFacesPortlet class com.ibm.faces20.portlet.FacesPortlet for customers to take advantage of the JSF Bridge functionality. For backward compatibility reasons, the HCL Portlet Bridge provides the following methods of view manipulation within the portlet code. Calculate the view Id. Priority order: It is a partial action - use partial view parameter It is a partial render or path setting - use view from path View Id is set as a request parameter View Id is set as a request attribute View Id calculated from portlet mode and the mode map Parameter/Attribute name for portlet mode view Mode = com.ibm.faces.portlet.VIEWID edit and edit_defaults mode = com.ibm.faces.portlet.page.edit help mode = com.ibm.faces.portlet.page.help config mode = com.ibm.faces.portlet.page.config In order to utilize Portlet Session Beans, you must use the JSF bean/scope implementation (import javax.faces.bean.ManagedBean , javax.faces.bean.SessionScoped ). Portlet Session Bean support of CDI in JSF 2.2 is dependent on a Portlet 3.0 container, which is not yet available for HCL Digital Experience. Ensure that all portlet implementations are not utilizing internal Portlet Bridge for JSF classes. In the past, articles and samples had been published utilizing the older bridge classes. Following list of samples or articles must not be used in custom portlets developed for DX 8.5 and 9.5 running on WAS 9.0 and later: import com.ibm.faces20.portlet.httpbridge.BridgePortletRequestWrapper; import com.ibm.faces20.portlet.httpbridge.BridgePortletResponseWrapper; import com.ibm.faces20.portlet.httpbridge.BridgeRenderRequestWrapper; import com.ibm.faces20.portlet.httpbridge.BridgeRenderResponseWrapper; import com.ibm.faces20.portlet.httpbridge.PortletContextWrapper; import com.ibm.faces20.portlet.httpbridge.PortletFacesContextWrapper; import com.ibm.faces20.portlet.util.BridgeConfigUtils; import com.ibm.faces20.portlet.FaceletPortletViewHandler;","title":"Support for JavaServer Faces 2.2"},{"location":"dev-portlet/dx_bridge_for_jsf_onwas9x/#support-for-javaserver-faces-22","text":"HCL Digital Experience 8.5 and 9.5 includes the HCL Portlet 2.0 Bridge for JSF 2.2. The bridge provides customers an interface to developing and running JSF Portlets. Note: Refer to JavaServer Faces implementation for information about HCL Digital Experience JSF Bridge.","title":"Support for JavaServer Faces 2.2"},{"location":"dev-portlet/dx_bridge_for_jsf_onwas9x/#limitations-when-running-hcl-dx-portlet-bridge-on-websphere-application-server-90","text":"Customers should be aware of the following limitations and best coding practices when running the bridge on WAS 9.0: Not all new JSF 2.2 functionality is supported by the HCL Portlet 2.0 Bridge for JSF 2.2. Following list of features are not supported currently: Resource Library Contract Faces Flow Stateless Views File Upload via <h:inputFile> directive CDI Session Beans are limited to session scope not portlet session scope Portlets must be written to the JSR286 specification. The HCL Portlet 2.0 Bridge for JSF 2.2 is dependent on the use of Apache MyFaces JSF implementation. It does not function with the SUN RI JSF Implementation. HCL provides the GenericFacesPortlet class com.ibm.faces20.portlet.FacesPortlet for customers to take advantage of the JSF Bridge functionality. For backward compatibility reasons, the HCL Portlet Bridge provides the following methods of view manipulation within the portlet code. Calculate the view Id. Priority order: It is a partial action - use partial view parameter It is a partial render or path setting - use view from path View Id is set as a request parameter View Id is set as a request attribute View Id calculated from portlet mode and the mode map Parameter/Attribute name for portlet mode view Mode = com.ibm.faces.portlet.VIEWID edit and edit_defaults mode = com.ibm.faces.portlet.page.edit help mode = com.ibm.faces.portlet.page.help config mode = com.ibm.faces.portlet.page.config In order to utilize Portlet Session Beans, you must use the JSF bean/scope implementation (import javax.faces.bean.ManagedBean , javax.faces.bean.SessionScoped ). Portlet Session Bean support of CDI in JSF 2.2 is dependent on a Portlet 3.0 container, which is not yet available for HCL Digital Experience. Ensure that all portlet implementations are not utilizing internal Portlet Bridge for JSF classes. In the past, articles and samples had been published utilizing the older bridge classes. Following list of samples or articles must not be used in custom portlets developed for DX 8.5 and 9.5 running on WAS 9.0 and later: import com.ibm.faces20.portlet.httpbridge.BridgePortletRequestWrapper; import com.ibm.faces20.portlet.httpbridge.BridgePortletResponseWrapper; import com.ibm.faces20.portlet.httpbridge.BridgeRenderRequestWrapper; import com.ibm.faces20.portlet.httpbridge.BridgeRenderResponseWrapper; import com.ibm.faces20.portlet.httpbridge.PortletContextWrapper; import com.ibm.faces20.portlet.httpbridge.PortletFacesContextWrapper; import com.ibm.faces20.portlet.util.BridgeConfigUtils; import com.ibm.faces20.portlet.FaceletPortletViewHandler;","title":"Limitations when running HCL DX Portlet Bridge on WebSphere Application Server 9.0"},{"location":"dev-portlet/jsrjsp/","text":"JSP tags for standard portlets The standard portlet API defines several tags that can be used in portlet JSPs to access the portlet request and response and to generate URLs. To make these tags available in a JSP, the following directive is required at the beginning of the JSP: <%@ taglib uri=\"http://java.sun.com/portlet\" prefix=\"portlet\"%> For more information, see Java Portlet Specification . HCL Portal provides an extra tag for use in standard portlets. To make these tags available in a JSP, the following directive is required: <%@ taglib uri=\"/WEB-INF/tld/ibm-portlet-ext-v60.tld\" prefix=\"portlet-ext\" %> <%@ taglib uri=\"/WEB-INF/tld/ibm-portlet-ext-v61.tld\" prefix=\"portlet-ext\" %> <%@ taglib uri=\"http://www.ibm.com/xmlns/prod/websphere/portal/v7/portlet/ibm-portlet-ext\" prefix=\"portlet-ext\" %> <%@ taglib uri=\"http://www.ibm.com/xmlns/prod/websphere/portal/v8/portlet/ibm-portlet-ext\" prefix=\"portlet-ext\" %> The following is a brief description of the extension to the JSR 168 portlet JSP tag library. <portlet-ext:portalRenderURL attribute=\"value\"> Creates a URL to pages or portlets on pages. Attributes are as follows: contentNode=\"id|name\" Indicates the ID or unique name of the page. The name or ID of the content node is also used to specify the page where the portlet can be found. portletWindow=\"id|name\" Indicates the ID or unique name of the control that holds the portlet. Must be used in combination with the attribute contentNode to identify the page where the portlet is located. portletMode=\"view|help|edit|configure\" For URLs to a portlet indicated by portletWindow, this attribute sets the portlet mode. This parameter is ignored if the attribute portletWindow is not set. windowState=\"maximized|minimized|normal\" In a portlet, this attribute indicates the state of the portlet window when it is displayed. If the portlet state is not specified, the page is shown with the previous state of the portlet. This parameter is ignored if the attribute portletWindow is not set. portalState=\"solo|normal\" Indicates whether the specified portlet window is rendered normally or solo, that is without a theme. This parameter is ignored if the attribute portletWindow is not set. newWindow=\"true|false\" This attribute creates a session partition. For portlet URLs, use this attribute if you want to display the portlet either in a new window or in an iFrame. The default value is false. The portlet window state for the addressed portlet in the new window is set to maximized. The portlet mode is set to the value of the current parent window. locale=\"locale\" Specifies the locale with which subsequent portal page requests are rendered. This attribute is optional. var =\"name\" Specifies the name of a scripting variable that is exposed in the body of the tag. This attribute is optional. The variable exposes an object that implements the interface com.ibm.portal.DisposableURL that can be used to stream the URL to the output. <portlet-ext:urlParam name=\"parameter_name\" value=\"parameter_value\"> Use this tag to add custom parameters of your choice to the parent portalRenderURL. Parameters are added to the portalRenderURL as render parameters of the specified portlet window. Parameters are ignored if the enclosing portalRenderURL does not specify the attribute portletWindow. Specify attributes as follows: name Required. Indicates the name of the parameter. value Required. Indicates the value of the parameter. <portlet-ext:bidi dir=\"rtl|ltr\" /> This tag is used to support bidirectional languages. Bidirectional languages contain text that reads in both directions. For example, URLs, code samples, or directory and file names can be read in the opposite direction of the rest of the text. dir Indicates the normal direction of text in the language. For dir=\"rtl\", the tag content is written only if the client's locale belongs to a bidirectional language. This is the default setting if dir is not specified. For dir=\"ltr\", the tag content is written only if the client's locale does not belong to a bidirectional language. locale The tag content is written only if the language is not bidirectional. <portlet-ext:setBundle basename=\"value\" var=\"value\" scope=\"value\" bundle=\"value\" provider=\"value\"/> Use this tag to compute the locale that is used for the JSTL format tags that are based on the portal specific locale computation algorithms. To make sure that the locale used by JSTL matches the locale that is used by other dynamic elements on the portal page, prefer this tag over the JSTL tag <fmt:setBundle> . This creates a globalization context and stores it in the scoped variable or the javax.servlet.jsp.jstl.fmt.localizationContext configuration variable. basename The resource bundle base name. This is the fully qualified resource name of the bundle. It has the same form as a fully qualified class name, that is, it uses a period full stop (.) as the package component separator. It does not have a file type suffix, such as .class or .properties . var The name of the exported scoped variable that stores the globalization context of type javax.servlet.jsp.jstl.fmt.LocalizationContext . scope The scope of var or the globalization context configuration variable. bundle The instance of the java.util.ResourceBundle to use. provider The instance of the com.ibm.portal.model.ResourceBundleProvider to use. The use of basename , bundle , and provider are mutually exclusive. You can also use JSTL tags as described in Generating output .","title":"JSP tags for standard portlets"},{"location":"dev-portlet/jsrjsp/#jsp-tags-for-standard-portlets","text":"The standard portlet API defines several tags that can be used in portlet JSPs to access the portlet request and response and to generate URLs. To make these tags available in a JSP, the following directive is required at the beginning of the JSP: <%@ taglib uri=\"http://java.sun.com/portlet\" prefix=\"portlet\"%> For more information, see Java Portlet Specification . HCL Portal provides an extra tag for use in standard portlets. To make these tags available in a JSP, the following directive is required: <%@ taglib uri=\"/WEB-INF/tld/ibm-portlet-ext-v60.tld\" prefix=\"portlet-ext\" %> <%@ taglib uri=\"/WEB-INF/tld/ibm-portlet-ext-v61.tld\" prefix=\"portlet-ext\" %> <%@ taglib uri=\"http://www.ibm.com/xmlns/prod/websphere/portal/v7/portlet/ibm-portlet-ext\" prefix=\"portlet-ext\" %> <%@ taglib uri=\"http://www.ibm.com/xmlns/prod/websphere/portal/v8/portlet/ibm-portlet-ext\" prefix=\"portlet-ext\" %> The following is a brief description of the extension to the JSR 168 portlet JSP tag library. <portlet-ext:portalRenderURL attribute=\"value\"> Creates a URL to pages or portlets on pages. Attributes are as follows: contentNode=\"id|name\" Indicates the ID or unique name of the page. The name or ID of the content node is also used to specify the page where the portlet can be found. portletWindow=\"id|name\" Indicates the ID or unique name of the control that holds the portlet. Must be used in combination with the attribute contentNode to identify the page where the portlet is located. portletMode=\"view|help|edit|configure\" For URLs to a portlet indicated by portletWindow, this attribute sets the portlet mode. This parameter is ignored if the attribute portletWindow is not set. windowState=\"maximized|minimized|normal\" In a portlet, this attribute indicates the state of the portlet window when it is displayed. If the portlet state is not specified, the page is shown with the previous state of the portlet. This parameter is ignored if the attribute portletWindow is not set. portalState=\"solo|normal\" Indicates whether the specified portlet window is rendered normally or solo, that is without a theme. This parameter is ignored if the attribute portletWindow is not set. newWindow=\"true|false\" This attribute creates a session partition. For portlet URLs, use this attribute if you want to display the portlet either in a new window or in an iFrame. The default value is false. The portlet window state for the addressed portlet in the new window is set to maximized. The portlet mode is set to the value of the current parent window. locale=\"locale\" Specifies the locale with which subsequent portal page requests are rendered. This attribute is optional. var =\"name\" Specifies the name of a scripting variable that is exposed in the body of the tag. This attribute is optional. The variable exposes an object that implements the interface com.ibm.portal.DisposableURL that can be used to stream the URL to the output. <portlet-ext:urlParam name=\"parameter_name\" value=\"parameter_value\"> Use this tag to add custom parameters of your choice to the parent portalRenderURL. Parameters are added to the portalRenderURL as render parameters of the specified portlet window. Parameters are ignored if the enclosing portalRenderURL does not specify the attribute portletWindow. Specify attributes as follows: name Required. Indicates the name of the parameter. value Required. Indicates the value of the parameter. <portlet-ext:bidi dir=\"rtl|ltr\" /> This tag is used to support bidirectional languages. Bidirectional languages contain text that reads in both directions. For example, URLs, code samples, or directory and file names can be read in the opposite direction of the rest of the text. dir Indicates the normal direction of text in the language. For dir=\"rtl\", the tag content is written only if the client's locale belongs to a bidirectional language. This is the default setting if dir is not specified. For dir=\"ltr\", the tag content is written only if the client's locale does not belong to a bidirectional language. locale The tag content is written only if the language is not bidirectional. <portlet-ext:setBundle basename=\"value\" var=\"value\" scope=\"value\" bundle=\"value\" provider=\"value\"/> Use this tag to compute the locale that is used for the JSTL format tags that are based on the portal specific locale computation algorithms. To make sure that the locale used by JSTL matches the locale that is used by other dynamic elements on the portal page, prefer this tag over the JSTL tag <fmt:setBundle> . This creates a globalization context and stores it in the scoped variable or the javax.servlet.jsp.jstl.fmt.localizationContext configuration variable. basename The resource bundle base name. This is the fully qualified resource name of the bundle. It has the same form as a fully qualified class name, that is, it uses a period full stop (.) as the package component separator. It does not have a file type suffix, such as .class or .properties . var The name of the exported scoped variable that stores the globalization context of type javax.servlet.jsp.jstl.fmt.LocalizationContext . scope The scope of var or the globalization context configuration variable. bundle The instance of the java.util.ResourceBundle to use. provider The instance of the com.ibm.portal.model.ResourceBundleProvider to use. The use of basename , bundle , and provider are mutually exclusive. You can also use JSTL tags as described in Generating output .","title":"JSP tags for standard portlets"},{"location":"dev-portlet/jsrmig/","text":"Converting HCL Digital Experience portlets (AIX, IBM I, Linux, Solaris, Windows) You can convert your basic HCL DX portlets and HCL DX portlets that use the Struts Portlet Framework to the standard portlet API. Converting basic HCL portlets to the standard This topic describes some of the more common changes (but not all) that are required to convert an HCL portlet to a standard portlet. Many conversion tasks depend on the amount of complexity in the portlet code. You must become familiar with the Java Portlet Specification to determine any remaining changes that are not covered in this topic. Changing Java source Change import statements to use the standard packages. Change this: ```xmp import org.apache.jetspeed.portlet. ; import org.apache.jetspeed.service. ; ``` to this: ```xmp import javax.portlet. ; import com.ibm.portal.portlet.service. ; ``` Change class inheritance to use GenericPortlet. Notice that the ActionListener is not implemented. Change this: ```xmp public class SamplePortlet extends PortletAdapter implements ActionListener{ ... } ``` to this: ```xmp public class SamplePortlet extends GenericPortlet{ ... } ``` Change objects that are used for all render methods. In the standard portlet API, the PortletRequest and PortletResponse define common functions for the RenderRequest and RenderResponse subclasses. These subclasses are the arguments for all implementations of the render() method, including doView(), doEdit(), and doHelp(). Change this: ```xmp public void doView(PortletRequest request, PortletResponse response) { ... } ``` to this: ```xmp public void doView(RenderRequest request, RenderResponse response) throws PortletException, IOException{ ... } ``` Change the actionPerformed() method. In the standard portlet API, this method is replaced by the processAction() method, which does not require the portlet to implement a listener. The processAction() methods accepts the ActionRequest and ActionResponse as arguments, which extend the PortletRequest and PortletResponse. Change this: ```xmp public void actionPerformed(ActionEvent event) throws PortletException{ ... } ``` to this: ```xmp public void processAction(ActionRequest request, ActionResponse response) throws PortletException, IOException{ ... } ``` Change how the response content type is set. In the standard portlet API, the MIME type of the output that is returned in the response must be set before including the JSP. HCL portlets declare the MIME type using the contentType attribute of JSP's page directive. Therefore, this change makes the contentType setting in the JSP unnecessary. Add the following code before including the JSP: ```xmp response.setContentType(\"text/html\"); ``` Change JSP includes. In the standard portlet API, JSPs are included by a request dispatcher's include() method. In the portlets' render method, set the MIME type of the output before returning it in the response. Change this: ```xmp PortletContext context = getPortletConfig().getContext(); context.include(\"/jsp/View.jsp\", request, response); ``` to this: ```xmp response.setContentType(\"text/html\"); PortletContext context = getPortletConfig().getPortletContext(); context.getRequestDispatcher(\"/jsp/View.jsp\").include( request, response); ``` Change classes where user data is stored. In the standard portlet API, user data is stored in a PortletPreferences object, rather than the PortletData object that is available using the HCL portlet API. Notice the different getter methods that are used with the request object and setter methods that are used for the data object. Change this: ```xmp PortletData portData = request.getData(); portData.setAttribute(\"userName\", userName); portData.store(); ``` to this: ```xmp PortletPreferences prefs = request.getPreferences(); prefs.setValue(\"userName\",request.getParameter(\"username\")); prefs.store(); ``` Some preferences are read-only and can be modified only by an administrator. See Change configuration parameters to preferences for information. Change the method that is used for namespace encoding. For example, if the portlet uses encodeNamespace() to return a unique string to be prefixed to a JavaScript variable name within the content that is generated by the portlet, the portlet can use getNamespace(). Change this: ```xmp PortletResponse.encodeNamespace() ``` to this: ```xmp RenderResponse.getNamespace() ``` Change how portlet URLs are generated. For example, a portlet's doEdit() method might save the URI to the edit mode to pass to the JSP. The portlet must instantiate a PortletURL object using the createRenderURL() method. Change this: ```xmp // Save URI for the edit page PortletURI editURI = response.createURI(); ... // Preserve the edit page URI in the request to make // it accessible by the edit JSP request.setAttribute(\"editURI\", editURI.toString()); ``` to this: ```xmp // Save URI for the edit page PortletURL editURL = response.createRenderURL(); ... // Preserve the edit page URI in the request // to make it accessible by the edit JSP request.setAttribute(\"editURL\", editURL.toString()); ``` The standard portlet API does not have an equivalent method for createReturnURI(). If the URL is intended to call the portlets' action method, however, the portlet should use the createActionURL() method. Changing JSP source Change the tag library to use the standard tag library. Change this: ```xmp <%@ taglib uri=\"/WEB-INF/tld/portlet.tld\" prefix=\"portletAPI\" %> ``` to this: ```xmp <%@ taglib uri=\"http://java.sun.com/portlet\" prefix=\"portlet\" %> ``` Change references to API objects. In the standard portlet API, the <portlet:defineObjects /> JSP tag makes the RenderRequest, RenderResponse, and PortletConfig objects available to JSP files. After making this change, all references in the JSP to the PortletRequest and PortletResponse should be changed to the corresponding RenderRequest and RenderResponse. Change this: ```xmp <portletAPI:init /> ... <% PortletData prefs = portletRequest.getData(); %> ``` to this: ```xmp ... <% PortletPreferences prefs = renderRequest.getPreferences(); %> ``` Change JSP tags that are used for namespace encoding. For example, if the portlet uses <portletAPI:encodeNamespace/> to uniquely qualify the name of a text input field, this tag must be changed as follows. Change this: ```xmp ``` to this: ```xmp ``` Change how portlet URLs are generated. If the portlet JSP creates a URL to itself, it should specify which method gets control using the <portlet:actionURL/> or <portlet:renderURL/> tags. Any parameters passed on the URL are specified using the <portlet:param/> tag. Change this: ```xmp ``` to this: ```xmp ``` Change resource bundles. The <portletAPI:text/> tag of the HCL Portlet API has been deprecated and should be replaced in all portlets by the JSTL equivalent. See Using JSTL in portlet JSPs for more information. Change this: ```xmp <portletAPI:text key=\"my.label\" bundle=\"nls.myproperties\"/> ``` to this: ```xmp <fmt:setBundle basename=\"nls.myproperties\"/> ... <fmt:message key=\"my.label\"/> ``` Change how resources are invoked from the JSP. For example, if the JSP displays an image, it should use the encodeURL() method of the appropriate response object and, in addition, add the context path of the portlet from the request. Change this: ```xmp <img src='<%= portletResponse.encodeURL(\"images/photo01.jpg\") %>' alt=\"photo\"> ``` to this: ```xmp <img src='<%= renderResponse.encodeURL(renderRequest.getContextPath() + \"/images/photo01.jpg\") %>' alt=\"photo\"> ``` Changing the portlet deployment descriptor The following steps describe some of the differences between the portlet deployment descriptors of the HCL Portlet API and the Java Portlet Specification. However, the order of the elements in the standard portlet descriptor is important and strictly enforced during deployment. You should use a tool, such as Rational\u00ae Application Developer, that performs validation as you develop the portlet deployment descriptor. Remove the DOCTYPE declaration. The portlet descriptor for the standard portlets uses an XML schema that is added in the next step. Remove this: ```xmp <!DOCTYPE portlet-app-def PUBLIC \"-//IBM//DTD Portlet Application 1.1//EN\" \"portlet_1.1.dtd \"> ``` Remove the <portlet-app-def/> element. The first-level element in the standard portlet descriptor is <portlet-app/>. Remove this code: ```xmp <portlet-app-def> .... </portlet-app-def> ``` Update the <portlet-app/> element. Add the schema definition and namespace declarations. Remove the major-version and minor-version attributes. Set the version attribute to the required version of the Java Portlet Specification. Currently, version 1.0 is the only supported specification version. Change the uid attribute to id. Change this code: ```xmp ``` to this code: ```xmp ``` Remove all <concrete-portlet-app/> elements and their contents. Save any required information, such as configuration parameters and language definitions, for use in the portlet definition. Update the <portlet/> element. Remove the href, minor-version, and major-version attributes. Change this code: ```xmp major-version=\"1\" minor-version=\"0\"> ``` to this code: ```xmp ``` Move the definition of the portlet class from the web.xml file to the portlet.xml file. Remove this code from the web.xml file: ```xmp <servlet id=\"com.mycompany.samples.MyPortlet.001c\"> <servlet-name>MyPortlet</servlet-name> <servlet-class>com.mycompany.samples.MyPortlet</servlet-class> </servlet> <servlet-mapping id=\"ServletMapping_com.mycompany.samples.MyPortlet.001c\"> <servlet-name>MyPortlet</servlet-name> <url-pattern>/MyPortlet/*</url-pattern> </servlet-mapping> ``` Add this code to the portlet.xml file: ```xmp <portlet-class>com.mycompany.samples.MyPortlet</portlet-class> ``` Change how caching is defined. Use the <expires/> value from the HCL portlet descriptor as the value for the <expiration-cache/> element in the standard descriptor. There is no equivalent in the standard descriptor to the <shared/> element. Change this code: ```xmp <cache> <expires>-1</expires> <shared>no</shared> </cache> ``` to this code: ```xmp <expiration-cache>-1</expiration-cache> ``` Change the content of the <supports/> element. Change supported markups to MIME types. Use the <portlet-mode/> element. The standard portlet descriptor allows you to declare only MIME types. In some cases, two markup types use the same MIME type. For example, both HTML and cHTML use 'text/html' as the MIME type. For standard portlets, HCL Portal accepts the value of a wps.markup initialization parameter as the markup type. Change this code: ```xmp <supports> <markup name=\"html\"> <view /> <edit /> </markup> </supports> ``` to this code: ```xmp <init-param> <name>wps.markup</name> <value>html,chtml</value> </init-param> ... <supports> <mime-type>text/html</mime-type> <portlet-mode>VIEW</portlet-mode> <portlet-mode>EDIT</portlet-mode> </supports> ``` Be sure to place the initialization parameters before the <expiration-cache> element. Remove window state elements. Normal, maximized, and minimized window states are supported by default and not declared in the standard portlet deployment descriptor. Remove this: ```xmp <allows> <maximized/> <minimized/> </allows> ``` Change configuration parameters to preferences. In the standard portlet descriptor, preferences can be changed by users in any of the standard modes, or they can be declared as read-only and modified only by an administrator. Change this: ```xmp <config-param> <param-name>Location</param-name> <param-value>Antartica</param-value> </config-param> ``` to this: ```xmp <portlet-preferences> <preference> <name>Location</name> <value>Antartica</value> <read-only>true</read-only> </preference> </portlet-preferences> ``` Change localized settings. Remove the <default-locale/> element. In the standard portlet descriptor, the first locale listed in the descriptor is the default. If no locale is specified, then English is used as the default. Create resource bundles for each supported language containing the title, short title, and keywords for the portlet. Use the following parameter names: ```xmp javax.portlet.title = My Portlet Title javax.portlet.short-title = Title javax.portlet.keywords = portlets, JSR 168, portal ``` Declare the resource bundle in the portlet descriptor as in the following example. ```xmp <resource-bundle>nls.MyPortlet</resource-bundle> ``` In this example, the default resource bundle MyPortlet.properties is in the /WEB-INF/nls sub-directory of the WAR file and all of the locale-specific resource bundles append the locale to the file name (for example, MyPortlet_ja.properties for Japanese). Declare each supported locale as in the following example: ```xmp <supported-locale>en</supported-locale> <supported-locale>de</supported-locale> ``` Set the localized values for the portlet description and display name as in the following example. ```xmp English description English display name -name> German description German display name -name> ``` Note: The display name should be set for compatibility reasons. However, it is not currently used by HCL Portal. Converting HCL Digital Experience portlets that use the Struts Portlet Framework The existing versions of the Struts Portlet Framework supported the HCL Portal container API, or the legacy container. This release uses a newer version of the Struts Portlet Framework that supports the standard portlet container. This release will continue to ship a version to support the legacy container and a new version for the Standard container. The Struts Portlet Framework is still shipped as example war files that can be used to build the Struts application. The war files for each container can be distinguished by the name. The SPFLegacy examples support the legacy container, and the SPFStandard examples support the standard container. The SPFLegacyBlank.war file is the starting point for Struts applications for the Legacy container, and the SPFStandardBlank is the starting point for the Struts applications for the Standard container. The Struts Portlet Framework for the Legacy Container The SPFLegacyBlank.war file contains the files to include with the Struts application. The directories of interest are the WEB-INF/lib and the WEB-INF/tld directory. Here is the list of libraries to be used in the application from the WEB-INF/lib directory: PortalStruts.jar PortalStrutsCommon.jar PortalStrutsTags.jar StrutsUpdateForPortal.jar wp.struts-commons-logging.jar commons-beanutils.jar commons-collections.jar commons-fileupload.jar commons-lang.jar commons-validator.jar struts-legacy.jar struts.jar The files from the TLD directory are struts-bean.tld struts-chtml.tld struts-html.tld struts-logic.tld struts-nested.tld struts-portal-html.tld struts-portal-wml.tld struts-template.tld struts-tiles.tld struts-wml.tld Files common to both the standard and HCL portlet containers The following files are the Jakarta Struts 1.1 binary files, and the same in both the Standard and Legacy versions of the Struts Portlet Framework: commons-beanutils.jar commons-collections.jar commons-fileupload.jar commons-lang.jar commons-validator.jar struts-legacy.jar struts.jar The following files from the TLD directory are same on for both containers. This can change in future releases, so it is strongly encouraged to use the files from the blank for the required container. struts-bean.tld struts-chtml.tld struts-html.tld struts-logic.tld struts-nested.tld struts-portal-html.tld struts-portal-wml.tld struts-template.tld struts-tiles.tld struts-wml.tld Conversion to the Standard Version of the Struts Portlet Framework from previous versions of the Struts Portlet Framework Converting the legacy version of the Struts Portlet Framework to the Standard versions starts with updating the jars, and TLDs cataloged with the SPFStandardBlank.war file. Here is a list of the files that should be updated in the WEB-INF/lib directory of the application: wp.struts.standard.framework.jar PortalStrutsCommon.jar PortalStrutsTags.jar StrutsUpdateForPortal.jar wp.struts-commons-logging.jar commons-beanutils.jar commons-collections.jar commons-fileupload.jar commons-lang.jar commons-validator.jar struts-legacy.jar struts.jar commons-digester.jar commons-logging.jar jakarta-oro.jar Here is a list of the TLD files that should be updated with the TLDs from the SPFStandardBlank.war file: struts-bean.tld struts-chtml.tld struts-html.tld struts-logic.tld struts-nested.tld struts-portal-html.tld struts-portal-wml.tld struts-template.tld struts-tiles.tld struts-wml.tld The PortalStruts.jar file is only required on the HCL container and must be deleted. Web Deployment Descriptor The Standard container requires a web deployment descriptor because the application is packaged as a war file. However, most of the initialization parameters are now configured through the portlet deployment descriptor. Remove the servlet class from the web deployment descriptor. The servlet-class is no longer that way to specify the portlet class for the application in the Standard container. The portlet is now specified as the portlet class in the portlet deployment descriptor. Move the init parameters from the web deployment descriptor to the portlet deployment descriptor. Since the portlet class is now defined in the portlet deployment descriptor, the init parameters are also specified in the portlet deployment descriptor. Note, the init-parameter are specified as name and value in the portlet deployment descriptor, not param-name and param-value as they are named in the web deployment descriptor. The taglib elements still remain in the web deployment descriptor, no changes required. The welcome file elements still remain in the web deployment descriptor, no changes required. Portlet Deployment Descriptor The definition for the Portlet Deployment Descriptor for the Standard container is different from the legacy container. There are some changes that are required for the converted example to deploy in the Standard container. The Help Center contains details for the semantics of the portlet deployment descriptor for the Standard container. The Standard container introduces the portlet-class element for specifying the class of the portlet. The portlet class for the Struts Portlet Framework is com.ibm.portal.struts.portlet.StrutsPortlet . The init parameters for the portlet are defined in the portlet deployment descriptor. The init parameters should be converted from the web deployment descriptor. The Standard container does not have the abstract and concrete separation in the portlet deployment descriptor. The portlet element defines the supported modes, and portlet preferences. The Struts Portlet Framework no longer uses a portlet filter. The FilterChain init parameter should not be converted. Struts Configuration File The Struts Portlet Framework defines the Request Processor that must be configured in the Struts configuration file. The controller attribute processClass must be converted to the following value to be deployed on the Standard container: <controller processorClass=\"com.ibm.portal.struts.portlet.WpRequestProcessor\"> If the Struts application is using the Struts Request processor that supports Tiles, then the Struts plug-in must be converted as well: <plug-in className=\"com.ibm.portal.struts.plugins.WpTilesPlugin\"> Struts Action The Struts action class is passed a HttpServletRequest object, so the application may not have a dependency on the Portal container. However, many applications use the PortletApiUtils to obtain the portlet request and interface directly with the portlet API. If so, then the application must replace the org.apache.jetspeed interfaces with the equivalent javax.portlet interfaces. The new interfaces are documented in the Help Center. Note: The following example illustrates the change in which the PortletApiUtils object is obtained: Old: PortletApiUtils portletUtils = PortletApiUtils.getInstance(); New: PortletApiUtils portletUtils = PortletApiUtils.getUtilsInstance(); StrutsPortlet The com.ibm.wps.portlets.struts.WpsStrutsPortlet class for the legacy container extended the PortletAdapter class. The Struts application using the Struts Portlet Framework may have been customized by extending the WpsStrutsPortlet class. If so, those changes should be applied for the Standard container. The com.ibm.portal.struts.portlet.StrutsPortlet class for the Standard container extends the standard container's GenericPortlet. Request processor The com.ibm.wps.portlets.struts.WpsRequestProcessor class for the legacy container may have been extended to customize the processing. The Request Processor class for the standard container is com.ibm.portal.struts.portlet.WpRequestProcessor . If the legacy interfaces were used for the customizations, these changes should be converted to the Standard interfaces.","title":"Converting HCL Digital Experience portlets \\(AIX, IBM I, Linux, Solaris, Windows\\)"},{"location":"dev-portlet/jsrmig/#converting-hcl-digital-experience-portlets-aix-ibm-i-linux-solaris-windows","text":"You can convert your basic HCL DX portlets and HCL DX portlets that use the Struts Portlet Framework to the standard portlet API.","title":"Converting HCL Digital Experience portlets (AIX, IBM I, Linux, Solaris, Windows)"},{"location":"dev-portlet/jsrmig/#converting-basic-hcl-portlets-to-the-standard","text":"This topic describes some of the more common changes (but not all) that are required to convert an HCL portlet to a standard portlet. Many conversion tasks depend on the amount of complexity in the portlet code. You must become familiar with the Java Portlet Specification to determine any remaining changes that are not covered in this topic. Changing Java source Change import statements to use the standard packages. Change this: ```xmp import org.apache.jetspeed.portlet. ; import org.apache.jetspeed.service. ; ``` to this: ```xmp import javax.portlet. ; import com.ibm.portal.portlet.service. ; ``` Change class inheritance to use GenericPortlet. Notice that the ActionListener is not implemented. Change this: ```xmp public class SamplePortlet extends PortletAdapter implements ActionListener{ ... } ``` to this: ```xmp public class SamplePortlet extends GenericPortlet{ ... } ``` Change objects that are used for all render methods. In the standard portlet API, the PortletRequest and PortletResponse define common functions for the RenderRequest and RenderResponse subclasses. These subclasses are the arguments for all implementations of the render() method, including doView(), doEdit(), and doHelp(). Change this: ```xmp public void doView(PortletRequest request, PortletResponse response) { ... } ``` to this: ```xmp public void doView(RenderRequest request, RenderResponse response) throws PortletException, IOException{ ... } ``` Change the actionPerformed() method. In the standard portlet API, this method is replaced by the processAction() method, which does not require the portlet to implement a listener. The processAction() methods accepts the ActionRequest and ActionResponse as arguments, which extend the PortletRequest and PortletResponse. Change this: ```xmp public void actionPerformed(ActionEvent event) throws PortletException{ ... } ``` to this: ```xmp public void processAction(ActionRequest request, ActionResponse response) throws PortletException, IOException{ ... } ``` Change how the response content type is set. In the standard portlet API, the MIME type of the output that is returned in the response must be set before including the JSP. HCL portlets declare the MIME type using the contentType attribute of JSP's page directive. Therefore, this change makes the contentType setting in the JSP unnecessary. Add the following code before including the JSP: ```xmp response.setContentType(\"text/html\"); ``` Change JSP includes. In the standard portlet API, JSPs are included by a request dispatcher's include() method. In the portlets' render method, set the MIME type of the output before returning it in the response. Change this: ```xmp PortletContext context = getPortletConfig().getContext(); context.include(\"/jsp/View.jsp\", request, response); ``` to this: ```xmp response.setContentType(\"text/html\"); PortletContext context = getPortletConfig().getPortletContext(); context.getRequestDispatcher(\"/jsp/View.jsp\").include( request, response); ``` Change classes where user data is stored. In the standard portlet API, user data is stored in a PortletPreferences object, rather than the PortletData object that is available using the HCL portlet API. Notice the different getter methods that are used with the request object and setter methods that are used for the data object. Change this: ```xmp PortletData portData = request.getData(); portData.setAttribute(\"userName\", userName); portData.store(); ``` to this: ```xmp PortletPreferences prefs = request.getPreferences(); prefs.setValue(\"userName\",request.getParameter(\"username\")); prefs.store(); ``` Some preferences are read-only and can be modified only by an administrator. See Change configuration parameters to preferences for information. Change the method that is used for namespace encoding. For example, if the portlet uses encodeNamespace() to return a unique string to be prefixed to a JavaScript variable name within the content that is generated by the portlet, the portlet can use getNamespace(). Change this: ```xmp PortletResponse.encodeNamespace() ``` to this: ```xmp RenderResponse.getNamespace() ``` Change how portlet URLs are generated. For example, a portlet's doEdit() method might save the URI to the edit mode to pass to the JSP. The portlet must instantiate a PortletURL object using the createRenderURL() method. Change this: ```xmp // Save URI for the edit page PortletURI editURI = response.createURI(); ... // Preserve the edit page URI in the request to make // it accessible by the edit JSP request.setAttribute(\"editURI\", editURI.toString()); ``` to this: ```xmp // Save URI for the edit page PortletURL editURL = response.createRenderURL(); ... // Preserve the edit page URI in the request // to make it accessible by the edit JSP request.setAttribute(\"editURL\", editURL.toString()); ``` The standard portlet API does not have an equivalent method for createReturnURI(). If the URL is intended to call the portlets' action method, however, the portlet should use the createActionURL() method. Changing JSP source Change the tag library to use the standard tag library. Change this: ```xmp <%@ taglib uri=\"/WEB-INF/tld/portlet.tld\" prefix=\"portletAPI\" %> ``` to this: ```xmp <%@ taglib uri=\"http://java.sun.com/portlet\" prefix=\"portlet\" %> ``` Change references to API objects. In the standard portlet API, the <portlet:defineObjects /> JSP tag makes the RenderRequest, RenderResponse, and PortletConfig objects available to JSP files. After making this change, all references in the JSP to the PortletRequest and PortletResponse should be changed to the corresponding RenderRequest and RenderResponse. Change this: ```xmp <portletAPI:init /> ... <% PortletData prefs = portletRequest.getData(); %> ``` to this: ```xmp ... <% PortletPreferences prefs = renderRequest.getPreferences(); %> ``` Change JSP tags that are used for namespace encoding. For example, if the portlet uses <portletAPI:encodeNamespace/> to uniquely qualify the name of a text input field, this tag must be changed as follows. Change this: ```xmp ``` to this: ```xmp ``` Change how portlet URLs are generated. If the portlet JSP creates a URL to itself, it should specify which method gets control using the <portlet:actionURL/> or <portlet:renderURL/> tags. Any parameters passed on the URL are specified using the <portlet:param/> tag. Change this: ```xmp ``` to this: ```xmp ``` Change resource bundles. The <portletAPI:text/> tag of the HCL Portlet API has been deprecated and should be replaced in all portlets by the JSTL equivalent. See Using JSTL in portlet JSPs for more information. Change this: ```xmp <portletAPI:text key=\"my.label\" bundle=\"nls.myproperties\"/> ``` to this: ```xmp <fmt:setBundle basename=\"nls.myproperties\"/> ... <fmt:message key=\"my.label\"/> ``` Change how resources are invoked from the JSP. For example, if the JSP displays an image, it should use the encodeURL() method of the appropriate response object and, in addition, add the context path of the portlet from the request. Change this: ```xmp <img src='<%= portletResponse.encodeURL(\"images/photo01.jpg\") %>' alt=\"photo\"> ``` to this: ```xmp <img src='<%= renderResponse.encodeURL(renderRequest.getContextPath() + \"/images/photo01.jpg\") %>' alt=\"photo\"> ``` Changing the portlet deployment descriptor The following steps describe some of the differences between the portlet deployment descriptors of the HCL Portlet API and the Java Portlet Specification. However, the order of the elements in the standard portlet descriptor is important and strictly enforced during deployment. You should use a tool, such as Rational\u00ae Application Developer, that performs validation as you develop the portlet deployment descriptor. Remove the DOCTYPE declaration. The portlet descriptor for the standard portlets uses an XML schema that is added in the next step. Remove this: ```xmp <!DOCTYPE portlet-app-def PUBLIC \"-//IBM//DTD Portlet Application 1.1//EN\" \"portlet_1.1.dtd \"> ``` Remove the <portlet-app-def/> element. The first-level element in the standard portlet descriptor is <portlet-app/>. Remove this code: ```xmp <portlet-app-def> .... </portlet-app-def> ``` Update the <portlet-app/> element. Add the schema definition and namespace declarations. Remove the major-version and minor-version attributes. Set the version attribute to the required version of the Java Portlet Specification. Currently, version 1.0 is the only supported specification version. Change the uid attribute to id. Change this code: ```xmp ``` to this code: ```xmp ``` Remove all <concrete-portlet-app/> elements and their contents. Save any required information, such as configuration parameters and language definitions, for use in the portlet definition. Update the <portlet/> element. Remove the href, minor-version, and major-version attributes. Change this code: ```xmp major-version=\"1\" minor-version=\"0\"> ``` to this code: ```xmp ``` Move the definition of the portlet class from the web.xml file to the portlet.xml file. Remove this code from the web.xml file: ```xmp <servlet id=\"com.mycompany.samples.MyPortlet.001c\"> <servlet-name>MyPortlet</servlet-name> <servlet-class>com.mycompany.samples.MyPortlet</servlet-class> </servlet> <servlet-mapping id=\"ServletMapping_com.mycompany.samples.MyPortlet.001c\"> <servlet-name>MyPortlet</servlet-name> <url-pattern>/MyPortlet/*</url-pattern> </servlet-mapping> ``` Add this code to the portlet.xml file: ```xmp <portlet-class>com.mycompany.samples.MyPortlet</portlet-class> ``` Change how caching is defined. Use the <expires/> value from the HCL portlet descriptor as the value for the <expiration-cache/> element in the standard descriptor. There is no equivalent in the standard descriptor to the <shared/> element. Change this code: ```xmp <cache> <expires>-1</expires> <shared>no</shared> </cache> ``` to this code: ```xmp <expiration-cache>-1</expiration-cache> ``` Change the content of the <supports/> element. Change supported markups to MIME types. Use the <portlet-mode/> element. The standard portlet descriptor allows you to declare only MIME types. In some cases, two markup types use the same MIME type. For example, both HTML and cHTML use 'text/html' as the MIME type. For standard portlets, HCL Portal accepts the value of a wps.markup initialization parameter as the markup type. Change this code: ```xmp <supports> <markup name=\"html\"> <view /> <edit /> </markup> </supports> ``` to this code: ```xmp <init-param> <name>wps.markup</name> <value>html,chtml</value> </init-param> ... <supports> <mime-type>text/html</mime-type> <portlet-mode>VIEW</portlet-mode> <portlet-mode>EDIT</portlet-mode> </supports> ``` Be sure to place the initialization parameters before the <expiration-cache> element. Remove window state elements. Normal, maximized, and minimized window states are supported by default and not declared in the standard portlet deployment descriptor. Remove this: ```xmp <allows> <maximized/> <minimized/> </allows> ``` Change configuration parameters to preferences. In the standard portlet descriptor, preferences can be changed by users in any of the standard modes, or they can be declared as read-only and modified only by an administrator. Change this: ```xmp <config-param> <param-name>Location</param-name> <param-value>Antartica</param-value> </config-param> ``` to this: ```xmp <portlet-preferences> <preference> <name>Location</name> <value>Antartica</value> <read-only>true</read-only> </preference> </portlet-preferences> ``` Change localized settings. Remove the <default-locale/> element. In the standard portlet descriptor, the first locale listed in the descriptor is the default. If no locale is specified, then English is used as the default. Create resource bundles for each supported language containing the title, short title, and keywords for the portlet. Use the following parameter names: ```xmp javax.portlet.title = My Portlet Title javax.portlet.short-title = Title javax.portlet.keywords = portlets, JSR 168, portal ``` Declare the resource bundle in the portlet descriptor as in the following example. ```xmp <resource-bundle>nls.MyPortlet</resource-bundle> ``` In this example, the default resource bundle MyPortlet.properties is in the /WEB-INF/nls sub-directory of the WAR file and all of the locale-specific resource bundles append the locale to the file name (for example, MyPortlet_ja.properties for Japanese). Declare each supported locale as in the following example: ```xmp <supported-locale>en</supported-locale> <supported-locale>de</supported-locale> ``` Set the localized values for the portlet description and display name as in the following example. ```xmp English description English display name -name> German description German display name -name> ``` Note: The display name should be set for compatibility reasons. However, it is not currently used by HCL Portal.","title":"Converting basic HCL portlets to the standard"},{"location":"dev-portlet/jsrmig/#converting-hcl-digital-experience-portlets-that-use-the-struts-portlet-framework","text":"The existing versions of the Struts Portlet Framework supported the HCL Portal container API, or the legacy container. This release uses a newer version of the Struts Portlet Framework that supports the standard portlet container. This release will continue to ship a version to support the legacy container and a new version for the Standard container. The Struts Portlet Framework is still shipped as example war files that can be used to build the Struts application. The war files for each container can be distinguished by the name. The SPFLegacy examples support the legacy container, and the SPFStandard examples support the standard container. The SPFLegacyBlank.war file is the starting point for Struts applications for the Legacy container, and the SPFStandardBlank is the starting point for the Struts applications for the Standard container. The Struts Portlet Framework for the Legacy Container The SPFLegacyBlank.war file contains the files to include with the Struts application. The directories of interest are the WEB-INF/lib and the WEB-INF/tld directory. Here is the list of libraries to be used in the application from the WEB-INF/lib directory: PortalStruts.jar PortalStrutsCommon.jar PortalStrutsTags.jar StrutsUpdateForPortal.jar wp.struts-commons-logging.jar commons-beanutils.jar commons-collections.jar commons-fileupload.jar commons-lang.jar commons-validator.jar struts-legacy.jar struts.jar The files from the TLD directory are struts-bean.tld struts-chtml.tld struts-html.tld struts-logic.tld struts-nested.tld struts-portal-html.tld struts-portal-wml.tld struts-template.tld struts-tiles.tld struts-wml.tld Files common to both the standard and HCL portlet containers The following files are the Jakarta Struts 1.1 binary files, and the same in both the Standard and Legacy versions of the Struts Portlet Framework: commons-beanutils.jar commons-collections.jar commons-fileupload.jar commons-lang.jar commons-validator.jar struts-legacy.jar struts.jar The following files from the TLD directory are same on for both containers. This can change in future releases, so it is strongly encouraged to use the files from the blank for the required container. struts-bean.tld struts-chtml.tld struts-html.tld struts-logic.tld struts-nested.tld struts-portal-html.tld struts-portal-wml.tld struts-template.tld struts-tiles.tld struts-wml.tld Conversion to the Standard Version of the Struts Portlet Framework from previous versions of the Struts Portlet Framework Converting the legacy version of the Struts Portlet Framework to the Standard versions starts with updating the jars, and TLDs cataloged with the SPFStandardBlank.war file. Here is a list of the files that should be updated in the WEB-INF/lib directory of the application: wp.struts.standard.framework.jar PortalStrutsCommon.jar PortalStrutsTags.jar StrutsUpdateForPortal.jar wp.struts-commons-logging.jar commons-beanutils.jar commons-collections.jar commons-fileupload.jar commons-lang.jar commons-validator.jar struts-legacy.jar struts.jar commons-digester.jar commons-logging.jar jakarta-oro.jar Here is a list of the TLD files that should be updated with the TLDs from the SPFStandardBlank.war file: struts-bean.tld struts-chtml.tld struts-html.tld struts-logic.tld struts-nested.tld struts-portal-html.tld struts-portal-wml.tld struts-template.tld struts-tiles.tld struts-wml.tld The PortalStruts.jar file is only required on the HCL container and must be deleted. Web Deployment Descriptor The Standard container requires a web deployment descriptor because the application is packaged as a war file. However, most of the initialization parameters are now configured through the portlet deployment descriptor. Remove the servlet class from the web deployment descriptor. The servlet-class is no longer that way to specify the portlet class for the application in the Standard container. The portlet is now specified as the portlet class in the portlet deployment descriptor. Move the init parameters from the web deployment descriptor to the portlet deployment descriptor. Since the portlet class is now defined in the portlet deployment descriptor, the init parameters are also specified in the portlet deployment descriptor. Note, the init-parameter are specified as name and value in the portlet deployment descriptor, not param-name and param-value as they are named in the web deployment descriptor. The taglib elements still remain in the web deployment descriptor, no changes required. The welcome file elements still remain in the web deployment descriptor, no changes required. Portlet Deployment Descriptor The definition for the Portlet Deployment Descriptor for the Standard container is different from the legacy container. There are some changes that are required for the converted example to deploy in the Standard container. The Help Center contains details for the semantics of the portlet deployment descriptor for the Standard container. The Standard container introduces the portlet-class element for specifying the class of the portlet. The portlet class for the Struts Portlet Framework is com.ibm.portal.struts.portlet.StrutsPortlet . The init parameters for the portlet are defined in the portlet deployment descriptor. The init parameters should be converted from the web deployment descriptor. The Standard container does not have the abstract and concrete separation in the portlet deployment descriptor. The portlet element defines the supported modes, and portlet preferences. The Struts Portlet Framework no longer uses a portlet filter. The FilterChain init parameter should not be converted. Struts Configuration File The Struts Portlet Framework defines the Request Processor that must be configured in the Struts configuration file. The controller attribute processClass must be converted to the following value to be deployed on the Standard container: <controller processorClass=\"com.ibm.portal.struts.portlet.WpRequestProcessor\"> If the Struts application is using the Struts Request processor that supports Tiles, then the Struts plug-in must be converted as well: <plug-in className=\"com.ibm.portal.struts.plugins.WpTilesPlugin\"> Struts Action The Struts action class is passed a HttpServletRequest object, so the application may not have a dependency on the Portal container. However, many applications use the PortletApiUtils to obtain the portlet request and interface directly with the portlet API. If so, then the application must replace the org.apache.jetspeed interfaces with the equivalent javax.portlet interfaces. The new interfaces are documented in the Help Center. Note: The following example illustrates the change in which the PortletApiUtils object is obtained: Old: PortletApiUtils portletUtils = PortletApiUtils.getInstance(); New: PortletApiUtils portletUtils = PortletApiUtils.getUtilsInstance(); StrutsPortlet The com.ibm.wps.portlets.struts.WpsStrutsPortlet class for the legacy container extended the PortletAdapter class. The Struts application using the Struts Portlet Framework may have been customized by extending the WpsStrutsPortlet class. If so, those changes should be applied for the Standard container. The com.ibm.portal.struts.portlet.StrutsPortlet class for the Standard container extends the standard container's GenericPortlet. Request processor The com.ibm.wps.portlets.struts.WpsRequestProcessor class for the legacy container may have been extended to customize the processing. The Request Processor class for the standard container is com.ibm.portal.struts.portlet.WpRequestProcessor . If the legacy interfaces were used for the customizations, these changes should be converted to the Standard interfaces.","title":"Converting HCL Digital Experience portlets that use the Struts Portlet Framework"},{"location":"dev-portlet/jsrsamp/","text":"Sample portlets Learn about the sample portlets included with HCL Digital Experience and view the steps to import these samples into IBM Rational Application Developer. You can get some sample portlets from the portlet catalog. The samples described throughout these topics are available from the portlet catalog by searching for navcode 1WP10017Z. The samples are sorted according to topic: Basic samples These samples demonstrate the simplest portlet programming structures. These samples are described under the topic about Understanding the basics. Struts Portlet Framework samples These samples demonstrate how Struts applications can be converted to portlets. These samples are described under the topic about the Struts Portlet Framework. Cooperative portlet samples These samples demonstrate how portlets can use the property broker to exchange information or properties with each other. These samples are described under the topic about Portlet communication. Importing the sample portlets into Rational Application Developer Follow these steps to import portlets from the sample package into Rational Application Developer. From the menu bar of Application Developer, click File > New > Project , and then select the appropriate portlet project. For example, to import jsrViewWorld.war, select Portlet Project (JSR 168) . The New Portlet Project dialog opens. Enter a valid project name. For example, jsrViewWorld. Clear Create a portlet . Verify that version of HCL DX is correct. This should match the version you are using. Click Finish . The new project is created under the Dynamic Web Projects folder in the Project Explorer. Right-click the new portlet project and select Import > WAR file from the menu. The Import dialog opens. Enter the location of the source WAR file that you want to import. For example, C:\\rad\\portlets\\version\\jsrViewWorld.war . For Web project , select the name of the new portlet project that you just created, for example, jsrViewWorld . Check Overwrite existing sources without warning . Click Finish . Check the contents of the new portlet project for errors.","title":"Sample portlets"},{"location":"dev-portlet/jsrsamp/#sample-portlets","text":"Learn about the sample portlets included with HCL Digital Experience and view the steps to import these samples into IBM Rational Application Developer. You can get some sample portlets from the portlet catalog. The samples described throughout these topics are available from the portlet catalog by searching for navcode 1WP10017Z. The samples are sorted according to topic: Basic samples These samples demonstrate the simplest portlet programming structures. These samples are described under the topic about Understanding the basics. Struts Portlet Framework samples These samples demonstrate how Struts applications can be converted to portlets. These samples are described under the topic about the Struts Portlet Framework. Cooperative portlet samples These samples demonstrate how portlets can use the property broker to exchange information or properties with each other. These samples are described under the topic about Portlet communication. Importing the sample portlets into Rational Application Developer Follow these steps to import portlets from the sample package into Rational Application Developer. From the menu bar of Application Developer, click File > New > Project , and then select the appropriate portlet project. For example, to import jsrViewWorld.war, select Portlet Project (JSR 168) . The New Portlet Project dialog opens. Enter a valid project name. For example, jsrViewWorld. Clear Create a portlet . Verify that version of HCL DX is correct. This should match the version you are using. Click Finish . The new project is created under the Dynamic Web Projects folder in the Project Explorer. Right-click the new portlet project and select Import > WAR file from the menu. The Import dialog opens. Enter the location of the source WAR file that you want to import. For example, C:\\rad\\portlets\\version\\jsrViewWorld.war . For Web project , select the name of the new portlet project that you just created, for example, jsrViewWorld . Check Overwrite existing sources without warning . Click Finish . Check the contents of the new portlet project for errors.","title":"Sample portlets"},{"location":"dev-portlet/outbhttp_auth_est_sso_saml_tok/","text":"Establishing SSO connections through SAML 2.0 tokens It is possible to establish outbound HTTP connections to remote resources that are authenticated by using the SAML 2.0 protocol. Outbound HTTP connections take care of the communication with the Identity provider (IDP) to get an authenticated connection by using SAML tokens. The SAML Authentication handler uses the HTTP POST binding protocol of the SAML specification. Therefore, it is required that both the Identity Provider and the Service Provider support the HTTP POST binding, if they are used by Outbound HTTP Connections for authentication. An outbound HTTP connection is activated by setting the metadata SSO_SAML_20_IDP at the connection policy or policy mapping. The value of this metadata setting is a symbolic name for the Identity provider that establishes the connection. This name is used as a prefix for another set of metadata that define the settings of the Identity provider as the following example illustrates: <mapping contextpath=\"/myproxy\" url=\"*\"> <policy url=\"http://www.myremotesite.com/RESOURCE*\" > ... <!-- the following meta data setting activates the connection --> <!-- for SSO connections via SAML. The symbolic name of the Identity --> <!-- Provider is MySampleIdentityProvider --> <meta-data> <name>SSO_SAML20_IDP</name> <value>MySampleIdentityProvider</value> </meta-data> </policy> <!-- a second policy that establishes a SSO connection via this IDP --> <policy url=\"http://www.myremotesite.com/ANOTHER*\" > <!-- another policy --> ... <meta-data> <name>SSO_SAML20_IDP</name> <value>MySampleIdentityProvider</value> </meta-data> </policy> <!-- the settings of the Identity provider MySampleIdentityProvider --> <!-- In this example, the identity provider settings are saved in the meta data --> <!-- is scoped to the policy mapping \u201c/myportal\". --> <meta-data> <name>MySampleIdentityProvider.IDP_HOST</name> <value>www.the-identity-provider.com</value> </meta-data> <meta-data> <name>MySampleIdentityProvider.IDP_PARAM_NAME.1</name> <value>SAMLRquest</value> </meta-data> <meta-data> <name>MySampleIdentityProvider.IDP_PARAM_VALUE.1</name> <value>request</value> </meta-data> </mapping>","title":"Establishing SSO connections through SAML 2.0 tokens"},{"location":"dev-portlet/outbhttp_auth_est_sso_saml_tok/#establishing-sso-connections-through-saml-20-tokens","text":"It is possible to establish outbound HTTP connections to remote resources that are authenticated by using the SAML 2.0 protocol. Outbound HTTP connections take care of the communication with the Identity provider (IDP) to get an authenticated connection by using SAML tokens. The SAML Authentication handler uses the HTTP POST binding protocol of the SAML specification. Therefore, it is required that both the Identity Provider and the Service Provider support the HTTP POST binding, if they are used by Outbound HTTP Connections for authentication. An outbound HTTP connection is activated by setting the metadata SSO_SAML_20_IDP at the connection policy or policy mapping. The value of this metadata setting is a symbolic name for the Identity provider that establishes the connection. This name is used as a prefix for another set of metadata that define the settings of the Identity provider as the following example illustrates: <mapping contextpath=\"/myproxy\" url=\"*\"> <policy url=\"http://www.myremotesite.com/RESOURCE*\" > ... <!-- the following meta data setting activates the connection --> <!-- for SSO connections via SAML. The symbolic name of the Identity --> <!-- Provider is MySampleIdentityProvider --> <meta-data> <name>SSO_SAML20_IDP</name> <value>MySampleIdentityProvider</value> </meta-data> </policy> <!-- a second policy that establishes a SSO connection via this IDP --> <policy url=\"http://www.myremotesite.com/ANOTHER*\" > <!-- another policy --> ... <meta-data> <name>SSO_SAML20_IDP</name> <value>MySampleIdentityProvider</value> </meta-data> </policy> <!-- the settings of the Identity provider MySampleIdentityProvider --> <!-- In this example, the identity provider settings are saved in the meta data --> <!-- is scoped to the policy mapping \u201c/myportal\". --> <meta-data> <name>MySampleIdentityProvider.IDP_HOST</name> <value>www.the-identity-provider.com</value> </meta-data> <meta-data> <name>MySampleIdentityProvider.IDP_PARAM_NAME.1</name> <value>SAMLRquest</value> </meta-data> <meta-data> <name>MySampleIdentityProvider.IDP_PARAM_VALUE.1</name> <value>request</value> </meta-data> </mapping>","title":"Establishing SSO connections through SAML 2.0 tokens"},{"location":"dev-portlet/wpsbscfg/","text":"Creating a simple portlet To create a simple portlet, you must write the portlet code, compile Java source, create the JAR file, write the portlet descriptors, set up the WAR file directory structure, and package and deploy the portlets. Before you begin developing portlets, set up an environment that makes the tasks of writing, compiling, and testing portlets easier. Rational\u00ae Application Developer includes a test environment that you can use to run and debug your portlets without having to manually deploy them to the server. You can set up the run time environment for debugging portlets on the local development machine or on a remote server. Refer to the documentation for Rational Application Developer for complete setup instructions. Rational Application Developer provides wizards to help you build, test, and deploy portlets using all of the APIs and related classes and interfaces available in the portlet run time environment. You can also build portlets using your own development environment and tools. If you are not using wizards to develop portlets, the following topics describe the mechanics of building a simple portlet. Writing the portlet code The Hello World portlet provides an introduction to writing your first portlet. The portlet is provided along with the source in the HCL Portlet Samples package, which is available from the portlet catalog by searching for navcode 1WP10017Z . See Sample portlets for more information. Hello World provides the fewest methods that are required for a portlet. It uses the portlet response object to write simple output directly to the portal page. package com.ibm.wps.samples.jsr; import javax.portlet.*; import java.io.*; public class HelloWorld extends GenericPortlet { public void init (PortletConfig portletConfig) throws UnavailableException, PortletException { super.init(portletConfig); } public void doView(RenderRequest request, RenderResponse response) throws PortletException, IOException { // set return content type response.setContentType(\"text/html\"); PrintWriter writer = response.getWriter(); writer.println(\"<p class='wpsPortletText'>Hello Portal World!</p>\"); } } Compiling Java source Compile your Java source files. Before you compile your Java source, set the class path for the compiler to find the JAR files for any portlet packages that your portlet uses by running the following command: AIX\u00ae HP-UX Linux\u2122 Solaris: ./setupcmdLine.sh IBM i: setupcmdLine.sh Windows\u2122: setupcmdLine.bat z/OS\u00ae: setupcmdLine.sh The following JAR files must be set in the class path to compile portlets: Standard portlets JAR file Purpose portletapi_20.jar This file complies with the Java Portlet Specification Version 2.0. public_api.jar Use this file if you use services from the Public API Javadoc package. public_api.jar + public_spi.jar Use this file if you use services from the Public SP Javadoc package. These files are in the directory PortalServer_root /doc/compile. HCL DX portlets JAR file Purpose wp.pe.api.legacy.jar HCL Portlet API wp.portletservices.api.legacy.jar Portlet services wp.pe.rt.api.jar Portlet menus Then, compile the portlet using the fully qualified path to the Java portlet source. appserver\\java\\bin\\javac -classpath %WAS_CLASSPATH%;path_to\\portletapi_20.jar com.ibm.wps.samples.jsr.HelloWorld.java appserver\\java\\bin\\javac -classpath %WAS_CLASSPATH%;path_to\\portletapi_20.jar com.ibm.wps.samples.v4.HelloWorld.java Loading classes for portlets HCL DX class loading follows the WebSphere\u00ae Application Server hierarchy for class paths and search orders. You can reference a class if the parent class loader can reference it or your own class loader can reference it. You cannot reference a class if a child class loader references it. The graphic illustrates where HCL DX and portlet applications fit into the class loading hierarchy. In the following graphic runtime class path patches (RCP) are at the beginning of the hierarchy. Runtime class path (RP) branches from runtime class path patches. Runtime extensions (RE) branches from runtime class path, and application extensions (AEX) branch from runtime extensions. Application class loaders (AC1), application class loaders (AC2), and application class loaders (AC3) are portlet applications that branch from application extensions. As illustrated, HCL DX is an application extension (AEX) in WebSphere\u00ae Application Server. The HCL DX core classes are in the class path PortalServer_root /shared/app. If an installed portlet application includes a class loader, the portlet application class loader is an application class loader (ACx) in HCL DX. If you suspect a classloading problem, ensure that the required classes are in the appropriate class path according to the classloading hierarchy. Creating the JAR file Next, the portlet must be packaged in the JAR file format. To create a JAR file with the name HelloWorld.jar , enter the following command: jar -cf HelloWorld.jar HelloWorld.class Refer to the JDK documentation for more information about the JAR command. Writing the portlet descriptors The following samples can be packaged with the Hello World portlet. Web application deployment descriptor for standard portlets: According to the Java Portlet Specification, only web resources that are not portlets must be declared in the web.xml. However, the following properties must be set to correspond to the portlet descriptor: <description/> describes the portlet application. <display-name/> indicates the portlet application name. <security-role/> indicates the portlet application security role mapping. Omit this tag if the portlet does not use this feature. ```xmp <?xml version=\"1.0\" encoding=\"UTF-8\"?> <!DOCTYPE web-app PUBLIC \"-//Sun Microsystems, Inc.//DTD Web Application 2.3//EN\" \"http://java.sun.com/dtd/web-app_2_3.dtd\"> Hello World (JSR) Basic JSR 168 portlet ``` Standard portlet deployment descriptor: The following shows the minimum elements that are required for the standard portlet deployment descriptor. ```xmp <?xml version=\"1.0\" encoding=\"UTF-8\"?> HelloWorld portlet name Hello World portlet (JSR) Hello World portlet (JSR) com.ibm.wps.samples.jsr.jsrHelloWorld text/html view en Hello World (JSR) ``` The standard portlet descriptor is defined by an XML schema and does not require a DTD. Setting up the WAR file directory structure Before you package your portlet, the class files and resources must be arranged in the WAR file directory structure described here. A portlet application exists as a structured hierarchy of directories. Note: Do not package .tld files for tag libraries that are provided by the portal or application server installation with the portlet application WAR file. It includes the JSR 168 and 286 portlet tags and the Java Standard Tag Library (JSTL). / The root directory of the portlet file structure. /images Location for any images the required by the portlet. /WEB-INF Location for all protected resources. The /WEB-INF directory stores the portlet descriptor document and all of the run time executable JAR files and classes that the packaged portlet requires. The portlet information directory is not part of the public document tree of the application. Files that are in /WEB-INF are not served directly to a client. /WEB-INF/lib Location for storing portlet JAR files. /WEB-INF/jsp Location for JSP files. This is a suggested path name. Your JSPs can be packaged in any location. JSPs that are included inside the portlet markup must be placed under the /WEB-INF directory. Place them outside the /WEB-INF directory if you create direct links to them. /WEB-INF/classes Location for portlet class files. Individual class file must be stored in a directory structure within /WEB-INF/classes that reflects the class package. For example, the class HelloWorld.class , in package com.ibm.wps.samples , would be stored in /WEB-INF/classes/com/ibm/wps/samples/HelloWorld.class . /META-INF Location for the manifest file, manifest.mf , and the Java 2 security file, was.policy (if present). The manifest is in the standard JAR file format as defined by the Java 1.3 specification. The Java 2 security policy file is used to allow a portlet to execute operations that might be restricted if Java 2 security is enabled. The contents of the /META-INF directory is not served to clients. Note: The application server searches for security policy files in the location of the enterprise application archive rather than the web application archive. Therefore, the portal server copies was.policy from the appname.war/META-INF directory to the generated appname.ear/META-INF directory during deployment of a portlet WAR file. Packaging and deploying portlets To deploy a portlet and run it on the server, it must be packaged in the form of a Web application ARchive or WAR file. The WAR file format contains the Java classes and resources that make up one or more portlets in a portlet application. The resources can be images, JSP files, writing the portlet descriptions, and property files that contain translated message text. Packaging portlet classes, resources, and descriptive information in a single file makes distribution and deployment of portlets easier. Documentation resource: Writing the portlet descriptions: HCL Portal 8.0 Product Documentation HCL DX includes an administrative portlet for installing, uninstalling, and updating portlets. Portlets that are contained in WAR files have the advantage of being dynamically downloaded and installed. The portal administrator can download a WAR file from the Internet and then use the portal administration interface to install the portlet to HCL DX. After installation, the portlet is ready for use and does not require the server to be restarted. To package your portlet in a WAR file, you can use the JAR file utility to package the portlet into a WAR file. Documentation source: Packaging the portlet into a WAR file: HCL Portal 8.0 Product Documentation Note: Because Windows limits the maximum path length to 260 characters, the name of the WAR file must be fewer than 25 characters. On a portal server running on Windows, installing a WAR file with a name that is more than 25 characters results in an error. Tip: You can also run the build-war-file or build-ear-file tasks to build the .war and .ear files. See the \"Building .ear and .war files\" link in the Related task section for information. Packaging a portlet and resources into a WAR file Any JAR file utility can be used to build a WAR file. The following are examples of how to use the JAR file utility that is provided by WebSphere\u00ae Application Server. To create a WAR file with the name HelloWorld.war and include all of the files in the /WEB-INF and /images directories: ```xmp jar -cf HelloWorld.war images WEB-INF ``` To update an existing WAR file, HelloWorld.war with a revised portlet descriptor: ```xmp jar -uf HelloWorld.war WEB-INF/portlet.xml ``` To extract the portlet descriptor from the WAR file, HelloWorld.war : ```xmp jar -xf HelloWorld.war WEB-INF/portlet.xml ``` To extract all files from an existing WAR file, HelloWorld.war : ```xmp jar -xf HelloWorld.war ``` After the WAR file is created, it can be installed to HCL DX as described in Portal administration portlets . Preparing the portlet application for installation To facilitate deployment of portlet applications and complex portlets, you can provide a portlet configuration file that can be invoked by the XML configuration interface (XMLAccess). The XML configuration interface allows the portlet developer to specify places, pages, themes, skins, supported markups and clients, and other settings for a portlet application. This is especially useful for portlets that use messaging because these portlets must be placed on the same page. For more information, see The XML configuration interface . When you construct XMLAccess scripts for use in installing standard portlets, use the following values: uid attribute for the <web-app> element: Use the uid attribute of the <portlet-app/> subelement with a .webmod suffix. As described later in this topic, the uid attribute of the <portlet-app/> subelement is dependent on the presence of the id attribute of the <portlet-app/> element from the portlet.xml. uid attribute for the <portlet-app> element: Use the id attribute of the <portlet-app/> element from the portlet.xml. If this value has not been specified, specify the WAR file name of the portlet application in its place. For portlet updates, the WAR file name must be the original name of the WAR file used to install the portlet application. That is, the WAR file name can be changed, but the uid must indicate the original uid used during portlet installation. name attribute for the <portlet> element: Use the content of the <portlet-name/> element from the portlet.xml. referenceid attribute of the <servlet> element: Use the content of the <portlet-name/> element from the portlet.xml appended with the .servlet suffix. For example, a portlet application might use a portlet descriptor: ```xmp Banner Ad ... ``` In this example, there is no ID attribute that is provided on the <portlet-app/> element. Therefore, the <portlet-app/> element of the XMLAccess script would use the WAR file name: ```xmp file:///$server_root$/bp/wp.bp.bannerad/installableApps/bannerad.war ```","title":"Creating a simple portlet"},{"location":"dev-portlet/wpsbscfg/#creating-a-simple-portlet","text":"To create a simple portlet, you must write the portlet code, compile Java source, create the JAR file, write the portlet descriptors, set up the WAR file directory structure, and package and deploy the portlets. Before you begin developing portlets, set up an environment that makes the tasks of writing, compiling, and testing portlets easier. Rational\u00ae Application Developer includes a test environment that you can use to run and debug your portlets without having to manually deploy them to the server. You can set up the run time environment for debugging portlets on the local development machine or on a remote server. Refer to the documentation for Rational Application Developer for complete setup instructions. Rational Application Developer provides wizards to help you build, test, and deploy portlets using all of the APIs and related classes and interfaces available in the portlet run time environment. You can also build portlets using your own development environment and tools. If you are not using wizards to develop portlets, the following topics describe the mechanics of building a simple portlet.","title":"Creating a simple portlet"},{"location":"dev-portlet/wpsbscfg/#writing-the-portlet-code","text":"The Hello World portlet provides an introduction to writing your first portlet. The portlet is provided along with the source in the HCL Portlet Samples package, which is available from the portlet catalog by searching for navcode 1WP10017Z . See Sample portlets for more information. Hello World provides the fewest methods that are required for a portlet. It uses the portlet response object to write simple output directly to the portal page. package com.ibm.wps.samples.jsr; import javax.portlet.*; import java.io.*; public class HelloWorld extends GenericPortlet { public void init (PortletConfig portletConfig) throws UnavailableException, PortletException { super.init(portletConfig); } public void doView(RenderRequest request, RenderResponse response) throws PortletException, IOException { // set return content type response.setContentType(\"text/html\"); PrintWriter writer = response.getWriter(); writer.println(\"<p class='wpsPortletText'>Hello Portal World!</p>\"); } }","title":"Writing the portlet code"},{"location":"dev-portlet/wpsbscfg/#compiling-java-source","text":"Compile your Java source files. Before you compile your Java source, set the class path for the compiler to find the JAR files for any portlet packages that your portlet uses by running the following command: AIX\u00ae HP-UX Linux\u2122 Solaris: ./setupcmdLine.sh IBM i: setupcmdLine.sh Windows\u2122: setupcmdLine.bat z/OS\u00ae: setupcmdLine.sh The following JAR files must be set in the class path to compile portlets: Standard portlets JAR file Purpose portletapi_20.jar This file complies with the Java Portlet Specification Version 2.0. public_api.jar Use this file if you use services from the Public API Javadoc package. public_api.jar + public_spi.jar Use this file if you use services from the Public SP Javadoc package. These files are in the directory PortalServer_root /doc/compile. HCL DX portlets JAR file Purpose wp.pe.api.legacy.jar HCL Portlet API wp.portletservices.api.legacy.jar Portlet services wp.pe.rt.api.jar Portlet menus Then, compile the portlet using the fully qualified path to the Java portlet source. appserver\\java\\bin\\javac -classpath %WAS_CLASSPATH%;path_to\\portletapi_20.jar com.ibm.wps.samples.jsr.HelloWorld.java appserver\\java\\bin\\javac -classpath %WAS_CLASSPATH%;path_to\\portletapi_20.jar com.ibm.wps.samples.v4.HelloWorld.java Loading classes for portlets HCL DX class loading follows the WebSphere\u00ae Application Server hierarchy for class paths and search orders. You can reference a class if the parent class loader can reference it or your own class loader can reference it. You cannot reference a class if a child class loader references it. The graphic illustrates where HCL DX and portlet applications fit into the class loading hierarchy. In the following graphic runtime class path patches (RCP) are at the beginning of the hierarchy. Runtime class path (RP) branches from runtime class path patches. Runtime extensions (RE) branches from runtime class path, and application extensions (AEX) branch from runtime extensions. Application class loaders (AC1), application class loaders (AC2), and application class loaders (AC3) are portlet applications that branch from application extensions. As illustrated, HCL DX is an application extension (AEX) in WebSphere\u00ae Application Server. The HCL DX core classes are in the class path PortalServer_root /shared/app. If an installed portlet application includes a class loader, the portlet application class loader is an application class loader (ACx) in HCL DX. If you suspect a classloading problem, ensure that the required classes are in the appropriate class path according to the classloading hierarchy.","title":"Compiling Java source"},{"location":"dev-portlet/wpsbscfg/#creating-the-jar-file","text":"Next, the portlet must be packaged in the JAR file format. To create a JAR file with the name HelloWorld.jar , enter the following command: jar -cf HelloWorld.jar HelloWorld.class Refer to the JDK documentation for more information about the JAR command.","title":"Creating the JAR file"},{"location":"dev-portlet/wpsbscfg/#writing-the-portlet-descriptors","text":"The following samples can be packaged with the Hello World portlet. Web application deployment descriptor for standard portlets: According to the Java Portlet Specification, only web resources that are not portlets must be declared in the web.xml. However, the following properties must be set to correspond to the portlet descriptor: <description/> describes the portlet application. <display-name/> indicates the portlet application name. <security-role/> indicates the portlet application security role mapping. Omit this tag if the portlet does not use this feature. ```xmp <?xml version=\"1.0\" encoding=\"UTF-8\"?> <!DOCTYPE web-app PUBLIC \"-//Sun Microsystems, Inc.//DTD Web Application 2.3//EN\" \"http://java.sun.com/dtd/web-app_2_3.dtd\"> Hello World (JSR) Basic JSR 168 portlet ``` Standard portlet deployment descriptor: The following shows the minimum elements that are required for the standard portlet deployment descriptor. ```xmp <?xml version=\"1.0\" encoding=\"UTF-8\"?> HelloWorld portlet name Hello World portlet (JSR) Hello World portlet (JSR) com.ibm.wps.samples.jsr.jsrHelloWorld text/html view en Hello World (JSR) ``` The standard portlet descriptor is defined by an XML schema and does not require a DTD.","title":"Writing the portlet descriptors"},{"location":"dev-portlet/wpsbscfg/#setting-up-the-war-file-directory-structure","text":"Before you package your portlet, the class files and resources must be arranged in the WAR file directory structure described here. A portlet application exists as a structured hierarchy of directories. Note: Do not package .tld files for tag libraries that are provided by the portal or application server installation with the portlet application WAR file. It includes the JSR 168 and 286 portlet tags and the Java Standard Tag Library (JSTL). / The root directory of the portlet file structure. /images Location for any images the required by the portlet. /WEB-INF Location for all protected resources. The /WEB-INF directory stores the portlet descriptor document and all of the run time executable JAR files and classes that the packaged portlet requires. The portlet information directory is not part of the public document tree of the application. Files that are in /WEB-INF are not served directly to a client. /WEB-INF/lib Location for storing portlet JAR files. /WEB-INF/jsp Location for JSP files. This is a suggested path name. Your JSPs can be packaged in any location. JSPs that are included inside the portlet markup must be placed under the /WEB-INF directory. Place them outside the /WEB-INF directory if you create direct links to them. /WEB-INF/classes Location for portlet class files. Individual class file must be stored in a directory structure within /WEB-INF/classes that reflects the class package. For example, the class HelloWorld.class , in package com.ibm.wps.samples , would be stored in /WEB-INF/classes/com/ibm/wps/samples/HelloWorld.class . /META-INF Location for the manifest file, manifest.mf , and the Java 2 security file, was.policy (if present). The manifest is in the standard JAR file format as defined by the Java 1.3 specification. The Java 2 security policy file is used to allow a portlet to execute operations that might be restricted if Java 2 security is enabled. The contents of the /META-INF directory is not served to clients. Note: The application server searches for security policy files in the location of the enterprise application archive rather than the web application archive. Therefore, the portal server copies was.policy from the appname.war/META-INF directory to the generated appname.ear/META-INF directory during deployment of a portlet WAR file.","title":"Setting up the WAR file directory structure"},{"location":"dev-portlet/wpsbscfg/#packaging-and-deploying-portlets","text":"To deploy a portlet and run it on the server, it must be packaged in the form of a Web application ARchive or WAR file. The WAR file format contains the Java classes and resources that make up one or more portlets in a portlet application. The resources can be images, JSP files, writing the portlet descriptions, and property files that contain translated message text. Packaging portlet classes, resources, and descriptive information in a single file makes distribution and deployment of portlets easier. Documentation resource: Writing the portlet descriptions: HCL Portal 8.0 Product Documentation HCL DX includes an administrative portlet for installing, uninstalling, and updating portlets. Portlets that are contained in WAR files have the advantage of being dynamically downloaded and installed. The portal administrator can download a WAR file from the Internet and then use the portal administration interface to install the portlet to HCL DX. After installation, the portlet is ready for use and does not require the server to be restarted. To package your portlet in a WAR file, you can use the JAR file utility to package the portlet into a WAR file. Documentation source: Packaging the portlet into a WAR file: HCL Portal 8.0 Product Documentation Note: Because Windows limits the maximum path length to 260 characters, the name of the WAR file must be fewer than 25 characters. On a portal server running on Windows, installing a WAR file with a name that is more than 25 characters results in an error. Tip: You can also run the build-war-file or build-ear-file tasks to build the .war and .ear files. See the \"Building .ear and .war files\" link in the Related task section for information. Packaging a portlet and resources into a WAR file Any JAR file utility can be used to build a WAR file. The following are examples of how to use the JAR file utility that is provided by WebSphere\u00ae Application Server. To create a WAR file with the name HelloWorld.war and include all of the files in the /WEB-INF and /images directories: ```xmp jar -cf HelloWorld.war images WEB-INF ``` To update an existing WAR file, HelloWorld.war with a revised portlet descriptor: ```xmp jar -uf HelloWorld.war WEB-INF/portlet.xml ``` To extract the portlet descriptor from the WAR file, HelloWorld.war : ```xmp jar -xf HelloWorld.war WEB-INF/portlet.xml ``` To extract all files from an existing WAR file, HelloWorld.war : ```xmp jar -xf HelloWorld.war ``` After the WAR file is created, it can be installed to HCL DX as described in Portal administration portlets . Preparing the portlet application for installation To facilitate deployment of portlet applications and complex portlets, you can provide a portlet configuration file that can be invoked by the XML configuration interface (XMLAccess). The XML configuration interface allows the portlet developer to specify places, pages, themes, skins, supported markups and clients, and other settings for a portlet application. This is especially useful for portlets that use messaging because these portlets must be placed on the same page. For more information, see The XML configuration interface . When you construct XMLAccess scripts for use in installing standard portlets, use the following values: uid attribute for the <web-app> element: Use the uid attribute of the <portlet-app/> subelement with a .webmod suffix. As described later in this topic, the uid attribute of the <portlet-app/> subelement is dependent on the presence of the id attribute of the <portlet-app/> element from the portlet.xml. uid attribute for the <portlet-app> element: Use the id attribute of the <portlet-app/> element from the portlet.xml. If this value has not been specified, specify the WAR file name of the portlet application in its place. For portlet updates, the WAR file name must be the original name of the WAR file used to install the portlet application. That is, the WAR file name can be changed, but the uid must indicate the original uid used during portlet installation. name attribute for the <portlet> element: Use the content of the <portlet-name/> element from the portlet.xml. referenceid attribute of the <servlet> element: Use the content of the <portlet-name/> element from the portlet.xml appended with the .servlet suffix. For example, a portlet application might use a portlet descriptor: ```xmp Banner Ad ... ``` In this example, there is no ID attribute that is provided on the <portlet-app/> element. Therefore, the <portlet-app/> element of the XMLAccess script would use the WAR file name: ```xmp file:///$server_root$/bp/wp.bp.bannerad/installableApps/bannerad.war ```","title":"Packaging and deploying portlets"},{"location":"dev-portlet/wpsbsoutput/","text":"Generating output View how portlets use JSPs to generate markup, create URLs to portlet resources, support multiple devices, markups, and languages in portlets, and make use of JSTL. In the previous example, the Hello World portlet provided markup by using a Java PrintWriter. However, most portlets generate output using JSPs. One exception to this is when the portlet has to transform XML source. In this case, the portlet can use XSLT to generate markup. Using JSPs to generate markup To separate portlet output from the main functionality of the portlet, use a JSP. The following code sample is the JSP for the view page of the jsrHelloJSP.war sample. All sample portlets are available from the portlet catalog by searching for navcode 1WP10017Z. See Sample portlets for more information. <%@ taglib uri=\"http://java.sun.com/portlet\" prefix=\"portletAPI\" %> <%@ page session=\"false\"%> <p class=\"portlet-font\">Hello JSP!</p> Separate JSPs would exist to provide the user interface for supporting any additional portlet modes, such as edit or help. The basic portlet wizard in Rational Application Developer allows you to create a portlet that provides JSPs for some of the other modes in which the portlet can be invoked. The following shows the doView() method provided in the jsrHelloJSP sample. package com.ibm.wps.samples.jsr; import javax.portlet.*; import java.io.*; public class HelloJSP extends GenericPortlet { public void init(PortletConfig portletConfig) throws UnavailableException, PortletException { super.init(portletConfig); } public void doView(RenderRequest request, RenderResponse response) throws PortletException, IOException { // set return content type response.setContentType(\"text/html\"); PortletContext context = getPortletConfig().getPortletContext(); context.getRequestDispatcher(\"/jsp/View.jsp\").include( request, response); } } There are several points to keep in mind when writing your JSPs: For consistency in portal look and feel, use the portlet's class specifications in the JSR 168/JSR 286 specification. Be sure to include the appropriate tag library to obtain the needed functionality in your JSPs. Become familiar with the guidelines and best practices for portlet markup. For example, all named elements must be namespace-encoded, using the <portletAPI:encodeNamespace> tag, to avoid clashes with other named elements on the portal page. Portlet JSPs cannot link directly to resources within the portlet's WAR directory structure. Creating URLs to portlet resources Portlet JSPs cannot link directly to content (for example, images, applets, other JSPs, or other resources) within the portlet's WAR directory structure. Instead, they have to use the services of the portlet container to create portlet URLs from which the content can be accessed. Use the encodeURL() method of the PortletResponse to access content within the portlet WAR structure. The following examples are used in the View World portlet samples. ibmViewWorld.war ```xmp <img src='<%=portletResponse.encodeURL(\"images/earth.jpg\")%>' alt=\"Earth\" /> ``` jsrViewWorld.war For standard portlets, you also have to add the context path of the portlet from the request: ```xmp <img src='<%=renderResponse.encodeURL(renderRequest.getContextPath() + \"/images/earth.jpg\")%>' alt=\"Earth\" /> ``` The String returned by the encodeURL() method returns the relative URL of the content, without the host name and domain information. Multimedia example The following example shows how an audio file can be included in a JSP for a standard portlet. ```xmp <object classid='<%=renderResponse.encodeURL(renderRequest.getContextPath() + \"/audio/WakeUpSong.mp3\")%>' type=\"audio/wav\" width=\"300\" height=\"18\"> ``` Applet example The following example shows how an applet can be included in an IBM portlet JSP. ```xmp <applet codebase='<%=response.encodeURL(\"applet\")%>' code=\"MyApplet.class\" width=\"150\" height=\"150\"> ``` Using JSTL in portlet JSPs The following example shows how to use JSTL to retrieve translated Strings from a resource bundle in your JSPs. The JSTL tag library is included at the beginning of the JSP. The <fmt:setBundle/> tag indicates the resource bundle to use. The <fmt:message/> tag indicates the key to look for in the resource bundle. For the image source, the encodeURL() method is used in a Java scriptlet. <%@ taglib prefix=\"fmt\" uri=\"http://java.sun.com/jstl/fmt\" %> ... <fmt:setBundle basename=\"nls.reminder\"/> ... <img border='0' src='<%=response.encodeURL(\"task_add.gif\")%>' title='<fmt:message key=\"add_reminder\"/>' alt='<fmt:message key=\"add_reminder\"/>'/> The JARs required to implement JSTL tags are included with the portal server. You should not package these JARs in your portlet's WAR file. Related information JSP tags for standard portlets","title":"Generating output"},{"location":"dev-portlet/wpsbsoutput/#generating-output","text":"View how portlets use JSPs to generate markup, create URLs to portlet resources, support multiple devices, markups, and languages in portlets, and make use of JSTL. In the previous example, the Hello World portlet provided markup by using a Java PrintWriter. However, most portlets generate output using JSPs. One exception to this is when the portlet has to transform XML source. In this case, the portlet can use XSLT to generate markup.","title":"Generating output"},{"location":"dev-portlet/wpsbsoutput/#using-jsps-to-generate-markup","text":"To separate portlet output from the main functionality of the portlet, use a JSP. The following code sample is the JSP for the view page of the jsrHelloJSP.war sample. All sample portlets are available from the portlet catalog by searching for navcode 1WP10017Z. See Sample portlets for more information. <%@ taglib uri=\"http://java.sun.com/portlet\" prefix=\"portletAPI\" %> <%@ page session=\"false\"%> <p class=\"portlet-font\">Hello JSP!</p> Separate JSPs would exist to provide the user interface for supporting any additional portlet modes, such as edit or help. The basic portlet wizard in Rational Application Developer allows you to create a portlet that provides JSPs for some of the other modes in which the portlet can be invoked. The following shows the doView() method provided in the jsrHelloJSP sample. package com.ibm.wps.samples.jsr; import javax.portlet.*; import java.io.*; public class HelloJSP extends GenericPortlet { public void init(PortletConfig portletConfig) throws UnavailableException, PortletException { super.init(portletConfig); } public void doView(RenderRequest request, RenderResponse response) throws PortletException, IOException { // set return content type response.setContentType(\"text/html\"); PortletContext context = getPortletConfig().getPortletContext(); context.getRequestDispatcher(\"/jsp/View.jsp\").include( request, response); } } There are several points to keep in mind when writing your JSPs: For consistency in portal look and feel, use the portlet's class specifications in the JSR 168/JSR 286 specification. Be sure to include the appropriate tag library to obtain the needed functionality in your JSPs. Become familiar with the guidelines and best practices for portlet markup. For example, all named elements must be namespace-encoded, using the <portletAPI:encodeNamespace> tag, to avoid clashes with other named elements on the portal page. Portlet JSPs cannot link directly to resources within the portlet's WAR directory structure.","title":"Using JSPs to generate markup"},{"location":"dev-portlet/wpsbsoutput/#creating-urls-to-portlet-resources","text":"Portlet JSPs cannot link directly to content (for example, images, applets, other JSPs, or other resources) within the portlet's WAR directory structure. Instead, they have to use the services of the portlet container to create portlet URLs from which the content can be accessed. Use the encodeURL() method of the PortletResponse to access content within the portlet WAR structure. The following examples are used in the View World portlet samples. ibmViewWorld.war ```xmp <img src='<%=portletResponse.encodeURL(\"images/earth.jpg\")%>' alt=\"Earth\" /> ``` jsrViewWorld.war For standard portlets, you also have to add the context path of the portlet from the request: ```xmp <img src='<%=renderResponse.encodeURL(renderRequest.getContextPath() + \"/images/earth.jpg\")%>' alt=\"Earth\" /> ``` The String returned by the encodeURL() method returns the relative URL of the content, without the host name and domain information. Multimedia example The following example shows how an audio file can be included in a JSP for a standard portlet. ```xmp <object classid='<%=renderResponse.encodeURL(renderRequest.getContextPath() + \"/audio/WakeUpSong.mp3\")%>' type=\"audio/wav\" width=\"300\" height=\"18\"> ``` Applet example The following example shows how an applet can be included in an IBM portlet JSP. ```xmp <applet codebase='<%=response.encodeURL(\"applet\")%>' code=\"MyApplet.class\" width=\"150\" height=\"150\"> ```","title":"Creating URLs to portlet resources"},{"location":"dev-portlet/wpsbsoutput/#using-jstl-in-portlet-jsps","text":"The following example shows how to use JSTL to retrieve translated Strings from a resource bundle in your JSPs. The JSTL tag library is included at the beginning of the JSP. The <fmt:setBundle/> tag indicates the resource bundle to use. The <fmt:message/> tag indicates the key to look for in the resource bundle. For the image source, the encodeURL() method is used in a Java scriptlet. <%@ taglib prefix=\"fmt\" uri=\"http://java.sun.com/jstl/fmt\" %> ... <fmt:setBundle basename=\"nls.reminder\"/> ... <img border='0' src='<%=response.encodeURL(\"task_add.gif\")%>' title='<fmt:message key=\"add_reminder\"/>' alt='<fmt:message key=\"add_reminder\"/>'/> The JARs required to implement JSTL tags are included with the portal server. You should not package these JARs in your portlet's WAR file. Related information JSP tags for standard portlets","title":"Using JSTL in portlet JSPs"},{"location":"dev-theme/theme_editor_portlet/","text":"Theme Editor Portlet The Theme Editor portlet is a new addition to HCL Digital Experience Container Update CF193 and on-permises CF196 and later release capabilities. The portlet allows an administrator to edit static theme resources in WebDAV without the use of a WebDAV client or tool. WebDAV is a server that allows remote content to be edited and read. HCL Digital Experience stores the static resources (HTML, CSS, JavaScript, etc.) for the HCL Digital Experience Portal 8.5 theme and the Simple theme in WebDAV. In addition, any themes created based on these themes will have their static content in WebDAV. For that reason, it is advantageous to have the ability to directly edit the static theme resources without having to be concerned about synchronizing them with a local development environment. Availability and previous editions of the Theme Editor portlet Prior to the integration of the portlet into HCL Digital Experience CF193 and later releases, the Theme Editor portlet was available from IBM business applications catalogs, which required customers to download and install the portlet. Beginning with HCL Digital Experience CF193 and later versions, the portlet will is available with the software release. If a customer is currently using an earlier version of the Theme Editor portlet from the IBM catalog, it will remain deployed as is and will not be impacted by the application added in later versions. Portlet overview The Theme Editor portlet is accessed from the Theme Manager portlet in the HCL Digital Experience 8.5, 9 or 9.5 environments. In the 8.5 and 9 environments, the Theme Manager is located under the Applications menu under Theme Development. In the HCL DX V9.5 environment the Theme Manager is located in Practitioner Studio under Themes . The Theme Editor portlet can be found from the Theme Manager portlet by clicking the Edit (pencil) icon next to the associated theme, as shown in the screenshot example below: If the user clicks the pencil icon, they will be taken to the Theme Editor portlet and given the ability to edit the theme static resources. Using the same example above, if the user clicks the pencil icon, the user will be directed to the Theme Editor page where the portlet displays the name of the theme (in this case the Portal 8.5 theme), the date indicating the last time the theme resources were changed, along with the static theme resource folders. If the user creates a custom theme, the portlet will display that theme. As shown in the example below, markup has been added to the theme.html file in the CustomTheme . The buttons on the top left are now active to either Save , Revert or Replace . If the user saves the file, the added markup will display in the theme when the theme is placed on a page. Limitations The Theme Editor portlet does not support creating files and folders in the static content. EAR-based themes are displayed in the Theme Manager portlet. However, the static content for EAR-based themes is not stored in WebDAV. If the user clicks the Edit (pencil) icon on an EAR-based theme, the portlet will render but no editable content will display. If the user chooses to edit an uncompressed file (CSS or JavaScript), the HCL DX server must be in development mode (i.e. Remote debugging must be turned on in the Theme Analyzer portlet) in order for the changes to display. If the Theme Editor portlet already resides on the system and CF196 is applied and then rolled back, the portlet will need to be reinstalled.","title":"Theme Editor Portlet"},{"location":"dev-theme/theme_editor_portlet/#theme-editor-portlet","text":"The Theme Editor portlet is a new addition to HCL Digital Experience Container Update CF193 and on-permises CF196 and later release capabilities. The portlet allows an administrator to edit static theme resources in WebDAV without the use of a WebDAV client or tool. WebDAV is a server that allows remote content to be edited and read. HCL Digital Experience stores the static resources (HTML, CSS, JavaScript, etc.) for the HCL Digital Experience Portal 8.5 theme and the Simple theme in WebDAV. In addition, any themes created based on these themes will have their static content in WebDAV. For that reason, it is advantageous to have the ability to directly edit the static theme resources without having to be concerned about synchronizing them with a local development environment.","title":"Theme Editor Portlet"},{"location":"dev-theme/theme_editor_portlet/#availability-and-previous-editions-of-the-theme-editor-portlet","text":"Prior to the integration of the portlet into HCL Digital Experience CF193 and later releases, the Theme Editor portlet was available from IBM business applications catalogs, which required customers to download and install the portlet. Beginning with HCL Digital Experience CF193 and later versions, the portlet will is available with the software release. If a customer is currently using an earlier version of the Theme Editor portlet from the IBM catalog, it will remain deployed as is and will not be impacted by the application added in later versions.","title":"Availability and previous editions of the Theme Editor portlet"},{"location":"dev-theme/theme_editor_portlet/#portlet-overview","text":"The Theme Editor portlet is accessed from the Theme Manager portlet in the HCL Digital Experience 8.5, 9 or 9.5 environments. In the 8.5 and 9 environments, the Theme Manager is located under the Applications menu under Theme Development. In the HCL DX V9.5 environment the Theme Manager is located in Practitioner Studio under Themes . The Theme Editor portlet can be found from the Theme Manager portlet by clicking the Edit (pencil) icon next to the associated theme, as shown in the screenshot example below: If the user clicks the pencil icon, they will be taken to the Theme Editor portlet and given the ability to edit the theme static resources. Using the same example above, if the user clicks the pencil icon, the user will be directed to the Theme Editor page where the portlet displays the name of the theme (in this case the Portal 8.5 theme), the date indicating the last time the theme resources were changed, along with the static theme resource folders. If the user creates a custom theme, the portlet will display that theme. As shown in the example below, markup has been added to the theme.html file in the CustomTheme . The buttons on the top left are now active to either Save , Revert or Replace . If the user saves the file, the added markup will display in the theme when the theme is placed on a page.","title":"Portlet overview"},{"location":"dev-theme/theme_editor_portlet/#limitations","text":"The Theme Editor portlet does not support creating files and folders in the static content. EAR-based themes are displayed in the Theme Manager portlet. However, the static content for EAR-based themes is not stored in WebDAV. If the user clicks the Edit (pencil) icon on an EAR-based theme, the portlet will render but no editable content will display. If the user chooses to edit an uncompressed file (CSS or JavaScript), the HCL DX server must be in development mode (i.e. Remote debugging must be turned on in the Theme Analyzer portlet) in order for the changes to display. If the Theme Editor portlet already resides on the system and CF196 is applied and then rolled back, the portlet will need to be reinstalled.","title":"Limitations"},{"location":"dev-theme/themeopt_defaultparts/","text":"Understanding the Portal 8.5 modularized theme Modern websites and browsers enable incredible new capabilities that can greatly enhance your user's web experiences. However, these capabilities are not without cost in terms of large page sizes and more processing in the browser when each page is rendered. These capabilities are worth it when you need them, but removing them for an entire site or including them only on pages that take advantage of these capabilities provides for more flexibility. The new modularized theme provides a flexible framework that: Minimizes download size by giving you the control to specify just the capabilities that are needed for a certain scenario or use case. Minimizes the number of requests by combining necessary resources. Previous themes required a monolithic design and that the same content was downloaded for every page. Theme optimization allows the theme to be highly adaptive to the content you are displaying on certain pages. For example, on pages where only simple content is displayed you can define a lightweight profile. A lightweight profile causes the system to download few static resources such as JavaScript\u2122 and CSS files. However, on pages where more advanced scenarios are required you can choose to switch to a more powerful profile that causes more resources to download than on the other pages. This way you have only the capabilities you need on certain pages, but all other pages do not pay the penalty. As a result the overall system performance increases significantly. Theme optimization uses modules and profiles to achieve the flexibility that allows you to achieve better performance. Modules are the components of the new theme that define capabilities. Examples are Tagging&Rating, Dojo, or jQuery. Profiles define sets of modules which can be assigned per page. A default profile is used if no page-specific profile is defined. By applying these concepts it is possible to turn on and off an arbitrary number of features for certain pages, develop modules independent of each other for greater development speed and flexibility, easily add new capabilities later on into an existing theme and build an altogether new theme with the existing one. This building block concept allows the new theme to work side by side through self contained modules without impacting the existing theme. The Portal 8.5 theme contains three types of files: JavaScript, dynamic content (JSP files) and static resources.","title":"Understanding the Portal 8.5 modularized theme"},{"location":"dev-theme/themeopt_defaultparts/#understanding-the-portal-85-modularized-theme","text":"Modern websites and browsers enable incredible new capabilities that can greatly enhance your user's web experiences. However, these capabilities are not without cost in terms of large page sizes and more processing in the browser when each page is rendered. These capabilities are worth it when you need them, but removing them for an entire site or including them only on pages that take advantage of these capabilities provides for more flexibility. The new modularized theme provides a flexible framework that: Minimizes download size by giving you the control to specify just the capabilities that are needed for a certain scenario or use case. Minimizes the number of requests by combining necessary resources. Previous themes required a monolithic design and that the same content was downloaded for every page. Theme optimization allows the theme to be highly adaptive to the content you are displaying on certain pages. For example, on pages where only simple content is displayed you can define a lightweight profile. A lightweight profile causes the system to download few static resources such as JavaScript\u2122 and CSS files. However, on pages where more advanced scenarios are required you can choose to switch to a more powerful profile that causes more resources to download than on the other pages. This way you have only the capabilities you need on certain pages, but all other pages do not pay the penalty. As a result the overall system performance increases significantly. Theme optimization uses modules and profiles to achieve the flexibility that allows you to achieve better performance. Modules are the components of the new theme that define capabilities. Examples are Tagging&Rating, Dojo, or jQuery. Profiles define sets of modules which can be assigned per page. A default profile is used if no page-specific profile is defined. By applying these concepts it is possible to turn on and off an arbitrary number of features for certain pages, develop modules independent of each other for greater development speed and flexibility, easily add new capabilities later on into an existing theme and build an altogether new theme with the existing one. This building block concept allows the new theme to work side by side through self contained modules without impacting the existing theme. The Portal 8.5 theme contains three types of files: JavaScript, dynamic content (JSP files) and static resources.","title":"Understanding the Portal 8.5 modularized theme"},{"location":"dev-theme/themeopt_move_expfilestore/","text":"Exporting content from the filestore You must export content from the filestore to create your custom theme. There are different options available to export files from the portal file store. Exporting content from the filestore is required in different scenarios, however with different files to be exported. See the concrete scenario description for the detailed list of files to export. You can access the filestore by using the following URL: http://<server>:<port>/wps/mycontenthandler/dav/fs-type1/ Use one of the following options to export the files stored there. Get a compressed file using your browser You can obtain a compressed file of the content in the filestore using your browser. Enter the following url in your browser: http://<server>:<port>/wps/mycontenthandler/dav/fs-type1/<folder-name>/?mime-type=application/zip Where: The <server> value is the host name of the portal. The <port> value is the port number for HCL Portal. The <folder-name> value is the folder to be compressed. This value is optional. Note: A / must follow the folder name. The URL triggers a download of a compressed file. If you are prompted for a user and password enter the admin user ID and password for HCL Portal. Store the file on the local file system. This following url downloads the complete content of the filestore: http://<server>:<port>/wps/mycontenthandler/dav/fs-type1/<folder-name>/?mime-type=application/zip The following url downloads the content of the themes folder: http://<server>:<port>/wps/mycontenthandler/dav/fs-type1/themes/?mime-type=application/zip Automate the export using an Ant task If you want to automate the export, you can write an Ant task as depicted in the following example: <target name=\"export-mytheme\"> <get src=\"http://<server>:<port>/wps/mycontenthandler/dav/fs-type1/<folder-name>/?mime-type=application/zip\" username=\"PortalAdminID\" password=\"PortalAdminPwd\" dest=\"/tmp/mytheme.zip\" /> </target> Where: The <server> value is the host name of the portal. The <port> value is the port number for HCL Portal. The <folder-name> value is the folder to be compressed. This value is optional. Note: A / must follow the folder name. Use WebDAV to connect to the filestore Use a WebDav Client to connect to the filestore using the following url: http://<server>:<port>/wps/mycontenthandler/dav/fs-type1/ Browse to the folder you need and copy the files to your local drive.","title":"Exporting content from the filestore"},{"location":"dev-theme/themeopt_move_expfilestore/#exporting-content-from-the-filestore","text":"You must export content from the filestore to create your custom theme. There are different options available to export files from the portal file store. Exporting content from the filestore is required in different scenarios, however with different files to be exported. See the concrete scenario description for the detailed list of files to export. You can access the filestore by using the following URL: http://<server>:<port>/wps/mycontenthandler/dav/fs-type1/ Use one of the following options to export the files stored there.","title":"Exporting content from the filestore"},{"location":"dev-theme/themeopt_move_expfilestore/#get-a-compressed-file-using-your-browser","text":"You can obtain a compressed file of the content in the filestore using your browser. Enter the following url in your browser: http://<server>:<port>/wps/mycontenthandler/dav/fs-type1/<folder-name>/?mime-type=application/zip Where: The <server> value is the host name of the portal. The <port> value is the port number for HCL Portal. The <folder-name> value is the folder to be compressed. This value is optional. Note: A / must follow the folder name. The URL triggers a download of a compressed file. If you are prompted for a user and password enter the admin user ID and password for HCL Portal. Store the file on the local file system. This following url downloads the complete content of the filestore: http://<server>:<port>/wps/mycontenthandler/dav/fs-type1/<folder-name>/?mime-type=application/zip The following url downloads the content of the themes folder: http://<server>:<port>/wps/mycontenthandler/dav/fs-type1/themes/?mime-type=application/zip","title":"Get a compressed file using your browser"},{"location":"dev-theme/themeopt_move_expfilestore/#automate-the-export-using-an-ant-task","text":"If you want to automate the export, you can write an Ant task as depicted in the following example: <target name=\"export-mytheme\"> <get src=\"http://<server>:<port>/wps/mycontenthandler/dav/fs-type1/<folder-name>/?mime-type=application/zip\" username=\"PortalAdminID\" password=\"PortalAdminPwd\" dest=\"/tmp/mytheme.zip\" /> </target> Where: The <server> value is the host name of the portal. The <port> value is the port number for HCL Portal. The <folder-name> value is the folder to be compressed. This value is optional. Note: A / must follow the folder name.","title":"Automate the export using an Ant task"},{"location":"dev-theme/themeopt_move_expfilestore/#use-webdav-to-connect-to-the-filestore","text":"Use a WebDav Client to connect to the filestore using the following url: http://<server>:<port>/wps/mycontenthandler/dav/fs-type1/ Browse to the folder you need and copy the files to your local drive.","title":"Use WebDAV to connect to the filestore"},{"location":"dev-theme/themeopt_themedev_manager/","text":"Theme Manager Use the Theme Manager portlet to create new themes from templates, edit existing themes, and copy, export, or delete themes with one click. You can find the Theme Manager by clicking Applications menu > Theme Development in your portal. From Theme Development, you can access two tools: Theme Manager and Theme Analyzer. Creating new themes You can quickly create a new theme that is based on a template when you click the Create Theme icon. To create a new theme, you enter a new theme title and an optional theme description. A theme template is selected for you, or you can select another template. Searching for existing themes The list of themes in the Theme Manager can be filtered by selecting an attribute from the Show menu or by entering text in the search box. The search results display only the theme titles and descriptions that match your search criteria. The Show menu includes the following attributes: Active Displays all themes that are active and not hidden. All Displays all existing themes. Hidden Displays all themes that are designated as hidden. Inactive Displays all inactive themes. Templates Displays all themes that are designated as templates. Editing existing themes When you search for existing themes, the search results display in the Theme Manager. You can edit themes from the Theme Manager by using the following options: Manage Theme Properties View and change all of the properties of a theme, such as the title and the description. Copy Create a copy of the selected theme. Export Export the selected theme as a PAA file so that you can install it on another machine. Delete Delete the selected theme. Note: Themes that are necessary for system stability cannot be deleted.","title":"Theme Manager"},{"location":"dev-theme/themeopt_themedev_manager/#theme-manager","text":"Use the Theme Manager portlet to create new themes from templates, edit existing themes, and copy, export, or delete themes with one click. You can find the Theme Manager by clicking Applications menu > Theme Development in your portal. From Theme Development, you can access two tools: Theme Manager and Theme Analyzer.","title":"Theme Manager"},{"location":"dev-theme/themeopt_themedev_manager/#creating-new-themes","text":"You can quickly create a new theme that is based on a template when you click the Create Theme icon. To create a new theme, you enter a new theme title and an optional theme description. A theme template is selected for you, or you can select another template.","title":"Creating new themes"},{"location":"dev-theme/themeopt_themedev_manager/#searching-for-existing-themes","text":"The list of themes in the Theme Manager can be filtered by selecting an attribute from the Show menu or by entering text in the search box. The search results display only the theme titles and descriptions that match your search criteria. The Show menu includes the following attributes: Active Displays all themes that are active and not hidden. All Displays all existing themes. Hidden Displays all themes that are designated as hidden. Inactive Displays all inactive themes. Templates Displays all themes that are designated as templates.","title":"Searching for existing themes"},{"location":"dev-theme/themeopt_themedev_manager/#editing-existing-themes","text":"When you search for existing themes, the search results display in the Theme Manager. You can edit themes from the Theme Manager by using the following options: Manage Theme Properties View and change all of the properties of a theme, such as the title and the description. Copy Create a copy of the selected theme. Export Export the selected theme as a PAA file so that you can install it on another machine. Delete Delete the selected theme. Note: Themes that are necessary for system stability cannot be deleted.","title":"Editing existing themes"},{"location":"dev-theme/themeopt_themedev_manual_warbased/","text":"Creating a WAR-based theme copy With a WAR-based theme, you deploy both static and dynamic content as an EAR file. You can easily deploy your theme to your Portal server when your static and dynamic contents are contained in a single EAR file. Use this option when your theme is ready for production. Note: When you update any theme content, you must update the WAR file and redeploy it to the server. Video: Create a WAR-based theme copy on HCL Digital Experience 9.5","title":"Creating a WAR-based theme copy"},{"location":"dev-theme/themeopt_themedev_manual_warbased/#creating-a-war-based-theme-copy","text":"With a WAR-based theme, you deploy both static and dynamic content as an EAR file. You can easily deploy your theme to your Portal server when your static and dynamic contents are contained in a single EAR file. Use this option when your theme is ready for production. Note: When you update any theme content, you must update the WAR file and redeploy it to the server. Video: Create a WAR-based theme copy on HCL Digital Experience 9.5","title":"Creating a WAR-based theme copy"},{"location":"dev-theme/themeopt_themedev_manual_webdav/","text":"Creating a WebDAV-based theme copy With a WebDAV-based theme, static theme content is deployed through WebDAV. Use this option if your theme developers update static theme content by using WebDAV. Video: Create a WebDAV theme copy using HCL Digital Experience 9.5","title":"Creating a WebDAV-based theme copy"},{"location":"dev-theme/themeopt_themedev_manual_webdav/#creating-a-webdav-based-theme-copy","text":"With a WebDAV-based theme, static theme content is deployed through WebDAV. Use this option if your theme developers update static theme content by using WebDAV. Video: Create a WebDAV theme copy using HCL Digital Experience 9.5","title":"Creating a WebDAV-based theme copy"},{"location":"docker_o/docker/","text":"Docker image list This section presents the latest HCL DX 9.5 Docker container update images available. Docker container update file list The HCL DX 9.5 container update releases may be obtained from your HCL Digital Experience entitlements in the HCL Software License Portal , in the HCL_Portal_8.5_9.0_9.5_CFs download package entry. Video: How to upload HCL Digital Experience 9.5 CF container images to a private repository HCL DX 9.5 CF201 Container Update CF201 If deploying the HCL DX 9.5 CF201 release, the package name and images are as follows: HCL DX 9.5 CF201 DXClient files : ``` hcl-dxclient-image-v95_CF201_20220207-1614.zip - ``` hcl-dxclient-v95_CF201_20220207-1613.zip **HCL DX 9.5 CF\\_201-hcl-dx-kubernetes-v95-CF201.zip**: - ``` HCL DX notices V9.5 CF201.txt - ``` hcl-dx-ambassador-image-1142.tar.gz - ``` hcl-dx-content-composer-image-v1.14.0_20220207-1550.tar.gz - ``` hcl-dx-core-image-v95_CF201_20220206-1331.tar.gz - ``` hcl-dx-deployment-v2.4.0_20220207-1606.tgz - ``` hcl-dx-design-studio-image-v0.7.0_20220207-1549.tar.gz - ``` hcl-dx-digital-asset-manager-image-v1.13.0_20220207-1609.tar.gz - ``` hcl-dx-experience-api-sample-ui-v0.2.0.20220207-1549.zip - ``` hcl-dx-image-processor-image-v1.14.0_20220207-1606.tar.gz - ``` hcl-dx-openldap-image-v1.2.0_20220207-1556.tar.gz - ``` hcl-dx-persistence-connection-pool-image-v1.14.0_20220207-1612.tar.gz - ``` hcl-dx-persistence-image-v1.14.0_20220207-1611.tar.gz - ``` hcl-dx-persistence-metrics-exporter-image-v1.12.0_20220207-1611.tar.gz - ``` hcl-dx-persistence-node-image-v1.4_20220207-1549.tar.gz - ``` hcl-dx-redis-image-5.0.14.tar.gz - ``` hcl-dx-remote-search-image-v95_CF201_20220206-1331.tar.gz - ``` hcl-dx-ringapi-image-v1.14.0_20220207-1554.tar.gz - ``` hcl-dx-runtime-controller-image-v95_CF201_20220207-1558.tar.gz - ``` hcl-dx-sidecar-image-v1.0.0_8.4-205.tar.gz ## HCL DX 9.5 CF200 - **Container Update CF200** If deploying the HCL DX 9.5 CF200 release, the package name and images are as follows: **HCL DX 9.5 CF200 DXClient files**: - ``` hcl-dxclient-image-v95_CF200_20211213-1500.zip - ``` hcl-dxclient-v95_CF200_20211213-1459.zip **HCL DX 9.5 CF\\_200-hcl-dx-kubernetes-v95-CF200.zip** **Important:** With the Operator-based deployment being removed starting in HCL DX Container Update 9.5 CF200, you will find some changes in the list of files and their names in CF199 and later releases. For more information, see [List of image files and changes from CF198 and later](#simpletable_cst_4lf_yrb). - ``` HCL DX notices V9.5 CF200.txt - ``` hcl-dx-ambassador-image-1142.tar.gz - ``` hcl-dx-content-composer-image-v1.13.0_20211213-1443.tar.gz - ``` hcl-dx-core-image-v95_CF200_20211213-1442.tar.gz - ``` hcl-dx-deployment-v2.2.0_20211213-1446.tgz - ``` hcl-dx-design-studio-image-v0.6.0_20211213-1448.tar.gz - ``` hcl-dx-digital-asset-manager-image-v1.12.0_20211213-1448.tar.gz - ``` hcl-dx-experience-api-sample-ui-v0.2.0.20211213-1454.zip - ``` hcl-dx-image-processor-image-v1.13.0_20211213-1446.tar.gz - ``` hcl-dx-openldap-image-v1.2.0_20211213-1444.tar.gz - ``` hcl-dx-persistence-connection-pool-image-v1.13.0_20211213-1457.tar.gz - ``` hcl-dx-persistence-image-v1.13.0_20211213-1457.tar.gz - ``` hcl-dx-persistence-metrics-exporter-image-v1.11.0_20211213-1458.tar.gz - ``` hcl-dx-persistence-node-image-v1.3_20211213-1454.tar.gz - ``` hcl-dx-redis-image-5.0.14.tar.gz - ``` hcl-dx-remote-search-image-v95_CF200_20211213-1442.tar.gz - ``` hcl-dx-ringapi-image-v1.13.0_20211213-1457.tar.gz - ``` hcl-dx-runtime-controller-image-v95_CF200_20211213-1444.tar.gz - ``` hcl-dx-sidecar-image-v1.0.0_8.4-205.tar.gz HCL DX 9.5 CF199 Container Update CF199 If deploying the HCL DX 9.5 CF199 release, the package name and images are as follows: HCL DX 9.5 CF199 DXClient files : ``` hcl-dxclient-image-v95_CF199_20211029-1357.zip - ``` hcl-dxclient-v95_CF199_20211029-1357.zip **HCL DX 9.5 CF\\_199-hcl-dx-kubernetes-v95-CF199.zip** - ``` HCL DX notices V9.5 CF199.txt - ``` hcl-dx-ambassador-image-154.tar.gz - ``` hcl-dx-cloud-operator-image-v95_CF199_20211029-1700.tar.gz - ``` hcl-dx-cloud-scripts-v95_CF199_20211029-1700.zip - ``` hcl-dx-content-composer-image-v1.12.0_20211029-1341.tar.gz - ``` hcl-dx-core-image-v95_CF199_20211029-1348.tar.gz - ``` hcl-dx-deployment-v2.1.0_20211029-1346.tgz - ``` hcl-dx-design-studio-image-v0.5.0_20211029-0013.tar.gz - ``` hcl-dx-digital-asset-management-operator-image-v95_CF199_20211029-1342.tar.gz - ``` hcl-dx-digital-asset-manager-image-v1.11.0_20211029-1350.tar.gz - ``` hcl-dx-experience-api-sample-ui-v0.2.0.20211029-1354.zip - ``` hcl-dx-image-processor-image-v1.12.0_20211029-1346.tar.gz - ``` hcl-dx-openldap-image-v1.2.0_20211029-1342.tar.gz - ``` hcl-dx-persistence-connection-pool-image-v1.11.0_20211029-0224.tar.gz - ``` hcl-dx-persistence-image-v1.11.0_20211029-1349.tar.gz - ``` hcl-dx-persistence-metrics-exporter-image-v1.10.0_20211029-1352.tar.gz - ``` hcl-dx-persistence-node-image-v1.1_20211029-0148.tar.gz - ``` hcl-dx-redis-image-5.0.1.tar.gz - ``` hcl-dx-remote-search-image-v95_CF199_20211029-1348.tar.gz - ``` hcl-dx-ringapi-image-v1.12.0_20211029-1357.tar.gz - ``` hcl-dx-runtime-controller-image-v95_CF199_20211029-1344.tar.gz - ``` hcl-dx-sidecar-image-v1.0.0_8.4-205.tar.gz Important: With the Operator-based deployment being deprecated in CF198 and planned to be removed in HCL DX Container Update 9.5 CF200, you will find some changes in the list of files and their names in CF199 and later releases. Component Image name CF198 CF199 DX Core hcl-dx-core-image-vx.x.x_xxxxxxxx-xxxx.tar.gz hcl-dx-core-image-v95_CF198_20210917-1438.tar.gz hcl-dx-core-image-v95_CF199_20211029-1348.tar.gz Ring API hcl-dx-ringapi-image-vx.x.x_xxxxxxxx-xxxx.tar.gz hcl-dx-ringapi-image-v1.11.0_20210917-1441.tar.gz hcl-dx-ringapi-image-v1.12.0_20211029-1357.tar.gz Content Composer hcl-dx-content-composer-image-vx.x.x_xxxxxxxx-xxxx.tar.gz hcl-dx-content-composer-image-v1.10.0_20210917-1437.tar.gz hcl-dx-content-composer-image-v1.12.0_20211029-1341.tar.gz DX Deployment hcl-dx-deployment-vx.x.x_xxxxxxxx-xxxx.tgz hcl-dx-deployment-v2.0.0_20210917-1441.tgz hcl-dx-deployment-v2.1.0_20211029-1346.tgz Design Studio hcl-dx-design-studio-image- vx.x.x_xxxxxxxx-xxxx.tar.gz hcl-dx-site-manager-image-v0.4.0_20210917-1445.tar.gz hcl-dx-design-studio-image-v0.5.0_20211029-0013.tar.gz Digital Asset Management hcl-dx-digital-asset-manager-image- vx.x.x_xxxxxxxx-xxxx.tar.gz hcl-dx-digital-asset-manager-image-v1.10.0_20210917-1444.tar.gz hcl-dx-digital-asset-manager-image-v1.11.0_20211029-1350.tar.gz Persistence Connection Pool hcl-dx-persistence-connection-pool-image- vx.x.x_xxxxxxxx-xxxx.tar.gz hcl-dx-postgres-persistence-pgpool-image-v1.11.0_20210916-0224.tar.gz hcl-dx-persistence-connection-pool-image-v1.11.0_20211029-0224.tar.gz Persistence Node hcl-dx-persistence-node-image-vx.x.x_xxxxxxxx-xxxx.tar.gz hcl-dx-persistence-postgres-repmgr-image-v1.1_20210916-0148.tar.gz hcl-dx-persistence-node-image-v1.1_20211029-0148.tar.gz Persistence Metrics Exporter hcl-dx-persistence-metrics-exporter-image-vx.x.x_xxxxxxxx-xxxx.tar.gz NA hcl-dx-persistence-metrics-exporter-image-v1.10.0_20211029-1352.tar.gz Persistence hcl-dx-persistence-image- vx.x.x_xxxxxxxx-xxxx.tar.gz hcl-dx-postgres-image-v1.11.0_20210917-1444.tar.gz hcl-dx-persistence-image-v1.11.0_20211029-1349.tar.gz DX Experience API hcl-dx-experience-api-sample-ui-vx.x.x.xxxxxxxx-xxxx.zip hcl-dx-experience-api-sample-ui-v0.2.0.20210917-1439.zip hcl-dx-experience-api-sample-ui-v0.2.0.20211029-1354.zip Image processor hcl-dx-image-processor-image-vx.x.x_xxxxxxxx-xxxx.tar.gz hcl-dx-image-processor-image-v1.11.0_20210917-1449.tar.gz hcl-dx-image-processor-image-v1.12.0_20211029-1346.tar.gz Open LDAP hcl-dx-openldap-image-vx.x.x_xxxxxxxx-xxxx.tar.gz hcl-dx-openldap-image-v1.2.0_20210917-1437.tar.gz hcl-dx-openldap-image-v1.2.0_20211029-1342.tar.gz Remote search hcl-dx-remote-search-image-v95_CFxxx_xxxxxxxx-xxxx.tar.gz hcl-dx-remote-search-image-v95_CF198_20210917-1438.tar.gz hcl-dx-remote-search-image-v95_CF199_20211029-1348.tar.gz Runtime Controller hcl-dx-runtime-controller-image-v95_CFxxx_xxxxxxxx-xxxx.tar.gz hcl-dx-runtime-controller-image-v95_CF198_20210917-1441.tar.gz hcl-dx-runtime-controller-image-v95_CF199_20211029-1344.tar.gz Ambassador hcl-dx-ambassador-image-xxx.tar.gz hcl-dx-ambassador-image-154.tar.gz hcl-dx-ambassador-image-154.tar.gz Redis hcl-dx-redis-image-x.x.x.tar.gz hcl-dx-redis-image-5.0.1.tar.gz hcl-dx-redis-image-5.0.1.tar.gz Sidecar hcl-dx-sidecar-image-vx.x._x.x-xxx.tar.gz NA hcl-dx-sidecar-image-v1.0.0_8.4-205.tar.gz Note: The new image files and the change in file names are highlighted in the table. HCL DX 9.5 CF198 CF198 If deploying HCL DX 9.5 CF198 release, the package name and images are as follows: HCL DX 9.5 CF198 DXClient files : ``` hcl-dxclient-image-v95_CF198_20210917-1455.zip - ``` hcl-dxclient-v95_CF198_20210917-1455.zip **HCL DX 9.5 CF198 - hcl-dx-kubernetes-v95-CF198.zip**: - ``` HCL DX notices V9.5 CF198.txt - ``` hcl-dx-ambassador-image-154.tar.gz - ``` hcl-dx-cloud-operator-image-v95_CF198_20210917-1749.tar.gz - ``` hcl-dx-cloud-scripts-v95_CF198_20210917-1749.zip - ``` hcl-dx-content-composer-image-v1.10.0_20210917-1437.tar.gz - ``` hcl-dx-core-image-v95_CF198_20210917-1438.tar.gz - ``` hcl-dx-deployment-v2.0.0_20210917-1441.tgz - ``` hcl-dx-digital-asset-management-operator-image-v95_CF198_20210917-1437.tar.gz - ``` hcl-dx-digital-asset-manager-image-v1.10.0_20210917-1444.tar.gz - ``` hcl-dx-experience-api-sample-ui-v0.2.0.20210917-1439.zip - ``` hcl-dx-image-processor-image-v1.11.0_20210917-1449.tar.gz - ``` hcl-dx-openldap-image-v1.2.0_20210917-1437.tar.gz - ``` hcl-dx-persistence-postgres-repmgr-image-v1.1_20210916-0148.tar.gz - ``` hcl-dx-postgres-image-v1.11.0_20210917-1444.tar.gz - ``` hcl-dx-postgres-persistence-pgpool-image-v1.11.0_20210916-0224.tar.gz - ``` hcl-dx-redis-image-5.0.1.tar.gz - ``` hcl-dx-remote-search-image-v95_CF198_20210917-1438.tar.gz - ``` hcl-dx-ringapi-image-v1.11.0_20210917-1441.tar.gz - ``` hcl-dx-runtime-controller-image-v95_CF198_20210917-1441.tar.gz - ``` hcl-dx-site-manager-image-v0.4.0_20210917-1445.tar.gz HCL DX 9.5 CF197 CF197 If deploying HCL DX 9.5 CF197 release, the package name and images are as follows: HCL DX 9.5 CF197 Client - hcl-dx-client-v95-CF197.zip : ``` hcl-dxclient-image-v95_CF197_20210806-1311.zip - ``` hcl-dxclient-v95_CF197_20210806-1311.zip **HCL DX 9.5 CF197 - hcl-dx-kubernetes-v95-CF197.zip**: - ``` HCL DX notices V9.5 CF197.txt - ``` hcl-dx-ambassador-image-154.tar.gz - ``` hcl-dx-cloud-operator-image-v95_CF197_20210806-1310.tar.gz - ``` hcl-dx-cloud-scripts-v95_CF197_20210806-1310.zip - ``` hcl-dx-content-composer-image-v1.10.0_20210806-1258.tar.gz - ``` hcl-dx-core-image-v95_CF197_20210806-1259.tar.gz - ``` hcl-dx-deployment-v2.0.0_20210806-1300.tgz - ``` hcl-dx-digital-asset-management-operator-image-v95_CF197_20210806-1258.tar.gz - ``` hcl-dx-digital-asset-manager-image-v1.10.0_20210806-1302.tar.gz - ``` hcl-dx-experience-api-sample-ui-v0.2.0.20210806-1308.zip - ``` hcl-dx-image-processor-image-v1.10.0_20210806-1300.tar.gz - ``` hcl-dx-openldap-image-v1.2.0_20210806-1258.tar.gz - ``` hcl-dx-postgres-image-v1.10.0_20210806-1302.tar.gz - ``` hcl-dx-redis-image-5.0.1.tar.gz - ``` hcl-dx-remote-search-image-v95_CF197_20210806-1259.tar.gz - ``` hcl-dx-ringapi-image-v1.10.0_20210806-1311.tar.gz - ``` hcl-dx-runtime-controller-image-v95_CF197_20210806-1258.tar.gz - ``` hcl-dx-site-manager-image-v0.3.0_20210806-1308.tar.gz HCL DX 9.5 CF196 CF196 If deploying HCL DX 9.5 CF196 release, the package name and images are as follows: HCL DX 9.5 CF196 Client - hcl-dx-client-v95-CF196.zip : ``` hcl-dxclient-image-v95_CF196_20210625-2028.zip - ``` hcl-dxclient-v95_CF196_20210625-2029.zip **HCL DX 9.5 CF196 - hcl-dx-kubernetes-v95-CF196.zip**: - ``` HCL DX notices V9.5 CF196.txt - ``` hcl-dx-ambassador-image-154.tar.gz - ``` hcl-dx-cloud-operator-image-v95_CF196_20210625-2033.tar.gz - ``` hcl-dx-cloud-scripts-v95_CF196_20210625-2033.zip - ``` hcl-dx-content-composer-image-v1.9.0_20210625-2012.tar.gz - ``` hcl-dx-core-image-v95_CF196_20210625-2011.tar.gz - ``` hcl-dx-deployment-v1.0.0_20210625-2026.tgz - ``` hcl-dx-digital-asset-management-operator-image-v95_CF196_20210625-2013.tar.gz - ``` hcl-dx-digital-asset-manager-image-v1.9.0_20210625-2016.tar.gz - ``` hcl-dx-experience-api-sample-ui-v0.2.0.20210625-2023.zip - ``` hcl-dx-image-processor-image-v1.8.0_20210625-2015.tar.gz - ``` hcl-dx-openldap-image-v1.2.0_20210625-2013.tar.gz - ``` hcl-dx-postgres-image-v1.9.0_20210625-2016.tar.gz - ``` hcl-dx-redis-image-5.0.1.tar.gz - ``` hcl-dx-remote-search-image-v95_CF196_20210625-2011.tar.gz - ``` hcl-dx-ringapi-image-v1.9.0_20210625-2026.tar.gz - ``` hcl-dx-runtime-controller-image-v95_CF196_20210625-2013.tar.gz - ``` hcl-dx-site-manager-image-v0.2.0_20210625-2023.tar.gz HCL DX 9.5 CF195 CF195 If deploying HCL DX 9.5 CF195 release, the package name and images are as follows: HCL DX 9.5 CF195 Client - hcl-dx-client-v95-CF195.zip : ``` dxclient_v1.4.0_20210514-1713.zip **HCL DX 9.5 CF195 - hcl-dx-kubernetes-v95-CF195.zip**: - ``` HCL DX notices V9.5 CF195.txt - ``` dxclient_v1.4.0_20210514-1713.zip - ``` hcl-dx-ambassador-image-154.tar.gz - ``` hcl-dx-cloud-operator-image-v95_CF195_20210515-0201.tar.gz - ``` hcl-dx-cloud-scripts-v95_CF195_20210514-1707.zip - ``` hcl-dx-content-composer-image-v1.8.0_20210514-1707.tar.gz - ``` hcl-dx-core-image-v95_CF195_20210514-1708.tar.gz - ``` hcl-dx-digital-asset-management-operator-image-v95_CF195_20210514-1714.tar.gz - ``` hcl-dx-digital-asset-manager-image-v1.8.0_20210514-1711.tar.gz - ``` hcl-dx-experience-api-sample-ui-v0.2.0.20210514-1708.zip - ``` hcl-dx-image-processor-image-v1.8.0_20210514-1712.tar.gz - ``` hcl-dx-openldap-image-v1.1.0-master_20210514_1621013302.tar.gz - ``` hcl-dx-postgres-image-v1.8.0_20210514-1708.tar.gz - ``` hcl-dx-redis-image-5.0.1.tar.gz - ``` hcl-dx-remote-search-image-v95_CF195_20210514-1708.tar.gz - ``` hcl-dx-ringapi-image-v1.8.0_20210514-1709.tar.gz ## HCL DX 9.5 CF194 - **CF194** Important note: Please consult the HCL DX Support Knowledge Base article, [Manual Steps to Apply the Digital Experience 9.5 Container Deployment Core Certificate Update](https://support.hcltechsw.com/csm?id=kb_article&sysparm_article=KB0089699), to apply the certificate update to your HCL DX 9.5 container deployment. If deploying HCL DX 9.5 CF194 release, the package name and images are as follows: **HCL DX 9.5 CF194 Client - hcl-dx-client-v95-CF194.zip**: - ``` dxclient_v1.3.0_20210415-2128.zip **HCL DX 9.5 CF194 - hcl-dx-kubernetes-v95-CF194.zip**: - ``` HCL DX notices V9.5 CF194.txt - ``` dxclient_v1.3.0_20210415-2128.zip - ``` hcl-dx-ambassador-image-154.tar.gz - ``` hcl-dx-cloud-operator-image-v95_CF194_20210416-0233.tar.gz - ``` hcl-dx-cloud-scripts-v95_CF194_20210416-0233.zip - ``` hcl-dx-content-composer-image-v1.7.0_20210415-2121.tar.gz - ``` hcl-dx-core-image-v95_CF194_20210415-2120.tar.gz - ``` hcl-dx-digital-asset-management-operator-image-v95_CF194_20210415-2127.tar.gz - ``` hcl-dx-experience-api-sample-ui-v0.2.0.20210415-2121.zip - ``` hcl-dx-image-processor-image-v1.7.0_20210415-2120.tar.gz - ``` hcl-dx-openldap-image-v1.1.0-master_20210416_1618540820.tar.gz - ``` hcl-dx-postgres-image-v1.7.0_20210415-2120.tar.gz - ``` hcl-dx-redis-image-5.0.1.tar.gz - ``` hcl-dx-remote-search-image-v95_CF194_20210415-2120.tar.gz HCL DX 9.5 CF193 CF193 If deploying HCL DX 9.5 CF193 release, the package name and images are as follows: HCL DX 9.5 CF193 Client - hcl-dx-client-v95-CF193.zip : ``` dxclient_v1.3.0_20210331-1335.zip **HCL DX 9.5 CF193 - hcl-dx-kubernetes-v95-CF193.zip**: - ``` HCL DX notices V9.5 CF193.txt - ``` dxclient_v1.3.0_20210331-1335.zip - ``` hcl-dx-ambassador-image-154.tar.gz - ``` hcl-dx-cloud-operator-image-v95_CF193_20210331-1847.tar.gz - ``` hcl-dx-cloud-scripts-v95_CF193_20210331-1847.zip - ``` hcl-dx-content-composer-image-v1.7.0_20210331-1333.tar.gz - ``` hcl-dx-core-image-v95_CF193_20210331-1336.tar.gz - ``` hcl-dx-digital-asset-management-operator-image-v95_CF193_20210331-1335.tar.gz - ``` hcl-dx-digital-asset-manager-image-v1.7.0_20210331-1339.tar.gz - ``` hcl-dx-experience-api-sample-ui-v0.2.0.20210331-1343.zip - ``` hcl-dx-image-processor-image-v1.7.0_20210331-1336.tar.gz - ``` hcl-dx-openldap-image-v1.1.0-master_20210331_1617216873.tar.gz - ``` hcl-dx-postgres-image-v1.7.0_20210331-1337.tar.gz - ``` hcl-dx-redis-image-5.0.1.tar.gz - ``` hcl-dx-remote-search-image-v95_CF193_20210331-1336.tar.gz - ``` hcl-dx-ringapi-image-v1.7.0_20210331-1339.tar.gz ## HCL DX 9.5 CF192 - **CF192** If deploying HCL DX 9.5 CF192 release, the package name and images are as follows: **hcl-dx-kubernetes-v95-CF192.zip**: - ``` HCL DX notices V9.5 CF192.txt - ``` dxclient_v1.2.0_20210305-1758.zip - ``` hcl-dx-ambassador-image-154.tar.gz - ``` hcl-dx-cloud-operator-image-v95_CF192_20210305-2309.tar.gz - ``` hcl-dx-cloud-scripts-v95_CF192_20210305-2309.zip - ``` hcl-dx-content-composer-image-v1.6.0_20210305-1756.tar.gz - ``` hcl-dx-core-image-v95_CF192_20210305-1758.tar.gz - ``` hcl-dx-digital-asset-management-operator-image-v95_CF192_20210305-1757.tar.gz - ``` hcl-dx-digital-asset-manager-image-v1.6.0_20210305-1802.tar.gz - ``` hcl-dx-experience-api-sample-ui-v0.2.0.20210305-1805.zip - ``` hcl-dx-image-processor-image-v1.6.0_20210305-1758.tar.gz - ``` hcl-dx-openldap-image-v1.0.0-master_20210305_1614986151.tar.gz - ``` hcl-dx-postgres-image-v1.6.0_20210305-1800.tar.gz - ``` hcl-dx-redis-image-5.0.1.tar.gz - ``` hcl-dx-remote-search-image-v95_CF192_20210305-1758.tar.gz - ``` hcl-dx-ringapi-image-v1.6.0_20210305-1802.tar.gz ## HCL DX 9.5 CF191 - **CF191** If deploying HCL DX 9.5 CF191 release, the package name and images are as follows: **hcl-dx-kubernetes-v95-CF191.zip** file: - ``` HCL DX notices V9.5 CF191.txt - ``` hcl-dx-ambassador-image-154.tar.gz - ``` hcl-dx-cloud-operator-image-v95_CF191_20201214-1527.tar.gz - ``` hcl-dx-cloud-scripts-v95_CF191_20201214-1527.zip - ``` hcl-dx-content-composer-image-v1.5.0_20201211-2151.tar.gz - ``` hcl-dx-core-image-v95_CF191_20201212-1421.tar.gz - ``` hcl-dx-digital-asset-management-operator-image-v95_CF191_20201211-2152.tar.gz - ``` hcl-dx-digital-asset-manager-image-v1.5.0_20201211-2155.tar.gz - ``` hcl-dx-experience-api-sample-ui-v0.2.0.20201211-2205.zip - ``` hcl-dx-image-processor-image-v1.5.0_20201211-2154.tar.gz - ``` hcl-dx-openldap-image-v1.0.0-master_20201212_1607741365.tar.gz - ``` hcl-dx-postgres-image-v1.5.0_20201211-2155.tar.gz - ``` hcl-dx-redis-image-5.0.1.tar.gz - ``` hcl-dx-remote-search-image-v95_CF191_20201212-1421.tar.gz - ``` hcl-dx-ringapi-image-v1.5.0_20201211-2200.tar.gz - ``` dxclient_v1.1.0_20201211-2153.zip **Note:** HCL DX 9.5 CF191 images are available and may be installed. HCL DX 9.5 CF191 is supported for new deployments only. DX administrators should not upgrade DX 9.5 container deployments to this release. ## HCL DX 9.5 CF19 - **CF19** If deploying HCL DX 9.5 CF19 release, the package name and images are as follows: **hcl-dx-kubernetes-v95-CF19.zip file**: - ``` HCL DX notices V9.5 CF19.txt - ``` hcl-dx-ambassador-image-154.tar.gz - ``` hcl-dx-cloud-operator-image-v95_CF19_20201110-0401.tar.gz - ``` hcl-dx-cloud-scripts-v95_CF19_20201110-0401.zip - ``` hcl-dx-content-composer-image-v1.4.0_20201109-2203.tar.gz - ``` hcl-dx-core-image-v95_CF19_20201109-2312.tar.gz - ``` hcl-dx-digital-asset-management-operator-image-v95_CF19_20201109-2204.tar.gz - ``` hcl-dx-digital-asset-manager-image-v1.4.0_20201109-2206.tar.gz - ``` hcl-dx-experience-api-sample-ui-v0.2.0.20201109-2208.zip - ``` hcl-dx-image-processor-image-v1.4.0_20201109-2204.tar.gz - ``` hcl-dx-openldap-image-v1.0.0-master_20201110_1604981292.tar.gz - ``` hcl-dx-postgres-image-v1.4.0_20201109-2206.tar.gz - ``` hcl-dx-redis-image-5.0.1.tar.gz - ``` hcl-dx-remote-search-image-v95_CF19_20201109-2312.tar.gz - ``` hcl-dx-ringapi-image-v1.4.0_20201109-2209.tar.gz - ``` dxclient_v1.0.0_20201110-2010.zip ## HCL DX 9.5 CF184 - **HCL DX 9.5 Container Update CF184** If deploying HCL DX 9.5 CF184 release, the package name and images are as follows: **hcl-dx-kubernetes-v95-CF184.zip files**: - ``` HCL DX notices V9.5 CF184.txt - ``` hcl-dx-ambassador-image-154.tar.gz - ``` hcl-dx-cloud-operator-image-v95_CF184_20200917-0054.tar.gz - ``` hcl-dx-cloud-scripts-v95_CF184_20200917-0054.zip - ``` hcl-dx-content-composer-image-v1.3.0_20200916-1952.tar.gz - ``` hcl-dx-core-image-v95_CF184_20200916-2009.tar.gz - ``` hcl-dx-digital-asset-management-operator-image-v95_CF184_20200916-2034.tar.gz - ``` hcl-dx-digital-asset-manager-image-v1.3.0_20200916-1953.tar.gz - ``` hcl-dx-image-processor-image-v1.3.0_20200916-1953.tar.gz - ``` hcl-dx-openldap-image-v1.0.0-master_20200917_1600304449.tar.gz - ``` hcl-dx-postgres-image-v1.3.0_20200916-2003.tar.gz - ``` hcl-dx-redis-image-5.0.1.tar.gz - ``` hcl-dx-remote-search-image-v95_CF184_20200916-2009.tar.gz - ``` hcl-dx-ringapi-image-v1.3.0_20200916-1953.tar.gz ## HCL DX 9.5 CF183 - **HCL DX 9.5 Container Update CF183** If deploying HCL DX 9.5 CF183 release, the image and package names are as follows: **CF183-core.zip files**: - ``` HCL DX notices V9.5 CF183.txt - ``` hcl-dx-ambassador-image-154.tar.gz - ``` hcl-dx-cloud-operator-image-v95_CF183_20200818-1852.tar.gz - ``` hcl-dx-cloud-scripts-v95_CF183_20200818-1852.zip - ``` hcl-dx-core-image-v95_CF183_20200818-1342.tar.gz - ``` hcl-dx-redis-image-5.0.1.tar.gz **CF183-other.zip files**: - ``` HCL DX notices V9.5 CF183.txt - ``` hcl-dx-content-composer-image-v1.2.0_20200818-1343.tar.gz - ``` hcl-dx-digital-asset-management-operator-image-v95_CF183_20200818-1344.tar.gz - ``` hcl-dx-digital-asset-manager-image-v1.2.0_20200818-1346.tar.gz - ``` hcl-dx-image-processor-image-v1.2.0_20200818-1345.tar.gz - ``` hcl-dx-openldap-image-v1.0.0-master_20200818_1597758965.tar.gz - ``` hcl-dx-postgres-image-v1.2.0_20200818-1349.tar.gz - ``` hcl-dx-remote-search-image-v95_CF183_20200818-1342.tar.gz - ``` hcl-dx-ringapi-image-v1.2.0_20200818-1351.tar.gz HCL DX 9.5 CF182 CF182 If deploying HCL DX 9.5 CF182 release, the image and package names are as follows: hcl-dx-kubernetes-v95-CF182-core.zip : ``` HCL DX notices V9.5 CF182.txt - ``` hcl-dx-ambassador-image-0850.tar.gz - ``` hcl-dx-cloud-operator-image-v95_CF182_20200720-1708.tar.gz - ``` hcl-dx-cloud-scripts-v95_CF182_20200720-1708.zip - ``` hcl-dx-core-image-v95_CF182_20200720-1645.tar.gz **hcl-dx-kubernetes-v95-CF182-other.zip**: - ``` HCL DX notices V9.5 CF182.txt - ``` hcl-dx-content-composer-image-v1.1.0_20200720-1708.tar.gz - ``` hcl-dx-digital-asset-management-operator-image-v95_CF182_20200720-1716.tar.gz - ``` hcl-dx-digital-asset-manager-image-v1.1.0_20200720-1712.tar.gz - ``` hcl-dx-image-processor-image-v1.1.0_20200720-1716.tar.gz - ``` hcl-dx-openldap-image-v1.0.0-master_20200720_1595265588.tar.gz - ``` hcl-dx-postgres-image-v1.1.0_20200720-1715.tar.gz - ``` hcl-dx-remote-search-image-v95_CF182_20200720-1645.tar.gz - ``` hcl-dx-ringapi-image-v1.1.0_20200720-1707.tar.gz HCL DX 9.5 CF181 CF181 If deploying HCL DX 9.5 CF181 and later container update release, the image and package names add HCL DX 9.5 Content Composer and Digital Asset Management components and supporting services images, as well as Remote Search and OpenLDAP images. See the following list of images presented within the HCL DX 9.5 Container Update CF181 package: hcl-dx-kubernetes-v95-CF181-core.zip : ``` hcl-dx-cloud-scripts-v95_CF181_xxxxxxxx-xxxx.zip - ``` hcl-dx-core-image-v95_CF181_xxxxxxxx-xxxx.tar.gz - ``` hcl-dx-cloud-operator-image-v95_CF181_xxxxxxxx-xxxx.tar.gz - ``` hcl-dx-ambassador-image-xxxx.tar.gz - ``` HCL DX notices V9.5 CF181.txt **hcl-dx-kubernetes-v95-CF181-other.zip**: - ``` hcl-dx-ringapi-image-v1.0.0_xxxxxxxx-xxxx.tar.gz - ``` hcl-dx-postgres-image-v1.0.0_xxxxxxxx-xxxx.tar.gz - ``` hcl-dx-openldap-image-v1.0.0-release_xxxxxxxx_xxxxxxxxxx.tar.gz - ``` hcl-dx-medialibrary-operator-image-v95_CF181_xxxxxxxx-xxxx.tar.gz - ``` hcl-dx-image-processor-image-v1.0.0_xxxxxxxx-xxxx.tar.gz - ``` hcl-dx-dxrs-image-v95_CF181_xxxxxxxx-xxxx.tar.gz ## HCL DX 9.5 CF18 - **CF18** If deploying HCL DX 9.5 CF18 and later container update release, the image and package names included for this are: - ``` hcl-dx-kubernetes-v95-CF18.zip - ``` hcl-dx-core-image-v95_CF18_xxxxxxxx-xxxx.tar.gz - ``` hcl-dx-cloud-operator-image-v95_CF18_xxxxxxxx-xxxx.tar.gz - ``` hcl-dx-cloud-scripts-v95_CF18_xxxxxxxx-xxxx.zip - ``` hcl-dx-ambassador-image-xxxx.tar.gz See the following sections for additional information: Docker image deployment Customizing the container deployment Requirements and limitations Parent topic: Digital Experience on containerized platforms","title":"Docker image list"},{"location":"docker_o/docker/#docker-image-list","text":"This section presents the latest HCL DX 9.5 Docker container update images available.","title":"Docker image list"},{"location":"docker_o/docker/#docker-container-update-file-list","text":"The HCL DX 9.5 container update releases may be obtained from your HCL Digital Experience entitlements in the HCL Software License Portal , in the HCL_Portal_8.5_9.0_9.5_CFs download package entry. Video: How to upload HCL Digital Experience 9.5 CF container images to a private repository","title":"Docker container update file list"},{"location":"docker_o/docker/#hcl-dx-95-cf201","text":"Container Update CF201 If deploying the HCL DX 9.5 CF201 release, the package name and images are as follows: HCL DX 9.5 CF201 DXClient files : ``` hcl-dxclient-image-v95_CF201_20220207-1614.zip - ``` hcl-dxclient-v95_CF201_20220207-1613.zip **HCL DX 9.5 CF\\_201-hcl-dx-kubernetes-v95-CF201.zip**: - ``` HCL DX notices V9.5 CF201.txt - ``` hcl-dx-ambassador-image-1142.tar.gz - ``` hcl-dx-content-composer-image-v1.14.0_20220207-1550.tar.gz - ``` hcl-dx-core-image-v95_CF201_20220206-1331.tar.gz - ``` hcl-dx-deployment-v2.4.0_20220207-1606.tgz - ``` hcl-dx-design-studio-image-v0.7.0_20220207-1549.tar.gz - ``` hcl-dx-digital-asset-manager-image-v1.13.0_20220207-1609.tar.gz - ``` hcl-dx-experience-api-sample-ui-v0.2.0.20220207-1549.zip - ``` hcl-dx-image-processor-image-v1.14.0_20220207-1606.tar.gz - ``` hcl-dx-openldap-image-v1.2.0_20220207-1556.tar.gz - ``` hcl-dx-persistence-connection-pool-image-v1.14.0_20220207-1612.tar.gz - ``` hcl-dx-persistence-image-v1.14.0_20220207-1611.tar.gz - ``` hcl-dx-persistence-metrics-exporter-image-v1.12.0_20220207-1611.tar.gz - ``` hcl-dx-persistence-node-image-v1.4_20220207-1549.tar.gz - ``` hcl-dx-redis-image-5.0.14.tar.gz - ``` hcl-dx-remote-search-image-v95_CF201_20220206-1331.tar.gz - ``` hcl-dx-ringapi-image-v1.14.0_20220207-1554.tar.gz - ``` hcl-dx-runtime-controller-image-v95_CF201_20220207-1558.tar.gz - ``` hcl-dx-sidecar-image-v1.0.0_8.4-205.tar.gz ## HCL DX 9.5 CF200 - **Container Update CF200** If deploying the HCL DX 9.5 CF200 release, the package name and images are as follows: **HCL DX 9.5 CF200 DXClient files**: - ``` hcl-dxclient-image-v95_CF200_20211213-1500.zip - ``` hcl-dxclient-v95_CF200_20211213-1459.zip **HCL DX 9.5 CF\\_200-hcl-dx-kubernetes-v95-CF200.zip** **Important:** With the Operator-based deployment being removed starting in HCL DX Container Update 9.5 CF200, you will find some changes in the list of files and their names in CF199 and later releases. For more information, see [List of image files and changes from CF198 and later](#simpletable_cst_4lf_yrb). - ``` HCL DX notices V9.5 CF200.txt - ``` hcl-dx-ambassador-image-1142.tar.gz - ``` hcl-dx-content-composer-image-v1.13.0_20211213-1443.tar.gz - ``` hcl-dx-core-image-v95_CF200_20211213-1442.tar.gz - ``` hcl-dx-deployment-v2.2.0_20211213-1446.tgz - ``` hcl-dx-design-studio-image-v0.6.0_20211213-1448.tar.gz - ``` hcl-dx-digital-asset-manager-image-v1.12.0_20211213-1448.tar.gz - ``` hcl-dx-experience-api-sample-ui-v0.2.0.20211213-1454.zip - ``` hcl-dx-image-processor-image-v1.13.0_20211213-1446.tar.gz - ``` hcl-dx-openldap-image-v1.2.0_20211213-1444.tar.gz - ``` hcl-dx-persistence-connection-pool-image-v1.13.0_20211213-1457.tar.gz - ``` hcl-dx-persistence-image-v1.13.0_20211213-1457.tar.gz - ``` hcl-dx-persistence-metrics-exporter-image-v1.11.0_20211213-1458.tar.gz - ``` hcl-dx-persistence-node-image-v1.3_20211213-1454.tar.gz - ``` hcl-dx-redis-image-5.0.14.tar.gz - ``` hcl-dx-remote-search-image-v95_CF200_20211213-1442.tar.gz - ``` hcl-dx-ringapi-image-v1.13.0_20211213-1457.tar.gz - ``` hcl-dx-runtime-controller-image-v95_CF200_20211213-1444.tar.gz - ``` hcl-dx-sidecar-image-v1.0.0_8.4-205.tar.gz","title":"HCL DX 9.5 CF201"},{"location":"docker_o/docker/#hcl-dx-95-cf199","text":"Container Update CF199 If deploying the HCL DX 9.5 CF199 release, the package name and images are as follows: HCL DX 9.5 CF199 DXClient files : ``` hcl-dxclient-image-v95_CF199_20211029-1357.zip - ``` hcl-dxclient-v95_CF199_20211029-1357.zip **HCL DX 9.5 CF\\_199-hcl-dx-kubernetes-v95-CF199.zip** - ``` HCL DX notices V9.5 CF199.txt - ``` hcl-dx-ambassador-image-154.tar.gz - ``` hcl-dx-cloud-operator-image-v95_CF199_20211029-1700.tar.gz - ``` hcl-dx-cloud-scripts-v95_CF199_20211029-1700.zip - ``` hcl-dx-content-composer-image-v1.12.0_20211029-1341.tar.gz - ``` hcl-dx-core-image-v95_CF199_20211029-1348.tar.gz - ``` hcl-dx-deployment-v2.1.0_20211029-1346.tgz - ``` hcl-dx-design-studio-image-v0.5.0_20211029-0013.tar.gz - ``` hcl-dx-digital-asset-management-operator-image-v95_CF199_20211029-1342.tar.gz - ``` hcl-dx-digital-asset-manager-image-v1.11.0_20211029-1350.tar.gz - ``` hcl-dx-experience-api-sample-ui-v0.2.0.20211029-1354.zip - ``` hcl-dx-image-processor-image-v1.12.0_20211029-1346.tar.gz - ``` hcl-dx-openldap-image-v1.2.0_20211029-1342.tar.gz - ``` hcl-dx-persistence-connection-pool-image-v1.11.0_20211029-0224.tar.gz - ``` hcl-dx-persistence-image-v1.11.0_20211029-1349.tar.gz - ``` hcl-dx-persistence-metrics-exporter-image-v1.10.0_20211029-1352.tar.gz - ``` hcl-dx-persistence-node-image-v1.1_20211029-0148.tar.gz - ``` hcl-dx-redis-image-5.0.1.tar.gz - ``` hcl-dx-remote-search-image-v95_CF199_20211029-1348.tar.gz - ``` hcl-dx-ringapi-image-v1.12.0_20211029-1357.tar.gz - ``` hcl-dx-runtime-controller-image-v95_CF199_20211029-1344.tar.gz - ``` hcl-dx-sidecar-image-v1.0.0_8.4-205.tar.gz Important: With the Operator-based deployment being deprecated in CF198 and planned to be removed in HCL DX Container Update 9.5 CF200, you will find some changes in the list of files and their names in CF199 and later releases. Component Image name CF198 CF199 DX Core hcl-dx-core-image-vx.x.x_xxxxxxxx-xxxx.tar.gz hcl-dx-core-image-v95_CF198_20210917-1438.tar.gz hcl-dx-core-image-v95_CF199_20211029-1348.tar.gz Ring API hcl-dx-ringapi-image-vx.x.x_xxxxxxxx-xxxx.tar.gz hcl-dx-ringapi-image-v1.11.0_20210917-1441.tar.gz hcl-dx-ringapi-image-v1.12.0_20211029-1357.tar.gz Content Composer hcl-dx-content-composer-image-vx.x.x_xxxxxxxx-xxxx.tar.gz hcl-dx-content-composer-image-v1.10.0_20210917-1437.tar.gz hcl-dx-content-composer-image-v1.12.0_20211029-1341.tar.gz DX Deployment hcl-dx-deployment-vx.x.x_xxxxxxxx-xxxx.tgz hcl-dx-deployment-v2.0.0_20210917-1441.tgz hcl-dx-deployment-v2.1.0_20211029-1346.tgz Design Studio hcl-dx-design-studio-image- vx.x.x_xxxxxxxx-xxxx.tar.gz hcl-dx-site-manager-image-v0.4.0_20210917-1445.tar.gz hcl-dx-design-studio-image-v0.5.0_20211029-0013.tar.gz Digital Asset Management hcl-dx-digital-asset-manager-image- vx.x.x_xxxxxxxx-xxxx.tar.gz hcl-dx-digital-asset-manager-image-v1.10.0_20210917-1444.tar.gz hcl-dx-digital-asset-manager-image-v1.11.0_20211029-1350.tar.gz Persistence Connection Pool hcl-dx-persistence-connection-pool-image- vx.x.x_xxxxxxxx-xxxx.tar.gz hcl-dx-postgres-persistence-pgpool-image-v1.11.0_20210916-0224.tar.gz hcl-dx-persistence-connection-pool-image-v1.11.0_20211029-0224.tar.gz Persistence Node hcl-dx-persistence-node-image-vx.x.x_xxxxxxxx-xxxx.tar.gz hcl-dx-persistence-postgres-repmgr-image-v1.1_20210916-0148.tar.gz hcl-dx-persistence-node-image-v1.1_20211029-0148.tar.gz Persistence Metrics Exporter hcl-dx-persistence-metrics-exporter-image-vx.x.x_xxxxxxxx-xxxx.tar.gz NA hcl-dx-persistence-metrics-exporter-image-v1.10.0_20211029-1352.tar.gz Persistence hcl-dx-persistence-image- vx.x.x_xxxxxxxx-xxxx.tar.gz hcl-dx-postgres-image-v1.11.0_20210917-1444.tar.gz hcl-dx-persistence-image-v1.11.0_20211029-1349.tar.gz DX Experience API hcl-dx-experience-api-sample-ui-vx.x.x.xxxxxxxx-xxxx.zip hcl-dx-experience-api-sample-ui-v0.2.0.20210917-1439.zip hcl-dx-experience-api-sample-ui-v0.2.0.20211029-1354.zip Image processor hcl-dx-image-processor-image-vx.x.x_xxxxxxxx-xxxx.tar.gz hcl-dx-image-processor-image-v1.11.0_20210917-1449.tar.gz hcl-dx-image-processor-image-v1.12.0_20211029-1346.tar.gz Open LDAP hcl-dx-openldap-image-vx.x.x_xxxxxxxx-xxxx.tar.gz hcl-dx-openldap-image-v1.2.0_20210917-1437.tar.gz hcl-dx-openldap-image-v1.2.0_20211029-1342.tar.gz Remote search hcl-dx-remote-search-image-v95_CFxxx_xxxxxxxx-xxxx.tar.gz hcl-dx-remote-search-image-v95_CF198_20210917-1438.tar.gz hcl-dx-remote-search-image-v95_CF199_20211029-1348.tar.gz Runtime Controller hcl-dx-runtime-controller-image-v95_CFxxx_xxxxxxxx-xxxx.tar.gz hcl-dx-runtime-controller-image-v95_CF198_20210917-1441.tar.gz hcl-dx-runtime-controller-image-v95_CF199_20211029-1344.tar.gz Ambassador hcl-dx-ambassador-image-xxx.tar.gz hcl-dx-ambassador-image-154.tar.gz hcl-dx-ambassador-image-154.tar.gz Redis hcl-dx-redis-image-x.x.x.tar.gz hcl-dx-redis-image-5.0.1.tar.gz hcl-dx-redis-image-5.0.1.tar.gz Sidecar hcl-dx-sidecar-image-vx.x._x.x-xxx.tar.gz NA hcl-dx-sidecar-image-v1.0.0_8.4-205.tar.gz Note: The new image files and the change in file names are highlighted in the table.","title":"HCL DX 9.5 CF199"},{"location":"docker_o/docker/#hcl-dx-95-cf198","text":"CF198 If deploying HCL DX 9.5 CF198 release, the package name and images are as follows: HCL DX 9.5 CF198 DXClient files : ``` hcl-dxclient-image-v95_CF198_20210917-1455.zip - ``` hcl-dxclient-v95_CF198_20210917-1455.zip **HCL DX 9.5 CF198 - hcl-dx-kubernetes-v95-CF198.zip**: - ``` HCL DX notices V9.5 CF198.txt - ``` hcl-dx-ambassador-image-154.tar.gz - ``` hcl-dx-cloud-operator-image-v95_CF198_20210917-1749.tar.gz - ``` hcl-dx-cloud-scripts-v95_CF198_20210917-1749.zip - ``` hcl-dx-content-composer-image-v1.10.0_20210917-1437.tar.gz - ``` hcl-dx-core-image-v95_CF198_20210917-1438.tar.gz - ``` hcl-dx-deployment-v2.0.0_20210917-1441.tgz - ``` hcl-dx-digital-asset-management-operator-image-v95_CF198_20210917-1437.tar.gz - ``` hcl-dx-digital-asset-manager-image-v1.10.0_20210917-1444.tar.gz - ``` hcl-dx-experience-api-sample-ui-v0.2.0.20210917-1439.zip - ``` hcl-dx-image-processor-image-v1.11.0_20210917-1449.tar.gz - ``` hcl-dx-openldap-image-v1.2.0_20210917-1437.tar.gz - ``` hcl-dx-persistence-postgres-repmgr-image-v1.1_20210916-0148.tar.gz - ``` hcl-dx-postgres-image-v1.11.0_20210917-1444.tar.gz - ``` hcl-dx-postgres-persistence-pgpool-image-v1.11.0_20210916-0224.tar.gz - ``` hcl-dx-redis-image-5.0.1.tar.gz - ``` hcl-dx-remote-search-image-v95_CF198_20210917-1438.tar.gz - ``` hcl-dx-ringapi-image-v1.11.0_20210917-1441.tar.gz - ``` hcl-dx-runtime-controller-image-v95_CF198_20210917-1441.tar.gz - ``` hcl-dx-site-manager-image-v0.4.0_20210917-1445.tar.gz","title":"HCL DX 9.5 CF198"},{"location":"docker_o/docker/#hcl-dx-95-cf197","text":"CF197 If deploying HCL DX 9.5 CF197 release, the package name and images are as follows: HCL DX 9.5 CF197 Client - hcl-dx-client-v95-CF197.zip : ``` hcl-dxclient-image-v95_CF197_20210806-1311.zip - ``` hcl-dxclient-v95_CF197_20210806-1311.zip **HCL DX 9.5 CF197 - hcl-dx-kubernetes-v95-CF197.zip**: - ``` HCL DX notices V9.5 CF197.txt - ``` hcl-dx-ambassador-image-154.tar.gz - ``` hcl-dx-cloud-operator-image-v95_CF197_20210806-1310.tar.gz - ``` hcl-dx-cloud-scripts-v95_CF197_20210806-1310.zip - ``` hcl-dx-content-composer-image-v1.10.0_20210806-1258.tar.gz - ``` hcl-dx-core-image-v95_CF197_20210806-1259.tar.gz - ``` hcl-dx-deployment-v2.0.0_20210806-1300.tgz - ``` hcl-dx-digital-asset-management-operator-image-v95_CF197_20210806-1258.tar.gz - ``` hcl-dx-digital-asset-manager-image-v1.10.0_20210806-1302.tar.gz - ``` hcl-dx-experience-api-sample-ui-v0.2.0.20210806-1308.zip - ``` hcl-dx-image-processor-image-v1.10.0_20210806-1300.tar.gz - ``` hcl-dx-openldap-image-v1.2.0_20210806-1258.tar.gz - ``` hcl-dx-postgres-image-v1.10.0_20210806-1302.tar.gz - ``` hcl-dx-redis-image-5.0.1.tar.gz - ``` hcl-dx-remote-search-image-v95_CF197_20210806-1259.tar.gz - ``` hcl-dx-ringapi-image-v1.10.0_20210806-1311.tar.gz - ``` hcl-dx-runtime-controller-image-v95_CF197_20210806-1258.tar.gz - ``` hcl-dx-site-manager-image-v0.3.0_20210806-1308.tar.gz","title":"HCL DX 9.5 CF197"},{"location":"docker_o/docker/#hcl-dx-95-cf196","text":"CF196 If deploying HCL DX 9.5 CF196 release, the package name and images are as follows: HCL DX 9.5 CF196 Client - hcl-dx-client-v95-CF196.zip : ``` hcl-dxclient-image-v95_CF196_20210625-2028.zip - ``` hcl-dxclient-v95_CF196_20210625-2029.zip **HCL DX 9.5 CF196 - hcl-dx-kubernetes-v95-CF196.zip**: - ``` HCL DX notices V9.5 CF196.txt - ``` hcl-dx-ambassador-image-154.tar.gz - ``` hcl-dx-cloud-operator-image-v95_CF196_20210625-2033.tar.gz - ``` hcl-dx-cloud-scripts-v95_CF196_20210625-2033.zip - ``` hcl-dx-content-composer-image-v1.9.0_20210625-2012.tar.gz - ``` hcl-dx-core-image-v95_CF196_20210625-2011.tar.gz - ``` hcl-dx-deployment-v1.0.0_20210625-2026.tgz - ``` hcl-dx-digital-asset-management-operator-image-v95_CF196_20210625-2013.tar.gz - ``` hcl-dx-digital-asset-manager-image-v1.9.0_20210625-2016.tar.gz - ``` hcl-dx-experience-api-sample-ui-v0.2.0.20210625-2023.zip - ``` hcl-dx-image-processor-image-v1.8.0_20210625-2015.tar.gz - ``` hcl-dx-openldap-image-v1.2.0_20210625-2013.tar.gz - ``` hcl-dx-postgres-image-v1.9.0_20210625-2016.tar.gz - ``` hcl-dx-redis-image-5.0.1.tar.gz - ``` hcl-dx-remote-search-image-v95_CF196_20210625-2011.tar.gz - ``` hcl-dx-ringapi-image-v1.9.0_20210625-2026.tar.gz - ``` hcl-dx-runtime-controller-image-v95_CF196_20210625-2013.tar.gz - ``` hcl-dx-site-manager-image-v0.2.0_20210625-2023.tar.gz","title":"HCL DX 9.5 CF196"},{"location":"docker_o/docker/#hcl-dx-95-cf195","text":"CF195 If deploying HCL DX 9.5 CF195 release, the package name and images are as follows: HCL DX 9.5 CF195 Client - hcl-dx-client-v95-CF195.zip : ``` dxclient_v1.4.0_20210514-1713.zip **HCL DX 9.5 CF195 - hcl-dx-kubernetes-v95-CF195.zip**: - ``` HCL DX notices V9.5 CF195.txt - ``` dxclient_v1.4.0_20210514-1713.zip - ``` hcl-dx-ambassador-image-154.tar.gz - ``` hcl-dx-cloud-operator-image-v95_CF195_20210515-0201.tar.gz - ``` hcl-dx-cloud-scripts-v95_CF195_20210514-1707.zip - ``` hcl-dx-content-composer-image-v1.8.0_20210514-1707.tar.gz - ``` hcl-dx-core-image-v95_CF195_20210514-1708.tar.gz - ``` hcl-dx-digital-asset-management-operator-image-v95_CF195_20210514-1714.tar.gz - ``` hcl-dx-digital-asset-manager-image-v1.8.0_20210514-1711.tar.gz - ``` hcl-dx-experience-api-sample-ui-v0.2.0.20210514-1708.zip - ``` hcl-dx-image-processor-image-v1.8.0_20210514-1712.tar.gz - ``` hcl-dx-openldap-image-v1.1.0-master_20210514_1621013302.tar.gz - ``` hcl-dx-postgres-image-v1.8.0_20210514-1708.tar.gz - ``` hcl-dx-redis-image-5.0.1.tar.gz - ``` hcl-dx-remote-search-image-v95_CF195_20210514-1708.tar.gz - ``` hcl-dx-ringapi-image-v1.8.0_20210514-1709.tar.gz ## HCL DX 9.5 CF194 - **CF194** Important note: Please consult the HCL DX Support Knowledge Base article, [Manual Steps to Apply the Digital Experience 9.5 Container Deployment Core Certificate Update](https://support.hcltechsw.com/csm?id=kb_article&sysparm_article=KB0089699), to apply the certificate update to your HCL DX 9.5 container deployment. If deploying HCL DX 9.5 CF194 release, the package name and images are as follows: **HCL DX 9.5 CF194 Client - hcl-dx-client-v95-CF194.zip**: - ``` dxclient_v1.3.0_20210415-2128.zip **HCL DX 9.5 CF194 - hcl-dx-kubernetes-v95-CF194.zip**: - ``` HCL DX notices V9.5 CF194.txt - ``` dxclient_v1.3.0_20210415-2128.zip - ``` hcl-dx-ambassador-image-154.tar.gz - ``` hcl-dx-cloud-operator-image-v95_CF194_20210416-0233.tar.gz - ``` hcl-dx-cloud-scripts-v95_CF194_20210416-0233.zip - ``` hcl-dx-content-composer-image-v1.7.0_20210415-2121.tar.gz - ``` hcl-dx-core-image-v95_CF194_20210415-2120.tar.gz - ``` hcl-dx-digital-asset-management-operator-image-v95_CF194_20210415-2127.tar.gz - ``` hcl-dx-experience-api-sample-ui-v0.2.0.20210415-2121.zip - ``` hcl-dx-image-processor-image-v1.7.0_20210415-2120.tar.gz - ``` hcl-dx-openldap-image-v1.1.0-master_20210416_1618540820.tar.gz - ``` hcl-dx-postgres-image-v1.7.0_20210415-2120.tar.gz - ``` hcl-dx-redis-image-5.0.1.tar.gz - ``` hcl-dx-remote-search-image-v95_CF194_20210415-2120.tar.gz","title":"HCL DX 9.5 CF195"},{"location":"docker_o/docker/#hcl-dx-95-cf193","text":"CF193 If deploying HCL DX 9.5 CF193 release, the package name and images are as follows: HCL DX 9.5 CF193 Client - hcl-dx-client-v95-CF193.zip : ``` dxclient_v1.3.0_20210331-1335.zip **HCL DX 9.5 CF193 - hcl-dx-kubernetes-v95-CF193.zip**: - ``` HCL DX notices V9.5 CF193.txt - ``` dxclient_v1.3.0_20210331-1335.zip - ``` hcl-dx-ambassador-image-154.tar.gz - ``` hcl-dx-cloud-operator-image-v95_CF193_20210331-1847.tar.gz - ``` hcl-dx-cloud-scripts-v95_CF193_20210331-1847.zip - ``` hcl-dx-content-composer-image-v1.7.0_20210331-1333.tar.gz - ``` hcl-dx-core-image-v95_CF193_20210331-1336.tar.gz - ``` hcl-dx-digital-asset-management-operator-image-v95_CF193_20210331-1335.tar.gz - ``` hcl-dx-digital-asset-manager-image-v1.7.0_20210331-1339.tar.gz - ``` hcl-dx-experience-api-sample-ui-v0.2.0.20210331-1343.zip - ``` hcl-dx-image-processor-image-v1.7.0_20210331-1336.tar.gz - ``` hcl-dx-openldap-image-v1.1.0-master_20210331_1617216873.tar.gz - ``` hcl-dx-postgres-image-v1.7.0_20210331-1337.tar.gz - ``` hcl-dx-redis-image-5.0.1.tar.gz - ``` hcl-dx-remote-search-image-v95_CF193_20210331-1336.tar.gz - ``` hcl-dx-ringapi-image-v1.7.0_20210331-1339.tar.gz ## HCL DX 9.5 CF192 - **CF192** If deploying HCL DX 9.5 CF192 release, the package name and images are as follows: **hcl-dx-kubernetes-v95-CF192.zip**: - ``` HCL DX notices V9.5 CF192.txt - ``` dxclient_v1.2.0_20210305-1758.zip - ``` hcl-dx-ambassador-image-154.tar.gz - ``` hcl-dx-cloud-operator-image-v95_CF192_20210305-2309.tar.gz - ``` hcl-dx-cloud-scripts-v95_CF192_20210305-2309.zip - ``` hcl-dx-content-composer-image-v1.6.0_20210305-1756.tar.gz - ``` hcl-dx-core-image-v95_CF192_20210305-1758.tar.gz - ``` hcl-dx-digital-asset-management-operator-image-v95_CF192_20210305-1757.tar.gz - ``` hcl-dx-digital-asset-manager-image-v1.6.0_20210305-1802.tar.gz - ``` hcl-dx-experience-api-sample-ui-v0.2.0.20210305-1805.zip - ``` hcl-dx-image-processor-image-v1.6.0_20210305-1758.tar.gz - ``` hcl-dx-openldap-image-v1.0.0-master_20210305_1614986151.tar.gz - ``` hcl-dx-postgres-image-v1.6.0_20210305-1800.tar.gz - ``` hcl-dx-redis-image-5.0.1.tar.gz - ``` hcl-dx-remote-search-image-v95_CF192_20210305-1758.tar.gz - ``` hcl-dx-ringapi-image-v1.6.0_20210305-1802.tar.gz ## HCL DX 9.5 CF191 - **CF191** If deploying HCL DX 9.5 CF191 release, the package name and images are as follows: **hcl-dx-kubernetes-v95-CF191.zip** file: - ``` HCL DX notices V9.5 CF191.txt - ``` hcl-dx-ambassador-image-154.tar.gz - ``` hcl-dx-cloud-operator-image-v95_CF191_20201214-1527.tar.gz - ``` hcl-dx-cloud-scripts-v95_CF191_20201214-1527.zip - ``` hcl-dx-content-composer-image-v1.5.0_20201211-2151.tar.gz - ``` hcl-dx-core-image-v95_CF191_20201212-1421.tar.gz - ``` hcl-dx-digital-asset-management-operator-image-v95_CF191_20201211-2152.tar.gz - ``` hcl-dx-digital-asset-manager-image-v1.5.0_20201211-2155.tar.gz - ``` hcl-dx-experience-api-sample-ui-v0.2.0.20201211-2205.zip - ``` hcl-dx-image-processor-image-v1.5.0_20201211-2154.tar.gz - ``` hcl-dx-openldap-image-v1.0.0-master_20201212_1607741365.tar.gz - ``` hcl-dx-postgres-image-v1.5.0_20201211-2155.tar.gz - ``` hcl-dx-redis-image-5.0.1.tar.gz - ``` hcl-dx-remote-search-image-v95_CF191_20201212-1421.tar.gz - ``` hcl-dx-ringapi-image-v1.5.0_20201211-2200.tar.gz - ``` dxclient_v1.1.0_20201211-2153.zip **Note:** HCL DX 9.5 CF191 images are available and may be installed. HCL DX 9.5 CF191 is supported for new deployments only. DX administrators should not upgrade DX 9.5 container deployments to this release. ## HCL DX 9.5 CF19 - **CF19** If deploying HCL DX 9.5 CF19 release, the package name and images are as follows: **hcl-dx-kubernetes-v95-CF19.zip file**: - ``` HCL DX notices V9.5 CF19.txt - ``` hcl-dx-ambassador-image-154.tar.gz - ``` hcl-dx-cloud-operator-image-v95_CF19_20201110-0401.tar.gz - ``` hcl-dx-cloud-scripts-v95_CF19_20201110-0401.zip - ``` hcl-dx-content-composer-image-v1.4.0_20201109-2203.tar.gz - ``` hcl-dx-core-image-v95_CF19_20201109-2312.tar.gz - ``` hcl-dx-digital-asset-management-operator-image-v95_CF19_20201109-2204.tar.gz - ``` hcl-dx-digital-asset-manager-image-v1.4.0_20201109-2206.tar.gz - ``` hcl-dx-experience-api-sample-ui-v0.2.0.20201109-2208.zip - ``` hcl-dx-image-processor-image-v1.4.0_20201109-2204.tar.gz - ``` hcl-dx-openldap-image-v1.0.0-master_20201110_1604981292.tar.gz - ``` hcl-dx-postgres-image-v1.4.0_20201109-2206.tar.gz - ``` hcl-dx-redis-image-5.0.1.tar.gz - ``` hcl-dx-remote-search-image-v95_CF19_20201109-2312.tar.gz - ``` hcl-dx-ringapi-image-v1.4.0_20201109-2209.tar.gz - ``` dxclient_v1.0.0_20201110-2010.zip ## HCL DX 9.5 CF184 - **HCL DX 9.5 Container Update CF184** If deploying HCL DX 9.5 CF184 release, the package name and images are as follows: **hcl-dx-kubernetes-v95-CF184.zip files**: - ``` HCL DX notices V9.5 CF184.txt - ``` hcl-dx-ambassador-image-154.tar.gz - ``` hcl-dx-cloud-operator-image-v95_CF184_20200917-0054.tar.gz - ``` hcl-dx-cloud-scripts-v95_CF184_20200917-0054.zip - ``` hcl-dx-content-composer-image-v1.3.0_20200916-1952.tar.gz - ``` hcl-dx-core-image-v95_CF184_20200916-2009.tar.gz - ``` hcl-dx-digital-asset-management-operator-image-v95_CF184_20200916-2034.tar.gz - ``` hcl-dx-digital-asset-manager-image-v1.3.0_20200916-1953.tar.gz - ``` hcl-dx-image-processor-image-v1.3.0_20200916-1953.tar.gz - ``` hcl-dx-openldap-image-v1.0.0-master_20200917_1600304449.tar.gz - ``` hcl-dx-postgres-image-v1.3.0_20200916-2003.tar.gz - ``` hcl-dx-redis-image-5.0.1.tar.gz - ``` hcl-dx-remote-search-image-v95_CF184_20200916-2009.tar.gz - ``` hcl-dx-ringapi-image-v1.3.0_20200916-1953.tar.gz ## HCL DX 9.5 CF183 - **HCL DX 9.5 Container Update CF183** If deploying HCL DX 9.5 CF183 release, the image and package names are as follows: **CF183-core.zip files**: - ``` HCL DX notices V9.5 CF183.txt - ``` hcl-dx-ambassador-image-154.tar.gz - ``` hcl-dx-cloud-operator-image-v95_CF183_20200818-1852.tar.gz - ``` hcl-dx-cloud-scripts-v95_CF183_20200818-1852.zip - ``` hcl-dx-core-image-v95_CF183_20200818-1342.tar.gz - ``` hcl-dx-redis-image-5.0.1.tar.gz **CF183-other.zip files**: - ``` HCL DX notices V9.5 CF183.txt - ``` hcl-dx-content-composer-image-v1.2.0_20200818-1343.tar.gz - ``` hcl-dx-digital-asset-management-operator-image-v95_CF183_20200818-1344.tar.gz - ``` hcl-dx-digital-asset-manager-image-v1.2.0_20200818-1346.tar.gz - ``` hcl-dx-image-processor-image-v1.2.0_20200818-1345.tar.gz - ``` hcl-dx-openldap-image-v1.0.0-master_20200818_1597758965.tar.gz - ``` hcl-dx-postgres-image-v1.2.0_20200818-1349.tar.gz - ``` hcl-dx-remote-search-image-v95_CF183_20200818-1342.tar.gz - ``` hcl-dx-ringapi-image-v1.2.0_20200818-1351.tar.gz","title":"HCL DX 9.5 CF193"},{"location":"docker_o/docker/#hcl-dx-95-cf182","text":"CF182 If deploying HCL DX 9.5 CF182 release, the image and package names are as follows: hcl-dx-kubernetes-v95-CF182-core.zip : ``` HCL DX notices V9.5 CF182.txt - ``` hcl-dx-ambassador-image-0850.tar.gz - ``` hcl-dx-cloud-operator-image-v95_CF182_20200720-1708.tar.gz - ``` hcl-dx-cloud-scripts-v95_CF182_20200720-1708.zip - ``` hcl-dx-core-image-v95_CF182_20200720-1645.tar.gz **hcl-dx-kubernetes-v95-CF182-other.zip**: - ``` HCL DX notices V9.5 CF182.txt - ``` hcl-dx-content-composer-image-v1.1.0_20200720-1708.tar.gz - ``` hcl-dx-digital-asset-management-operator-image-v95_CF182_20200720-1716.tar.gz - ``` hcl-dx-digital-asset-manager-image-v1.1.0_20200720-1712.tar.gz - ``` hcl-dx-image-processor-image-v1.1.0_20200720-1716.tar.gz - ``` hcl-dx-openldap-image-v1.0.0-master_20200720_1595265588.tar.gz - ``` hcl-dx-postgres-image-v1.1.0_20200720-1715.tar.gz - ``` hcl-dx-remote-search-image-v95_CF182_20200720-1645.tar.gz - ``` hcl-dx-ringapi-image-v1.1.0_20200720-1707.tar.gz","title":"HCL DX 9.5 CF182"},{"location":"docker_o/docker/#hcl-dx-95-cf181","text":"CF181 If deploying HCL DX 9.5 CF181 and later container update release, the image and package names add HCL DX 9.5 Content Composer and Digital Asset Management components and supporting services images, as well as Remote Search and OpenLDAP images. See the following list of images presented within the HCL DX 9.5 Container Update CF181 package: hcl-dx-kubernetes-v95-CF181-core.zip : ``` hcl-dx-cloud-scripts-v95_CF181_xxxxxxxx-xxxx.zip - ``` hcl-dx-core-image-v95_CF181_xxxxxxxx-xxxx.tar.gz - ``` hcl-dx-cloud-operator-image-v95_CF181_xxxxxxxx-xxxx.tar.gz - ``` hcl-dx-ambassador-image-xxxx.tar.gz - ``` HCL DX notices V9.5 CF181.txt **hcl-dx-kubernetes-v95-CF181-other.zip**: - ``` hcl-dx-ringapi-image-v1.0.0_xxxxxxxx-xxxx.tar.gz - ``` hcl-dx-postgres-image-v1.0.0_xxxxxxxx-xxxx.tar.gz - ``` hcl-dx-openldap-image-v1.0.0-release_xxxxxxxx_xxxxxxxxxx.tar.gz - ``` hcl-dx-medialibrary-operator-image-v95_CF181_xxxxxxxx-xxxx.tar.gz - ``` hcl-dx-image-processor-image-v1.0.0_xxxxxxxx-xxxx.tar.gz - ``` hcl-dx-dxrs-image-v95_CF181_xxxxxxxx-xxxx.tar.gz ## HCL DX 9.5 CF18 - **CF18** If deploying HCL DX 9.5 CF18 and later container update release, the image and package names included for this are: - ``` hcl-dx-kubernetes-v95-CF18.zip - ``` hcl-dx-core-image-v95_CF18_xxxxxxxx-xxxx.tar.gz - ``` hcl-dx-cloud-operator-image-v95_CF18_xxxxxxxx-xxxx.tar.gz - ``` hcl-dx-cloud-scripts-v95_CF18_xxxxxxxx-xxxx.zip - ``` hcl-dx-ambassador-image-xxxx.tar.gz See the following sections for additional information: Docker image deployment Customizing the container deployment Requirements and limitations Parent topic: Digital Experience on containerized platforms","title":"HCL DX 9.5 CF181"},{"location":"docker_o/docker_compose/","text":"Docker image deployment using Docker Compose This section presents availability of a new option to deploy HCL Digital Experience 9.5 Docker images for non-production using Docker Compose . This approach streamlines deployment and configuration of HCL DX 9.5 components. For more information about Docker Compose, see the Docker Compose documentation . Pre-requisite: Download the Docker images for the HCL DX 9.5 Container Update version you wish to deploy. From your HCL Digital Experience entitlements in the HCL Software License Portal , the Docker images are in the HCL_Portal_8.5_9.0_9.5_CFs download package entry. Refer to the Docker image list for the latest HCL DX 9.5 container update releases. Find the HCL DX 9.5 Docker Compose scripts, installation and configuration instructions for non-production use in the repositories on the HCL Software Github . Use the HCL-DX tag to find the DX Docker Compose entry. Video: Use Docker Compose to install HCL DX 9.5 with Cloud Components for Developer Use","title":"Docker image deployment using Docker Compose"},{"location":"docker_o/docker_compose/#docker-image-deployment-using-docker-compose","text":"This section presents availability of a new option to deploy HCL Digital Experience 9.5 Docker images for non-production using Docker Compose . This approach streamlines deployment and configuration of HCL DX 9.5 components. For more information about Docker Compose, see the Docker Compose documentation . Pre-requisite: Download the Docker images for the HCL DX 9.5 Container Update version you wish to deploy. From your HCL Digital Experience entitlements in the HCL Software License Portal , the Docker images are in the HCL_Portal_8.5_9.0_9.5_CFs download package entry. Refer to the Docker image list for the latest HCL DX 9.5 container update releases. Find the HCL DX 9.5 Docker Compose scripts, installation and configuration instructions for non-production use in the repositories on the HCL Software Github . Use the HCL-DX tag to find the DX Docker Compose entry. Video: Use Docker Compose to install HCL DX 9.5 with Cloud Components for Developer Use","title":"Docker image deployment using Docker Compose"},{"location":"docker_o/docker_image_deployment/","text":"Docker image deployment This section describes the steps in deploying HCL Digital Experience 9.5 containers using Docker. Follow these steps to deploy the HCL Digital Experience 9.5 and later CF container update releases in Docker. Download the Docker image from your HCL Digital Experience entitlements in the HCL Software License Portal , in the HCL_Portal_8.5_9.0_9.5_CFs download package entry. Refer to the Docker image list for the latest HCL DX 9.5 container update releases. Open a terminal window and change to the root directory of the extracted package. Load the container into your Docker repository: docker load < hcl-dx-core-image-v95-xxxxxxxx-xxxx.tar.gz Run the HCL DX Docker container using either of the following commands: ``` docker run -p 10038:10038 -p 10039:10039 -p 10041:10041 -p 10042:10042 -p 10200:10200 -p 10202:10202 hcl/dx/core:v95_xxxxxxxx-xxxx - ``` docker run -p 10038:10038 -p 10039:10039 -p 10041:10041 -p 10042:10042 -p 10200:10200 -p 10202:10202 -v ~/dx-store/ wp_profile:/opt/HCL/wp_profile hcl/dx/core:v95_xxxxxxxx-xxxx In HCL DX 9.5 CF171, Administrators can use this command to run the container if credentials have been updated: - ``` docker run -e WAS_ADMIN=wasadmin -e WAS_PASSWORD=wasadminpwd -e DX_ADMIN=dxadmin -e DX_PASSWORD=dxadminpwd -p 10038:10038 -p 10039:10039 -p 10041:10041 -p 10042:10042 -p 10200:10200 -p 10202:10202 -v ~/dx-store/wp_profile:/opt/HCL/wp_profile hcl/dx/core:v95_xxxxxxxx-xxxx The additional syntax adds the ability for users to pass updated credentials for the HCL Portal Administrators. - ``` -e WAS_ADMIN=wasadmin - ``` -e WAS_PASSWORD=wasadminpwd - ``` -e DX_ADMIN=dxadmin - ``` -e DX_PASSWORD=dxadminpwd ``` **Notes:** - Make sure the ~/dx-store/wp\\_profile directory is created before you start the Docker container. This is required for persistence \\(for using `-v ~/dx-store/wp_profile:/opt/HCL/wp_profile hcl/dx/ core:v95_xxxxxxxx-xxxx`\\). - To use the HCL DX Configuration Wizard, start the Java virtual machine \\(JVM\\) within the running container with the following command: ``` docker exec <CONTAINER ID> /opt/HCL/AppServer/profiles/cw_profile/bin/startServer.sh server1 ``` - For HCL DX 9.5 CF171 and later, access the Configuration Wizard at https://localhost:10202/hcl/wizard. **Note:** For HCL DX 9.5 release earlier than CF171, access the Configuration Wizard at https://localhost:10202/ibm/wizard. - Upgrading an existing HCL DX 9.5 Docker container, using a persisted volume, to HCL DX 9.5 CF171 or HCL DX 9.5 CF172 may require launching the upgraded container twice. For example, if the following command fails with an error, re-running the command allows a successful upgrade and launch the container: ``` docker run -e WAS_ADMIN=wasadmin -e WAS_PASSWORD=wasadminpwd -e DX_ADMIN=dxadmin -e DX_PASSWORD=dxadminpwd -p 10038:10038 -p 10039:10039 -p 10041:10041 -p 10042:10042 -p 10200:10200 -p 10202:10202 -v ~/dx-store/wp_profile:/opt/HCL/wp_profile hcl/dx/core:v95_xxxxxxxx-xxxx ``` This issue is fixed in HCL DX 9.5 CF173. See the following sections for additional information: - [How to upload HCL Digital Experience 9.5 CF container images to a private repository](https://youtu.be/XJONRdpgCuo) - [Docker image list](docker_image_deployment.md) - [Customizing the container deployment](customizing_container_deployment.md) - [Containerization Limitations/Requirements](limitations_requirements.md)","title":"Docker image deployment"},{"location":"docker_o/docker_image_deployment/#docker-image-deployment","text":"This section describes the steps in deploying HCL Digital Experience 9.5 containers using Docker. Follow these steps to deploy the HCL Digital Experience 9.5 and later CF container update releases in Docker. Download the Docker image from your HCL Digital Experience entitlements in the HCL Software License Portal , in the HCL_Portal_8.5_9.0_9.5_CFs download package entry. Refer to the Docker image list for the latest HCL DX 9.5 container update releases. Open a terminal window and change to the root directory of the extracted package. Load the container into your Docker repository: docker load < hcl-dx-core-image-v95-xxxxxxxx-xxxx.tar.gz Run the HCL DX Docker container using either of the following commands: ``` docker run -p 10038:10038 -p 10039:10039 -p 10041:10041 -p 10042:10042 -p 10200:10200 -p 10202:10202 hcl/dx/core:v95_xxxxxxxx-xxxx - ``` docker run -p 10038:10038 -p 10039:10039 -p 10041:10041 -p 10042:10042 -p 10200:10200 -p 10202:10202 -v ~/dx-store/ wp_profile:/opt/HCL/wp_profile hcl/dx/core:v95_xxxxxxxx-xxxx In HCL DX 9.5 CF171, Administrators can use this command to run the container if credentials have been updated: - ``` docker run -e WAS_ADMIN=wasadmin -e WAS_PASSWORD=wasadminpwd -e DX_ADMIN=dxadmin -e DX_PASSWORD=dxadminpwd -p 10038:10038 -p 10039:10039 -p 10041:10041 -p 10042:10042 -p 10200:10200 -p 10202:10202 -v ~/dx-store/wp_profile:/opt/HCL/wp_profile hcl/dx/core:v95_xxxxxxxx-xxxx The additional syntax adds the ability for users to pass updated credentials for the HCL Portal Administrators. - ``` -e WAS_ADMIN=wasadmin - ``` -e WAS_PASSWORD=wasadminpwd - ``` -e DX_ADMIN=dxadmin - ``` -e DX_PASSWORD=dxadminpwd ``` **Notes:** - Make sure the ~/dx-store/wp\\_profile directory is created before you start the Docker container. This is required for persistence \\(for using `-v ~/dx-store/wp_profile:/opt/HCL/wp_profile hcl/dx/ core:v95_xxxxxxxx-xxxx`\\). - To use the HCL DX Configuration Wizard, start the Java virtual machine \\(JVM\\) within the running container with the following command: ``` docker exec <CONTAINER ID> /opt/HCL/AppServer/profiles/cw_profile/bin/startServer.sh server1 ``` - For HCL DX 9.5 CF171 and later, access the Configuration Wizard at https://localhost:10202/hcl/wizard. **Note:** For HCL DX 9.5 release earlier than CF171, access the Configuration Wizard at https://localhost:10202/ibm/wizard. - Upgrading an existing HCL DX 9.5 Docker container, using a persisted volume, to HCL DX 9.5 CF171 or HCL DX 9.5 CF172 may require launching the upgraded container twice. For example, if the following command fails with an error, re-running the command allows a successful upgrade and launch the container: ``` docker run -e WAS_ADMIN=wasadmin -e WAS_PASSWORD=wasadminpwd -e DX_ADMIN=dxadmin -e DX_PASSWORD=dxadminpwd -p 10038:10038 -p 10039:10039 -p 10041:10041 -p 10042:10042 -p 10200:10200 -p 10202:10202 -v ~/dx-store/wp_profile:/opt/HCL/wp_profile hcl/dx/core:v95_xxxxxxxx-xxxx ``` This issue is fixed in HCL DX 9.5 CF173. See the following sections for additional information: - [How to upload HCL Digital Experience 9.5 CF container images to a private repository](https://youtu.be/XJONRdpgCuo) - [Docker image list](docker_image_deployment.md) - [Customizing the container deployment](customizing_container_deployment.md) - [Containerization Limitations/Requirements](limitations_requirements.md)","title":"Docker image deployment"},{"location":"docker_o/docker_overview/","text":"Docker images for HCL Digital Experience 9.5 HCL Digital Experience 9.5 supports deployments on Docker and popular Kubernetes platforms. Learn more about the latest list of container images and supported deployment platforms. HCL Digital Experience 9.5 core and related component images are provided in your HCL Digital Experience entitlements in the HCL Software Licensing Portal . For the latest list of container images and supported deployment platforms please consult the Docker containers Deployment topic pages in this section. Overview Docker is a platform for developers and sysadmins to develop, deploy, and run applications with containers. Containerization is the use of Linux containers to deploy applications. While the use of containers to deploy applications is not new, containers are favored due to the ease of deploying applications like the latest version of HCL Digital Experience. The HCL Digital Experience containers are launched by running a runtime instance of an image. An image is an executable package that includes everything needed to run the HCL Digital Experience 9.5 application, including the code, a runtime, libraries, environment variables, and configuration files. Because it runs a discrete process, it does not take any more memory other than the executable image with state or user process. Installation, Deployment and Migration Guidance Proceed to the Deployment topic page and follow the installation steps outlined in the Docker or supported Kubernetes platform of choice. Documentation resource: Deployment To migrate an existing on-premises platform Digital Experience deployment to a supported Kubernetes platform, access the Staging topic page in this section. Documentation resource: Staging Once you have completed a Digital Experience 9.5 Container deployment, to update the DX 9.5 container images to the latest Container Update releases, follow steps outlined in the Container Maintenance Help Center topic in this section. Documentation resource: Maintenance Parent topic: DX on Docker","title":"Docker images for HCL Digital Experience 9.5"},{"location":"docker_o/docker_overview/#docker-images-for-hcl-digital-experience-95","text":"HCL Digital Experience 9.5 supports deployments on Docker and popular Kubernetes platforms. Learn more about the latest list of container images and supported deployment platforms. HCL Digital Experience 9.5 core and related component images are provided in your HCL Digital Experience entitlements in the HCL Software Licensing Portal . For the latest list of container images and supported deployment platforms please consult the Docker containers Deployment topic pages in this section.","title":"Docker images for HCL Digital Experience 9.5"},{"location":"docker_o/docker_overview/#overview","text":"Docker is a platform for developers and sysadmins to develop, deploy, and run applications with containers. Containerization is the use of Linux containers to deploy applications. While the use of containers to deploy applications is not new, containers are favored due to the ease of deploying applications like the latest version of HCL Digital Experience. The HCL Digital Experience containers are launched by running a runtime instance of an image. An image is an executable package that includes everything needed to run the HCL Digital Experience 9.5 application, including the code, a runtime, libraries, environment variables, and configuration files. Because it runs a discrete process, it does not take any more memory other than the executable image with state or user process.","title":"Overview"},{"location":"docker_o/docker_overview/#installation-deployment-and-migration-guidance","text":"Proceed to the Deployment topic page and follow the installation steps outlined in the Docker or supported Kubernetes platform of choice. Documentation resource: Deployment To migrate an existing on-premises platform Digital Experience deployment to a supported Kubernetes platform, access the Staging topic page in this section. Documentation resource: Staging Once you have completed a Digital Experience 9.5 Container deployment, to update the DX 9.5 container images to the latest Container Update releases, follow steps outlined in the Container Maintenance Help Center topic in this section. Documentation resource: Maintenance Parent topic: DX on Docker","title":"Installation, Deployment and Migration Guidance"},{"location":"docker_o/docker_remote_search/","text":"Configure Remote Search in Docker This section shows how to configure Remote Search for your HCL Digital Experience 9.5 Docker containers. Introduction To support search services when deployed to Docker container platforms in Kubernetes, administrators should configure Remote Search services. This requires a different setup and configuration steps than those used to set up Remote Search on a non-Docker container platform . Some differences in the non-Docker container platform procedures are outlined below: The serverindex.xml file on the Remote Search server when deployed to on-premises environments may have a host name that is not accurate in a container environment with respect to the actual host name of the server hosting the Remote Search server. Since Docker dynamically allocates the host names for the containers, the /etc/hosts file doesn\u2019t have static entries for the HCL Digital Experience 9.5 container-based server nor the Remote Search server. The WebSphere Application Server ND Administration console will not have correct host names for the HCL Digital Experience container. Deploying Remote Search in HCL Digital Experience 9.5 Docker containers Prerequisite : Download the HCL Digital Experience 9.5 Docker containers from your HCL Digital Experience entitlements from the HCL Software License Portal . The HCL DX 9.5 container update CF181 and higher packages will include a core software and Remote search container. Load both of these images into your Docker repository via the \u201cdocker load\u201d command. Note that if your organization has deployed these containers to a corporate Docker repository, you might use \u201cdocker pull\u201d instead to put it into your local repository. In this example, two Docker images and names are referred to. If a higher HCL Digital Experience 9.5 Container Update release is used, for example, HCL Digital Experience 9.5 CF181, the image names may vary. hcl-dx-core-image-v95_CF181_xxxxxxxx-xxxx.tar.gz hcl-dx-dxrs-image-v95_CF181_xxxxxxxx-xxxx.tar.gz EJBs and host names HCL Digital Experience 9.5 Container core and Portal Remote Search each use WebSphere Application Server as a base. As these components are on different hosts (containers), they need to communicate via IP. The initial conversation between HCL Digital Experience 9.5 core and the Remote Search server takes place over IIOP (rmi) which is the internet protocol of EJBs. Ideally, the /etc/hosts file of both containers would have the host name of the other. In other words, the /etc/hosts file of the HCL Digital Experience Container core would have a host reference for the Remote Search and vice versa. However, three factors make this impossible. The containers are based on Red Hat UBI, the /etc/hosts file is owned by root , and the root password (and sudo ) is not available. Apply the command below to define host references for the Remote Search service from the Digital Experience Container core. Therefore, a way to force Docker to write the /etc/hosts file at container initialization time is needed. This is done via the Docker switch add-host . The situation is further complicated (at least on Linux) by the fact that containers on the default bridge network of Docker cannot DNS name resolve other containers on the same subnet. Therefore, one uses the Docker host as a proxy and starts both containers with the following: docker run \u2013add-host=dockerhost:172.19.0.1 \u2026 This has the effect of adding an entry in the /etc/hosts file on the HCL Digital Experience 9.5 Container core like this: 172.19.0.1 dockerhost Those familiar with Docker deployment practices will recognize 171.19.0.1 as the IP bridge address of the host machine that starts the Docker containers. Since all Docker containers have unique ports and the Docker host machine is not allowed to use these unique ports, one can refer to a port on any container as dockerhost:port_number . Launch the HCL Digital Experience 9.5 Core and Remote Search containers To deploy, following is the complete docker run command for both the HCL Digital Experience 9.5 Core and Remote Search containers. In these examples, wpsadmin / wpsadmin are used as the HCL Digital Experience and WebSphere Application Server admin user ID and password credentials. docker run --add-host=dockerhost:172.19.0.1 -d -e WAS_ADMIN=wpsadmin -e WAS_PASSWORD=wpsadmin -e DX_ADMIN=wpsadmin -e DX_PASSWORD=wpsadmin -p 9043:9043 -p 9403:9403 -p 2809:2809 -p 9060:9060 -v /home/dxengineer/Documents/prs_profile:/opt/HCL/AppServer/profiles/prs_profile hcl/dx/dxrs:v95_CF181_20200622-1550 docker run --add-host=dockerhost:172.19.0.1 -d -e WAS_ADMIN=wpsadmin -e WAS_PASSWORD=wpsadmin -e DX_ADMIN=wpsadmin -e DX_PASSWORD=wpsadmin -p 10038:10038 -p 10039:10039 -p 10041:10041 -p 10042:10042 -v /home/dxengineer/Documents/wp_profile:/opt/HCL/wp_profile hcl/dx/core:v95_CF181_20200622-1550 The persisted profile for each container is located at /home/dxengineer/Documents/. The HCL Digital Experience admin username and password are passed as environment variables. Defining serverindex.xml on the Remote Search server On the HCL DX 9.5 container Remote search server, the serverindex.xml file is located at: /opt/HCL/AppServer/profiles/prs_profile/config/cells/{cell name}/nodes/{node name} Note that immediately after the Remote Search server is started (and since the profile is persisted on a persisted sub-directory), this file can be found at: {persisted volume for remote search profile}/prs_profile/config/cells/{cell name}/nodes/{node name} The serverindex.xml file contains 5 lines: host=\u201d{some hostname}\u201d where {some hostname} might likely be \"localhost\" or some host name like \u201c33b7e5004319\u201d . However, remote search will not work correctly until this host name field is replaced with a host name exactly like the host name in the \u201ciiop\u201d url in the search service is coded. So, for example, if your Portal search service has coded the \"iiop\" URL as \u201ciiop://some.host.com:2809\u201d , the host in serverindex.hml needs to be host=\u201dsome.host.com\u201d . It could be that your \"iiop\" url has the host name \"dockerhost\" if your iiop url lets your docker host route that URL. In that case, change these 5 lines to the following: host=\u201ddockerhost\u201d (apply the string \u201cdockerhost\u201d) Upon completion, when the HCL Digital Experience 9.5 Container core server communicates to the container Remote Search server over \"iiop\", the Remote Search server will return \u201cdockerhost\u201d as the host name of the Remote Search server. The HCL Digital Experience 9.5 Container has a configuration that will append the port to the host name that was just returned. Digital Experience instructions for Remote Search configuration The following guidance aligns with the Remote Search services configuration instructions available in the Remote Search services topic for deployment to non-container HCL Digital Experience servers. All of the instructions contained in the Remote Search services topic should also be completed in a Docker-based HCL Digital Experience deployment. The following guidance outlines specific settings that were used in the Remote Search service DX Docker deployment. Create a single sign-on (SSO) domain between HCL Digital Experience 9.5 container and the Remote Search service container by following the non-container on-premises procedure for Creating a single sign-on domain between HCL Portal and the Remote Search service . This entails exchanging SSL certificates and LTPA domain tokens. Note: When retrieving the SSL certificates from the host server, use dockerhost (as the host) and the appropriate port for the SSL access. In the examples, the Remote Search server is on dockerhost:9443 and the DX host is on dockerhost:10042. You must also complete Setting the search user ID and Removing search collections before creating a new search service. Create a new search service and use the following values for a Remote Search services configuration to a Docker container deployment. See the section on Creating a new search service for more information. Item Value IIOP_URL iiop://dockerhost:2809 PSE TYPE Select ejb from the pull down. EJB ejb/com/ibm/hrl/portlets/WsPse/WebScannerLiteEJBHome DefaultCollectionsDirectory Leave empty. Search service implementation Select Portal Search Service Type from the pull down. CONFIG_FOLDER_PATH Did not set (differs from non-container instructions). Note: Once completed and saved, the HCL Digital Experience 9.5 container deployment has a new search service called Remote PSE service EJB , with a green check mark confirming that the service was correctly set up and is able to communicate with the Remote Search container. Based on the previously created Remote Search service, create a Portal Search Collection and a JCR Search Collection using the following parameters. Use the following parameters to create a Portal search collection . Parameter Value Search collection name Portal Search Collection Search collection location /opt/HCL/AppServer/profiles/prs_profile/SearchCollections/PortalSearchCollection Portal Search Content Source Configuration. Use the following URL for Collect documents linked from this URL : https://dockerhost:10042/wps/seedlist/myserver?Source=com.ibm.lotus.search.plugins.seedlist.retriever.portal.PortalRetrieverFactory&amp;Action=GetDocuments&amp;Range=100&amp;locale=en-US Note: The host and port are the Docker host and port to which 10042 is mapped. In this case, 10042 is the HttpQueueInboundDefaultSecure port on the HCL Digital Experience server. Note that you can also put this URL in a browser (on the Docker host) and confirm that the response is an ATOM feed. On the Security panel, use dockerhost as the host name, along with the username wpsadmin and the associated password for wpsadmin . Use the following parameters to create a JCR search collection . Parameter Value Search collection name JCRCollection1 Search collection location /opt/HCL/AppServer/profiles/prs_profile/SearchCollections/JCRCollection1 JCR Content Source Configuration. Use the following URL for Collect documents linked from this URL : https://dockerhost:10042/wps/seedlist/myserver?Action=GetDocuments&amp;Format=ATOM&amp;Locale=en_US&amp;Range=100&amp;Source=com.ibm.lotus.search.plugins.seedlist.retriever.jcr.JCRRetrieverFactory&amp;Start=0&amp;SeedlistId=1@OOTB_CRAWLER1 Note: The host and port are the Docker host and port to which 10042 is mapped. In this case, 10042 is the HttpQueueInboundDefaultSecure port on the HCL Digital Experience server. Note that you can also put this URL in a browser (on the Docker host) and confirm that the response is an ATOM feed. On the Security panel, use dockerhost as the host name, along with the username wpsadmin and the associated password for wpsadmin . Configure WCM Authoring Portlet search function. Note: Even though the documents are gathered by the Remote Search function from the JCR, additional configuration is needed in order for the HCL Web Content Manager (WCM) Authoring Portlet search to use document search. Set the following values for this configuration. Set the Custom properties for the WebSphere Application Server Resource Environment Provider, JCR ConfigService , using the following values: Property Value jcr.textsearch.enabled true jcr.textsearch.indexdirectory /opt/HCL/AppServer/profiles/prs_profile/SearchCollections jcr.textsearch.PSE.type ejb jcr.textsearch.EJB.IIOP.URL iiop://dockerhost:2809 jcr.textsearch.EJB.EJBName ejb/com/ibm/hrl/portlets/WsPse/WebScannerLiteEJBHome Note: On the jcr.textsearch.indexdirectory , the sub-directory JCRCollection1 is NOT included in the path. Parent topic: Customizing your container deployment","title":"Configure Remote Search in Docker"},{"location":"docker_o/docker_remote_search/#configure-remote-search-in-docker","text":"This section shows how to configure Remote Search for your HCL Digital Experience 9.5 Docker containers.","title":"Configure Remote Search in Docker"},{"location":"docker_o/docker_remote_search/#introduction","text":"To support search services when deployed to Docker container platforms in Kubernetes, administrators should configure Remote Search services. This requires a different setup and configuration steps than those used to set up Remote Search on a non-Docker container platform . Some differences in the non-Docker container platform procedures are outlined below: The serverindex.xml file on the Remote Search server when deployed to on-premises environments may have a host name that is not accurate in a container environment with respect to the actual host name of the server hosting the Remote Search server. Since Docker dynamically allocates the host names for the containers, the /etc/hosts file doesn\u2019t have static entries for the HCL Digital Experience 9.5 container-based server nor the Remote Search server. The WebSphere Application Server ND Administration console will not have correct host names for the HCL Digital Experience container.","title":"Introduction"},{"location":"docker_o/docker_remote_search/#deploying-remote-search-in-hcl-digital-experience-95-docker-containers","text":"Prerequisite : Download the HCL Digital Experience 9.5 Docker containers from your HCL Digital Experience entitlements from the HCL Software License Portal . The HCL DX 9.5 container update CF181 and higher packages will include a core software and Remote search container. Load both of these images into your Docker repository via the \u201cdocker load\u201d command. Note that if your organization has deployed these containers to a corporate Docker repository, you might use \u201cdocker pull\u201d instead to put it into your local repository. In this example, two Docker images and names are referred to. If a higher HCL Digital Experience 9.5 Container Update release is used, for example, HCL Digital Experience 9.5 CF181, the image names may vary. hcl-dx-core-image-v95_CF181_xxxxxxxx-xxxx.tar.gz hcl-dx-dxrs-image-v95_CF181_xxxxxxxx-xxxx.tar.gz","title":"Deploying Remote Search in HCL Digital Experience 9.5 Docker containers"},{"location":"docker_o/docker_remote_search/#ejbs-and-host-names","text":"HCL Digital Experience 9.5 Container core and Portal Remote Search each use WebSphere Application Server as a base. As these components are on different hosts (containers), they need to communicate via IP. The initial conversation between HCL Digital Experience 9.5 core and the Remote Search server takes place over IIOP (rmi) which is the internet protocol of EJBs. Ideally, the /etc/hosts file of both containers would have the host name of the other. In other words, the /etc/hosts file of the HCL Digital Experience Container core would have a host reference for the Remote Search and vice versa. However, three factors make this impossible. The containers are based on Red Hat UBI, the /etc/hosts file is owned by root , and the root password (and sudo ) is not available. Apply the command below to define host references for the Remote Search service from the Digital Experience Container core. Therefore, a way to force Docker to write the /etc/hosts file at container initialization time is needed. This is done via the Docker switch add-host . The situation is further complicated (at least on Linux) by the fact that containers on the default bridge network of Docker cannot DNS name resolve other containers on the same subnet. Therefore, one uses the Docker host as a proxy and starts both containers with the following: docker run \u2013add-host=dockerhost:172.19.0.1 \u2026 This has the effect of adding an entry in the /etc/hosts file on the HCL Digital Experience 9.5 Container core like this: 172.19.0.1 dockerhost Those familiar with Docker deployment practices will recognize 171.19.0.1 as the IP bridge address of the host machine that starts the Docker containers. Since all Docker containers have unique ports and the Docker host machine is not allowed to use these unique ports, one can refer to a port on any container as dockerhost:port_number .","title":"EJBs and host names"},{"location":"docker_o/docker_remote_search/#launch-the-hcl-digital-experience-95-core-and-remote-search-containers","text":"To deploy, following is the complete docker run command for both the HCL Digital Experience 9.5 Core and Remote Search containers. In these examples, wpsadmin / wpsadmin are used as the HCL Digital Experience and WebSphere Application Server admin user ID and password credentials. docker run --add-host=dockerhost:172.19.0.1 -d -e WAS_ADMIN=wpsadmin -e WAS_PASSWORD=wpsadmin -e DX_ADMIN=wpsadmin -e DX_PASSWORD=wpsadmin -p 9043:9043 -p 9403:9403 -p 2809:2809 -p 9060:9060 -v /home/dxengineer/Documents/prs_profile:/opt/HCL/AppServer/profiles/prs_profile hcl/dx/dxrs:v95_CF181_20200622-1550 docker run --add-host=dockerhost:172.19.0.1 -d -e WAS_ADMIN=wpsadmin -e WAS_PASSWORD=wpsadmin -e DX_ADMIN=wpsadmin -e DX_PASSWORD=wpsadmin -p 10038:10038 -p 10039:10039 -p 10041:10041 -p 10042:10042 -v /home/dxengineer/Documents/wp_profile:/opt/HCL/wp_profile hcl/dx/core:v95_CF181_20200622-1550 The persisted profile for each container is located at /home/dxengineer/Documents/. The HCL Digital Experience admin username and password are passed as environment variables.","title":"Launch the HCL Digital Experience 9.5 Core and Remote Search containers"},{"location":"docker_o/docker_remote_search/#defining-serverindexxml-on-the-remote-search-server","text":"On the HCL DX 9.5 container Remote search server, the serverindex.xml file is located at: /opt/HCL/AppServer/profiles/prs_profile/config/cells/{cell name}/nodes/{node name} Note that immediately after the Remote Search server is started (and since the profile is persisted on a persisted sub-directory), this file can be found at: {persisted volume for remote search profile}/prs_profile/config/cells/{cell name}/nodes/{node name} The serverindex.xml file contains 5 lines: host=\u201d{some hostname}\u201d where {some hostname} might likely be \"localhost\" or some host name like \u201c33b7e5004319\u201d . However, remote search will not work correctly until this host name field is replaced with a host name exactly like the host name in the \u201ciiop\u201d url in the search service is coded. So, for example, if your Portal search service has coded the \"iiop\" URL as \u201ciiop://some.host.com:2809\u201d , the host in serverindex.hml needs to be host=\u201dsome.host.com\u201d . It could be that your \"iiop\" url has the host name \"dockerhost\" if your iiop url lets your docker host route that URL. In that case, change these 5 lines to the following: host=\u201ddockerhost\u201d (apply the string \u201cdockerhost\u201d) Upon completion, when the HCL Digital Experience 9.5 Container core server communicates to the container Remote Search server over \"iiop\", the Remote Search server will return \u201cdockerhost\u201d as the host name of the Remote Search server. The HCL Digital Experience 9.5 Container has a configuration that will append the port to the host name that was just returned.","title":"Defining serverindex.xml on the Remote Search server"},{"location":"docker_o/docker_remote_search/#digital-experience-instructions-for-remote-search-configuration","text":"The following guidance aligns with the Remote Search services configuration instructions available in the Remote Search services topic for deployment to non-container HCL Digital Experience servers. All of the instructions contained in the Remote Search services topic should also be completed in a Docker-based HCL Digital Experience deployment. The following guidance outlines specific settings that were used in the Remote Search service DX Docker deployment. Create a single sign-on (SSO) domain between HCL Digital Experience 9.5 container and the Remote Search service container by following the non-container on-premises procedure for Creating a single sign-on domain between HCL Portal and the Remote Search service . This entails exchanging SSL certificates and LTPA domain tokens. Note: When retrieving the SSL certificates from the host server, use dockerhost (as the host) and the appropriate port for the SSL access. In the examples, the Remote Search server is on dockerhost:9443 and the DX host is on dockerhost:10042. You must also complete Setting the search user ID and Removing search collections before creating a new search service. Create a new search service and use the following values for a Remote Search services configuration to a Docker container deployment. See the section on Creating a new search service for more information. Item Value IIOP_URL iiop://dockerhost:2809 PSE TYPE Select ejb from the pull down. EJB ejb/com/ibm/hrl/portlets/WsPse/WebScannerLiteEJBHome DefaultCollectionsDirectory Leave empty. Search service implementation Select Portal Search Service Type from the pull down. CONFIG_FOLDER_PATH Did not set (differs from non-container instructions). Note: Once completed and saved, the HCL Digital Experience 9.5 container deployment has a new search service called Remote PSE service EJB , with a green check mark confirming that the service was correctly set up and is able to communicate with the Remote Search container. Based on the previously created Remote Search service, create a Portal Search Collection and a JCR Search Collection using the following parameters. Use the following parameters to create a Portal search collection . Parameter Value Search collection name Portal Search Collection Search collection location /opt/HCL/AppServer/profiles/prs_profile/SearchCollections/PortalSearchCollection Portal Search Content Source Configuration. Use the following URL for Collect documents linked from this URL : https://dockerhost:10042/wps/seedlist/myserver?Source=com.ibm.lotus.search.plugins.seedlist.retriever.portal.PortalRetrieverFactory&amp;Action=GetDocuments&amp;Range=100&amp;locale=en-US Note: The host and port are the Docker host and port to which 10042 is mapped. In this case, 10042 is the HttpQueueInboundDefaultSecure port on the HCL Digital Experience server. Note that you can also put this URL in a browser (on the Docker host) and confirm that the response is an ATOM feed. On the Security panel, use dockerhost as the host name, along with the username wpsadmin and the associated password for wpsadmin . Use the following parameters to create a JCR search collection . Parameter Value Search collection name JCRCollection1 Search collection location /opt/HCL/AppServer/profiles/prs_profile/SearchCollections/JCRCollection1 JCR Content Source Configuration. Use the following URL for Collect documents linked from this URL : https://dockerhost:10042/wps/seedlist/myserver?Action=GetDocuments&amp;Format=ATOM&amp;Locale=en_US&amp;Range=100&amp;Source=com.ibm.lotus.search.plugins.seedlist.retriever.jcr.JCRRetrieverFactory&amp;Start=0&amp;SeedlistId=1@OOTB_CRAWLER1 Note: The host and port are the Docker host and port to which 10042 is mapped. In this case, 10042 is the HttpQueueInboundDefaultSecure port on the HCL Digital Experience server. Note that you can also put this URL in a browser (on the Docker host) and confirm that the response is an ATOM feed. On the Security panel, use dockerhost as the host name, along with the username wpsadmin and the associated password for wpsadmin . Configure WCM Authoring Portlet search function. Note: Even though the documents are gathered by the Remote Search function from the JCR, additional configuration is needed in order for the HCL Web Content Manager (WCM) Authoring Portlet search to use document search. Set the following values for this configuration. Set the Custom properties for the WebSphere Application Server Resource Environment Provider, JCR ConfigService , using the following values: Property Value jcr.textsearch.enabled true jcr.textsearch.indexdirectory /opt/HCL/AppServer/profiles/prs_profile/SearchCollections jcr.textsearch.PSE.type ejb jcr.textsearch.EJB.IIOP.URL iiop://dockerhost:2809 jcr.textsearch.EJB.EJBName ejb/com/ibm/hrl/portlets/WsPse/WebScannerLiteEJBHome Note: On the jcr.textsearch.indexdirectory , the sub-directory JCRCollection1 is NOT included in the path. Parent topic: Customizing your container deployment","title":"Digital Experience instructions for Remote Search configuration"},{"location":"install/deployment_patterns/","text":"Roadmaps to deploy your HCL Digital Experience system Review the roadmaps to understand the common deployment, configuration, migration, and integration patterns.","title":"Roadmaps to deploy your HCL Digital Experience system"},{"location":"install/deployment_patterns/#roadmaps-to-deploy-your-hcl-digital-experience-system","text":"Review the roadmaps to understand the common deployment, configuration, migration, and integration patterns.","title":"Roadmaps to deploy your HCL Digital Experience system"},{"location":"install/inst_cw_addons/","text":"Install and uninstall add-ons using the Configuration Wizard You can install add-on functionality to your HCL Portal with the solution installer through the Configuration Wizard. The add-ons that are accepted by the configuration options are .paa files. For more information, see the solution installer documentation. Complete the following steps to use the Configuration Wizard to install or uninstall the add-ons: Access the Configuration Wizard. Go to http://your_server:10200/hcl/wizard. Log in to the Configuration Wizard with the administrative ID for the configuration wizard profile, cw_profile. Click Add On New Capability To interact with the solution installer through the configuration wizard, select Install Add-ons or Uninstall Add-ons . Provide information about your environment. Save your wizard selections to use the same values that you entered later. Choose one of the following options: Click Download Files to run the steps remotely. Click Run All Steps to run the steps locally. Typical versus advanced installation scenarios Two different installation scenarios are supported through the Add On New Capability options in the Configuration Wizard. These scenarios are the typical and advanced installation scenarios. Typical The typical scenario is for simple paa files that often contain only one component, but is not limited to it, and can be installed directly without any additional configuration. The typical scenario installs/registers the paa file with the configEngine and then automatically deploys the content to HCL Portal. Advanced The advanced scenario provides you with much greater flexibility in how to install the paa file. If you select Advanced Install on the Install type screen, when the workflow completes, the paa file is installed to the ConfigEngine, but it is not deployed to portal. Instead, a new configuration option specific to that paa file is generated. Use the generated instructions to configure the deployment settings. Finally, a Launch configuration button displays so that you can continue with the deployment. After you click Launch configuration , follow the steps to ensure that the paa file is deployed. You can select the components that you want to install, if there is more than one component from the information that is presented in this additional configuration option. This step is useful where demonstration content is included in the paa file. Or, if one of the components is designated as virtual portal content only. In addition, if there are HCL Web Content Manager libraries that are found in the paa file that exist on the server, you can select to replace them from the libraries in the paa file. A list of virtual portals that are available at the time of the creation of the configuration option are also presented so that you can choose where the selected content is deployed. In the advanced scenario, the additional configuration that is called Deploy-Remove-PAA-assemblyName is also the mechanism in which content is removed from the portal. Depending on what is required, you can select the type of function from the configuration option. The Deploy-Remove_PAA-*.* option is added to the Add-on new capability section of the configuration wizard. After the configuration option is added to the configuration wizard, you can add modifications to thepaa file. When you uninstall by using the Uninstall Add-ons with the Advanced setting the Deploy-Remove-PAA-*.* option is removed from the configuration wizard repository. However, the option still displays in the list of active configuration options under the Add On New Capability section of the wizard. To remove these items, you need to restart server1 in the cw_profile. Restarting refreshes the repository and ensures that the items no longer show up. Note: If you install and deploy a paa file by using the advanced scenario, you must also remove the content that uses the paa-specific option before you uninstall. You can remove this content by using the advanced selection during the Uninstall add-ons option.","title":"Install and uninstall add-ons using the Configuration Wizard"},{"location":"install/inst_cw_addons/#install-and-uninstall-add-ons-using-the-configuration-wizard","text":"You can install add-on functionality to your HCL Portal with the solution installer through the Configuration Wizard. The add-ons that are accepted by the configuration options are .paa files. For more information, see the solution installer documentation. Complete the following steps to use the Configuration Wizard to install or uninstall the add-ons: Access the Configuration Wizard. Go to http://your_server:10200/hcl/wizard. Log in to the Configuration Wizard with the administrative ID for the configuration wizard profile, cw_profile. Click Add On New Capability To interact with the solution installer through the configuration wizard, select Install Add-ons or Uninstall Add-ons . Provide information about your environment. Save your wizard selections to use the same values that you entered later. Choose one of the following options: Click Download Files to run the steps remotely. Click Run All Steps to run the steps locally.","title":"Install and uninstall add-ons using the Configuration Wizard"},{"location":"install/inst_cw_addons/#typical-versus-advanced-installation-scenarios","text":"Two different installation scenarios are supported through the Add On New Capability options in the Configuration Wizard. These scenarios are the typical and advanced installation scenarios. Typical The typical scenario is for simple paa files that often contain only one component, but is not limited to it, and can be installed directly without any additional configuration. The typical scenario installs/registers the paa file with the configEngine and then automatically deploys the content to HCL Portal. Advanced The advanced scenario provides you with much greater flexibility in how to install the paa file. If you select Advanced Install on the Install type screen, when the workflow completes, the paa file is installed to the ConfigEngine, but it is not deployed to portal. Instead, a new configuration option specific to that paa file is generated. Use the generated instructions to configure the deployment settings. Finally, a Launch configuration button displays so that you can continue with the deployment. After you click Launch configuration , follow the steps to ensure that the paa file is deployed. You can select the components that you want to install, if there is more than one component from the information that is presented in this additional configuration option. This step is useful where demonstration content is included in the paa file. Or, if one of the components is designated as virtual portal content only. In addition, if there are HCL Web Content Manager libraries that are found in the paa file that exist on the server, you can select to replace them from the libraries in the paa file. A list of virtual portals that are available at the time of the creation of the configuration option are also presented so that you can choose where the selected content is deployed. In the advanced scenario, the additional configuration that is called Deploy-Remove-PAA-assemblyName is also the mechanism in which content is removed from the portal. Depending on what is required, you can select the type of function from the configuration option. The Deploy-Remove_PAA-*.* option is added to the Add-on new capability section of the configuration wizard. After the configuration option is added to the configuration wizard, you can add modifications to thepaa file. When you uninstall by using the Uninstall Add-ons with the Advanced setting the Deploy-Remove-PAA-*.* option is removed from the configuration wizard repository. However, the option still displays in the list of active configuration options under the Add On New Capability section of the wizard. To remove these items, you need to restart server1 in the cw_profile. Restarting refreshes the repository and ensures that the items no longer show up. Note: If you install and deploy a paa file by using the advanced scenario, you must also remove the content that uses the paa-specific option before you uninstall. You can remove this content by using the advanced selection during the Uninstall add-ons option.","title":"Typical versus advanced installation scenarios"},{"location":"install/integrate_google_analytics/","text":"Integrate Google Analytics with HCL Digital Experience This section includes information set up integration of Digital Experience sites with Google Analytics and to view the resulting web analytics tracking to assess the effectiveness of your DX site pages with end user audiences. Google Analytics provides ways for website owners to collect data on the visitors of their website, their activity and their interactions. Complete the following steps to integrate Google Analytics to the HCL Digital Experience platform and to apply the integration to assess the effectiveness of DX sites with your target user audiences. Installation HCL Digital Experience utilizes the platform Active Site Analytics framework, which includes application scripts, called Aggregators, to collect page interactions data sent to external web analytics services for analysis. HCL DX administrators and page owners can manage the aggregators. They can assign an aggregator to one or more DX labels or pages. In HCL DX 9.5 CF19 and higher, a new Active Site Analytics aggregator for Google Analytics is available. Adding an Active Site Analytics aggregator to a DX site page Obtain a Google Analytics account with ability to connect to your Digital Experience site. Add the DX GoogleAnalyticsAggregator.js to the HCL DX theme profile . In HCL DX 9.5 CF19 and higher, the GoogleAnalyticsAggregator.js file is located in the PortalServer_root/doc/js-samples directory. If using a WebDAV-based theme, copy the GoogleAnalyticsAggregator.js file to mycontenthandler/dav/fs-type1/theme/{your-custom-theme}/js. If using a WAR-based theme, include the GoogleAnalyticsAggregator.js file in the static theme WAR file. For example, when using a WAR-based theme, the location of the GoogleAnalyticsAggregator.js file after installing to the <YourTheme> WAR file will be deployed under wp_profile : wp_profile/installedApps/<cell>/<YourTheme.ear>/<YourTheme.war>/themes/<YourTheme>/js Refer to the file tree below how the custom theme app will be deployed: wp_profile ---> installedApps ---> <cell> ---> <YourTheme.ear> ---> <YourTheme.war> ---> themes ---> <YourTheme> ---> js ---> GoogleAnalyticsAggregator.js Add the DX GoogleAnalyticsAggregator.js to the HCL DX theme profile . Note: The theme profile used by the page(s) needs to include wp_analytics or at least wp_analytics_aggregator . HCL DX without Practitioner Studio installed: a. On Site Manager , select Page > Page Settings > Page Properties > Advanced b. Go to Manage Pages portlet, click the Administration menu icon. Then, select Portal User Interface > Manage Pages . HCL DX 9.5 with Practitioner Studio installed: a. Select Administration > Site Management > Pages to access the Manage Pages interface. b. Locate the page to which you want to assign the aggregator. Use the Manage Pages portlet to locate the page. Note: The page must be located as a child of the portal content root. c. Select Edit Page Properties for the page that you selected. Note: You cannot add an Active Site Analytics aggregator to the content root. Edit Page Properties is not available for the content root. d. To expand the available choices, click the plus sign (+) icon next to Advanced Options . e. Click I want to set parameters . f. In the field New parameter , type a string that starts with asa_aggregator or asa_dependency . Values that correspond to names that start with the string asa_aggregator are added to the page body, names that start with asa_dependency are added to the head. Both the aggregators and dependencies are added to the portal page in alphabetical order according to the Java method Collections.sort() . g. In the New value field, type the name of the aggregator script file, in this case: GoogleAnalyticsAggregator.js. h. Click Add . i. Verify that the new parameter is added to the list. j. Repeat steps F - I for all aggregators and dependencies. k. Click OK to return to the main Page Properties screen. l. Click OK to save your changes and return to the Manage Pages screen. Note: Child pages inherit the script that is set on the parent page. If you want to use a different aggregator on a child page, follow the same procedure that is previously addressed for the child page to make the appropriate assignment. If you want to block inheriting the aggregator setting from the parent page, follow the same procedure, but leave the value empty. As a result, the page has no aggregator that is assigned any longer, and all child pages of the parent page inherit the new setting. Log in to your Google Analytics account and obtain the GA_MEASUREMENT_ID in your Google Analytics Dashboard. It is also referred to as Tracking ID . Example: Add the following metadata in your target HCL DX page(s) properties: asa_dependency : https://www.googletagmanager.com/gtag/js?id=GA_MEASUREMENT_ID asa_aggregator : GoogleAnalyticsAggregator.js asa_js_ga_measurement_id : GA_MEASUREMENT_ID Example: Optionally, you can register the Active Site Analytics tags/microformats as custom dimensions or metrics in the Google Analytics Dashboard and configure the aggregator to use your custom map. See Google Analytics Custom Dimensions & Metrics . For a list of Active Site Analytics tags associated with HCL DX site pages that can be tracked by the Google Analytics Aggregator, see How Active Site Analytics data is represented in the portal and Supported aggregator tags . Access the HCL Digital Experience site page analytics from Google Analytics analyze HCL DX site activity. After installing and configuring the aggregator to track analytics from specific HCL DX site pages using the steps above, DX content authors and site owners with access to Google Analytics can view the DX site activity tracked and reflected in Google Analytics Dashboard's real-time reports as an increase in the pageviews and active users. See the following example: Refer to the Analytics tags and site promotions topics for more information on how to add additional tags and site promotions in addition to the out-of-the-box ones. Configuration options for the HCL DX Google Analytics Aggregator HCL DX administrators, content authors and site owners may optionally discontinue Google Analytics tracking of HCL DX pages, without removing the page metadata ( asa_dependency ) by adding the following \u2018opt-out\u2019 metadata in to the DX page(s) properties: asa_js_ga.optout: true This step will programmatically set the following window property: window['ga-disable-GA_MEASUREMENT_ID'] = true See Disable Google Analytics measurement for additional information.","title":"Integrate Google Analytics with HCL Digital Experience"},{"location":"install/integrate_google_analytics/#integrate-google-analytics-with-hcl-digital-experience","text":"This section includes information set up integration of Digital Experience sites with Google Analytics and to view the resulting web analytics tracking to assess the effectiveness of your DX site pages with end user audiences. Google Analytics provides ways for website owners to collect data on the visitors of their website, their activity and their interactions. Complete the following steps to integrate Google Analytics to the HCL Digital Experience platform and to apply the integration to assess the effectiveness of DX sites with your target user audiences.","title":"Integrate Google Analytics with HCL Digital Experience"},{"location":"install/integrate_google_analytics/#installation","text":"HCL Digital Experience utilizes the platform Active Site Analytics framework, which includes application scripts, called Aggregators, to collect page interactions data sent to external web analytics services for analysis. HCL DX administrators and page owners can manage the aggregators. They can assign an aggregator to one or more DX labels or pages. In HCL DX 9.5 CF19 and higher, a new Active Site Analytics aggregator for Google Analytics is available.","title":"Installation"},{"location":"install/integrate_google_analytics/#adding-an-active-site-analytics-aggregator-to-a-dx-site-page","text":"Obtain a Google Analytics account with ability to connect to your Digital Experience site. Add the DX GoogleAnalyticsAggregator.js to the HCL DX theme profile . In HCL DX 9.5 CF19 and higher, the GoogleAnalyticsAggregator.js file is located in the PortalServer_root/doc/js-samples directory. If using a WebDAV-based theme, copy the GoogleAnalyticsAggregator.js file to mycontenthandler/dav/fs-type1/theme/{your-custom-theme}/js. If using a WAR-based theme, include the GoogleAnalyticsAggregator.js file in the static theme WAR file. For example, when using a WAR-based theme, the location of the GoogleAnalyticsAggregator.js file after installing to the <YourTheme> WAR file will be deployed under wp_profile : wp_profile/installedApps/<cell>/<YourTheme.ear>/<YourTheme.war>/themes/<YourTheme>/js Refer to the file tree below how the custom theme app will be deployed: wp_profile ---> installedApps ---> <cell> ---> <YourTheme.ear> ---> <YourTheme.war> ---> themes ---> <YourTheme> ---> js ---> GoogleAnalyticsAggregator.js Add the DX GoogleAnalyticsAggregator.js to the HCL DX theme profile . Note: The theme profile used by the page(s) needs to include wp_analytics or at least wp_analytics_aggregator . HCL DX without Practitioner Studio installed: a. On Site Manager , select Page > Page Settings > Page Properties > Advanced b. Go to Manage Pages portlet, click the Administration menu icon. Then, select Portal User Interface > Manage Pages . HCL DX 9.5 with Practitioner Studio installed: a. Select Administration > Site Management > Pages to access the Manage Pages interface. b. Locate the page to which you want to assign the aggregator. Use the Manage Pages portlet to locate the page. Note: The page must be located as a child of the portal content root. c. Select Edit Page Properties for the page that you selected. Note: You cannot add an Active Site Analytics aggregator to the content root. Edit Page Properties is not available for the content root. d. To expand the available choices, click the plus sign (+) icon next to Advanced Options . e. Click I want to set parameters . f. In the field New parameter , type a string that starts with asa_aggregator or asa_dependency . Values that correspond to names that start with the string asa_aggregator are added to the page body, names that start with asa_dependency are added to the head. Both the aggregators and dependencies are added to the portal page in alphabetical order according to the Java method Collections.sort() . g. In the New value field, type the name of the aggregator script file, in this case: GoogleAnalyticsAggregator.js. h. Click Add . i. Verify that the new parameter is added to the list. j. Repeat steps F - I for all aggregators and dependencies. k. Click OK to return to the main Page Properties screen. l. Click OK to save your changes and return to the Manage Pages screen. Note: Child pages inherit the script that is set on the parent page. If you want to use a different aggregator on a child page, follow the same procedure that is previously addressed for the child page to make the appropriate assignment. If you want to block inheriting the aggregator setting from the parent page, follow the same procedure, but leave the value empty. As a result, the page has no aggregator that is assigned any longer, and all child pages of the parent page inherit the new setting. Log in to your Google Analytics account and obtain the GA_MEASUREMENT_ID in your Google Analytics Dashboard. It is also referred to as Tracking ID . Example: Add the following metadata in your target HCL DX page(s) properties: asa_dependency : https://www.googletagmanager.com/gtag/js?id=GA_MEASUREMENT_ID asa_aggregator : GoogleAnalyticsAggregator.js asa_js_ga_measurement_id : GA_MEASUREMENT_ID Example: Optionally, you can register the Active Site Analytics tags/microformats as custom dimensions or metrics in the Google Analytics Dashboard and configure the aggregator to use your custom map. See Google Analytics Custom Dimensions & Metrics . For a list of Active Site Analytics tags associated with HCL DX site pages that can be tracked by the Google Analytics Aggregator, see How Active Site Analytics data is represented in the portal and Supported aggregator tags . Access the HCL Digital Experience site page analytics from Google Analytics analyze HCL DX site activity. After installing and configuring the aggregator to track analytics from specific HCL DX site pages using the steps above, DX content authors and site owners with access to Google Analytics can view the DX site activity tracked and reflected in Google Analytics Dashboard's real-time reports as an increase in the pageviews and active users. See the following example: Refer to the Analytics tags and site promotions topics for more information on how to add additional tags and site promotions in addition to the out-of-the-box ones.","title":"Adding an Active Site Analytics aggregator to a DX site page"},{"location":"install/integrate_google_analytics/#configuration-options-for-the-hcl-dx-google-analytics-aggregator","text":"HCL DX administrators, content authors and site owners may optionally discontinue Google Analytics tracking of HCL DX pages, without removing the page metadata ( asa_dependency ) by adding the following \u2018opt-out\u2019 metadata in to the DX page(s) properties: asa_js_ga.optout: true This step will programmatically set the following window property: window['ga-disable-GA_MEASUREMENT_ID'] = true See Disable Google Analytics measurement for additional information.","title":"Configuration options for the HCL DX Google Analytics Aggregator"},{"location":"install/integrate_hcl_unica_discover/","text":"Integrate HCL Unica Discover with HCL Digital Experience This section includes information to set up integration of Digital Experience 9.5 Container Update CF192 and later sites with HCL Unica Discover to access deep insight analytics and session replay services to assess the effectiveness of your DX site pages with end user audiences. HCL Unica Discover provides insights to the online user journeys, enabling DX site managers and marketers to deliver optimized experiences. HCL Unica Discover records what your customers are seeing on your Digital Experience web pages and how they interact with those pages. By integrating with HCL Unica Discover you can: Detect and address user struggles in real time. Improve user experience, by capturing and analyzing behavioral data. Obtain visibility into business impact and opportunities. For more information, see the HCL Unica Discover product documentation . See the following to integrate HCL Unica Discover services to HCL Digital Experience platform pages and uncover opportunities to generate positive experiences for users that make them want to visit your DX sites again. How does the integration work? When a user opens a Digital Experience page in the browser, the Digital Experience theme module includes an HCL Unica Discover javascript file, which handles the data capturing on the DX site. The file also handles sending the information to the Unica Discover Server to enable collection of user data. Setting up the integration Before you can set up the integration, HCL Unica Discover must be installed and configured. HCL Unica Discover entitlements are acquired separately. For more information, see the HCL Unica Discover product documentation . Managing privacy rules in HCL Unica Discover For information about managing sensitive customer data, see Editing Privacy through Manage Services in the HCL Unica Discover product documentation . Tracking HCL DX pages with theme integration to HCL Unica Discover HCL Unica Discover can track both authenticated or unauthenticated pages. By default, Unica Discover does not store CSS, images, and JavaScript files because of the potential storage requirements. These files can be stored, but it is not recommended. Unica Discover pulls those assets at the time of replay, either from the live site or from a configured secondary location through customized replay rules. For more information, see the HCL Unica Discover product documentation or contact HCL Support .","title":"Integrate HCL Unica Discover with HCL Digital Experience"},{"location":"install/integrate_hcl_unica_discover/#integrate-hcl-unica-discover-with-hcl-digital-experience","text":"This section includes information to set up integration of Digital Experience 9.5 Container Update CF192 and later sites with HCL Unica Discover to access deep insight analytics and session replay services to assess the effectiveness of your DX site pages with end user audiences. HCL Unica Discover provides insights to the online user journeys, enabling DX site managers and marketers to deliver optimized experiences. HCL Unica Discover records what your customers are seeing on your Digital Experience web pages and how they interact with those pages. By integrating with HCL Unica Discover you can: Detect and address user struggles in real time. Improve user experience, by capturing and analyzing behavioral data. Obtain visibility into business impact and opportunities. For more information, see the HCL Unica Discover product documentation . See the following to integrate HCL Unica Discover services to HCL Digital Experience platform pages and uncover opportunities to generate positive experiences for users that make them want to visit your DX sites again.","title":"Integrate HCL Unica Discover with HCL Digital Experience"},{"location":"install/integrate_hcl_unica_discover/#how-does-the-integration-work","text":"When a user opens a Digital Experience page in the browser, the Digital Experience theme module includes an HCL Unica Discover javascript file, which handles the data capturing on the DX site. The file also handles sending the information to the Unica Discover Server to enable collection of user data.","title":"How does the integration work?"},{"location":"install/integrate_hcl_unica_discover/#setting-up-the-integration","text":"Before you can set up the integration, HCL Unica Discover must be installed and configured. HCL Unica Discover entitlements are acquired separately. For more information, see the HCL Unica Discover product documentation .","title":"Setting up the integration"},{"location":"install/integrate_hcl_unica_discover/#managing-privacy-rules-in-hcl-unica-discover","text":"For information about managing sensitive customer data, see Editing Privacy through Manage Services in the HCL Unica Discover product documentation .","title":"Managing privacy rules in\u00a0HCL Unica Discover"},{"location":"install/integrate_hcl_unica_discover/#tracking-hcl-dx-pages-with-theme-integration-to-hcl-unica-discover","text":"HCL Unica Discover can track both authenticated or unauthenticated pages. By default, Unica Discover does not store CSS, images, and JavaScript files because of the potential storage requirements. These files can be stored, but it is not recommended. Unica Discover pulls those assets at the time of replay, either from the live site or from a configured secondary location through customized replay rules. For more information, see the HCL Unica Discover product documentation or contact HCL Support .","title":"Tracking HCL DX pages with theme integration to HCL Unica Discover"},{"location":"install/mobile_preview/","text":"Mobile Preview Use the Mobile Preview simulator to view the presentation of Digital Experience site page components on select mobile devices. Note: The Mobile Preview simulator is provided with HCL Digital Experience CF19 release as a sample and is not yet supported for production use. The support policy for this HCL DX component will be updated at a future CF update release. Note: To enable user switching in the Mobile Preview, you must enable Mobile Browser Simulator UserAgent Switcher extension in Chrome. Mobile Preview Simulator Installation and Usage This section provides information on the usage of the Mobile Preview Simulator in websites developed using HCL Digital Experience software. Installation The Mobile Preview Simulator is enabled by default in HCL Digital Experience 9.5 CF19 and later releases and deployed along with the Practitioner Studio and Woodburn Studio demo site . Access the Mobile Preview Simulator After verifying access to Practitioner Studio, the Mobile Preview Simulator can be accessed with the following URL: /wps/mobilepreview/MobileBrowserSimulator/index.html The Mobile Preview image and action appears at the top right, just below the Woodburn Studio site menu as shown in the following figure. Append the following query to the URL to set the HCL Digital Experience page to display initially: ?webpage=<URL-to-page> For example, this URL example shows a specific page URL request to present using the Mobile Preview Simulator: /wps/mobilepreview/MobileBrowserSimulator/index.html?webpage=<URL-to-page> Usage There are multiple ways to apply and use the Mobile Preview Simulator on HCL Digital Experience sites. Options created for use are listed as follows. Option 1: Add an icon to a content or page template to launch the Mobile Preview simulator An icon can be used in a DX Content or Page template to launch the Mobile Preview simulator: Create a new Content Item (reference the Create Content Items topic for additional information) for use with the designated Authoring Template or Page Template, that renders the following HTML: ``` [IfEditMode] Mobile Preview Icon [/IfEditMode] [IfNotEditMode] [Plugin:ifNotDevice class=\"smartphone\" class=\"tablet\"] <h1 id=\"mobile-preview-property-fieldid-typecontent-contextcurrent\">mobile-preview-[Property field=\"id\" type=\"content\" context=\"current\"] {</h1> <pre><code>position: fixed; bottom: 10px; left: 10px; width: 36px; height: 36px; background-color: #eeeeee; text-align: center; border: 0px solid transparent; border-radius: 5px; </code></pre> <p>}</p> <h1 id=\"mobile-preview-property-fieldid-typecontent-contextcurrent-a\">mobile-preview-[Property field=\"id\" type=\"content\" context=\"current\"] a {</h1> <pre><code>background-color: transparent; border: none; color: #272727; </code></pre> <p>} [/Plugin:ifNotDevice] [/IfNotEditMode] ``` In the specified Content or Page template, include the Content item created in Step 1 as a Content Item that launches the Mobile Preview simulator as a button directly on a page (by using Specified Content on the Web Content Viewer). ``` ``` Option 2: Reference the Mobile Preview simulator for launch in an HCL DX theme Note: Option 2 requires the content item created in Option 1 as shown previously. As shown in the following example, the Mobile Preview simulator can be referenced for launch in a Simple Theme, using the st_wcm_content Dynamic Content spot: <a rel=\"dynamic-content\" href=\"dyn-cs:id:st_wcm_content?path=myLibrary/mySiteArea/mobilePreview.html\"></a> Option 3: Access the Mobile Preview simulator from a Dynamic Content Spot configured to the Woodburn Studio demonstration site In Woodburn Studio demonstration site delivered in HCL DX 9.5 CF19 and later releases, the Mobile Preview Simulator is added as a Dynamic Content Spot in the default theme.html. This serves to make the simulator capability available to all of the Woodburn Studio demonstration site pages by default. The code example below shows how the Dynamic Content Spot is added to the Woodburn Studio demonstration site: <c:set var=\"mobilePreview\" value=\"${pageContext.request.contextPath}/mobilepreview/MobileBrowserSimulator/index.html?webpage=${fn:escapeXml(wp.selectionModel.selected.urlGeneration.noNavigationalState.allowRelativeURL)}\"/> <portal-logic:if loggedIn=\"yes\"> <div class=\"wb-mobile-preview-container\"> <a href=\"${mobilePreview}\" id=\"mobile-preview-link\" target=\"_blank\"> <img src=\"mobile.svg\"/> </a> </div> </portal-logic:if> <!-- mobile preview button --> <a rel=\"dynamic-content\" href=\"dyn-cs:id:MP_button\"></a> The following examples demonstrate use of the Mobile Preview simulator to view display of the Woodburn Studio demonstration site on mobile device displays. Parent topic: Mobile","title":"Mobile Preview"},{"location":"install/mobile_preview/#mobile-preview","text":"Use the Mobile Preview simulator to view the presentation of Digital Experience site page components on select mobile devices. Note: The Mobile Preview simulator is provided with HCL Digital Experience CF19 release as a sample and is not yet supported for production use. The support policy for this HCL DX component will be updated at a future CF update release. Note: To enable user switching in the Mobile Preview, you must enable Mobile Browser Simulator UserAgent Switcher extension in Chrome.","title":"Mobile Preview"},{"location":"install/mobile_preview/#mobile-preview-simulator-installation-and-usage","text":"This section provides information on the usage of the Mobile Preview Simulator in websites developed using HCL Digital Experience software.","title":"Mobile Preview Simulator Installation and Usage"},{"location":"install/mobile_preview/#installation","text":"The Mobile Preview Simulator is enabled by default in HCL Digital Experience 9.5 CF19 and later releases and deployed along with the Practitioner Studio and Woodburn Studio demo site . Access the Mobile Preview Simulator After verifying access to Practitioner Studio, the Mobile Preview Simulator can be accessed with the following URL: /wps/mobilepreview/MobileBrowserSimulator/index.html The Mobile Preview image and action appears at the top right, just below the Woodburn Studio site menu as shown in the following figure. Append the following query to the URL to set the HCL Digital Experience page to display initially: ?webpage=<URL-to-page> For example, this URL example shows a specific page URL request to present using the Mobile Preview Simulator: /wps/mobilepreview/MobileBrowserSimulator/index.html?webpage=<URL-to-page>","title":"Installation"},{"location":"install/mobile_preview/#usage","text":"There are multiple ways to apply and use the Mobile Preview Simulator on HCL Digital Experience sites. Options created for use are listed as follows. Option 1: Add an icon to a content or page template to launch the Mobile Preview simulator An icon can be used in a DX Content or Page template to launch the Mobile Preview simulator: Create a new Content Item (reference the Create Content Items topic for additional information) for use with the designated Authoring Template or Page Template, that renders the following HTML: ``` [IfEditMode]","title":"Usage"},{"location":"install/progressive_web_applications/","text":"Progressive Web Applications Develop support that adds native mobile application experience and performance to your web site using browser-based functionality. Progressive Web Applications (PWAs) offer a delivery pattern that can transform a web site into an experience that feels like a native application using browser-based functionality. Progressive Web Applications use web browser APIs and features along with progressive enhancement strategy. Using PWA artifacts such as a service worker, caching provisions, and a manifest file can deliver faster load times, easier navigation, and responsive behavior. PWAs allow offline capability and access to native device capabilities without writing any native code. For additional information please consult Introduction to Progressive Web Applications at the developer.mozilla.org site. Video : Progressive Web Applications with HCL Digital Experience 9.5 Progressive Web Application requirements To make a Progressive Web Application installable (as noted in the Introduction to Progressive Web Applications topic), the following items and configurations are required: Must be served over HTTPS with a valid certificate (or using localhost for development). Include a Web App manifest file that includes the following information: short_name or name icons (must include a 192px and a 512px icon) start_url display (must be either fullscreen , standalone , or minimal-ui ) Note: prefer_related_applications must not be present, or be false. Register a service worker with a functional fetch handler. Once an application meets the above criteria, the browser will display a button that will allow the application to be installed. See the PWA install option example shown below using the Woodburn Studio Demo Site . When the install button is clicked, a dialog will appear that prompts the user to install the application. Once the application is installed, the application icon will display (in the following example as a Google Chrome application) and the application will be launched. For a Progressive Web Application to function correctly, the scope of both the manifest and the service-worker needs to be set correctly. The web application manifest file provides information about a web application in JSON format. The combination of modules, files and metadata allows HCL DX 9.5 to serve files required by the (PWA) application, and restrict which web pages should be viewed while the manifest is applied, while still maintaining the appropriate scope settings. If the user navigates outside the scope, it reverts to a normal web page inside a browser tab or window. HCL Digital Experience 9.5 CF19 and Container Update CF192 add new platform and component support to add these capabilities to HCL DX 9.5 and higher sites. These include: Updated System module delivered in HCL DX 9.5 CF19. This module serves the manifest and service worker files. New Theme scope module that is defined in the theme.json file. This loads the pwa.js. New page metadata is created that can be used on the root page of the site (or other pages in some cases). An updated Woodburn Studio Demo Site , which will present a Progressive Web Application enabled for installation and display to supported mobile platforms. PWA installation and display of the updated Woodburn Studio site experience is tested and verified on the following mobile browser platforms: Apple Safari must be used for Apple Mobile devices. (Not supported for desktop access). Apple iOS v13 and v14 are tested and verified. Google Chrome 85 on Mac and Windows Microsoft Edge 85 on Mac and Windows 10 Tablet running Android v7 and Google Pixel 3 running on v11 (Google Chrome 85) Google Chrome 86 on Linux Note: Progressive Web Application functionality is not supported on all web browser platforms, for example, Microsoft Internet Explorer 11. Developers are encouraged to verify if Progressive Web Application support is available for web browser platforms intended for use. Many of these files (theme.json, pwa.js, service-worker.js, etc.) can be included and re-used in other HCL DX 9.5 CF19 and higher themes. See details below: Manifest Scope: Defines the navigation scope of the application. It restricts which web pages can be viewed while the manifest is applied. If the user navigates outside the scope, the application will signal that the page is out of scope and native operations included on the page may not work. The scope can be set directly in the manifest files or using the com.hcl.dx.pwa.manifest.scope page metadata parameter on the Progressive Web Application configuration node. The scope can be set to a hardcoded value of auto which will result in the friendly name of the page being used. Service worker: The scope of the service worker determines which files the service worker controls. In other words, scope determines from which path the service worker will intercept requests. The default scope is generally the location of the service worker file and extends to all directories below. Note: When registering a service worker, you can specify a scope with a more restrictive path, but that path should be a child of the path where the service worker was loaded. In this situation, this pattern poses a problem in HCL DX since the path of the theme (where the service worker resides) and the path of the site pages are not in the same path hierarchy. For this reason, HCL DX 9.5 will default the scope to the friendly URL of the root label or page of the PWA site. If a less restrictive scope is set, a Service-Worker-Allowed header must be included on the response for the service worker. The PWA theme module will use the friendly URL of the root page of the PWA site for the value of the Service-Worker-Allowed header. This value will also need to be set as the scope when registering the service worker in the theme. Authenticated versus Unauthenticated HCL DX generates URLs differently based on whether or not a user is logged into the site. For anonymous sites (unauthenticated), the URL for a given page would be of the form /wps/portal/ whereas authenticated pages would be of the form /wps/myportal/. These differences in URL generation have a large effect on PWA processing. For this reason, a site scoped metadata parameter for protected versus non-protected is needed ( com.hcl.dx.pwa.app.protected ). The protected parameter impacts the generation of scope and start URL settings in the manifest file and the service worker scope (i.e. should they be /portal or /myportal) when auto is used. In addition, the PWA configuration cache key ( pwaConfigCacheKey in the service-worker.js file) is generated differently if the protected parameter is set to true. The protected parameter defaults to false, which means that the + sign to install the application, visible in the browser address bar, will display when the home page of the site is accessed by an unauthenticated user. At this point, the PWA application could be installed. If the user logs into the site before the PWA application is installed, the + will no longer be visible in the browser address bar. If the protected parameter is set to true, the + sign to install the application will not be visible in the browser address bar until the user logs into the site. Localization By default, the manifest.json file does not provide any localization information. There is a single name and description field that sets the name of the PWA application. To handle localization for DX PWA applications, the following manifest.json fields are extended to include an array of localized values: descriptions names short_names shortcuts: names descriptions \"name\": \"Woodburn\", \"names\": [ { \"value\": \"Woodburn application\", \"lang\": \"en\" }, { \"value\": \"Woodburn Anwendung\", \"lang\": \"de\" } ], In this example, if the user accesses the DX Progressive Web Application using German language preferences, the name of the application displayed will be Woodburn Anwendung . However, if the user were to access the application in a language that is not defined in the manifest, the value from the name field would be used as a fallback. Hiding pages in PWA application mode It is important to be able to exclude pages when the site is in PWA application mode. Applications on smaller devices may not appropriately display the entire site as it would be shown on a desktop. For this reason, page metadata has been added to hide pages in application mode. If the pwa.Hidden metadata is set to true on a page in the site, that page will not be displayed in the PWA application. Hidden pages are implemented via CSS included in the theme. There are two places where the theme must be changed: Add the following CSS to the default.css file located in the css/default directory in the root of the static files. Example : Setting display mode to hidden for DX pages using PWA application mode @media all and (display-mode: standalone){ .pwaHidden { display: none } Update the navigation JSP for the theme; usually located in the themes/html/dynamicSpots directory in the root of the dynamic files. The pwa.Hidden page metadata parameter is checked and if it is true the pwa.Hidden CSS class will be applied to the li element to hide the page. In the example below, the hidden parameter is added to the mainNav.jsp in the Woodburn Studio theme. Example : Adding a hidden page metadata parameter to the Woodburn Studio theme <c:set var=\"pwaHidden\" value=\"${node.metadata['pwa.Hidden']}\"></c:set> <li class=\"list-item <c:if test='${pwaHidden == true}'>pwaHIdden</c:if>\"> <a href=\"$ {fn:escapeXml(node.urlGeneration.autoNavigationalState.clearScreenTemplate)}\"> <c:out value=\"${node.title}\" /> </a> </li> Steps required to enable Progressive Web Application capabilities in a Digital Experience site Apply Stateless URLs . In order for a PWA application to function properly in HCL DX 9.5 CF19 and higher, the site is required to use stateless, or friendly URLs. See Defining friendly URLs without state information for pages in your site to learn how to configure stateless or friendly URLs. The use of friendly URLs can also be configured by doing the following steps: Set the following WP_ConfigService resource environment variables as follows: stateless.urls.enabled=true generate.stateless.urls=true generate.stateless.redirect.urls=true Update the theme parameters to include the following parameters: <parameter name=\"com.ibm.portal.theme.hasBaseURL\" type=\"string\" update=\"set\"><![CDATA[true]]></parameter> Restart the HCL DX 9.5 server. Note the display of the PWA install option will vary depending on the device you are using (e.g. Chrome on MacOS and Safari on iOS) as noted above in the Updated Woodburn Studio Demo Site detail. All further steps apply to custom themes and/or to custom sites. Create a pwas directory in the root of the theme static files . This directory will contain all of the PWA configurations. Each sub-directory under pwas represents a single configuration. For example, in the updated Woodburn Studio theme ( in CF19 and higher releases), these directories/files exist: pwas (folder) woodburn (folder) images (folder) manifest.json service-worker.js Create a new folder under the pwas directory to represent the site configuration. Create a manifest.json file in the PWA configuration folder . The manifest file should include the following information: short_name or name icons (must include a 192px and a 512px icon) scope, which defines the navigation scope of the application. It restricts which web pages can be viewed while the manifest is applied. If the user navigates outside the scope, the application will signal that the page is out of scope and native operations included on the page may not work. The scope can be set directly in the manifest file, or using the com.hcl.dx.pwa.manifest.scope page metadata parameter on the PWA configuration node (usually the root label or page of the site). The scope can be set to a value of auto which will result in the friendly name of the page/label being used. Note: The scope is not a required field in the manifest. start_url or the preferred URL that should be loaded when the user launches the web application. The scope can be set directly in the manifest file or using the com.hcl.dx.pwa.manifest.start_url page metadata parameter on the PWA configuration node (usually the root label or page of the site). The scope can be set to a value of auto which will result in the friendly name of the root page being used (if the root is a label, the start_url will default to the path of the first child under the label). display (must be either fullscreen, standalone, or minimal-ui) prefer_related_applications must not be present, or be false See the Woodburn Studio theme installed to HCL DX 9.5 CF19 and higher releases for an example of this file, and the implementation examples below. Create a service-worker.js file in the PWA configuration folder. It is possible to use the same service worker file across multiple PWA configurations. HCL DX will first look for the service-worker.js file in the PWA configuration directory. If a service-worker.js file cannot be found there, it will next look in the root pwas directory. See the Woodburn Studio theme for an example of this file. Create a theme scoped module in the theme.json file located in the contributions directory in the root of the static files. This module will be used to load the pwa.js file that is responsible for registering the PWA service worker. An example of this module could be presented as follows: Example : Registering the PWA service worker { \"id\":\"wp_theme+pwa\", \"prereqs\": [ { \"id\":\"wp_pwa\" } ], \"contributions\": [ { \"type\":\"config\", \"sub-contributions\": [ { \"type\":\"js\", \"uris\": [ { \"value\":\"/js/pwa.js\" } ] } ] } ], \"titles\": [ { \"value\":\"PWA support\", \"lang\":\"en\" } ], \"descriptions\": [ { \"value\":\"PWA support\", \"lang\":\"en\" } ] }, Add the pwa.js file referenced in the theme scoped module to the js directory in the root of the static files. The pwa.js file is responsible for registering the service worker with the browser. See the Woodburn Studio theme for an example of this file. Add the new theme scoped module ( wp_theme_pwa from the theme.json file) to the theme profile(s). For example, the deferred_profile.json might be updated to: \"wp_one_ui\", \"wp_one_ui_dijit\", \"wp_theme_pwa\" ], Depending on how the theme is deployed, the theme caches may need to be cleared using the Theme Analyzer. See the Theme Analyzer Help Center topic for instructions to analyze and clear theme caches. Add any necessary metadata values to the pages: Required: com.hcl.dx.pwa.configuration - Set on the root label or page of the site to identify the PWA configuration located in the theme pwas directory that will apply. For example, this page metadata parameter is set to woodburn on the Woodburn Studio theme root label ( Woodburn Studio ). Optional: com.hcl.dx.pwa.app.protected - Set on the root label or page of the site to identify whether or not the application will apply to authenticated (true) or anonymous (false) parts of the site. The value of this parameter will default to false. Optional: com.hcl.dx.pwa.serviceworker.scope - Set on the root label or page of the site to override the service worker scope that will be used to register the service worker with the browser (typically the URL for the root page of the site, for example, /wps/myportal/site1). The service worker scope can also be set to auto which will cause the service worker scope to be set to the friendly path of the PWA configuration node. See the Authenticated versus Unauthenticated section for further explanation of how this parameter is affected by the com.hcl.dx.pwa.app.protected metadata parameter. The value of this parameter will default to auto. Optional: com.hcl.dx.pwa.preload_urls - Set on the root label or page of the site to define a list of URLs that can be preloaded by the service-worker. This list is comma-separated and will be dynamically added to the service-worker using the variable preloadURLs. Optional: com.hcl.dx.pwa.manifest.scope - Set on a label or page in the site to override the scope specified in the PWA manifest (typically the URL for the root page of the site, for example, /wps/myportal/site1). The scope can also be set to auto which will cause the scope to be set to the friendly path of the PWA configuration node. See the Authenticated versus Unauthenticated section for further explanation of how this parameter is affected by the com.hcl.dx.pwa.app.protected metadata parameter. Optional: com.hcl.dx.pwa.manifest.start_url - See the Authenticated versus Unauthenticated section for further explanation of how this parameter is affected by the com.hcl.dx.pwa.app.protected metadata parameter. Optional: pwa.Hidden - Set on a label or page in the site to exclude a page from the PWA application navigation (true or false). Optionally, update the theme files for hiding pages in PWA application mode . See the Hiding pages in PWA application mode guidance above in this section for explanations and guidance to apply these changes. PWA support in Virtual Portals: Typically, PWAs are designed to serve a single site. Because HCL Digital Experience is capable of serving multiple sites through Virtual Portal support, HCL DX administrators should be able to configure multiple sites to implement PWA capabilities. Creating a custom PWA install button It is possible to create a custom PWA install button within the site itself by changing the theme. There is a custom button in the Woodburn Studio theme that can be used as a sample. The button also appears when the site is in responsive mode. The following changes were made to the Woodburn Studio theme to implement the button: The pwa.js file was updated to include handling PWA specific events such as beforeinstallprompt and appinstalled . These events handle displaying the install button when the install criteria is met, not displaying the button when in PWA application mode and other processing. The theme custom CSS was updated to style the button (the main.css file in Woodburn Studio). For example: .wb-hide-pwa-button { display:none; } : .wb-navigation-list ul.nav-list li.pwa-install-button { color: white; background-color: #ef1212; line-height: 2.25em; width: 60px; text-align: center; } The theme custom navigation JSP was updated to include the button in the navigation (the mainNav.jsp in Woodburn Studio). For example: <li class=\"list-item pwa-install-button wb-hide-pwa-button\"> <a href=\"#\" onclick=\"pwaInstall(event)\"><c:out value=\"GET APP\"/></a> </li> For additional information on PWA custom install options, see the following link from the Web.dev site: How to provide your own in-app install experience Parent topic: Mobile","title":"Progressive Web Applications"},{"location":"install/progressive_web_applications/#progressive-web-applications","text":"Develop support that adds native mobile application experience and performance to your web site using browser-based functionality. Progressive Web Applications (PWAs) offer a delivery pattern that can transform a web site into an experience that feels like a native application using browser-based functionality. Progressive Web Applications use web browser APIs and features along with progressive enhancement strategy. Using PWA artifacts such as a service worker, caching provisions, and a manifest file can deliver faster load times, easier navigation, and responsive behavior. PWAs allow offline capability and access to native device capabilities without writing any native code. For additional information please consult Introduction to Progressive Web Applications at the developer.mozilla.org site. Video : Progressive Web Applications with HCL Digital Experience 9.5","title":"Progressive Web Applications"},{"location":"install/progressive_web_applications/#progressive-web-application-requirements","text":"To make a Progressive Web Application installable (as noted in the Introduction to Progressive Web Applications topic), the following items and configurations are required: Must be served over HTTPS with a valid certificate (or using localhost for development). Include a Web App manifest file that includes the following information: short_name or name icons (must include a 192px and a 512px icon) start_url display (must be either fullscreen , standalone , or minimal-ui ) Note: prefer_related_applications must not be present, or be false. Register a service worker with a functional fetch handler. Once an application meets the above criteria, the browser will display a button that will allow the application to be installed. See the PWA install option example shown below using the Woodburn Studio Demo Site . When the install button is clicked, a dialog will appear that prompts the user to install the application. Once the application is installed, the application icon will display (in the following example as a Google Chrome application) and the application will be launched. For a Progressive Web Application to function correctly, the scope of both the manifest and the service-worker needs to be set correctly. The web application manifest file provides information about a web application in JSON format. The combination of modules, files and metadata allows HCL DX 9.5 to serve files required by the (PWA) application, and restrict which web pages should be viewed while the manifest is applied, while still maintaining the appropriate scope settings. If the user navigates outside the scope, it reverts to a normal web page inside a browser tab or window. HCL Digital Experience 9.5 CF19 and Container Update CF192 add new platform and component support to add these capabilities to HCL DX 9.5 and higher sites. These include: Updated System module delivered in HCL DX 9.5 CF19. This module serves the manifest and service worker files. New Theme scope module that is defined in the theme.json file. This loads the pwa.js. New page metadata is created that can be used on the root page of the site (or other pages in some cases). An updated Woodburn Studio Demo Site , which will present a Progressive Web Application enabled for installation and display to supported mobile platforms. PWA installation and display of the updated Woodburn Studio site experience is tested and verified on the following mobile browser platforms: Apple Safari must be used for Apple Mobile devices. (Not supported for desktop access). Apple iOS v13 and v14 are tested and verified. Google Chrome 85 on Mac and Windows Microsoft Edge 85 on Mac and Windows 10 Tablet running Android v7 and Google Pixel 3 running on v11 (Google Chrome 85) Google Chrome 86 on Linux Note: Progressive Web Application functionality is not supported on all web browser platforms, for example, Microsoft Internet Explorer 11. Developers are encouraged to verify if Progressive Web Application support is available for web browser platforms intended for use. Many of these files (theme.json, pwa.js, service-worker.js, etc.) can be included and re-used in other HCL DX 9.5 CF19 and higher themes. See details below: Manifest Scope: Defines the navigation scope of the application. It restricts which web pages can be viewed while the manifest is applied. If the user navigates outside the scope, the application will signal that the page is out of scope and native operations included on the page may not work. The scope can be set directly in the manifest files or using the com.hcl.dx.pwa.manifest.scope page metadata parameter on the Progressive Web Application configuration node. The scope can be set to a hardcoded value of auto which will result in the friendly name of the page being used. Service worker: The scope of the service worker determines which files the service worker controls. In other words, scope determines from which path the service worker will intercept requests. The default scope is generally the location of the service worker file and extends to all directories below. Note: When registering a service worker, you can specify a scope with a more restrictive path, but that path should be a child of the path where the service worker was loaded. In this situation, this pattern poses a problem in HCL DX since the path of the theme (where the service worker resides) and the path of the site pages are not in the same path hierarchy. For this reason, HCL DX 9.5 will default the scope to the friendly URL of the root label or page of the PWA site. If a less restrictive scope is set, a Service-Worker-Allowed header must be included on the response for the service worker. The PWA theme module will use the friendly URL of the root page of the PWA site for the value of the Service-Worker-Allowed header. This value will also need to be set as the scope when registering the service worker in the theme.","title":"Progressive Web Application requirements"},{"location":"install/progressive_web_applications/#authenticated-versus-unauthenticated","text":"HCL DX generates URLs differently based on whether or not a user is logged into the site. For anonymous sites (unauthenticated), the URL for a given page would be of the form /wps/portal/ whereas authenticated pages would be of the form /wps/myportal/. These differences in URL generation have a large effect on PWA processing. For this reason, a site scoped metadata parameter for protected versus non-protected is needed ( com.hcl.dx.pwa.app.protected ). The protected parameter impacts the generation of scope and start URL settings in the manifest file and the service worker scope (i.e. should they be /portal or /myportal) when auto is used. In addition, the PWA configuration cache key ( pwaConfigCacheKey in the service-worker.js file) is generated differently if the protected parameter is set to true. The protected parameter defaults to false, which means that the + sign to install the application, visible in the browser address bar, will display when the home page of the site is accessed by an unauthenticated user. At this point, the PWA application could be installed. If the user logs into the site before the PWA application is installed, the + will no longer be visible in the browser address bar. If the protected parameter is set to true, the + sign to install the application will not be visible in the browser address bar until the user logs into the site.","title":"Authenticated versus Unauthenticated"},{"location":"install/progressive_web_applications/#localization","text":"By default, the manifest.json file does not provide any localization information. There is a single name and description field that sets the name of the PWA application. To handle localization for DX PWA applications, the following manifest.json fields are extended to include an array of localized values: descriptions names short_names shortcuts: names descriptions \"name\": \"Woodburn\", \"names\": [ { \"value\": \"Woodburn application\", \"lang\": \"en\" }, { \"value\": \"Woodburn Anwendung\", \"lang\": \"de\" } ], In this example, if the user accesses the DX Progressive Web Application using German language preferences, the name of the application displayed will be Woodburn Anwendung . However, if the user were to access the application in a language that is not defined in the manifest, the value from the name field would be used as a fallback.","title":"Localization"},{"location":"install/progressive_web_applications/#hiding-pages-in-pwa-application-mode","text":"It is important to be able to exclude pages when the site is in PWA application mode. Applications on smaller devices may not appropriately display the entire site as it would be shown on a desktop. For this reason, page metadata has been added to hide pages in application mode. If the pwa.Hidden metadata is set to true on a page in the site, that page will not be displayed in the PWA application. Hidden pages are implemented via CSS included in the theme. There are two places where the theme must be changed: Add the following CSS to the default.css file located in the css/default directory in the root of the static files. Example : Setting display mode to hidden for DX pages using PWA application mode @media all and (display-mode: standalone){ .pwaHidden { display: none } Update the navigation JSP for the theme; usually located in the themes/html/dynamicSpots directory in the root of the dynamic files. The pwa.Hidden page metadata parameter is checked and if it is true the pwa.Hidden CSS class will be applied to the li element to hide the page. In the example below, the hidden parameter is added to the mainNav.jsp in the Woodburn Studio theme. Example : Adding a hidden page metadata parameter to the Woodburn Studio theme <c:set var=\"pwaHidden\" value=\"${node.metadata['pwa.Hidden']}\"></c:set> <li class=\"list-item <c:if test='${pwaHidden == true}'>pwaHIdden</c:if>\"> <a href=\"$ {fn:escapeXml(node.urlGeneration.autoNavigationalState.clearScreenTemplate)}\"> <c:out value=\"${node.title}\" /> </a> </li>","title":"Hiding pages in PWA application mode"},{"location":"install/progressive_web_applications/#steps-required-to-enable-progressive-web-application-capabilities-in-a-digital-experience-site","text":"Apply Stateless URLs . In order for a PWA application to function properly in HCL DX 9.5 CF19 and higher, the site is required to use stateless, or friendly URLs. See Defining friendly URLs without state information for pages in your site to learn how to configure stateless or friendly URLs. The use of friendly URLs can also be configured by doing the following steps: Set the following WP_ConfigService resource environment variables as follows: stateless.urls.enabled=true generate.stateless.urls=true generate.stateless.redirect.urls=true Update the theme parameters to include the following parameters: <parameter name=\"com.ibm.portal.theme.hasBaseURL\" type=\"string\" update=\"set\"><![CDATA[true]]></parameter> Restart the HCL DX 9.5 server. Note the display of the PWA install option will vary depending on the device you are using (e.g. Chrome on MacOS and Safari on iOS) as noted above in the Updated Woodburn Studio Demo Site detail. All further steps apply to custom themes and/or to custom sites. Create a pwas directory in the root of the theme static files . This directory will contain all of the PWA configurations. Each sub-directory under pwas represents a single configuration. For example, in the updated Woodburn Studio theme ( in CF19 and higher releases), these directories/files exist: pwas (folder) woodburn (folder) images (folder) manifest.json service-worker.js Create a new folder under the pwas directory to represent the site configuration. Create a manifest.json file in the PWA configuration folder . The manifest file should include the following information: short_name or name icons (must include a 192px and a 512px icon) scope, which defines the navigation scope of the application. It restricts which web pages can be viewed while the manifest is applied. If the user navigates outside the scope, the application will signal that the page is out of scope and native operations included on the page may not work. The scope can be set directly in the manifest file, or using the com.hcl.dx.pwa.manifest.scope page metadata parameter on the PWA configuration node (usually the root label or page of the site). The scope can be set to a value of auto which will result in the friendly name of the page/label being used. Note: The scope is not a required field in the manifest. start_url or the preferred URL that should be loaded when the user launches the web application. The scope can be set directly in the manifest file or using the com.hcl.dx.pwa.manifest.start_url page metadata parameter on the PWA configuration node (usually the root label or page of the site). The scope can be set to a value of auto which will result in the friendly name of the root page being used (if the root is a label, the start_url will default to the path of the first child under the label). display (must be either fullscreen, standalone, or minimal-ui) prefer_related_applications must not be present, or be false See the Woodburn Studio theme installed to HCL DX 9.5 CF19 and higher releases for an example of this file, and the implementation examples below. Create a service-worker.js file in the PWA configuration folder. It is possible to use the same service worker file across multiple PWA configurations. HCL DX will first look for the service-worker.js file in the PWA configuration directory. If a service-worker.js file cannot be found there, it will next look in the root pwas directory. See the Woodburn Studio theme for an example of this file. Create a theme scoped module in the theme.json file located in the contributions directory in the root of the static files. This module will be used to load the pwa.js file that is responsible for registering the PWA service worker. An example of this module could be presented as follows: Example : Registering the PWA service worker { \"id\":\"wp_theme+pwa\", \"prereqs\": [ { \"id\":\"wp_pwa\" } ], \"contributions\": [ { \"type\":\"config\", \"sub-contributions\": [ { \"type\":\"js\", \"uris\": [ { \"value\":\"/js/pwa.js\" } ] } ] } ], \"titles\": [ { \"value\":\"PWA support\", \"lang\":\"en\" } ], \"descriptions\": [ { \"value\":\"PWA support\", \"lang\":\"en\" } ] }, Add the pwa.js file referenced in the theme scoped module to the js directory in the root of the static files. The pwa.js file is responsible for registering the service worker with the browser. See the Woodburn Studio theme for an example of this file. Add the new theme scoped module ( wp_theme_pwa from the theme.json file) to the theme profile(s). For example, the deferred_profile.json might be updated to: \"wp_one_ui\", \"wp_one_ui_dijit\", \"wp_theme_pwa\" ], Depending on how the theme is deployed, the theme caches may need to be cleared using the Theme Analyzer. See the Theme Analyzer Help Center topic for instructions to analyze and clear theme caches. Add any necessary metadata values to the pages: Required: com.hcl.dx.pwa.configuration - Set on the root label or page of the site to identify the PWA configuration located in the theme pwas directory that will apply. For example, this page metadata parameter is set to woodburn on the Woodburn Studio theme root label ( Woodburn Studio ). Optional: com.hcl.dx.pwa.app.protected - Set on the root label or page of the site to identify whether or not the application will apply to authenticated (true) or anonymous (false) parts of the site. The value of this parameter will default to false. Optional: com.hcl.dx.pwa.serviceworker.scope - Set on the root label or page of the site to override the service worker scope that will be used to register the service worker with the browser (typically the URL for the root page of the site, for example, /wps/myportal/site1). The service worker scope can also be set to auto which will cause the service worker scope to be set to the friendly path of the PWA configuration node. See the Authenticated versus Unauthenticated section for further explanation of how this parameter is affected by the com.hcl.dx.pwa.app.protected metadata parameter. The value of this parameter will default to auto. Optional: com.hcl.dx.pwa.preload_urls - Set on the root label or page of the site to define a list of URLs that can be preloaded by the service-worker. This list is comma-separated and will be dynamically added to the service-worker using the variable preloadURLs. Optional: com.hcl.dx.pwa.manifest.scope - Set on a label or page in the site to override the scope specified in the PWA manifest (typically the URL for the root page of the site, for example, /wps/myportal/site1). The scope can also be set to auto which will cause the scope to be set to the friendly path of the PWA configuration node. See the Authenticated versus Unauthenticated section for further explanation of how this parameter is affected by the com.hcl.dx.pwa.app.protected metadata parameter. Optional: com.hcl.dx.pwa.manifest.start_url - See the Authenticated versus Unauthenticated section for further explanation of how this parameter is affected by the com.hcl.dx.pwa.app.protected metadata parameter. Optional: pwa.Hidden - Set on a label or page in the site to exclude a page from the PWA application navigation (true or false). Optionally, update the theme files for hiding pages in PWA application mode . See the Hiding pages in PWA application mode guidance above in this section for explanations and guidance to apply these changes. PWA support in Virtual Portals: Typically, PWAs are designed to serve a single site. Because HCL Digital Experience is capable of serving multiple sites through Virtual Portal support, HCL DX administrators should be able to configure multiple sites to implement PWA capabilities.","title":"Steps required to enable Progressive Web Application capabilities in a Digital Experience site"},{"location":"install/progressive_web_applications/#creating-a-custom-pwa-install-button","text":"It is possible to create a custom PWA install button within the site itself by changing the theme. There is a custom button in the Woodburn Studio theme that can be used as a sample. The button also appears when the site is in responsive mode. The following changes were made to the Woodburn Studio theme to implement the button: The pwa.js file was updated to include handling PWA specific events such as beforeinstallprompt and appinstalled . These events handle displaying the install button when the install criteria is met, not displaying the button when in PWA application mode and other processing. The theme custom CSS was updated to style the button (the main.css file in Woodburn Studio). For example: .wb-hide-pwa-button { display:none; } : .wb-navigation-list ul.nav-list li.pwa-install-button { color: white; background-color: #ef1212; line-height: 2.25em; width: 60px; text-align: center; } The theme custom navigation JSP was updated to include the button in the navigation (the mainNav.jsp in Woodburn Studio). For example: <li class=\"list-item pwa-install-button wb-hide-pwa-button\"> <a href=\"#\" onclick=\"pwaInstall(event)\"><c:out value=\"GET APP\"/></a> </li> For additional information on PWA custom install options, see the following link from the Web.dev site: How to provide your own in-app install experience Parent topic: Mobile","title":"Creating a custom PWA install button"},{"location":"install/rm_cf/","text":"HCL Digital Experience roadmap: Applying maintenance Portal maintenance is delivered through individual fixes (Fixes) and Combined Cumulative Fixes (CFs), which is recommended to your environment. For individual fixes, HCL encourages customers to remain up-to-date on the latest DX releases. As a result, DX only provides fixes on the latest release. Customers may be asked to upgrade to the latest DX release to assist with problem determination. Use this roadmap to learn more about the following information: What the latest Combined Cumulative Fix contains How to apply the latest combined cumulative fix How to configure and enable new Combined Cumulative Fix features Who should use this roadmap Use this roadmap if you: Installed HCL Digital Experience for the first time and want to apply a Fix or the latest Combined Cumulative Fix. Need a high-level view of which features or improvements are ready to use by default after you apply the latest Combined Cumulative Fix and which features need additional configuration. Delivering updates This section describes the strategy for delivering Digital Experience maintenance updates, including the release versioning scheme, to provide a clear maintenance and upgrade path for our customers. What is continuous delivery? Continuous delivery consists of short development cycles with continuous integration and automated tests. The result is a releasable product at any time. Continuous delivery has the following benefits: Accelerated time to market Building the right product Improved productivity and efficiency Reliable releases Improved product quality Improved customer satisfaction The continuous delivery features are delivered with the combined cumulative fixes. CF release versioning and update path CF releases are sequentially numbered. Between CF01 and CF19, the CF release versioning simply increments the 2-digit integer (CF01, CF02, CF03\u2026\u2026.CF19). These CFs are applicable to an on-premise deployment. The first Combined Cumulative Fix applicable for 8.5 is CF01. The first Combined Cumulative Fix applicable for 9.0 is CF14. The first Combined Cumulative Fix applicable for 9.5 is CF17. With DX Container releases, HCL DX introduced a change in the CF naming scheme. After CF196, single versioning for both container and on-premise CF is applied. This change also signifies that fixes for both deployments are included into one Combined Cumulative Fix deliverable. Please see the following important points about this change: Starting with CF196, versioning now implements a 3-digit integer that increments every release (CF196, CF197, CF198\u2026 and so on.) Though the versioning is the same, the CFs are packaged separately and specific to each deployment. Please find the sample file naming for the CF package applicable to an on-premises deployment versus a container deployment. On-premises: HCL-DX-CF196_Server_Update.zip, HCL-DX-CF196_Express_Update.zip, or HCL-DX-CF196_RemoteSearch_Update.zip. Container: hcl-dx-kubernetes-v95-CF196.zip CF196 and later releases are applicable to HCL DX 8.5, 9.0, and 9.5 on-premise deployments. Customers can update directly to the latest CF release without installing multiple individual CFs (for example, 8.5 CF17 to 8.5 CF196). Learning about this Combined Cumulative Fix Some combined cumulative fixes focus on fixing known issues that are identified by APARs. Other cumulative fixes are focused on new features. Get an overview of the features and improvements delivered in the latest combined cumulative fix. Documentation resource: Combined Cumulative Fix Strategy View the fixes delivered for HCL Digital Experience 9.5. The documentation provides specific information on how to enable and use the new feature. Documentation resource: What's new with CF17 Documentation resource: Fix for IBM WebSphere Application Server 9.0.5 Applying a Combined Cumulative Fix To apply a Combined Cumulative Fix, you must update the product files with IBM\u00ae Installation Manager. You must also update properties files, download the cumulative fix, and run ConfigEngine tasks to apply the changes to each profile in your system. The HCL Digital Experience Combined Cumulative Fix readme file provides detailed instructions on how to apply a fix and planning information. Use the Health Checker tool to identify issues with your installation. Use the Health Checker tool on your target system before you apply a Combined Cumulative Fix. Individual fixes: Individual fixes (Fixes) are included in the Combined Cumulative Fix Strategy. However, if you are going to upgrade prior to CF08, the following iFixes are required. Install one of the following Fixes, based on your system, before you upgrade: IBM WebSphere\u00ae Application Server Version 8.5.5.X FOR SDK 7.1: PI50090: SHIP JDK IV77682 AS AN IFIX FOR WAS 8.5.5.X FOR SDK 7.1 WebSphere Application Server Version 8.5.5.X FOR SDK 7: PI50092: SHIP JDK IV77682 AS AN IFIX FOR WAS 8.5.5.X FOR SDK 7PI50092: SHIP JDK IV77682 AS AN IFIX FOR WAS 8.5.5.X FOR SDK 7 To apply this cumulative fix, follow the readme file instructions that apply to your environment. You can find separate instructions for stand-alone, cluster, farm, and remote search environments from the Overview topic. Documentation resource: HCL Digital Experience Combined cumulative fix instructions: stand-alone Documentation resource: HCL Digital Experience Combined cumulative fix instructions: cluster Documentation resource: HCL Digital Experience Combined cumulative fix instructions: farm Documentation resource: HCL Digital Experience Combined cumulative fix instructions: remote search","title":"HCL Digital Experience roadmap: Applying maintenance"},{"location":"install/rm_cf/#hcl-digital-experience-roadmap-applying-maintenance","text":"Portal maintenance is delivered through individual fixes (Fixes) and Combined Cumulative Fixes (CFs), which is recommended to your environment. For individual fixes, HCL encourages customers to remain up-to-date on the latest DX releases. As a result, DX only provides fixes on the latest release. Customers may be asked to upgrade to the latest DX release to assist with problem determination. Use this roadmap to learn more about the following information: What the latest Combined Cumulative Fix contains How to apply the latest combined cumulative fix How to configure and enable new Combined Cumulative Fix features","title":"HCL Digital Experience roadmap: Applying maintenance"},{"location":"install/rm_cf/#who-should-use-this-roadmap","text":"Use this roadmap if you: Installed HCL Digital Experience for the first time and want to apply a Fix or the latest Combined Cumulative Fix. Need a high-level view of which features or improvements are ready to use by default after you apply the latest Combined Cumulative Fix and which features need additional configuration.","title":"Who should use this roadmap"},{"location":"install/rm_cf/#delivering-updates","text":"This section describes the strategy for delivering Digital Experience maintenance updates, including the release versioning scheme, to provide a clear maintenance and upgrade path for our customers.","title":"Delivering updates"},{"location":"install/rm_cf/#what-is-continuous-delivery","text":"Continuous delivery consists of short development cycles with continuous integration and automated tests. The result is a releasable product at any time. Continuous delivery has the following benefits: Accelerated time to market Building the right product Improved productivity and efficiency Reliable releases Improved product quality Improved customer satisfaction The continuous delivery features are delivered with the combined cumulative fixes.","title":"What is continuous delivery?"},{"location":"install/rm_cf/#cf-release-versioning-and-update-path","text":"CF releases are sequentially numbered. Between CF01 and CF19, the CF release versioning simply increments the 2-digit integer (CF01, CF02, CF03\u2026\u2026.CF19). These CFs are applicable to an on-premise deployment. The first Combined Cumulative Fix applicable for 8.5 is CF01. The first Combined Cumulative Fix applicable for 9.0 is CF14. The first Combined Cumulative Fix applicable for 9.5 is CF17. With DX Container releases, HCL DX introduced a change in the CF naming scheme. After CF196, single versioning for both container and on-premise CF is applied. This change also signifies that fixes for both deployments are included into one Combined Cumulative Fix deliverable. Please see the following important points about this change: Starting with CF196, versioning now implements a 3-digit integer that increments every release (CF196, CF197, CF198\u2026 and so on.) Though the versioning is the same, the CFs are packaged separately and specific to each deployment. Please find the sample file naming for the CF package applicable to an on-premises deployment versus a container deployment. On-premises: HCL-DX-CF196_Server_Update.zip, HCL-DX-CF196_Express_Update.zip, or HCL-DX-CF196_RemoteSearch_Update.zip. Container: hcl-dx-kubernetes-v95-CF196.zip CF196 and later releases are applicable to HCL DX 8.5, 9.0, and 9.5 on-premise deployments. Customers can update directly to the latest CF release without installing multiple individual CFs (for example, 8.5 CF17 to 8.5 CF196).","title":"CF release versioning and update path"},{"location":"install/rm_cf/#learning-about-this-combined-cumulative-fix","text":"Some combined cumulative fixes focus on fixing known issues that are identified by APARs. Other cumulative fixes are focused on new features. Get an overview of the features and improvements delivered in the latest combined cumulative fix. Documentation resource: Combined Cumulative Fix Strategy View the fixes delivered for HCL Digital Experience 9.5. The documentation provides specific information on how to enable and use the new feature. Documentation resource: What's new with CF17 Documentation resource: Fix for IBM WebSphere Application Server 9.0.5","title":"Learning about this Combined Cumulative Fix"},{"location":"install/rm_cf/#applying-a-combined-cumulative-fix","text":"To apply a Combined Cumulative Fix, you must update the product files with IBM\u00ae Installation Manager. You must also update properties files, download the cumulative fix, and run ConfigEngine tasks to apply the changes to each profile in your system. The HCL Digital Experience Combined Cumulative Fix readme file provides detailed instructions on how to apply a fix and planning information. Use the Health Checker tool to identify issues with your installation. Use the Health Checker tool on your target system before you apply a Combined Cumulative Fix. Individual fixes: Individual fixes (Fixes) are included in the Combined Cumulative Fix Strategy. However, if you are going to upgrade prior to CF08, the following iFixes are required. Install one of the following Fixes, based on your system, before you upgrade: IBM WebSphere\u00ae Application Server Version 8.5.5.X FOR SDK 7.1: PI50090: SHIP JDK IV77682 AS AN IFIX FOR WAS 8.5.5.X FOR SDK 7.1 WebSphere Application Server Version 8.5.5.X FOR SDK 7: PI50092: SHIP JDK IV77682 AS AN IFIX FOR WAS 8.5.5.X FOR SDK 7PI50092: SHIP JDK IV77682 AS AN IFIX FOR WAS 8.5.5.X FOR SDK 7 To apply this cumulative fix, follow the readme file instructions that apply to your environment. You can find separate instructions for stand-alone, cluster, farm, and remote search environments from the Overview topic. Documentation resource: HCL Digital Experience Combined cumulative fix instructions: stand-alone Documentation resource: HCL Digital Experience Combined cumulative fix instructions: cluster Documentation resource: HCL Digital Experience Combined cumulative fix instructions: farm Documentation resource: HCL Digital Experience Combined cumulative fix instructions: remote search","title":"Applying a Combined Cumulative Fix"},{"location":"install/rm_container_deployment/","text":"HCL Digital Experience 9.5 Roadmap: Container deployment This roadmap outlines the HCL Digital Experience deployment on Docker and supported Kubernetes platforms such as, Red Hat OpenShift, Amazon Elastic Kubernetes Service (EKS), and Microsoft Azure Kubernetes Service (AKS). Who should use this roadmap HCL Digital Experience can be deployed to run on the Docker platform or as a fully container-based functioning deployment on Red Hat OpenShift and Amazon Elastic Kubernetes Service (EKS), and, as of 9.5 CF182, Microsoft Azure Kubernetes Service (AKS). Users can take advantage of these deployment models and can have an HCL Digital Experience 9.5 deployment operational in Docker or supported Kubernetes environment in minutes. Use this approach if you are an organization with the following requirements: An organization interested to deploy on Docker or supported Kubernetes platforms An organization that needs to make fault-tolerant systems An organization that needs to use services such as orchestration and auto-scaling to scale applications Topology diagram HCL Digital Experience 9.5 package contents The HCL Digital Experience 9.5 image files, available through the HCL DX 9.5 Container Update releases, can be downloaded from the HCL Software License Portal . Refer to the HCL Digital Experience 9.5 Container Deployment topic for additional guidance, including the latest HCL DX 9.5 image file listings, deployment, staging, maintenance, and customization guides.","title":"HCL Digital Experience 9.5 Roadmap: Container deployment"},{"location":"install/rm_container_deployment/#hcl-digital-experience-95-roadmap-container-deployment","text":"This roadmap outlines the HCL Digital Experience deployment on Docker and supported Kubernetes platforms such as, Red Hat OpenShift, Amazon Elastic Kubernetes Service (EKS), and Microsoft Azure Kubernetes Service (AKS).","title":"HCL Digital Experience 9.5 Roadmap: Container deployment"},{"location":"install/rm_container_deployment/#who-should-use-this-roadmap","text":"HCL Digital Experience can be deployed to run on the Docker platform or as a fully container-based functioning deployment on Red Hat OpenShift and Amazon Elastic Kubernetes Service (EKS), and, as of 9.5 CF182, Microsoft Azure Kubernetes Service (AKS). Users can take advantage of these deployment models and can have an HCL Digital Experience 9.5 deployment operational in Docker or supported Kubernetes environment in minutes. Use this approach if you are an organization with the following requirements: An organization interested to deploy on Docker or supported Kubernetes platforms An organization that needs to make fault-tolerant systems An organization that needs to use services such as orchestration and auto-scaling to scale applications","title":"Who should use this roadmap"},{"location":"install/rm_container_deployment/#topology-diagram","text":"","title":"Topology diagram"},{"location":"install/rm_container_deployment/#hcl-digital-experience-95-package-contents","text":"The HCL Digital Experience 9.5 image files, available through the HCL DX 9.5 Container Update releases, can be downloaded from the HCL Software License Portal . Refer to the HCL Digital Experience 9.5 Container Deployment topic for additional guidance, including the latest HCL DX 9.5 image file listings, deployment, staging, maintenance, and customization guides.","title":"HCL Digital Experience 9.5 package contents"},{"location":"migrate/mig_consider_7serveronly/","text":"Migration from Portal Server Offering 7.0 to Portal 8.5 You can migrate from a Portal Server Offering 7.0 to Portal 8.5. For more information about Portal Server Offering, see the Overview topic from the related links section. When you migrate from a 7.0 Server Offering-only installation to HCL Portal Version 8.5, you must complete steps that are not covered in the Configuration Wizard migration options. Instead of using the wizard to complete the final upgrade the Portal profile step, you must complete this step manually. To complete a 7.0 Server Offering-only migration, follow the steps for stand-alone and cluster migrations that are available in the Roadmaps for migration . However, when you use the Configuration Wizard options to Migrate to a New Version , complete all steps from the wizard except for the final Upgrade the Portal Profile step. You must run this step manually. Manually run the two following ConfigEngine tasks from the wp_profile_root /ConfigEngine directory: Run the add-disabled-wcm-to-server task: AIX\u00ae HP-UX Linux\u2122 Solaris: ./ConfigEngine.sh add-disabled-wcm-to-server -DWasPassword=yourpassword -DPortalAdminPwd=yourpassword IBM\u00ae i: ConfigEngine.sh add-disabled-wcm-to-server -DWasPassword=yourpassword -DPortalAdminPwd=yourpassword Windows\u2122: ConfigEngine.bat add-disabled-wcm-to-server -DWasPassword=yourpassword -DPortalAdminPwd=yourpassword z/OS\u00ae: ./ConfigEngine.sh add-disabled-wcm-to-server -DWasPassword=yourpassword -DPortalAdminPwd=yourpassword Run the upgrade-profile task and include the additional -Dprevious.family.WPFamilyName=server parameter: AIX HP-UX Linux Solaris: ./ConfigEngine/ConfigEngine.sh upgrade-profile -DWasPassword=yourpassword -DPortalAdminPwd=yourpassword -javaoption -Xms512m -javaoption -Xmx2048m -Dwcm.transactionTimeout=1200 -Dprevious.family.WPFamilyName=server IBM i: ConfigEngine/ConfigEngine.sh upgrade-profile -DWasPassword=yourpassword -DPortalAdminPwd=yourpassword -javaoption -Xms512m -javaoption -Xmx2048m -Dwcm.transactionTimeout=1200 -Dprevious.family.WPFamilyName=server Windows: ConfigEngine/ConfigEngine.bat upgrade-profile -DWasPassword=yourpassword -DPortalAdminPwd=yourpassword -javaoption -Xms512m -javaoption -Xmx2048m -Dwcm.transactionTimeout=1200 -Dprevious.family.WPFamilyName=server z/OS: .ConfigEngine/ConfigEngine.sh upgrade-profile -DWasPassword=yourpassword -DPortalAdminPwd=yourpassword -javaoption -Xms512m -javaoption -Xmx2048m -Dwcm.transactionTimeout=1200 -Dprevious.family.WPFamilyName=server Note: If you encounter any problems when you run the upgrade-profile task and you need to restart the task with -Dwp.migration.framework.resume=parameter, then ensure that you continue to use the -Dprevious.family.WPFamilyName=server parameter.","title":"Migration from Portal Server Offering 7.0 to Portal 8.5"},{"location":"migrate/mig_consider_7serveronly/#migration-from-portal-server-offering-70-to-portal-85","text":"You can migrate from a Portal Server Offering 7.0 to Portal 8.5. For more information about Portal Server Offering, see the Overview topic from the related links section. When you migrate from a 7.0 Server Offering-only installation to HCL Portal Version 8.5, you must complete steps that are not covered in the Configuration Wizard migration options. Instead of using the wizard to complete the final upgrade the Portal profile step, you must complete this step manually. To complete a 7.0 Server Offering-only migration, follow the steps for stand-alone and cluster migrations that are available in the Roadmaps for migration . However, when you use the Configuration Wizard options to Migrate to a New Version , complete all steps from the wizard except for the final Upgrade the Portal Profile step. You must run this step manually. Manually run the two following ConfigEngine tasks from the wp_profile_root /ConfigEngine directory: Run the add-disabled-wcm-to-server task: AIX\u00ae HP-UX Linux\u2122 Solaris: ./ConfigEngine.sh add-disabled-wcm-to-server -DWasPassword=yourpassword -DPortalAdminPwd=yourpassword IBM\u00ae i: ConfigEngine.sh add-disabled-wcm-to-server -DWasPassword=yourpassword -DPortalAdminPwd=yourpassword Windows\u2122: ConfigEngine.bat add-disabled-wcm-to-server -DWasPassword=yourpassword -DPortalAdminPwd=yourpassword z/OS\u00ae: ./ConfigEngine.sh add-disabled-wcm-to-server -DWasPassword=yourpassword -DPortalAdminPwd=yourpassword Run the upgrade-profile task and include the additional -Dprevious.family.WPFamilyName=server parameter: AIX HP-UX Linux Solaris: ./ConfigEngine/ConfigEngine.sh upgrade-profile -DWasPassword=yourpassword -DPortalAdminPwd=yourpassword -javaoption -Xms512m -javaoption -Xmx2048m -Dwcm.transactionTimeout=1200 -Dprevious.family.WPFamilyName=server IBM i: ConfigEngine/ConfigEngine.sh upgrade-profile -DWasPassword=yourpassword -DPortalAdminPwd=yourpassword -javaoption -Xms512m -javaoption -Xmx2048m -Dwcm.transactionTimeout=1200 -Dprevious.family.WPFamilyName=server Windows: ConfigEngine/ConfigEngine.bat upgrade-profile -DWasPassword=yourpassword -DPortalAdminPwd=yourpassword -javaoption -Xms512m -javaoption -Xmx2048m -Dwcm.transactionTimeout=1200 -Dprevious.family.WPFamilyName=server z/OS: .ConfigEngine/ConfigEngine.sh upgrade-profile -DWasPassword=yourpassword -DPortalAdminPwd=yourpassword -javaoption -Xms512m -javaoption -Xmx2048m -Dwcm.transactionTimeout=1200 -Dprevious.family.WPFamilyName=server Note: If you encounter any problems when you run the upgrade-profile task and you need to restart the task with -Dwp.migration.framework.resume=parameter, then ensure that you continue to use the -Dprevious.family.WPFamilyName=server parameter.","title":"Migration from Portal Server Offering 7.0 to Portal 8.5"},{"location":"migrate/mig_mashup_post/","text":"Mashup integration The mashup integration feature was removed in Portal Version 8.0 and is not included in later releases. If you used this feature in a previous release and you want to continue using it in HCL Digital Experience 8.5, you need to manually enable mashup integration after migration. In previous versions of Portal and HCL Digital Experience, the MashupMaker_Integration.ear was registered with the system in all cases. Even when it was only required in cases where the mashup integration feature was used actively in the system. To remove system overhead, the .ear file was removed from the portal configuration during migration. To enable the mashup integration feature, register the .ear file with the following command: AIX\u00ae HP-UX Linux\u2122 Solaris: ./ConfigEngine.sh action-create-ear-wp.mmi.deploy IBM\u00ae i: ./ConfigEngine.sh action-create-ear-wp.mmi.deploy Windows\u2122: ConfigEngine.bat action-create-ear-wp.mmi.deploy","title":"Mashup integration"},{"location":"migrate/mig_mashup_post/#mashup-integration","text":"The mashup integration feature was removed in Portal Version 8.0 and is not included in later releases. If you used this feature in a previous release and you want to continue using it in HCL Digital Experience 8.5, you need to manually enable mashup integration after migration. In previous versions of Portal and HCL Digital Experience, the MashupMaker_Integration.ear was registered with the system in all cases. Even when it was only required in cases where the mashup integration feature was used actively in the system. To remove system overhead, the .ear file was removed from the portal configuration during migration. To enable the mashup integration feature, register the .ear file with the following command: AIX\u00ae HP-UX Linux\u2122 Solaris: ./ConfigEngine.sh action-create-ear-wp.mmi.deploy IBM\u00ae i: ./ConfigEngine.sh action-create-ear-wp.mmi.deploy Windows\u2122: ConfigEngine.bat action-create-ear-wp.mmi.deploy","title":"Mashup integration"},{"location":"migrate/mig_nextsteps/","text":"Migration: Next steps To complete migration, you must first perform several post-migration steps that depend on how Portal is being used. After completing the post-migration steps, review the Enabling new functionality section to take advantage of the new tools available in HCL Digital Experience 8.5. Enabling new functionality should not be started until all post-migration steps have been completed.","title":"Migration: Next steps"},{"location":"migrate/mig_nextsteps/#migration-next-steps","text":"To complete migration, you must first perform several post-migration steps that depend on how Portal is being used. After completing the post-migration steps, review the Enabling new functionality section to take advantage of the new tools available in HCL Digital Experience 8.5. Enabling new functionality should not be started until all post-migration steps have been completed.","title":"Migration: Next steps"},{"location":"migrate/mig_post_jsf/","text":"JavaServer Faces implementation The default JavaServer Faces (JSF) implementation has changed starting in WebSphere Application Server 8. When you are migrating JSF portlets from an earlier version of HCL Digital Experience, be aware that WebSphere\u00ae Application Server has changed the default JSF implementation starting in WebSphere Application Server 8. For more information, see JavaServer Faces migration in the WebSphere Application Server documentation. Replacement of IBM JSF Bridge with HCL Digital Experience JSF Bridge With HCL Digital Experience 9.5 CF171 Container Update and later release , IBM WebSphere Application Server 9.0.5.2 is included and that IBM fix pack removed the IBM JSF portlet bridge With HCL Digital Experience 9.5 CF18 update and Container Update releases, an updated JSF portlet bridge is introduced and installed in the HCL Digital Experience software. Customers installing HCL Digital Experience 8.5, 9.0, 9.5 CF18, or Container Update release CF18, using an IBM Websphere Application Server version later than 8.5.5.17 or 9.0.5.2, will have the JSF portlet bridge installed automatically. If customers install HCL Digital Experience 9.5 CF18 and upgrade the IBM WebSphere Application Server to 8.5.5.17 and higher, or 9.0.5.2 and higher, to the required level at a later point, HCL provides the following config task to enable the HCL JSF portlet bridge. For IBM WebSphere Application Server 8.5.5.x: To deploy: ConfigEngine.sh/bat update-jsfportletbridge8x To remove: ConfigEngine.sh/bat rollback-jsfportletbridge8x For IBM WebSphere Application Server 9.0.5.x: To deploy: ConfigEngine.sh/bat update-jsfportletbridge9x To remove: ConfigEngine.sh/bat rollback-jsfportletbridge9x For additional information on the use of the JavaServer Faces portlet bridge, see Configuring Portlet Bridge for JavaServer Faces . JSF 2.2 Support with HCL DX Portlet Bridge The JSF implementation which supports the DX Portlet Bridge is provided by IBM\u2019s WAS product. Currently WAS provides the following: WAS 8.5 provides support for JSF 2.0 WAS 9.0 provides support for JSF 2.2 Prior to HCL taking ownership of the Portlet Bridge IBM claimed support for JSF 2.2 in the Portlet Bridge. Upon further review HCL has determined that the IBM implementation of JSF 2.2 in the Portlet Bridge was incomplete. As a result, we recommend customers utilizing JSF 2.2 applications to continue coding to the JSF 2.0 specifications and not use the new JSF 2.2 features. Note: JSF 2.2 claims backward compatibility so JSF 2.0 applications should work with potentially minor if any modifications. HCL remains committed to providing ongoing support for customers running portlets for many years to come as this is a key capability of the DX product. While HCL is investigating what is required to complete the JSF 2.2 bridge, we do not anticipate a solution being available in the short-term. HCL will update this statement as soon as we have determined a solution for the portlet bridge JSF 2.2 implementation.","title":"JavaServer Faces implementation"},{"location":"migrate/mig_post_jsf/#javaserver-faces-implementation","text":"The default JavaServer Faces (JSF) implementation has changed starting in WebSphere Application Server 8. When you are migrating JSF portlets from an earlier version of HCL Digital Experience, be aware that WebSphere\u00ae Application Server has changed the default JSF implementation starting in WebSphere Application Server 8. For more information, see JavaServer Faces migration in the WebSphere Application Server documentation.","title":"JavaServer Faces implementation"},{"location":"migrate/mig_post_jsf/#replacement-of-ibm-jsf-bridge-with-hcl-digital-experience-jsf-bridge","text":"With HCL Digital Experience 9.5 CF171 Container Update and later release , IBM WebSphere Application Server 9.0.5.2 is included and that IBM fix pack removed the IBM JSF portlet bridge With HCL Digital Experience 9.5 CF18 update and Container Update releases, an updated JSF portlet bridge is introduced and installed in the HCL Digital Experience software. Customers installing HCL Digital Experience 8.5, 9.0, 9.5 CF18, or Container Update release CF18, using an IBM Websphere Application Server version later than 8.5.5.17 or 9.0.5.2, will have the JSF portlet bridge installed automatically. If customers install HCL Digital Experience 9.5 CF18 and upgrade the IBM WebSphere Application Server to 8.5.5.17 and higher, or 9.0.5.2 and higher, to the required level at a later point, HCL provides the following config task to enable the HCL JSF portlet bridge. For IBM WebSphere Application Server 8.5.5.x: To deploy: ConfigEngine.sh/bat update-jsfportletbridge8x To remove: ConfigEngine.sh/bat rollback-jsfportletbridge8x For IBM WebSphere Application Server 9.0.5.x: To deploy: ConfigEngine.sh/bat update-jsfportletbridge9x To remove: ConfigEngine.sh/bat rollback-jsfportletbridge9x For additional information on the use of the JavaServer Faces portlet bridge, see Configuring Portlet Bridge for JavaServer Faces .","title":"Replacement of IBM JSF Bridge with HCL Digital Experience JSF Bridge"},{"location":"migrate/mig_post_jsf/#jsf-22-support-with-hcl-dx-portlet-bridge","text":"The JSF implementation which supports the DX Portlet Bridge is provided by IBM\u2019s WAS product. Currently WAS provides the following: WAS 8.5 provides support for JSF 2.0 WAS 9.0 provides support for JSF 2.2 Prior to HCL taking ownership of the Portlet Bridge IBM claimed support for JSF 2.2 in the Portlet Bridge. Upon further review HCL has determined that the IBM implementation of JSF 2.2 in the Portlet Bridge was incomplete. As a result, we recommend customers utilizing JSF 2.2 applications to continue coding to the JSF 2.0 specifications and not use the new JSF 2.2 features. Note: JSF 2.2 claims backward compatibility so JSF 2.0 applications should work with potentially minor if any modifications. HCL remains committed to providing ongoing support for customers running portlets for many years to come as this is a key capability of the DX product. While HCL is investigating what is required to complete the JSF 2.2 bridge, we do not anticipate a solution being available in the short-term. HCL will update this statement as soon as we have determined a solution for the portlet bridge JSF 2.2 implementation.","title":"JSF 2.2 Support with HCL DX Portlet Bridge"},{"location":"migrate/mig_t_enable_new/","text":"Enabling new functionality in a migrated portal The migration process collects configuration data and applications from an earlier installed version of HCL Digital Experience and merges them into the newer installed version so that the new environment is identical to the earlier environment. Taking advantage of new functionality that was not available in the earlier portal requires additional attention after migration is complete.","title":"Enabling new functionality in a migrated portal"},{"location":"migrate/mig_t_enable_new/#enabling-new-functionality-in-a-migrated-portal","text":"The migration process collects configuration data and applications from an earlier installed version of HCL Digital Experience and merges them into the newer installed version so that the new environment is identical to the earlier environment. Taking advantage of new functionality that was not available in the earlier portal requires additional attention after migration is complete.","title":"Enabling new functionality in a migrated portal"},{"location":"migrate/mig_t_post_mig/","text":"Post-migration activities After you migrate to HCL Digital Experience 8.5, you need to complete extra tasks depending on how you customized the source portal environment and which components you used. First, complete the Applying the latest Combined Cumulative Fix updates task, then you can begin the post-migration tasks followed by enabling new functionality.","title":"Post-migration activities"},{"location":"migrate/mig_t_post_mig/#post-migration-activities","text":"After you migrate to HCL Digital Experience 8.5, you need to complete extra tasks depending on how you customized the source portal environment and which components you used. First, complete the Applying the latest Combined Cumulative Fix updates task, then you can begin the post-migration tasks followed by enabling new functionality.","title":"Post-migration activities"},{"location":"migrate/mig_t_pre_standalone_ldap/","text":"Federating the LDAP user registry The stand-alone LDAP user registry configuration is deprecated. Instead, configure the federated LDAP user registry. Run the wp-modify-federated-security task to change to a federated LDAP user registry. In a stand-alone server environment, you can complete the following task when the servers are either stopped or started. In a clustered environment, start the deployment manager and node agent. Then, verify that they are able to synchronize. Remember: Starting with HCL Digital Experience Version 8.5, the stand-alone LDAP repository is deprecated. Change to the federated LDAP user repository. Use the wp_security_federated.properties helper file that is in the wp_profile_root /ConfigEngine/config/helpers directory. It ensures that the correct properties are entered. In the following instructions, where the step refers to the wkplc.properties file, use your wp_security_federated.properties helper file. Go to the wp_profile_root /ConfigEngine/properties directory. Open the wkplc.properties file with a text editor. Update the following parameters in the wkplc.properties file under the VMM Federated repository properties heading: Note: Go to the properties file for specific information about the parameters. federated.primaryAdminId federated.realm federated.serverId federated.serverPassword Open a command prompt. Change to the wp_profile_root /ConfigEngine directory. Run the following task to change the configuration to use a federated repository: AIX\u00ae HP-UX Linux\u2122 Solaris z/OS\u00ae: ./ConfigEngine.sh wp-modify-federated-security -DWasPassword=password -Dskip.ldap.validation=true IBM\u00ae i: ConfigEngine.sh wp-modify-federated-security -DWasPassword=password -Dskip.ldap.validation=true Windows\u2122: ConfigEngine.bat wp-modify-federated-security -DWasPassword=password -Dskip.ldap.validation=true Important: If you have HCL Portal Version 8.5 with a CF05 or later fix pack applied, then you do not have to complete the following steps. Stop and restart the appropriate servers to propagate the changes. For instructions, go to Starting and stopping servers, deployment managers, and node agents . Log in to HCL Portal as an administrator. Click Administration . Then, click Virtual Portals > Manage Virtual Portals . Edit each Virtual Portal using the pencil icon. Set User realm as blank. Click OK . Edit each Virtual Portal using the pencil icon. Set User realm to match the realm ID that you set for federated.realm. Click OK .","title":"Federating the LDAP user registry"},{"location":"migrate/mig_t_pre_standalone_ldap/#federating-the-ldap-user-registry","text":"The stand-alone LDAP user registry configuration is deprecated. Instead, configure the federated LDAP user registry. Run the wp-modify-federated-security task to change to a federated LDAP user registry. In a stand-alone server environment, you can complete the following task when the servers are either stopped or started. In a clustered environment, start the deployment manager and node agent. Then, verify that they are able to synchronize. Remember: Starting with HCL Digital Experience Version 8.5, the stand-alone LDAP repository is deprecated. Change to the federated LDAP user repository. Use the wp_security_federated.properties helper file that is in the wp_profile_root /ConfigEngine/config/helpers directory. It ensures that the correct properties are entered. In the following instructions, where the step refers to the wkplc.properties file, use your wp_security_federated.properties helper file. Go to the wp_profile_root /ConfigEngine/properties directory. Open the wkplc.properties file with a text editor. Update the following parameters in the wkplc.properties file under the VMM Federated repository properties heading: Note: Go to the properties file for specific information about the parameters. federated.primaryAdminId federated.realm federated.serverId federated.serverPassword Open a command prompt. Change to the wp_profile_root /ConfigEngine directory. Run the following task to change the configuration to use a federated repository: AIX\u00ae HP-UX Linux\u2122 Solaris z/OS\u00ae: ./ConfigEngine.sh wp-modify-federated-security -DWasPassword=password -Dskip.ldap.validation=true IBM\u00ae i: ConfigEngine.sh wp-modify-federated-security -DWasPassword=password -Dskip.ldap.validation=true Windows\u2122: ConfigEngine.bat wp-modify-federated-security -DWasPassword=password -Dskip.ldap.validation=true Important: If you have HCL Portal Version 8.5 with a CF05 or later fix pack applied, then you do not have to complete the following steps. Stop and restart the appropriate servers to propagate the changes. For instructions, go to Starting and stopping servers, deployment managers, and node agents . Log in to HCL Portal as an administrator. Click Administration . Then, click Virtual Portals > Manage Virtual Portals . Edit each Virtual Portal using the pencil icon. Set User realm as blank. Click OK . Edit each Virtual Portal using the pencil icon. Set User realm to match the realm ID that you set for federated.realm. Click OK .","title":"Federating the LDAP user registry"},{"location":"migrate/virt_portal_post_mig/","text":"Virtual Portal tasks If you configured HCL Portal to use virtual portal, there are some additional steps that are needed to complete the migration.","title":"Virtual Portal tasks"},{"location":"migrate/virt_portal_post_mig/#virtual-portal-tasks","text":"If you configured HCL Portal to use virtual portal, there are some additional steps that are needed to complete the migration.","title":"Virtual Portal tasks"},{"location":"open_api/openapi_overview/","text":"HCL Experience API This documentation provides developers with documentation on how to provision, configure, and use the HCL Experience API with the HCL Digital Experience 9.5 platform. Overview The HCL Experience API is a set of OpenAPI-compliant REST APIs available for customers deploying HCL Digital Experience 9.5 containers on supported Kubernetes platforms. It supports the integration and management of HCL Digital Experience content and functionality to any digital channel using any front-end development framework. The HCL Experience API includes REST APIs that serve as a wrapper around previously published HCL Digital Experience HTTP-based APIs. Reference the HCL Digital Experience 8.5 and 9.0 topics for additional information about previously published HCL Digital Experience APIs. Benefits of using HCL Experience API include: OpenAPI compliance GraphQL enabled Note: Use of GraphQL functions is available at a Beta level and not supported for production use. Simplified JSON payloads Enhanced API documentation The HCL Experience API provides a simplified API to lower the burden for developers to work with it. It also has human-readable request and response payloads in JSON format for easy request construction. The HCL Experience API allows users to send and receive requests via OpenAPI-compliant interfaces. This API set accepts form-encoded request bodies made over HTTPS, and returns JSON-encoded responses using standard HTTP response codes and verbs. The HCL Experience API describes a high-level API through which the following specific APIs are exposed: HCL Ring API : Presents developer entry points to HCL Digital Experience 9.5 core platform capabilities which are divided into two main categories - Authorization APIs and Web Content APIs . HCL Digital Asset Management API : Presents developer entry points to the Digital Asset Management features of HCL Digital Experience 9.5. HCL Image Processor API : Presents developer entry points to the Digital Asset Management Image Processor functions of HCL Digital Experience 9.5. Note: Future HCL Digital Experience 9.5 feature functionality will also be exposed through the HCL Digital Experience API. It is recommended that developers building solutions for HCL Digital Experience 9.5 running on Kubernetes programmatically use the HCL Experience API for the scenarios that are covered. The HCL Experience API is a component of the HCL Digital Experience offerings. HCL Digital Experience offering license and download packages are provided with HCL Digital Experience entitlements available to customers on the HCL Software License Portal . Note: Beginning with Container Update and CF196, additional Experience APIs are introduced, which support development of Design Studio (Beta) and Web Content Manager functions. Video: Using the Digital Experience V2 Web Content Manager APIs . Installation instructions for HCL DX 9.5 image components may be viewed in the Container Deployment pages. Detailed API listings for the HCL Experience API may be viewed at the HCL Digital Experience GitHub repository .","title":"HCL Experience API"},{"location":"open_api/openapi_overview/#hcl-experience-api","text":"This documentation provides developers with documentation on how to provision, configure, and use the HCL Experience API with the HCL Digital Experience 9.5 platform.","title":"HCL Experience API"},{"location":"open_api/openapi_overview/#overview","text":"The HCL Experience API is a set of OpenAPI-compliant REST APIs available for customers deploying HCL Digital Experience 9.5 containers on supported Kubernetes platforms. It supports the integration and management of HCL Digital Experience content and functionality to any digital channel using any front-end development framework. The HCL Experience API includes REST APIs that serve as a wrapper around previously published HCL Digital Experience HTTP-based APIs. Reference the HCL Digital Experience 8.5 and 9.0 topics for additional information about previously published HCL Digital Experience APIs. Benefits of using HCL Experience API include: OpenAPI compliance GraphQL enabled Note: Use of GraphQL functions is available at a Beta level and not supported for production use. Simplified JSON payloads Enhanced API documentation The HCL Experience API provides a simplified API to lower the burden for developers to work with it. It also has human-readable request and response payloads in JSON format for easy request construction. The HCL Experience API allows users to send and receive requests via OpenAPI-compliant interfaces. This API set accepts form-encoded request bodies made over HTTPS, and returns JSON-encoded responses using standard HTTP response codes and verbs. The HCL Experience API describes a high-level API through which the following specific APIs are exposed: HCL Ring API : Presents developer entry points to HCL Digital Experience 9.5 core platform capabilities which are divided into two main categories - Authorization APIs and Web Content APIs . HCL Digital Asset Management API : Presents developer entry points to the Digital Asset Management features of HCL Digital Experience 9.5. HCL Image Processor API : Presents developer entry points to the Digital Asset Management Image Processor functions of HCL Digital Experience 9.5. Note: Future HCL Digital Experience 9.5 feature functionality will also be exposed through the HCL Digital Experience API. It is recommended that developers building solutions for HCL Digital Experience 9.5 running on Kubernetes programmatically use the HCL Experience API for the scenarios that are covered. The HCL Experience API is a component of the HCL Digital Experience offerings. HCL Digital Experience offering license and download packages are provided with HCL Digital Experience entitlements available to customers on the HCL Software License Portal . Note: Beginning with Container Update and CF196, additional Experience APIs are introduced, which support development of Design Studio (Beta) and Web Content Manager functions. Video: Using the Digital Experience V2 Web Content Manager APIs . Installation instructions for HCL DX 9.5 image components may be viewed in the Container Deployment pages. Detailed API listings for the HCL Experience API may be viewed at the HCL Digital Experience GitHub repository .","title":"Overview"},{"location":"overview/blogs_wikis/","text":"Blogs and wikis A set of preinstalled web content libraries are supplied. With these libraries, you can add blog and wiki features to your websites. Use blogs, blog libraries, and wikis to tap into the power of the community and to change the way you work. Blogs can be a helpful tool to use when you want to generate ideas around a single topic. You can use blogs for your own individual work or to gain feedback on a single concept from the larger team. Blog libraries take blogs to the next level. Rather than creating a blog per topic, you can use blog libraries to track multiple topics in a centralized location. Wikis also provide you with another alternative for authoring content. Simple inline editing, including the insertion of images and links, makes authoring wikis quick and easy. You can also tag and rate blog and wiki content. Blogs, blog libraries, and wikis use the template libraries that are provided by HCL Web Content Manager. Each blog, blog library, and wiki have its own library. The page hierarchy that is provided for these components is the common one defined by the Web Content Manager template libraries. If you show an authoring template in the Create Content toolbar, set the summary presentation on the authoring template. This way, users see this summary presentation when they choose Add to page to add a reference of a piece of content from another page. If you do not set the summary presentation on the authoring template, the portal shows a message that says There is no summary presentation for this content . To set the summary presentation on the authoring templates, go to the authoring template and then select a presentation template under Item Properties. Parent topic: Social business","title":"Blogs and wikis"},{"location":"overview/blogs_wikis/#blogs-and-wikis","text":"A set of preinstalled web content libraries are supplied. With these libraries, you can add blog and wiki features to your websites. Use blogs, blog libraries, and wikis to tap into the power of the community and to change the way you work. Blogs can be a helpful tool to use when you want to generate ideas around a single topic. You can use blogs for your own individual work or to gain feedback on a single concept from the larger team. Blog libraries take blogs to the next level. Rather than creating a blog per topic, you can use blog libraries to track multiple topics in a centralized location. Wikis also provide you with another alternative for authoring content. Simple inline editing, including the insertion of images and links, makes authoring wikis quick and easy. You can also tag and rate blog and wiki content. Blogs, blog libraries, and wikis use the template libraries that are provided by HCL Web Content Manager. Each blog, blog library, and wiki have its own library. The page hierarchy that is provided for these components is the common one defined by the Web Content Manager template libraries. If you show an authoring template in the Create Content toolbar, set the summary presentation on the authoring template. This way, users see this summary presentation when they choose Add to page to add a reference of a piece of content from another page. If you do not set the summary presentation on the authoring template, the portal shows a message that says There is no summary presentation for this content . To set the summary presentation on the authoring templates, go to the authoring template and then select a presentation template under Item Properties. Parent topic: Social business","title":"Blogs and wikis"},{"location":"overview/ccf_strategy85/","text":"Combined Cumulative Fix strategy 8.5 The Combined Cumulative Fix is a package of HCL Digital Experience fixes. Cumulative fixes can only be applied to an existing functional version of HCL Portal Version or an HCL Portal Version with a previous cumulative fix applied. Read the instructions to learn how to apply or roll back an HCL Portal combined cumulative fix. The following instruction links are for HCL Portal Version 8.5 CF08 or later. Beginning with CF14, these instructions can be applied on a Portal system running either Version 8.5 or Version 9.0. Note: Each release of a maintenance package is included in your HCL Digital Experience offering. Overview Applying the cumulative fix is a multi-step process. You must first update the product files using IBM Installation Manager, and then you must use the Portal ConfigEngine tool to apply the changes to each profile in your system. The update is not complete until you have performed both steps! Likewise, to roll back a fix, you must first use IBM Installation Manager to restore the older product files and then use ConfigEngine to apply the rollback to each profile. Videos : HCL Digital Experience - Perform CF Upgrade with GUI in HCL Portal HCL Digital Experience - Perform CF Upgrade with Console in HCL Portal The procedures below describe these steps in detail. Go to Installing the HCL Digital Experience software documentation to install according your operating system. What's new For a list of the Fixes which have gone into each CF, go to the What's new in the Combined Cumulative fixes section in the Version 8.5 documentation. Effective in Version 8.5 CF08, the update and rollback processes have been streamlined for easier customer application. The previous CF instructions detailing \"PRE-APPLY-FIX\" and \"APPLY-FIX\" upgrade commands have now been integrated into the single applyCF command. Correspondingly, the rollback instructions for \"PRE-ROLLBACK-FIX\" and \"ROLLBACK-FIX\" have been integrated into the single \"rollbackCF\" command. To assist you with your upgrade, HCL is now providing a Health Checker tool that you can use to validate your Portal installation before applying a cumulative fix. Simply execute this tool on the target system and review the report that is generated to see if there are any issues you need to resolve before installing the update. See the Health Checker in this topic directory or the README text in the Combined Cumulative Fix ZIP file. The HCL Script Application was made available as V1.3 and earlier by the catalog. It was developed further and included with Portal Version 8.5 CF09 and later, then also renamed to \"Script Application\" for Portal Version 8.5 CF11. When customers have the old HCL Script Application catalog version 1.3 AND then install CF09 or later, the security settings need to be obtained BEFORE installing the CF. The detailed information can be found under the first optional step of the procedure in The Script Application security overview section in the Version 8.5 documentation. The Ephox EditLive! Java based Rich Text Editor has been deprecated as of CF11 and replaced by Textbox.io. More details about CF11 can found in CF11 topic page in the Version 8.5 documentation. Due to security vulnerabilities in the Apache Axis library (JAR file), the \"axis.jar\" will be removed from the HCL Portal class path effective in CF12. For inquiries, go to HCL Software Support page. Portal Version 8.5 CF12 introduces support for JDK8 in conjunction with WAS 8.5.5.10. This will also require WAS iFix PI67166 on top of WAS 8.5.5.10 (scheduled for inclusion in WAS 8.5.5.11.) Support for HCL Rich Media Edition (RME) has been removed effective with HCL Portal and Web Content Manager Version 8.5 CF14, and will not be supported in future releases. For more information about this HCL Rich Media Edition support lifecycle announcement, go to HCL Software Support page. Ephox EditLive! has been removed effective in Version 8.5 CF14 and is no longer supported. This change follows the steps taken above in Version 8.5 CF11 to deprecate Ephox EditLive! and replace it with Textbox.io as the new advanced rich text editor for HCL Web Content Manager. Customers that have manually installed and configured EditLive! as a Third Party editor option can continue to use EditLive! but will no longer be able to receive support and updates via HCL. Also effective with Version 8.5 CF14, the Textbox.io will support the following web browsers/levels . CF16 for Portal Versions 8.5 and 9.0 contain security fix PH01459 for CVE-2018-1736. It introduces a configurable white list for external hosts, which are allowed as redirects via the CategoryProfileUpdater Module. Server relative redirects are continuously working. Redirects to external hosts not specified in the white list are blocked. The white list is enabled per default, and needs to be filled in with appropriate values, if this functionality is used in your installation. For inquiries, go to HCL Software Support page. CF16 for Portal Versions 8.5 and 9.0 changes the behavior of Cumulative Fix installation related to out of the box resources to address CVE-2018-1420. Prior to CF16, access control settings of out of the box resources were reset to their out of the box access control settings, overriding potential customizations. This has been changed such that the Cumulative Fix installation leaves the access control settings at their current values. A side effect of this change is, that out of the box resources introduced in a Cumulative Fix after the initial version of Portal Version 8.5 or Version 9.0 will not receive any access control settings, if CF16 or later is installed on top of a CF level prior to introduction of an out of the box resource. In such a case the resource will not have any access control configured, and will have to be set manually to your security requirements. See the HCL Digital Experience 8.5 documentation on how to manage the access control and get an overview of initial access control settings .","title":"Combined Cumulative Fix strategy 8.5"},{"location":"overview/ccf_strategy85/#combined-cumulative-fix-strategy-85","text":"The Combined Cumulative Fix is a package of HCL Digital Experience fixes. Cumulative fixes can only be applied to an existing functional version of HCL Portal Version or an HCL Portal Version with a previous cumulative fix applied. Read the instructions to learn how to apply or roll back an HCL Portal combined cumulative fix. The following instruction links are for HCL Portal Version 8.5 CF08 or later. Beginning with CF14, these instructions can be applied on a Portal system running either Version 8.5 or Version 9.0. Note: Each release of a maintenance package is included in your HCL Digital Experience offering.","title":"Combined Cumulative Fix strategy 8.5"},{"location":"overview/ccf_strategy85/#overview","text":"Applying the cumulative fix is a multi-step process. You must first update the product files using IBM Installation Manager, and then you must use the Portal ConfigEngine tool to apply the changes to each profile in your system. The update is not complete until you have performed both steps! Likewise, to roll back a fix, you must first use IBM Installation Manager to restore the older product files and then use ConfigEngine to apply the rollback to each profile. Videos : HCL Digital Experience - Perform CF Upgrade with GUI in HCL Portal HCL Digital Experience - Perform CF Upgrade with Console in HCL Portal The procedures below describe these steps in detail. Go to Installing the HCL Digital Experience software documentation to install according your operating system.","title":"Overview"},{"location":"overview/ccf_strategy85/#whats-new","text":"For a list of the Fixes which have gone into each CF, go to the What's new in the Combined Cumulative fixes section in the Version 8.5 documentation. Effective in Version 8.5 CF08, the update and rollback processes have been streamlined for easier customer application. The previous CF instructions detailing \"PRE-APPLY-FIX\" and \"APPLY-FIX\" upgrade commands have now been integrated into the single applyCF command. Correspondingly, the rollback instructions for \"PRE-ROLLBACK-FIX\" and \"ROLLBACK-FIX\" have been integrated into the single \"rollbackCF\" command. To assist you with your upgrade, HCL is now providing a Health Checker tool that you can use to validate your Portal installation before applying a cumulative fix. Simply execute this tool on the target system and review the report that is generated to see if there are any issues you need to resolve before installing the update. See the Health Checker in this topic directory or the README text in the Combined Cumulative Fix ZIP file. The HCL Script Application was made available as V1.3 and earlier by the catalog. It was developed further and included with Portal Version 8.5 CF09 and later, then also renamed to \"Script Application\" for Portal Version 8.5 CF11. When customers have the old HCL Script Application catalog version 1.3 AND then install CF09 or later, the security settings need to be obtained BEFORE installing the CF. The detailed information can be found under the first optional step of the procedure in The Script Application security overview section in the Version 8.5 documentation. The Ephox EditLive! Java based Rich Text Editor has been deprecated as of CF11 and replaced by Textbox.io. More details about CF11 can found in CF11 topic page in the Version 8.5 documentation. Due to security vulnerabilities in the Apache Axis library (JAR file), the \"axis.jar\" will be removed from the HCL Portal class path effective in CF12. For inquiries, go to HCL Software Support page. Portal Version 8.5 CF12 introduces support for JDK8 in conjunction with WAS 8.5.5.10. This will also require WAS iFix PI67166 on top of WAS 8.5.5.10 (scheduled for inclusion in WAS 8.5.5.11.) Support for HCL Rich Media Edition (RME) has been removed effective with HCL Portal and Web Content Manager Version 8.5 CF14, and will not be supported in future releases. For more information about this HCL Rich Media Edition support lifecycle announcement, go to HCL Software Support page. Ephox EditLive! has been removed effective in Version 8.5 CF14 and is no longer supported. This change follows the steps taken above in Version 8.5 CF11 to deprecate Ephox EditLive! and replace it with Textbox.io as the new advanced rich text editor for HCL Web Content Manager. Customers that have manually installed and configured EditLive! as a Third Party editor option can continue to use EditLive! but will no longer be able to receive support and updates via HCL. Also effective with Version 8.5 CF14, the Textbox.io will support the following web browsers/levels . CF16 for Portal Versions 8.5 and 9.0 contain security fix PH01459 for CVE-2018-1736. It introduces a configurable white list for external hosts, which are allowed as redirects via the CategoryProfileUpdater Module. Server relative redirects are continuously working. Redirects to external hosts not specified in the white list are blocked. The white list is enabled per default, and needs to be filled in with appropriate values, if this functionality is used in your installation. For inquiries, go to HCL Software Support page. CF16 for Portal Versions 8.5 and 9.0 changes the behavior of Cumulative Fix installation related to out of the box resources to address CVE-2018-1420. Prior to CF16, access control settings of out of the box resources were reset to their out of the box access control settings, overriding potential customizations. This has been changed such that the Cumulative Fix installation leaves the access control settings at their current values. A side effect of this change is, that out of the box resources introduced in a Cumulative Fix after the initial version of Portal Version 8.5 or Version 9.0 will not receive any access control settings, if CF16 or later is installed on top of a CF level prior to introduction of an out of the box resource. In such a case the resource will not have any access control configured, and will have to be set manually to your security requirements. See the HCL Digital Experience 8.5 documentation on how to manage the access control and get an overview of initial access control settings .","title":"What's new"},{"location":"overview/ccf_strategy95/","text":"Combined Cumulative Fix (CF) Installation The Combined Cumulative Fix is a package of HCL Digital Experience fixes. Read the instructions to learn how to apply or roll back a combined cumulative fix. About Version 9.5 Cumulative Fixes The following instruction links are for HCL Digital Experience 9.5 CF17 and higher. These instructions can be applied on an HCL Digital Experience system running either 8.5 or 9.0. CF17 is used as a prerequisite fix in order for users to move up to 9.5 level. Video : HCL Digital Experience - Installing HCL Portal 9.5 CF18 Note: Each release of a maintenance package is included in your HCL Digital Experience offering. Overview Applying the cumulative fix is a multi-step process. You must first update the product files using IBM Installation Manager, and then you must use the Portal ConfigEngine tool to apply the changes to each profile in your system. The update is not complete until you have performed both steps! Likewise, to roll back a fix, you must first use IBM Installation Manager to restore the older product files and then use ConfigEngine to apply the rollback to each profile. The procedures below describe these steps in detail. Go to Installing the HCL Digital Experience software documentation to install according to your operating system. What's new For a list of the Fixes which have gone into each CF, go to the List of software fixes section. Effective in 8.5 CF08, the update and rollback processes have been streamlined for easier customer application. The previous CF instructions detailing \"PRE-APPLY-FIX\" and \"APPLY-FIX\" upgrade commands have now been integrated into the single applyCF command. Correspondingly, the rollback instructions for \"PRE-ROLLBACK-FIX\" and \"ROLLBACK-FIX\" have been integrated into the single \"rollbackCF\" command. To assist you with your upgrade, HCL is now providing a Health Checker tool that you can use to validate your Portal installation before applying a cumulative fix. Simply execute this tool on the target system and review the report that is generated to see if there are any issues you need to resolve before installing the update. See the Health Checker in this topic directory or the README text in the Combined Cumulative Fix ZIP file. The HCL Script Application was made available as V1.3 and earlier by the catalog. It was developed further and included with Portal Version 8.5 CF09 and later, then also renamed to \"Script Application\" for Portal 8.5 CF11. When customers have the old HCL Script Application catalog version 1.3 AND then install CF09 or later, the security settings need to be obtained BEFORE installing the CF. The detailed information can be found under the first optional step of the procedure in The Script Application security overview section in the 8.5 documentation. The Ephox EditLive! Java based Rich Text Editor has been deprecated as of CF11 and replaced by Textbox.io. More details about CF11 can found in CF11 topic page in the Version 8.5 documentation. Due to security vulnerabilities in the Apache Axis library (JAR file), the \"axis.jar\" will be removed from the HCL Portal class path effective in CF12. For inquiries, go to HCL Software Support page. Portal Version 8.5 CF12 introduces support for JDK8 in conjunction with WAS 8.5.5.10. This will also require WAS iFix PI67166 on top of WAS 8.5.5.10 (scheduled for inclusion in WAS 8.5.5.11.) Support for IBM Rich Media Edition (RME) has been removed effective with HCL Portal and Web Content Manager Version 8.5 CF14, and will not be supported in future releases. For more information about this IBM Rich Media Edition support lifecycle announcement, go to HCL Software Support page. Ephox EditLive! has been removed effective in Version 8.5 CF14 and is no longer supported. This change follows the steps taken above in Version 8.5 CF11 to deprecate Ephox EditLive! and replace it with Textbox.io as the new advanced rich text editor for HCL Web Content Manager. Customers that have manually installed and configured EditLive! as a Third Party editor option can continue to use EditLive! but will no longer be able to receive support and updates via HCL. Also effective with Version 8.5 CF14, the Textbox.io will support the following web browsers/levels . CF16 for Portal Versions 8.5 and 9.0 contain security fix PH01459 for CVE-2018-1736. It introduces a configurable white list for external hosts, which are allowed as redirects via the CategoryProfileUpdater Module. Server relative redirects are continuously working. Redirects to external hosts not specified in the white list are blocked. The white list is enabled per default, and needs to be filled in with appropriate values, if this functionality is used in your installation. For inquiries, go to HCL Software Support page. CF16 for Portal Versions 8.5 and 9.0 changes the behavior of Cumulative Fix installation related to out of the box resources to address CVE-2018-1420. Prior to CF16, access control settings of out of the box resources were reset to their out of the box access control settings, overriding potential customizations. This has been changed such that the Cumulative Fix installation leaves the access control settings at their current values. A side effect of this change is, that out of the box resources introduced in a Cumulative Fix after the initial version of Portal Version 8.5 or Version 9.0 will not receive any access control settings, if CF16 or later is installed on top of a CF level prior to introduction of an out of the box resource. In such a case the resource will not have any access control configured, and will have to be set manually to your security requirements. See the HCL Digital Experience 8.5 documentation on how to manage the access control and get an overview of initial access control settings .","title":"Combined Cumulative Fix \\(CF\\) Installation"},{"location":"overview/ccf_strategy95/#combined-cumulative-fix-cf-installation","text":"The Combined Cumulative Fix is a package of HCL Digital Experience fixes. Read the instructions to learn how to apply or roll back a combined cumulative fix.","title":"Combined Cumulative Fix (CF) Installation"},{"location":"overview/ccf_strategy95/#about-version-95-cumulative-fixes","text":"The following instruction links are for HCL Digital Experience 9.5 CF17 and higher. These instructions can be applied on an HCL Digital Experience system running either 8.5 or 9.0. CF17 is used as a prerequisite fix in order for users to move up to 9.5 level. Video : HCL Digital Experience - Installing HCL Portal 9.5 CF18 Note: Each release of a maintenance package is included in your HCL Digital Experience offering.","title":"About Version 9.5 Cumulative Fixes"},{"location":"overview/ccf_strategy95/#overview","text":"Applying the cumulative fix is a multi-step process. You must first update the product files using IBM Installation Manager, and then you must use the Portal ConfigEngine tool to apply the changes to each profile in your system. The update is not complete until you have performed both steps! Likewise, to roll back a fix, you must first use IBM Installation Manager to restore the older product files and then use ConfigEngine to apply the rollback to each profile. The procedures below describe these steps in detail. Go to Installing the HCL Digital Experience software documentation to install according to your operating system.","title":"Overview"},{"location":"overview/ccf_strategy95/#whats-new","text":"For a list of the Fixes which have gone into each CF, go to the List of software fixes section. Effective in 8.5 CF08, the update and rollback processes have been streamlined for easier customer application. The previous CF instructions detailing \"PRE-APPLY-FIX\" and \"APPLY-FIX\" upgrade commands have now been integrated into the single applyCF command. Correspondingly, the rollback instructions for \"PRE-ROLLBACK-FIX\" and \"ROLLBACK-FIX\" have been integrated into the single \"rollbackCF\" command. To assist you with your upgrade, HCL is now providing a Health Checker tool that you can use to validate your Portal installation before applying a cumulative fix. Simply execute this tool on the target system and review the report that is generated to see if there are any issues you need to resolve before installing the update. See the Health Checker in this topic directory or the README text in the Combined Cumulative Fix ZIP file. The HCL Script Application was made available as V1.3 and earlier by the catalog. It was developed further and included with Portal Version 8.5 CF09 and later, then also renamed to \"Script Application\" for Portal 8.5 CF11. When customers have the old HCL Script Application catalog version 1.3 AND then install CF09 or later, the security settings need to be obtained BEFORE installing the CF. The detailed information can be found under the first optional step of the procedure in The Script Application security overview section in the 8.5 documentation. The Ephox EditLive! Java based Rich Text Editor has been deprecated as of CF11 and replaced by Textbox.io. More details about CF11 can found in CF11 topic page in the Version 8.5 documentation. Due to security vulnerabilities in the Apache Axis library (JAR file), the \"axis.jar\" will be removed from the HCL Portal class path effective in CF12. For inquiries, go to HCL Software Support page. Portal Version 8.5 CF12 introduces support for JDK8 in conjunction with WAS 8.5.5.10. This will also require WAS iFix PI67166 on top of WAS 8.5.5.10 (scheduled for inclusion in WAS 8.5.5.11.) Support for IBM Rich Media Edition (RME) has been removed effective with HCL Portal and Web Content Manager Version 8.5 CF14, and will not be supported in future releases. For more information about this IBM Rich Media Edition support lifecycle announcement, go to HCL Software Support page. Ephox EditLive! has been removed effective in Version 8.5 CF14 and is no longer supported. This change follows the steps taken above in Version 8.5 CF11 to deprecate Ephox EditLive! and replace it with Textbox.io as the new advanced rich text editor for HCL Web Content Manager. Customers that have manually installed and configured EditLive! as a Third Party editor option can continue to use EditLive! but will no longer be able to receive support and updates via HCL. Also effective with Version 8.5 CF14, the Textbox.io will support the following web browsers/levels . CF16 for Portal Versions 8.5 and 9.0 contain security fix PH01459 for CVE-2018-1736. It introduces a configurable white list for external hosts, which are allowed as redirects via the CategoryProfileUpdater Module. Server relative redirects are continuously working. Redirects to external hosts not specified in the white list are blocked. The white list is enabled per default, and needs to be filled in with appropriate values, if this functionality is used in your installation. For inquiries, go to HCL Software Support page. CF16 for Portal Versions 8.5 and 9.0 changes the behavior of Cumulative Fix installation related to out of the box resources to address CVE-2018-1420. Prior to CF16, access control settings of out of the box resources were reset to their out of the box access control settings, overriding potential customizations. This has been changed such that the Cumulative Fix installation leaves the access control settings at their current values. A side effect of this change is, that out of the box resources introduced in a Cumulative Fix after the initial version of Portal Version 8.5 or Version 9.0 will not receive any access control settings, if CF16 or later is installed on top of a CF level prior to introduction of an out of the box resource. In such a case the resource will not have any access control configured, and will have to be set manually to your security requirements. See the HCL Digital Experience 8.5 documentation on how to manage the access control and get an overview of initial access control settings .","title":"What's new"},{"location":"overview/container_update_releases/","text":"Container Update releases 9.5 The HCL Digital Experience 9.5 Cumulative Fix and Container Update releases offer new features and software fixes for the HCL Digital Experience 9.5 container releases. Beginning with Container Update release CF196, release updates for both on-premises deployments and container platforms are available. What's new in Container Update CF201? 9.5 Containers This HCL Digital Experience 9.5 Container Update and CF201 release includes updated releases of HCL DX core Portal and Web Content Manager, Content Composer, Digital Asset Management, Experience API, and Design Studio (Beta) components. The release also includes updated CICD release process artifacts, new DX Personalization REST APIs, Updated Helm deployment and logging capacity, LDAP, and environment configuration guidance, also metrics and visualization samples, Script Application updates, new React profile for the DX 8.5 sample Theme, extensibility plugin and sample for Digital Asset Management, and more. What's new in Container Update CF200? 9.5 Containers This HCL Digital Experience 9.5 Container Update and CF200 release includes updated releases of HCL DX core Portal and Web Content Manager, Content Composer, Digital Asset Management, Experience API, Design Studio (Beta), new Helm deployment operations for container deployments and migration from Operator deployments, updated CICD release process artifacts, new DX API and Explorer services for Personalization, Search and User and Groups REST APIs, new Digital Experience 9.5 Demo Packs on HCL Sofy, new \u2018How To\u2019 videos, and more. What's new in Container Update CF199? 9.5 Containers This HCL Digital Experience 9.5 Container Update and CF199 release includes new releases of HCL DX core Portal and Web Content Manager, Content Composer, Digital Asset Management, Experience API, Design Studio (Beta), new Helm deployment operations for container deployments, updated CICD release process artifacts, \u201cHow To\u201d videos, and more. What's new in Container Update CF198? 9.5 Containers This HCL Digital Experience 9.5 Container Update and CF198 release includes new releases of HCL DX core Portal and Web Content Manager, Content Composer, Digital Asset Management, Experience API, Design Studio (Beta), new Helm deployment operations for container deployments, updated CICD release process artifacts, the new Site Manager Custom Layout Editor, HCL Digital Experience Technical Articles, \u2018How To\u2019 videos, and more. What's new in Container Update CF197? 9.5 Containers This HCL Digital Experience 9.5 Container Update and CF197 release includes updated releases of HCL DX core Portal and Web Content Manager, Content Composer, Digital Asset Management and Experience API images, and an updated beta preview release of Design Studio. New and updated feature references are detailed here. What's new in Container Update CF196? 9.5 Containers This HCL Digital Experience 9.5 Container Update release includes new releases of HCL Digital Experience 9.5 core Portal and Web Content Manager, Content Composer, Digital Asset Management, and Experience API images, and a beta preview release of Design Studio. New and updated feature references are detailed here. What's new in Container Update CF195? 9.5 Containers This HCL Digital Experience 9.5 Container Update release includes new releases of Digital Experience 9.5 core Portal and Web Content Manager, Content Composer, Digital Asset Management, and Experience API images. New and updated feature references are detailed here. What's new in Container Update CF194? 9.5 Containers This HCL Digital Experience 9.5 Container Update release includes new releases of Digital Experience 9.5 core Portal and Web Content Manager, Content Composer, Digital Asset Management, and Experience API images. No new features were added in this update. What's new in Container Update CF193? 9.5 Containers This HCL Digital Experience 9.5 Container Update release includes new releases of Digital Experience 9.5 core Portal and Web Content Manager, Content Composer, Digital Asset Management, and Experience API images. New and updated feature references are detailed here. What's new in Container Update CF192? 9.5 Containers This HCL Digital Experience 9.5 Container Update release includes new releases of Digital Experience 9.5 core Portal and Web Content Manager, Content Composer, Digital Asset Management, and Experience API images. What's new in Container Update CF191? 9.5 Containers This HCL Digital Experience 9.5 Container Update release includes new releases of Digital Experience 9.5 core Portal and Web Content Manager, Content Composer, Digital Asset Management, and Experience API images, that may be used for new deployments only. Upgrading from a previous DX 9.5 Container Release to CF191 is not supported. What's new in Container Update CF19? 9.5 Containers This HCL Digital Experience 9.5 Container Update release includes updated production releases of Digital Experience 9.5 core Portal and Web Content Manager, Content Composer, Digital Asset Management, and Experience API images. New additions include additional guidance to deploy to Google Kubernetes Engine (GKE), Hybrid deployment support, Progressive Web Application delivery, Google Analytics integration, Mobile Preview, DXClient and DXConnect tooling supporting CICD release processes, Kaltura video support, new Web Content Manager REST APIs, new HCL Digital Experience \u2018How To\u2019 videos, and more. What's new in Container Update CF184? 9.5 Containers This HCL Digital Experience 9.5 Container Update release includes updated production releases of Digital Experience 9.5 core Portal and Web Content Manager, Content Composer, Digital Asset Management, and Experience API images. New additions include additional guidance to deploy to Microsoft Azure Kubernetes Service (AKS), new Web Content Manager REST APIs supporting Syndication options, HCL Digital Experience API published to HCL DX GitHub, new HCL Digital Experience \u2018How To\u2019 videos, and more. What's new in Container Update CF183? 9.5 Containers This HCL Digital Experience 9.5 Container Update release includes updated production releases of Digital Experience 9.5 core Portal and Web Content Manager, Content Composer, Digital Asset Management, and Experience API images. New additions include guidance to deploy to Microsoft Azure Kubernetes Service (AKS), new Web Content Manager REST APIs and Search Query examples, guidance to deploy the Remote Search image on Red Hat OpenShift, new HCL Digital Experience \u2018How To\u2019 videos, and more. What's new in Container Update CF182? 9.5 Containers This HCL Digital Experience 9.5 Container Update release includes updated production releases of Digital Experience 9.5 core Portal and Web Content Manager, Content Composer, Digital Asset Management, and Experience API images. This update adds new guidance to minimize downtime when updating container-based deployments with new artifacts, configuration options for Digital Asset Management storage, and more. What's new in Container Update CF181? 9.5 Containers This HCL Digital Experience 9.5 Container Update release includes new Production releases of Content Composer, Digital Asset Management, and Experience API, new WCM REST APIs, guidance to deploy OpenLDAP, Remote Search and Database transfer processes, and more. What's new in CF18? 9.5 Containers This HCL Digital Experience 9.5 Container Update release includes new WCM REST APIs, updated Tech Preview releases of Content Composer and Digital Asset Management, Rich Text Editor and Java Server Faces bridge updates, and more. What's new in Container Update CF173? 9.5 Containers This HCL Digital Experience 9.5 Container Update release include new WCM REST APIs, and Tech Previews for Content Composer and Digital Asset Management, and more. What's new in Container Update CF172? 9.5 Containers The Container Update release include new features and updates for HCL Digital Experience 9.5 container deployments, including DX tool, Support and API updates. What's new in Container Update CF171? 9.5 Containers The Container Update releases include new features and updates for HCL Digital Experience 9.5 container deployments. Parent topic: Latest Combined CF and 9.5 Container Updates","title":"Container Update releases 9.5"},{"location":"overview/container_update_releases/#container-update-releases-95","text":"The HCL Digital Experience 9.5 Cumulative Fix and Container Update releases offer new features and software fixes for the HCL Digital Experience 9.5 container releases. Beginning with Container Update release CF196, release updates for both on-premises deployments and container platforms are available. What's new in Container Update CF201? 9.5 Containers This HCL Digital Experience 9.5 Container Update and CF201 release includes updated releases of HCL DX core Portal and Web Content Manager, Content Composer, Digital Asset Management, Experience API, and Design Studio (Beta) components. The release also includes updated CICD release process artifacts, new DX Personalization REST APIs, Updated Helm deployment and logging capacity, LDAP, and environment configuration guidance, also metrics and visualization samples, Script Application updates, new React profile for the DX 8.5 sample Theme, extensibility plugin and sample for Digital Asset Management, and more. What's new in Container Update CF200? 9.5 Containers This HCL Digital Experience 9.5 Container Update and CF200 release includes updated releases of HCL DX core Portal and Web Content Manager, Content Composer, Digital Asset Management, Experience API, Design Studio (Beta), new Helm deployment operations for container deployments and migration from Operator deployments, updated CICD release process artifacts, new DX API and Explorer services for Personalization, Search and User and Groups REST APIs, new Digital Experience 9.5 Demo Packs on HCL Sofy, new \u2018How To\u2019 videos, and more. What's new in Container Update CF199? 9.5 Containers This HCL Digital Experience 9.5 Container Update and CF199 release includes new releases of HCL DX core Portal and Web Content Manager, Content Composer, Digital Asset Management, Experience API, Design Studio (Beta), new Helm deployment operations for container deployments, updated CICD release process artifacts, \u201cHow To\u201d videos, and more. What's new in Container Update CF198? 9.5 Containers This HCL Digital Experience 9.5 Container Update and CF198 release includes new releases of HCL DX core Portal and Web Content Manager, Content Composer, Digital Asset Management, Experience API, Design Studio (Beta), new Helm deployment operations for container deployments, updated CICD release process artifacts, the new Site Manager Custom Layout Editor, HCL Digital Experience Technical Articles, \u2018How To\u2019 videos, and more. What's new in Container Update CF197? 9.5 Containers This HCL Digital Experience 9.5 Container Update and CF197 release includes updated releases of HCL DX core Portal and Web Content Manager, Content Composer, Digital Asset Management and Experience API images, and an updated beta preview release of Design Studio. New and updated feature references are detailed here. What's new in Container Update CF196? 9.5 Containers This HCL Digital Experience 9.5 Container Update release includes new releases of HCL Digital Experience 9.5 core Portal and Web Content Manager, Content Composer, Digital Asset Management, and Experience API images, and a beta preview release of Design Studio. New and updated feature references are detailed here. What's new in Container Update CF195? 9.5 Containers This HCL Digital Experience 9.5 Container Update release includes new releases of Digital Experience 9.5 core Portal and Web Content Manager, Content Composer, Digital Asset Management, and Experience API images. New and updated feature references are detailed here. What's new in Container Update CF194? 9.5 Containers This HCL Digital Experience 9.5 Container Update release includes new releases of Digital Experience 9.5 core Portal and Web Content Manager, Content Composer, Digital Asset Management, and Experience API images. No new features were added in this update. What's new in Container Update CF193? 9.5 Containers This HCL Digital Experience 9.5 Container Update release includes new releases of Digital Experience 9.5 core Portal and Web Content Manager, Content Composer, Digital Asset Management, and Experience API images. New and updated feature references are detailed here. What's new in Container Update CF192? 9.5 Containers This HCL Digital Experience 9.5 Container Update release includes new releases of Digital Experience 9.5 core Portal and Web Content Manager, Content Composer, Digital Asset Management, and Experience API images. What's new in Container Update CF191? 9.5 Containers This HCL Digital Experience 9.5 Container Update release includes new releases of Digital Experience 9.5 core Portal and Web Content Manager, Content Composer, Digital Asset Management, and Experience API images, that may be used for new deployments only. Upgrading from a previous DX 9.5 Container Release to CF191 is not supported. What's new in Container Update CF19? 9.5 Containers This HCL Digital Experience 9.5 Container Update release includes updated production releases of Digital Experience 9.5 core Portal and Web Content Manager, Content Composer, Digital Asset Management, and Experience API images. New additions include additional guidance to deploy to Google Kubernetes Engine (GKE), Hybrid deployment support, Progressive Web Application delivery, Google Analytics integration, Mobile Preview, DXClient and DXConnect tooling supporting CICD release processes, Kaltura video support, new Web Content Manager REST APIs, new HCL Digital Experience \u2018How To\u2019 videos, and more. What's new in Container Update CF184? 9.5 Containers This HCL Digital Experience 9.5 Container Update release includes updated production releases of Digital Experience 9.5 core Portal and Web Content Manager, Content Composer, Digital Asset Management, and Experience API images. New additions include additional guidance to deploy to Microsoft Azure Kubernetes Service (AKS), new Web Content Manager REST APIs supporting Syndication options, HCL Digital Experience API published to HCL DX GitHub, new HCL Digital Experience \u2018How To\u2019 videos, and more. What's new in Container Update CF183? 9.5 Containers This HCL Digital Experience 9.5 Container Update release includes updated production releases of Digital Experience 9.5 core Portal and Web Content Manager, Content Composer, Digital Asset Management, and Experience API images. New additions include guidance to deploy to Microsoft Azure Kubernetes Service (AKS), new Web Content Manager REST APIs and Search Query examples, guidance to deploy the Remote Search image on Red Hat OpenShift, new HCL Digital Experience \u2018How To\u2019 videos, and more. What's new in Container Update CF182? 9.5 Containers This HCL Digital Experience 9.5 Container Update release includes updated production releases of Digital Experience 9.5 core Portal and Web Content Manager, Content Composer, Digital Asset Management, and Experience API images. This update adds new guidance to minimize downtime when updating container-based deployments with new artifacts, configuration options for Digital Asset Management storage, and more. What's new in Container Update CF181? 9.5 Containers This HCL Digital Experience 9.5 Container Update release includes new Production releases of Content Composer, Digital Asset Management, and Experience API, new WCM REST APIs, guidance to deploy OpenLDAP, Remote Search and Database transfer processes, and more. What's new in CF18? 9.5 Containers This HCL Digital Experience 9.5 Container Update release includes new WCM REST APIs, updated Tech Preview releases of Content Composer and Digital Asset Management, Rich Text Editor and Java Server Faces bridge updates, and more. What's new in Container Update CF173? 9.5 Containers This HCL Digital Experience 9.5 Container Update release include new WCM REST APIs, and Tech Previews for Content Composer and Digital Asset Management, and more. What's new in Container Update CF172? 9.5 Containers The Container Update release include new features and updates for HCL Digital Experience 9.5 container deployments, including DX tool, Support and API updates. What's new in Container Update CF171? 9.5 Containers The Container Update releases include new features and updates for HCL Digital Experience 9.5 container deployments. Parent topic: Latest Combined CF and 9.5 Container Updates","title":"Container Update releases 9.5"},{"location":"overview/content/","text":"Web content HCL Portal and HCL Web Content Manager help you manage content, share information, and communicate your message. HCL Web Content Manager HCL Web Content Manager accelerates the creation, maintenance, and delivery of content across intranet, extranet, Internet, and portal sites. Conceptual and functional divisions of a website When you build a website by using Web Content Manager, you break up your website into the following conceptual and functional divisions. Content Template Catalog The content template catalog is a set of templates that you can use to accelerate building a website. Using these templates you can build a basic site quickly with little or no customization. Targeted content and Portal Personalization Targeted content provides you with a way to deliver multiple pieces of content to different audiences. Targeted content matches the best content with the most appropriate group by using segments. Segments help you split your audience into meaningful groups with different interests or characteristics. Portlets Portlets are a central part of HCL Digital Experience. Portlets are small applications that are independently developed, deployed, managed, and displayed. Administrators and users compose personalized pages by choosing and arranging portlets, resulting in customized Web pages. Parent topic: Product capabilities","title":"Web content"},{"location":"overview/content/#web-content","text":"HCL Portal and HCL Web Content Manager help you manage content, share information, and communicate your message. HCL Web Content Manager HCL Web Content Manager accelerates the creation, maintenance, and delivery of content across intranet, extranet, Internet, and portal sites. Conceptual and functional divisions of a website When you build a website by using Web Content Manager, you break up your website into the following conceptual and functional divisions. Content Template Catalog The content template catalog is a set of templates that you can use to accelerate building a website. Using these templates you can build a basic site quickly with little or no customization. Targeted content and Portal Personalization Targeted content provides you with a way to deliver multiple pieces of content to different audiences. Targeted content matches the best content with the most appropriate group by using segments. Segments help you split your audience into meaningful groups with different interests or characteristics. Portlets Portlets are a central part of HCL Digital Experience. Portlets are small applications that are independently developed, deployed, managed, and displayed. Administrators and users compose personalized pages by choosing and arranging portlets, resulting in customized Web pages. Parent topic: Product capabilities","title":"Web content"},{"location":"overview/content_template_catalog/","text":"Content Template Catalog The content template catalog is a set of templates that you can use to accelerate building a website. Using these templates you can build a basic site quickly with little or no customization. The content template catalog is a comprehensive set of templates, pre-configured portlets, content-oriented theme, and layouts. Use the palette of pre-configured portlets to drop components on your pages for navigation, teasers, slide shows, carousels, and more. The template pattern supports the creation of your own templates. A page created from a template can be modified and then turned into a new template. You could build up you own custom template library and provide a self-service site development offering to your users. Parent topic: Web content","title":"Content Template Catalog"},{"location":"overview/content_template_catalog/#content-template-catalog","text":"The content template catalog is a set of templates that you can use to accelerate building a website. Using these templates you can build a basic site quickly with little or no customization. The content template catalog is a comprehensive set of templates, pre-configured portlets, content-oriented theme, and layouts. Use the palette of pre-configured portlets to drop components on your pages for navigation, teasers, slide shows, carousels, and more. The template pattern supports the creation of your own templates. A page created from a template can be modified and then turned into a new template. You could build up you own custom template library and provide a self-service site development offering to your users. Parent topic: Web content","title":"Content Template Catalog"},{"location":"overview/fea_ai/","text":"Application integration A portal provides access to content, data, and services that are located throughout the enterprise. These services include predefined connectors and portlets, and tools for creating additional connectors and portlets. Enterprise resource planning (ERP) and customer relationship management (CRM) systems are excellent candidates for portlets because efficient, personalized access to these functions provides measurable return on your portal investment. HCL provides connectors to enterprise applications by using the Java Connector Architecture (JCA). Standard Java connectors JCA is a standard architecture for integrating Java 2 Enterprise Edition (J2EE) applications with enterprise information systems that are not relational databases. Each of these systems provides native APIs for identifying a function to call, specifying its input data, and processing its output data. The goal of the JCA is to provide an independent API for coding these functions. JCA also defines a standard Service Provider Interface (SPI) for integrating the transaction, security, and connection management facilities of an application server with those of a transactional resource manager. Thus, JCA is a standards-based approach to managing connections, transactions, and secure access to enterprise application systems. IBM JCA connectors provide access to systems such as SAP, PeopleSoft, J.D. Edwards, Oracle Enterprise Edition, CICS, IMS, and Host-on-Demand. Leveraging its CrossWorlds acquisition, HCL plans to develop and integrate JCA connectors to many other systems. Rational\u00ae Application Developer provides a complete development and unit test environment for applications that use JCA connectors, Web services, and microflows. Rational Application Developer tools include support for Web Service Definition Language (WSDL), developer versions of the connectors, the Web Services Invocation Framework (WSIF), and the microflow engine. Parent topic: Integration","title":"Application integration"},{"location":"overview/fea_ai/#application-integration","text":"A portal provides access to content, data, and services that are located throughout the enterprise. These services include predefined connectors and portlets, and tools for creating additional connectors and portlets. Enterprise resource planning (ERP) and customer relationship management (CRM) systems are excellent candidates for portlets because efficient, personalized access to these functions provides measurable return on your portal investment. HCL provides connectors to enterprise applications by using the Java Connector Architecture (JCA).","title":"Application integration"},{"location":"overview/fea_ai/#standard-java-connectors","text":"JCA is a standard architecture for integrating Java 2 Enterprise Edition (J2EE) applications with enterprise information systems that are not relational databases. Each of these systems provides native APIs for identifying a function to call, specifying its input data, and processing its output data. The goal of the JCA is to provide an independent API for coding these functions. JCA also defines a standard Service Provider Interface (SPI) for integrating the transaction, security, and connection management facilities of an application server with those of a transactional resource manager. Thus, JCA is a standards-based approach to managing connections, transactions, and secure access to enterprise application systems. IBM JCA connectors provide access to systems such as SAP, PeopleSoft, J.D. Edwards, Oracle Enterprise Edition, CICS, IMS, and Host-on-Demand. Leveraging its CrossWorlds acquisition, HCL plans to develop and integrate JCA connectors to many other systems. Rational\u00ae Application Developer provides a complete development and unit test environment for applications that use JCA connectors, Web services, and microflows. Rational Application Developer tools include support for Web Service Definition Language (WSDL), developer versions of the connectors, the Web Services Invocation Framework (WSIF), and the microflow engine. Parent topic: Integration","title":"Standard Java connectors"},{"location":"overview/fea_cust/","text":"User experience Customizing the user's experience is one of the main goals of HCL Digital Experience. User and administrative portlets are provided for customizing content and the look and layout of pages. In addition, tools are provided that allow subject matter experts to personalize content to the needs and interests of each site visitor. Customizing pages Users can have one or more custom pages and access each one through a different page. A page can contain a group of pages that is organized for a specific purpose. Each page can have a different set of portlets. Depending on authorizations, users can change the look and feel of their pages by using skins and page layouts. Also, page navigation hierarchy is tree-based, allowing any depth of nested pages. The user or an administrator can set up the contents of each page. Administrators can specify that certain portlets be required, so that users are unable to move them or to remove them from the pages. Each page can have its own color scheme and column layout. Cascading authorization An administrator can grant or revoke access to customize a page or portion of a page to other administrators or users. The administrator can determine user's rights to modify a page. Administrators can control the edit authority that other administrators have on a page and its contents. This is designed to help organizations enforce policies and consistency, and create region-specific portals with some centrally managed content. This control is best explained through an example. The first administrator can determine that a page will have three columns and not allow the column layout to be modified by any other administrators. A second administrator with lesser access cannot modify the column layout but can add portlets to these columns. The following figure shows a page split into three columns. Administrators can add portlets to these columns. The second administrator adds a stock portlet to column one and a company news portlet to column two. This administrator wants these portlets to be available to everyone and does not want them to be removed. However, the administrator can add portlets to the columns. Therefore, the portlets are locked and cannot be removed by other administrators with lesser access. The following figure shows an example of how cascading authorization from one administrator to another would look. Skins and themes The product uses Java Server Page (JSP) templates, cascading style sheets, and images to define the look of pages. You can modify these templates to control visual aspects, perhaps to add company-specific brand elements or to achieve a different color scheme and visual style. The system for defining color themes and skins supports multiple skins per theme, additional branding elements, navigation styles, and dynamic, browser-independent cascading style sheets. The product uses html, cascading style sheets, images, and other standard web design artifacts to define the look of pages. Java Server Pages (JSP) and other server-side dynamic techniques can also be used to help define the look of a site. You can add or modify elements to control visual aspects, perhaps to add company-specific brand elements or to achieve a different color scheme and visual style. The system for defining color themes and skins supports multiple skins per theme, additional branding elements, navigation styles, and dynamic, browser-independent cascading style sheets. You can apply skins and themes to a page, not only to the overall product. You can apply different skins individually to portlets as well, so that the appearance of a portal can be fine-tuned to meet any user need. By using a different theme for each page, a single installation can give the appearance of supporting many virtual portals. Branding elements You can change all visual elements, including the masthead, the navigation areas, graphics, portlet title areas, and style sheets, to give a custom look. You can use standard file formats, such as JPEG, GIF, CSS, and JSP files, to define the look and layout. The structure of the component installation folder contains folders named \"skin\" and \"theme,\" with folders \"html,\" \"wml,\" and \"chtml.\" These folders contain most of the files that are used for defining the basic structure of the home page, its color schemes, and portlet decorations. Portal designers can copy these folders and modify their contents to create a custom look and feel. The theme administration portlet registers the new files. Changing portlet layout You can change the placement of individual portlets on a page by using the drag-and-drop feature. To rearrange a portlet on a page, click the title bar of the portlet and then drag the portlet to a new location on the page. You can also add portlets to the page for quick and easy page customization by dragging portlets from the Portlet Palette to the page. Personalization The Personalization component selects content for users, based on information in their profiles and on business logic. With Personalization facilities, subject matter experts can select content that is suited to the needs and interests of each site visitor. These web-based tools help companies quickly and easily use content that is created by business and subject matter experts. Personalization involves three basic personalization components: User Profile: information about users of the site, including user attributes Content Model: defines attributes about content, such as product descriptions, articles, and other information Matching Technology: engines that match users to the correct content; includes filtering, rules, recommendation engines, or combinations of all three. The Personalization and HCL Portal components share a common user profile and content model. The model is based on the WebSphere resource framework interfaces classes. This means that personalization rules can easily be added to portlets to select content and target it to registered users. Personalization classifies site visitors into segments and then targets relevant content to each segment. Business experts create the rules for classifying users and selecting content, using web-based tools. Personalization also includes a recommendation engine that provides collaborative filtering capabilities. Collaborative filtering uses statistical techniques to identify groups of users with similar interests or behaviors. Inferences can be made about what a particular user might be interested in, based on the interests of the other members of the group. New campaign management tools are also included with Personalization. Campaigns are sets of business rules that work together to accomplish a business objective. For example, an HR manager might want to run a campaign to encourage employees to enroll in a stock purchase plan. The HR manager would define a set of rules that are shown to accomplish this business objective. Campaigns have start and stop dates and times and can be email- and web-page based. Several campaigns can run simultaneously and can be prioritized. Implicit profiling services can collect real-time information about site visitor actions and then construct personalization business rules using this data. To analyze the effectiveness of the site and its personalization strategies, the server provides reports for the business owner of the site. This helps the company measure the effectiveness of the business rules and campaigns in achieving its objectives. Universal access The system of page templates, themes, skins, and portlet rendering is fully enabled for internationalization and accessibility by people with disabilities. For globally accessible portals, the product searches for and selects the proper JSP pages, based on the target browser and its settings for language and country. Parent topic: Versatile framework","title":"User experience"},{"location":"overview/fea_cust/#user-experience","text":"Customizing the user's experience is one of the main goals of HCL Digital Experience. User and administrative portlets are provided for customizing content and the look and layout of pages. In addition, tools are provided that allow subject matter experts to personalize content to the needs and interests of each site visitor.","title":"User experience"},{"location":"overview/fea_cust/#customizing-pages","text":"Users can have one or more custom pages and access each one through a different page. A page can contain a group of pages that is organized for a specific purpose. Each page can have a different set of portlets. Depending on authorizations, users can change the look and feel of their pages by using skins and page layouts. Also, page navigation hierarchy is tree-based, allowing any depth of nested pages. The user or an administrator can set up the contents of each page. Administrators can specify that certain portlets be required, so that users are unable to move them or to remove them from the pages. Each page can have its own color scheme and column layout.","title":"Customizing pages"},{"location":"overview/fea_cust/#cascading-authorization","text":"An administrator can grant or revoke access to customize a page or portion of a page to other administrators or users. The administrator can determine user's rights to modify a page. Administrators can control the edit authority that other administrators have on a page and its contents. This is designed to help organizations enforce policies and consistency, and create region-specific portals with some centrally managed content. This control is best explained through an example. The first administrator can determine that a page will have three columns and not allow the column layout to be modified by any other administrators. A second administrator with lesser access cannot modify the column layout but can add portlets to these columns. The following figure shows a page split into three columns. Administrators can add portlets to these columns. The second administrator adds a stock portlet to column one and a company news portlet to column two. This administrator wants these portlets to be available to everyone and does not want them to be removed. However, the administrator can add portlets to the columns. Therefore, the portlets are locked and cannot be removed by other administrators with lesser access. The following figure shows an example of how cascading authorization from one administrator to another would look.","title":"Cascading authorization"},{"location":"overview/fea_cust/#skins-and-themes","text":"The product uses Java Server Page (JSP) templates, cascading style sheets, and images to define the look of pages. You can modify these templates to control visual aspects, perhaps to add company-specific brand elements or to achieve a different color scheme and visual style. The system for defining color themes and skins supports multiple skins per theme, additional branding elements, navigation styles, and dynamic, browser-independent cascading style sheets. The product uses html, cascading style sheets, images, and other standard web design artifacts to define the look of pages. Java Server Pages (JSP) and other server-side dynamic techniques can also be used to help define the look of a site. You can add or modify elements to control visual aspects, perhaps to add company-specific brand elements or to achieve a different color scheme and visual style. The system for defining color themes and skins supports multiple skins per theme, additional branding elements, navigation styles, and dynamic, browser-independent cascading style sheets. You can apply skins and themes to a page, not only to the overall product. You can apply different skins individually to portlets as well, so that the appearance of a portal can be fine-tuned to meet any user need. By using a different theme for each page, a single installation can give the appearance of supporting many virtual portals.","title":"Skins and themes"},{"location":"overview/fea_cust/#branding-elements","text":"You can change all visual elements, including the masthead, the navigation areas, graphics, portlet title areas, and style sheets, to give a custom look. You can use standard file formats, such as JPEG, GIF, CSS, and JSP files, to define the look and layout. The structure of the component installation folder contains folders named \"skin\" and \"theme,\" with folders \"html,\" \"wml,\" and \"chtml.\" These folders contain most of the files that are used for defining the basic structure of the home page, its color schemes, and portlet decorations. Portal designers can copy these folders and modify their contents to create a custom look and feel. The theme administration portlet registers the new files.","title":"Branding elements"},{"location":"overview/fea_cust/#changing-portlet-layout","text":"You can change the placement of individual portlets on a page by using the drag-and-drop feature. To rearrange a portlet on a page, click the title bar of the portlet and then drag the portlet to a new location on the page. You can also add portlets to the page for quick and easy page customization by dragging portlets from the Portlet Palette to the page.","title":"Changing portlet layout"},{"location":"overview/fea_cust/#personalization","text":"The Personalization component selects content for users, based on information in their profiles and on business logic. With Personalization facilities, subject matter experts can select content that is suited to the needs and interests of each site visitor. These web-based tools help companies quickly and easily use content that is created by business and subject matter experts. Personalization involves three basic personalization components: User Profile: information about users of the site, including user attributes Content Model: defines attributes about content, such as product descriptions, articles, and other information Matching Technology: engines that match users to the correct content; includes filtering, rules, recommendation engines, or combinations of all three. The Personalization and HCL Portal components share a common user profile and content model. The model is based on the WebSphere resource framework interfaces classes. This means that personalization rules can easily be added to portlets to select content and target it to registered users. Personalization classifies site visitors into segments and then targets relevant content to each segment. Business experts create the rules for classifying users and selecting content, using web-based tools. Personalization also includes a recommendation engine that provides collaborative filtering capabilities. Collaborative filtering uses statistical techniques to identify groups of users with similar interests or behaviors. Inferences can be made about what a particular user might be interested in, based on the interests of the other members of the group. New campaign management tools are also included with Personalization. Campaigns are sets of business rules that work together to accomplish a business objective. For example, an HR manager might want to run a campaign to encourage employees to enroll in a stock purchase plan. The HR manager would define a set of rules that are shown to accomplish this business objective. Campaigns have start and stop dates and times and can be email- and web-page based. Several campaigns can run simultaneously and can be prioritized. Implicit profiling services can collect real-time information about site visitor actions and then construct personalization business rules using this data. To analyze the effectiveness of the site and its personalization strategies, the server provides reports for the business owner of the site. This helps the company measure the effectiveness of the business rules and campaigns in achieving its objectives.","title":"Personalization"},{"location":"overview/fea_cust/#universal-access","text":"The system of page templates, themes, skins, and portlet rendering is fully enabled for internationalization and accessibility by people with disabilities. For globally accessible portals, the product searches for and selects the proper JSP pages, based on the target browser and its settings for language and country. Parent topic: Versatile framework","title":"Universal access"},{"location":"overview/fea_portlets/","text":"Portlets Portlets are a central part of HCL Digital Experience. Portlets are small applications that are independently developed, deployed, managed, and displayed. Administrators and users compose personalized pages by choosing and arranging portlets, resulting in customized Web pages. The portal ships a rich set of standard portlets. For the most up-to-date information about portlets, including the latest portlets that are available for download, visit the HCL\u00aeSoftware Products Catalog . Or, refer to Developing portlets for information on creating custom portlets. Portlet applications Portlets are more than simple views of existing Web content. A portlet is a complete application, following a standard model-view-controller design. Portlets have multiple states and view modes, plus event and messaging capabilities. Portlets run inside the application server, similar to the way a servlet runs on an application server, but are aggregated to a complete Web page by the HCL Portal server. The portlet container provides a run-time environment where portlets are instantiated, used, and finally destroyed. Portlets rely on the portal infrastructure to access user profile information, participate in window and action events, communicate with other portlets, access remote content, look up credentials, and store persistent data. Generally, portlets are administered more dynamically than servlets. For example, portlet applications that consist of several portlets can be installed or removed while the HCL Portal component is running. The settings and access rights of a portlet can be changed by an administrator while HCL Portal is running, even in a production environment. Portlet modes allow a portlet to display a different user interface, depending on the task that is required of the portlet. A portlet has several modes of display that can be invoked by icons on the portlet title bar: View, Help, Edit, Configure, and Edit Shared Settings. A portlet is initially displayed in View mode. As the user interacts with the portlet, the portlet can display a sequence of view states, such as forms and responses, error messages, and other application-specific states. Help mode provides user assistance. Edit mode lets the user change portlet settings. For example, a weather portlet might provide an Edit page for users to specify location. Users must be logged into the portal to access Edit mode. Configure mode changes the default look of the portlet for all portlet instances and Edit Shared Settings changes the look of the portlet on a specific page. Each portlet mode can be displayed in normal, maximized, or minimized state. When a portlet is maximized, it is displayed in the entire body of a page, replacing the view of other portlets. When a portlet is minimized, by default, only the portlet title bar is displayed on the page. Portlet API The Java Portlet Specification addresses the requirements of aggregation, personalization, presentation, and security for portlets that run in a portal environment. The portal supports both portlet standards JSR 168 and JSR 286. For more information about the standard portlet API, go to the topic Standard portlet API . Portlet communications The portal allows portlets to communicate with each other. Portlet communication can be used to exchange data between portlets. This feature makes the portal easier to use. The portal supports events as defined in the JSR 286 specification. It allows administrators to wire portlets by using the portal user interface. For example, one portlet can display information about accounts, and a second portlet displays information about transactions that occurred for one of the accounts over the last 30 days. To display this information, the transactions portlet needs to obtain the appropriate account information when it displays the transaction details. This exchange of information is accomplished by communication between the two portlets, by using events as described in the JSR 286 specification. In this example, the account portlet defines a publishing event in its portlet descriptor. The transaction portlet defines this event as a processing event in its portlet descriptor. By using the portal user interface, you can now wire those two portlets together. After you did this wiring, when the account portlet throws an event, the transaction portlet receives this event and can show information about the transactions of this account. Portlet services Portlet services are used to provide common functionality to portlets. Each portlet service has its own service-specific interface for the functionality that it offers. The portal supports portlet services for standard portlets. Standard portlets use a JNDI lookup to retrieve a PortletServiceHome object, which is used to retrieve a portlet service implementation. A portlet service can be started only by the code within a portlet. For more information about portlet services in the portal, read Portlet services . Creating and customizing portlet applications Web Experience Factory is included with the product and provides a robust selection of builders that supercharge the portlet development process without writing code. The rapid application development technology of Web Experience Factory enables portlet creation 40 \u2014\u2014 70 percent faster than using traditional J2EE development methods. With Web Experience Factory, you can rapidly develop and deploy custom service-oriented portlets and rich, interactive Web 2.0 style applications with features like drag-and-drop, in-line editing, type-ahead search, and intelligent page refresh functionality. Web Experience Factory transforms operational data into high-value business information by integrating data from a wide variety of packaged enterprise applications, repositories and data sources including SAP, Siebel, PeopleSoft, Domino\u00ae, Web, and REST services and leading relational databases through a rich, pre-built connector library. Using Web Experience Factory and its patented dynamic profiling functionality, developers can easily empower business-user led portlet customization through personalization and create dynamic, micro-targeted applications that vary portlet content based on user role, geography, and more. Applications that are built with Web Experience Factory can be deployed to multiple run-time environments to provide the best user experience based on target audience, including the portal, Mashup Center, Lotus Notes\u00ae, and Expeditor and WebSphere\u00ae Application Server. Web Experience Factory applications are standards based and comply with portlet standards including JSR 168 and JSR 286. Parent topic: Web content","title":"Portlets"},{"location":"overview/fea_portlets/#portlets","text":"Portlets are a central part of HCL Digital Experience. Portlets are small applications that are independently developed, deployed, managed, and displayed. Administrators and users compose personalized pages by choosing and arranging portlets, resulting in customized Web pages. The portal ships a rich set of standard portlets. For the most up-to-date information about portlets, including the latest portlets that are available for download, visit the HCL\u00aeSoftware Products Catalog . Or, refer to Developing portlets for information on creating custom portlets.","title":"Portlets"},{"location":"overview/fea_portlets/#portlet-applications","text":"Portlets are more than simple views of existing Web content. A portlet is a complete application, following a standard model-view-controller design. Portlets have multiple states and view modes, plus event and messaging capabilities. Portlets run inside the application server, similar to the way a servlet runs on an application server, but are aggregated to a complete Web page by the HCL Portal server. The portlet container provides a run-time environment where portlets are instantiated, used, and finally destroyed. Portlets rely on the portal infrastructure to access user profile information, participate in window and action events, communicate with other portlets, access remote content, look up credentials, and store persistent data. Generally, portlets are administered more dynamically than servlets. For example, portlet applications that consist of several portlets can be installed or removed while the HCL Portal component is running. The settings and access rights of a portlet can be changed by an administrator while HCL Portal is running, even in a production environment. Portlet modes allow a portlet to display a different user interface, depending on the task that is required of the portlet. A portlet has several modes of display that can be invoked by icons on the portlet title bar: View, Help, Edit, Configure, and Edit Shared Settings. A portlet is initially displayed in View mode. As the user interacts with the portlet, the portlet can display a sequence of view states, such as forms and responses, error messages, and other application-specific states. Help mode provides user assistance. Edit mode lets the user change portlet settings. For example, a weather portlet might provide an Edit page for users to specify location. Users must be logged into the portal to access Edit mode. Configure mode changes the default look of the portlet for all portlet instances and Edit Shared Settings changes the look of the portlet on a specific page. Each portlet mode can be displayed in normal, maximized, or minimized state. When a portlet is maximized, it is displayed in the entire body of a page, replacing the view of other portlets. When a portlet is minimized, by default, only the portlet title bar is displayed on the page.","title":"Portlet applications"},{"location":"overview/fea_portlets/#portlet-api","text":"The Java Portlet Specification addresses the requirements of aggregation, personalization, presentation, and security for portlets that run in a portal environment. The portal supports both portlet standards JSR 168 and JSR 286. For more information about the standard portlet API, go to the topic Standard portlet API .","title":"Portlet API"},{"location":"overview/fea_portlets/#portlet-communications","text":"The portal allows portlets to communicate with each other. Portlet communication can be used to exchange data between portlets. This feature makes the portal easier to use. The portal supports events as defined in the JSR 286 specification. It allows administrators to wire portlets by using the portal user interface. For example, one portlet can display information about accounts, and a second portlet displays information about transactions that occurred for one of the accounts over the last 30 days. To display this information, the transactions portlet needs to obtain the appropriate account information when it displays the transaction details. This exchange of information is accomplished by communication between the two portlets, by using events as described in the JSR 286 specification. In this example, the account portlet defines a publishing event in its portlet descriptor. The transaction portlet defines this event as a processing event in its portlet descriptor. By using the portal user interface, you can now wire those two portlets together. After you did this wiring, when the account portlet throws an event, the transaction portlet receives this event and can show information about the transactions of this account.","title":"Portlet communications"},{"location":"overview/fea_portlets/#portlet-services","text":"Portlet services are used to provide common functionality to portlets. Each portlet service has its own service-specific interface for the functionality that it offers. The portal supports portlet services for standard portlets. Standard portlets use a JNDI lookup to retrieve a PortletServiceHome object, which is used to retrieve a portlet service implementation. A portlet service can be started only by the code within a portlet. For more information about portlet services in the portal, read Portlet services .","title":"Portlet services"},{"location":"overview/fea_portlets/#creating-and-customizing-portlet-applications","text":"Web Experience Factory is included with the product and provides a robust selection of builders that supercharge the portlet development process without writing code. The rapid application development technology of Web Experience Factory enables portlet creation 40 \u2014\u2014 70 percent faster than using traditional J2EE development methods. With Web Experience Factory, you can rapidly develop and deploy custom service-oriented portlets and rich, interactive Web 2.0 style applications with features like drag-and-drop, in-line editing, type-ahead search, and intelligent page refresh functionality. Web Experience Factory transforms operational data into high-value business information by integrating data from a wide variety of packaged enterprise applications, repositories and data sources including SAP, Siebel, PeopleSoft, Domino\u00ae, Web, and REST services and leading relational databases through a rich, pre-built connector library. Using Web Experience Factory and its patented dynamic profiling functionality, developers can easily empower business-user led portlet customization through personalization and create dynamic, micro-targeted applications that vary portlet content based on user role, geography, and more. Applications that are built with Web Experience Factory can be deployed to multiple run-time environments to provide the best user experience based on target audience, including the portal, Mashup Center, Lotus Notes\u00ae, and Expeditor and WebSphere\u00ae Application Server. Web Experience Factory applications are standards based and comply with portlet standards including JSR 168 and JSR 286. Parent topic: Web content","title":"Creating and customizing portlet applications"},{"location":"overview/fea_vf/","text":"Versatile framework HCL Digital Experience provides users a consistent view of portal applications and allows users to define specific sets of applications that are presented in a single context. Depending on the requesting device, the rendering of this application set must vary to fulfill the requirements of the device. The tasks of the aggregation, which are repeated with each request that comes from the device, are: Gather information about the user, the device, and the selected language. Select the active portlets from the set of applications to which the user has access. Aggregate the output of the active portlets into a coherent, usable display. HCL Portal also provides the ability to create a custom navigation model, which includes such features as: Multilevel navigation Customized themes and skins Custom navigation - navigation tree can be contributed to by portlets themselves Custom arrangement of portlets (and thus content) on a page Another aspect of the versatile framework is the ability to personalize a user's portal experience, using \"content spots\" that render subscribed content based on the user and user's role in the portal. User experience Customizing the user's experience is one of the main goals of HCL Digital Experience. User and administrative portlets are provided for customizing content and the look and layout of pages. In addition, tools are provided that allow subject matter experts to personalize content to the needs and interests of each site visitor. Parent topic: Product capabilities","title":"Versatile framework"},{"location":"overview/fea_vf/#versatile-framework","text":"HCL Digital Experience provides users a consistent view of portal applications and allows users to define specific sets of applications that are presented in a single context. Depending on the requesting device, the rendering of this application set must vary to fulfill the requirements of the device. The tasks of the aggregation, which are repeated with each request that comes from the device, are: Gather information about the user, the device, and the selected language. Select the active portlets from the set of applications to which the user has access. Aggregate the output of the active portlets into a coherent, usable display. HCL Portal also provides the ability to create a custom navigation model, which includes such features as: Multilevel navigation Customized themes and skins Custom navigation - navigation tree can be contributed to by portlets themselves Custom arrangement of portlets (and thus content) on a page Another aspect of the versatile framework is the ability to personalize a user's portal experience, using \"content spots\" that render subscribed content based on the user and user's role in the portal. User experience Customizing the user's experience is one of the main goals of HCL Digital Experience. User and administrative portlets are provided for customizing content and the look and layout of pages. In addition, tools are provided that allow subject matter experts to personalize content to the needs and interests of each site visitor. Parent topic: Product capabilities","title":"Versatile framework"},{"location":"overview/i_c_sample_sites/","text":"Streamlined site creation You can use the Site Builder to generate your own portal site. Creating portal sites on demand Use the Site Builder to generate your own site \u2014\u2014 without needing any portal development skills or assistance from an administrator. Select a template from the available samples, choose the look that you want, and then allow the Site Builder do the rest. The Site Builder automatically creates sites as virtual portals; however, administrators and developers can extend the wizard to create any type of portal site. Portal developers can also enhance the Site Builder by creating custom templates, and then adding them to the Site Builder. Download the Site Builder. Package contents include the portlet .war (web application archive) file, supporting files and directories, and detailed instructions in a .pdf file. After you deploy the Site Builder, you must add the portlet to a page that users can access. For more information, read the .pdf file that comes with the Site Builder. Parent topic: Product capabilities","title":"Streamlined site creation"},{"location":"overview/i_c_sample_sites/#streamlined-site-creation","text":"You can use the Site Builder to generate your own portal site.","title":"Streamlined site creation"},{"location":"overview/i_c_sample_sites/#creating-portal-sites-on-demand","text":"Use the Site Builder to generate your own site \u2014\u2014 without needing any portal development skills or assistance from an administrator. Select a template from the available samples, choose the look that you want, and then allow the Site Builder do the rest. The Site Builder automatically creates sites as virtual portals; however, administrators and developers can extend the wizard to create any type of portal site. Portal developers can also enhance the Site Builder by creating custom templates, and then adding them to the Site Builder. Download the Site Builder. Package contents include the portlet .war (web application archive) file, supporting files and directories, and detailed instructions in a .pdf file. After you deploy the Site Builder, you must add the portlet to a page that users can access. For more information, read the .pdf file that comes with the Site Builder. Parent topic: Product capabilities","title":"Creating portal sites on demand"},{"location":"overview/inst_req/","text":"System requirements Before installing HCL Digital Experience, you must review the system requirements to ensure that you have the supported versions of prerequisite and co-requisite software and hardware. Click the link to see the detailed system requirements document: HCL Digital Experience detailed system requirements The following information provides the minimum system requirements for HCL Digital Experience 9.5. Unless stated otherwise, users could generally install and run HCL Digital Experience 9.5 with updates to supported products if the updates are compatible with later versions: System requirements The following are system requirements of different versions of the products: | HCL Digital Experience 9.5 Detailed System Requirements for HCL Portal Server, HCL Portal Enable, HCL Portal Extend, and HCL Web Content Manager | HCL Digital Experience 9.5 for Express Detailed System Requirements for HCL Portal Express | |--------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------|-----------------------------------------------------------------------------------------------------------------------------------------------------------------------------------| | HCL Digital Experience 9.0 Detailed System Requirements for HCL Portal Server, HCL Portal Enable, HCL Portal Extend, and HCL Web Content Manager | HCL Digital Experience 9.0 for Express Detailed System Requirements for HCL Portal Express | | HCL Digital Experience 8.5 Detailed System Requirements for HCL Portal Server, HCL Portal Enable, HCL Portal Extend, and HCL Web Content Manager | HCL Digital Experience 8.5 for Express Detailed System Requirements for HCL Portal Express | Hardware requirements The following table contains the minimum hardware requirements. |Memory|8 GB| |Storage|20 GB| |CPU|2| Disk space information The following table contains the general information about your directory sizing. Directory information Volume Required Temporary Total Shared resources /home 123.9 KB 1.82 GB 1.82 GB Installation directory /home 3.18 GB 3.18 GB Software requirements Refer to the HCL Digital Experience detailed system requirements page for the latest updates. Software Description Portal server HCL Portal and HCL Web Content Manager Version 9.5 Application server IBM\u00ae WebSphere\u00ae Application Server Network Deployment version 8.5.5.12 on-premises or 9.0.x or later Java 8.0.3 SDK IBM WebSphere SDK Java Technology Edition","title":"System requirements"},{"location":"overview/inst_req/#system-requirements","text":"Before installing HCL Digital Experience, you must review the system requirements to ensure that you have the supported versions of prerequisite and co-requisite software and hardware. Click the link to see the detailed system requirements document: HCL Digital Experience detailed system requirements The following information provides the minimum system requirements for HCL Digital Experience 9.5. Unless stated otherwise, users could generally install and run HCL Digital Experience 9.5 with updates to supported products if the updates are compatible with later versions: System requirements The following are system requirements of different versions of the products: | HCL Digital Experience 9.5 Detailed System Requirements for HCL Portal Server, HCL Portal Enable, HCL Portal Extend, and HCL Web Content Manager | HCL Digital Experience 9.5 for Express Detailed System Requirements for HCL Portal Express | |--------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------|-----------------------------------------------------------------------------------------------------------------------------------------------------------------------------------| | HCL Digital Experience 9.0 Detailed System Requirements for HCL Portal Server, HCL Portal Enable, HCL Portal Extend, and HCL Web Content Manager | HCL Digital Experience 9.0 for Express Detailed System Requirements for HCL Portal Express | | HCL Digital Experience 8.5 Detailed System Requirements for HCL Portal Server, HCL Portal Enable, HCL Portal Extend, and HCL Web Content Manager | HCL Digital Experience 8.5 for Express Detailed System Requirements for HCL Portal Express | Hardware requirements The following table contains the minimum hardware requirements. |Memory|8 GB| |Storage|20 GB| |CPU|2| Disk space information The following table contains the general information about your directory sizing. Directory information Volume Required Temporary Total Shared resources /home 123.9 KB 1.82 GB 1.82 GB Installation directory /home 3.18 GB 3.18 GB Software requirements Refer to the HCL Digital Experience detailed system requirements page for the latest updates. Software Description Portal server HCL Portal and HCL Web Content Manager Version 9.5 Application server IBM\u00ae WebSphere\u00ae Application Server Network Deployment version 8.5.5.12 on-premises or 9.0.x or later Java 8.0.3 SDK IBM WebSphere SDK Java Technology Edition","title":"System requirements"},{"location":"overview/integration/","text":"Integration HCL Portal integrates with many products. Web Application Bridge integration Use the Web Application Bridge to integrate with web applications, such as Sharepoint. Process integration Use the Unified Task List portlet to integrate with business process solutions such as IBM Process Server, WebSphere Lombardi Edition, and other enterprise resource planning software. Application integration A portal provides access to content, data, and services that are located throughout the enterprise. These services include predefined connectors and portlets, and tools for creating additional connectors and portlets. Parent topic: Product capabilities","title":"Integration"},{"location":"overview/integration/#integration","text":"HCL Portal integrates with many products. Web Application Bridge integration Use the Web Application Bridge to integrate with web applications, such as Sharepoint. Process integration Use the Unified Task List portlet to integrate with business process solutions such as IBM Process Server, WebSphere Lombardi Edition, and other enterprise resource planning software. Application integration A portal provides access to content, data, and services that are located throughout the enterprise. These services include predefined connectors and portlets, and tools for creating additional connectors and portlets. Parent topic: Product capabilities","title":"Integration"},{"location":"overview/intr_new95/","text":"What's new in HCL Digital Experience 9.5? Learn about the new features, updates, and fixes in the HCL Digital Experience 9.5 release. New HCL Digital Experience 9.5 Docker Image Using the new HCL Digital Experience 9.5 Docker image deployment option, HCL Digital Experience developers and administrators can launch development and production DX container instances on Docker, also Kubernetes operating on the OpenShift and with DX 9.5 CF171 and higher release container update, Amazon EKS supported platforms. Learn more about HCL Digital Experience 9.5 Docker image deployment by clicking on the topic links below. Documentation resource: HCL Digital Experience 9.5 Docker image deployment Video demonstration: HCL Digital Experience 9.5 on OpenShift New HCL Digital Experience 9.5 Practitioner Studio Using the new HCL Portal Practitioner Studio centralized management user interfaces, content authors, developers, and administrators can manage DX tasks more quickly. Learn more about Practitioner Studio by clicking on the topic link below. Documentation resource: Practitioner Studio The Woodburn Studio The Woodburn Studio is a fully functioning demonstration website that demonstrates best practices in content and site development with HCL Digital Experience tools. Learn more about Woodburn Studio by clicking on the topic link below. Documentation resource: The Woodburn Studio Migrate to WebSphere Application Server 9.0.5 HCL Digital Experience 9.5 supports IBM WebSphere Application Server 9.0.5 and you can migrate to it if you are running on IBM WebSphere Application Server 8.5.x or 9.0.0.x. Documentation resource: Migrating to WebSphere Application Server 9.0.5 The New HCL Experience API HCL Experience API is a set of OpenAPI-compliant REST APIs developers can use to the existing set of HCL Digital Experience APIs. Documentation resource: The HCL Experience API The New Content Composer Content Composer delivers simplified processes for creating and managing Digital Experience site content. Users can access the Content Composer features in HCL Digital Experience 9.5 Container Update CF173 and higher releases. Documentation resource: Content Composer The New Digital Asset Management Digital Asset Management delivers a central platform to store and include rich media assets in Digital Experience site content to present engaging, consistently branded experiences across digital channels. Users can access the Digital Asset Management features in HCL Digital Experience 9.5 Container Update CF173 and higher releases. Documentation resource: Digital Asset Management How to provide feedback on the HCL Digital Experience release components HCL Digital Experience customers and business partners may provide feedback on their experience with the Tech Preview release versions of the Experience API and the Content Composer by using this HCL Digital Experience release feedback reporting application . Unsupported features for HCL Digital Experience 9.5 If you are migrating from an earlier release of HCL Digital Experience, you should be aware of various features and themes that are unsupported per each release. Deprecated features for HCL Digital Experience 9.5 If you are migrating from an earlier release of HCL Digital Experience, you should be aware of various features and themes that are deprecated per each release. List of software fixes 9.5 This includes new features and improvements for the latest version of HCL Digital Experience. Fixes for IBM WebSphere Application Server 9.0.5 Learn about the latest fixes for IBM WebSphere Application Server 9.0.5. Parent topic: What's new in HCL Digital Experience?","title":"HCL Digital Experience 9.5"},{"location":"overview/intr_new95/#whats-new-in-hcl-digital-experience-95","text":"Learn about the new features, updates, and fixes in the HCL Digital Experience 9.5 release.","title":"What's new in HCL Digital Experience 9.5?"},{"location":"overview/intr_new95/#new-hcl-digital-experience-95-docker-image","text":"Using the new HCL Digital Experience 9.5 Docker image deployment option, HCL Digital Experience developers and administrators can launch development and production DX container instances on Docker, also Kubernetes operating on the OpenShift and with DX 9.5 CF171 and higher release container update, Amazon EKS supported platforms. Learn more about HCL Digital Experience 9.5 Docker image deployment by clicking on the topic links below. Documentation resource: HCL Digital Experience 9.5 Docker image deployment Video demonstration: HCL Digital Experience 9.5 on OpenShift","title":"New HCL Digital Experience 9.5 Docker Image"},{"location":"overview/intr_new95/#new-hcl-digital-experience-95-practitioner-studio","text":"Using the new HCL Portal Practitioner Studio centralized management user interfaces, content authors, developers, and administrators can manage DX tasks more quickly. Learn more about Practitioner Studio by clicking on the topic link below. Documentation resource: Practitioner Studio","title":"New HCL Digital Experience 9.5 Practitioner Studio"},{"location":"overview/intr_new95/#the-woodburn-studio","text":"The Woodburn Studio is a fully functioning demonstration website that demonstrates best practices in content and site development with HCL Digital Experience tools. Learn more about Woodburn Studio by clicking on the topic link below. Documentation resource: The Woodburn Studio","title":"The Woodburn Studio"},{"location":"overview/intr_new95/#migrate-to-websphere-application-server-905","text":"HCL Digital Experience 9.5 supports IBM WebSphere Application Server 9.0.5 and you can migrate to it if you are running on IBM WebSphere Application Server 8.5.x or 9.0.0.x. Documentation resource: Migrating to WebSphere Application Server 9.0.5","title":"Migrate to WebSphere Application Server 9.0.5"},{"location":"overview/intr_new95/#the-new-hcl-experience-api","text":"HCL Experience API is a set of OpenAPI-compliant REST APIs developers can use to the existing set of HCL Digital Experience APIs. Documentation resource: The HCL Experience API","title":"The New HCL Experience API"},{"location":"overview/intr_new95/#the-new-content-composer","text":"Content Composer delivers simplified processes for creating and managing Digital Experience site content. Users can access the Content Composer features in HCL Digital Experience 9.5 Container Update CF173 and higher releases. Documentation resource: Content Composer","title":"The New Content Composer"},{"location":"overview/intr_new95/#the-new-digital-asset-management","text":"Digital Asset Management delivers a central platform to store and include rich media assets in Digital Experience site content to present engaging, consistently branded experiences across digital channels. Users can access the Digital Asset Management features in HCL Digital Experience 9.5 Container Update CF173 and higher releases. Documentation resource: Digital Asset Management","title":"The New Digital Asset Management"},{"location":"overview/intr_new95/#how-to-provide-feedback-on-the-hcl-digital-experience-release-components","text":"HCL Digital Experience customers and business partners may provide feedback on their experience with the Tech Preview release versions of the Experience API and the Content Composer by using this HCL Digital Experience release feedback reporting application . Unsupported features for HCL Digital Experience 9.5 If you are migrating from an earlier release of HCL Digital Experience, you should be aware of various features and themes that are unsupported per each release. Deprecated features for HCL Digital Experience 9.5 If you are migrating from an earlier release of HCL Digital Experience, you should be aware of various features and themes that are deprecated per each release. List of software fixes 9.5 This includes new features and improvements for the latest version of HCL Digital Experience. Fixes for IBM WebSphere Application Server 9.0.5 Learn about the latest fixes for IBM WebSphere Application Server 9.0.5. Parent topic: What's new in HCL Digital Experience?","title":"How to provide feedback on the HCL Digital Experience release components"},{"location":"overview/intr_new_ov/","text":"What's new in HCL Digital Experience? HCL Digital Experience 9.5 provides new features for administrators, developers, and content authors. Learn what's new in HCL Digital Experience 9.5. What's new in HCL Digital Experience 9.5? Learn about the new features, updates, and fixes in the HCL Digital Experience 9.5 release. Latest Combined CF and 9.5 Container Updates Learn what's new in the HCL Digital Experience Combined Cumulative Fix and HCL Digital Experience Version 9.5 Container Update releases. Parent topic: Overview 9.5","title":"What's new in HCL Digital Experience?"},{"location":"overview/intr_new_ov/#whats-new-in-hcl-digital-experience","text":"HCL Digital Experience 9.5 provides new features for administrators, developers, and content authors. Learn what's new in HCL Digital Experience 9.5. What's new in HCL Digital Experience 9.5? Learn about the new features, updates, and fixes in the HCL Digital Experience 9.5 release. Latest Combined CF and 9.5 Container Updates Learn what's new in the HCL Digital Experience Combined Cumulative Fix and HCL Digital Experience Version 9.5 Container Update releases. Parent topic: Overview 9.5","title":"What's new in HCL Digital Experience?"},{"location":"overview/intr_ovr/","text":"Product capabilities HCL Digital Experience capabilities let you quickly implement web experiences that are engaging, flexible, and high performing. Digital Experience platform Digital Experience is HCL integration software platform. It includes the entire middleware infrastructure - such as servers, services, and tools - needed to write, run, and monitor 24x7 industrial-strength, on-demand Web applications and cross-platform, cross-product solutions. WebSphere provides reliable, flexible, and robust integration software. Digital Experience provides software for Service Oriented Architecture (SOA) environments that enables dynamic, interconnected business processes, and delivers highly effective application infrastructures for all business situations. IBM\u00ae WebSphere\u00ae Application Server drives business agility by providing millions of developers and IT Architects with an innovative, performance-based foundation to build, reuse, run, integrate, and manage Service Oriented Architecture (SOA) applications and services. From business critical and key enterprise-wide applications to the smallest departmental level applications, WebSphere Application Server offers the highest levels of reliability, availability, security, and scalability. Customization You can customize the portal to meet the needs of your organization, users, and user groups. You can adapt the look and feel of the portal to fit the standards of your organization and to customize page content for users and groups in accordance with business rules and user profiles. Users, such as business partners, customers, or employees, can further customize their own views of the portal. Users can add portlets to pages and arrange them as they want and control portlet color schemes. By aggregating portlets in one place and giving users the power to customize their own desktops, the portal gives users a means for doing business efficiently and with high satisfaction. Portlets Portlets are central to the portal. As special reusable Java servlet that appear as defined regions on portal pages, portlets provide access to many different applications, services, and web content. The portal ships a rich set of standard portlets, including portlets for displaying syndicated content, transforming XML, and accessing search engines and web pages. More portlet solutions are available on the IBM Lotus and HCL Portal Business Solutions Catalog. These portlets are used to access HCL Notes\u00ae iNotes, HCL Connections, and Microsoft Exchange. Several third-party portlets are also available. Examples include Enterprise Resource Planning (ERP), Dashboards, Business Intelligence, Process Management, and Customer Relationship Management (CRM) portlets. It is possible to develop custom portlets, too. The portal supports the Java Standard API (JSR 286) that portlet developers can use to create custom portlets. Widgets Widgets are now included inside the portal. You can even create mash-ups that consist of both portlets and widgets. Widgets are highly interactive user interface components that are written in JavaScript. These widgets are typically very narrow in scope and can easily be created using a script-based language. Widgets can also be a solution for creating a mashup between different backend technologies like a Java EE-based portal server and a PHP-based server. For additional information about new features, main components, and what each component provides to the overall solution, explore the What's New section. Streamlined site creation You can use the Site Builder to generate your own portal site. Web analytics HCL Digital Experience (DX) includes a number of solutions to help you understand how visitors use your site, including server-side analytics and client-side analytics. Client-side analytics is also called active site analytics. Web content HCL Portal and HCL Web Content Manager help you manage content, share information, and communicate your message. Social business HCL Portal offers wikis, blogs, and tagging and rating capabilities. In addition, you can integrate existing collaboration applications with your portal site, such as HCL Connections. Integration HCL Portal integrates with many products. Mobile The HCL Digital Experience platform presents mobile-enabled services support that enables you to deliver consistent, personalized cross-channel experiences quickly. Versatile framework HCL Digital Experience provides users a consistent view of portal applications and allows users to define specific sets of applications that are presented in a single context. Depending on the requesting device, the rendering of this application set must vary to fulfill the requirements of the device. Parent topic: Overview 9.5","title":"Product capabilities"},{"location":"overview/intr_ovr/#product-capabilities","text":"HCL Digital Experience capabilities let you quickly implement web experiences that are engaging, flexible, and high performing.","title":"Product capabilities"},{"location":"overview/intr_ovr/#digital-experience-platform","text":"Digital Experience is HCL integration software platform. It includes the entire middleware infrastructure - such as servers, services, and tools - needed to write, run, and monitor 24x7 industrial-strength, on-demand Web applications and cross-platform, cross-product solutions. WebSphere provides reliable, flexible, and robust integration software. Digital Experience provides software for Service Oriented Architecture (SOA) environments that enables dynamic, interconnected business processes, and delivers highly effective application infrastructures for all business situations. IBM\u00ae WebSphere\u00ae Application Server drives business agility by providing millions of developers and IT Architects with an innovative, performance-based foundation to build, reuse, run, integrate, and manage Service Oriented Architecture (SOA) applications and services. From business critical and key enterprise-wide applications to the smallest departmental level applications, WebSphere Application Server offers the highest levels of reliability, availability, security, and scalability.","title":"Digital Experience platform"},{"location":"overview/intr_ovr/#customization","text":"You can customize the portal to meet the needs of your organization, users, and user groups. You can adapt the look and feel of the portal to fit the standards of your organization and to customize page content for users and groups in accordance with business rules and user profiles. Users, such as business partners, customers, or employees, can further customize their own views of the portal. Users can add portlets to pages and arrange them as they want and control portlet color schemes. By aggregating portlets in one place and giving users the power to customize their own desktops, the portal gives users a means for doing business efficiently and with high satisfaction.","title":"Customization"},{"location":"overview/intr_ovr/#portlets","text":"Portlets are central to the portal. As special reusable Java servlet that appear as defined regions on portal pages, portlets provide access to many different applications, services, and web content. The portal ships a rich set of standard portlets, including portlets for displaying syndicated content, transforming XML, and accessing search engines and web pages. More portlet solutions are available on the IBM Lotus and HCL Portal Business Solutions Catalog. These portlets are used to access HCL Notes\u00ae iNotes, HCL Connections, and Microsoft Exchange. Several third-party portlets are also available. Examples include Enterprise Resource Planning (ERP), Dashboards, Business Intelligence, Process Management, and Customer Relationship Management (CRM) portlets. It is possible to develop custom portlets, too. The portal supports the Java Standard API (JSR 286) that portlet developers can use to create custom portlets.","title":"Portlets"},{"location":"overview/intr_ovr/#widgets","text":"Widgets are now included inside the portal. You can even create mash-ups that consist of both portlets and widgets. Widgets are highly interactive user interface components that are written in JavaScript. These widgets are typically very narrow in scope and can easily be created using a script-based language. Widgets can also be a solution for creating a mashup between different backend technologies like a Java EE-based portal server and a PHP-based server. For additional information about new features, main components, and what each component provides to the overall solution, explore the What's New section. Streamlined site creation You can use the Site Builder to generate your own portal site. Web analytics HCL Digital Experience (DX) includes a number of solutions to help you understand how visitors use your site, including server-side analytics and client-side analytics. Client-side analytics is also called active site analytics. Web content HCL Portal and HCL Web Content Manager help you manage content, share information, and communicate your message. Social business HCL Portal offers wikis, blogs, and tagging and rating capabilities. In addition, you can integrate existing collaboration applications with your portal site, such as HCL Connections. Integration HCL Portal integrates with many products. Mobile The HCL Digital Experience platform presents mobile-enabled services support that enables you to deliver consistent, personalized cross-channel experiences quickly. Versatile framework HCL Digital Experience provides users a consistent view of portal applications and allows users to define specific sets of applications that are presented in a single context. Depending on the requesting device, the rendering of this application set must vary to fulfill the requirements of the device. Parent topic: Overview 9.5","title":"Widgets"},{"location":"overview/intro_container/","text":"Overview 9.5 HCL Digital Experience provides a single access point to web content and applications, while it delivers differentiated, personalized experiences for each user. Multiple solutions are available to fit your needs. HCL Digital Experience The platform to blend content, applications, and business processes for delivering the best experience every time. HCL Digital Experience empowers you to create, manage and deliver engaging omnichannel HCL Digital Experiences to virtually all audiences with responsive content, targeted offers, seamlessly integrated applications and consistent branding across channels (web, mobile, and hybrid mobile/web applications, and more). HCL Portal HCL Portal is an enterprise web portal that helps customers deliver faster response to the demands for HCL Digital Experience solutions by giving users a single point of access to the applications, services, information and social connections they need. HCL Web Content Manager HCL Web Content Manager is a fully-featured, multi-platform enterprise content management solution. Easily manage your growing volume of digital content that is required to run your business and support critical decisions. For additional information about HCL Digital Experience solutions, visit: HCL Digital Experience website. What's new in HCL Digital Experience? HCL Digital Experience 9.5 provides new features for administrators, developers, and content authors. Learn what's new in HCL Digital Experience 9.5. Product capabilities HCL Digital Experience capabilities let you quickly implement web experiences that are engaging, flexible, and high performing.","title":"Overview 9.5"},{"location":"overview/intro_container/#overview-95","text":"HCL Digital Experience provides a single access point to web content and applications, while it delivers differentiated, personalized experiences for each user. Multiple solutions are available to fit your needs.","title":"Overview 9.5"},{"location":"overview/intro_container/#hcl-digital-experience","text":"The platform to blend content, applications, and business processes for delivering the best experience every time. HCL Digital Experience empowers you to create, manage and deliver engaging omnichannel HCL Digital Experiences to virtually all audiences with responsive content, targeted offers, seamlessly integrated applications and consistent branding across channels (web, mobile, and hybrid mobile/web applications, and more).","title":"HCL Digital Experience"},{"location":"overview/intro_container/#hcl-portal","text":"HCL Portal is an enterprise web portal that helps customers deliver faster response to the demands for HCL Digital Experience solutions by giving users a single point of access to the applications, services, information and social connections they need.","title":"HCL Portal"},{"location":"overview/intro_container/#hcl-web-content-manager","text":"HCL Web Content Manager is a fully-featured, multi-platform enterprise content management solution. Easily manage your growing volume of digital content that is required to run your business and support critical decisions. For additional information about HCL Digital Experience solutions, visit: HCL Digital Experience website. What's new in HCL Digital Experience? HCL Digital Experience 9.5 provides new features for administrators, developers, and content authors. Learn what's new in HCL Digital Experience 9.5. Product capabilities HCL Digital Experience capabilities let you quickly implement web experiences that are engaging, flexible, and high performing.","title":"HCL Web Content Manager"},{"location":"overview/lotus_connections_integration/","text":"HCL Connections Integrate HCL Connections into your site by using community pages, search integration, and more. Community pages Portlets on community pages are automatically scoped to the community membership and display content from the community in the portlets. For example, if your community contains a forum you can add the forum portlet to a community page. The portal site visitors can view and interact with the forum content from the portal site. You can automatically create new communities for your pages during the page template instantiation. Search integration Integrating HCL Connections content into your portal search makes it easier for site visitors to find community content. Visitors can search for a term and see results from your portal site and HCL Connections. Each HCL Connections component has a unique seedlist provider. To configure your portal search to include HCL Connections content, you must configure a content source for each seedlist. Instructions are provided in the HCL Connections product documentation. Tag integration You can configure you portal tag cloud to include tags from HCL Connections. This configuration makes it easier for your site users to find content in the communities. You can also add the HCL Connections Tags Portlet to a page. Then, you can wire it to other HCL Connections portlets. Then, site visitors can use tags to find community content faster in blogs, wikis, and more. Profiles integration You can configure your portal site to show HCL Connections Business Card information. Names that are associated with HCL Connections profiles display as active links. Your site visitors click the name to see the business card. From the business card visitors can link to communities, blogs, and more for the selected user. Files integration Content authors can easily create links to files stored on HCL Connections. From the rich text editor, in HCL Web Content Manager, the author can browse Files. Authors can also use Web Content Manager markup generation to render the current contents of specific HCL Connections Folders. Integration with HCL Connections Files is based on the generic Content Management Interoperability Services (CMIS). Parent topic: Social business","title":"HCL Connections"},{"location":"overview/lotus_connections_integration/#hcl-connections","text":"Integrate HCL Connections into your site by using community pages, search integration, and more.","title":"HCL Connections"},{"location":"overview/lotus_connections_integration/#community-pages","text":"Portlets on community pages are automatically scoped to the community membership and display content from the community in the portlets. For example, if your community contains a forum you can add the forum portlet to a community page. The portal site visitors can view and interact with the forum content from the portal site. You can automatically create new communities for your pages during the page template instantiation.","title":"Community pages"},{"location":"overview/lotus_connections_integration/#search-integration","text":"Integrating HCL Connections content into your portal search makes it easier for site visitors to find community content. Visitors can search for a term and see results from your portal site and HCL Connections. Each HCL Connections component has a unique seedlist provider. To configure your portal search to include HCL Connections content, you must configure a content source for each seedlist. Instructions are provided in the HCL Connections product documentation.","title":"Search integration"},{"location":"overview/lotus_connections_integration/#tag-integration","text":"You can configure you portal tag cloud to include tags from HCL Connections. This configuration makes it easier for your site users to find content in the communities. You can also add the HCL Connections Tags Portlet to a page. Then, you can wire it to other HCL Connections portlets. Then, site visitors can use tags to find community content faster in blogs, wikis, and more.","title":"Tag integration"},{"location":"overview/lotus_connections_integration/#profiles-integration","text":"You can configure your portal site to show HCL Connections Business Card information. Names that are associated with HCL Connections profiles display as active links. Your site visitors click the name to see the business card. From the business card visitors can link to communities, blogs, and more for the selected user.","title":"Profiles integration"},{"location":"overview/lotus_connections_integration/#files-integration","text":"Content authors can easily create links to files stored on HCL Connections. From the rich text editor, in HCL Web Content Manager, the author can browse Files. Authors can also use Web Content Manager markup generation to render the current contents of specific HCL Connections Folders. Integration with HCL Connections Files is based on the generic Content Management Interoperability Services (CMIS). Parent topic: Social business","title":"Files integration"},{"location":"overview/mobile/","text":"Mobile The HCL Digital Experience platform presents mobile-enabled services support that enables you to deliver consistent, personalized cross-channel experiences quickly. HCL DX Mobile Experience Pages are optimized on smart phones, desktops, or almost any device. This optimization is made possible with the HCL DX Mobile Experience, HCL Web Experience Factory smart phone builders. Progressive Web Applications Develop support that adds native mobile application experience and performance to your web site using browser-based functionality. Mobile Preview Use the Mobile Preview simulator to view the presentation of Digital Experience site page components on select mobile devices. Development tools Both Web Experience Factory and IBM Rational Application Developer include functionality to help you develop exceptional web experiences for your mobile site visitors. Parent topic: Product capabilities","title":"Mobile"},{"location":"overview/mobile/#mobile","text":"The HCL Digital Experience platform presents mobile-enabled services support that enables you to deliver consistent, personalized cross-channel experiences quickly. HCL DX Mobile Experience Pages are optimized on smart phones, desktops, or almost any device. This optimization is made possible with the HCL DX Mobile Experience, HCL Web Experience Factory smart phone builders. Progressive Web Applications Develop support that adds native mobile application experience and performance to your web site using browser-based functionality. Mobile Preview Use the Mobile Preview simulator to view the presentation of Digital Experience site page components on select mobile devices. Development tools Both Web Experience Factory and IBM Rational Application Developer include functionality to help you develop exceptional web experiences for your mobile site visitors. Parent topic: Product capabilities","title":"Mobile"},{"location":"overview/mobile_themes_and_enabled_portlets/","text":"HCL DX Mobile Experience Pages are optimized on smart phones, desktops, or almost any device. This optimization is made possible with the HCL DX Mobile Experience, HCL Web Experience Factory smart phone builders. The Mobile Experience demonstrated how to use a lightweight architecture that provides exceptional performance on mobile devices. You can start with the included sample code and then customize it to meet your specific business needs. The Mobile Experience includes: Sample mobile navigation widgets that follow common mobile application navigation patterns Sample mobile page layouts that demonstrate common content interaction patterns The Mobile Experience is available on your HCL Digital Experience package. Parent topic: Mobile","title":"HCL DX Mobile Experience"},{"location":"overview/mobile_themes_and_enabled_portlets/#hcl-dx-mobile-experience","text":"Pages are optimized on smart phones, desktops, or almost any device. This optimization is made possible with the HCL DX Mobile Experience, HCL Web Experience Factory smart phone builders. The Mobile Experience demonstrated how to use a lightweight architecture that provides exceptional performance on mobile devices. You can start with the included sample code and then customize it to meet your specific business needs. The Mobile Experience includes: Sample mobile navigation widgets that follow common mobile application navigation patterns Sample mobile page layouts that demonstrate common content interaction patterns The Mobile Experience is available on your HCL Digital Experience package. Parent topic: Mobile","title":"HCL DX Mobile Experience"},{"location":"overview/new_cf17/","text":"What's new in CF17? 9.5 Combined Cumulative Fix (CF17) includes new software fixes for the latest version of HCL Digital Experience. Go to the HCL Software Support Site for the list of software fixes for HCL Digital Experience. Product software can be accessed from the HCL Software Licensing Portal . Go to this Step-by-step guide to downloading DX products and accessing Customer Support for more information. Also, see the following link for Portal maintenance guidance: HCL Digital Experience Roadmap: Applying maintenance Parent topic: Latest Combined CF and 9.5 Container Updates","title":"What's new in CF17? 9.5"},{"location":"overview/new_cf17/#whats-new-in-cf17-95","text":"Combined Cumulative Fix (CF17) includes new software fixes for the latest version of HCL Digital Experience. Go to the HCL Software Support Site for the list of software fixes for HCL Digital Experience. Product software can be accessed from the HCL Software Licensing Portal . Go to this Step-by-step guide to downloading DX products and accessing Customer Support for more information. Also, see the following link for Portal maintenance guidance: HCL Digital Experience Roadmap: Applying maintenance Parent topic: Latest Combined CF and 9.5 Container Updates","title":"What's new in CF17? 9.5"},{"location":"overview/new_cf171/","text":"What's new in Container Update CF171? 9.5 Containers The Container Update releases include new features and updates for HCL Digital Experience 9.5 container deployments. Password override in Docker Added option to override password in Docker. See Docker deployment . Password override in OpenShift Added option to override password in OpenShift. See OpenShift deployment . Support for Kubernetes as verified in Amazon Elastic Container Service for Kubernetes (EKS) Added support for Kubernetes on AWS EKS. See Deploy HCL Digital Experience 9.5 Container to Amazon EKS . Support for Auto-scaling and Route configuration Added support for auto-scaling based on available CPU and memory utilization and route configuration. See Customizing the container deployment . Downloading DX products and accessing Customer Support You can go to the HCL Software Licensing Portal to access and download product software. See the Step-by-step guide to downloading DX products and accessing Customer Support for more information. Parent topic: Container Update releases 9.5","title":"What's new in Container Update CF171? 9.5 Containers"},{"location":"overview/new_cf171/#whats-new-in-container-update-cf171-95-containers","text":"The Container Update releases include new features and updates for HCL Digital Experience 9.5 container deployments.","title":"What's new in Container Update CF171? 9.5 Containers"},{"location":"overview/new_cf171/#password-override-in-docker","text":"Added option to override password in Docker. See Docker deployment .","title":"Password override in Docker"},{"location":"overview/new_cf171/#password-override-in-openshift","text":"Added option to override password in OpenShift. See OpenShift deployment .","title":"Password override in OpenShift"},{"location":"overview/new_cf171/#support-for-kubernetes-as-verified-in-amazon-elastic-container-service-for-kubernetes-eks","text":"Added support for Kubernetes on AWS EKS. See Deploy HCL Digital Experience 9.5 Container to Amazon EKS .","title":"Support for Kubernetes as verified in Amazon Elastic Container Service for Kubernetes (EKS)"},{"location":"overview/new_cf171/#support-for-auto-scaling-and-route-configuration","text":"Added support for auto-scaling based on available CPU and memory utilization and route configuration. See Customizing the container deployment .","title":"Support for Auto-scaling and Route configuration"},{"location":"overview/new_cf171/#downloading-dx-products-and-accessing-customer-support","text":"You can go to the HCL Software Licensing Portal to access and download product software. See the Step-by-step guide to downloading DX products and accessing Customer Support for more information. Parent topic: Container Update releases 9.5","title":"Downloading DX products and accessing Customer Support"},{"location":"overview/new_cf172/","text":"What's new in Container Update CF172? 9.5 Containers The Container Update release include new features and updates for HCL Digital Experience 9.5 container deployments, including DX tool, Support and API updates. Web Content Manager (WCM) Support Tools The HCL WCM Support Tools portlet is provided to investigate and analyze information related to the WCM Java Content Repository (JCR) nodes. The WCM Support Tools Portlet is provided in the HCL Digital Experience 9.5 CF172 Container Update release, and is accessible from the standard Digital Experience administration panel in the CF172 release. See HCL Web Content Manager Support Tools for details. New Web Content Query Parameter APIs New Web Content Query Parameter APIs are added in HCL Digital Experience 9.5 CF172. See REST Query service for web content for details. New Enhanced Content Template API The Enhanced Web Content Manager Content Template API adds the ability to retrieve the configuration details of content template elements. See How to retrieve the settings of the elements for content templates by using REST for details. Updated HCL Digital Experience 9.5 platform support statements Read the updates to HCL Digital Experience 9.5 detailed system support statements published to the HCL Digital Experience Support site. See This HCL Software Support article for details. Downloading DX products and accessing Customer Support You can go to the HCL Software Licensing Portal to access and download product software. See the Step-by-step guide to downloading DX products and accessing Customer Support for more information. Parent topic: Container Update releases 9.5","title":"What's new in Container Update CF172? 9.5 Containers"},{"location":"overview/new_cf172/#whats-new-in-container-update-cf172-95-containers","text":"The Container Update release include new features and updates for HCL Digital Experience 9.5 container deployments, including DX tool, Support and API updates.","title":"What's new in Container Update CF172? 9.5 Containers"},{"location":"overview/new_cf172/#web-content-manager-wcm-support-tools","text":"The HCL WCM Support Tools portlet is provided to investigate and analyze information related to the WCM Java Content Repository (JCR) nodes. The WCM Support Tools Portlet is provided in the HCL Digital Experience 9.5 CF172 Container Update release, and is accessible from the standard Digital Experience administration panel in the CF172 release. See HCL Web Content Manager Support Tools for details.","title":"Web Content Manager (WCM) Support Tools"},{"location":"overview/new_cf172/#new-web-content-query-parameter-apis","text":"New Web Content Query Parameter APIs are added in HCL Digital Experience 9.5 CF172. See REST Query service for web content for details.","title":"New Web Content Query Parameter APIs"},{"location":"overview/new_cf172/#new-enhanced-content-template-api","text":"The Enhanced Web Content Manager Content Template API adds the ability to retrieve the configuration details of content template elements. See How to retrieve the settings of the elements for content templates by using REST for details.","title":"New Enhanced Content Template API"},{"location":"overview/new_cf172/#updated-hcl-digital-experience-95-platform-support-statements","text":"Read the updates to HCL Digital Experience 9.5 detailed system support statements published to the HCL Digital Experience Support site. See This HCL Software Support article for details.","title":"Updated HCL Digital Experience 9.5 platform support statements"},{"location":"overview/new_cf172/#downloading-dx-products-and-accessing-customer-support","text":"You can go to the HCL Software Licensing Portal to access and download product software. See the Step-by-step guide to downloading DX products and accessing Customer Support for more information. Parent topic: Container Update releases 9.5","title":"Downloading DX products and accessing Customer Support"},{"location":"overview/new_cf173/","text":"What's new in Container Update CF173? 9.5 Containers This HCL Digital Experience 9.5 Container Update release include new WCM REST APIs, and Tech Previews for Content Composer and Digital Asset Management, and more. Web Content Manager Mirror syndication - Disable full build option An option to disable the rebuild with the WCM mirror syndication option is now available. This option can be set using the WCM Configuration service on the syndicator. See Manually syndicating items . New WCM Restore Version REST API The Restore version API supports restoring content versions to a previous level. See How to use REST with Versions . New Enhanced WCM Content Template API Element Configuration The Enhanced Content Template API Element Configuration Updates allows the configuration of template elements to be updated. See How to set default content values for content templates by using REST . New WCM Export Digital Asset Management references API The Web Content Manager Export DAM references API REST service can be used to retrieve content or components with references to externally managed resources, using the Digital Asset Manager plugin. See How to use REST with content items . New Experience API samples Two new samples are provided for use with the HCL Digital Experience 9.5 Experience API, supporting Sample login and content update process flow, and Get roles with authentication functions. See the Experience API Sample Calls . New HCL Content Composer \u2013 Tech Preview in HCL Digital Experience 9.5 CF173 Content Composer delivers simplified processes for creating and managing Digital Experience site content. Users can access a Tech Preview of the Content Composer features in HCL Digital Experience 9.5 Container Update CF173 and higher releases. See HCL Digital Experience 9.5 CF173 Content Composer \u2013 Tech Preview for details. New Digital Asset Management \u2013 Tech Preview in HCL Digital Experience 9.5 CF173 Digital Asset Management delivers a central platform to store and include rich media assets in Digital Experience site content to present engaging, consistently branded experiences across digital channels. Users can access a Tech Preview of the Digital Asset Management features in HCL Digital Experience 9.5 Container Update CF173 and higher releases. See HCL Digital Experience 9.5 CF173 Digital Asset Management \u2013 Tech Preview for details. Downloading DX products and accessing Customer Support The HCL Digital Experience 9.5 detailed system support statements are updated and published on the HCL Digital Experience Support site. You can go to the HCL Software Licensing Portal to access and download product software. For more information, see the Step-by-step guide to downloading DX products and accessing Customer Support . Parent topic: Container Update releases 9.5","title":"What's new in Container Update CF173? 9.5 Containers"},{"location":"overview/new_cf173/#whats-new-in-container-update-cf173-95-containers","text":"This HCL Digital Experience 9.5 Container Update release include new WCM REST APIs, and Tech Previews for Content Composer and Digital Asset Management, and more.","title":"What's new in Container Update CF173? 9.5 Containers"},{"location":"overview/new_cf173/#web-content-manager-mirror-syndication-disable-full-build-option","text":"An option to disable the rebuild with the WCM mirror syndication option is now available. This option can be set using the WCM Configuration service on the syndicator. See Manually syndicating items .","title":"Web Content Manager Mirror syndication - Disable full build option"},{"location":"overview/new_cf173/#new-wcm-restore-version-rest-api","text":"The Restore version API supports restoring content versions to a previous level. See How to use REST with Versions .","title":"New WCM Restore Version REST API"},{"location":"overview/new_cf173/#new-enhanced-wcm-content-template-api-element-configuration","text":"The Enhanced Content Template API Element Configuration Updates allows the configuration of template elements to be updated. See How to set default content values for content templates by using REST .","title":"New Enhanced WCM Content Template API Element Configuration"},{"location":"overview/new_cf173/#new-wcm-export-digital-asset-management-references-api","text":"The Web Content Manager Export DAM references API REST service can be used to retrieve content or components with references to externally managed resources, using the Digital Asset Manager plugin. See How to use REST with content items .","title":"New WCM Export Digital Asset Management references API"},{"location":"overview/new_cf173/#new-experience-api-samples","text":"Two new samples are provided for use with the HCL Digital Experience 9.5 Experience API, supporting Sample login and content update process flow, and Get roles with authentication functions. See the Experience API Sample Calls .","title":"New Experience API samples"},{"location":"overview/new_cf173/#new-hcl-content-composer-tech-preview-in-hcl-digital-experience-95-cf173","text":"Content Composer delivers simplified processes for creating and managing Digital Experience site content. Users can access a Tech Preview of the Content Composer features in HCL Digital Experience 9.5 Container Update CF173 and higher releases. See HCL Digital Experience 9.5 CF173 Content Composer \u2013 Tech Preview for details.","title":"New HCL Content Composer \u2013 Tech Preview in HCL Digital Experience 9.5 CF173"},{"location":"overview/new_cf173/#new-digital-asset-management-tech-preview-in-hcl-digital-experience-95-cf173","text":"Digital Asset Management delivers a central platform to store and include rich media assets in Digital Experience site content to present engaging, consistently branded experiences across digital channels. Users can access a Tech Preview of the Digital Asset Management features in HCL Digital Experience 9.5 Container Update CF173 and higher releases. See HCL Digital Experience 9.5 CF173 Digital Asset Management \u2013 Tech Preview for details.","title":"New Digital Asset Management \u2013 Tech Preview in HCL Digital Experience 9.5 CF173"},{"location":"overview/new_cf173/#downloading-dx-products-and-accessing-customer-support","text":"The HCL Digital Experience 9.5 detailed system support statements are updated and published on the HCL Digital Experience Support site. You can go to the HCL Software Licensing Portal to access and download product software. For more information, see the Step-by-step guide to downloading DX products and accessing Customer Support . Parent topic: Container Update releases 9.5","title":"Downloading DX products and accessing Customer Support"},{"location":"overview/new_cf18/","text":"What's new in CF18? 9.5 Containers This HCL Digital Experience 9.5 Container Update release includes new WCM REST APIs, updated Tech Preview releases of Content Composer and Digital Asset Management, Rich Text Editor and Java Server Faces bridge updates, and more. Go to the HCL Software Support Site for the list of software fixes, including CF18. See What's New in CF18 for HCL Digital Experience for a list of updates in this release. Product software can be accessed from the HCL Software Licensing Portal . Go to this Step-by-step guide to downloading DX products and accessing Customer Support for more information. JavaServer Faces (JSF) Bridge With the HCL Digital Experience CF18 Container and CF update, an updated JSF Portlet Bridge is introduced and installed in the HCL Digital Experience software. Customers installing HCL Digital Experience 8.5, 9, or 9.5 CF18 or Container Update release CF18, and using an IBM WebSphere Application Server Network Deployment version later than 8.5.5.17 or 9.0.5.2 can utilize the new JSF Portlet Bridge. See JavaServer Faces implementation for more information. Apply Content Template REST API The Apply Content Template API allows a developer to apply a content template to a set of specific content items or all content items of a certain template. It is equivalent to the functionality in the user interface. See How to set default content values for content templates by using REST for details. Enhanced Content Template API The Enhanced Web Content Manager Content Template API adds the ability to retrieve the configuration details of content template elements. See How to retrieve the settings of the elements for content templates by using REST for details. Rich Text Editor Textbox I/O Updates Updates are provided for the Textbox I/O Rich Text Editor, requiring use of Java 8. See Rich text editor toolbar configuration options for details. Sample Guidance to set Storage Class and Volume to deploy HCL Digital Experience 9.5 Containers to Amazon Elastic Kubernetes Service (EKS) and Red Hat OpenShift Additional \"Sample Storage Class and Volume\" guidance is available to HCL Digital Experience 9.5 container administrators. See Sample Storage Class and Volume topic for details. HCL Content Composer \u2013 Tech Preview for HCL Digital Experience 9.5 CF173 or later Content Composer delivers simplified processes for creating and managing Digital Experience site content. Users can access a Tech Preview of the Content Composer features in HCL Digital Experience 9.5 Container Update CF173 and higher releases. See HCL Digital Experience 9.5 Content Composer \u2013 Tech Preview for details. Digital Asset Management \u2013 Tech Preview for HCL Digital Experience 9.5 CF173 or later Digital Asset Management delivers a central platform to store and include rich media assets in Digital Experience site content to present engaging, consistently branded experiences across digital channels. Users can access a Tech Preview of the Digital Asset Management features in HCL Digital Experience 9.5 Container Update CF173 and higher releases. See HCL Digital Experience 9.5 Digital Asset Management \u2013 Tech Preview for details. Updated HCL Digital Experience 9.5 platform support statements See the updates to the HCL Digital Experience 9.5 detailed system support statements published to the HCL Digital Experience Support site. Parent topic: Container Update releases 9.5","title":"What's new in CF18? 9.5 Containers"},{"location":"overview/new_cf18/#whats-new-in-cf18-95-containers","text":"This HCL Digital Experience 9.5 Container Update release includes new WCM REST APIs, updated Tech Preview releases of Content Composer and Digital Asset Management, Rich Text Editor and Java Server Faces bridge updates, and more. Go to the HCL Software Support Site for the list of software fixes, including CF18. See What's New in CF18 for HCL Digital Experience for a list of updates in this release. Product software can be accessed from the HCL Software Licensing Portal . Go to this Step-by-step guide to downloading DX products and accessing Customer Support for more information.","title":"What's new in CF18? 9.5 Containers"},{"location":"overview/new_cf18/#javaserver-faces-jsf-bridge","text":"With the HCL Digital Experience CF18 Container and CF update, an updated JSF Portlet Bridge is introduced and installed in the HCL Digital Experience software. Customers installing HCL Digital Experience 8.5, 9, or 9.5 CF18 or Container Update release CF18, and using an IBM WebSphere Application Server Network Deployment version later than 8.5.5.17 or 9.0.5.2 can utilize the new JSF Portlet Bridge. See JavaServer Faces implementation for more information.","title":"JavaServer Faces (JSF) Bridge"},{"location":"overview/new_cf18/#apply-content-template-rest-api","text":"The Apply Content Template API allows a developer to apply a content template to a set of specific content items or all content items of a certain template. It is equivalent to the functionality in the user interface. See How to set default content values for content templates by using REST for details.","title":"Apply Content Template REST API"},{"location":"overview/new_cf18/#enhanced-content-template-api","text":"The Enhanced Web Content Manager Content Template API adds the ability to retrieve the configuration details of content template elements. See How to retrieve the settings of the elements for content templates by using REST for details.","title":"Enhanced Content Template API"},{"location":"overview/new_cf18/#rich-text-editor-textbox-io-updates","text":"Updates are provided for the Textbox I/O Rich Text Editor, requiring use of Java 8. See Rich text editor toolbar configuration options for details.","title":"Rich Text Editor Textbox I/O Updates"},{"location":"overview/new_cf18/#sample-guidance-to-set-storage-class-and-volume-to-deploy-hcl-digital-experience-95-containers-to-amazon-elastic-kubernetes-service-eks-and-red-hat-openshift","text":"Additional \"Sample Storage Class and Volume\" guidance is available to HCL Digital Experience 9.5 container administrators. See Sample Storage Class and Volume topic for details.","title":"Sample Guidance to set Storage Class and Volume to deploy HCL Digital Experience 9.5 Containers to Amazon Elastic Kubernetes Service (EKS) and Red Hat OpenShift"},{"location":"overview/new_cf18/#hcl-content-composer-tech-preview-for-hcl-digital-experience-95-cf173-or-later","text":"Content Composer delivers simplified processes for creating and managing Digital Experience site content. Users can access a Tech Preview of the Content Composer features in HCL Digital Experience 9.5 Container Update CF173 and higher releases. See HCL Digital Experience 9.5 Content Composer \u2013 Tech Preview for details.","title":"HCL Content Composer \u2013 Tech Preview for HCL Digital Experience 9.5 CF173 or later"},{"location":"overview/new_cf18/#digital-asset-management-tech-preview-for-hcl-digital-experience-95-cf173-or-later","text":"Digital Asset Management delivers a central platform to store and include rich media assets in Digital Experience site content to present engaging, consistently branded experiences across digital channels. Users can access a Tech Preview of the Digital Asset Management features in HCL Digital Experience 9.5 Container Update CF173 and higher releases. See HCL Digital Experience 9.5 Digital Asset Management \u2013 Tech Preview for details.","title":"Digital Asset Management \u2013 Tech Preview for HCL Digital Experience 9.5 CF173 or later"},{"location":"overview/new_cf18/#updated-hcl-digital-experience-95-platform-support-statements","text":"See the updates to the HCL Digital Experience 9.5 detailed system support statements published to the HCL Digital Experience Support site. Parent topic: Container Update releases 9.5","title":"Updated HCL Digital Experience 9.5 platform support statements"},{"location":"overview/new_cf181/","text":"What's new in Container Update CF181? 9.5 Containers This HCL Digital Experience 9.5 Container Update release includes new Production releases of Content Composer, Digital Asset Management, and Experience API, new WCM REST APIs, guidance to deploy OpenLDAP, Remote Search and Database transfer processes, and more. Go to the HCL Software Support Site for the list of software fixes, including Container Update releases. Product software can be accessed from the HCL Software Licensing Portal . Go to this Step-by-step guide to downloading DX products and accessing Customer Support for more information. Content Composer Content Composer delivers simplified processes for creating and managing Digital Experience site content. Users can work with Content Composer features in HCL Digital Experience 9.5 Container Update CF181 and higher releases. See HCL Digital Experience 9.5 Content Composer for details. Digital Asset Management Digital Asset Management delivers a central platform to store and include rich media assets in Digital Experience site content to present engaging, consistently branded experiences across digital channels. Users can access the Digital Asset Management features in HCL Digital Experience 9.5 Container Update CF181 and higher releases. See HCL Digital Experience 9.5 Digital Asset Management for details. Experience API The HCL Experience API is a set of OpenAPI compliant REST APIs available for customers deploying HCL Digital Experience 9.5 containers on supported Kubernetes platforms. It supports the integration and management of HCL Digital Experience content and functionality to any digital channel using any front-end development framework. The HCL Experience API includes REST APIs that serve as a wrapper around previously published HCL Digital Experience HTTP based APIs. See HCL Experience API for details. OpenLDAP Container integration OpenLDAP Software is an open source implementation of the Lightweight Directory Access Protocol. The HCL Digital Experience 9.5 Container Update release CF181 and higher includes an OpenLDAP container and a customization of the operator to deploy and configure the LDAP container to the HCL Digital Experience 9.5 container deployment. See Configure the OpenLDAP container image to the HCL Digital Experience 9.5 Container Deployment for details. Transfer default Container database to IBM DB2 HCL Digital Experience 9.5 installs a copy of Derby as the default database. HCL Digital Experience administrators can apply guidance to transfer the default database configuration to IBM DB2, if preferred for use as the relational database for Digital Experience 9.5 Container deployment data. See Transfer Digital Experience 9.5 Container default database to IBM DB2 for details. Remote Search services Docker deployment To support search services when deployed to Docker, Digital Experience administrators can configure Remote search services. This will require some different setup and configuration steps than used to set up remote search on a non-Docker container platform. See Deploy Remote Search services on Docker for details. New Digital Experience WCM Workflow REST APIs Two new WCM REST APIs are added to handle Process Now and Remove Workflow from an item functionality. See How to use REST with drafts and workflows for details. New Web Content Manager Reference REST API The new WCM Content Manager Reference REST API can be used by developers to find references to a Web Content or Digital Asset Management item identified by its UUID. See How to use REST with content items for details. New Web Content Text Search REST API The Text Search REST API Content Authors search for free form text in the Web Content Manager JCR. It is equivalent to the functionality in the Web Content Manager user interface. See REST Query service for web content - Query parameters for details. New Digital Experience Core Configuration REST API The Digital Experience Core Configuration API allows developers to retrieve Digital Experience deployment configuration settings. See Generic reading by using REST services for Web Content Manager for details. Web Developer Toolkit The Web Developer toolkit for HCL Digital Experience provides the ability to sync themes, content and script portlets (also known as Script Applications). It is available on the HCL Digital Experience GitHub repository. See Web Developer Toolkit for details. Parent topic: Container Update releases 9.5","title":"What's new in Container Update CF181? 9.5 Containers"},{"location":"overview/new_cf181/#whats-new-in-container-update-cf181-95-containers","text":"This HCL Digital Experience 9.5 Container Update release includes new Production releases of Content Composer, Digital Asset Management, and Experience API, new WCM REST APIs, guidance to deploy OpenLDAP, Remote Search and Database transfer processes, and more. Go to the HCL Software Support Site for the list of software fixes, including Container Update releases. Product software can be accessed from the HCL Software Licensing Portal . Go to this Step-by-step guide to downloading DX products and accessing Customer Support for more information.","title":"What's new in Container Update CF181? 9.5 Containers"},{"location":"overview/new_cf181/#content-composer","text":"Content Composer delivers simplified processes for creating and managing Digital Experience site content. Users can work with Content Composer features in HCL Digital Experience 9.5 Container Update CF181 and higher releases. See HCL Digital Experience 9.5 Content Composer for details.","title":"Content Composer"},{"location":"overview/new_cf181/#digital-asset-management","text":"Digital Asset Management delivers a central platform to store and include rich media assets in Digital Experience site content to present engaging, consistently branded experiences across digital channels. Users can access the Digital Asset Management features in HCL Digital Experience 9.5 Container Update CF181 and higher releases. See HCL Digital Experience 9.5 Digital Asset Management for details.","title":"Digital Asset Management"},{"location":"overview/new_cf181/#experience-api","text":"The HCL Experience API is a set of OpenAPI compliant REST APIs available for customers deploying HCL Digital Experience 9.5 containers on supported Kubernetes platforms. It supports the integration and management of HCL Digital Experience content and functionality to any digital channel using any front-end development framework. The HCL Experience API includes REST APIs that serve as a wrapper around previously published HCL Digital Experience HTTP based APIs. See HCL Experience API for details.","title":"Experience API"},{"location":"overview/new_cf181/#openldap-container-integration","text":"OpenLDAP Software is an open source implementation of the Lightweight Directory Access Protocol. The HCL Digital Experience 9.5 Container Update release CF181 and higher includes an OpenLDAP container and a customization of the operator to deploy and configure the LDAP container to the HCL Digital Experience 9.5 container deployment. See Configure the OpenLDAP container image to the HCL Digital Experience 9.5 Container Deployment for details.","title":"OpenLDAP Container integration"},{"location":"overview/new_cf181/#transfer-default-container-database-to-ibm-db2","text":"HCL Digital Experience 9.5 installs a copy of Derby as the default database. HCL Digital Experience administrators can apply guidance to transfer the default database configuration to IBM DB2, if preferred for use as the relational database for Digital Experience 9.5 Container deployment data. See Transfer Digital Experience 9.5 Container default database to IBM DB2 for details.","title":"Transfer default Container database to IBM DB2"},{"location":"overview/new_cf181/#remote-search-services-docker-deployment","text":"To support search services when deployed to Docker, Digital Experience administrators can configure Remote search services. This will require some different setup and configuration steps than used to set up remote search on a non-Docker container platform. See Deploy Remote Search services on Docker for details.","title":"Remote Search services Docker deployment"},{"location":"overview/new_cf181/#new-digital-experience-wcm-workflow-rest-apis","text":"Two new WCM REST APIs are added to handle Process Now and Remove Workflow from an item functionality. See How to use REST with drafts and workflows for details.","title":"New Digital Experience WCM Workflow REST APIs"},{"location":"overview/new_cf181/#new-web-content-manager-reference-rest-api","text":"The new WCM Content Manager Reference REST API can be used by developers to find references to a Web Content or Digital Asset Management item identified by its UUID. See How to use REST with content items for details.","title":"New Web Content Manager Reference REST API"},{"location":"overview/new_cf181/#new-web-content-text-search-rest-api","text":"The Text Search REST API Content Authors search for free form text in the Web Content Manager JCR. It is equivalent to the functionality in the Web Content Manager user interface. See REST Query service for web content - Query parameters for details.","title":"New Web Content Text Search REST API"},{"location":"overview/new_cf181/#new-digital-experience-core-configuration-rest-api","text":"The Digital Experience Core Configuration API allows developers to retrieve Digital Experience deployment configuration settings. See Generic reading by using REST services for Web Content Manager for details.","title":"New Digital Experience Core Configuration REST API"},{"location":"overview/new_cf181/#web-developer-toolkit","text":"The Web Developer toolkit for HCL Digital Experience provides the ability to sync themes, content and script portlets (also known as Script Applications). It is available on the HCL Digital Experience GitHub repository. See Web Developer Toolkit for details. Parent topic: Container Update releases 9.5","title":"Web Developer Toolkit"},{"location":"overview/new_cf_95/","text":"Latest Combined CF and 9.5 Container Updates Learn what's new in the HCL Digital Experience Combined Cumulative Fix and HCL Digital Experience Version 9.5 Container Update releases. What's new in CF201? Combined Cumulative Fix (CF201) includes new features and software fixes for the latest version of HCL Digital Experience. Release updates for both on-premises platforms and container deployments are available. What's new in CF200? Combined Cumulative Fix (CF200) includes new features and software fixes for the latest version of HCL Digital Experience. Release updates for both on-premises platforms and container deployments are available. What's new in CF199? Combined Cumulative Fix (CF199) includes new features and software fixes for the latest version of HCL Digital Experience. Release updates for both on-premises platforms and container deployments are available. What's new in CF198? Combined Cumulative Fix (CF198) includes new features and software fixes for the latest version of HCL Digital Experience. Release updates for both on-premises platforms and container deployments are available. What's new in CF197? Combined Cumulative Fix (CF197) includes new features and software fixes for the latest version of HCL Digital Experience. Release updates for both on \u2013 premises platforms and container deployments are available. What's new in CF196? Combined Cumulative Fix (CF196) includes new features and software fixes for the latest version of HCL Digital Experience. Beginning with CF19 and Container Update release CF196, release updates for both on\u2013premises platforms and container deployments will be available. What's new in CF19? Combined Cumulative Fix (CF19) includes new features and software fixes for the latest version of HCL Digital Experience. What's new in CF18? 9.5 This HCL Digital Experience 9.5 CF18 release includes new WCM REST APIs, updated releases of Content Composer and Digital Asset Management Tech Preview releases, Rich Text Editor and JavaServer Faces bridge updates, and more. What's new in CF17? 9.5 Combined Cumulative Fix (CF17) includes new software fixes for the latest version of HCL Digital Experience. Container Update releases 9.5 The HCL Digital Experience 9.5 Cumulative Fix and Container Update releases offer new features and software fixes for the HCL Digital Experience 9.5 container releases. Beginning with Container Update release CF196, release updates for both on-premises deployments and container platforms are available. Parent topic: What's new in HCL Digital Experience?","title":"Latest Combined CF and 9.5 Container Updates"},{"location":"overview/new_cf_95/#latest-combined-cf-and-95-container-updates","text":"Learn what's new in the HCL Digital Experience Combined Cumulative Fix and HCL Digital Experience Version 9.5 Container Update releases. What's new in CF201? Combined Cumulative Fix (CF201) includes new features and software fixes for the latest version of HCL Digital Experience. Release updates for both on-premises platforms and container deployments are available. What's new in CF200? Combined Cumulative Fix (CF200) includes new features and software fixes for the latest version of HCL Digital Experience. Release updates for both on-premises platforms and container deployments are available. What's new in CF199? Combined Cumulative Fix (CF199) includes new features and software fixes for the latest version of HCL Digital Experience. Release updates for both on-premises platforms and container deployments are available. What's new in CF198? Combined Cumulative Fix (CF198) includes new features and software fixes for the latest version of HCL Digital Experience. Release updates for both on-premises platforms and container deployments are available. What's new in CF197? Combined Cumulative Fix (CF197) includes new features and software fixes for the latest version of HCL Digital Experience. Release updates for both on \u2013 premises platforms and container deployments are available. What's new in CF196? Combined Cumulative Fix (CF196) includes new features and software fixes for the latest version of HCL Digital Experience. Beginning with CF19 and Container Update release CF196, release updates for both on\u2013premises platforms and container deployments will be available. What's new in CF19? Combined Cumulative Fix (CF19) includes new features and software fixes for the latest version of HCL Digital Experience. What's new in CF18? 9.5 This HCL Digital Experience 9.5 CF18 release includes new WCM REST APIs, updated releases of Content Composer and Digital Asset Management Tech Preview releases, Rich Text Editor and JavaServer Faces bridge updates, and more. What's new in CF17? 9.5 Combined Cumulative Fix (CF17) includes new software fixes for the latest version of HCL Digital Experience. Container Update releases 9.5 The HCL Digital Experience 9.5 Cumulative Fix and Container Update releases offer new features and software fixes for the HCL Digital Experience 9.5 container releases. Beginning with Container Update release CF196, release updates for both on-premises deployments and container platforms are available. Parent topic: What's new in HCL Digital Experience?","title":"Latest Combined CF and 9.5 Container Updates"},{"location":"overview/new_noncf18/","text":"What's new in CF18? 9.5 This HCL Digital Experience 9.5 CF18 release includes new WCM REST APIs, updated releases of Content Composer and Digital Asset Management Tech Preview releases, Rich Text Editor and JavaServer Faces bridge updates, and more. Go to the HCL Software Support Site for the list of software fixes. See What's New in CF18 for HCL Digital Experience for a list of updates in this release. Product software can be accessed from the HCL Software Licensing Portal . Go to this Step-by-step guide to downloading DX products and accessing Customer Support for more information. Web Content Manager (WCM) Support Tools The HCL WCM Support Tools portlet is provided to investigate and analyze information related to the WCM Java Content Repository (JCR) nodes. The WCM Support Tools Portlet is provided in the HCL Digital Experience 9.5 CF18 release, and is accessible from the standard Digital Experience administration panel. See HCL Web Content Manager Support Tools for details. JavaServer Faces (JSF) Bridge With the HCL Digital Experience CF18 Container and CF update, an updated JSF Portlet Bridge is introduced and installed in the HCL Digital Experience software. Customers installing HCL Digital Experience 8.5, 9.0, or 9.5 non-container CF18 or Container Update release CF18, and using an IBM WebSphere Application Server Network Deployment version later than 8.5.5.17 or 9.0.5.2 can utilize the new JSF Portlet Bridge. See JavaServer Faces implementation for more information. Apply Content Template REST API The Apply Content Template API allows a developer to apply a content template to a set of specific content items or all content items of a certain template. It is equivalent to the functionality in the user interface. See How to set default content values for content templates by using REST for details. Enhanced Content Template API The Enhanced Web Content Manager Content Template API adds the ability to retrieve the configuration details of content template elements. See How to retrieve the settings of the elements for content templates by using REST for details. Rich Text Editor Textbox I/O Updates Updates are provided for the Textbox I/O Rich Text Editor, requiring use of Java 8. See Rich text editor toolbar configuration options for details. Sample Guidance to set Storage Class and Volume to deploy HCL Digital Experience 9.5 Containers to Amazon Elastic Kubernetes Service (EKS) and Red Hat OpenShift Additional guidance for \"Sample Storage Class and Volume\" is available to HCL Digital Experience 9.5 container administrators. See Sample Storage Class and Volume topic for details. HCL Content Composer \u2013 Tech Preview for HCL Digital Experience 9.5 CF173 or higher release Content Composer delivers simplified processes for creating and managing Digital Experience site content. Users can access a Tech Preview of the Content Composer features in HCL Digital Experience 9.5 Container Update CF173 and higher releases. See HCL Digital Experience 9.5 Content Composer \u2013 Tech Preview for details. Digital Asset Management \u2013 Tech Preview for HCL Digital Experience 9.5 CF173 or higher release Digital Asset Management (DAM) delivers a central platform to store and include rich media assets in Digital Experience site content to present engaging, consistently branded experiences across digital channels. Users can access a Tech Preview of the Digital Asset Management features in HCL Digital Experience 9.5 Container Update CF173 and higher releases. See HCL Digital Experience 9.5 Digital Asset Management \u2013 Tech Preview for details. Updated HCL Digital Experience 9.5 platform support statements See the updates to the HCL Digital Experience 9.5 detailed system support statements published to the HCL Digital Experience Support site. Parent topic: Latest Combined CF and 9.5 Container Updates","title":"What's new in CF18? 9.5"},{"location":"overview/new_noncf18/#whats-new-in-cf18-95","text":"This HCL Digital Experience 9.5 CF18 release includes new WCM REST APIs, updated releases of Content Composer and Digital Asset Management Tech Preview releases, Rich Text Editor and JavaServer Faces bridge updates, and more. Go to the HCL Software Support Site for the list of software fixes. See What's New in CF18 for HCL Digital Experience for a list of updates in this release. Product software can be accessed from the HCL Software Licensing Portal . Go to this Step-by-step guide to downloading DX products and accessing Customer Support for more information.","title":"What's new in CF18? 9.5"},{"location":"overview/new_noncf18/#web-content-manager-wcm-support-tools","text":"The HCL WCM Support Tools portlet is provided to investigate and analyze information related to the WCM Java Content Repository (JCR) nodes. The WCM Support Tools Portlet is provided in the HCL Digital Experience 9.5 CF18 release, and is accessible from the standard Digital Experience administration panel. See HCL Web Content Manager Support Tools for details.","title":"Web Content Manager (WCM) Support Tools"},{"location":"overview/new_noncf18/#javaserver-faces-jsf-bridge","text":"With the HCL Digital Experience CF18 Container and CF update, an updated JSF Portlet Bridge is introduced and installed in the HCL Digital Experience software. Customers installing HCL Digital Experience 8.5, 9.0, or 9.5 non-container CF18 or Container Update release CF18, and using an IBM WebSphere Application Server Network Deployment version later than 8.5.5.17 or 9.0.5.2 can utilize the new JSF Portlet Bridge. See JavaServer Faces implementation for more information.","title":"JavaServer Faces (JSF) Bridge"},{"location":"overview/new_noncf18/#apply-content-template-rest-api","text":"The Apply Content Template API allows a developer to apply a content template to a set of specific content items or all content items of a certain template. It is equivalent to the functionality in the user interface. See How to set default content values for content templates by using REST for details.","title":"Apply Content Template REST API"},{"location":"overview/new_noncf18/#enhanced-content-template-api","text":"The Enhanced Web Content Manager Content Template API adds the ability to retrieve the configuration details of content template elements. See How to retrieve the settings of the elements for content templates by using REST for details.","title":"Enhanced Content Template API"},{"location":"overview/new_noncf18/#rich-text-editor-textbox-io-updates","text":"Updates are provided for the Textbox I/O Rich Text Editor, requiring use of Java 8. See Rich text editor toolbar configuration options for details.","title":"Rich Text Editor Textbox I/O Updates"},{"location":"overview/new_noncf18/#sample-guidance-to-set-storage-class-and-volume-to-deploy-hcl-digital-experience-95-containers-to-amazon-elastic-kubernetes-service-eks-and-red-hat-openshift","text":"Additional guidance for \"Sample Storage Class and Volume\" is available to HCL Digital Experience 9.5 container administrators. See Sample Storage Class and Volume topic for details.","title":"Sample Guidance to set Storage Class and Volume to deploy HCL Digital Experience 9.5 Containers to Amazon Elastic Kubernetes Service (EKS) and Red Hat OpenShift"},{"location":"overview/new_noncf18/#hcl-content-composer-tech-preview-for-hcl-digital-experience-95-cf173-or-higher-release","text":"Content Composer delivers simplified processes for creating and managing Digital Experience site content. Users can access a Tech Preview of the Content Composer features in HCL Digital Experience 9.5 Container Update CF173 and higher releases. See HCL Digital Experience 9.5 Content Composer \u2013 Tech Preview for details.","title":"HCL Content Composer \u2013 Tech Preview for HCL Digital Experience 9.5 CF173 or higher release"},{"location":"overview/new_noncf18/#digital-asset-management-tech-preview-for-hcl-digital-experience-95-cf173-or-higher-release","text":"Digital Asset Management (DAM) delivers a central platform to store and include rich media assets in Digital Experience site content to present engaging, consistently branded experiences across digital channels. Users can access a Tech Preview of the Digital Asset Management features in HCL Digital Experience 9.5 Container Update CF173 and higher releases. See HCL Digital Experience 9.5 Digital Asset Management \u2013 Tech Preview for details.","title":"Digital Asset Management \u2013 Tech Preview for HCL Digital Experience 9.5 CF173 or higher release"},{"location":"overview/new_noncf18/#updated-hcl-digital-experience-95-platform-support-statements","text":"See the updates to the HCL Digital Experience 9.5 detailed system support statements published to the HCL Digital Experience Support site. Parent topic: Latest Combined CF and 9.5 Container Updates","title":"Updated HCL Digital Experience 9.5 platform support statements"},{"location":"overview/new_noncf19/","text":"What's new in CF19? Combined Cumulative Fix (CF19) includes new features and software fixes for the latest version of HCL Digital Experience. This HCL Digital Experience 9.5 CF19 release includes new WCM REST APIs, Web Developer Toolkit, updated releases of Content Composer, Digital Asset Management and Experience API, Hybrid deployment support, Progressive Web Application delivery, Google Analytics integration, Mobile Preview, DXClient and DXConnect tooling supporting CICD release processes, new HCL Digital Experience \u2018How To\u2019 videos and more. Go to the HCL Software Support Site for the list of software fixes. Product software can be accessed from the HCL Software Licensing Portal . Go to this Step-by-step guide to downloading DX products and accessing Customer Support for more information. Web Developer Toolkit The Web Developer toolkit for HCL Digital Experience provides the ability to sync themes, content and script portlets (also known as Script Applications). It is available on the HCL Digital Experience Github repository. See Web Developer Toolkit for details. Hybrid Deployment The HCL Digital Experience 9.5 Hybrid deployment and topics deliver capability to deploy and manage HCL Digital Experience 9.5 core Portal Server and Web Content Manager services on premises, and connect to cloud native components Digital Asset Management, Content Composer, Experience API and related services in a production environment. See the Hybrid Deployment topic for more information. Progressive Web Application support Develop support that adds native mobile application experience and performance to your web site using browser-based functionality. See the Progressive Web Application topic for more information. Google Analytics integration Learn how to set up integration of Digital Experience sites with Google Analytics and view the resulting web analytics tracking to assess the effectiveness of your DX site pages with end user audiences. See the Integrate Google Analytics with HCL Digital Experience topic for more information. Mobile Preview Use the Mobile Preview simulator to view the presentation of Digital Experience site page components on select mobile devices. See the Mobile Preview topic for more information. DXClient and DXConnect tooling supporting CICD release processes HCL Digital Experience CF19 and higher includes a DXClient toolset, and DX Connect servlet that provides developers and administrators with an approach to deploy changes or improvements to the HCL Digital Experience platform,and automate processes in the development and delivery process. See the DXClient and DXConnect tooling supporting CICD release processes topic for more information. New Digital Experience REST APIs New HCL DX APIs are available with the HCL DX CF19 release: Web content image renditions interactions REST API Web Content Library Locale Query Workflow Comments API Using XML Access to export and import Digital Asset Management assets Web Content Manager Syndication REST APIs Process Now and Remove Workflow REST APIs Web Content Manager References REST API Web Content Text Search REST API Digital Experience Core Configuration REST API Web Content Manager Lock/Unlock API Create or update an Option Selection Element Search Component Results Display New HCL Digital Experience \u2018How To\u2019 Videos Take advantage of new step by step guidance for HCL Digital Experience practitioners presented in several new videos. See the following HCL Digital Experience Help Center topics: Remote Search Service Transfer HCL Digital Experience 9.5 Container default database to IBM DB2 Create a web content library Virtual portals Backup and restore Configuration Wizard Combined Cumulative Fix Install Rich text editor toolbar configuration options Data collection and symptom analysis HCL Digital Experience Combined Cumulative Fix (CF) Installation How to manage syndicators and subscribers Deploy HCL Digital Experience 9.5 to Red Hat OpenShift Deploy Digital Asset Management, Content Composer and Experience API to Red Hat OpenShift Configure the OpenLDAP container image to the HCL DX 9.5 Container Deployment Parent topic: Latest Combined CF and 9.5 Container Updates","title":"What's new in CF19?"},{"location":"overview/new_noncf19/#whats-new-in-cf19","text":"Combined Cumulative Fix (CF19) includes new features and software fixes for the latest version of HCL Digital Experience. This HCL Digital Experience 9.5 CF19 release includes new WCM REST APIs, Web Developer Toolkit, updated releases of Content Composer, Digital Asset Management and Experience API, Hybrid deployment support, Progressive Web Application delivery, Google Analytics integration, Mobile Preview, DXClient and DXConnect tooling supporting CICD release processes, new HCL Digital Experience \u2018How To\u2019 videos and more. Go to the HCL Software Support Site for the list of software fixes. Product software can be accessed from the HCL Software Licensing Portal . Go to this Step-by-step guide to downloading DX products and accessing Customer Support for more information.","title":"What's new in CF19?"},{"location":"overview/new_noncf19/#web-developer-toolkit","text":"The Web Developer toolkit for HCL Digital Experience provides the ability to sync themes, content and script portlets (also known as Script Applications). It is available on the HCL Digital Experience Github repository. See Web Developer Toolkit for details.","title":"Web Developer Toolkit"},{"location":"overview/new_noncf19/#hybrid-deployment","text":"The HCL Digital Experience 9.5 Hybrid deployment and topics deliver capability to deploy and manage HCL Digital Experience 9.5 core Portal Server and Web Content Manager services on premises, and connect to cloud native components Digital Asset Management, Content Composer, Experience API and related services in a production environment. See the Hybrid Deployment topic for more information.","title":"Hybrid Deployment"},{"location":"overview/new_noncf19/#progressive-web-application-support","text":"Develop support that adds native mobile application experience and performance to your web site using browser-based functionality. See the Progressive Web Application topic for more information.","title":"Progressive Web Application support"},{"location":"overview/new_noncf19/#google-analytics-integration","text":"Learn how to set up integration of Digital Experience sites with Google Analytics and view the resulting web analytics tracking to assess the effectiveness of your DX site pages with end user audiences. See the Integrate Google Analytics with HCL Digital Experience topic for more information.","title":"Google Analytics integration"},{"location":"overview/new_noncf19/#mobile-preview","text":"Use the Mobile Preview simulator to view the presentation of Digital Experience site page components on select mobile devices. See the Mobile Preview topic for more information.","title":"Mobile Preview"},{"location":"overview/new_noncf19/#dxclient-and-dxconnect-tooling-supporting-cicd-release-processes","text":"HCL Digital Experience CF19 and higher includes a DXClient toolset, and DX Connect servlet that provides developers and administrators with an approach to deploy changes or improvements to the HCL Digital Experience platform,and automate processes in the development and delivery process. See the DXClient and DXConnect tooling supporting CICD release processes topic for more information.","title":"DXClient and DXConnect tooling supporting CICD release processes"},{"location":"overview/new_noncf19/#new-digital-experience-rest-apis","text":"New HCL DX APIs are available with the HCL DX CF19 release: Web content image renditions interactions REST API Web Content Library Locale Query Workflow Comments API Using XML Access to export and import Digital Asset Management assets Web Content Manager Syndication REST APIs Process Now and Remove Workflow REST APIs Web Content Manager References REST API Web Content Text Search REST API Digital Experience Core Configuration REST API Web Content Manager Lock/Unlock API Create or update an Option Selection Element Search Component Results Display","title":"New Digital Experience REST APIs"},{"location":"overview/new_noncf19/#new-hcl-digital-experience-how-to-videos","text":"Take advantage of new step by step guidance for HCL Digital Experience practitioners presented in several new videos. See the following HCL Digital Experience Help Center topics: Remote Search Service Transfer HCL Digital Experience 9.5 Container default database to IBM DB2 Create a web content library Virtual portals Backup and restore Configuration Wizard Combined Cumulative Fix Install Rich text editor toolbar configuration options Data collection and symptom analysis HCL Digital Experience Combined Cumulative Fix (CF) Installation How to manage syndicators and subscribers Deploy HCL Digital Experience 9.5 to Red Hat OpenShift Deploy Digital Asset Management, Content Composer and Experience API to Red Hat OpenShift Configure the OpenLDAP container image to the HCL DX 9.5 Container Deployment Parent topic: Latest Combined CF and 9.5 Container Updates","title":"New HCL Digital Experience \u2018How To\u2019 Videos"},{"location":"overview/new_noncf196/","text":"What's new in CF196? Combined Cumulative Fix (CF196) includes new features and software fixes for the latest version of HCL Digital Experience. Beginning with CF19 and Container Update release CF196, release updates for both on\u2013premises platforms and container deployments will be available. This HCL Digital Experience 9.5 CF196 release includes updated releases of HCL DX core Portal and Web Content Manager, Content Composer, Digital Asset Management and Experience API, Design Studio (Beta) for Container deployments, Theme Editor Portlet, Content Security Policy support, DXClient and DXConnect tooling supporting CICD release processes, Multilingual enhancements, HCL Unica Discover enablement, new HCL Digital Experience \u2018How To\u2019 videos and more. Go to the HCL Software Support Site for the list of software fixes. Product software can be accessed from the HCL Software Licensing Portal . Go to this Step-by-step guide to downloading DX products and accessing Customer Support for more information. Note: For new capabilities that are available for HCL DX 9.5 CF196 Container Update deployments, see What's new in the CF196 Container Update release topic. Theme Editor Portlet The Theme Editor portlet is a new addition to HCL Digital Experience CF196 and higher release capabilities. The portlet allows an administrator to edit static theme resources in WebDAV without the use of a WebDAV client or tool. See the Theme Editor Portlet topic for more information. Web Content Manager Multilingual Solution Enhancements The HCL Web Content Manager Multilingual Solution is a set of tools used to manage translated versions Web Content Manager content for localized and regionalized websites. Beginning with the HCL Digital Experience 9.5 CF196 release, a new export and import capability allows you to support translation of the content of a library by exporting it into a format supported by a translation service and importing the translated content back into the content library using the DXClient tool. Support is also added to define a maximum field length, export changed contents from a library, and export to projects. A new option to switch the language in an HCL DX 9.5 Mobile view is also available. See the How to export and import WCM library content using DXClient and The Woodburn Studio demo site Help Center topics for more information. Enable Presentation of Locales in Friendly URLs Beginning with the HCL Digital Experience 9.5 Container Update CF196 release, enablement is provided to present friendly URLs with locale specific definitions when multi-lingual page versions are requested. This enablement can also improve SEO results when users search for language-specific DX page topics. See the Enabling presentation of locales in friendly URLs topic for more information. Change language presented in the HCL Digital Experience Theme Beginning with HCL DX CF196 release, you can switch the language presented in your Digital Experience theme. An example is provided in the Woodburn Studio demo site supporting presentations for French, Spanish, and English languages. See the How to switch the languages in the Digital Experience theme topic for more information. New HCL Digital Experience 9.5 Release Artifacts supporting CICD release processes The HCL Digital Experience 9.5 DXClient and DXConnect servlet provides developers and administrators an approach to deploy changes or improvements to the HCL Digital Experience platform, and to automate processes in the development and delivery process. Updates include a new DXClient Docker image, and new release artifact types supporting Shared Libraries, Obtain failed Syndication reports, Undeploy Themes, and Export/Import Web Content Manager Library, Deploy DX Core, Manage Syndicator, and Manage Subscriber tasks are provided in CF196. See the DXClient and DXConnect tooling supporting CICD release processes topic for more information. Web Content Manager Advanced Cache Options New options are available to flush the Web Content Manager Advanced cache, as a result of syndication operations, to help improve performance and reliability. See the Web Content Manager Cache Parameters topic for more information. Content Security Policy The Content-Security-Policy header is used by modern browsers to enhance the security of HCL Digital Experience site documents or web pages by allowing HCL Digital Experience administrators or developers declare which dynamic resources are allowed to load. With HCL Digital Experience Container Update CF192 and later releases, developers can apply platform support and guidance to update their DX sites to validate trusted sources before rendering pages to end users. See the Content Security Policy Help Center topic for more information. Enhanced Cross Origin Resource Sharing Configuration Enhanced Cross Origin Resource Sharing Configuration adds new options for HCL Digital Experience administrators to set configuration for CORS using a WP configuration service in the IBM WebSphere Application Server resource environment provider. See Enhanced Cross Origin Resource Sharing Configuration for more information. HCL Digital Experience 9.5 Integration with HCL Unica Discover Integration of HCL Digital Experience 9.5 sites with HCL Unica Discover enables DX site managers and marketers to access deep insight analytics and session replay services to assess the effectiveness of DX site pages with end user audiences. See the Integrate HCL Unica Discover with HCL Digital Experience topic for more information. Deploy HCL DX 9.5 using Docker Compose Beginning with HCL DX 9.5 CF196, administrators and developers can deploy HCL DX 9.5 using Docker Compose, for non-production use. Docker Compose scripts for HCL DX 9.5, installation and configuration instructions for non-production use are available in the HCL Software Github . See the Docker image deployment using Docker Compose topic for more information. Deploy HCL Digital Experience 9.5 on HCL Solution Factory (SoFy) The HCL Solution Factory (SoFy) platform offers the ability for organizations to quickly prototype and test assets and can enable organizations to speed cloud-native adoption. Visit HCL SoFy to access HCL Digital Experience 9.5 and other HCL software offerings to quickly assess and test cloud-native strategies, gain hands-on experience working with demonstration assets, to see what best fits adoption plans. View this online tutorial: Deploy HCL Digital Experience in Minutes with HCL SoFy HCL Digital Experience 9.5 Integration with HCL Commerce HCL Commerce integration with HCL Digital Experience allows content and digital assets managed within HCL Digital Experience to be utilized in any Commerce store. Visit the HCL Commerce - Digital Experience integration resource for more information and pre-requisites. New Digital Experience REST APIs New HCL DX APIs are available with the HCL DX CF196 release: Web Content Manager Multilingual Solution APIs Web Content Manager Comments API Web Content Manager Find Rendering and Script Portlet References Web Content Manager Access Control Filter REST API Clear Theme Cache API Work with Deleted Web Content Items New HCL Digital Experience \u2018How To\u2019 Videos Take advantage of new step-by-step guidance for HCL Digital Experience practitioners presented in videos in following HCL Digital Experience Help Center topics: Configuring user access permissions to Digital Asset Management assets Deep Dive: Progressive Web Applications with HCL DX 9.5 Content Security Policy with HCL Digital 9.5 Getting Started with DXClient on Red Hat OpenShift using HCL Digital Experience CF194 Understanding the Core Persistent Volumes in HCL Digital Experience Container Update CF194 Create a WebDAV Theme copy using HCL Digital Experience 9.5 Create and apply A/B personalized scenarios with HCL Digital Experience Deploy HCL Digital Experience in Minutes using HCL Solution Factory Using the dxctl tool to Update Digital Experience 9.5 on Red Hat OpenShift How to Upload HCL Digital Experience 9.5 CF Container Images to a Private Repository HCL Digital Experience 9.5 Container Deployment Using the dxctl tool to deploy Digital Experience 9.5 on Red Hat OpenShift Create a WAR-based theme copy on HCL Digital Experience 9.5 Parent topic: Latest Combined CF and 9.5 Container Updates","title":"What's new in CF196?"},{"location":"overview/new_noncf196/#whats-new-in-cf196","text":"Combined Cumulative Fix (CF196) includes new features and software fixes for the latest version of HCL Digital Experience. Beginning with CF19 and Container Update release CF196, release updates for both on\u2013premises platforms and container deployments will be available. This HCL Digital Experience 9.5 CF196 release includes updated releases of HCL DX core Portal and Web Content Manager, Content Composer, Digital Asset Management and Experience API, Design Studio (Beta) for Container deployments, Theme Editor Portlet, Content Security Policy support, DXClient and DXConnect tooling supporting CICD release processes, Multilingual enhancements, HCL Unica Discover enablement, new HCL Digital Experience \u2018How To\u2019 videos and more. Go to the HCL Software Support Site for the list of software fixes. Product software can be accessed from the HCL Software Licensing Portal . Go to this Step-by-step guide to downloading DX products and accessing Customer Support for more information. Note: For new capabilities that are available for HCL DX 9.5 CF196 Container Update deployments, see What's new in the CF196 Container Update release topic.","title":"What's new in CF196?"},{"location":"overview/new_noncf196/#theme-editor-portlet","text":"The Theme Editor portlet is a new addition to HCL Digital Experience CF196 and higher release capabilities. The portlet allows an administrator to edit static theme resources in WebDAV without the use of a WebDAV client or tool. See the Theme Editor Portlet topic for more information.","title":"Theme Editor Portlet"},{"location":"overview/new_noncf196/#web-content-manager-multilingual-solution-enhancements","text":"The HCL Web Content Manager Multilingual Solution is a set of tools used to manage translated versions Web Content Manager content for localized and regionalized websites. Beginning with the HCL Digital Experience 9.5 CF196 release, a new export and import capability allows you to support translation of the content of a library by exporting it into a format supported by a translation service and importing the translated content back into the content library using the DXClient tool. Support is also added to define a maximum field length, export changed contents from a library, and export to projects. A new option to switch the language in an HCL DX 9.5 Mobile view is also available. See the How to export and import WCM library content using DXClient and The Woodburn Studio demo site Help Center topics for more information.","title":"Web Content Manager Multilingual Solution Enhancements"},{"location":"overview/new_noncf196/#enable-presentation-of-locales-in-friendly-urls","text":"Beginning with the HCL Digital Experience 9.5 Container Update CF196 release, enablement is provided to present friendly URLs with locale specific definitions when multi-lingual page versions are requested. This enablement can also improve SEO results when users search for language-specific DX page topics. See the Enabling presentation of locales in friendly URLs topic for more information.","title":"Enable Presentation of Locales in Friendly URLs"},{"location":"overview/new_noncf196/#change-language-presented-in-the-hcl-digital-experience-theme","text":"Beginning with HCL DX CF196 release, you can switch the language presented in your Digital Experience theme. An example is provided in the Woodburn Studio demo site supporting presentations for French, Spanish, and English languages. See the How to switch the languages in the Digital Experience theme topic for more information.","title":"Change language presented in the HCL Digital Experience Theme"},{"location":"overview/new_noncf196/#new-hcl-digital-experience-95-release-artifacts-supporting-cicd-release-processes","text":"The HCL Digital Experience 9.5 DXClient and DXConnect servlet provides developers and administrators an approach to deploy changes or improvements to the HCL Digital Experience platform, and to automate processes in the development and delivery process. Updates include a new DXClient Docker image, and new release artifact types supporting Shared Libraries, Obtain failed Syndication reports, Undeploy Themes, and Export/Import Web Content Manager Library, Deploy DX Core, Manage Syndicator, and Manage Subscriber tasks are provided in CF196. See the DXClient and DXConnect tooling supporting CICD release processes topic for more information.","title":"New HCL Digital Experience 9.5 Release Artifacts supporting CICD release processes"},{"location":"overview/new_noncf196/#web-content-manager-advanced-cache-options","text":"New options are available to flush the Web Content Manager Advanced cache, as a result of syndication operations, to help improve performance and reliability. See the Web Content Manager Cache Parameters topic for more information.","title":"Web Content Manager Advanced Cache Options"},{"location":"overview/new_noncf196/#content-security-policy","text":"The Content-Security-Policy header is used by modern browsers to enhance the security of HCL Digital Experience site documents or web pages by allowing HCL Digital Experience administrators or developers declare which dynamic resources are allowed to load. With HCL Digital Experience Container Update CF192 and later releases, developers can apply platform support and guidance to update their DX sites to validate trusted sources before rendering pages to end users. See the Content Security Policy Help Center topic for more information.","title":"Content Security Policy"},{"location":"overview/new_noncf196/#enhanced-cross-origin-resource-sharing-configuration","text":"Enhanced Cross Origin Resource Sharing Configuration adds new options for HCL Digital Experience administrators to set configuration for CORS using a WP configuration service in the IBM WebSphere Application Server resource environment provider. See Enhanced Cross Origin Resource Sharing Configuration for more information.","title":"Enhanced Cross Origin Resource Sharing Configuration"},{"location":"overview/new_noncf196/#hcl-digital-experience-95-integration-with-hcl-unica-discover","text":"Integration of HCL Digital Experience 9.5 sites with HCL Unica Discover enables DX site managers and marketers to access deep insight analytics and session replay services to assess the effectiveness of DX site pages with end user audiences. See the Integrate HCL Unica Discover with HCL Digital Experience topic for more information.","title":"HCL Digital Experience 9.5 Integration with HCL Unica Discover"},{"location":"overview/new_noncf196/#deploy-hcl-dx-95-using-docker-compose","text":"Beginning with HCL DX 9.5 CF196, administrators and developers can deploy HCL DX 9.5 using Docker Compose, for non-production use. Docker Compose scripts for HCL DX 9.5, installation and configuration instructions for non-production use are available in the HCL Software Github . See the Docker image deployment using Docker Compose topic for more information.","title":"Deploy HCL DX 9.5 using Docker Compose"},{"location":"overview/new_noncf196/#deploy-hcl-digital-experience-95-on-hcl-solution-factory-sofy","text":"The HCL Solution Factory (SoFy) platform offers the ability for organizations to quickly prototype and test assets and can enable organizations to speed cloud-native adoption. Visit HCL SoFy to access HCL Digital Experience 9.5 and other HCL software offerings to quickly assess and test cloud-native strategies, gain hands-on experience working with demonstration assets, to see what best fits adoption plans. View this online tutorial: Deploy HCL Digital Experience in Minutes with HCL SoFy","title":"Deploy HCL Digital Experience 9.5 on HCL Solution Factory (SoFy)"},{"location":"overview/new_noncf196/#hcl-digital-experience-95-integration-with-hcl-commerce","text":"HCL Commerce integration with HCL Digital Experience allows content and digital assets managed within HCL Digital Experience to be utilized in any Commerce store. Visit the HCL Commerce - Digital Experience integration resource for more information and pre-requisites.","title":"HCL Digital Experience 9.5 Integration with HCL Commerce"},{"location":"overview/new_noncf196/#new-digital-experience-rest-apis","text":"New HCL DX APIs are available with the HCL DX CF196 release: Web Content Manager Multilingual Solution APIs Web Content Manager Comments API Web Content Manager Find Rendering and Script Portlet References Web Content Manager Access Control Filter REST API Clear Theme Cache API Work with Deleted Web Content Items","title":"New Digital Experience REST APIs"},{"location":"overview/new_noncf196/#new-hcl-digital-experience-how-to-videos","text":"Take advantage of new step-by-step guidance for HCL Digital Experience practitioners presented in videos in following HCL Digital Experience Help Center topics: Configuring user access permissions to Digital Asset Management assets Deep Dive: Progressive Web Applications with HCL DX 9.5 Content Security Policy with HCL Digital 9.5 Getting Started with DXClient on Red Hat OpenShift using HCL Digital Experience CF194 Understanding the Core Persistent Volumes in HCL Digital Experience Container Update CF194 Create a WebDAV Theme copy using HCL Digital Experience 9.5 Create and apply A/B personalized scenarios with HCL Digital Experience Deploy HCL Digital Experience in Minutes using HCL Solution Factory Using the dxctl tool to Update Digital Experience 9.5 on Red Hat OpenShift How to Upload HCL Digital Experience 9.5 CF Container Images to a Private Repository HCL Digital Experience 9.5 Container Deployment Using the dxctl tool to deploy Digital Experience 9.5 on Red Hat OpenShift Create a WAR-based theme copy on HCL Digital Experience 9.5 Parent topic: Latest Combined CF and 9.5 Container Updates","title":"New HCL Digital Experience \u2018How To\u2019 Videos"},{"location":"overview/new_noncf197/","text":"What's new in CF197? Combined Cumulative Fix (CF197) includes new features and software fixes for the latest version of HCL Digital Experience. Release updates for both on \u2013 premises platforms and container deployments are available. This HCL Digital Experience 9.5 Container Update and CF197 release includes updated releases of HCL DX core Portal and Web Content Manager, Content Composer, Digital Asset Management and Experience API, Design Studio (Beta) for Container deployments, New CICD release process artifacts, new HCL Digital Experience \u2018How To\u2019 videos and more. Go to the HCL Software Support Site for the latest list of software fixes. Product software can be accessed from the HCL Software Licensing Portal . Go to this Step-by-step guide to downloading DX products and accessing Customer Support for more information. New HCL Digital Experience 9.5 Release Artifacts supporting CICD release processes The HCL Digital Experience 9.5 DXClient and DXConnect servlet provides developers and administrators an approach to deploy changes or improvements to the HCL Digital Experience platform, and to automate processes in the development and delivery process. Updates include new release artifact types supporting Obtain failed Syndication reports for single or multiple items, and delete Digital Asset Management inactive schema from Persistence are provided in CF197. See the DXClient and DXConnect tooling supporting CICD release processes topic for more information. New HCL Digital Experience \u2018How To\u2019 Videos Take advantage of new step-by-step guidance for HCL Digital Experience practitioners presented in videos in following HCL Digital Experience Help Center topics: Updating the HCL DX 9.5 Portal & IBM WebSphere Application Server Administrator Secrets in OpenShift and Kubernetes Use Docker Compose to install HCL DX 9.5 with Cloud Components for Developer Use Parent topic: Latest Combined CF and 9.5 Container Updates","title":"What's new in CF197?"},{"location":"overview/new_noncf197/#whats-new-in-cf197","text":"Combined Cumulative Fix (CF197) includes new features and software fixes for the latest version of HCL Digital Experience. Release updates for both on \u2013 premises platforms and container deployments are available. This HCL Digital Experience 9.5 Container Update and CF197 release includes updated releases of HCL DX core Portal and Web Content Manager, Content Composer, Digital Asset Management and Experience API, Design Studio (Beta) for Container deployments, New CICD release process artifacts, new HCL Digital Experience \u2018How To\u2019 videos and more. Go to the HCL Software Support Site for the latest list of software fixes. Product software can be accessed from the HCL Software Licensing Portal . Go to this Step-by-step guide to downloading DX products and accessing Customer Support for more information.","title":"What's new in CF197?"},{"location":"overview/new_noncf197/#new-hcl-digital-experience-95-release-artifacts-supporting-cicd-release-processes","text":"The HCL Digital Experience 9.5 DXClient and DXConnect servlet provides developers and administrators an approach to deploy changes or improvements to the HCL Digital Experience platform, and to automate processes in the development and delivery process. Updates include new release artifact types supporting Obtain failed Syndication reports for single or multiple items, and delete Digital Asset Management inactive schema from Persistence are provided in CF197. See the DXClient and DXConnect tooling supporting CICD release processes topic for more information.","title":"New HCL Digital Experience 9.5 Release Artifacts supporting CICD release processes"},{"location":"overview/new_noncf197/#new-hcl-digital-experience-how-to-videos","text":"Take advantage of new step-by-step guidance for HCL Digital Experience practitioners presented in videos in following HCL Digital Experience Help Center topics: Updating the HCL DX 9.5 Portal & IBM WebSphere Application Server Administrator Secrets in OpenShift and Kubernetes Use Docker Compose to install HCL DX 9.5 with Cloud Components for Developer Use Parent topic: Latest Combined CF and 9.5 Container Updates","title":"New HCL Digital Experience \u2018How To\u2019 Videos"},{"location":"overview/new_noncf198/","text":"What's new in CF198? Combined Cumulative Fix (CF198) includes new features and software fixes for the latest version of HCL Digital Experience. Release updates for both on-premises platforms and container deployments are available. This HCL Digital Experience 9.5 Container Update and CF198 release includes updated releases of HCL DX core Portal and Web Content Manager, Content Composer, Digital Asset Management, Experience API, Design Studio (Beta), new Helm deployment operations for container deployments, updated CICD release process artifacts, the new Site Manager Custom Layout Editor, HCL Digital Experience Technical Articles, \u2018How To\u2019 videos, and more. Go to the HCL Software Support Site for the latest list of software fixes. Product software can be accessed from the HCL Software Licensing Portal . Go to this Step-by-step guide to downloading DX products and accessing Customer Support for more information. New HCL Digital Experience 9.5 Release Artifacts supporting CICD release processes The HCL Digital Experience 9.5 DXClient and DXConnect servlet provides developers and administrators an approach to deploy changes or improvements to the HCL Digital Experience platform, and to automate processes in the development and delivery process. Updates include process definitions to automate select IBM WebSphere Application Server settings during deployment, generate import and export lists of virtual portals, and import and export personalization rules. See the DXClient and DXConnect tooling supporting CICD release processes topic for more information. New HCL Digital Experience Site Manager Custom Layout Editor Beginning with HCL Digital Experience CF198, a Custom Layout Editor is available for use with HCL DX Site Manager capabilities, reducing custom development requirements for site designers implementing custom layouts in DX site pages. See the Using the Digital Experience Custom Layout Editor topic for more information. New Experience APIs New HCL Experience Web Content Manager REST APIs are available for new menu component update, collection responses conversion utilities, the ability to use the page editor to edit elements inline and update metadata, set locations for sites, set HTML tags for text elements, and more. See the HCL DX Experience API topic for more information Rationalized CF release versioning Beginning with HCL Digital Experience CF196, single versioning is used for both container and on-premise Combined Cumulative Fixes (CFs). This means that fixes for both deployments are included into one CF deliverable. And although the versioning is the same, CFs are packaged separately for on-premises and container deployments. See the CF release versioning and update path topic for more information. New HCL Digital Experience \u2018How To\u2019 Videos Take advantage of new step-by-step guidance for HCL Digital Experience practitioners presented in articles and videos from the following HCL Digital Experience Help Center topics: Video: Creating an HCL Digital Experience 9.5 CF196 cluster Step-by-step guide: How to deploy HCL DX Container update CF197 and later to Microsoft Azure Kubernetes Service Parent topic: Latest Combined CF and 9.5 Container Updates","title":"What's new in CF198?"},{"location":"overview/new_noncf198/#whats-new-in-cf198","text":"Combined Cumulative Fix (CF198) includes new features and software fixes for the latest version of HCL Digital Experience. Release updates for both on-premises platforms and container deployments are available. This HCL Digital Experience 9.5 Container Update and CF198 release includes updated releases of HCL DX core Portal and Web Content Manager, Content Composer, Digital Asset Management, Experience API, Design Studio (Beta), new Helm deployment operations for container deployments, updated CICD release process artifacts, the new Site Manager Custom Layout Editor, HCL Digital Experience Technical Articles, \u2018How To\u2019 videos, and more. Go to the HCL Software Support Site for the latest list of software fixes. Product software can be accessed from the HCL Software Licensing Portal . Go to this Step-by-step guide to downloading DX products and accessing Customer Support for more information.","title":"What's new in CF198?"},{"location":"overview/new_noncf198/#new-hcl-digital-experience-95-release-artifacts-supporting-cicd-release-processes","text":"The HCL Digital Experience 9.5 DXClient and DXConnect servlet provides developers and administrators an approach to deploy changes or improvements to the HCL Digital Experience platform, and to automate processes in the development and delivery process. Updates include process definitions to automate select IBM WebSphere Application Server settings during deployment, generate import and export lists of virtual portals, and import and export personalization rules. See the DXClient and DXConnect tooling supporting CICD release processes topic for more information.","title":"New HCL Digital Experience 9.5 Release Artifacts supporting CICD release processes"},{"location":"overview/new_noncf198/#new-hcl-digital-experience-site-manager-custom-layout-editor","text":"Beginning with HCL Digital Experience CF198, a Custom Layout Editor is available for use with HCL DX Site Manager capabilities, reducing custom development requirements for site designers implementing custom layouts in DX site pages. See the Using the Digital Experience Custom Layout Editor topic for more information.","title":"New HCL Digital Experience Site Manager Custom Layout Editor"},{"location":"overview/new_noncf198/#new-experience-apis","text":"New HCL Experience Web Content Manager REST APIs are available for new menu component update, collection responses conversion utilities, the ability to use the page editor to edit elements inline and update metadata, set locations for sites, set HTML tags for text elements, and more. See the HCL DX Experience API topic for more information","title":"New Experience APIs"},{"location":"overview/new_noncf198/#rationalized-cf-release-versioning","text":"Beginning with HCL Digital Experience CF196, single versioning is used for both container and on-premise Combined Cumulative Fixes (CFs). This means that fixes for both deployments are included into one CF deliverable. And although the versioning is the same, CFs are packaged separately for on-premises and container deployments. See the CF release versioning and update path topic for more information.","title":"Rationalized CF release versioning"},{"location":"overview/new_noncf198/#new-hcl-digital-experience-how-to-videos","text":"Take advantage of new step-by-step guidance for HCL Digital Experience practitioners presented in articles and videos from the following HCL Digital Experience Help Center topics: Video: Creating an HCL Digital Experience 9.5 CF196 cluster Step-by-step guide: How to deploy HCL DX Container update CF197 and later to Microsoft Azure Kubernetes Service Parent topic: Latest Combined CF and 9.5 Container Updates","title":"New HCL Digital Experience \u2018How To\u2019 Videos"},{"location":"overview/new_noncf199/","text":"What's new in CF199? Combined Cumulative Fix (CF199) includes new features and software fixes for the latest version of HCL Digital Experience. Release updates for both on-premises platforms and container deployments are available. This HCL Digital Experience 9.5 Container Update and CF199 release includes updated releases of HCL DX core Portal and Web Content Manager, Content Composer, Digital Asset Management, Experience API, Design Studio (Beta), new Helm deployment operations for container deployments, updated CICD release process artifacts, new \u201cHow To\u201d videos, and more. Go to the HCL Software Support Site for the latest list of software fixes. Product software can be accessed from the HCL Software Licensing Portal . Go to this Step-by-step guide to downloading DX products and accessing Customer Support for more information. New HCL Digital Experience 9.5 Release Artifacts supporting CICD release processes The HCL Digital Experience 9.5 DXClient and DXConnect servlet provides developers and administrators an approach to deploy changes or improvements to the HCL Digital Experience platform, and to automate processes in the development and delivery process. Updates include process definitions to automate Export and Import of select IBM WebSphere Application Server Resource Provider settings during deployment, and to create Syndication relationships and credential vault settings. See the DXClient and DXConnect tooling supporting CICD release processes topic for more information. End of Support for HCL Digital Experience Deprecated Features The following list of HCL Digital Experience deprecated features will reach end of support beginning with Container update and CF200 release. Refer to the Deprecated features and themes for HCL Digital Experience 9.5 topic in the Help Center. New Experience API V2 Web Content Manager REST APIs video See the HCL Experience API topic for the video. New Experience APIs New HCL Experience APIs are available for creating, updating and deleting Design Studio (Beta) sites, pages, and containers. New Web Content Manager REST V2 APIs are available for creating content templates, categories, and more. See the HCL Experience API topic for more information. New REST APIs to Configure Remote Search Beginning with HCL Digital Experience CF and Container Update CF199, additional REST services enable administrators and developers to programatically configure remote search in on-premises and container-based Digital Experience deployments. See the Configure Remote Search using REST APIs topic for more information. Parent topic: Latest Combined CF and 9.5 Container Updates","title":"What's new in CF199?"},{"location":"overview/new_noncf199/#whats-new-in-cf199","text":"Combined Cumulative Fix (CF199) includes new features and software fixes for the latest version of HCL Digital Experience. Release updates for both on-premises platforms and container deployments are available. This HCL Digital Experience 9.5 Container Update and CF199 release includes updated releases of HCL DX core Portal and Web Content Manager, Content Composer, Digital Asset Management, Experience API, Design Studio (Beta), new Helm deployment operations for container deployments, updated CICD release process artifacts, new \u201cHow To\u201d videos, and more. Go to the HCL Software Support Site for the latest list of software fixes. Product software can be accessed from the HCL Software Licensing Portal . Go to this Step-by-step guide to downloading DX products and accessing Customer Support for more information.","title":"What's new in CF199?"},{"location":"overview/new_noncf199/#new-hcl-digital-experience-95-release-artifacts-supporting-cicd-release-processes","text":"The HCL Digital Experience 9.5 DXClient and DXConnect servlet provides developers and administrators an approach to deploy changes or improvements to the HCL Digital Experience platform, and to automate processes in the development and delivery process. Updates include process definitions to automate Export and Import of select IBM WebSphere Application Server Resource Provider settings during deployment, and to create Syndication relationships and credential vault settings. See the DXClient and DXConnect tooling supporting CICD release processes topic for more information.","title":"New HCL Digital Experience 9.5 Release Artifacts supporting CICD release processes"},{"location":"overview/new_noncf199/#end-of-support-for-hcl-digital-experience-deprecated-features","text":"The following list of HCL Digital Experience deprecated features will reach end of support beginning with Container update and CF200 release. Refer to the Deprecated features and themes for HCL Digital Experience 9.5 topic in the Help Center.","title":"End of Support for HCL Digital Experience Deprecated Features"},{"location":"overview/new_noncf199/#new-experience-api-v2-web-content-manager-rest-apis-video","text":"See the HCL Experience API topic for the video.","title":"New Experience API V2 Web Content Manager REST APIs video"},{"location":"overview/new_noncf199/#new-experience-apis","text":"New HCL Experience APIs are available for creating, updating and deleting Design Studio (Beta) sites, pages, and containers. New Web Content Manager REST V2 APIs are available for creating content templates, categories, and more. See the HCL Experience API topic for more information.","title":"New Experience APIs"},{"location":"overview/new_noncf199/#new-rest-apis-to-configure-remote-search","text":"Beginning with HCL Digital Experience CF and Container Update CF199, additional REST services enable administrators and developers to programatically configure remote search in on-premises and container-based Digital Experience deployments. See the Configure Remote Search using REST APIs topic for more information. Parent topic: Latest Combined CF and 9.5 Container Updates","title":"New REST APIs to Configure Remote Search"},{"location":"overview/new_noncf200/","text":"What's new in CF200? Combined Cumulative Fix (CF200) includes new features and software fixes for the latest version of HCL Digital Experience. Release updates for both on-premises platforms and container deployments are available. This HCL Digital Experience 9.5 Container Update and CF200 release includes updated releases of HCL DX core Portal and Web Content Manager, Content Composer, Digital Asset Management, Experience API, Design Studio (Beta), updated CICD release process artifacts, new DX API and Explorer services for Personalization, Search and User and Groups REST APIs, new Digital Experience 9.5 Demo Packs on HCL Sofy, and more. Go to the HCL Software Support Site for the latest list of software fixes. Product software can be accessed from the HCL Software Licensing Portal . Go to this Step-by-step guide to downloading DX products and accessing Customer Support for more information. New HCL Digital Experience 9.5 Release Artifacts supporting CICD release processes The HCL Digital Experience 9.5 DXClient and DXConnect servlet provides developers and administrators an approach to deploy changes or improvements to the HCL Digital Experience platform, and to automate processes in the development and delivery process. Updates include process definitions to automate Export or Import of Web Content Manager libraries from source server to target server location, also ability to generate differential reports for DX Server configurations. See the DXClient and DXConnect tooling supporting CICD release processes topic for more information. End of Support for HCL Digital Experience Deprecated Features The following list of HCL Digital Experience deprecated features will reach end of support beginning with HCL Digital Experience Container update and CF 200. Reference the Help Center topic Deprecated features and themes for HCL Digital Experience 9.5 . New User and Groups REST API Explorer The remote PUMA SPI gives you access to user profiles through REST services. It provides a remote interface for user and group management for the configured HCL DX user repository. Beginning with HCL DX 9.5 Container Update and CF 199, a new API explorer is available that allows developers using the Portal User Interface APIs to explore and test these APIs. See the Help Center topic Remote REST service for PUMA for additional information. New Personalization REST APIs and Explorer Beginning with HCL DX 9.5 Container Update and CF200 , a new API explorer is available that allows developers using the new Digital Experience Personalization REST APIs to explore and test these APIs. See the Digital Experience Personalization Help Center topic for more information. New Search REST APIs Explorer The Digital Experience Search REST API provides developers programmatic access to search indexed Digital Experience content and web pages. Beginning with Container and CF Update CF200, a new Digital Experience Search REST API Explorer allows developers to explore and test the Digital Experience Search REST APIs. See the HCL Digital Experience Search REST API Specification Help Center topic for more information. Access and Deploy HCL Digital Experience 9.5 on HCL Sofy HCL SoFy is a next generation software development platform that accelerates deployment and integration of cloud-native products through the application of cloud-centered technologies and practices. Using HCL SoFy to access and deploy HCL Digital Experience 9.5, and other HCL software offerings and demo packs, you can quickly gain hands-on experience working with these cloud-native solutions. See the Deploying HCL Digital Experience 9.5 with HCL Solution Factory (SoFy) Help Center topic for more information. Parent topic: Latest Combined CF and 9.5 Container Updates","title":"What's new in CF200?"},{"location":"overview/new_noncf200/#whats-new-in-cf200","text":"Combined Cumulative Fix (CF200) includes new features and software fixes for the latest version of HCL Digital Experience. Release updates for both on-premises platforms and container deployments are available. This HCL Digital Experience 9.5 Container Update and CF200 release includes updated releases of HCL DX core Portal and Web Content Manager, Content Composer, Digital Asset Management, Experience API, Design Studio (Beta), updated CICD release process artifacts, new DX API and Explorer services for Personalization, Search and User and Groups REST APIs, new Digital Experience 9.5 Demo Packs on HCL Sofy, and more. Go to the HCL Software Support Site for the latest list of software fixes. Product software can be accessed from the HCL Software Licensing Portal . Go to this Step-by-step guide to downloading DX products and accessing Customer Support for more information.","title":"What's new in CF200?"},{"location":"overview/new_noncf200/#new-hcl-digital-experience-95-release-artifacts-supporting-cicd-release-processes","text":"The HCL Digital Experience 9.5 DXClient and DXConnect servlet provides developers and administrators an approach to deploy changes or improvements to the HCL Digital Experience platform, and to automate processes in the development and delivery process. Updates include process definitions to automate Export or Import of Web Content Manager libraries from source server to target server location, also ability to generate differential reports for DX Server configurations. See the DXClient and DXConnect tooling supporting CICD release processes topic for more information.","title":"New HCL Digital Experience 9.5 Release Artifacts supporting CICD release processes"},{"location":"overview/new_noncf200/#end-of-support-for-hcl-digital-experience-deprecated-features","text":"The following list of HCL Digital Experience deprecated features will reach end of support beginning with HCL Digital Experience Container update and CF 200. Reference the Help Center topic Deprecated features and themes for HCL Digital Experience 9.5 .","title":"End of Support for HCL Digital Experience Deprecated Features"},{"location":"overview/new_noncf200/#new-user-and-groups-rest-api-explorer","text":"The remote PUMA SPI gives you access to user profiles through REST services. It provides a remote interface for user and group management for the configured HCL DX user repository. Beginning with HCL DX 9.5 Container Update and CF 199, a new API explorer is available that allows developers using the Portal User Interface APIs to explore and test these APIs. See the Help Center topic Remote REST service for PUMA for additional information.","title":"New User and Groups REST API Explorer"},{"location":"overview/new_noncf200/#new-personalization-rest-apis-and-explorer","text":"Beginning with HCL DX 9.5 Container Update and CF200 , a new API explorer is available that allows developers using the new Digital Experience Personalization REST APIs to explore and test these APIs. See the Digital Experience Personalization Help Center topic for more information.","title":"New Personalization REST APIs and Explorer"},{"location":"overview/new_noncf200/#new-search-rest-apis-explorer","text":"The Digital Experience Search REST API provides developers programmatic access to search indexed Digital Experience content and web pages. Beginning with Container and CF Update CF200, a new Digital Experience Search REST API Explorer allows developers to explore and test the Digital Experience Search REST APIs. See the HCL Digital Experience Search REST API Specification Help Center topic for more information.","title":"New Search REST APIs Explorer"},{"location":"overview/new_noncf200/#access-and-deploy-hcl-digital-experience-95-on-hcl-sofy","text":"HCL SoFy is a next generation software development platform that accelerates deployment and integration of cloud-native products through the application of cloud-centered technologies and practices. Using HCL SoFy to access and deploy HCL Digital Experience 9.5, and other HCL software offerings and demo packs, you can quickly gain hands-on experience working with these cloud-native solutions. See the Deploying HCL Digital Experience 9.5 with HCL Solution Factory (SoFy) Help Center topic for more information. Parent topic: Latest Combined CF and 9.5 Container Updates","title":"Access and Deploy HCL Digital Experience 9.5 on HCL Sofy"},{"location":"overview/new_noncf201/","text":"What's new in CF201? Combined Cumulative Fix (CF201) includes new features and software fixes for the latest version of HCL Digital Experience. Release updates for both on-premises platforms and container deployments are available. This HCL Digital Experience 9.5 Container Update and CF201 release includes updated releases of HCL DX core Portal and Web Content Manager, Content Composer, Digital Asset Management, Experience API, and Design Studio (Beta) components. The release also includes updated CICD release process artifacts, new DX Personalization REST APIs, Updated Helm deployment and logging capacity, LDAP, and environment configuration guidance, also metrics and visualization samples, Script Application updates, new React profile for the DX 8.5 sample Theme, extensibility plugin and sample for Digital Asset Management, and more. Go to the HCL Software Support Site for the latest list of software fixes. Product software can be accessed from the HCL Software Licensing Portal . Go to this Step-by-step guide to downloading DX products and accessing Customer Support for more information. The following features and updates are available to customers installing HCL Digital Experience on supported on-premises platforms, effective with HCL Digital Experience CF201: Script Application Updates New features and updates available for the Script Application include a new configuration task for use to configure Web Content Manager properties used to run Single Page Applications (SPAs) that use React or Angular. Improvements are added to support uploads of minified content for use in production SPAs. An out-of-the-box React profile, \u201cDeferred with React,\u201d is added for use with the Digital Experience 8.5 Theme . See the Script Application Improvements topic in the HCL Digital Experience 9.5 or HCL Digital Experience 8.5 Help center pages, as applicable to your HCL DX deployment, for more information. New HCL Digital Experience 9.5 Release Artifacts supporting CICD release processes The HCL Digital Experience 9.5 DXClient and DXConnect servlet provides developers and administrators an approach to deploy changes or improvements to the HCL Digital Experience platform, and to automate processes in the development and delivery process. Updates include ability to view and manipulate custom Resource Environment Provider (REP) settings, with examples. See the DXClient and DXConnect tooling supporting CICD release processes topic for more information. New Personalization REST APIs New Personalization REST APIs supporting Personalization Folder operations are available with HCL Digital Experience Container Update and CF201. See the Help Center topic Personalization Folder APIs for more information. Access the latest HCL Digital Experience 9.5 Education Materials on HCL Software Academy The HCL Software Academy offers technical education for the HCL Software portfolio of products, organized by practitioner role. New modules are available for Digital Experience developers and administrators. See the HCL Digital Experience section of the HCL Software Academy for more information. Parent topic: Latest Combined CF and 9.5 Container Updates","title":"What's new in CF201?"},{"location":"overview/new_noncf201/#whats-new-in-cf201","text":"Combined Cumulative Fix (CF201) includes new features and software fixes for the latest version of HCL Digital Experience. Release updates for both on-premises platforms and container deployments are available. This HCL Digital Experience 9.5 Container Update and CF201 release includes updated releases of HCL DX core Portal and Web Content Manager, Content Composer, Digital Asset Management, Experience API, and Design Studio (Beta) components. The release also includes updated CICD release process artifacts, new DX Personalization REST APIs, Updated Helm deployment and logging capacity, LDAP, and environment configuration guidance, also metrics and visualization samples, Script Application updates, new React profile for the DX 8.5 sample Theme, extensibility plugin and sample for Digital Asset Management, and more. Go to the HCL Software Support Site for the latest list of software fixes. Product software can be accessed from the HCL Software Licensing Portal . Go to this Step-by-step guide to downloading DX products and accessing Customer Support for more information. The following features and updates are available to customers installing HCL Digital Experience on supported on-premises platforms, effective with HCL Digital Experience CF201:","title":"What's new in CF201?"},{"location":"overview/new_noncf201/#script-application-updates","text":"New features and updates available for the Script Application include a new configuration task for use to configure Web Content Manager properties used to run Single Page Applications (SPAs) that use React or Angular. Improvements are added to support uploads of minified content for use in production SPAs. An out-of-the-box React profile, \u201cDeferred with React,\u201d is added for use with the Digital Experience 8.5 Theme . See the Script Application Improvements topic in the HCL Digital Experience 9.5 or HCL Digital Experience 8.5 Help center pages, as applicable to your HCL DX deployment, for more information.","title":"Script Application Updates"},{"location":"overview/new_noncf201/#new-hcl-digital-experience-95-release-artifacts-supporting-cicd-release-processes","text":"The HCL Digital Experience 9.5 DXClient and DXConnect servlet provides developers and administrators an approach to deploy changes or improvements to the HCL Digital Experience platform, and to automate processes in the development and delivery process. Updates include ability to view and manipulate custom Resource Environment Provider (REP) settings, with examples. See the DXClient and DXConnect tooling supporting CICD release processes topic for more information.","title":"New HCL Digital Experience 9.5 Release Artifacts supporting CICD release processes"},{"location":"overview/new_noncf201/#new-personalization-rest-apis","text":"New Personalization REST APIs supporting Personalization Folder operations are available with HCL Digital Experience Container Update and CF201. See the Help Center topic Personalization Folder APIs for more information.","title":"New Personalization REST APIs"},{"location":"overview/new_noncf201/#access-the-latest-hcl-digital-experience-95-education-materials-on-hcl-software-academy","text":"The HCL Software Academy offers technical education for the HCL Software portfolio of products, organized by practitioner role. New modules are available for Digital Experience developers and administrators. See the HCL Digital Experience section of the HCL Software Academy for more information. Parent topic: Latest Combined CF and 9.5 Container Updates","title":"Access the latest HCL Digital Experience 9.5 Education Materials on HCL Software Academy"},{"location":"overview/newcf182/","text":"What's new in Container Update CF182? 9.5 Containers This HCL Digital Experience 9.5 Container Update release includes updated production releases of Digital Experience 9.5 core Portal and Web Content Manager, Content Composer, Digital Asset Management, and Experience API images. This update adds new guidance to minimize downtime when updating container-based deployments with new artifacts, configuration options for Digital Asset Management storage, and more. Go to the HCL Software Support Site for the list of software fixes, including Container Update releases. Product software can be accessed from the HCL Software Licensing Portal . Go to this Step-by-step guide to downloading DX products and accessing Customer Support for more information. Deploy HCL DX 9.5 Container updates with minimal operations downtime This topic provides guidance to update artifacts in HCL Digital Experience 9.5 container deployments while minimizing operations downtime, and notes how processes and tools to support these efforts differ across Kubernetes container-based and non-Kubernetes HCL Digital Experience platform deployments. See Deploying HCL DX 9.5 Container artifact updates with minimal operations downtime for details. Optional Digital Asset Management Storage Configuration Settings This topic outlines optional configuration steps to tune Digital Asset Management storage services Storage Class and Volume. See Optional Digital Asset Management Storage Configuration Settings for details. Parent topic: Container Update releases 9.5","title":"What's new in Container Update CF182? 9.5 Containers"},{"location":"overview/newcf182/#whats-new-in-container-update-cf182-95-containers","text":"This HCL Digital Experience 9.5 Container Update release includes updated production releases of Digital Experience 9.5 core Portal and Web Content Manager, Content Composer, Digital Asset Management, and Experience API images. This update adds new guidance to minimize downtime when updating container-based deployments with new artifacts, configuration options for Digital Asset Management storage, and more. Go to the HCL Software Support Site for the list of software fixes, including Container Update releases. Product software can be accessed from the HCL Software Licensing Portal . Go to this Step-by-step guide to downloading DX products and accessing Customer Support for more information.","title":"What's new in Container Update CF182? 9.5 Containers"},{"location":"overview/newcf182/#deploy-hcl-dx-95-container-updates-with-minimal-operations-downtime","text":"This topic provides guidance to update artifacts in HCL Digital Experience 9.5 container deployments while minimizing operations downtime, and notes how processes and tools to support these efforts differ across Kubernetes container-based and non-Kubernetes HCL Digital Experience platform deployments. See Deploying HCL DX 9.5 Container artifact updates with minimal operations downtime for details.","title":"Deploy HCL DX 9.5 Container updates with minimal operations downtime"},{"location":"overview/newcf182/#optional-digital-asset-management-storage-configuration-settings","text":"This topic outlines optional configuration steps to tune Digital Asset Management storage services Storage Class and Volume. See Optional Digital Asset Management Storage Configuration Settings for details. Parent topic: Container Update releases 9.5","title":"Optional Digital Asset Management Storage Configuration Settings"},{"location":"overview/newcf183/","text":"What's new in Container Update CF183? 9.5 Containers This HCL Digital Experience 9.5 Container Update release includes updated production releases of Digital Experience 9.5 core Portal and Web Content Manager, Content Composer, Digital Asset Management, and Experience API images. New additions include guidance to deploy to Microsoft Azure Kubernetes Service (AKS), new Web Content Manager REST APIs and Search Query examples, guidance to deploy the Remote Search image on Red Hat OpenShift, new HCL Digital Experience \u2018How To\u2019 videos, and more. Go to the HCL Software Support Site for the list of software fixes, including Container Update release CF183. Product software can be accessed from the HCL Software Licensing Portal . Go to this Step-by-step guide to downloading DX products and accessing Customer Support for more information. The latest Software Requirements and Updates supporting HCL Digital Experience solutions may be accessed from the HCL Support pages, HCL Digital Experience V9.5, V9.0, and V8.5 detailed system requirements topic. Deploy HCL DX 9.5 Container CF182 or higher to Microsoft Azure Kubernetes Service (AKS) Learn how to deploy HCL Digital Experience (DX) 9.5 CF182 and higher container releases along with Ambassador to Kubernetes, as verified in Microsoft Azure Kubernetes Service (AKS). See the HCL Digital Experience 9.5 Deployment and Deploy HCL Digital Experience 9.5 Container to Microsoft Azure Kubernetes Service (AKS) topics for more information. Web Content Manager Lock/Unlock API The Web Content Manager Lock/Unlock API lets you lock and unlock WCM content components, authoring templates, and item. It can also extend the WCM Query API. See the Web Content Manager Lock/Unlock AP I topic for more information. Content Template Create/Update Option Element Selection API The Web Content Manager Create/Update Option Element Selection API lets you create or update an Option Selection Element in a Content Template. See the Create or update an Option Selection Element topic for more information. Search Component Results Display examples A search element defines the layout of a form that is used to display search results. See the Search Component Results Display topic for examples of how to design your search results. New HCL Digital Experience \u2018How To\u2019 Videos Take advantage of new step by step guidance for HCL Digital Experience practitioners presented in several new videos. See the following HCL Digital Experience Help Center topics: Remote Search Service Transfer HCL Digital Experience 9.5 Container default database to IBM DB2 Create a web content library Virtual portals Backup and restore Configuration Wizard Combined Cumulative Fix Install Rich text editor toolbar configuration options Data collection and symptom analysis Parent topic: Container Update releases 9.5","title":"What's new in Container Update CF183? 9.5 Containers"},{"location":"overview/newcf183/#whats-new-in-container-update-cf183-95-containers","text":"This HCL Digital Experience 9.5 Container Update release includes updated production releases of Digital Experience 9.5 core Portal and Web Content Manager, Content Composer, Digital Asset Management, and Experience API images. New additions include guidance to deploy to Microsoft Azure Kubernetes Service (AKS), new Web Content Manager REST APIs and Search Query examples, guidance to deploy the Remote Search image on Red Hat OpenShift, new HCL Digital Experience \u2018How To\u2019 videos, and more. Go to the HCL Software Support Site for the list of software fixes, including Container Update release CF183. Product software can be accessed from the HCL Software Licensing Portal . Go to this Step-by-step guide to downloading DX products and accessing Customer Support for more information. The latest Software Requirements and Updates supporting HCL Digital Experience solutions may be accessed from the HCL Support pages, HCL Digital Experience V9.5, V9.0, and V8.5 detailed system requirements topic.","title":"What's new in Container Update CF183? 9.5 Containers"},{"location":"overview/newcf183/#deploy-hcl-dx-95-container-cf182-or-higher-to-microsoft-azure-kubernetes-service-aks","text":"Learn how to deploy HCL Digital Experience (DX) 9.5 CF182 and higher container releases along with Ambassador to Kubernetes, as verified in Microsoft Azure Kubernetes Service (AKS). See the HCL Digital Experience 9.5 Deployment and Deploy HCL Digital Experience 9.5 Container to Microsoft Azure Kubernetes Service (AKS) topics for more information.","title":"Deploy HCL DX 9.5 Container CF182 or higher to Microsoft Azure Kubernetes Service (AKS)"},{"location":"overview/newcf183/#web-content-manager-lockunlock-api","text":"The Web Content Manager Lock/Unlock API lets you lock and unlock WCM content components, authoring templates, and item. It can also extend the WCM Query API. See the Web Content Manager Lock/Unlock AP I topic for more information.","title":"Web Content Manager Lock/Unlock API"},{"location":"overview/newcf183/#content-template-createupdate-option-element-selection-api","text":"The Web Content Manager Create/Update Option Element Selection API lets you create or update an Option Selection Element in a Content Template. See the Create or update an Option Selection Element topic for more information.","title":"Content Template Create/Update Option Element Selection API"},{"location":"overview/newcf183/#search-component-results-display-examples","text":"A search element defines the layout of a form that is used to display search results. See the Search Component Results Display topic for examples of how to design your search results.","title":"Search Component Results Display examples"},{"location":"overview/newcf183/#new-hcl-digital-experience-how-to-videos","text":"Take advantage of new step by step guidance for HCL Digital Experience practitioners presented in several new videos. See the following HCL Digital Experience Help Center topics: Remote Search Service Transfer HCL Digital Experience 9.5 Container default database to IBM DB2 Create a web content library Virtual portals Backup and restore Configuration Wizard Combined Cumulative Fix Install Rich text editor toolbar configuration options Data collection and symptom analysis Parent topic: Container Update releases 9.5","title":"New HCL Digital Experience \u2018How To\u2019 Videos"},{"location":"overview/newcf184/","text":"What's new in Container Update CF184? 9.5 Containers This HCL Digital Experience 9.5 Container Update release includes updated production releases of Digital Experience 9.5 core Portal and Web Content Manager, Content Composer, Digital Asset Management, and Experience API images. New additions include additional guidance to deploy to Microsoft Azure Kubernetes Service (AKS), new Web Content Manager REST APIs supporting Syndication options, HCL Digital Experience API published to HCL DX GitHub, new HCL Digital Experience \u2018How To\u2019 videos, and more. Go to the HCL Software Support Site for the list of software fixes, including Container Update releases. Product software can be accessed from the HCL Software Licensing Portal . Go to this Step-by-step guide to downloading DX products and accessing Customer Support for more information. The latest Software Requirements and Updates supporting HCL Digital Experience solutions may be accessed from the HCL Support pages, HCL Digital Experience V9.5, V9.0, and V8.5 detailed system requirements topic. Web Content Manager Syndication REST APIs The Web Content Manager Syndication REST APIs let you control syndication processes. See the Web Content Manager Syndication REST APIs topic for more information. Access the HCL Experience API in HCL DX GitHub The HCL Experience API is a set of OpenAPI-compliant REST APIs available for customers deploying HCL Digital Experience 9.5 containers on supported Kubernetes platforms. It supports the integration and management of HCL Digital Experience content and functionality to any digital channel using any front-end development framework. Developers may also now access this API published to the HCL DX GitHub repository. See the Experience API topic for more information. New HCL Digital Experience \u2018How To\u2019 Videos Take advantage of new step by step guidance for HCL Digital Experience practitioners presented in several new videos. See the following HCL Digital Experience Help Center topics: HCL Digital Experience Combined Cumulative Fix (CF) Installation Deploy HCL Digital Experience 9.5 to Red Hat OpenShift Deploy Digital Asset Management, Content Composer and Experience API to Red Hat OpenShift Parent topic: Container Update releases 9.5","title":"What's new in Container Update CF184? 9.5 Containers"},{"location":"overview/newcf184/#whats-new-in-container-update-cf184-95-containers","text":"This HCL Digital Experience 9.5 Container Update release includes updated production releases of Digital Experience 9.5 core Portal and Web Content Manager, Content Composer, Digital Asset Management, and Experience API images. New additions include additional guidance to deploy to Microsoft Azure Kubernetes Service (AKS), new Web Content Manager REST APIs supporting Syndication options, HCL Digital Experience API published to HCL DX GitHub, new HCL Digital Experience \u2018How To\u2019 videos, and more. Go to the HCL Software Support Site for the list of software fixes, including Container Update releases. Product software can be accessed from the HCL Software Licensing Portal . Go to this Step-by-step guide to downloading DX products and accessing Customer Support for more information. The latest Software Requirements and Updates supporting HCL Digital Experience solutions may be accessed from the HCL Support pages, HCL Digital Experience V9.5, V9.0, and V8.5 detailed system requirements topic.","title":"What's new in Container Update CF184? 9.5 Containers"},{"location":"overview/newcf184/#web-content-manager-syndication-rest-apis","text":"The Web Content Manager Syndication REST APIs let you control syndication processes. See the Web Content Manager Syndication REST APIs topic for more information.","title":"Web Content Manager Syndication REST APIs"},{"location":"overview/newcf184/#access-the-hcl-experience-api-in-hcl-dx-github","text":"The HCL Experience API is a set of OpenAPI-compliant REST APIs available for customers deploying HCL Digital Experience 9.5 containers on supported Kubernetes platforms. It supports the integration and management of HCL Digital Experience content and functionality to any digital channel using any front-end development framework. Developers may also now access this API published to the HCL DX GitHub repository. See the Experience API topic for more information.","title":"Access the HCL Experience API in HCL DX GitHub"},{"location":"overview/newcf184/#new-hcl-digital-experience-how-to-videos","text":"Take advantage of new step by step guidance for HCL Digital Experience practitioners presented in several new videos. See the following HCL Digital Experience Help Center topics: HCL Digital Experience Combined Cumulative Fix (CF) Installation Deploy HCL Digital Experience 9.5 to Red Hat OpenShift Deploy Digital Asset Management, Content Composer and Experience API to Red Hat OpenShift Parent topic: Container Update releases 9.5","title":"New HCL Digital Experience \u2018How To\u2019 Videos"},{"location":"overview/newcf19/","text":"What's new in Container Update CF19? 9.5 Containers This HCL Digital Experience 9.5 Container Update release includes updated production releases of Digital Experience 9.5 core Portal and Web Content Manager, Content Composer, Digital Asset Management, and Experience API images. New additions include additional guidance to deploy to Google Kubernetes Engine (GKE), Hybrid deployment support, Progressive Web Application delivery, Google Analytics integration, Mobile Preview, DXClient and DXConnect tooling supporting CICD release processes, Kaltura video support, new Web Content Manager REST APIs, new HCL Digital Experience \u2018How To\u2019 videos, and more. Go to the HCL Software Support Site for the list of software fixes, including Container Update releases. Product software can be accessed from the HCL Software Licensing Portal. Go to this Step-by-step guide to downloading DX products and accessing Customer Support for more information. The latest Software Requirements and Updates supporting HCL Digital Experience solutions may be accessed from the HCL Support pages, HCL Digital Experience V9.5, V9.0, and V8.5 detailed system requirements topic. Deploy HCL Digital Experience 9.5 Container to Google Kubernetes Engine (GKE) Learn how to deploy HCL Digital Experience (DX) 9.5 CF19 and higher container release along with Ambassador to Kubernetes, as verified in Google Kubernetes Engine (GKE) . See the Deploy HCL Digital Experience 9.5 Container to Google Kubernetes Engine (GKE) topic for more information. Hybrid Deployment The HCL Digital Experience 9.5 Hybrid deployment and topics deliver capability to deploy and manage HCL Digital Experience 9.5 core Portal Server and Web Content Manager services on premises, and connect to cloud native components Digital Asset Management, Content Composer, Experience API and related services in a production environment. See the Hybrid Deployment topic for more information. Progressive Web Application support Develop support that adds native mobile application experience and performance to your web site using browser-based functionality. See the Progressive Web Application topic for more information. Google Analytics integration Learn how to set up integration of Digital Experience sites with Google Analytics and view the resulting web analytics tracking to assess the effectiveness of your DX site pages with end user audiences. See the Integrate Google Analytics with HCL Digital Experience topic for more information. Mobile Preview Use the Mobile Preview simulator to view the presentation of Digital Experience site page components on select mobile devices. See the Mobile Preview topic for more information. DXClient and DXConnect tooling supporting CICD release processes HCL Digital Experience CF19 and higher includes a DXClient toolset, and DX Connect servlet that provides developers and administrators with an approach to deploy changes or improvements to the HCL Digital Experience platform,and automate processes in the development and delivery process. Note: The DXClient tool is not supported for use with HCL DX 9.5 deployments in Red Hat OpenShift or supported Kubernetes platforms. Use of the DXClient tool with those platforms will be available in future HCL DX 9.5 update releases. See the DXClient and DXConnect tooling supporting CICD release processes topic for more information. Digital Asset Management and Kaltura Integration Learn how to configure Kaltura Video Content Management System integration to accelerate HCL Digital Asset Management rich media integration to HCL Digital Experience site pages and content. See the Configure DAM - Kaltura integration topic for more information. New Digital Experience REST APIs New HCL DX APIs are introduced with the HCL DX CF19 release: Web content image renditions interactions REST API Web Content Library Locale Query Workflow Comments API Using XML Access to export and import Digital Asset Management assets New HCL Digital Experience \u2018How To\u2019 Videos Take advantage of new step by step guidance for HCL Digital Experience practitioners presented in several new videos. See the following HCL Digital Experience Help Center topics: Configure the OpenLDAP container image to the HCL DX 9.5 Container Deployment How to manage syndicators and subscribers Parent topic: Container Update releases 9.5","title":"What's new in Container Update CF19? 9.5 Containers"},{"location":"overview/newcf19/#whats-new-in-container-update-cf19-95-containers","text":"This HCL Digital Experience 9.5 Container Update release includes updated production releases of Digital Experience 9.5 core Portal and Web Content Manager, Content Composer, Digital Asset Management, and Experience API images. New additions include additional guidance to deploy to Google Kubernetes Engine (GKE), Hybrid deployment support, Progressive Web Application delivery, Google Analytics integration, Mobile Preview, DXClient and DXConnect tooling supporting CICD release processes, Kaltura video support, new Web Content Manager REST APIs, new HCL Digital Experience \u2018How To\u2019 videos, and more. Go to the HCL Software Support Site for the list of software fixes, including Container Update releases. Product software can be accessed from the HCL Software Licensing Portal. Go to this Step-by-step guide to downloading DX products and accessing Customer Support for more information. The latest Software Requirements and Updates supporting HCL Digital Experience solutions may be accessed from the HCL Support pages, HCL Digital Experience V9.5, V9.0, and V8.5 detailed system requirements topic.","title":"What's new in Container Update CF19? 9.5 Containers"},{"location":"overview/newcf19/#deploy-hcl-digital-experience-95-container-to-google-kubernetes-engine-gke","text":"Learn how to deploy HCL Digital Experience (DX) 9.5 CF19 and higher container release along with Ambassador to Kubernetes, as verified in Google Kubernetes Engine (GKE) . See the Deploy HCL Digital Experience 9.5 Container to Google Kubernetes Engine (GKE) topic for more information.","title":"Deploy HCL Digital Experience 9.5 Container to Google Kubernetes Engine (GKE)"},{"location":"overview/newcf19/#hybrid-deployment","text":"The HCL Digital Experience 9.5 Hybrid deployment and topics deliver capability to deploy and manage HCL Digital Experience 9.5 core Portal Server and Web Content Manager services on premises, and connect to cloud native components Digital Asset Management, Content Composer, Experience API and related services in a production environment. See the Hybrid Deployment topic for more information.","title":"Hybrid Deployment"},{"location":"overview/newcf19/#progressive-web-application-support","text":"Develop support that adds native mobile application experience and performance to your web site using browser-based functionality. See the Progressive Web Application topic for more information.","title":"Progressive Web Application support"},{"location":"overview/newcf19/#google-analytics-integration","text":"Learn how to set up integration of Digital Experience sites with Google Analytics and view the resulting web analytics tracking to assess the effectiveness of your DX site pages with end user audiences. See the Integrate Google Analytics with HCL Digital Experience topic for more information.","title":"Google Analytics integration"},{"location":"overview/newcf19/#mobile-preview","text":"Use the Mobile Preview simulator to view the presentation of Digital Experience site page components on select mobile devices. See the Mobile Preview topic for more information.","title":"Mobile Preview"},{"location":"overview/newcf19/#dxclient-and-dxconnect-tooling-supporting-cicd-release-processes","text":"HCL Digital Experience CF19 and higher includes a DXClient toolset, and DX Connect servlet that provides developers and administrators with an approach to deploy changes or improvements to the HCL Digital Experience platform,and automate processes in the development and delivery process. Note: The DXClient tool is not supported for use with HCL DX 9.5 deployments in Red Hat OpenShift or supported Kubernetes platforms. Use of the DXClient tool with those platforms will be available in future HCL DX 9.5 update releases. See the DXClient and DXConnect tooling supporting CICD release processes topic for more information.","title":"DXClient and DXConnect tooling supporting CICD release processes"},{"location":"overview/newcf19/#digital-asset-management-and-kaltura-integration","text":"Learn how to configure Kaltura Video Content Management System integration to accelerate HCL Digital Asset Management rich media integration to HCL Digital Experience site pages and content. See the Configure DAM - Kaltura integration topic for more information.","title":"Digital Asset Management and Kaltura Integration"},{"location":"overview/newcf19/#new-digital-experience-rest-apis","text":"New HCL DX APIs are introduced with the HCL DX CF19 release: Web content image renditions interactions REST API Web Content Library Locale Query Workflow Comments API Using XML Access to export and import Digital Asset Management assets","title":"New Digital Experience REST APIs"},{"location":"overview/newcf19/#new-hcl-digital-experience-how-to-videos","text":"Take advantage of new step by step guidance for HCL Digital Experience practitioners presented in several new videos. See the following HCL Digital Experience Help Center topics: Configure the OpenLDAP container image to the HCL DX 9.5 Container Deployment How to manage syndicators and subscribers Parent topic: Container Update releases 9.5","title":"New HCL Digital Experience \u2018How To\u2019 Videos"},{"location":"overview/newcf191/","text":"What's new in Container Update CF191? 9.5 Containers This HCL Digital Experience 9.5 Container Update release includes new releases of Digital Experience 9.5 core Portal and Web Content Manager, Content Composer, Digital Asset Management, and Experience API images, that may be used for new deployments only. Upgrading from a previous DX 9.5 Container Release to CF191 is not supported. Go to the HCL Software Support Site for the list of software fixes, including Container Update releases. Product software can be accessed from the HCL Software Licensing Portal . Go to this Step-by-step guide to downloading DX products and accessing Customer Support for more information. The latest Software Requirements and Updates supporting HCL Digital Experience solutions may be accessed from the HCL Support pages, HCL Digital Experience V9.5, V9.0, and V8.5 detailed system requirements topic. Deploy HCL Digital Experience 9.5 on HCL Solution Factory The HCL Solution Factory platform offers the ability for organizations to quickly prototype and test assets and can enable organizations to speed cloud-native adoption. Visit HCL Solution Factory to access HCL Digital Experience 9.5 and other HCL software offerings to quickly assess and test cloud-native strategies to see what best fits adoption plans. View this online tutorial \u201c Deploy HCL Digital Experience in Minutes with HCL SoFy \u201d HCL Digital Experience 9.5 Integration with HCL Commerce HCL Commerce integration with HCL Digital Experience allows content and digital assets managed within HCL Digital Experience to be utilized in any Commerce store. Visit the HCL Commerce Help Center Digital Experience integration for more information and pre-requisites. Parent topic: Container Update releases 9.5","title":"What's new in Container Update CF191? 9.5 Containers"},{"location":"overview/newcf191/#whats-new-in-container-update-cf191-95-containers","text":"This HCL Digital Experience 9.5 Container Update release includes new releases of Digital Experience 9.5 core Portal and Web Content Manager, Content Composer, Digital Asset Management, and Experience API images, that may be used for new deployments only. Upgrading from a previous DX 9.5 Container Release to CF191 is not supported. Go to the HCL Software Support Site for the list of software fixes, including Container Update releases. Product software can be accessed from the HCL Software Licensing Portal . Go to this Step-by-step guide to downloading DX products and accessing Customer Support for more information. The latest Software Requirements and Updates supporting HCL Digital Experience solutions may be accessed from the HCL Support pages, HCL Digital Experience V9.5, V9.0, and V8.5 detailed system requirements topic.","title":"What's new in Container Update CF191? 9.5 Containers"},{"location":"overview/newcf191/#deploy-hcl-digital-experience-95-on-hcl-solution-factory","text":"The HCL Solution Factory platform offers the ability for organizations to quickly prototype and test assets and can enable organizations to speed cloud-native adoption. Visit HCL Solution Factory to access HCL Digital Experience 9.5 and other HCL software offerings to quickly assess and test cloud-native strategies to see what best fits adoption plans. View this online tutorial \u201c Deploy HCL Digital Experience in Minutes with HCL SoFy \u201d","title":"Deploy HCL Digital Experience 9.5 on HCL Solution Factory"},{"location":"overview/newcf191/#hcl-digital-experience-95-integration-with-hcl-commerce","text":"HCL Commerce integration with HCL Digital Experience allows content and digital assets managed within HCL Digital Experience to be utilized in any Commerce store. Visit the HCL Commerce Help Center Digital Experience integration for more information and pre-requisites. Parent topic: Container Update releases 9.5","title":"HCL Digital Experience 9.5 Integration with HCL Commerce"},{"location":"overview/newcf192/","text":"What's new in Container Update CF192? 9.5 Containers This HCL Digital Experience 9.5 Container Update release includes new releases of Digital Experience 9.5 core Portal and Web Content Manager, Content Composer, Digital Asset Management, and Experience API images. Go to the HCL Software Support Site for the list of software fixes, including Container Update releases. Product software can be accessed from the HCL Software Licensing Portal . Go to this Step-by-step guide to downloading DX products and accessing Customer Support for more information. The latest Software Requirements and Updates supporting HCL Digital Experience solutions may be accessed from the HCL Support pages, HCL Digital Experience V9.5, V9.0, and V8.5 detailed system requirements topic. HCL Digital Experience 9.5 Docker and Container Initialization Performance Beginning with the HCL Digital Experience 9.5 Container Update CF192 release, DX 9.5 Docker and container initialization performance is improved. See the HCL Digital Experience 9.5 Docker and Container Initialization Performance Help Center topic for more information. HCL Digital Experience 9.5 Container Core Transaction Logging Beginning with the HCL Digital Experience 9.5 Container Update CF192 release, transaction logging for the DX Docker Core image is updated to improve performance. See the Logging and tracing for Containers and new services Help Center topic for more information. New HCL Digital Experience 9.5 Release Artifacts supporting CICD release processes The HCL Digital Experience 9.5 DXClient and DXConnect servlet provides developers and administrators an approach to deploy changes or improvements to the HCL Digital Experience platform,and automate processes in the development and delivery process. New release artifact types supporting Script Application Undeploy and Restore, and Deploy Theme. See the DXClient and DXConnect tooling supporting CICD release processes topic for more information. New Content Composer Features New Content Composer features are added with HCL Digital Experience Container Update CF192, including a new Version Comparison interface and capabilities to View and Filter Workflow comments, and more. See the HCL Content Composer Help Center topic for additional information. New Digital Asset Management Features New Digital Asset Management Features are added with HCL Digital Experience Container Update CF192, including enhanced crop functionality, Kaltura video player support, thumbnail preview support, asset size filter, Renditions and Versioning support, and more. See the HCL Digital Asset Management Help Center topic for additional information. HCL Digital Experience 9.5 Integration with HCL Unica Discover Integration of HCL Digital Experience 9.5 sites with HCL Unica Discover enables DX site managers and marketers to access deep insight analytics and session replay services to assess the effectiveness of DX site pages with end user audiences. See the Integrate HCL Unica Discover with HCL Digital Experience topic for more information. Content Security Policy The Content-Security-Policy header is used by modern browsers to enhance the security of HCL Digital Experience site documents or web pages by allowing HCL Digital Experience administrators or developers declare which dynamic resources are allowed to load. With HCL Digital Experience Container Update CF192 and later releases, developers can apply platform support and guidance to update their DX sites to validate trusted sources before rendering pages to end users. See the Content Security Policy Help Center topic for more information. New Digital Experience REST APIs New HCL DX APIs are introduced with the HCL DX CF192 Container Update release: Using the WCM Add Comment API Web Content Manager Find Rendering and Script Portlet References Web Content Manager Access Control Filter REST API Clear Theme Cache API Work with Deleted Web Content Items Web Content Manager Multilingual Solution APIs New HCL Digital Experience \u2018How To\u2019 Videos Take advantage of new step-by-step guidance for HCL Digital Experience practitioners presented in new videos and webinars. See the following HCL Digital Experience Help Center topics: HCL Digital Experience 9.5 Container Deployment Using the dxctl tool to deploy Digital Experience 9.5 on Red Hat OpenShift Create a WAR-based theme copy on HCL Digital Experience 9.5 Parent topic: Container Update releases 9.5","title":"What's new in Container Update CF192? 9.5 Containers"},{"location":"overview/newcf192/#whats-new-in-container-update-cf192-95-containers","text":"This HCL Digital Experience 9.5 Container Update release includes new releases of Digital Experience 9.5 core Portal and Web Content Manager, Content Composer, Digital Asset Management, and Experience API images. Go to the HCL Software Support Site for the list of software fixes, including Container Update releases. Product software can be accessed from the HCL Software Licensing Portal . Go to this Step-by-step guide to downloading DX products and accessing Customer Support for more information. The latest Software Requirements and Updates supporting HCL Digital Experience solutions may be accessed from the HCL Support pages, HCL Digital Experience V9.5, V9.0, and V8.5 detailed system requirements topic.","title":"What's new in Container Update CF192? 9.5 Containers"},{"location":"overview/newcf192/#hcl-digital-experience-95-docker-and-container-initialization-performance","text":"Beginning with the HCL Digital Experience 9.5 Container Update CF192 release, DX 9.5 Docker and container initialization performance is improved. See the HCL Digital Experience 9.5 Docker and Container Initialization Performance Help Center topic for more information.","title":"HCL Digital Experience 9.5 Docker and Container Initialization Performance"},{"location":"overview/newcf192/#hcl-digital-experience-95-container-core-transaction-logging","text":"Beginning with the HCL Digital Experience 9.5 Container Update CF192 release, transaction logging for the DX Docker Core image is updated to improve performance. See the Logging and tracing for Containers and new services Help Center topic for more information.","title":"HCL Digital Experience 9.5 Container Core Transaction Logging"},{"location":"overview/newcf192/#new-hcl-digital-experience-95-release-artifacts-supporting-cicd-release-processes","text":"The HCL Digital Experience 9.5 DXClient and DXConnect servlet provides developers and administrators an approach to deploy changes or improvements to the HCL Digital Experience platform,and automate processes in the development and delivery process. New release artifact types supporting Script Application Undeploy and Restore, and Deploy Theme. See the DXClient and DXConnect tooling supporting CICD release processes topic for more information.","title":"New HCL Digital Experience 9.5 Release Artifacts supporting CICD release processes"},{"location":"overview/newcf192/#new-content-composer-features","text":"New Content Composer features are added with HCL Digital Experience Container Update CF192, including a new Version Comparison interface and capabilities to View and Filter Workflow comments, and more. See the HCL Content Composer Help Center topic for additional information.","title":"New Content Composer Features"},{"location":"overview/newcf192/#new-digital-asset-management-features","text":"New Digital Asset Management Features are added with HCL Digital Experience Container Update CF192, including enhanced crop functionality, Kaltura video player support, thumbnail preview support, asset size filter, Renditions and Versioning support, and more. See the HCL Digital Asset Management Help Center topic for additional information.","title":"New Digital Asset Management Features"},{"location":"overview/newcf192/#hcl-digital-experience-95-integration-with-hcl-unica-discover","text":"Integration of HCL Digital Experience 9.5 sites with HCL Unica Discover enables DX site managers and marketers to access deep insight analytics and session replay services to assess the effectiveness of DX site pages with end user audiences. See the Integrate HCL Unica Discover with HCL Digital Experience topic for more information.","title":"HCL Digital Experience 9.5 Integration with HCL Unica Discover"},{"location":"overview/newcf192/#content-security-policy","text":"The Content-Security-Policy header is used by modern browsers to enhance the security of HCL Digital Experience site documents or web pages by allowing HCL Digital Experience administrators or developers declare which dynamic resources are allowed to load. With HCL Digital Experience Container Update CF192 and later releases, developers can apply platform support and guidance to update their DX sites to validate trusted sources before rendering pages to end users. See the Content Security Policy Help Center topic for more information.","title":"Content Security Policy"},{"location":"overview/newcf192/#new-digital-experience-rest-apis","text":"New HCL DX APIs are introduced with the HCL DX CF192 Container Update release: Using the WCM Add Comment API Web Content Manager Find Rendering and Script Portlet References Web Content Manager Access Control Filter REST API Clear Theme Cache API Work with Deleted Web Content Items Web Content Manager Multilingual Solution APIs","title":"New Digital Experience REST APIs"},{"location":"overview/newcf192/#new-hcl-digital-experience-how-to-videos","text":"Take advantage of new step-by-step guidance for HCL Digital Experience practitioners presented in new videos and webinars. See the following HCL Digital Experience Help Center topics: HCL Digital Experience 9.5 Container Deployment Using the dxctl tool to deploy Digital Experience 9.5 on Red Hat OpenShift Create a WAR-based theme copy on HCL Digital Experience 9.5 Parent topic: Container Update releases 9.5","title":"New HCL Digital Experience \u2018How To\u2019 Videos"},{"location":"overview/newcf193/","text":"What's new in Container Update CF193? 9.5 Containers This HCL Digital Experience 9.5 Container Update release includes new releases of Digital Experience 9.5 core Portal and Web Content Manager, Content Composer, Digital Asset Management, and Experience API images. New and updated feature references are detailed here. Go to the HCL Software Support Site for the list of software fixes, including Container Update releases. Product software can be accessed from the HCL Software Licensing Portal . Go to this Step-by-step guide to downloading DX products and accessing Customer Support for more information. The latest Software Requirements and Updates supporting HCL Digital Experience solutions may be accessed from the HCL Support pages, HCL Digital Experience V9.5, V9.0, and V8.5 detailed system requirements topic. Enable Presentation of Locales in Friendly URLs Beginning with the HCL Digital Experience 9.5 Container Update CF193 release, enablement is provided to present friendly URLs with locale specific definitions when multi-lingual page versions are requested. This enablement can also improve SEO results when users search for language-specific DX page topics. See the Enabling presentation of locales in friendly URLs topic for more information. Theme Editor Portlet The Theme Editor portlet is a new addition to HCL Digital Experience Container Update CF193 and higher release capabilities. The portlet allows an administrator to edit static theme resources in WebDAV without the use of a WebDAV client or tool. See the Theme Editor Portlet topic for more information. HCL Digital Experience 9.5 Container Custom Context Root URL Beginning with HCL DX 9.5 Container Update CF193 release, you can define the custom context root URLs when deploying your DX 9.5 software to the supported container platforms. See the Customizing the Digital Experience Portal URL when deployed to Container platforms topic for more information. New Digital Asset Management Features New Digital Asset Management Features are added with HCL Digital Experience Container Update CF193, and include the ability to filter Digital Assets by size. See the HCL Digital Asset Management Help Center topic for additional information. Change language presented in the HCL Digital Experience Theme Beginning with HCL DX 9.5 Container Update CF193 release, you can switch the language presented in your Digital Experience theme. An example is provided in the Woodburn Studio demo site supporting presentations for French, Spanish, and English languages. See the How to switch the languages in the Digital Experience theme topic for more information. New HCL Digital Experience 9.5 Release Artifacts supporting CICD release processes The HCL Digital Experience 9.5 DXClient and DXConnect servlet provides developers and administrators an approach to deploy changes or improvements to the HCL Digital Experience platform, and automate processes in the development and delivery process. New release artifact types supporting Deploy DX Core, Manage Syndicator, and Manage Subscriber tasks are provided in Container Update CF193. See the DXClient and DXConnect tooling supporting CICD release processes topic for more information. New Digital Experience REST APIs New and updated HCL DX APIs are introduced with the HCL DX CF193 Container Update release: Web Content Manager Multilingual Solution APIs HCL Digital Experience 9.5 Container Platform Support Matrix View the latest Kubernetes and OpenShift platforms tested and supported for specific HCL Digital Experience 9.5 Container Update deployments. See the HCL Digital Experience 9.5 Container Platform Support Matrix Help Center topic for more information. New HCL Digital Experience \u2018How To\u2019 Videos Take advantage of new step-by-step guidance for HCL Digital Experience practitioners presented in new videos and webinars. See the following HCL Digital Experience Help Center topics: Deploy HCL Digital Experience in Minutes using HCL Solution Factory Using the dxctl tool to Update Digital Experience 9.5 on Red Hat OpenShift How to Upload HCL Digital Experience 9.5 CF Container Images to a Private Repository Parent topic: Container Update releases 9.5","title":"What's new in Container Update CF193? 9.5 Containers"},{"location":"overview/newcf193/#whats-new-in-container-update-cf193-95-containers","text":"This HCL Digital Experience 9.5 Container Update release includes new releases of Digital Experience 9.5 core Portal and Web Content Manager, Content Composer, Digital Asset Management, and Experience API images. New and updated feature references are detailed here. Go to the HCL Software Support Site for the list of software fixes, including Container Update releases. Product software can be accessed from the HCL Software Licensing Portal . Go to this Step-by-step guide to downloading DX products and accessing Customer Support for more information. The latest Software Requirements and Updates supporting HCL Digital Experience solutions may be accessed from the HCL Support pages, HCL Digital Experience V9.5, V9.0, and V8.5 detailed system requirements topic.","title":"What's new in Container Update CF193? 9.5 Containers"},{"location":"overview/newcf193/#enable-presentation-of-locales-in-friendly-urls","text":"Beginning with the HCL Digital Experience 9.5 Container Update CF193 release, enablement is provided to present friendly URLs with locale specific definitions when multi-lingual page versions are requested. This enablement can also improve SEO results when users search for language-specific DX page topics. See the Enabling presentation of locales in friendly URLs topic for more information.","title":"Enable Presentation of Locales in Friendly URLs"},{"location":"overview/newcf193/#theme-editor-portlet","text":"The Theme Editor portlet is a new addition to HCL Digital Experience Container Update CF193 and higher release capabilities. The portlet allows an administrator to edit static theme resources in WebDAV without the use of a WebDAV client or tool. See the Theme Editor Portlet topic for more information.","title":"Theme Editor Portlet"},{"location":"overview/newcf193/#hcl-digital-experience-95-container-custom-context-root-url","text":"Beginning with HCL DX 9.5 Container Update CF193 release, you can define the custom context root URLs when deploying your DX 9.5 software to the supported container platforms. See the Customizing the Digital Experience Portal URL when deployed to Container platforms topic for more information.","title":"HCL Digital Experience 9.5 Container Custom Context Root URL"},{"location":"overview/newcf193/#new-digital-asset-management-features","text":"New Digital Asset Management Features are added with HCL Digital Experience Container Update CF193, and include the ability to filter Digital Assets by size. See the HCL Digital Asset Management Help Center topic for additional information.","title":"New Digital Asset Management Features"},{"location":"overview/newcf193/#change-language-presented-in-the-hcl-digital-experience-theme","text":"Beginning with HCL DX 9.5 Container Update CF193 release, you can switch the language presented in your Digital Experience theme. An example is provided in the Woodburn Studio demo site supporting presentations for French, Spanish, and English languages. See the How to switch the languages in the Digital Experience theme topic for more information.","title":"Change language presented in the HCL Digital Experience Theme"},{"location":"overview/newcf193/#new-hcl-digital-experience-95-release-artifacts-supporting-cicd-release-processes","text":"The HCL Digital Experience 9.5 DXClient and DXConnect servlet provides developers and administrators an approach to deploy changes or improvements to the HCL Digital Experience platform, and automate processes in the development and delivery process. New release artifact types supporting Deploy DX Core, Manage Syndicator, and Manage Subscriber tasks are provided in Container Update CF193. See the DXClient and DXConnect tooling supporting CICD release processes topic for more information.","title":"New HCL Digital Experience 9.5 Release Artifacts supporting CICD release processes"},{"location":"overview/newcf193/#new-digital-experience-rest-apis","text":"New and updated HCL DX APIs are introduced with the HCL DX CF193 Container Update release: Web Content Manager Multilingual Solution APIs","title":"New Digital Experience REST APIs"},{"location":"overview/newcf193/#hcl-digital-experience-95-container-platform-support-matrix","text":"View the latest Kubernetes and OpenShift platforms tested and supported for specific HCL Digital Experience 9.5 Container Update deployments. See the HCL Digital Experience 9.5 Container Platform Support Matrix Help Center topic for more information.","title":"HCL Digital Experience 9.5 Container Platform Support Matrix"},{"location":"overview/newcf193/#new-hcl-digital-experience-how-to-videos","text":"Take advantage of new step-by-step guidance for HCL Digital Experience practitioners presented in new videos and webinars. See the following HCL Digital Experience Help Center topics: Deploy HCL Digital Experience in Minutes using HCL Solution Factory Using the dxctl tool to Update Digital Experience 9.5 on Red Hat OpenShift How to Upload HCL Digital Experience 9.5 CF Container Images to a Private Repository Parent topic: Container Update releases 9.5","title":"New HCL Digital Experience \u2018How To\u2019 Videos"},{"location":"overview/newcf194/","text":"What's new in Container Update CF194? 9.5 Containers This HCL Digital Experience 9.5 Container Update release includes new releases of Digital Experience 9.5 core Portal and Web Content Manager, Content Composer, Digital Asset Management, and Experience API images. No new features were added in this update. Important note: The default IBM WebSphere Application Server certificate that ships with HCL Digital Experience 9.5 Docker images expires on April 26, 2021. Access to HCL Digital Experience 9.5 container deployments is not adversely affected. However, scripts executed against the DX 9.5 deployed servers, like stopServer or some ConfigEngine tasks, will fail. To address this, HCL Digital Experience 9.5 customers deploying to container platforms can use either of the following options to update the certificate: Apply the HCL Digital Experience 9.5 Container Update CF194, available from the HCL Software Licensing Portal on April 19, 2021. Renew the certificate on your DX 9.5 Container Deployment by following the steps outlined in the following HCL DX Support Knowledge Base article: Manual Steps to Apply the Digital Experience 9.5 Container Deployment Core Certificate Update . Go to the HCL Software Support Site for the list of software fixes, including Container Update release CF194. Product software can be accessed from the HCL Software Licensing Portal . Go to this Step-by-step guide to downloading DX products and accessing Customer Support for more information. The latest Software Requirements and Updates supporting HCL Digital Experience solutions may be accessed from the HCL Support pages, HCL Digital Experience V9.5, V9.0, and V8.5 detailed system requirements topic. Parent topic: Container Update releases 9.5","title":"What's new in Container Update CF194? 9.5 Containers"},{"location":"overview/newcf194/#whats-new-in-container-update-cf194-95-containers","text":"This HCL Digital Experience 9.5 Container Update release includes new releases of Digital Experience 9.5 core Portal and Web Content Manager, Content Composer, Digital Asset Management, and Experience API images. No new features were added in this update. Important note: The default IBM WebSphere Application Server certificate that ships with HCL Digital Experience 9.5 Docker images expires on April 26, 2021. Access to HCL Digital Experience 9.5 container deployments is not adversely affected. However, scripts executed against the DX 9.5 deployed servers, like stopServer or some ConfigEngine tasks, will fail. To address this, HCL Digital Experience 9.5 customers deploying to container platforms can use either of the following options to update the certificate: Apply the HCL Digital Experience 9.5 Container Update CF194, available from the HCL Software Licensing Portal on April 19, 2021. Renew the certificate on your DX 9.5 Container Deployment by following the steps outlined in the following HCL DX Support Knowledge Base article: Manual Steps to Apply the Digital Experience 9.5 Container Deployment Core Certificate Update . Go to the HCL Software Support Site for the list of software fixes, including Container Update release CF194. Product software can be accessed from the HCL Software Licensing Portal . Go to this Step-by-step guide to downloading DX products and accessing Customer Support for more information. The latest Software Requirements and Updates supporting HCL Digital Experience solutions may be accessed from the HCL Support pages, HCL Digital Experience V9.5, V9.0, and V8.5 detailed system requirements topic. Parent topic: Container Update releases 9.5","title":"What's new in Container Update CF194? 9.5 Containers"},{"location":"overview/newcf195/","text":"What's new in Container Update CF195? 9.5 Containers This HCL Digital Experience 9.5 Container Update release includes new releases of Digital Experience 9.5 core Portal and Web Content Manager, Content Composer, Digital Asset Management, and Experience API images. New and updated feature references are detailed here. Go to the HCL Software Support Site and HCL DX Software Fix list for the list of software fixes, including Container Update releases. Product software can be accessed from the HCL Software Licensing Portal . Go to this Step-by-step guide to downloading DX products and accessing Customer Support for more information. The latest Software Requirements and Updates supporting HCL Digital Experience solutions may be accessed from the HCL Support pages, HCL Digital Experience V9.5, V9.0, and V8.5 detailed system requirements topic. Web Content Manager Multilingual Solution Library Export and Import The HCL Web Content Manager Multilingual Solution is a set of tools used to manage translated versions Web Content Manager content for localized and regionalized websites. Beginning with the HCL Digital Experience 9.5 Container Update CF195 release, a new export and import capability allows you to support translation of the content of a library by exporting it into a format supported by a translation service and importing the translated content back into the content library using the DXClient tool. See the How to export and import WCM library content using DXClient topic for more information. Web Content Manager Advanced Cache Options New options are available to flush the Web Content Manager Advanced cache, as a result of syndication operations, to help improve performance and reliability. See the Web Content Manager Cache Parameters topic for more information. Enhanced Cross Origin Resource Sharing Configuration Enhanced Cross Origin Resource Sharing Configuration adds new options for HCL Digital Experience administrators to set configuration for CORS using a WP configuration service in the IBM WebSphere Application Server resource environment provider. See the Enhanced Cross Origin Resource Sharing Configuration for more information. New HCL Digital Experience 9.5 Release Artifacts supporting CICD release processes The HCL Digital Experience 9.5 DXClient and DXConnect servlet provides developers and administrators an approach to deploy changes or improvements to the HCL Digital Experience platform, and automate processes in the development and delivery process. New release artifact types supporting Undeploy Themes, and Export/Import Web Content Manager Library content are provided in Container Update CF195. See the DXClient and DXConnect tooling supporting CICD release processes topic for more information. Remote Search Configuration for HCL Digital Experience 9.5 deployments on Kubernetes platforms Beginning with HCL DX 9.5 Container Update CF195 release, Remote Search can be configured for deployment on supported Kubernetes platforms. See the Configure Remote Search in Red Hat OpenShift and Kubernetes topic for more information. Define No Context Root in for HCL Digital Experience 9.5 container deployments Beginning with HCL DX 9.5 Container Update CF195 release, administrators can define custom context root URLs, or no context root URL, when deploying HCL DX 9.5 software to the supported container platforms. See the Customizing the Digital Experience URL when deployed to Container platforms topic for more information. HCL Digital Experience 9.5 Container Platform Support Matrix View the latest Kubernetes and OpenShift platforms tested and supported for specific HCL Digital Experience 9.5 Container Update deployments. See the HCL Digital Experience 9.5 Container Platform Support Matrix Help Center topic for more information. New HCL Digital Experience \u2018How To\u2019 Videos Take advantage of new step-by-step guidance for HCL Digital Experience practitioners presented in new videos and webinars. See the following HCL Digital Experience Help Center topics: Getting Started with DXClient on Red Hat OpenShift using HCL Digital Experience CF194 Understanding the Core Persistent Volumes in HCL Digital Experience Container Update CF194 Create a WebDAV Theme copy using HCL Digital Experience 9.5 Create and apply A/B personalized scenarios with HCL Digital Experience Parent topic: Container Update releases 9.5","title":"What's new in Container Update CF195? 9.5 Containers"},{"location":"overview/newcf195/#whats-new-in-container-update-cf195-95-containers","text":"This HCL Digital Experience 9.5 Container Update release includes new releases of Digital Experience 9.5 core Portal and Web Content Manager, Content Composer, Digital Asset Management, and Experience API images. New and updated feature references are detailed here. Go to the HCL Software Support Site and HCL DX Software Fix list for the list of software fixes, including Container Update releases. Product software can be accessed from the HCL Software Licensing Portal . Go to this Step-by-step guide to downloading DX products and accessing Customer Support for more information. The latest Software Requirements and Updates supporting HCL Digital Experience solutions may be accessed from the HCL Support pages, HCL Digital Experience V9.5, V9.0, and V8.5 detailed system requirements topic.","title":"What's new in Container Update CF195? 9.5 Containers"},{"location":"overview/newcf195/#web-content-manager-multilingual-solution-library-export-and-import","text":"The HCL Web Content Manager Multilingual Solution is a set of tools used to manage translated versions Web Content Manager content for localized and regionalized websites. Beginning with the HCL Digital Experience 9.5 Container Update CF195 release, a new export and import capability allows you to support translation of the content of a library by exporting it into a format supported by a translation service and importing the translated content back into the content library using the DXClient tool. See the How to export and import WCM library content using DXClient topic for more information.","title":"Web Content Manager Multilingual Solution Library Export and Import"},{"location":"overview/newcf195/#web-content-manager-advanced-cache-options","text":"New options are available to flush the Web Content Manager Advanced cache, as a result of syndication operations, to help improve performance and reliability. See the Web Content Manager Cache Parameters topic for more information.","title":"Web Content Manager Advanced Cache Options"},{"location":"overview/newcf195/#enhanced-cross-origin-resource-sharing-configuration","text":"Enhanced Cross Origin Resource Sharing Configuration adds new options for HCL Digital Experience administrators to set configuration for CORS using a WP configuration service in the IBM WebSphere Application Server resource environment provider. See the Enhanced Cross Origin Resource Sharing Configuration for more information.","title":"Enhanced Cross Origin Resource Sharing Configuration"},{"location":"overview/newcf195/#new-hcl-digital-experience-95-release-artifacts-supporting-cicd-release-processes","text":"The HCL Digital Experience 9.5 DXClient and DXConnect servlet provides developers and administrators an approach to deploy changes or improvements to the HCL Digital Experience platform, and automate processes in the development and delivery process. New release artifact types supporting Undeploy Themes, and Export/Import Web Content Manager Library content are provided in Container Update CF195. See the DXClient and DXConnect tooling supporting CICD release processes topic for more information.","title":"New HCL Digital Experience 9.5 Release Artifacts supporting CICD release processes"},{"location":"overview/newcf195/#remote-search-configuration-for-hcl-digital-experience-95-deployments-on-kubernetes-platforms","text":"Beginning with HCL DX 9.5 Container Update CF195 release, Remote Search can be configured for deployment on supported Kubernetes platforms. See the Configure Remote Search in Red Hat OpenShift and Kubernetes topic for more information.","title":"Remote Search Configuration for HCL Digital Experience 9.5 deployments on Kubernetes platforms"},{"location":"overview/newcf195/#define-no-context-root-in-for-hcl-digital-experience-95-container-deployments","text":"Beginning with HCL DX 9.5 Container Update CF195 release, administrators can define custom context root URLs, or no context root URL, when deploying HCL DX 9.5 software to the supported container platforms. See the Customizing the Digital Experience URL when deployed to Container platforms topic for more information.","title":"Define No Context Root in for HCL Digital Experience 9.5 container deployments"},{"location":"overview/newcf195/#hcl-digital-experience-95-container-platform-support-matrix","text":"View the latest Kubernetes and OpenShift platforms tested and supported for specific HCL Digital Experience 9.5 Container Update deployments. See the HCL Digital Experience 9.5 Container Platform Support Matrix Help Center topic for more information.","title":"HCL Digital Experience 9.5 Container Platform Support Matrix"},{"location":"overview/newcf195/#new-hcl-digital-experience-how-to-videos","text":"Take advantage of new step-by-step guidance for HCL Digital Experience practitioners presented in new videos and webinars. See the following HCL Digital Experience Help Center topics: Getting Started with DXClient on Red Hat OpenShift using HCL Digital Experience CF194 Understanding the Core Persistent Volumes in HCL Digital Experience Container Update CF194 Create a WebDAV Theme copy using HCL Digital Experience 9.5 Create and apply A/B personalized scenarios with HCL Digital Experience Parent topic: Container Update releases 9.5","title":"New HCL Digital Experience \u2018How To\u2019 Videos"},{"location":"overview/newcf196/","text":"What's new in Container Update CF196? 9.5 Containers This HCL Digital Experience 9.5 Container Update release includes new releases of HCL Digital Experience 9.5 core Portal and Web Content Manager, Content Composer, Digital Asset Management, and Experience API images, and a beta preview release of Design Studio. New and updated feature references are detailed here. Go to the HCL Software Support Site and HCL DX Software Fix list for the list of software fixes, including Container Update releases. Product software can be accessed from the HCL Software Licensing Portal . Go to this Step-by-step guide to downloading DX products and accessing Customer Support for more information. The latest Software Requirements and Updates supporting HCL Digital Experience solutions may be accessed from the HCL Support pages, HCL Digital Experience V9.5, V9.0, and V8.5 detailed system requirements topic. Note: For new capabilities that are available for HCL DX on-premise deployments, see What's new in the CF196 topic. Design Studio (Beta) Design Studio enables content managers and designers to build and style their digital site properties quickly. Available for use with DX 9.5 container-based deployments, Design Studio presents a modern, intuitive, and role-based tool aggregating all needed functions to visually assemble, curate, design, and model pages, content, and applications in DX sites. Note: Design Studio is provided for beta evaluation with HCL Digital Experience 9.5 Container Update CF196. It is not yet supported for use in production deployments . See the Design Studio (Beta) topic for more information. Deploy HCL DX CF196 to container platforms using Helm Beginning with HCL Digital Experience 9.5 Container Update CF196, administrators can deploy HCL DX 9.5 CF196 and later images to supported container platforms using Helm. Using a Helm Chart deployment can provide administrators a larger degree of transparency and control in deployment operations, and is available for use with the Google Kubernetes Engine (GKE) platform with Container Update CF196. See the HCL DX 9.5 Helm deployment topic for more information. Deploy HCL DX 9.5 using Docker Compose Beginning with HCL DX 9.5 Container Update CF196, administrators and developers can deploy HCL DX 9.5 using Docker Compose, for non-production use. Docker Compose scripts for HCL DX 9.5, installation, and configuration instructions for non-production use are available in the HCL Software Github page. See the Docker image deployment using Docker Compose topic for more information. Web Content Manager Multilingual Solution Enhancements The HCL Web Content Manager Multilingual Solution is a set of tools used to manage translated versions Web Content Manager content for localized and regionalized websites. Beginning with the HCL Digital Experience 9.5 Container Update CF196 release, support is added to import and export multiple libraries to a format supported by a translation service, support a maximum field length, export changed contents from a library, and export to projects. A new option to switch the language in an HCL DX 9.5 mobile view is also available. See the How to export and import WCM library content using DXClient and The Woodburn Studio demo site topics for more information. New HCL Digital Experience 9.5 Release Artifacts supporting CICD release processes The HCL Digital Experience 9.5 DXClient and DXConnect servlet provides developers and administrators an approach to deploy changes or improvements to the HCL Digital Experience platform, and automate processes in the development and delivery process. Updates include a new DXClient Docker image, and new release artifact types supporting shared libraries, obtain failed syndication reports are provided in Container Update CF196. See the DXClient and DXConnect tooling supporting CICD release processes topic for more information. HCL Digital Experience 9.5 Container Platform Support Matrix View the latest Kubernetes and OpenShift platforms tested and supported for specific HCL Digital Experience 9.5 Container Update deployments. See the HCL Digital Experience 9.5 Container Platform Support Matrix Help Center topic for more information. New HCL Digital Experience \u2018How To\u2019 Videos Take advantage of new step-by-step guidance for HCL Digital Experience practitioners presented in new videos and webinars. See the following HCL Digital Experience Help Center topics: Configuring user access permissions to Digital Asset Management assets Deep dive: Progressive Web Applications with HCL DX 9.5 Content Security Policy with HCL DX 9.5 Parent topic: Container Update releases 9.5","title":"What's new in Container Update CF196? 9.5 Containers"},{"location":"overview/newcf196/#whats-new-in-container-update-cf196-95-containers","text":"This HCL Digital Experience 9.5 Container Update release includes new releases of HCL Digital Experience 9.5 core Portal and Web Content Manager, Content Composer, Digital Asset Management, and Experience API images, and a beta preview release of Design Studio. New and updated feature references are detailed here. Go to the HCL Software Support Site and HCL DX Software Fix list for the list of software fixes, including Container Update releases. Product software can be accessed from the HCL Software Licensing Portal . Go to this Step-by-step guide to downloading DX products and accessing Customer Support for more information. The latest Software Requirements and Updates supporting HCL Digital Experience solutions may be accessed from the HCL Support pages, HCL Digital Experience V9.5, V9.0, and V8.5 detailed system requirements topic. Note: For new capabilities that are available for HCL DX on-premise deployments, see What's new in the CF196 topic.","title":"What's new in Container Update CF196? 9.5 Containers"},{"location":"overview/newcf196/#design-studio-beta","text":"Design Studio enables content managers and designers to build and style their digital site properties quickly. Available for use with DX 9.5 container-based deployments, Design Studio presents a modern, intuitive, and role-based tool aggregating all needed functions to visually assemble, curate, design, and model pages, content, and applications in DX sites. Note: Design Studio is provided for beta evaluation with HCL Digital Experience 9.5 Container Update CF196. It is not yet supported for use in production deployments . See the Design Studio (Beta) topic for more information.","title":"Design Studio (Beta)"},{"location":"overview/newcf196/#deploy-hcl-dx-cf196-to-container-platforms-using-helm","text":"Beginning with HCL Digital Experience 9.5 Container Update CF196, administrators can deploy HCL DX 9.5 CF196 and later images to supported container platforms using Helm. Using a Helm Chart deployment can provide administrators a larger degree of transparency and control in deployment operations, and is available for use with the Google Kubernetes Engine (GKE) platform with Container Update CF196. See the HCL DX 9.5 Helm deployment topic for more information.","title":"Deploy HCL DX CF196 to container platforms using Helm"},{"location":"overview/newcf196/#deploy-hcl-dx-95-using-docker-compose","text":"Beginning with HCL DX 9.5 Container Update CF196, administrators and developers can deploy HCL DX 9.5 using Docker Compose, for non-production use. Docker Compose scripts for HCL DX 9.5, installation, and configuration instructions for non-production use are available in the HCL Software Github page. See the Docker image deployment using Docker Compose topic for more information.","title":"Deploy HCL DX 9.5 using Docker Compose"},{"location":"overview/newcf196/#web-content-manager-multilingual-solution-enhancements","text":"The HCL Web Content Manager Multilingual Solution is a set of tools used to manage translated versions Web Content Manager content for localized and regionalized websites. Beginning with the HCL Digital Experience 9.5 Container Update CF196 release, support is added to import and export multiple libraries to a format supported by a translation service, support a maximum field length, export changed contents from a library, and export to projects. A new option to switch the language in an HCL DX 9.5 mobile view is also available. See the How to export and import WCM library content using DXClient and The Woodburn Studio demo site topics for more information.","title":"Web Content Manager Multilingual Solution Enhancements"},{"location":"overview/newcf196/#new-hcl-digital-experience-95-release-artifacts-supporting-cicd-release-processes","text":"The HCL Digital Experience 9.5 DXClient and DXConnect servlet provides developers and administrators an approach to deploy changes or improvements to the HCL Digital Experience platform, and automate processes in the development and delivery process. Updates include a new DXClient Docker image, and new release artifact types supporting shared libraries, obtain failed syndication reports are provided in Container Update CF196. See the DXClient and DXConnect tooling supporting CICD release processes topic for more information.","title":"New HCL Digital Experience 9.5 Release Artifacts supporting CICD release processes"},{"location":"overview/newcf196/#hcl-digital-experience-95-container-platform-support-matrix","text":"View the latest Kubernetes and OpenShift platforms tested and supported for specific HCL Digital Experience 9.5 Container Update deployments. See the HCL Digital Experience 9.5 Container Platform Support Matrix Help Center topic for more information.","title":"HCL Digital Experience 9.5 Container Platform Support Matrix"},{"location":"overview/newcf196/#new-hcl-digital-experience-how-to-videos","text":"Take advantage of new step-by-step guidance for HCL Digital Experience practitioners presented in new videos and webinars. See the following HCL Digital Experience Help Center topics: Configuring user access permissions to Digital Asset Management assets Deep dive: Progressive Web Applications with HCL DX 9.5 Content Security Policy with HCL DX 9.5 Parent topic: Container Update releases 9.5","title":"New HCL Digital Experience \u2018How To\u2019 Videos"},{"location":"overview/newcf197/","text":"What's new in Container Update CF197? 9.5 Containers This HCL Digital Experience 9.5 Container Update and CF197 release includes updated releases of HCL DX core Portal and Web Content Manager, Content Composer, Digital Asset Management and Experience API images, and an updated beta preview release of Design Studio. New and updated feature references are detailed here. Go to the HCL Software Support Site and HCL DX Software Fix list for the list of software fixes, including Container Update releases. Product software can be accessed from the HCL Software Licensing Portal . Go to this Step-by-step guide to downloading DX products and accessing Customer Support for more information. The latest Software Requirements and Updates supporting HCL Digital Experience solutions may be accessed from the HCL Support pages, HCL Digital Experience V9.5, V9.0, and V8.5 detailed system requirements topic. Design Studio (Beta) Design Studio enables content managers and designers to build and style their digital site properties quickly. Available for use with DX 9.5 container-based deployments, Design Studio presents a modern, intuitive, and role-based tool aggregating all needed functions to visually assemble, curate, design, and model pages, content, and applications in DX sites. New services available with the Container Update CF197 release include ability to render DX site pages and updates using the sample site, Ability to use the page editor to edit elements inline and update metadata, set locations for sites, set html tags for text elements, and more. Note: Design Studio is provided for beta evaluation with HCL Digital Experience 9.5 Container Update CF197, and includes a sample DX site. It is not yet supported for use in production deployments. See the Design Studio (Beta) topic for more information. Deploy HCL DX CF197 to container platforms using Helm Beginning with HCL Digital Experience 9.5 Container Update CF196, administrators can deploy HCL DX 9.5 CF196 and later images to supported container platforms using Helm. Using a Helm Chart deployment can provide administrators a larger degree of transparency and control in deployment operations. Support for new HCL DX 9.5 CF197 deployments to Red Hat OpenShift, Microsoft Azure Elastic Kubernetes Service (AKS) and Amazon Elastic Kubernetes Service (EKS),and ability to update from HCL DX 9.5 version CF196 to CF197 is supported with the Google Kubernetes Engine (GKE) platform. See the HCL DX 9.5 Helm deployment topic for more information. New HCL Digital Experience 9.5 Release Artifacts supporting CICD release processes The HCL Digital Experience 9.5 DXClient and DXConnect servlet provides developers and administrators an approach to deploy changes or improvements to the HCL Digital Experience platform, and automate processes in the development and delivery process. Updates include new release artifact types supporting, Obtain failed Syndication reports for single or multiple items, and delete Digital Asset Management inactive schema from Persistence are provided in CF197. See the DXClient and DXConnect tooling supporting CICD release processes topic for more information. HCL Digital Experience 9.5 Container Platform Support Matrix View the latest Kubernetes and OpenShift platforms tested and supported for specific HCL Digital Experience 9.5 Container Update deployments. See the HCL Digital Experience 9.5 Container Platform Support Matrix topic for more information. New HCL Digital Experience \u2018How To\u2019 Videos Take advantage of new step-by-step guidance for HCL Digital Experience practitioners presented in new videos and webinars. See the following HCL Digital Experience Help Center topics: Updating the HCL DX 9.5 Portal & IBM WebSphere Application Server Administrator Secrets in OpenShift and Kubernetes Use Docker Compose to install HCL DX 9.5 with Cloud Components for Developer Use Parent topic: Container Update releases 9.5","title":"What's new in Container Update CF197? 9.5 Containers"},{"location":"overview/newcf197/#whats-new-in-container-update-cf197-95-containers","text":"This HCL Digital Experience 9.5 Container Update and CF197 release includes updated releases of HCL DX core Portal and Web Content Manager, Content Composer, Digital Asset Management and Experience API images, and an updated beta preview release of Design Studio. New and updated feature references are detailed here. Go to the HCL Software Support Site and HCL DX Software Fix list for the list of software fixes, including Container Update releases. Product software can be accessed from the HCL Software Licensing Portal . Go to this Step-by-step guide to downloading DX products and accessing Customer Support for more information. The latest Software Requirements and Updates supporting HCL Digital Experience solutions may be accessed from the HCL Support pages, HCL Digital Experience V9.5, V9.0, and V8.5 detailed system requirements topic.","title":"What's new in Container Update CF197? 9.5 Containers"},{"location":"overview/newcf197/#design-studio-beta","text":"Design Studio enables content managers and designers to build and style their digital site properties quickly. Available for use with DX 9.5 container-based deployments, Design Studio presents a modern, intuitive, and role-based tool aggregating all needed functions to visually assemble, curate, design, and model pages, content, and applications in DX sites. New services available with the Container Update CF197 release include ability to render DX site pages and updates using the sample site, Ability to use the page editor to edit elements inline and update metadata, set locations for sites, set html tags for text elements, and more. Note: Design Studio is provided for beta evaluation with HCL Digital Experience 9.5 Container Update CF197, and includes a sample DX site. It is not yet supported for use in production deployments. See the Design Studio (Beta) topic for more information.","title":"Design Studio (Beta)"},{"location":"overview/newcf197/#deploy-hcl-dx-cf197-to-container-platforms-using-helm","text":"Beginning with HCL Digital Experience 9.5 Container Update CF196, administrators can deploy HCL DX 9.5 CF196 and later images to supported container platforms using Helm. Using a Helm Chart deployment can provide administrators a larger degree of transparency and control in deployment operations. Support for new HCL DX 9.5 CF197 deployments to Red Hat OpenShift, Microsoft Azure Elastic Kubernetes Service (AKS) and Amazon Elastic Kubernetes Service (EKS),and ability to update from HCL DX 9.5 version CF196 to CF197 is supported with the Google Kubernetes Engine (GKE) platform. See the HCL DX 9.5 Helm deployment topic for more information.","title":"Deploy HCL DX CF197 to container platforms using Helm"},{"location":"overview/newcf197/#new-hcl-digital-experience-95-release-artifacts-supporting-cicd-release-processes","text":"The HCL Digital Experience 9.5 DXClient and DXConnect servlet provides developers and administrators an approach to deploy changes or improvements to the HCL Digital Experience platform, and automate processes in the development and delivery process. Updates include new release artifact types supporting, Obtain failed Syndication reports for single or multiple items, and delete Digital Asset Management inactive schema from Persistence are provided in CF197. See the DXClient and DXConnect tooling supporting CICD release processes topic for more information.","title":"New HCL Digital Experience 9.5 Release Artifacts supporting CICD release processes"},{"location":"overview/newcf197/#hcl-digital-experience-95-container-platform-support-matrix","text":"View the latest Kubernetes and OpenShift platforms tested and supported for specific HCL Digital Experience 9.5 Container Update deployments. See the HCL Digital Experience 9.5 Container Platform Support Matrix topic for more information.","title":"HCL Digital Experience 9.5 Container Platform Support Matrix"},{"location":"overview/newcf197/#new-hcl-digital-experience-how-to-videos","text":"Take advantage of new step-by-step guidance for HCL Digital Experience practitioners presented in new videos and webinars. See the following HCL Digital Experience Help Center topics: Updating the HCL DX 9.5 Portal & IBM WebSphere Application Server Administrator Secrets in OpenShift and Kubernetes Use Docker Compose to install HCL DX 9.5 with Cloud Components for Developer Use Parent topic: Container Update releases 9.5","title":"New HCL Digital Experience \u2018How To\u2019 Videos"},{"location":"overview/newcf198/","text":"What's new in Container Update CF198? 9.5 Containers This HCL Digital Experience 9.5 Container Update and CF198 release includes new releases of HCL DX core Portal and Web Content Manager, Content Composer, Digital Asset Management, Experience API, Design Studio (Beta), new Helm deployment operations for container deployments, updated CICD release process artifacts, the new Site Manager Custom Layout Editor, HCL Digital Experience Technical Articles, \u2018How To\u2019 videos, and more. Go to the HCL Software Support Site and HCL DX Software Fix list for the list of software fixes, including Container Update releases. Product software can be accessed from the HCL Software Licensing Portal . Go to this Step-by-step guide to downloading DX products and accessing Customer Support for more information. The latest Software Requirements and Updates supporting HCL Digital Experience solutions may be accessed from the HCL Support pages, HCL Digital Experience V9.5, V9.0, and V8.5 detailed system requirements topic. Design Studio (Beta) Design Studio enables content managers and designers to build and style their digital site properties quickly. Available for use with DX 9.5 container-based deployments, Design Studio presents a modern, intuitive, and role-based tool aggregating all needed functions to visually assemble, curate, design, and model pages, content, and applications in DX sites. New features available with the Container Update CF198 release include the ability to create new DX sites, reading and updating site metadata, accessing site and page UUID and URLs, and client-side logging services. Note: Design Studio is provided for beta evaluation with HCL Digital Experience 9.5 Container Update CF198, and includes a sample DX site. It is not yet supported for use in production deployments. See the Design Studio (Beta) topic for more information. Deploy HCL DX CF198 to container platforms using Helm Beginning with HCL Digital Experience 9.5 Container Update CF196, administrators can deploy HCL DX 9.5 CF196 and later images to supported container platforms using Helm. Using a Helm Chart deployment can provide administrators more transparency and control in deployment operations. Support for hybrid deployments is provided, enabling to update from HCL DX 9.5 CF197 to CF198 in the Red Hat OpenShift, Microsoft Azure Elastic Kubernetes Service (AKS) and Amazon Elastic Kubernetes Service (EKS) platforms. See the HCL DX 9.5 Helm deployment topic for more information. New HCL Digital Experience 9.5 Release Artifacts supporting CICD release processes The HCL Digital Experience 9.5 DXClient and DXConnect servlet provides developers and administrators an approach to deploy changes or improvements to the HCL Digital Experience platform, and automate processes in the development and delivery process. Updates delivered in CF198 include process definitions to automate select IBM WebSphere Application Server settings during deployment, generate import and export lists of virtual portals, and import and export personalization rules. See the DXClient and DXConnect tooling supporting CICD release processes topic for more information. New HCL Digital Experience Site Manager Custom Layout Editor Beginning with HCL Digital Experience CF198, a Custom Layout Editor is available for use with HCL DX Site Manager capabilities, reducing custom development requirements for site designers implementing custom layouts in DX site pages. See the Using the Digital Experience Custom Layout Editor topic for more information. New Experience APIs New HCL Experience Web Content Manager REST APIs are available for new menu component update, collection responses conversion utilities, the ability to use the page editor to edit elements inline and update metadata, set locations for sites, set HTML tags for text elements, and more. See the HCL DX Experience API topic for more information Rationalized CF release versioning Beginning with HCL Digital Experience CF196, single versioning is used for both container and on-premise Combined Cumulative Fixes (CFs). This means that fixes for both deployments are included into one CF deliverable. And although the versioning is the same, CFs are packaged separately for on-premises and container deployments. See the CF release versioning and update path topic for more information. New HCL Digital Experience \u2018How To\u2019 Videos Take advantage of new step-by-step guidance for HCL Digital Experience practitioners presented in articles and videos from the following HCL Digital Experience Help Center topics: Video: Creating an HCL Digital Experience 9.5 CF196 cluster Step-by-step guide: How to deploy HCL DX Container update CF197 and later to Microsoft Azure Kubernetes Service HCL Digital Experience 9.5 Container Platform Support Matrix View the latest Kubernetes and OpenShift platforms tested and supported for specific HCL Digital Experience 9.5 Container Update deployments. See the HCL Digital Experience 9.5 Container Platform Support Matrix topic for more information. Parent topic: Container Update releases 9.5","title":"What's new in Container Update CF198? 9.5 Containers"},{"location":"overview/newcf198/#whats-new-in-container-update-cf198-95-containers","text":"This HCL Digital Experience 9.5 Container Update and CF198 release includes new releases of HCL DX core Portal and Web Content Manager, Content Composer, Digital Asset Management, Experience API, Design Studio (Beta), new Helm deployment operations for container deployments, updated CICD release process artifacts, the new Site Manager Custom Layout Editor, HCL Digital Experience Technical Articles, \u2018How To\u2019 videos, and more. Go to the HCL Software Support Site and HCL DX Software Fix list for the list of software fixes, including Container Update releases. Product software can be accessed from the HCL Software Licensing Portal . Go to this Step-by-step guide to downloading DX products and accessing Customer Support for more information. The latest Software Requirements and Updates supporting HCL Digital Experience solutions may be accessed from the HCL Support pages, HCL Digital Experience V9.5, V9.0, and V8.5 detailed system requirements topic.","title":"What's new in Container Update CF198? 9.5 Containers"},{"location":"overview/newcf198/#design-studio-beta","text":"Design Studio enables content managers and designers to build and style their digital site properties quickly. Available for use with DX 9.5 container-based deployments, Design Studio presents a modern, intuitive, and role-based tool aggregating all needed functions to visually assemble, curate, design, and model pages, content, and applications in DX sites. New features available with the Container Update CF198 release include the ability to create new DX sites, reading and updating site metadata, accessing site and page UUID and URLs, and client-side logging services. Note: Design Studio is provided for beta evaluation with HCL Digital Experience 9.5 Container Update CF198, and includes a sample DX site. It is not yet supported for use in production deployments. See the Design Studio (Beta) topic for more information.","title":"Design Studio (Beta)"},{"location":"overview/newcf198/#deploy-hcl-dx-cf198-to-container-platforms-using-helm","text":"Beginning with HCL Digital Experience 9.5 Container Update CF196, administrators can deploy HCL DX 9.5 CF196 and later images to supported container platforms using Helm. Using a Helm Chart deployment can provide administrators more transparency and control in deployment operations. Support for hybrid deployments is provided, enabling to update from HCL DX 9.5 CF197 to CF198 in the Red Hat OpenShift, Microsoft Azure Elastic Kubernetes Service (AKS) and Amazon Elastic Kubernetes Service (EKS) platforms. See the HCL DX 9.5 Helm deployment topic for more information.","title":"Deploy HCL DX CF198 to container platforms using Helm"},{"location":"overview/newcf198/#new-hcl-digital-experience-95-release-artifacts-supporting-cicd-release-processes","text":"The HCL Digital Experience 9.5 DXClient and DXConnect servlet provides developers and administrators an approach to deploy changes or improvements to the HCL Digital Experience platform, and automate processes in the development and delivery process. Updates delivered in CF198 include process definitions to automate select IBM WebSphere Application Server settings during deployment, generate import and export lists of virtual portals, and import and export personalization rules. See the DXClient and DXConnect tooling supporting CICD release processes topic for more information.","title":"New HCL Digital Experience 9.5 Release Artifacts supporting CICD release processes"},{"location":"overview/newcf198/#new-hcl-digital-experience-site-manager-custom-layout-editor","text":"Beginning with HCL Digital Experience CF198, a Custom Layout Editor is available for use with HCL DX Site Manager capabilities, reducing custom development requirements for site designers implementing custom layouts in DX site pages. See the Using the Digital Experience Custom Layout Editor topic for more information.","title":"New HCL Digital Experience Site Manager Custom Layout Editor"},{"location":"overview/newcf198/#new-experience-apis","text":"New HCL Experience Web Content Manager REST APIs are available for new menu component update, collection responses conversion utilities, the ability to use the page editor to edit elements inline and update metadata, set locations for sites, set HTML tags for text elements, and more. See the HCL DX Experience API topic for more information","title":"New Experience APIs"},{"location":"overview/newcf198/#rationalized-cf-release-versioning","text":"Beginning with HCL Digital Experience CF196, single versioning is used for both container and on-premise Combined Cumulative Fixes (CFs). This means that fixes for both deployments are included into one CF deliverable. And although the versioning is the same, CFs are packaged separately for on-premises and container deployments. See the CF release versioning and update path topic for more information.","title":"Rationalized CF release versioning"},{"location":"overview/newcf198/#new-hcl-digital-experience-how-to-videos","text":"Take advantage of new step-by-step guidance for HCL Digital Experience practitioners presented in articles and videos from the following HCL Digital Experience Help Center topics: Video: Creating an HCL Digital Experience 9.5 CF196 cluster Step-by-step guide: How to deploy HCL DX Container update CF197 and later to Microsoft Azure Kubernetes Service","title":"New HCL Digital Experience \u2018How To\u2019 Videos"},{"location":"overview/newcf198/#hcl-digital-experience-95-container-platform-support-matrix","text":"View the latest Kubernetes and OpenShift platforms tested and supported for specific HCL Digital Experience 9.5 Container Update deployments. See the HCL Digital Experience 9.5 Container Platform Support Matrix topic for more information. Parent topic: Container Update releases 9.5","title":"HCL Digital Experience 9.5 Container Platform Support Matrix"},{"location":"overview/newcf199/","text":"What's new in Container Update CF199? 9.5 Containers This HCL Digital Experience 9.5 Container Update and CF199 release includes new releases of HCL DX core Portal and Web Content Manager, Content Composer, Digital Asset Management, Experience API, Design Studio (Beta), new Helm deployment operations for container deployments, updated CICD release process artifacts, \u201cHow To\u201d videos, and more. Go to the HCL Software Support Site and HCL DX Software Fix list for the list of software fixes, including Container Update releases. Product software can be accessed from the HCL Software Licensing Portal . Go to this Step-by-step guide to downloading DX products and accessing Customer Support for more information. The latest Software Requirements and Updates supporting HCL Digital Experience solutions may be accessed from the HCL Support pages, HCL Digital Experience V9.5, V9.0, and V8.5 detailed system requirements topic. Design Studio (Beta) Design Studio enables content managers and designers to build and style their digital site properties quickly. Available for use with DX 9.5 container-based deployments, Design Studio presents a modern, intuitive, and role-based tool aggregating all needed functions to visually assemble, curate, design, and model pages, content, and applications in DX sites. New features available with the Container Update CF199 release include the ability to select Web Content Manager library assets when creating sites, UI globalization, support for alternate and no context root when defining sites, and more. Note: Design Studio is provided for beta evaluation with HCL Digital Experience 9.5 Container Update CF196, and includes a sample DX site. It is not yet supported for use in production deployments. See the Design Studio (Beta) topic for more information. Migrate from HCL DX 9.5 Operator to Helm Deployments Beginning with HCL Digital Experience 9.5 Container Update CF196, administrators can deploy HCL DX 9.5 CF196 and later images to supported container platforms using Helm. Using a Helm Chart deployment can provide administrators more transparency and control in deployment operations. Beginning with Container Update CF199, support for migration from Operator-based (dxctl) to Helm-based deployments is provided. See the HCL DX 9.5 Helm deployment topic for more information. Digital Asset Management Staging New Digital Asset Management (DAM) staging support enables administrators to stage and synchronize DAM assets from an authoring environment (source environment/publisher) to multiple rendering environments (target environment/subscriber), using DXClient. See the DAM staging topic for more information. New HCL Digital Experience 9.5 Release Artifacts supporting CICD release processes The HCL Digital Experience 9.5 DXClient and DXConnect servlet provides developers and administrators an approach to deploy changes or improvements to the HCL Digital Experience platform, and to automate processes in the development and delivery process. Updates include process definitions to automate Export and Import of select IBM WebSphere Application Server Resource Provider settings during deployment, and to create Syndication relationships and credential vault settings. See the DXClient and DXConnect tooling supporting CICD release processes topic for more information. End of Support for HCL Digital Experience Deprecated Features The following list of HCL Digital Experience deprecated features will reach end of support beginning with Container update and CF200 release. Refer to the Deprecated features and themes for HCL Digital Experience 9.5 topic in the Help Center. New Experience APIs New HCL Experience APIs are available for creating, updating and deleting Design Studio (Beta) sites, pages, and containers. New Web Content Manager REST V2 APIs are available for creating content templates, categories, and more. See the HCL Experience API topic for more information. New REST APIs to Configure Remote Search Beginning with HCL Digital Experience CF and Container Update CF199, additional REST services enable administrators and developers to programatically configure remote search in on-premises and container-based Digital Experience deployments. See the Configure Remote Search using REST APIs topic for more information. New HCL Digital Experience \u2018How To\u2019 Videos Take advantage of new step-by-step guidance for HCL Digital Experience practitioners presented in articles and videos from the following HCL Digital Experience Help Center topics: Video: Deploy HCL DX 9.5 Container Update using Helm Video: Experience API V2 Web Content Manager REST APIs Parent topic: Container Update releases 9.5","title":"What's new in Container Update CF199? 9.5 Containers"},{"location":"overview/newcf199/#whats-new-in-container-update-cf199-95-containers","text":"This HCL Digital Experience 9.5 Container Update and CF199 release includes new releases of HCL DX core Portal and Web Content Manager, Content Composer, Digital Asset Management, Experience API, Design Studio (Beta), new Helm deployment operations for container deployments, updated CICD release process artifacts, \u201cHow To\u201d videos, and more. Go to the HCL Software Support Site and HCL DX Software Fix list for the list of software fixes, including Container Update releases. Product software can be accessed from the HCL Software Licensing Portal . Go to this Step-by-step guide to downloading DX products and accessing Customer Support for more information. The latest Software Requirements and Updates supporting HCL Digital Experience solutions may be accessed from the HCL Support pages, HCL Digital Experience V9.5, V9.0, and V8.5 detailed system requirements topic.","title":"What's new in Container Update CF199? 9.5 Containers"},{"location":"overview/newcf199/#design-studio-beta","text":"Design Studio enables content managers and designers to build and style their digital site properties quickly. Available for use with DX 9.5 container-based deployments, Design Studio presents a modern, intuitive, and role-based tool aggregating all needed functions to visually assemble, curate, design, and model pages, content, and applications in DX sites. New features available with the Container Update CF199 release include the ability to select Web Content Manager library assets when creating sites, UI globalization, support for alternate and no context root when defining sites, and more. Note: Design Studio is provided for beta evaluation with HCL Digital Experience 9.5 Container Update CF196, and includes a sample DX site. It is not yet supported for use in production deployments. See the Design Studio (Beta) topic for more information.","title":"Design Studio (Beta)"},{"location":"overview/newcf199/#migrate-from-hcl-dx-95-operator-to-helm-deployments","text":"Beginning with HCL Digital Experience 9.5 Container Update CF196, administrators can deploy HCL DX 9.5 CF196 and later images to supported container platforms using Helm. Using a Helm Chart deployment can provide administrators more transparency and control in deployment operations. Beginning with Container Update CF199, support for migration from Operator-based (dxctl) to Helm-based deployments is provided. See the HCL DX 9.5 Helm deployment topic for more information.","title":"Migrate from HCL DX 9.5 Operator to Helm Deployments"},{"location":"overview/newcf199/#digital-asset-management-staging","text":"New Digital Asset Management (DAM) staging support enables administrators to stage and synchronize DAM assets from an authoring environment (source environment/publisher) to multiple rendering environments (target environment/subscriber), using DXClient. See the DAM staging topic for more information.","title":"Digital Asset Management Staging"},{"location":"overview/newcf199/#new-hcl-digital-experience-95-release-artifacts-supporting-cicd-release-processes","text":"The HCL Digital Experience 9.5 DXClient and DXConnect servlet provides developers and administrators an approach to deploy changes or improvements to the HCL Digital Experience platform, and to automate processes in the development and delivery process. Updates include process definitions to automate Export and Import of select IBM WebSphere Application Server Resource Provider settings during deployment, and to create Syndication relationships and credential vault settings. See the DXClient and DXConnect tooling supporting CICD release processes topic for more information.","title":"New HCL Digital Experience 9.5 Release Artifacts supporting CICD release processes"},{"location":"overview/newcf199/#end-of-support-for-hcl-digital-experience-deprecated-features","text":"The following list of HCL Digital Experience deprecated features will reach end of support beginning with Container update and CF200 release. Refer to the Deprecated features and themes for HCL Digital Experience 9.5 topic in the Help Center.","title":"End of Support for HCL Digital Experience Deprecated Features"},{"location":"overview/newcf199/#new-experience-apis","text":"New HCL Experience APIs are available for creating, updating and deleting Design Studio (Beta) sites, pages, and containers. New Web Content Manager REST V2 APIs are available for creating content templates, categories, and more. See the HCL Experience API topic for more information.","title":"New Experience APIs"},{"location":"overview/newcf199/#new-rest-apis-to-configure-remote-search","text":"Beginning with HCL Digital Experience CF and Container Update CF199, additional REST services enable administrators and developers to programatically configure remote search in on-premises and container-based Digital Experience deployments. See the Configure Remote Search using REST APIs topic for more information.","title":"New REST APIs to Configure Remote Search"},{"location":"overview/newcf199/#new-hcl-digital-experience-how-to-videos","text":"Take advantage of new step-by-step guidance for HCL Digital Experience practitioners presented in articles and videos from the following HCL Digital Experience Help Center topics: Video: Deploy HCL DX 9.5 Container Update using Helm Video: Experience API V2 Web Content Manager REST APIs Parent topic: Container Update releases 9.5","title":"New HCL Digital Experience \u2018How To\u2019 Videos"},{"location":"overview/newcf200/","text":"What's new in Container Update CF200? 9.5 Containers This HCL Digital Experience 9.5 Container Update and CF200 release includes updated releases of HCL DX core Portal and Web Content Manager, Content Composer, Digital Asset Management, Experience API, Design Studio (Beta), new Helm deployment operations for container deployments and migration from Operator deployments, updated CICD release process artifacts, new DX API and Explorer services for Personalization, Search and User and Groups REST APIs, new Digital Experience 9.5 Demo Packs on HCL Sofy, new \u2018How To\u2019 videos, and more. Go to the HCL Software Support Site and HCL DX Software Fix list for the list of software fixes, including Container Update releases. Product software can be accessed from the HCL Software Licensing Portal . Go to this Step-by-step guide to downloading DX products and accessing Customer Support for more information. The latest Software Requirements and Updates supporting HCL Digital Experience solutions may be accessed from the HCL Support pages, HCL Digital Experience V9.5, V9.0, and V8.5 detailed system requirements topic. Design Studio (Beta) Design Studio enables content managers and designers to build and style their digital site properties quickly. Available for use with DX 9.5 container-based deployments, Design Studio presents a modern, intuitive, and role-based tool aggregating all needed functions to visually assemble, curate, design, and model pages, content, and applications in DX sites. New features available with Container Update CF200 include Page creation shortcuts, Delete Site from Overview menu, Define Site base stylesheet, Rename Content container and more. Note: Note: Design Studio is provided for beta evaluation with HCL Digital Experience 9.5 Container Update CF200, and includes a sample DX site. It is not yet supported for use in production deployments. See the Design Studio (Beta) Help Center topic for more information. Deploy HCL DX 9.5 Container Update to container platforms using Helm Beginning with HCL Digital Experience 9.5 Container Update CF196, administrators can deploy HCL DX 9.5 CF196 and later images to supported container platforms using Helm. Using a Helm Chart deployment can provide administrators more transparency and control in deployment operations. Beginning with Container Update CF200, new servies and updates include support for Sidecars for logging of Remote Search, define central logs location, Incubator section for future DX 9.5 Container Update features, Configuration of labels and annotations, also environment variables for different DX resources, Use of Persistent Volumes for DX 9.5 Core, Digital Asset Management, and Persistence services file storage, migration process for the Core profile from Operator to Helm deployment, and Helm based Version to Version Update process. Important: Beginning with HCL DX Container Update CF200, use of the Operator (dxctl) method of container deployment is not supported. Customers should use Helm deployments and migrate existing Operator-based deployments to Helm. See the HCL DX 9.5 Helm deployment topic for more information. Digital Asset Management New Digital Asset Management (DAM) staging support enables administrators to stage and synchronize DAM assets from an authoring environment (source environment/publisher) to multiple rendering environments (target environment/subscriber), using DXClient. See the DAM staging Help Center topic for more information. Support to migrate from the old to new Digital Asset Management database in the Helm-based deployments. See the Migrate to new DAM DB in Helm-based deployments Help Center topic for more information. New HCL Digital Experience 9.5 Release Artifacts supporting CICD release processes The HCL Digital Experience 9.5 DXClient and DXConnect servlet provides developers and administrators an approach to deploy changes or improvements to the HCL Digital Experience platform, and to automate processes in the development and delivery process. Updates include process definitions to automate Export or Import of Web Content Manager libraries from source server to target server location, also ability to generate differential reports for DX Server configurations. See the DXClient and DXConnect tooling supporting CICD release processes topic for more information. New User and Groups REST API Explorer The remote PUMA SPI gives you access to user profiles through REST services. It provides a remote interface for user and group management for the configured HCL DX user repository. Beginning with HCL DX 9.5 Container Update and CF 199, a new API explorer is available that allows developers using the Portal User Interface APIs to explore and test these APIs. See the Help Center topic Remote REST service for PUMA for additional information. New Personalization REST APIs and Explorer Beginning with HCL DX 9.5 Container Update and CF200 , a new API explorer is available that allows developers using the new Digital Experience Personalization REST APIs to explore and test these APIs. See the Digital Experience Personalization Help Center topic for more information. New Search REST APIs Explorer The Digital Experience Search REST API provides developers programmatic access to search indexed Digital Experience content and web pages. Beginning with Container and CF Update CF200, a new Digital Experience Search REST API Explorer allows developers to explore and test the Digital Experience Search REST APIs. See the HCL Digital Experience Search REST API Specification Help Center topic for more information. Access and Deploy HCL Digital Experience 9.5 on HCL Sofy HCL SoFy is a next generation software development platform that accelerates deployment and integration of cloud-native products through the application of cloud-centered technologies and practices. Using HCL SoFy to access and deploy HCL Digital Experience 9.5, and other HCL software offerings and demo packs, you can quickly gain hands-on experience working with these cloud-native solutions. See the Deploying HCL Digital Experience 9.5 with HCL Solution Factory (SoFy) Help Center topic for more information. New How-To Video Take advantage of step-by-step guidance for HCL Digital Experience practitioners presented in articles and videos included in HCL Digital Experience Help Center topics. New : Learn how to manage and monitor HCL DX 9.5 Container Deployment Liveliness and Readiness probes. See the Help Center topic: Operations using Helm . End of Support for HCL Digital Experience Deprecated Features The following list of HCL Digital Experience deprecated features will reach end of support beginning with HCL Digital Experience Container update and CF 200. Reference the Help Center topic Deprecated features and themes for HCL Digital Experience 9.5 . Parent topic: Container Update releases 9.5","title":"What's new in Container Update CF200? 9.5 Containers"},{"location":"overview/newcf200/#whats-new-in-container-update-cf200-95-containers","text":"This HCL Digital Experience 9.5 Container Update and CF200 release includes updated releases of HCL DX core Portal and Web Content Manager, Content Composer, Digital Asset Management, Experience API, Design Studio (Beta), new Helm deployment operations for container deployments and migration from Operator deployments, updated CICD release process artifacts, new DX API and Explorer services for Personalization, Search and User and Groups REST APIs, new Digital Experience 9.5 Demo Packs on HCL Sofy, new \u2018How To\u2019 videos, and more. Go to the HCL Software Support Site and HCL DX Software Fix list for the list of software fixes, including Container Update releases. Product software can be accessed from the HCL Software Licensing Portal . Go to this Step-by-step guide to downloading DX products and accessing Customer Support for more information. The latest Software Requirements and Updates supporting HCL Digital Experience solutions may be accessed from the HCL Support pages, HCL Digital Experience V9.5, V9.0, and V8.5 detailed system requirements topic.","title":"What's new in Container Update CF200? 9.5 Containers"},{"location":"overview/newcf200/#design-studio-beta","text":"Design Studio enables content managers and designers to build and style their digital site properties quickly. Available for use with DX 9.5 container-based deployments, Design Studio presents a modern, intuitive, and role-based tool aggregating all needed functions to visually assemble, curate, design, and model pages, content, and applications in DX sites. New features available with Container Update CF200 include Page creation shortcuts, Delete Site from Overview menu, Define Site base stylesheet, Rename Content container and more. Note: Note: Design Studio is provided for beta evaluation with HCL Digital Experience 9.5 Container Update CF200, and includes a sample DX site. It is not yet supported for use in production deployments. See the Design Studio (Beta) Help Center topic for more information.","title":"Design Studio (Beta)"},{"location":"overview/newcf200/#deploy-hcl-dx-95-container-update-to-container-platforms-using-helm","text":"Beginning with HCL Digital Experience 9.5 Container Update CF196, administrators can deploy HCL DX 9.5 CF196 and later images to supported container platforms using Helm. Using a Helm Chart deployment can provide administrators more transparency and control in deployment operations. Beginning with Container Update CF200, new servies and updates include support for Sidecars for logging of Remote Search, define central logs location, Incubator section for future DX 9.5 Container Update features, Configuration of labels and annotations, also environment variables for different DX resources, Use of Persistent Volumes for DX 9.5 Core, Digital Asset Management, and Persistence services file storage, migration process for the Core profile from Operator to Helm deployment, and Helm based Version to Version Update process. Important: Beginning with HCL DX Container Update CF200, use of the Operator (dxctl) method of container deployment is not supported. Customers should use Helm deployments and migrate existing Operator-based deployments to Helm. See the HCL DX 9.5 Helm deployment topic for more information.","title":"Deploy HCL DX 9.5 Container Update to container platforms using Helm"},{"location":"overview/newcf200/#digital-asset-management","text":"New Digital Asset Management (DAM) staging support enables administrators to stage and synchronize DAM assets from an authoring environment (source environment/publisher) to multiple rendering environments (target environment/subscriber), using DXClient. See the DAM staging Help Center topic for more information. Support to migrate from the old to new Digital Asset Management database in the Helm-based deployments. See the Migrate to new DAM DB in Helm-based deployments Help Center topic for more information.","title":"Digital Asset Management"},{"location":"overview/newcf200/#new-hcl-digital-experience-95-release-artifacts-supporting-cicd-release-processes","text":"The HCL Digital Experience 9.5 DXClient and DXConnect servlet provides developers and administrators an approach to deploy changes or improvements to the HCL Digital Experience platform, and to automate processes in the development and delivery process. Updates include process definitions to automate Export or Import of Web Content Manager libraries from source server to target server location, also ability to generate differential reports for DX Server configurations. See the DXClient and DXConnect tooling supporting CICD release processes topic for more information.","title":"New HCL Digital Experience 9.5 Release Artifacts supporting CICD release processes"},{"location":"overview/newcf200/#new-user-and-groups-rest-api-explorer","text":"The remote PUMA SPI gives you access to user profiles through REST services. It provides a remote interface for user and group management for the configured HCL DX user repository. Beginning with HCL DX 9.5 Container Update and CF 199, a new API explorer is available that allows developers using the Portal User Interface APIs to explore and test these APIs. See the Help Center topic Remote REST service for PUMA for additional information.","title":"New User and Groups REST API Explorer"},{"location":"overview/newcf200/#new-personalization-rest-apis-and-explorer","text":"Beginning with HCL DX 9.5 Container Update and CF200 , a new API explorer is available that allows developers using the new Digital Experience Personalization REST APIs to explore and test these APIs. See the Digital Experience Personalization Help Center topic for more information.","title":"New Personalization REST APIs and Explorer"},{"location":"overview/newcf200/#new-search-rest-apis-explorer","text":"The Digital Experience Search REST API provides developers programmatic access to search indexed Digital Experience content and web pages. Beginning with Container and CF Update CF200, a new Digital Experience Search REST API Explorer allows developers to explore and test the Digital Experience Search REST APIs. See the HCL Digital Experience Search REST API Specification Help Center topic for more information.","title":"New Search REST APIs Explorer"},{"location":"overview/newcf200/#access-and-deploy-hcl-digital-experience-95-on-hcl-sofy","text":"HCL SoFy is a next generation software development platform that accelerates deployment and integration of cloud-native products through the application of cloud-centered technologies and practices. Using HCL SoFy to access and deploy HCL Digital Experience 9.5, and other HCL software offerings and demo packs, you can quickly gain hands-on experience working with these cloud-native solutions. See the Deploying HCL Digital Experience 9.5 with HCL Solution Factory (SoFy) Help Center topic for more information.","title":"Access and Deploy HCL Digital Experience 9.5 on HCL Sofy"},{"location":"overview/newcf200/#new-how-to-video","text":"Take advantage of step-by-step guidance for HCL Digital Experience practitioners presented in articles and videos included in HCL Digital Experience Help Center topics. New : Learn how to manage and monitor HCL DX 9.5 Container Deployment Liveliness and Readiness probes. See the Help Center topic: Operations using Helm .","title":"New How-To Video"},{"location":"overview/newcf200/#end-of-support-for-hcl-digital-experience-deprecated-features","text":"The following list of HCL Digital Experience deprecated features will reach end of support beginning with HCL Digital Experience Container update and CF 200. Reference the Help Center topic Deprecated features and themes for HCL Digital Experience 9.5 . Parent topic: Container Update releases 9.5","title":"End of Support for HCL Digital Experience Deprecated Features"},{"location":"overview/newcf201/","text":"What's new in Container Update CF201? 9.5 Containers This HCL Digital Experience 9.5 Container Update and CF201 release includes updated releases of HCL DX core Portal and Web Content Manager, Content Composer, Digital Asset Management, Experience API, and Design Studio (Beta) components. The release also includes updated CICD release process artifacts, new DX Personalization REST APIs, Updated Helm deployment and logging capacity, LDAP, and environment configuration guidance, also metrics and visualization samples, Script Application updates, new React profile for the DX 8.5 sample Theme, extensibility plugin and sample for Digital Asset Management, and more. Go to the HCL Software Support Site and HCL DX Software Fix list for the list of software fixes, including Container Update releases. Product software can be accessed from the HCL Software Licensing Portal . Go to this Step-by-step guide to downloading DX products and accessing Customer Support for more information. The latest Software Requirements and Updates supporting HCL Digital Experience solutions may be accessed from the HCL Support pages, HCL Digital Experience V9.5, V9.0, and V8.5 detailed system requirements topic. The following features and updates are available to customers installing HCL Digital Experience on supported on-premises and container platforms, effective with HCL Digital Experience CF201: Deploy HCL DX 9.5 Container Update to container platforms using Helm Beginning with HCL Digital Experience 9.5 Container Update CF196, administrators can deploy HCL DX 9.5 CF196 and later images to supported container platforms using Helm. Using a Helm Chart deployment can provide administrators more transparency and control in deployment operations. Beginning with Container Update CF201, updated capacity requirements are published for Digital Experience components, services, and logging. Options to configure environment values, expanded LDAP configuration guidance, and Prometheus metrics and Grafana visualization dashboard samples are provided for administrators to manage, monitor and optimize their deployments. See the following Help Center topics for more information: HCL DX 9.5 Helm deployment Containerization Requirements and Limitations Additional Helm Tasks Monitor the HCL Digital Experience Container Deployment using Metrics Digital Asset Management New Digital Asset Management (DAM) capability enables developers to use and customize an extensibility plugin, with a customized sample provided use with Digital Asset Management. The DAM Extensibility capability adds support DAM to process user-defined custom renditions and transformations for images. This feature can be used to integrate with third-party plug-ins for custom asset processing, for example, to resize, crop, rotate, or other custom operations, while also supporting default and custom renditions. See the Using DAM Extensibility Help Center topic for more information. Script Application Updates New features and updates available for the Script Application include a new configuration task for use to configure Web Content Manager properties used to run Single Page Applications (SPAs) that use React or Angular. Improvements are added to support uploads of minified content for use in production SPAs. An out-of-the-box React profile, \u201cDeferred with React,\u201d is added for use with the Digital Experience 8.5 Theme . See the Script Application Improvements topic in the HCL Digital Experience 9.5 or HCL Digital Experience 8.5 Help center pages, as applicable to your HCL DX deployment, for more information. New HCL Digital Experience 9.5 Release Artifacts supporting CICD release processes The HCL Digital Experience 9.5 DXClient and DXConnect servlet provides developers and administrators an approach to deploy changes or improvements to the HCL Digital Experience platform, and to automate processes in the development and delivery process. Updates include ability to view and manipulate custom Resource Environment Provider (REP) settings, with examples. See the DXClient and DXConnect tooling supporting CICD release processes topic for more information. New Personalization REST APIs New Personalization REST APIs supporting Personalization Folder operations are available with HCL Digital Experience Container Update and CF201. See the Help Center topic Personalization Folder APIs for more information. Language switcher update Introduced in Container Update CF201, you can disable the language switcher by setting disable.languageSwitcher to true at the root page level in the configuration page. When set to true , the language switcher is hidden from the portal interface. See the Help Center topic Disabling the language switcher for more information. Access the latest HCL Digital Experience 9.5 Education Materials on HCL Software Academy The HCL Software Academy offers technical education for the HCL Software portfolio of products, organized by practitioner role. New modules are available for Digital Experience developers and administrators. See the HCL Digital Experience section of the HCL Software Academy for more information. Parent topic: Container Update releases 9.5","title":"What's new in Container Update CF201? 9.5 Containers"},{"location":"overview/newcf201/#whats-new-in-container-update-cf201-95-containers","text":"This HCL Digital Experience 9.5 Container Update and CF201 release includes updated releases of HCL DX core Portal and Web Content Manager, Content Composer, Digital Asset Management, Experience API, and Design Studio (Beta) components. The release also includes updated CICD release process artifacts, new DX Personalization REST APIs, Updated Helm deployment and logging capacity, LDAP, and environment configuration guidance, also metrics and visualization samples, Script Application updates, new React profile for the DX 8.5 sample Theme, extensibility plugin and sample for Digital Asset Management, and more. Go to the HCL Software Support Site and HCL DX Software Fix list for the list of software fixes, including Container Update releases. Product software can be accessed from the HCL Software Licensing Portal . Go to this Step-by-step guide to downloading DX products and accessing Customer Support for more information. The latest Software Requirements and Updates supporting HCL Digital Experience solutions may be accessed from the HCL Support pages, HCL Digital Experience V9.5, V9.0, and V8.5 detailed system requirements topic. The following features and updates are available to customers installing HCL Digital Experience on supported on-premises and container platforms, effective with HCL Digital Experience CF201:","title":"What's new in Container Update CF201? 9.5 Containers"},{"location":"overview/newcf201/#deploy-hcl-dx-95-container-update-to-container-platforms-using-helm","text":"Beginning with HCL Digital Experience 9.5 Container Update CF196, administrators can deploy HCL DX 9.5 CF196 and later images to supported container platforms using Helm. Using a Helm Chart deployment can provide administrators more transparency and control in deployment operations. Beginning with Container Update CF201, updated capacity requirements are published for Digital Experience components, services, and logging. Options to configure environment values, expanded LDAP configuration guidance, and Prometheus metrics and Grafana visualization dashboard samples are provided for administrators to manage, monitor and optimize their deployments. See the following Help Center topics for more information: HCL DX 9.5 Helm deployment Containerization Requirements and Limitations Additional Helm Tasks Monitor the HCL Digital Experience Container Deployment using Metrics","title":"Deploy HCL DX 9.5 Container Update to container platforms using Helm"},{"location":"overview/newcf201/#digital-asset-management","text":"New Digital Asset Management (DAM) capability enables developers to use and customize an extensibility plugin, with a customized sample provided use with Digital Asset Management. The DAM Extensibility capability adds support DAM to process user-defined custom renditions and transformations for images. This feature can be used to integrate with third-party plug-ins for custom asset processing, for example, to resize, crop, rotate, or other custom operations, while also supporting default and custom renditions. See the Using DAM Extensibility Help Center topic for more information.","title":"Digital Asset Management"},{"location":"overview/newcf201/#script-application-updates","text":"New features and updates available for the Script Application include a new configuration task for use to configure Web Content Manager properties used to run Single Page Applications (SPAs) that use React or Angular. Improvements are added to support uploads of minified content for use in production SPAs. An out-of-the-box React profile, \u201cDeferred with React,\u201d is added for use with the Digital Experience 8.5 Theme . See the Script Application Improvements topic in the HCL Digital Experience 9.5 or HCL Digital Experience 8.5 Help center pages, as applicable to your HCL DX deployment, for more information.","title":"Script Application Updates"},{"location":"overview/newcf201/#new-hcl-digital-experience-95-release-artifacts-supporting-cicd-release-processes","text":"The HCL Digital Experience 9.5 DXClient and DXConnect servlet provides developers and administrators an approach to deploy changes or improvements to the HCL Digital Experience platform, and to automate processes in the development and delivery process. Updates include ability to view and manipulate custom Resource Environment Provider (REP) settings, with examples. See the DXClient and DXConnect tooling supporting CICD release processes topic for more information.","title":"New HCL Digital Experience 9.5 Release Artifacts supporting CICD release processes"},{"location":"overview/newcf201/#new-personalization-rest-apis","text":"New Personalization REST APIs supporting Personalization Folder operations are available with HCL Digital Experience Container Update and CF201. See the Help Center topic Personalization Folder APIs for more information.","title":"New Personalization REST APIs"},{"location":"overview/newcf201/#language-switcher-update","text":"Introduced in Container Update CF201, you can disable the language switcher by setting disable.languageSwitcher to true at the root page level in the configuration page. When set to true , the language switcher is hidden from the portal interface. See the Help Center topic Disabling the language switcher for more information.","title":"Language switcher update"},{"location":"overview/newcf201/#access-the-latest-hcl-digital-experience-95-education-materials-on-hcl-software-academy","text":"The HCL Software Academy offers technical education for the HCL Software portfolio of products, organized by practitioner role. New modules are available for Digital Experience developers and administrators. See the HCL Digital Experience section of the HCL Software Academy for more information. Parent topic: Container Update releases 9.5","title":"Access the latest HCL Digital Experience 9.5 Education Materials on HCL Software Academy"},{"location":"overview/process_integration/","text":"Process integration Use the Unified Task List portlet to integrate with business process solutions such as IBM Process Server, WebSphere Lombardi Edition, and other enterprise resource planning software. Service-oriented architecture For greater flexibility, the Unified Task List portlet retrieves data from the configured enterprise resource planning software. Then, the retrieved data is presented in the portal. The Unified Task List portlet can retrieve data from multiple enterprise resource planning systems and render the result in a cohesive user interface. Developer resources The Unified Task List portlet was developed by using Web Experience Factory. You can use Web Experience Factory builders to develop actions, customize the Unified Task List portlet, and develop custom forms. Parent topic: Integration","title":"Process integration"},{"location":"overview/process_integration/#process-integration","text":"Use the Unified Task List portlet to integrate with business process solutions such as IBM Process Server, WebSphere Lombardi Edition, and other enterprise resource planning software.","title":"Process integration"},{"location":"overview/process_integration/#service-oriented-architecture","text":"For greater flexibility, the Unified Task List portlet retrieves data from the configured enterprise resource planning software. Then, the retrieved data is presented in the portal. The Unified Task List portlet can retrieve data from multiple enterprise resource planning systems and render the result in a cohesive user interface.","title":"Service-oriented architecture"},{"location":"overview/process_integration/#developer-resources","text":"The Unified Task List portlet was developed by using Web Experience Factory. You can use Web Experience Factory builders to develop actions, customize the Unified Task List portlet, and develop custom forms. Parent topic: Integration","title":"Developer resources"},{"location":"overview/social_business/","text":"Social business HCL Portal offers wikis, blogs, and tagging and rating capabilities. In addition, you can integrate existing collaboration applications with your portal site, such as HCL Connections. HCL Connections Integrate HCL Connections into your site by using community pages, search integration, and more. HCL Sametime The HCL Sametime portlets are provided with HCL Digital Experience offerings and can be used by customers with entitlements to HCL Sametime Complete or Sametime Communicate V9. Blogs and wikis A set of preinstalled web content libraries are supplied. With these libraries, you can add blog and wiki features to your websites. Use blogs, blog libraries, and wikis to tap into the power of the community and to change the way you work. Tagging and rating portal content Users can tag or rate portal content and view the tags and ratings. Tagging and rating allow users to better organize, categorize, and find portal content. This task includes Web Content Manager, HCL Connections, and custom content. For example, users can tag or rate books in an online bookstore. Parent topic: Product capabilities","title":"Social business"},{"location":"overview/social_business/#social-business","text":"HCL Portal offers wikis, blogs, and tagging and rating capabilities. In addition, you can integrate existing collaboration applications with your portal site, such as HCL Connections. HCL Connections Integrate HCL Connections into your site by using community pages, search integration, and more. HCL Sametime The HCL Sametime portlets are provided with HCL Digital Experience offerings and can be used by customers with entitlements to HCL Sametime Complete or Sametime Communicate V9. Blogs and wikis A set of preinstalled web content libraries are supplied. With these libraries, you can add blog and wiki features to your websites. Use blogs, blog libraries, and wikis to tap into the power of the community and to change the way you work. Tagging and rating portal content Users can tag or rate portal content and view the tags and ratings. Tagging and rating allow users to better organize, categorize, and find portal content. This task includes Web Content Manager, HCL Connections, and custom content. For example, users can tag or rate books in an online bookstore. Parent topic: Product capabilities","title":"Social business"},{"location":"overview/soft_fixes95/","text":"List of software fixes 9.5 This includes new features and improvements for the latest version of HCL Digital Experience. To view the list of software fixes included in the HCL Digital Experience 9.5 CF and Container Update releases, visit this HCL Software Support article . Parent topic: What's new in HCL Digital Experience 9.5?","title":"List of software fixes 9.5"},{"location":"overview/soft_fixes95/#list-of-software-fixes-95","text":"This includes new features and improvements for the latest version of HCL Digital Experience. To view the list of software fixes included in the HCL Digital Experience 9.5 CF and Container Update releases, visit this HCL Software Support article . Parent topic: What's new in HCL Digital Experience 9.5?","title":"List of software fixes 9.5"},{"location":"overview/was_905/","text":"Fixes for IBM WebSphere Application Server 9.0.5 Learn about the latest fixes for IBM WebSphere Application Server 9.0.5. You can find information about IBM WebSphere Application Server 9.0.5 including the fixes that were incorporated here . Parent topic: What's new in HCL Digital Experience 9.5?","title":"Fixes for IBM WebSphere Application Server 9.0.5"},{"location":"overview/was_905/#fixes-for-ibm-websphere-application-server-905","text":"Learn about the latest fixes for IBM WebSphere Application Server 9.0.5. You can find information about IBM WebSphere Application Server 9.0.5 including the fixes that were incorporated here . Parent topic: What's new in HCL Digital Experience 9.5?","title":"Fixes for IBM WebSphere Application Server 9.0.5"},{"location":"overview/wcm/","text":"HCL Web Content Manager HCL Web Content Manager accelerates the creation, maintenance, and delivery of content across intranet, extranet, Internet, and portal sites. HCL Web Content Manager is a comprehensive solution for creating, managing, and delivering content on your website. Use Web Content Manager to publish your information and pull in content from other sources, either RSS feeds or other content management systems. On a single page, you can publish your corporate news and highlight news from an external news source. Authors can edit content inline on staging servers and editors can approve content inline. Using Personalization, you can target content based on the website users authentication and preferences. Personalization rules let you control what information specific users or user groups can see. Workflows let you control how content is reviewed, approved, and published. You can create custom workflows to reflect your existing business processes. Use syndication to publish approved content to your live website. Content You can manage and store content in Web Content Manager, using an external content management system, or both. Set up libraries to manage and store content in Web Content Manager. Use IBM\u00ae Web Content Integrator to import content in RSS feed format. Integrate and link directly to external content management systems using CMIS support included with Web Content Manager. Use WebDAV to import content from a file system. Wikis and blogs are immediately available for you to add to pages in your site. Management Use projects to manage changes to a group of items. Projects can help you coordinate approvals and publication. Workflow is immediately available and you can develop custom workflows if needed. Workflows help you control how content progresses from draft to publication. Projects can have associated workflows too. Authoring Multiple authoring home pages are immediately available. You can also develop a custom authoring environment if needed. In addition to the authoring home pages, authors can edit content in context on the staging servers. Using the edit mode, authors can select to edit content on a page. Changes adhere to defined workflows and syndication publishes changes. Multilingual websites The HCL Web Content Manager Multilingual Solution download, available on the solution catalog, provides a reference implementation for a multilingual website. It includes a set of extension plugins that you can use to configure and deliver a multilingual site. Parent topic: Web content","title":"HCL Web Content Manager"},{"location":"overview/wcm/#hcl-web-content-manager","text":"HCL Web Content Manager accelerates the creation, maintenance, and delivery of content across intranet, extranet, Internet, and portal sites. HCL Web Content Manager is a comprehensive solution for creating, managing, and delivering content on your website. Use Web Content Manager to publish your information and pull in content from other sources, either RSS feeds or other content management systems. On a single page, you can publish your corporate news and highlight news from an external news source. Authors can edit content inline on staging servers and editors can approve content inline. Using Personalization, you can target content based on the website users authentication and preferences. Personalization rules let you control what information specific users or user groups can see. Workflows let you control how content is reviewed, approved, and published. You can create custom workflows to reflect your existing business processes. Use syndication to publish approved content to your live website.","title":"HCL Web Content Manager"},{"location":"overview/wcm/#content","text":"You can manage and store content in Web Content Manager, using an external content management system, or both. Set up libraries to manage and store content in Web Content Manager. Use IBM\u00ae Web Content Integrator to import content in RSS feed format. Integrate and link directly to external content management systems using CMIS support included with Web Content Manager. Use WebDAV to import content from a file system. Wikis and blogs are immediately available for you to add to pages in your site.","title":"Content"},{"location":"overview/wcm/#management","text":"Use projects to manage changes to a group of items. Projects can help you coordinate approvals and publication. Workflow is immediately available and you can develop custom workflows if needed. Workflows help you control how content progresses from draft to publication. Projects can have associated workflows too.","title":"Management"},{"location":"overview/wcm/#authoring","text":"Multiple authoring home pages are immediately available. You can also develop a custom authoring environment if needed. In addition to the authoring home pages, authors can edit content in context on the staging servers. Using the edit mode, authors can select to edit content on a page. Changes adhere to defined workflows and syndication publishes changes.","title":"Authoring"},{"location":"overview/wcm/#multilingual-websites","text":"The HCL Web Content Manager Multilingual Solution download, available on the solution catalog, provides a reference implementation for a multilingual website. It includes a set of extension plugins that you can use to configure and deliver a multilingual site. Parent topic: Web content","title":"Multilingual websites"},{"location":"overview/web_analytics/","text":"Web analytics HCL Digital Experience (DX) includes a number of solutions to help you understand how visitors use your site, including server-side analytics and client-side analytics. Client-side analytics is also called active site analytics. With HCL DX analytics you can achieve the following goals: Measure the success of your DX site. Predict the demand to a DX site in the future. Plan for changing site visitor needs. Active site analytics Through active site analytics (client-side) HCL Portal makes it easier to collect, process, and report on your site usage. Integration with leading web analytics products is easy. For example, after web analytics solutions are integrated to your DX platform, DX active site analytics enable page view tag results from third-party analytics packages to assess results from pages on your site. Examples of web analytics tools to integrate with can include HCL Unica, IBM Digital Analytics, Webtrends, and others. Active site analytics: Captures visitor behavior data directly from the web browser to ensure that every action is recorded. Dynamically accommodates all content changes to the site so adding a page, product, or category typically requires no tag maintenance. Creates a comprehensive record of visitor interactions and clients also do not have to pre-define segments, visitor events, campaigns, or categories for analysis. Active site analytics uses a flexible, backend business logic instead of hardcoding the logic into the site instrumentation. As a result, you enjoy reduced IT maintenance and maximum analytical flexibility. You can analyze web analytics reports in context, without switching to an external tool. This capability is called overlay reports. Overlay reports provide a quick look at the success of a page, portlet, or web content. Overlay reports are immediately available for IBM Digital Analytics (formerly known as Coremetrics), but you can extend that capability to other analytics tools. Server-side analytics Using server-side analytics, you can gather information about page and site visitor management activities, site visitor page and portlet requests, and session activities. Page and visitor management activities include creating, reading, updating, and deleting. Session activities include login, logout, timeouts, and login failures. Parent topic: Product capabilities","title":"Web analytics"},{"location":"overview/web_analytics/#web-analytics","text":"HCL Digital Experience (DX) includes a number of solutions to help you understand how visitors use your site, including server-side analytics and client-side analytics. Client-side analytics is also called active site analytics. With HCL DX analytics you can achieve the following goals: Measure the success of your DX site. Predict the demand to a DX site in the future. Plan for changing site visitor needs.","title":"Web analytics"},{"location":"overview/web_analytics/#active-site-analytics","text":"Through active site analytics (client-side) HCL Portal makes it easier to collect, process, and report on your site usage. Integration with leading web analytics products is easy. For example, after web analytics solutions are integrated to your DX platform, DX active site analytics enable page view tag results from third-party analytics packages to assess results from pages on your site. Examples of web analytics tools to integrate with can include HCL Unica, IBM Digital Analytics, Webtrends, and others. Active site analytics: Captures visitor behavior data directly from the web browser to ensure that every action is recorded. Dynamically accommodates all content changes to the site so adding a page, product, or category typically requires no tag maintenance. Creates a comprehensive record of visitor interactions and clients also do not have to pre-define segments, visitor events, campaigns, or categories for analysis. Active site analytics uses a flexible, backend business logic instead of hardcoding the logic into the site instrumentation. As a result, you enjoy reduced IT maintenance and maximum analytical flexibility. You can analyze web analytics reports in context, without switching to an external tool. This capability is called overlay reports. Overlay reports provide a quick look at the success of a page, portlet, or web content. Overlay reports are immediately available for IBM Digital Analytics (formerly known as Coremetrics), but you can extend that capability to other analytics tools.","title":"Active site analytics"},{"location":"overview/web_analytics/#server-side-analytics","text":"Using server-side analytics, you can gather information about page and site visitor management activities, site visitor page and portlet requests, and session activities. Page and visitor management activities include creating, reading, updating, and deleting. Session activities include login, logout, timeouts, and login failures. Parent topic: Product capabilities","title":"Server-side analytics"},{"location":"overview/web_application_bridge/","text":"Web Application Bridge integration Use the Web Application Bridge to integrate with web applications, such as Sharepoint. The web application bridge uses reverse proxy technology to integrate web-based content providers, such as the Microsoft SharePoint server, with HCL Digital Experience. Administrators must first define the virtual web applications or content providers. A lightweight iFrame portlet displays the content from the backend applications. Users can then access the iFrame on a page without requiring direct network access to the backend application. A special engine maps the Uniform Resource Identifiers (URIs) on the iFrame portlet to real URIs from the content providers. Integrating the web application bridge is a multi-step process. First, create the content provider profile. Second, create at least one policy for each content provider profile. Then, create the web dock applications for the content providers. Finally, add the web dock application portlets to a new or existing page. Parent topic: Integration","title":"Web Application Bridge integration"},{"location":"overview/web_application_bridge/#web-application-bridge-integration","text":"Use the Web Application Bridge to integrate with web applications, such as Sharepoint. The web application bridge uses reverse proxy technology to integrate web-based content providers, such as the Microsoft SharePoint server, with HCL Digital Experience. Administrators must first define the virtual web applications or content providers. A lightweight iFrame portlet displays the content from the backend applications. Users can then access the iFrame on a page without requiring direct network access to the backend application. A special engine maps the Uniform Resource Identifiers (URIs) on the iFrame portlet to real URIs from the content providers. Integrating the web application bridge is a multi-step process. First, create the content provider profile. Second, create at least one policy for each content provider profile. Then, create the web dock applications for the content providers. Finally, add the web dock application portlets to a new or existing page. Parent topic: Integration","title":"Web Application Bridge integration"},{"location":"overview/web_experience_factory/","text":"Development tools Both Web Experience Factory and IBM Rational Application Developer include functionality to help you develop exceptional web experiences for your mobile site visitors. Web Experience Factory Web Experience Factory includes new smart phone builders and samples to help developers generate mobile portlets and pages faster. Automation components include: Native-looking navigation tabs, lists, buttons, and controls Scrolling lists with display options, such as thumbnails and multiple line test with multiple styles Access to smart phone features, such as HTML 5, orientation, and geographical location Input UI patterns appropriate for smart phones, such as selectable lists and check box lists IBM Rational\u00ae Application Developer The IBM Rational Application Developer includes tools designed to help you develop portlet applications. The portlet tools provide the following capabilities: Portlet project support for the standard portlet API. Web perspective views and editors for developing portlets. Portlet project wizard to create basic portlets, Faces portlets, and Struts portlets. Editing and validation of the portlet deployment descriptor (portlet.xml). Testing and debugging of portlets within the workbench using the WebSphere Portal Test Environment. Testing and debugging of portlets on a remote machine using the WebSphere Portal Server Attach. Visual tooling to insert portlet programming objects into JSP files, using Page Designer. Portlet sample applications, available in the Samples Gallery. Educational tutorials, available in the Tutorials Gallery. Parent topic: Mobile","title":"Development tools"},{"location":"overview/web_experience_factory/#development-tools","text":"Both Web Experience Factory and IBM Rational Application Developer include functionality to help you develop exceptional web experiences for your mobile site visitors.","title":"Development tools"},{"location":"overview/web_experience_factory/#web-experience-factory","text":"Web Experience Factory includes new smart phone builders and samples to help developers generate mobile portlets and pages faster. Automation components include: Native-looking navigation tabs, lists, buttons, and controls Scrolling lists with display options, such as thumbnails and multiple line test with multiple styles Access to smart phone features, such as HTML 5, orientation, and geographical location Input UI patterns appropriate for smart phones, such as selectable lists and check box lists","title":"Web Experience Factory"},{"location":"overview/web_experience_factory/#ibm-rational-application-developer","text":"The IBM Rational Application Developer includes tools designed to help you develop portlet applications. The portlet tools provide the following capabilities: Portlet project support for the standard portlet API. Web perspective views and editors for developing portlets. Portlet project wizard to create basic portlets, Faces portlets, and Struts portlets. Editing and validation of the portlet deployment descriptor (portlet.xml). Testing and debugging of portlets within the workbench using the WebSphere Portal Test Environment. Testing and debugging of portlets on a remote machine using the WebSphere Portal Server Attach. Visual tooling to insert portlet programming objects into JSP files, using Page Designer. Portlet sample applications, available in the Samples Gallery. Educational tutorials, available in the Tutorials Gallery. Parent topic: Mobile","title":"IBM Rational\u00ae Application Developer"},{"location":"panel_help/custom_layout_editor/","text":"Custom Layout Editor | HCL Digital Experience Beginning with Digital Experience CF198 and later, a custom layout editor is available with the release for use. Overview Beginning with HCL Digital Experience CF198 and later, the Layout tab on the page properties dialog has been augmented with a Customizable Layout , which, when selected, launches a new out-of-the-box (OOB) layout editor called Custom Layout Editor. It is distinct from the previous (and still available) statically defined layouts. With HCL DX CF198 and later releases, the Custom Layout Editor is installed (out of the box) with the Simple and Portal 8.5 themes, and can be added to custom (e.g. \u201cuser-written\u201d) themes as well. The goal of the new Custom Layout Editor is to allow creating a custom layout without having to add additional HTML and CSS to their themes. The Custom Layout Editor also allows the layout to be customized through a GUI and instantly previewed. With the Custom Layout Editor, a page designer may create a page layout in HCL DX that differs from the \"static\" layouts previously available. The static layouts include 1 column, 2 column equal, 2 grid, etc. There are 11 of these static layouts available today in HCL DX, apart from a \u201ccustom layout.\u201d A \u201ccustom layout\u201d represents a layout created with the custom layout editor. Reference the Layout Styles Help Center topic for additional information. The goal of a custom layout is to allow the page designer to create a custom look and feel (e.g. as many rows and columns) for his page. These columns may be different widths (relative to other), however that is not a requirement. This topic explains how to define a page as using a custom layout and how to edit the layout of such a page. Custom Layout Editor usage Note that the Custom Layout Editor is designed for a site designer to edit the layout of a page or create a new layout template. Therefore, one should always create and save a custom layout, and exit the Custom Layout Editor before attempting to add content to a page created with the Custom Layout Editor. Custom theme installation and conversion Even though the Custom Layout Editor is available in CF198 and later with the Simple and Portal 8.5 themes, existing user-written themes require changes to take advantage of this new function. Stated another way, installation of HCL DX 9.5 CF198 (and later) does not automatically give existing user-written themes the ability to use the Custom Layout Editor. Steps must be taken to enable it, as follows. There is a profile in every theme which enumerates all the modules that are used by that theme. For example, in the Portal 8.5 theme, these files are in the WebDAV repository under the fs-type1/themes/default85theme/profiles directory. The profile_deferred.json has been updated to include changes needed for the custom layout editor. In CF198, the profile_deferred.json file includes the following additions: wp_gridlayout to the moduleIDs section, and wp_toolbar_gridlayout_inlineedit to the deferredModuleIDs section. Profiles included in a customer written theme need to be updated to include the same changes described above for the theme to support custom layouts. These changes should be made to every profile in the theme if pages based on that theme are to have access to the Customizable Layout . Also, the XMLAccess deployment file for a custom theme now needs the following line added: <parameter name=\"ibm.portal.shelf.layout.json.layoutEditor\" type=\"string\" update=\"set\"><![CDATA[dav:fs-type1/system/layouts.json]]></parameter> Note that this parameter would be set the same for themes not using WebDAV. This file exists in a directory outside of any particular theme and is part of the CF198 install. The XMLAccess exports of the deployment files for both the Portal 8.5 theme, as well as Simple theme can be used as a guide for updating a custom theme. If one is writing a theme from \u201cscratch\u201d after having already installed the cumulative fix containing the custom layout editor (HCL DX CF198 or later), files copied from the Portal 8.5 theme, or the Simple theme should likely already have the profile updates described above. However the theme deployment file would still need to be updated. Using the Custom Layout Editor As delivered, the custom layout editor is available in the Portal 8.5 theme, and the Simple theme. Users of the Custom Layout Editor must have administrator privileges ( login as Administrator role e.g. wpsadmin or equivalent). If a previously created page is based on one of the out of box themes, start by turning on Edit Mode and then navigate to Open Page Settings > Layout for your page. Select the Customizable Layout icon as the page layout. Close the page settings toolbar once Customizable Layout is selected. From \u201cEdit Mode\u201d on the page upon which you just selected Customizable Layout , a small dialog box will be displayed, as follows: In this example, the Portal 8.5 theme is shown in the dialog box. Clicking on the Edit button in that dialog box launches the layout editor. The dialog box now looks like this: Buttons on the Edit Dialog There are seven buttons on the Custom Layout Editor \u201cEdit\u201d dialog. From left to right: Edit : The Edit button has no effect in this case. When in \u201cpressed\u201d mode, this indicates that the user is in Custom Layout Edit mode. Toggle Gridline : This button allows the user to toggle the display of vertical lines in the layout container in sizing the container. Toggle Content : This button allows the user to display portlets in the container on the page. Reset : When pressed, any unsaved changes to the displayed layout will be reverted to the original layout of the page. Changes made during this edit session are cancelled. Save Page : This allows the user to save the current page layout without exiting this layout session. This action only affects the current page. Save As Layout Template : This allows the user to save the currently displayed layout as a new \u201cnamed\u201d layout. In the future, the new layout can be selected at \u201cpage setting\u201d time in the page layout dialog (just as 1 column, for example). Done : This allows the user to exit the custom layout design session. Note: Any changes not saved via the Save As Layout Template button are lost. Containers and Rows Clicking the Edit button on a page with the Customized Layout selected presents this initial view of the page: This shows that we have a \u201cBackground Container\u201d known as \u201cB.1,\u201d with one embedded \"Container\" known as \u201c1.1\u201d. There are several icons which have various functions. The two important objects in the custom layouts are \u201cContainers\u201d and \u201cRows\u201d. Containers are the object that houses portlets placed on the page. Rows contain columns, which in turn have containers. Within each container, there are controls to add more containers to the current row. Within each row are controls to add more rows. To the far right of the \u201cContainer\u201d, a user may perform the following actions by hovering and clicking on any of the five icons: The plus icon or + adds another container to the same row. The minus icon or - removes the current container. The view or eye icon hides the current container. Note: If there is more than one container in the current row, hiding the container produces a small \u201ccircle\u201d with the container name. The equals icon or = split a container vertically. Clicking this adds a new container vertically (in the current column) under the current container. The 2-bar icon or || splits a container horizontally. Clicking this will add a new container in a new column in the current row. This also divides the current column containing the current container in half and adds a new container. Note that each row container may actually have more than one row of containers based on the width of the screen and the width of the container. At the bottom of each row, displays icons where the user can select a specific row and perform the following icons: The plus icon or + adds a new row to the layout. The minus icon or - removes the current row from the layout. The row number icons ( 1 , 2 , 3 , 4 ) allows the user to modify the row to contain this number of columns as indicated. Note that these create 1, 2, 3 or 4 equal-width columns (depending on user selection). The user may also drag and drop each column to create any desired width. However, clicking on one of the row numbers after changing the column width will resize the column width in that row, effectively negating the custom sizes previously selected. When selecting columns sizes (or the number of columns per row), if a container is too wide to fit in the currently selected column width, it will be moved below its current position. For example, if three columns are filled with three containers, and then one changes the columns from 3 to 2 , the right most container moves down (to a new column) since it no longer fit above. Breakpoint Selector When in a custom layout and in Edit mode, the breakpoint selector will be located at the bottom of the screen like this: The function of the breakpoint selector is to associate different custom layouts with different screen sizes. Different screen sizes are associated with different type devices, (i.e. mobile phone or laptop views may display differently). When selecting a breakpoint from the bottom (e.g. screen size), the user is now editing a layout for that screen size. If selecting another screen size (at the bottom), accept the \"default\" layout shown or override it above in the editor. Now, when selecting the previous breakpoint size, it will show the layout chosen earlier. And when sliding the breakpoint to the previous \"small\" size, you get the layout you picked for that size. Otherwise, when you slide the breakpoint to a size that you didn't override in the editor, you get the \"default\" layout for that size. Note that different browsers have different \"default\" layouts when a defined layout is not presented. Authorization Users need different roles to perform the following actions on pages or portals: Administrator role to modify the layout and save the pages. Administrator role to save a page layout as the new system layout. User role or higher to view pages. Staging Generally, the page layout that is stored and leveraged on a page is staged as part of the page, therefore, using syndication of the managed pages or xmlaccess, the data is transferred. But, if you are storing the layout as a new layout and want to leverage it on the target server in an edit mode, then the layout is saved as a system layout. Hence, in this case, the webdav system layouts.json file ( https://myserver.hcl.com/wps/mycontenthandler/dav/fs-type1/system/layouts.json) ) must be manually staged. Parent topic: Editing page layout | HCL Digital Experience","title":"Custom Layout Editor \\| HCL Digital Experience"},{"location":"panel_help/custom_layout_editor/#custom-layout-editor-hcl-digital-experience","text":"Beginning with Digital Experience CF198 and later, a custom layout editor is available with the release for use.","title":"Custom Layout Editor | HCL Digital Experience"},{"location":"panel_help/custom_layout_editor/#overview","text":"Beginning with HCL Digital Experience CF198 and later, the Layout tab on the page properties dialog has been augmented with a Customizable Layout , which, when selected, launches a new out-of-the-box (OOB) layout editor called Custom Layout Editor. It is distinct from the previous (and still available) statically defined layouts. With HCL DX CF198 and later releases, the Custom Layout Editor is installed (out of the box) with the Simple and Portal 8.5 themes, and can be added to custom (e.g. \u201cuser-written\u201d) themes as well. The goal of the new Custom Layout Editor is to allow creating a custom layout without having to add additional HTML and CSS to their themes. The Custom Layout Editor also allows the layout to be customized through a GUI and instantly previewed. With the Custom Layout Editor, a page designer may create a page layout in HCL DX that differs from the \"static\" layouts previously available. The static layouts include 1 column, 2 column equal, 2 grid, etc. There are 11 of these static layouts available today in HCL DX, apart from a \u201ccustom layout.\u201d A \u201ccustom layout\u201d represents a layout created with the custom layout editor. Reference the Layout Styles Help Center topic for additional information. The goal of a custom layout is to allow the page designer to create a custom look and feel (e.g. as many rows and columns) for his page. These columns may be different widths (relative to other), however that is not a requirement. This topic explains how to define a page as using a custom layout and how to edit the layout of such a page.","title":"Overview"},{"location":"panel_help/custom_layout_editor/#custom-layout-editor-usage","text":"Note that the Custom Layout Editor is designed for a site designer to edit the layout of a page or create a new layout template. Therefore, one should always create and save a custom layout, and exit the Custom Layout Editor before attempting to add content to a page created with the Custom Layout Editor.","title":"Custom Layout Editor usage"},{"location":"panel_help/custom_layout_editor/#custom-theme-installation-and-conversion","text":"Even though the Custom Layout Editor is available in CF198 and later with the Simple and Portal 8.5 themes, existing user-written themes require changes to take advantage of this new function. Stated another way, installation of HCL DX 9.5 CF198 (and later) does not automatically give existing user-written themes the ability to use the Custom Layout Editor. Steps must be taken to enable it, as follows. There is a profile in every theme which enumerates all the modules that are used by that theme. For example, in the Portal 8.5 theme, these files are in the WebDAV repository under the fs-type1/themes/default85theme/profiles directory. The profile_deferred.json has been updated to include changes needed for the custom layout editor. In CF198, the profile_deferred.json file includes the following additions: wp_gridlayout to the moduleIDs section, and wp_toolbar_gridlayout_inlineedit to the deferredModuleIDs section. Profiles included in a customer written theme need to be updated to include the same changes described above for the theme to support custom layouts. These changes should be made to every profile in the theme if pages based on that theme are to have access to the Customizable Layout . Also, the XMLAccess deployment file for a custom theme now needs the following line added: <parameter name=\"ibm.portal.shelf.layout.json.layoutEditor\" type=\"string\" update=\"set\"><![CDATA[dav:fs-type1/system/layouts.json]]></parameter> Note that this parameter would be set the same for themes not using WebDAV. This file exists in a directory outside of any particular theme and is part of the CF198 install. The XMLAccess exports of the deployment files for both the Portal 8.5 theme, as well as Simple theme can be used as a guide for updating a custom theme. If one is writing a theme from \u201cscratch\u201d after having already installed the cumulative fix containing the custom layout editor (HCL DX CF198 or later), files copied from the Portal 8.5 theme, or the Simple theme should likely already have the profile updates described above. However the theme deployment file would still need to be updated.","title":"Custom theme installation and conversion"},{"location":"panel_help/custom_layout_editor/#using-the-custom-layout-editor","text":"As delivered, the custom layout editor is available in the Portal 8.5 theme, and the Simple theme. Users of the Custom Layout Editor must have administrator privileges ( login as Administrator role e.g. wpsadmin or equivalent). If a previously created page is based on one of the out of box themes, start by turning on Edit Mode and then navigate to Open Page Settings > Layout for your page. Select the Customizable Layout icon as the page layout. Close the page settings toolbar once Customizable Layout is selected. From \u201cEdit Mode\u201d on the page upon which you just selected Customizable Layout , a small dialog box will be displayed, as follows: In this example, the Portal 8.5 theme is shown in the dialog box. Clicking on the Edit button in that dialog box launches the layout editor. The dialog box now looks like this:","title":"Using the Custom Layout Editor"},{"location":"panel_help/custom_layout_editor/#buttons-on-the-edit-dialog","text":"There are seven buttons on the Custom Layout Editor \u201cEdit\u201d dialog. From left to right: Edit : The Edit button has no effect in this case. When in \u201cpressed\u201d mode, this indicates that the user is in Custom Layout Edit mode. Toggle Gridline : This button allows the user to toggle the display of vertical lines in the layout container in sizing the container. Toggle Content : This button allows the user to display portlets in the container on the page. Reset : When pressed, any unsaved changes to the displayed layout will be reverted to the original layout of the page. Changes made during this edit session are cancelled. Save Page : This allows the user to save the current page layout without exiting this layout session. This action only affects the current page. Save As Layout Template : This allows the user to save the currently displayed layout as a new \u201cnamed\u201d layout. In the future, the new layout can be selected at \u201cpage setting\u201d time in the page layout dialog (just as 1 column, for example). Done : This allows the user to exit the custom layout design session. Note: Any changes not saved via the Save As Layout Template button are lost.","title":"Buttons on the Edit Dialog"},{"location":"panel_help/custom_layout_editor/#containers-and-rows","text":"Clicking the Edit button on a page with the Customized Layout selected presents this initial view of the page: This shows that we have a \u201cBackground Container\u201d known as \u201cB.1,\u201d with one embedded \"Container\" known as \u201c1.1\u201d. There are several icons which have various functions. The two important objects in the custom layouts are \u201cContainers\u201d and \u201cRows\u201d. Containers are the object that houses portlets placed on the page. Rows contain columns, which in turn have containers. Within each container, there are controls to add more containers to the current row. Within each row are controls to add more rows. To the far right of the \u201cContainer\u201d, a user may perform the following actions by hovering and clicking on any of the five icons: The plus icon or + adds another container to the same row. The minus icon or - removes the current container. The view or eye icon hides the current container. Note: If there is more than one container in the current row, hiding the container produces a small \u201ccircle\u201d with the container name. The equals icon or = split a container vertically. Clicking this adds a new container vertically (in the current column) under the current container. The 2-bar icon or || splits a container horizontally. Clicking this will add a new container in a new column in the current row. This also divides the current column containing the current container in half and adds a new container. Note that each row container may actually have more than one row of containers based on the width of the screen and the width of the container. At the bottom of each row, displays icons where the user can select a specific row and perform the following icons: The plus icon or + adds a new row to the layout. The minus icon or - removes the current row from the layout. The row number icons ( 1 , 2 , 3 , 4 ) allows the user to modify the row to contain this number of columns as indicated. Note that these create 1, 2, 3 or 4 equal-width columns (depending on user selection). The user may also drag and drop each column to create any desired width. However, clicking on one of the row numbers after changing the column width will resize the column width in that row, effectively negating the custom sizes previously selected. When selecting columns sizes (or the number of columns per row), if a container is too wide to fit in the currently selected column width, it will be moved below its current position. For example, if three columns are filled with three containers, and then one changes the columns from 3 to 2 , the right most container moves down (to a new column) since it no longer fit above.","title":"Containers and Rows"},{"location":"panel_help/custom_layout_editor/#breakpoint-selector","text":"When in a custom layout and in Edit mode, the breakpoint selector will be located at the bottom of the screen like this: The function of the breakpoint selector is to associate different custom layouts with different screen sizes. Different screen sizes are associated with different type devices, (i.e. mobile phone or laptop views may display differently). When selecting a breakpoint from the bottom (e.g. screen size), the user is now editing a layout for that screen size. If selecting another screen size (at the bottom), accept the \"default\" layout shown or override it above in the editor. Now, when selecting the previous breakpoint size, it will show the layout chosen earlier. And when sliding the breakpoint to the previous \"small\" size, you get the layout you picked for that size. Otherwise, when you slide the breakpoint to a size that you didn't override in the editor, you get the \"default\" layout for that size. Note that different browsers have different \"default\" layouts when a defined layout is not presented.","title":"Breakpoint Selector"},{"location":"panel_help/custom_layout_editor/#authorization","text":"Users need different roles to perform the following actions on pages or portals: Administrator role to modify the layout and save the pages. Administrator role to save a page layout as the new system layout. User role or higher to view pages.","title":"Authorization"},{"location":"panel_help/custom_layout_editor/#staging","text":"Generally, the page layout that is stored and leveraged on a page is staged as part of the page, therefore, using syndication of the managed pages or xmlaccess, the data is transferred. But, if you are storing the layout as a new layout and want to leverage it on the target server in an edit mode, then the layout is saved as a system layout. Hence, in this case, the webdav system layouts.json file ( https://myserver.hcl.com/wps/mycontenthandler/dav/fs-type1/system/layouts.json) ) must be manually staged. Parent topic: Editing page layout | HCL Digital Experience","title":"Staging"},{"location":"panel_help/wcm_dev_content_creating/","text":"Creating content items Content items are based on authoring templates. The fields that are displayed in a content item form can be hidden from different users, so not all of the following steps might be required. Some fields and elements might already contain default data. To create a content item, open the applications menu and go to Content > Web Content Management , click New > Content , and then select an authoring template. The content form is opened.","title":"Creating content items"},{"location":"panel_help/wcm_dev_content_creating/#creating-content-items","text":"Content items are based on authoring templates. The fields that are displayed in a content item form can be hidden from different users, so not all of the following steps might be required. Some fields and elements might already contain default data. To create a content item, open the applications menu and go to Content > Web Content Management , click New > Content , and then select an authoring template. The content form is opened.","title":"Creating content items"},{"location":"panel_help/wcm_dev_search_form_results_examples/","text":"Search result examples These are examples of how to design your search results. Search element design example for use in a website In this example, a table is used to lay out the search results. Design field Details Code example Header ``` | |Result|The attributes to display in each search result are defined here.|``` <tr><td> <attributeResource attributeName=\"namelink\"/><br> <attributeResource attributeName=\"summary\"/> </td></tr> | |Separator|A separator can be used to delineate each search result.|``` | |Footer|A page navigation element that is stored in a component is referenced here to add page navigation to the search results.|``` <tr><td> <component name=\"pagenavigationcomponent\"/> </td></tr> </table> | |No results| |There are no results for your query. Please refine your search and try again.| ## Search element design example for use in a rendering portlet In this example, a table is used to lay out the search results. |Design field|Details|Code example| |------------|-------|------------| |Header| |``` | |Result|The attributes to display in each search result are defined here.When displaying search results in a rendering portlet, you must specify the page that the linked content is displayed in when opened. A URL map to the portal page that contains the rendering portlet is required. |``` <tr><td> <a href=\"/[PORTAL_CONTEXT_ROOT]/ [PORTAL_PAGE_URL_MAPPING]/?WCM_GLOBAL_CONTEXT= <AttributeResource attributeName=\"url\" />\"> <AttributeResource attributeName=\"title\" /></a> <attributeResource attributeName=\"summary\"/> </td></tr> | |Separator|A separator can be used to delineate each search result.|``` | |Footer|A page navigation element that is stored in a component is referenced here to add page navigation to the search results.|``` <tr><td> [component name=\"pagenavigationcomponent\"] </td></tr> </table> | |No results| |There are no results for your query. Refine your search and try again.| ## Search parameters using attribute resource tag The following parameters can be used to display data in a search result design using an attribute resource tag: <attributeResource attributeName=\"parameter\" separator=\" \" format=\" \"/> |`attributeName=authoringtemplate`|The name of the authoring template, if available, that was used to create the content item.| |`attributeName=author`|The name or names of the authors of the content item, if any are defined. If there is more than one author, then they will be rendered with the string specified in the optional separator attribute between each value.| |`attributeName=category`|The categories of the content item if any are defined. If there is more than one category, then they will be rendered with the string specified in the optional separator attribute between each value.| |`attributeName=contentid`|The id of the content item.| |`attributeName=contentpath`|The path excluding the server address, port or servlet context \\(/wps/wcm\\) for this search result.| |`attributeName=date`|The value of the date field from the SIAPI result. The format of the date can be specified by using the optional format attribute. See the [Javadoc HTML documentation](../dev/reference_docs.md) for SimpleDateFormat in the Java SDK for details.| |`attributeName=description`|The description of the content item.| |`attributeName=effectivedate`|The effective date of the content item. The format of the date can be specified by using the optional format attribute. See the [Javadoc HTML documentation](../dev/reference_docs.md) for SimpleDateFormat in the Java SDK for details.| |`attributeName=expirationdate`|The expiration date of the content item. The format of the date can be specified by using the optional format attribute. See the [Javadoc HTML documentation](../dev/reference_docs.md) for SimpleDateFormat in the Java SDK for details.| |`attributeName=keywords`|The keywords of the content item if any are defined. If there is more than one keyword, then they will be rendered with the string specified in the optional separator attribute between each value.| |`attributeName=lastmodifieddate`|The last modified date of the content item. The format of the date can be specified by using the optional format attribute. See the [Javadoc HTML documentation](../dev/reference_docs.md) for SimpleDateFormat in the Java SDK for details.| |`attributeName=modifier`|The name of the last person to modify the content item.| |`attributeName=name`|The name of the content item.| |`attributeName=namelink`|This assembles a complete link based on the name of the item being returned.| |`attributeName=owner`|The name or names of the owners of the content item, if any are defined. If there is more than one author, then they will be rendered with the string specified in the optional separator attribute between each value.| |`attributeName=parentcontentpath`|This is used to return the content path excluding the server address, port or Servlet context for the parent content item of this search result. For example: /wps/wcm. This parameter is valid when the search results include a link to a file resource element in the parent content item and is used to give context to the attached file. When the search result is not for an attached file in a file resource element, this value will be an empty string. | |`attributeName=relevance`|The relevance \u201cscore\u201d for this search result from the search engine.| |`attributeName=summary`|The summary of the content item as generated by Portal Search.| |`attributeName=title`|This is the title of a content item.| |`attributeName=titlelink`|This assembles a complete link based on the title of the item being returned.| |`attributeName=url`|Displays the URL of a content item. | |`separator=\" \"`|Enter text or code to be used to separate multiple search results. For example: `separator=\" - \"`| |`format=\" \"`|The format of date parameters can be set using this parameter. See the [Javadoc HTML documentation](../dev/reference_docs.md) for SimpleDateFormat in the Java SDK for details.|","title":"Search result examples"},{"location":"panel_help/wcm_dev_search_form_results_examples/#search-result-examples","text":"These are examples of how to design your search results.","title":"Search result examples"},{"location":"panel_help/wcm_dev_search_form_results_examples/#search-element-design-example-for-use-in-a-website","text":"In this example, a table is used to lay out the search results. Design field Details Code example Header ``` | |Result|The attributes to display in each search result are defined here.|``` <tr><td> <attributeResource attributeName=\"namelink\"/><br> <attributeResource attributeName=\"summary\"/> </td></tr> | |Separator|A separator can be used to delineate each search result.|``` | |Footer|A page navigation element that is stored in a component is referenced here to add page navigation to the search results.|``` <tr><td> <component name=\"pagenavigationcomponent\"/> </td></tr> </table> | |No results| |There are no results for your query. Please refine your search and try again.| ## Search element design example for use in a rendering portlet In this example, a table is used to lay out the search results. |Design field|Details|Code example| |------------|-------|------------| |Header| |``` | |Result|The attributes to display in each search result are defined here.When displaying search results in a rendering portlet, you must specify the page that the linked content is displayed in when opened. A URL map to the portal page that contains the rendering portlet is required. |``` <tr><td> <a href=\"/[PORTAL_CONTEXT_ROOT]/ [PORTAL_PAGE_URL_MAPPING]/?WCM_GLOBAL_CONTEXT= <AttributeResource attributeName=\"url\" />\"> <AttributeResource attributeName=\"title\" /></a> <attributeResource attributeName=\"summary\"/> </td></tr> | |Separator|A separator can be used to delineate each search result.|``` | |Footer|A page navigation element that is stored in a component is referenced here to add page navigation to the search results.|``` <tr><td> [component name=\"pagenavigationcomponent\"] </td></tr> </table> | |No results| |There are no results for your query. Refine your search and try again.| ## Search parameters using attribute resource tag The following parameters can be used to display data in a search result design using an attribute resource tag: <attributeResource attributeName=\"parameter\" separator=\" \" format=\" \"/> |`attributeName=authoringtemplate`|The name of the authoring template, if available, that was used to create the content item.| |`attributeName=author`|The name or names of the authors of the content item, if any are defined. If there is more than one author, then they will be rendered with the string specified in the optional separator attribute between each value.| |`attributeName=category`|The categories of the content item if any are defined. If there is more than one category, then they will be rendered with the string specified in the optional separator attribute between each value.| |`attributeName=contentid`|The id of the content item.| |`attributeName=contentpath`|The path excluding the server address, port or servlet context \\(/wps/wcm\\) for this search result.| |`attributeName=date`|The value of the date field from the SIAPI result. The format of the date can be specified by using the optional format attribute. See the [Javadoc HTML documentation](../dev/reference_docs.md) for SimpleDateFormat in the Java SDK for details.| |`attributeName=description`|The description of the content item.| |`attributeName=effectivedate`|The effective date of the content item. The format of the date can be specified by using the optional format attribute. See the [Javadoc HTML documentation](../dev/reference_docs.md) for SimpleDateFormat in the Java SDK for details.| |`attributeName=expirationdate`|The expiration date of the content item. The format of the date can be specified by using the optional format attribute. See the [Javadoc HTML documentation](../dev/reference_docs.md) for SimpleDateFormat in the Java SDK for details.| |`attributeName=keywords`|The keywords of the content item if any are defined. If there is more than one keyword, then they will be rendered with the string specified in the optional separator attribute between each value.| |`attributeName=lastmodifieddate`|The last modified date of the content item. The format of the date can be specified by using the optional format attribute. See the [Javadoc HTML documentation](../dev/reference_docs.md) for SimpleDateFormat in the Java SDK for details.| |`attributeName=modifier`|The name of the last person to modify the content item.| |`attributeName=name`|The name of the content item.| |`attributeName=namelink`|This assembles a complete link based on the name of the item being returned.| |`attributeName=owner`|The name or names of the owners of the content item, if any are defined. If there is more than one author, then they will be rendered with the string specified in the optional separator attribute between each value.| |`attributeName=parentcontentpath`|This is used to return the content path excluding the server address, port or Servlet context for the parent content item of this search result. For example: /wps/wcm. This parameter is valid when the search results include a link to a file resource element in the parent content item and is used to give context to the attached file. When the search result is not for an attached file in a file resource element, this value will be an empty string. | |`attributeName=relevance`|The relevance \u201cscore\u201d for this search result from the search engine.| |`attributeName=summary`|The summary of the content item as generated by Portal Search.| |`attributeName=title`|This is the title of a content item.| |`attributeName=titlelink`|This assembles a complete link based on the title of the item being returned.| |`attributeName=url`|Displays the URL of a content item. | |`separator=\" \"`|Enter text or code to be used to separate multiple search results. For example: `separator=\" - \"`| |`format=\" \"`|The format of date parameters can be set using this parameter. See the [Javadoc HTML documentation](../dev/reference_docs.md) for SimpleDateFormat in the Java SDK for details.|","title":"Search element design example for use in a website"},{"location":"panel_help/wcm_reference_syndicatorfields/","text":"Syndicator settings The syndicator view is used to enter details of the server that is subscribing to the syndicator, and display subscription and syndication information. To edit a syndicator, go to Administration > Portal Content > Syndicators and click the edit icon of the syndicator you want to edit. Field Details Syndicator Name and Description These fields identify the syndicator. Subscriber Name, ID and URL These fields identify the subscriber. Mode - mode=\"modetype\" - **Configured**: This mode uses the mode that is configured in the WCM WCMConfigService service. - **Automatic**: Syndication is scheduled automatically based on the configured syndication interval. - **Manual**: Syndication occurs only when requested by using the administration portlet. | | Libraries |This view displays a list of libraries that are included in this syndication relationship.- Click Add Libraries to select a library to syndicate and the syndication type: - published-items=\"library_name_1,library_name_2\" Published item syndication is mostly used when you syndicate to a staging or delivery server. The following items are syndicated: - Published - Expired Draft items, projects, project templates, and items in a project are not syndicated. - **all-items=\"library\\_name\\_1,library\\_name\\_2\"** Use \"All items\" syndication to gradually syndicate projects to a staging or delivery server, rather than waiting until all items in a project achieve a published state. The following items are syndicated: - Published - Expired - Draft items - Projects that contain draft items saved in the configured library. See the HCL Product Documentation topic named **Projects and syndication** for further information. Project templates are not syndicated. - **all-items-and-versions=\"library\\_name\\_1,library\\_name\\_2\"** \"All items and versions\" syndication is mostly used when you syndicate between servers within an authoring environment. Selecting this option can increase the amount of time taken for syndication because it includes versions and deleted items. The following items are syndicated: - Published - Expired - Draft items - Projects that contain draft items saved in the configured library. See the HCL Product Documentation topic named **Projects and syndication** for further information. - Versions - Deleted items Project templates are not syndicated. Select libraries from the current list and click Remove Libraries to remove a library from the list of syndicated libraries. Note: If the syndication configuration is updated to change the syndication type to be more restrictive, then a normal rebuild will not remove previously syndicated items that are now out of scope. For example draft items on the subscriber would not be removed if the syndication type is changed from \"All Items\" to \"Published Items\". A Rebuild With Mirror can be used to fully synchronize the library with respect to the new syndication type which includes the removal of subscriber modifications and previously syndicated items. | | Enabled |This view indicates whether syndication is enabled or not.|","title":"Syndicator settings"},{"location":"panel_help/wcm_reference_syndicatorfields/#syndicator-settings","text":"The syndicator view is used to enter details of the server that is subscribing to the syndicator, and display subscription and syndication information. To edit a syndicator, go to Administration > Portal Content > Syndicators and click the edit icon of the syndicator you want to edit. Field Details Syndicator Name and Description These fields identify the syndicator. Subscriber Name, ID and URL These fields identify the subscriber. Mode - mode=\"modetype\" - **Configured**: This mode uses the mode that is configured in the WCM WCMConfigService service. - **Automatic**: Syndication is scheduled automatically based on the configured syndication interval. - **Manual**: Syndication occurs only when requested by using the administration portlet. | | Libraries |This view displays a list of libraries that are included in this syndication relationship.- Click Add Libraries to select a library to syndicate and the syndication type: - published-items=\"library_name_1,library_name_2\" Published item syndication is mostly used when you syndicate to a staging or delivery server. The following items are syndicated: - Published - Expired Draft items, projects, project templates, and items in a project are not syndicated. - **all-items=\"library\\_name\\_1,library\\_name\\_2\"** Use \"All items\" syndication to gradually syndicate projects to a staging or delivery server, rather than waiting until all items in a project achieve a published state. The following items are syndicated: - Published - Expired - Draft items - Projects that contain draft items saved in the configured library. See the HCL Product Documentation topic named **Projects and syndication** for further information. Project templates are not syndicated. - **all-items-and-versions=\"library\\_name\\_1,library\\_name\\_2\"** \"All items and versions\" syndication is mostly used when you syndicate between servers within an authoring environment. Selecting this option can increase the amount of time taken for syndication because it includes versions and deleted items. The following items are syndicated: - Published - Expired - Draft items - Projects that contain draft items saved in the configured library. See the HCL Product Documentation topic named **Projects and syndication** for further information. - Versions - Deleted items Project templates are not syndicated. Select libraries from the current list and click Remove Libraries to remove a library from the list of syndicated libraries. Note: If the syndication configuration is updated to change the syndication type to be more restrictive, then a normal rebuild will not remove previously syndicated items that are now out of scope. For example draft items on the subscriber would not be removed if the syndication type is changed from \"All Items\" to \"Published Items\". A Rebuild With Mirror can be used to fully synchronize the library with respect to the new syndication type which includes the removal of subscriber modifications and previously syndicated items. | | Enabled |This view indicates whether syndication is enabled or not.|","title":"Syndicator settings"},{"location":"panel_help/wcm_syndication/","text":"How to manage syndicators and subscribers Syndication is used to transport data from one instance of HCL Web Content Manager to another. Video: Setting Up HCL Digital Experience Syndication","title":"How to manage syndicators and subscribers"},{"location":"panel_help/wcm_syndication/#how-to-manage-syndicators-and-subscribers","text":"Syndication is used to transport data from one instance of HCL Web Content Manager to another. Video: Setting Up HCL Digital Experience Syndication","title":"How to manage syndicators and subscribers"},{"location":"panel_help/wcm_syndication_manual/","text":"Manually syndicating items Although syndication is configured to run automatically by default, from time to time you might need to manually update syndication. To manually update a syndication relationship: Go to Administration > Portal Content . Go to either the syndicator or subscriber views. Select either a syndicator or subscriber. Click the update icon and then either: Select Update. Update items changed since last syndication. to update the syndication relationship. Select Rebuild. Re-check all items. to rebuild the syndication relationship. From CF07, you can manually syndicate by using the following methods: Update This method syndicates items that are newer than the previous syndication. Items that are newer than the last syndication on the syndicator are sent to the subscriber. Items that are newer on the subscriber are not updated. Items that are created on the subscriber that do not exist on the syndicator are not removed from the subscriber. Rebuild This method syndicates all items that are newer on the syndicator. All items that are newer on the syndicator are sent to the subscriber. Items that are newer on the subscriber are not updated. Items that are created on the subscriber that do not exist on the syndicator are not removed from the subscriber. Rebuild with mirror If you select the mirror option, all items on the subscriber are reset to mirror the syndicator. All items that are newer on the syndicator are sent to the subscriber. Items that are newer on the subscriber are overwritten with the older version from the syndicator. Items that are created on the subscriber that do not exist on the syndicator are removed from the subscriber. Version history is not syndicated. Restriction: The Rebuild with mirror option must not be used with two-way syndication. Two-way syndication means that server A syndicates to server B, and server B syndicates to server A. Restriction: The Rebuild with mirror option can be used only on a syndicator. Note: The Rebuild with mirror option will not automatically cascade through all subscribers downstream of the syndicator. You might need to repeat the Rebuild with mirror action on subscribers further down the syndication chain to synchronize all servers. Note: The Rebuild with mirror option will not automatically cascade through all subscribers downstream of the syndicator. You might need to repeat the Rebuild with mirror action on subscribers further down the syndication chain to synchronize all servers. Restriction: Don't use the Rebuild with mirror option if other syndicator pairs feed into any of the libraries that are being rebuilt. Note: With CF09 or higher installed, the Rebuild with mirror option automatically cascades through all subscribers downstream of the syndicator that are configured with automatic syndication. Downstream automatic syndication is paused while the upstream mirror is running. Syndication can still be run manually downstream while automatic syndication is paused downstream. Note: With HCL Digital Experience 9.5 Container Update release CF173, CF18 and higher releases, an option to disable the rebuild with mirror syndication is available. This option can be set on the syndicator by setting wcm.syndication.syndicator.mirror.ui=false in the WCM WCMConfigService Resource Environment Provider (REP). This can be useful to avoid accidental mirror syndications that replace everything on the subscriber. Setting this property requires a restart of the HCL Portal server after setting. The option to disable the rebuild with mirror syndication is also available to HCL Digital Experience 8.5 and 9.0 CF18 users. Documentation resource: Syndicator settings |Action|Rebuild|Rebuild with Mirror| |------|-------|-------------------| |Update item on syndicator.|Update item on subscriber.|Update item on subscriber.| |Update item on subscriber.|No action.|Revert item on subscriber.| |Delete item on syndicator.|Delete item on subscriber.|Delete item on subscriber.| |Delete item on subscriber.|Add item on subscriber.|Add item on subscriber.| |Add item on syndicator.|Add item on subscriber.|Add item on subscriber.| |Add item on subscriber.|No action.|Purge item on subscriber.| |Update item on syndicator and then update item on subscriber.|No action (subscriber modification preserved).|Revert item to syndicator version.| Click Update Subscription .","title":"Manually syndicating items"},{"location":"panel_help/wcm_syndication_manual/#manually-syndicating-items","text":"Although syndication is configured to run automatically by default, from time to time you might need to manually update syndication. To manually update a syndication relationship: Go to Administration > Portal Content . Go to either the syndicator or subscriber views. Select either a syndicator or subscriber. Click the update icon and then either: Select Update. Update items changed since last syndication. to update the syndication relationship. Select Rebuild. Re-check all items. to rebuild the syndication relationship. From CF07, you can manually syndicate by using the following methods: Update This method syndicates items that are newer than the previous syndication. Items that are newer than the last syndication on the syndicator are sent to the subscriber. Items that are newer on the subscriber are not updated. Items that are created on the subscriber that do not exist on the syndicator are not removed from the subscriber. Rebuild This method syndicates all items that are newer on the syndicator. All items that are newer on the syndicator are sent to the subscriber. Items that are newer on the subscriber are not updated. Items that are created on the subscriber that do not exist on the syndicator are not removed from the subscriber. Rebuild with mirror If you select the mirror option, all items on the subscriber are reset to mirror the syndicator. All items that are newer on the syndicator are sent to the subscriber. Items that are newer on the subscriber are overwritten with the older version from the syndicator. Items that are created on the subscriber that do not exist on the syndicator are removed from the subscriber. Version history is not syndicated. Restriction: The Rebuild with mirror option must not be used with two-way syndication. Two-way syndication means that server A syndicates to server B, and server B syndicates to server A. Restriction: The Rebuild with mirror option can be used only on a syndicator. Note: The Rebuild with mirror option will not automatically cascade through all subscribers downstream of the syndicator. You might need to repeat the Rebuild with mirror action on subscribers further down the syndication chain to synchronize all servers. Note: The Rebuild with mirror option will not automatically cascade through all subscribers downstream of the syndicator. You might need to repeat the Rebuild with mirror action on subscribers further down the syndication chain to synchronize all servers. Restriction: Don't use the Rebuild with mirror option if other syndicator pairs feed into any of the libraries that are being rebuilt. Note: With CF09 or higher installed, the Rebuild with mirror option automatically cascades through all subscribers downstream of the syndicator that are configured with automatic syndication. Downstream automatic syndication is paused while the upstream mirror is running. Syndication can still be run manually downstream while automatic syndication is paused downstream. Note: With HCL Digital Experience 9.5 Container Update release CF173, CF18 and higher releases, an option to disable the rebuild with mirror syndication is available. This option can be set on the syndicator by setting wcm.syndication.syndicator.mirror.ui=false in the WCM WCMConfigService Resource Environment Provider (REP). This can be useful to avoid accidental mirror syndications that replace everything on the subscriber. Setting this property requires a restart of the HCL Portal server after setting. The option to disable the rebuild with mirror syndication is also available to HCL Digital Experience 8.5 and 9.0 CF18 users. Documentation resource: Syndicator settings |Action|Rebuild|Rebuild with Mirror| |------|-------|-------------------| |Update item on syndicator.|Update item on subscriber.|Update item on subscriber.| |Update item on subscriber.|No action.|Revert item on subscriber.| |Delete item on syndicator.|Delete item on subscriber.|Delete item on subscriber.| |Delete item on subscriber.|Add item on subscriber.|Add item on subscriber.| |Add item on syndicator.|Add item on subscriber.|Add item on subscriber.| |Add item on subscriber.|No action.|Purge item on subscriber.| |Update item on syndicator and then update item on subscriber.|No action (subscriber modification preserved).|Revert item to syndicator version.| Click Update Subscription .","title":"Manually syndicating items"},{"location":"panel_help/wcm_syndication_settingup/","text":"Creating a syndication relationship by using the Administration view You can set up HCL Digital Experience syndication by using the Administration Portlets or the command line. Make sure that you have the appropriate configuration setup before you enable syndication. Disk space Before you use syndication, you must ensure that your subscriber has sufficient memory to receive the data that is syndicated from the syndicator. For example, if you are going to syndicate all libraries, then you need at least as much space on your subscriber as the database used by your syndicator. Swap space Ensure that you have at least as much swap space allocated on the subscriber server as you have physical memory. Cross version syndication Cross-version syndication is supported between the following releases. Syndication from a newer release to an older release is not supported: HCL Portal version 7.0.0.2 with CF26 or higher. HCL Portal 8.0.0.1 with CF09 or higher. HCL Portal 8.5 or higher. Library already exists on the subscriber First-time syndication to an existing library is not supported. If you attempt to syndicate a library to a subscriber that already has a library with the same name, an error results. Large library with more that 10000 items To syndicate a library that contains more than 10000 items, update the maximum Java heap size that is used by the portal application server on the subscriber server: In the WebSphere\u00ae Integrated Solutions Console, browse to the Java virtual machine settings. Stand-alone server: Servers > Server Types > WebSphere application servers > HCL Digital Experience > Java and Process Management > Process definition > Java Virtual Machine Clustered server: System administration > Deployment manager > Java and Process Management > Process Definition > Java Virtual Machine Update the value in the Maximum Heap Size field. A value of at least 1024 MB is recommended. Click OK , and then save your changes. To set up syndication between web content libraries on two HCL Web Content Manager applications, establish a relationship between a syndicator and a subscriber. The syndicating server contains the data to be replicated, and the subscribing server receives the replicated data. What can and cannot be syndicated: Changes to only the library name or description are syndicated. Changes to other library properties, such as user access to a library, are not syndicated. If you want the same settings on all your syndicated libraries, you must manually make the same changes to any subscriber libraries. If content from one library (Library A) uses an item from another library (Library B), you must include both libraries in the syndicator. Including both libraries ensures that all items are syndicated successfully. If you include only Library A in the syndicator, any items in Library A that reference items in Library B are not syndicated. Syndication errors are also generated. If you add a library to a syndicator after the initial syndication, you must click Rebuild to force the new library to be syndicated immediately. If you are creating a two-way syndication relationship, you must use a consistent syndication strategy. For example, if you syndicate \"All items\", then both syndication relationships must be syndicating \"All items\". Ensure both the subscriber and syndicator are running and that they can access each other over a network. On your subscriber server, log in to HCL Digital Experience. If using HCL Digital Experience 9.5, go to the Practitioner Studio interface. Go to Administration > Security > Manage Users and Groups and create a shared credential vault slot. The user assigned access to the credential vault must exist on the syndicator and must have Administrator access to the WCM REST SERVICE virtual resource and Content Root (Web Content Libraries portlet > Set Access on Root). Go to Web Content > Subscribers . Click Subscribe Now . Enter the syndicator URL in the form of http://HostName:HostPort/WcmContextRoot . For example: http://authoring:10039/wps/wcm Note: When Setting Up WCM Syndication using Digital Experience 9.5 Containers in Kubernetes: When you first subscribe to a syndicator, on-prem deployments will use a URL in this format: http://HostName:HostPort/WcmContextRoot When syndicating between Kubernetes setups, the URL should look like this: https://service_name.namespace_name:HostPort/WcmContextRoot Note: For syndication to work in HTTPs, you have to import the SSL certificates between syndicator and subscriber servers. Once the syndication pair has been created, you must edit the syndicator. The Subscriber URL field needs to be modified to look like this: http://service_name.namespace_name:HostPort/WcmContextRoot/connect?MOD=Subs Once the change to the syndicator properties has been made, syndication will work properly. Note: When you syndicate from a virtual portal: Using the URL context of a virtual portal: http://HostName:HostPort/wps/wcm/url_context Using the host name of a virtual portal: http://VirtualHostName:HostPort/wps/wcm Enter a name for the syndicator item. This name is used for the syndicator item that is created on the syndicator server. Enter a name that helps identify the syndication relationship that you are creating. This name must be unique and cannot be the same as an existing syndicator name. Note: To reuse syndicator names of previously deleted syndication relationships on a subscriber, you must also delete the same relationship on the syndicator. Enter a name for the subscriber item. This name is used for the subscriber item that is created on the subscriber server. Enter a name that helps identify the syndication relationship that you are creating. This name must be unique and cannot be the same as an existing subscriber name. Select the credential vault slot that you created previously. Click Next Cross-version syndication: If you syndicate to a server where CF3 for HCL Portal is not installed, steps 11-12 are skipped. Select a syndication schedule mode: Configured : This option uses the mode that is configured in the WCM WCMConfigService service. Automatic : Syndication is scheduled automatically based on the configured syndication interval. Manual : Syndication occurs only when requested by using the administration portlet. Select Update syndication when a syndication pair is created to run a one-off syndication event when the syndication pair is successfully created. This is not related to any automatic configuration settings. Click Next Select the libraries that you want to subscribe to and the syndication type. Published items: Published item syndication is mostly used when you syndicate to a staging or delivery server. The following items are syndicated: Published Expired Draft items, projects, project templates, and items in a project are not syndicated. All items: Use \"All items\" syndication to gradually syndicate projects to a staging or delivery server, rather than waiting until all items in a project achieve a published state. The following items are syndicated: Published Expired Draft items Projects that contain draft items saved in the configured library. See the HCL Product Documentation topic named Projects and syndication for further information. Project templates are not syndicated. All items and versions: \"All items and versions\" syndication is mostly used when you syndicate between servers within an authoring environment. Selecting this option can increase the amount of time taken for syndication because it includes versions and deleted items. The following items are syndicated: Published Expired Draft items Projects that contain draft items saved in the configured library. See the HCL Product Documentation topic named Projects and syndication for further information. Versions Deleted items Project templates are not syndicated. Note: If the syndication configuration is updated to change the syndication type to be more restrictive, then a normal rebuild will not remove previously syndicated items that are now out of scope. For example draft items on the subscriber would not be removed if the syndication type is changed from \"All Items\" to \"Published Items\". A Rebuild With Mirror can be used to fully synchronize the library with respect to the new syndication type which includes the removal of subscriber modifications and previously syndicated items. Action on syndicator Syndication type on syndicator Rebuild: Action on Subscriber Rebuild with mirror: Action on subscriber 1. Update Live items on the syndicator. Published items 1. Updates Live items on the subscriber. 1. Updates Live items on the subscriber. 1. Update Live or Draft items on the syndicator. 2. Delete Live items on the syndicator. 3. Restore Live items on the syndicator. All items 1. Update Live or Draft items on subscriber. 2. Purge items on the subscriber. 3. Create items on the subscriber. 1. Update Live or Draft items on subscriber. 2. Purge items on the subscriber. 3. Create items on the subscriber. 1. Update items on the syndicator. 2. Delete items on the syndicator. 3. Restore items on the syndicator. 4. Purge items on the syndicator. All items and versions 1. Update items on subscriber. 2. Delete items on the subscriber. 3. Restore items on the subscriber. 4. No action. 1. Update items on subscriber. 2. Delete items on the subscriber. 3. Restore items on the subscriber. 4. No action. Action on subscriber Syndication type on syndicator Rebuild: Action on Subscriber Rebuild with mirror: Action on subscriber 1. Update Live items on the subscriber. Published items 1. No action. 1. Revert Live items on the subscriber. 1. Update Live or Draft items on the subscriber. 2. Delete Live items on the subscriber. 3. Restore Live items on the subscriber. All items 1. No action. 2. Add items on the subscriber. 3. Create items on the subscriber. 1. Revert items on the subscriber. 2. Add items on the subscriber. 3. Delete items on the subscriber. 1. Update Live or Draft items on the subscriber. 2. Delete Live items on the subscriber. 3. Restore items on the subscriber. 4. Create items on the subscriber. 5. Purge items on the subscriber. All items and versions 1. No action. 2. Add items on the subscriber. 3. Delete items on the subscriber. 4. No action. 5. No action. 1. Revert items on the subscriber. 2. Add items on the subscriber. 3. Purge items on the subscriber. 4. Purge items on the subscriber. 5. No action. Click Finish . To begin syndication, click Update Subscriber . Using a security proxy: The setup of a syndication pair assumes that the subscriber host name that the syndicator uses is the same as the host name used to access the subscriber to run the wizard. In the case where a security proxy is in place in front of the subscriber cluster, this host name is the host name of the security proxy. Syndication must be set up directly between the syndicator and subscriber, not through the security proxy. After creation of the syndication pair, the syndicator must be manually edited and changed to use the actual subscriber host name rather than the host name of the security proxy. Without this extra step, syndication will not be successful.","title":"Creating a syndication relationship by using the Administration view"},{"location":"panel_help/wcm_syndication_settingup/#creating-a-syndication-relationship-by-using-the-administration-view","text":"You can set up HCL Digital Experience syndication by using the Administration Portlets or the command line. Make sure that you have the appropriate configuration setup before you enable syndication. Disk space Before you use syndication, you must ensure that your subscriber has sufficient memory to receive the data that is syndicated from the syndicator. For example, if you are going to syndicate all libraries, then you need at least as much space on your subscriber as the database used by your syndicator. Swap space Ensure that you have at least as much swap space allocated on the subscriber server as you have physical memory. Cross version syndication Cross-version syndication is supported between the following releases. Syndication from a newer release to an older release is not supported: HCL Portal version 7.0.0.2 with CF26 or higher. HCL Portal 8.0.0.1 with CF09 or higher. HCL Portal 8.5 or higher. Library already exists on the subscriber First-time syndication to an existing library is not supported. If you attempt to syndicate a library to a subscriber that already has a library with the same name, an error results. Large library with more that 10000 items To syndicate a library that contains more than 10000 items, update the maximum Java heap size that is used by the portal application server on the subscriber server: In the WebSphere\u00ae Integrated Solutions Console, browse to the Java virtual machine settings. Stand-alone server: Servers > Server Types > WebSphere application servers > HCL Digital Experience > Java and Process Management > Process definition > Java Virtual Machine Clustered server: System administration > Deployment manager > Java and Process Management > Process Definition > Java Virtual Machine Update the value in the Maximum Heap Size field. A value of at least 1024 MB is recommended. Click OK , and then save your changes. To set up syndication between web content libraries on two HCL Web Content Manager applications, establish a relationship between a syndicator and a subscriber. The syndicating server contains the data to be replicated, and the subscribing server receives the replicated data. What can and cannot be syndicated: Changes to only the library name or description are syndicated. Changes to other library properties, such as user access to a library, are not syndicated. If you want the same settings on all your syndicated libraries, you must manually make the same changes to any subscriber libraries. If content from one library (Library A) uses an item from another library (Library B), you must include both libraries in the syndicator. Including both libraries ensures that all items are syndicated successfully. If you include only Library A in the syndicator, any items in Library A that reference items in Library B are not syndicated. Syndication errors are also generated. If you add a library to a syndicator after the initial syndication, you must click Rebuild to force the new library to be syndicated immediately. If you are creating a two-way syndication relationship, you must use a consistent syndication strategy. For example, if you syndicate \"All items\", then both syndication relationships must be syndicating \"All items\". Ensure both the subscriber and syndicator are running and that they can access each other over a network. On your subscriber server, log in to HCL Digital Experience. If using HCL Digital Experience 9.5, go to the Practitioner Studio interface. Go to Administration > Security > Manage Users and Groups and create a shared credential vault slot. The user assigned access to the credential vault must exist on the syndicator and must have Administrator access to the WCM REST SERVICE virtual resource and Content Root (Web Content Libraries portlet > Set Access on Root). Go to Web Content > Subscribers . Click Subscribe Now . Enter the syndicator URL in the form of http://HostName:HostPort/WcmContextRoot . For example: http://authoring:10039/wps/wcm Note: When Setting Up WCM Syndication using Digital Experience 9.5 Containers in Kubernetes: When you first subscribe to a syndicator, on-prem deployments will use a URL in this format: http://HostName:HostPort/WcmContextRoot When syndicating between Kubernetes setups, the URL should look like this: https://service_name.namespace_name:HostPort/WcmContextRoot Note: For syndication to work in HTTPs, you have to import the SSL certificates between syndicator and subscriber servers. Once the syndication pair has been created, you must edit the syndicator. The Subscriber URL field needs to be modified to look like this: http://service_name.namespace_name:HostPort/WcmContextRoot/connect?MOD=Subs Once the change to the syndicator properties has been made, syndication will work properly. Note: When you syndicate from a virtual portal: Using the URL context of a virtual portal: http://HostName:HostPort/wps/wcm/url_context Using the host name of a virtual portal: http://VirtualHostName:HostPort/wps/wcm Enter a name for the syndicator item. This name is used for the syndicator item that is created on the syndicator server. Enter a name that helps identify the syndication relationship that you are creating. This name must be unique and cannot be the same as an existing syndicator name. Note: To reuse syndicator names of previously deleted syndication relationships on a subscriber, you must also delete the same relationship on the syndicator. Enter a name for the subscriber item. This name is used for the subscriber item that is created on the subscriber server. Enter a name that helps identify the syndication relationship that you are creating. This name must be unique and cannot be the same as an existing subscriber name. Select the credential vault slot that you created previously. Click Next Cross-version syndication: If you syndicate to a server where CF3 for HCL Portal is not installed, steps 11-12 are skipped. Select a syndication schedule mode: Configured : This option uses the mode that is configured in the WCM WCMConfigService service. Automatic : Syndication is scheduled automatically based on the configured syndication interval. Manual : Syndication occurs only when requested by using the administration portlet. Select Update syndication when a syndication pair is created to run a one-off syndication event when the syndication pair is successfully created. This is not related to any automatic configuration settings. Click Next Select the libraries that you want to subscribe to and the syndication type. Published items: Published item syndication is mostly used when you syndicate to a staging or delivery server. The following items are syndicated: Published Expired Draft items, projects, project templates, and items in a project are not syndicated. All items: Use \"All items\" syndication to gradually syndicate projects to a staging or delivery server, rather than waiting until all items in a project achieve a published state. The following items are syndicated: Published Expired Draft items Projects that contain draft items saved in the configured library. See the HCL Product Documentation topic named Projects and syndication for further information. Project templates are not syndicated. All items and versions: \"All items and versions\" syndication is mostly used when you syndicate between servers within an authoring environment. Selecting this option can increase the amount of time taken for syndication because it includes versions and deleted items. The following items are syndicated: Published Expired Draft items Projects that contain draft items saved in the configured library. See the HCL Product Documentation topic named Projects and syndication for further information. Versions Deleted items Project templates are not syndicated. Note: If the syndication configuration is updated to change the syndication type to be more restrictive, then a normal rebuild will not remove previously syndicated items that are now out of scope. For example draft items on the subscriber would not be removed if the syndication type is changed from \"All Items\" to \"Published Items\". A Rebuild With Mirror can be used to fully synchronize the library with respect to the new syndication type which includes the removal of subscriber modifications and previously syndicated items. Action on syndicator Syndication type on syndicator Rebuild: Action on Subscriber Rebuild with mirror: Action on subscriber 1. Update Live items on the syndicator. Published items 1. Updates Live items on the subscriber. 1. Updates Live items on the subscriber. 1. Update Live or Draft items on the syndicator. 2. Delete Live items on the syndicator. 3. Restore Live items on the syndicator. All items 1. Update Live or Draft items on subscriber. 2. Purge items on the subscriber. 3. Create items on the subscriber. 1. Update Live or Draft items on subscriber. 2. Purge items on the subscriber. 3. Create items on the subscriber. 1. Update items on the syndicator. 2. Delete items on the syndicator. 3. Restore items on the syndicator. 4. Purge items on the syndicator. All items and versions 1. Update items on subscriber. 2. Delete items on the subscriber. 3. Restore items on the subscriber. 4. No action. 1. Update items on subscriber. 2. Delete items on the subscriber. 3. Restore items on the subscriber. 4. No action. Action on subscriber Syndication type on syndicator Rebuild: Action on Subscriber Rebuild with mirror: Action on subscriber 1. Update Live items on the subscriber. Published items 1. No action. 1. Revert Live items on the subscriber. 1. Update Live or Draft items on the subscriber. 2. Delete Live items on the subscriber. 3. Restore Live items on the subscriber. All items 1. No action. 2. Add items on the subscriber. 3. Create items on the subscriber. 1. Revert items on the subscriber. 2. Add items on the subscriber. 3. Delete items on the subscriber. 1. Update Live or Draft items on the subscriber. 2. Delete Live items on the subscriber. 3. Restore items on the subscriber. 4. Create items on the subscriber. 5. Purge items on the subscriber. All items and versions 1. No action. 2. Add items on the subscriber. 3. Delete items on the subscriber. 4. No action. 5. No action. 1. Revert items on the subscriber. 2. Add items on the subscriber. 3. Purge items on the subscriber. 4. Purge items on the subscriber. 5. No action. Click Finish . To begin syndication, click Update Subscriber . Using a security proxy: The setup of a syndication pair assumes that the subscriber host name that the syndicator uses is the same as the host name used to access the subscriber to run the wizard. In the case where a security proxy is in place in front of the subscriber cluster, this host name is the host name of the security proxy. Syndication must be set up directly between the syndicator and subscriber, not through the security proxy. After creation of the syndication pair, the syndicator must be manually edited and changed to use the actual subscriber host name rather than the host name of the security proxy. Without this extra step, syndication will not be successful.","title":"Creating a syndication relationship by using the Administration view"},{"location":"panel_help/wcm_using/","text":"Web content user assistance Use the web content authoring portlet and inline editing tools to create and manage web content items.","title":"Web content user assistance"},{"location":"panel_help/wcm_using/#web-content-user-assistance","text":"Use the web content authoring portlet and inline editing tools to create and manage web content items.","title":"Web content user assistance"},{"location":"plan/plan_credvault/","text":"Credential Vault The Credential Vault is a service that stores credentials that allow portlets to log in to applications outside the realm on behalf of the user. Using Credential Vault, a portlet can retrieve a user's authentication identity and then pass the information to a backend application. The Credential Vault features the following level of sign-on: Passive Credentials Passive Credentials retrieve stored secret data such as user ID and password or certificates. This option is more flexible. However, it requires portlet writers to manage their own connections and authentication to backend applications with the credentials they retrieved from the Credential Vault. Credential objects can also pass IBM\u00ae Security Access Manageror Computer Associates eTrust SiteMinder single sign-on tokens to backend applications. HCL Digital Experience provides one simple database vault implementation for mappings to secrets for other enterprise applications. By default, the Credential Vault contains an administrator-managed vault segment and a user-managed vault segment. Administrator-managed vaults allow users to update mappings; however, users cannot add new applications to this vault. The user-managed vault segment allows users to add application definitions, such as a POP3 mail account, under the user vault and store a mapping there. By default, the vault uses an encryption plug-in that encodes the passwords in Base 64. HCL Portal initially provides two vault adapter configurations that write to the database: A default vault for administrator-managed vault segments that stores credentials in the release domain: default-release And a default vault for user-managed vault segments that stores credentials in the customization domain: default-customization HCL Portal also supports the storage and retrieval of credentials from other vault services, such as Security Access Manager. HCL Portal includes a Credential Vault adapter for Security Access Manager. This plug-in works on the following operating systems: AIX\u00ae Solaris Windows\u2122 z/OS\u00ae","title":"Credential Vault"},{"location":"plan/plan_credvault/#credential-vault","text":"The Credential Vault is a service that stores credentials that allow portlets to log in to applications outside the realm on behalf of the user. Using Credential Vault, a portlet can retrieve a user's authentication identity and then pass the information to a backend application. The Credential Vault features the following level of sign-on: Passive Credentials Passive Credentials retrieve stored secret data such as user ID and password or certificates. This option is more flexible. However, it requires portlet writers to manage their own connections and authentication to backend applications with the credentials they retrieved from the Credential Vault. Credential objects can also pass IBM\u00ae Security Access Manageror Computer Associates eTrust SiteMinder single sign-on tokens to backend applications. HCL Digital Experience provides one simple database vault implementation for mappings to secrets for other enterprise applications. By default, the Credential Vault contains an administrator-managed vault segment and a user-managed vault segment. Administrator-managed vaults allow users to update mappings; however, users cannot add new applications to this vault. The user-managed vault segment allows users to add application definitions, such as a POP3 mail account, under the user vault and store a mapping there. By default, the vault uses an encryption plug-in that encodes the passwords in Base 64. HCL Portal initially provides two vault adapter configurations that write to the database: A default vault for administrator-managed vault segments that stores credentials in the release domain: default-release And a default vault for user-managed vault segments that stores credentials in the customization domain: default-customization HCL Portal also supports the storage and retrieval of credentials from other vault services, such as Security Access Manager. HCL Portal includes a Credential Vault adapter for Security Access Manager. This plug-in works on the following operating systems: AIX\u00ae Solaris Windows\u2122 z/OS\u00ae","title":"Credential Vault"},{"location":"practitioner_studio/enable_prac_studio/","text":"How to enable Practitioner Studio This section outlines how to enable Practitioner Studio and Woodburn Studio in both base portal and virtual portal environments. Enabling Practitioner Studio and Woodburn Studio in base portal Note: It is not necessary to stop or restart Portal when running these configuration tasks. Please note that in order for you to deploy Practitioner Studio and Woodburn Studio to a virtual portal, you must first enable the 95 UI features in base Portal. Open a command line. Change to the wp_profile-root/ConfigEngine directory. Run the enable-v95-UI-features config task. AIX: ./ConfigEngine.sh **enable-v95-UI-features** -DWasPassword=<WAS admin password> -DPortalAdminPwd=<Portal admin password> Linux: ./ConfigEngine.sh **enable-v95-UI-features** -DWasPassword=<WAS admin password> -DPortalAdminPwd=<Portal admin password> Windows: ConfigEngine.bat **enable-v95-UI-features** -DWasPassword=<WAS admin password> -DPortalAdminPwd=<Portal admin password> Note: Any actions taken when using the Preview As User feature in DAM and CC shows the site as the original user, not the one that you are using to preview. Enabling Practitioner Studio and Woodburn Studio in an existing virtual portal Open a command line. Change to the wp_profile-root/ConfigEngine directory. Run the enable-v95-UI-features-virtual-portal config task. AIX: ./ConfigEngine.sh **enable-v95-UI-features-virtual-portal** -DWasPassword=<WAS admin password> -DPortalAdminPwd=<Portal admin password> **-DVirtualPortalContext=** Linux: ./ConfigEngine.sh **enable-v95-UI-features-virtual-portal** -DWasPassword=<WAS admin password> -DPortalAdminPwd=<Portal admin password> **-DVirtualPortalContext=** Windows: ConfigEngine.bat **enable-v95-UI-features-virtual-portal** -DWasPassword=<WAS admin password> -DPortalAdminPwd=<Portal admin password> **-DVirtualPortalContext=** Notes: To configure the virtual Portal Manager so that Practitioner Studio is deployed for the newly created virtual portals, see How to configure Practitioner Studio . To enable Practitioner Studio and Woodburn Studio on all available Virtual Portals, you can use the following parameter: -DUpdateVPs=true If -DVirtualPortalContext= has a space in the context name, please add quotes around the name of the context. Enabling HCL DX site to be seen in SiteMap Enabling Practitioner Studio via the enable task has the following effect to your previous view: The Administration pages will be disabled, the Home pages will be excluded from the SiteMap, and first-level navigation drop downs in the toolbar and Practitioner Studio. Follow the steps to enable your site to be seen in SiteMap: Navigate to Administration > Managed Pages . Click Edit Page Properties for your home page. Expand Advanced Options and then click I want to set parameters . Create a new parameter com.ibm.portal.Hidden with value false. Save, then test.","title":"How to enable Practitioner Studio"},{"location":"practitioner_studio/enable_prac_studio/#how-to-enable-practitioner-studio","text":"This section outlines how to enable Practitioner Studio and Woodburn Studio in both base portal and virtual portal environments.","title":"How to enable Practitioner Studio"},{"location":"practitioner_studio/enable_prac_studio/#enabling-practitioner-studio-and-woodburn-studio-in-base-portal","text":"Note: It is not necessary to stop or restart Portal when running these configuration tasks. Please note that in order for you to deploy Practitioner Studio and Woodburn Studio to a virtual portal, you must first enable the 95 UI features in base Portal. Open a command line. Change to the wp_profile-root/ConfigEngine directory. Run the enable-v95-UI-features config task. AIX: ./ConfigEngine.sh **enable-v95-UI-features** -DWasPassword=<WAS admin password> -DPortalAdminPwd=<Portal admin password> Linux: ./ConfigEngine.sh **enable-v95-UI-features** -DWasPassword=<WAS admin password> -DPortalAdminPwd=<Portal admin password> Windows: ConfigEngine.bat **enable-v95-UI-features** -DWasPassword=<WAS admin password> -DPortalAdminPwd=<Portal admin password> Note: Any actions taken when using the Preview As User feature in DAM and CC shows the site as the original user, not the one that you are using to preview.","title":"Enabling Practitioner Studio and Woodburn Studio in base portal"},{"location":"practitioner_studio/enable_prac_studio/#enabling-practitioner-studio-and-woodburn-studio-in-an-existing-virtual-portal","text":"Open a command line. Change to the wp_profile-root/ConfigEngine directory. Run the enable-v95-UI-features-virtual-portal config task. AIX: ./ConfigEngine.sh **enable-v95-UI-features-virtual-portal** -DWasPassword=<WAS admin password> -DPortalAdminPwd=<Portal admin password> **-DVirtualPortalContext=** Linux: ./ConfigEngine.sh **enable-v95-UI-features-virtual-portal** -DWasPassword=<WAS admin password> -DPortalAdminPwd=<Portal admin password> **-DVirtualPortalContext=** Windows: ConfigEngine.bat **enable-v95-UI-features-virtual-portal** -DWasPassword=<WAS admin password> -DPortalAdminPwd=<Portal admin password> **-DVirtualPortalContext=** Notes: To configure the virtual Portal Manager so that Practitioner Studio is deployed for the newly created virtual portals, see How to configure Practitioner Studio . To enable Practitioner Studio and Woodburn Studio on all available Virtual Portals, you can use the following parameter: -DUpdateVPs=true If -DVirtualPortalContext= has a space in the context name, please add quotes around the name of the context.","title":"Enabling Practitioner Studio and Woodburn Studio in an existing virtual portal"},{"location":"practitioner_studio/enable_prac_studio/#enabling-hcl-dx-site-to-be-seen-in-sitemap","text":"Enabling Practitioner Studio via the enable task has the following effect to your previous view: The Administration pages will be disabled, the Home pages will be excluded from the SiteMap, and first-level navigation drop downs in the toolbar and Practitioner Studio. Follow the steps to enable your site to be seen in SiteMap: Navigate to Administration > Managed Pages . Click Edit Page Properties for your home page. Expand Advanced Options and then click I want to set parameters . Create a new parameter com.ibm.portal.Hidden with value false. Save, then test.","title":"Enabling HCL DX site to be seen in SiteMap"},{"location":"practitioner_studio/practitionerstudio_overview/","text":"Practitioner Studio Practitioner Studio is a newly designed user experience for HCL Digital Experience. Please see the following pages to understand how the new navigation is organized. Note: With HCL Digital Experience 9.5 Container Update CF192 and later, the following issues are experienced with use of the Safari web browser (Version 13.0.5 (15608.5.11). These issues, which were found in Web Content from the Practitioner Studio side navigator, will be resolved in a later software update: List navigation is not accessible using keyboard Incorrect focus behavior in Open Search and Close sidebar buttons Remnant of highlight outline of Search icon remains after back-tabbing to Back link Overview Practitioner Studio is a newly designed user experience for HCL Digital Experience. There are several advantages to this new look. The consolidated navigation has a consistent look and feel for most administration tasks so that commonly used tasks are found together. User assistance is easily found and is provided for pages that are in the navigation. In time, this interface also serves as the launching point for newly developed features. Enabling Practitioner Studio deactivates the legacy Administration and Applications pages. However, all of these functions are still available.","title":"Practitioner Studio"},{"location":"practitioner_studio/practitionerstudio_overview/#practitioner-studio","text":"Practitioner Studio is a newly designed user experience for HCL Digital Experience. Please see the following pages to understand how the new navigation is organized. Note: With HCL Digital Experience 9.5 Container Update CF192 and later, the following issues are experienced with use of the Safari web browser (Version 13.0.5 (15608.5.11). These issues, which were found in Web Content from the Practitioner Studio side navigator, will be resolved in a later software update: List navigation is not accessible using keyboard Incorrect focus behavior in Open Search and Close sidebar buttons Remnant of highlight outline of Search icon remains after back-tabbing to Back link","title":"Practitioner Studio"},{"location":"practitioner_studio/practitionerstudio_overview/#overview","text":"Practitioner Studio is a newly designed user experience for HCL Digital Experience. There are several advantages to this new look. The consolidated navigation has a consistent look and feel for most administration tasks so that commonly used tasks are found together. User assistance is easily found and is provided for pages that are in the navigation. In time, this interface also serves as the launching point for newly developed features. Enabling Practitioner Studio deactivates the legacy Administration and Applications pages. However, all of these functions are still available.","title":"Overview"},{"location":"practitioner_studio/working_prac_studio/","text":"Working with Practitioner Studio Learn how to enable, configure and disable Practitioner Studio on the latest version of HCL Digital Experience. If you are using the on-premise installation of HCL Digital Experience 9.5, you will need to perform deployment and configuration steps in order to work with Practitioner Studio. If you choose not to enable Practitioner Studio, you can still do all of the Administrator services that were available in previous releases.","title":"Working with Practitioner Studio"},{"location":"practitioner_studio/working_prac_studio/#working-with-practitioner-studio","text":"Learn how to enable, configure and disable Practitioner Studio on the latest version of HCL Digital Experience. If you are using the on-premise installation of HCL Digital Experience 9.5, you will need to perform deployment and configuration steps in order to work with Practitioner Studio. If you choose not to enable Practitioner Studio, you can still do all of the Administrator services that were available in previous releases.","title":"Working with Practitioner Studio"},{"location":"pzn/dev_pzn_folders_api/","text":"Personalization Folder APIs The Personalization Folder REST APIs provide access to personalization folder capabilities using REST services. As of HCL Digital Experience Container Update and CF CF201, REST APIs are available for Personalization Create a Folder , Get a Folder , and Delete a Folder rule types. For more information on HCL Digital Experience Personalization Folders, refer to the Personalization Help Center topic. APIs are in beta stage at this time - changes are possible until finalized. Access and launch the Personalization REST API Explorer To access the DX Search REST APIs Explorer, after installing HCL DX 9.5 CF or Container Update CF200 or later, launch the following URL, located at dx/api/pzn/v1/explorer/ Example: https://localhost:10039/dx/api/pzn/v1/explorer/ Endpoints The following Personalization REST APIs are available: POST or create a new Personalization Folder REST API GET Personalization Folder details REST API using folder ID DELETE Personalization Folder REST API using folder ID Create a new Personalization Folder REST API Use this API to create a new Personalization folder in the Personalization workspace. POST request to: https://localhost:10039/wps/mycontenthandler/pzn-rest/folders POST Personalization Folder REST API example: https://localhost:10039/wps/mycontenthandler/pzn-rest/folders Sample Request Payload: { \"title\": \"demo\", \"description\": \"demo folder\", \"parentId\": \"b7bbddd7-95c6-4062-8971-134f780002f1\" } Steps to execute the POST Personalization Folder RESTAPI: Login to your Digital Experience solution. The login cookie contains the Authentication token. Leave the cookie field empty if you are already authenticated, unless you intend to put a token value. Provide the title of the folder. (Optional): Provide a description of the folder. (Optional) Provide the parentId of the location of the folder where you want to create. Otherwise, the new folder is to be created in the workspace by default. To get the parentId of the workspace or folder: Navigate to WCM Support Tools . Click Browse Nodes . To get the workspace parentID , navigate to Properties section and use the value of the jcr:uuid field as shown below. To get the parentID for an existing folder, click to select a folder from the Children section and use the value of the jcr:uuid field as shown below. Example: Response Structure Details: The response structure will get the details of the created folder and the response for the created folder. For more details on the Response Payload, please refer to the Response Payload section below. The example below shows the response for one Personalization folder: { \"id\": \"5bd89b0d-f024-4de2-a991-976315e917be\", \"description\": \"demo folder\", \"title\": \"demo\", \"authors\": \"uid=wpsadmin,o=defaultWIMFileBasedRealm\", \"creator\": \"uid=wpsadmin,o=defaultWIMFileBasedRealm\", \"created\": \"2022-01-13T07:14:01.035Z\", \"lastModified\": \"2022-01-13T07:14:01.035Z\", \"lastModifier\": \"uid=wpsadmin,o=defaultWIMFileBasedRealm\", \"parentId\": \"_6QR_0048AAQUGF0A1T2A_18L\" } Combined Response Structure: When you execute Post Personalization Folder REST API, it creates a folder in the Personalization interface Workspace or inside an existing folder. parentId is the main attribute to use to find the difference between the rules available in the Workspace and Folder : Workspace parentId always starts with a hyphen (\"-\"). Example: \"parentId\": \"_6QR_0048AAQUGF0A1T2A_18L\" Folder parentId always starts without a hyphen (\"-\"). Example: \"parentId\": \"ee99433c-82d2-46eb-b48b-90cc234e57e2\" POST Personalization Folder REST API Success and Error Messages Error Code Means 200 This code will come when we create a folder successfully. 400 This code will be presented if the input parameters are missing or invalid. - Title is missing in body. - Title is empty in body. - ParentId is invalid in body. 401 This code will be presented when the LtpaToken is invalid or expired. 403 This code will be presented when user access is restricted. 409 This code will be presented when we you are trying to create a folder with the same of an existing folder. 500 This code will be presented when an internal server error occurs. Get Personalization Folder-ID REST API The Get Personalization Folder ID REST API is used to get individual Personalization Folder ID details. GET Request format: https://localhost:10039/wps/mycontenthandler/pzn-rest/folders/{folder-id} GET Personalization Folder ID example: https://localhost:10039/wps/mycontenthandler/pzn-rest/folders/5bd89b0d-f024-4de2-a991-976315e917be Steps to execute the GET Personalization Folder ID REST API: Login to your Digital Experience solution. The login cookie contains the Authentication token. Leave the cookie field empty if you are already authenticated, unless you intend to put a token value. Obtain the Get Personalization Folder ID details using the REST API GET all API command, as shown in the following example: Response structure details: The response structure will get the details of the selected Personalization ID folder. For more details, see Response Payload below. GET Personalization Folder ID Success and Error Messages: Error Code Means 200 This code will be presented when the folder details are obtained successfully. 401 This code will be presented when the LtpaToken is invalid or expired. 403 This code will be presented when access is restricted for user. 404 This code will be presented when the Folder ID is not found or invalid. 500 This code will be presented when an internal server error occurs. Delete Personalization Folder REST API The Delete Personalization Folder ID REST API is used to delete a selected Personalization Folder. Note: When deleting a folder, it would delete all the rules and sub-folders created within it. DELETE Request format: https://localhost:10039/wps/mycontenthandler/pzn-rest/folders/{folder-id} DELETE Personalization Folder ID example: https://localhost:10039/wps/mycontenthandler/pzn-rest/folders/880bb281-bb82-489c-a220-56104f0f638d Steps to execute the DELETE Personalization Folder ID REST API: Login to your Digital Experience solution. The login cookie contains the Authentication token. Leave the cookie field empty if you are already authenticated, unless you intend to put a token value. Delete the Personalization Folder you wish to delete by providing the folder ID as shown in the following example: Response structure details: { \"message\": Folder with id: 880bb281-bb82-489c-a220-56104f0f638d deleted successfully } DELETE Personalization Folder ID Success and Error Messages: Error Code Means 200 This code will be presented when the selected folder is deleted successfully. 401 This code will be presented when the LtpaToken is invalid or expired. 403 This code will be presented when access is restricted for user. 404 This code will be presented when the Folder ID is not found or invalid. 500 This code will be presented when an internal server error occurs. Response payload \"id\" - Field to indicate folder uuid. \"description\" - Field to indicate description of the folder. \"title\" - Field to indicate that title of the folder. \"authors\" - Field to indicate that owner of the folder. \"creator\" - Field to indicate that creator of the folder. \"created\" - Field to indicate that creation date and time of the folder. \"lastModified\" - Filed to indicate that last modified date and time of the folder. \"lastModifier\" - Filed to indicate that details of the user who is last modified the folder. \"parentId\" - Field to indicate to find the difference between the location of the folder.","title":"Personalization Folder APIs"},{"location":"pzn/dev_pzn_folders_api/#personalization-folder-apis","text":"The Personalization Folder REST APIs provide access to personalization folder capabilities using REST services. As of HCL Digital Experience Container Update and CF CF201, REST APIs are available for Personalization Create a Folder , Get a Folder , and Delete a Folder rule types. For more information on HCL Digital Experience Personalization Folders, refer to the Personalization Help Center topic. APIs are in beta stage at this time - changes are possible until finalized.","title":"Personalization Folder APIs"},{"location":"pzn/dev_pzn_folders_api/#access-and-launch-the-personalization-rest-api-explorer","text":"To access the DX Search REST APIs Explorer, after installing HCL DX 9.5 CF or Container Update CF200 or later, launch the following URL, located at dx/api/pzn/v1/explorer/ Example: https://localhost:10039/dx/api/pzn/v1/explorer/","title":"Access and launch the Personalization REST API Explorer"},{"location":"pzn/dev_pzn_folders_api/#endpoints","text":"The following Personalization REST APIs are available: POST or create a new Personalization Folder REST API GET Personalization Folder details REST API using folder ID DELETE Personalization Folder REST API using folder ID","title":"Endpoints"},{"location":"pzn/dev_pzn_folders_api/#create-a-new-personalization-folder-rest-api","text":"Use this API to create a new Personalization folder in the Personalization workspace. POST request to: https://localhost:10039/wps/mycontenthandler/pzn-rest/folders POST Personalization Folder REST API example: https://localhost:10039/wps/mycontenthandler/pzn-rest/folders Sample Request Payload: { \"title\": \"demo\", \"description\": \"demo folder\", \"parentId\": \"b7bbddd7-95c6-4062-8971-134f780002f1\" } Steps to execute the POST Personalization Folder RESTAPI: Login to your Digital Experience solution. The login cookie contains the Authentication token. Leave the cookie field empty if you are already authenticated, unless you intend to put a token value. Provide the title of the folder. (Optional): Provide a description of the folder. (Optional) Provide the parentId of the location of the folder where you want to create. Otherwise, the new folder is to be created in the workspace by default. To get the parentId of the workspace or folder: Navigate to WCM Support Tools . Click Browse Nodes . To get the workspace parentID , navigate to Properties section and use the value of the jcr:uuid field as shown below. To get the parentID for an existing folder, click to select a folder from the Children section and use the value of the jcr:uuid field as shown below. Example: Response Structure Details: The response structure will get the details of the created folder and the response for the created folder. For more details on the Response Payload, please refer to the Response Payload section below. The example below shows the response for one Personalization folder: { \"id\": \"5bd89b0d-f024-4de2-a991-976315e917be\", \"description\": \"demo folder\", \"title\": \"demo\", \"authors\": \"uid=wpsadmin,o=defaultWIMFileBasedRealm\", \"creator\": \"uid=wpsadmin,o=defaultWIMFileBasedRealm\", \"created\": \"2022-01-13T07:14:01.035Z\", \"lastModified\": \"2022-01-13T07:14:01.035Z\", \"lastModifier\": \"uid=wpsadmin,o=defaultWIMFileBasedRealm\", \"parentId\": \"_6QR_0048AAQUGF0A1T2A_18L\" } Combined Response Structure: When you execute Post Personalization Folder REST API, it creates a folder in the Personalization interface Workspace or inside an existing folder. parentId is the main attribute to use to find the difference between the rules available in the Workspace and Folder : Workspace parentId always starts with a hyphen (\"-\"). Example: \"parentId\": \"_6QR_0048AAQUGF0A1T2A_18L\" Folder parentId always starts without a hyphen (\"-\"). Example: \"parentId\": \"ee99433c-82d2-46eb-b48b-90cc234e57e2\" POST Personalization Folder REST API Success and Error Messages Error Code Means 200 This code will come when we create a folder successfully. 400 This code will be presented if the input parameters are missing or invalid. - Title is missing in body. - Title is empty in body. - ParentId is invalid in body. 401 This code will be presented when the LtpaToken is invalid or expired. 403 This code will be presented when user access is restricted. 409 This code will be presented when we you are trying to create a folder with the same of an existing folder. 500 This code will be presented when an internal server error occurs.","title":"Create a new Personalization Folder REST API"},{"location":"pzn/dev_pzn_folders_api/#get-personalization-folder-id-rest-api","text":"The Get Personalization Folder ID REST API is used to get individual Personalization Folder ID details. GET Request format: https://localhost:10039/wps/mycontenthandler/pzn-rest/folders/{folder-id} GET Personalization Folder ID example: https://localhost:10039/wps/mycontenthandler/pzn-rest/folders/5bd89b0d-f024-4de2-a991-976315e917be Steps to execute the GET Personalization Folder ID REST API: Login to your Digital Experience solution. The login cookie contains the Authentication token. Leave the cookie field empty if you are already authenticated, unless you intend to put a token value. Obtain the Get Personalization Folder ID details using the REST API GET all API command, as shown in the following example: Response structure details: The response structure will get the details of the selected Personalization ID folder. For more details, see Response Payload below. GET Personalization Folder ID Success and Error Messages: Error Code Means 200 This code will be presented when the folder details are obtained successfully. 401 This code will be presented when the LtpaToken is invalid or expired. 403 This code will be presented when access is restricted for user. 404 This code will be presented when the Folder ID is not found or invalid. 500 This code will be presented when an internal server error occurs.","title":"Get Personalization Folder-ID REST API"},{"location":"pzn/dev_pzn_folders_api/#delete-personalization-folder-rest-api","text":"The Delete Personalization Folder ID REST API is used to delete a selected Personalization Folder. Note: When deleting a folder, it would delete all the rules and sub-folders created within it. DELETE Request format: https://localhost:10039/wps/mycontenthandler/pzn-rest/folders/{folder-id} DELETE Personalization Folder ID example: https://localhost:10039/wps/mycontenthandler/pzn-rest/folders/880bb281-bb82-489c-a220-56104f0f638d Steps to execute the DELETE Personalization Folder ID REST API: Login to your Digital Experience solution. The login cookie contains the Authentication token. Leave the cookie field empty if you are already authenticated, unless you intend to put a token value. Delete the Personalization Folder you wish to delete by providing the folder ID as shown in the following example: Response structure details: { \"message\": Folder with id: 880bb281-bb82-489c-a220-56104f0f638d deleted successfully } DELETE Personalization Folder ID Success and Error Messages: Error Code Means 200 This code will be presented when the selected folder is deleted successfully. 401 This code will be presented when the LtpaToken is invalid or expired. 403 This code will be presented when access is restricted for user. 404 This code will be presented when the Folder ID is not found or invalid. 500 This code will be presented when an internal server error occurs.","title":"Delete Personalization Folder REST API"},{"location":"pzn/dev_pzn_folders_api/#response-payload","text":"\"id\" - Field to indicate folder uuid. \"description\" - Field to indicate description of the folder. \"title\" - Field to indicate that title of the folder. \"authors\" - Field to indicate that owner of the folder. \"creator\" - Field to indicate that creator of the folder. \"created\" - Field to indicate that creation date and time of the folder. \"lastModified\" - Filed to indicate that last modified date and time of the folder. \"lastModifier\" - Filed to indicate that details of the user who is last modified the folder. \"parentId\" - Field to indicate to find the difference between the location of the folder.","title":"Response payload"},{"location":"pzn/pzn_intro/","text":"Targeted content and Portal Personalization Targeted content provides you with a way to deliver multiple pieces of content to different audiences. Targeted content matches the best content with the most appropriate group by using segments. Segments help you split your audience into meaningful groups with different interests or characteristics. A targeted spot displays different content to different segments. You can create a target spot by defining content that is targeted to specific segments: Add content items to your content spot in a web content viewer. Add segments to each content item to display your content to the correct audience. Segments help you define your target audience. For example, you can define the audience by users, device class, or other attributes. You can create managed segments in your content library. Creating managed segments in your content library has the following benefits: Scoping. Because your library is scoped to a virtual portal, only users on that virtual portal see the content from that library. Workflow project support. You can use content from the library to create project drafts. Syndication support. There is no need to follow the Personalization Publish process. Personalization of content Targeted content applies Personalization concepts to a new user interface where you create Personalization rules as you work to target content to selected segments. Personalization allows a portal or website to choose which content must appear for a particular user. The HCL Portal Personalization component selects content for users based on information in their profiles and on business rules. Using Portal Personalization, business experts can classify site visitors into segments and target relevant content to each segment. For example, a site that is using Personalization might show different news articles to managers than to regular employees or different information to valued customers. You can define content through a number of applications, including HCL Web Content Manager. Personalization automatically detects the content definition from these applications. Definitions of database or LDAP content types can also be made through a Personalization wizard included with IBM\u00ae Rational\u00ae Application Developer. After you define the content type, attributes of the content are shown to the rule author. The rule author can use these attributes to make conditions that define if and when certain content is displayed, or even if certain actions like database updates and triggered emails occur. To create new Personalization rules, go to Applications > Personalization > Business Rules . Benefits of Personalization The Personalization component selects content for users that are based on information in their profiles and on business logic. With Personalization facilities, subject matter experts can select content that is suited to the needs and interests of each site visitor. These web-based tools help companies quickly and easily use content that is created by business and subject matter experts. Personalization classifies site visitors into segments and then targets relevant content to each segment. Business experts create the rules for classifying users and selecting content, by using web-based tools. Personalization has built-in capabilities for the IBM Java\u2122 Content Repository. This means that personalization rules can easily be used in your Web Content Manager solutions. Personalization also includes a recommendation engine that provides collaborative filtering capabilities. Collaborative filtering uses statistical techniques to identify groups of users with similar interests or behaviors. Inferences can be made about what a particular user might be interested in, based on the interests of the other members of the group. Campaign management tools are also included with Personalization. Campaigns are sets of business rules that work together to accomplish a business objective. For example, a Human Resources manager might want to run a campaign to encourage employees to enroll in a stock purchase plan or sign up for some other new benefit that is now available to employees. The Human Resources manager would define a set of rules that are shown to accomplish this business objective. Campaigns have start and stop dates and times and can be email and web-page based. Several campaigns can run simultaneously and can be prioritized. Parent topic: Web content","title":"Targeted content and Portal Personalization"},{"location":"pzn/pzn_intro/#targeted-content-and-portal-personalization","text":"Targeted content provides you with a way to deliver multiple pieces of content to different audiences. Targeted content matches the best content with the most appropriate group by using segments. Segments help you split your audience into meaningful groups with different interests or characteristics. A targeted spot displays different content to different segments. You can create a target spot by defining content that is targeted to specific segments: Add content items to your content spot in a web content viewer. Add segments to each content item to display your content to the correct audience. Segments help you define your target audience. For example, you can define the audience by users, device class, or other attributes. You can create managed segments in your content library. Creating managed segments in your content library has the following benefits: Scoping. Because your library is scoped to a virtual portal, only users on that virtual portal see the content from that library. Workflow project support. You can use content from the library to create project drafts. Syndication support. There is no need to follow the Personalization Publish process.","title":"Targeted content and Portal Personalization"},{"location":"pzn/pzn_intro/#personalization-of-content","text":"Targeted content applies Personalization concepts to a new user interface where you create Personalization rules as you work to target content to selected segments. Personalization allows a portal or website to choose which content must appear for a particular user. The HCL Portal Personalization component selects content for users based on information in their profiles and on business rules. Using Portal Personalization, business experts can classify site visitors into segments and target relevant content to each segment. For example, a site that is using Personalization might show different news articles to managers than to regular employees or different information to valued customers. You can define content through a number of applications, including HCL Web Content Manager. Personalization automatically detects the content definition from these applications. Definitions of database or LDAP content types can also be made through a Personalization wizard included with IBM\u00ae Rational\u00ae Application Developer. After you define the content type, attributes of the content are shown to the rule author. The rule author can use these attributes to make conditions that define if and when certain content is displayed, or even if certain actions like database updates and triggered emails occur. To create new Personalization rules, go to Applications > Personalization > Business Rules .","title":"Personalization of content"},{"location":"pzn/pzn_intro/#benefits-of-personalization","text":"The Personalization component selects content for users that are based on information in their profiles and on business logic. With Personalization facilities, subject matter experts can select content that is suited to the needs and interests of each site visitor. These web-based tools help companies quickly and easily use content that is created by business and subject matter experts. Personalization classifies site visitors into segments and then targets relevant content to each segment. Business experts create the rules for classifying users and selecting content, by using web-based tools. Personalization has built-in capabilities for the IBM Java\u2122 Content Repository. This means that personalization rules can easily be used in your Web Content Manager solutions. Personalization also includes a recommendation engine that provides collaborative filtering capabilities. Collaborative filtering uses statistical techniques to identify groups of users with similar interests or behaviors. Inferences can be made about what a particular user might be interested in, based on the interests of the other members of the group. Campaign management tools are also included with Personalization. Campaigns are sets of business rules that work together to accomplish a business objective. For example, a Human Resources manager might want to run a campaign to encourage employees to enroll in a stock purchase plan or sign up for some other new benefit that is now available to employees. The Human Resources manager would define a set of rules that are shown to accomplish this business objective. Campaigns have start and stop dates and times and can be email and web-page based. Several campaigns can run simultaneously and can be prioritized. Parent topic: Web content","title":"Benefits of Personalization"},{"location":"pzn/pzn_overview/","text":"Digital Experience Personalization Digital Experience Personalization provides automatic customization of website content presented to individual users and user groups. Personalization can recognize a specific user based on a profile or can determine characteristics of a user based on previous purchases, products or pages viewed, and so forth. Personalization then selects content that is appropriate for that profile. If a person has a high salary range, Personalization can be configured to retrieve information about a commercial website premium product. If an individual belongs to a particular geographic region, content specific to that region may be targeted to the individual. The page is assembled with the proper personalized information, and the user sees her personalized page. Video: Create and apply A/B Personalized scenarios with HCL Digital Experience Personalization is composed of: Personalization browser - The Personalization user interface: registers resource collections authors rules, campaigns, and content spots maps rules into content spots for a particular campaign Since objects are authored through the Personalization server, the Personalization browser can display rules in production as well as view rules in a staging environment. Rules engine - The rules engine executes rules created in the Personalization browser. A programming interface exists for Personalization to invoke rules, Personalization rules may be invoked through the Personalized List portlet, or rules may be invoked through Web Content Manager Personalization components. Rules associated with pages or portlets through Portal Administration are also automatically triggered. LikeMinds Recommendation engine - The recommendation engine evaluates recommendation rules created in the Personalization browser. Resource engine - The resource engine resolves the queries produced by rules into content pieces to be returned. Content for Personalization is created and approved using whatever content management tool you choose, or may come from an SQL Server, LDAP or any other database. Content is accessed via a set of Resource Collection classes. A logging framework - The logging framework is used to record information about website usage to the feedback database and the recommendation engine. It is entirely up to the site developers to decide what information is logged. The engines rules engine, together with the recommendation engine and the resource engine, are sometimes collectively referred to as the Personalization run time server. The engine identifies the particular user. Personalization retrieves that person's profile. For example, a person may have a salary range included in her profile. Personalization then selects content that is appropriate for that profile. If a person has a high salary range, region code, or other information, Personalization can be configured to retrieve information about a commercial website premium product. The page is assembled with the proper personalized information. The user sees her personalized page. Beginning with HCL DX 9.5 Container Update and CF 200 , a new API explorer is available that allows developers using the Digital Experience Personalization REST APIs to explore and test these APIs. See the topic Digital Experience Personalization REST API Explorer below for details. Types of Personalization There are three types of Personalization: Simple filtering A site displays content based on predefined groups of site visitors. For example, if a site visitor is in the Human Resources department, the site provides access to URLs containing Human Resources policy manuals. Rules engines In a rules based system, the site owner defines a set of business rules which determine what category of content is shown when a certain profile type visits the site. An example would be: Display all four wheel drive SUVs to visitors in the northeast in the 21 to 35 age group. This approach has the advantage of driving the site's behavior with the business objectives of the site owner. The site owner is usually the owner of a marketing campaign or some other business manager. Collaborative filtering A site visitor rates a selection of products, explicitly or implicitly. Those ratings are compared with the ratings offered by other visitors. Software algorithms detect similarities. For example, a visitor receives book recommendations based on the similar purchases of others. Rules versus collaborative filtering When complex filtering is required, a rule-based system may work better than collaborative filtering, and vice versa. The following table details examples where one type of personalization is better than the other. Scenario Which filtering type to use Reason If the number of items offered and users who purchase them are rather low. Rules Very little room to compute user similarity necessary for collaborative filtering. If price points are high or purchasing frequency is low. Rules Finite, limited arenas - collaborative filtering fails because of the inherent lack of diversity. If there is a preexisting dependency between items. Example: Disability policy required for homeowner Rules Recommending a disability policy just because collaborative filtering says many others \"like this user\" also bought a policy is incorrect - one must have the homeowner policy first. If number of items offered and users who purchase them are rather high. Collaborative Cannot write rules covering all items. If price points are low, all quite dissimilar, or the products offered have a wide range of user appeal. Collaborative The wide variance fits the collaborative filtering approach. Collaborative filtering also lowers the risk of making \"bad\" recommendations. When not much information is gathered about the user, but the user can be identified, possibly by a login or cookie. Collaborative In this case, user attributes on which to base rules may be lacking. Collaborative filtering can compare the user's experiences on the site to other users.","title":"Digital Experience Personalization"},{"location":"pzn/pzn_overview/#digital-experience-personalization","text":"Digital Experience Personalization provides automatic customization of website content presented to individual users and user groups. Personalization can recognize a specific user based on a profile or can determine characteristics of a user based on previous purchases, products or pages viewed, and so forth. Personalization then selects content that is appropriate for that profile. If a person has a high salary range, Personalization can be configured to retrieve information about a commercial website premium product. If an individual belongs to a particular geographic region, content specific to that region may be targeted to the individual. The page is assembled with the proper personalized information, and the user sees her personalized page. Video: Create and apply A/B Personalized scenarios with HCL Digital Experience Personalization is composed of: Personalization browser - The Personalization user interface: registers resource collections authors rules, campaigns, and content spots maps rules into content spots for a particular campaign Since objects are authored through the Personalization server, the Personalization browser can display rules in production as well as view rules in a staging environment. Rules engine - The rules engine executes rules created in the Personalization browser. A programming interface exists for Personalization to invoke rules, Personalization rules may be invoked through the Personalized List portlet, or rules may be invoked through Web Content Manager Personalization components. Rules associated with pages or portlets through Portal Administration are also automatically triggered. LikeMinds Recommendation engine - The recommendation engine evaluates recommendation rules created in the Personalization browser. Resource engine - The resource engine resolves the queries produced by rules into content pieces to be returned. Content for Personalization is created and approved using whatever content management tool you choose, or may come from an SQL Server, LDAP or any other database. Content is accessed via a set of Resource Collection classes. A logging framework - The logging framework is used to record information about website usage to the feedback database and the recommendation engine. It is entirely up to the site developers to decide what information is logged. The engines rules engine, together with the recommendation engine and the resource engine, are sometimes collectively referred to as the Personalization run time server. The engine identifies the particular user. Personalization retrieves that person's profile. For example, a person may have a salary range included in her profile. Personalization then selects content that is appropriate for that profile. If a person has a high salary range, region code, or other information, Personalization can be configured to retrieve information about a commercial website premium product. The page is assembled with the proper personalized information. The user sees her personalized page. Beginning with HCL DX 9.5 Container Update and CF 200 , a new API explorer is available that allows developers using the Digital Experience Personalization REST APIs to explore and test these APIs. See the topic Digital Experience Personalization REST API Explorer below for details.","title":"Digital Experience Personalization"},{"location":"pzn/pzn_overview/#types-of-personalization","text":"There are three types of Personalization: Simple filtering A site displays content based on predefined groups of site visitors. For example, if a site visitor is in the Human Resources department, the site provides access to URLs containing Human Resources policy manuals. Rules engines In a rules based system, the site owner defines a set of business rules which determine what category of content is shown when a certain profile type visits the site. An example would be: Display all four wheel drive SUVs to visitors in the northeast in the 21 to 35 age group. This approach has the advantage of driving the site's behavior with the business objectives of the site owner. The site owner is usually the owner of a marketing campaign or some other business manager. Collaborative filtering A site visitor rates a selection of products, explicitly or implicitly. Those ratings are compared with the ratings offered by other visitors. Software algorithms detect similarities. For example, a visitor receives book recommendations based on the similar purchases of others.","title":"Types of Personalization"},{"location":"pzn/pzn_overview/#rules-versus-collaborative-filtering","text":"When complex filtering is required, a rule-based system may work better than collaborative filtering, and vice versa. The following table details examples where one type of personalization is better than the other. Scenario Which filtering type to use Reason If the number of items offered and users who purchase them are rather low. Rules Very little room to compute user similarity necessary for collaborative filtering. If price points are high or purchasing frequency is low. Rules Finite, limited arenas - collaborative filtering fails because of the inherent lack of diversity. If there is a preexisting dependency between items. Example: Disability policy required for homeowner Rules Recommending a disability policy just because collaborative filtering says many others \"like this user\" also bought a policy is incorrect - one must have the homeowner policy first. If number of items offered and users who purchase them are rather high. Collaborative Cannot write rules covering all items. If price points are low, all quite dissimilar, or the products offered have a wide range of user appeal. Collaborative The wide variance fits the collaborative filtering approach. Collaborative filtering also lowers the risk of making \"bad\" recommendations. When not much information is gathered about the user, but the user can be identified, possibly by a login or cookie. Collaborative In this case, user attributes on which to base rules may be lacking. Collaborative filtering can compare the user's experiences on the site to other users.","title":"Rules versus collaborative filtering"},{"location":"reference/deprecated_features/","text":"Deprecated features for HCL Digital Experience 9.5 If you are migrating from an earlier release of HCL Digital Experience, you should be aware of various features and themes that are deprecated per each release. Deprecated features and themes for HCL Digital Experience 9.5 Deprecation means that the features are supported at this time but can be removed in an upcoming CF. It is recommended that deprecated items be removed as soon as possible as they can cause unpredictable behavior. Links to more information on the replacement for those items listed for deprecation will be posted as they become available to provide help as you move away from these features. Previously deprecated features and themes for HCL Digital Experience 9.5 Deprecation means that the features are supported at this time but can be removed in an upcoming CF. It is recommended that deprecated items be removed as soon as possible as they can cause unpredictable behavior. Links to more information on the replacement for those items listed for deprecation will be posted as they become available to provide help as you move away from these features. Parent topic: What's new in HCL Digital Experience 9.5?","title":"Deprecated features for HCL Digital Experience 9.5"},{"location":"reference/deprecated_features/#deprecated-features-for-hcl-digital-experience-95","text":"If you are migrating from an earlier release of HCL Digital Experience, you should be aware of various features and themes that are deprecated per each release. Deprecated features and themes for HCL Digital Experience 9.5 Deprecation means that the features are supported at this time but can be removed in an upcoming CF. It is recommended that deprecated items be removed as soon as possible as they can cause unpredictable behavior. Links to more information on the replacement for those items listed for deprecation will be posted as they become available to provide help as you move away from these features. Previously deprecated features and themes for HCL Digital Experience 9.5 Deprecation means that the features are supported at this time but can be removed in an upcoming CF. It is recommended that deprecated items be removed as soon as possible as they can cause unpredictable behavior. Links to more information on the replacement for those items listed for deprecation will be posted as they become available to provide help as you move away from these features. Parent topic: What's new in HCL Digital Experience 9.5?","title":"Deprecated features for HCL Digital Experience 9.5"},{"location":"reference/deprecated_features_for_hcl_digital_experience/","text":"Deprecated features for HCL Digital Experience 8.5 and 9.0 If you are migrating from an earlier release of HCL Digital Experience, you should be aware of various features and themes that are deprecated per each release.","title":"Deprecated features for HCL Digital Experience 8.5 and 9.0"},{"location":"reference/deprecated_features_for_hcl_digital_experience/#deprecated-features-for-hcl-digital-experience-85-and-90","text":"If you are migrating from an earlier release of HCL Digital Experience, you should be aware of various features and themes that are deprecated per each release.","title":"Deprecated features for HCL Digital Experience 8.5 and 9.0"},{"location":"reference/intr_depc95/","text":"Unsupported features for HCL Digital Experience 9.5 If you are migrating from an earlier release of HCL Digital Experience, you should be aware of various features and themes that are unsupported per each release. If you are migrating from Version 8.5 or 9.0, we recommended that users review the following documentation resources. Documentation resource: Unsupported features for HCL Digital Experience 8.5 and 9.0 Documentation resource: Deprecated features for HCL Digital Experience 8.5 and 9.0 Newly unsupported features and themes for HCL Digital Experience 9.5 Newly unsupported features and themes must be removed prior to migration. Previously unsupported features and themes for HCL Digital Experience 9.5 Unsupported features and themes must be removed prior to migration. Parent topic: What's new in HCL Digital Experience 9.5?","title":"Unsupported features for HCL Digital Experience 9.5"},{"location":"reference/intr_depc95/#unsupported-features-for-hcl-digital-experience-95","text":"If you are migrating from an earlier release of HCL Digital Experience, you should be aware of various features and themes that are unsupported per each release. If you are migrating from Version 8.5 or 9.0, we recommended that users review the following documentation resources. Documentation resource: Unsupported features for HCL Digital Experience 8.5 and 9.0 Documentation resource: Deprecated features for HCL Digital Experience 8.5 and 9.0 Newly unsupported features and themes for HCL Digital Experience 9.5 Newly unsupported features and themes must be removed prior to migration. Previously unsupported features and themes for HCL Digital Experience 9.5 Unsupported features and themes must be removed prior to migration. Parent topic: What's new in HCL Digital Experience 9.5?","title":"Unsupported features for HCL Digital Experience 9.5"},{"location":"reference/newly_deprecated_features_and_themes/","text":"Deprecated features and themes for HCL Digital Experience 9.5 Deprecation means that the features are supported at this time but can be removed in an upcoming CF. It is recommended that deprecated items be removed as soon as possible as they can cause unpredictable behavior. Links to more information on the replacement for those items listed for deprecation will be posted as they become available to provide help as you move away from these features. Category Deprecated Recommended Action Effective Date Integrating Sametime Integration Integration with Sametime will be deprecated. The supported Sametime version 9.0 already reached EOS. November 2021 Integrating Add to Sametime List Effective November 2021, integration with Sametime will be deprecated. The supported Sametime version 9.0 already reached EOS. November 2021 Online Help Sametime Web 2.0 Contact List Effective November 2021, integration with Sametime will be deprecated. The supported Sametime version 9.0 already reached EOS. November 2021 Developing Microsoft Exchange 2010 Calendar Effective November 2021, integration with Microsoft Exchange 2010 will be deprecated. Exchange 2010 is out of support for Microsoft. November 2021 Developing Microsoft Exchange 2010 Mail Effective November 2021, integration with Microsoft Exchange 2010 will be deprecated. Exchange 2010 is out of support for Microsoft. November 2021 Online Help Coach Effective November 2021, Coach portlet will be deprecated. IBM no longer supports WebSphere Lombardi. November 2021 Online Help Dynamic Coach Effective November 2021, Dynamic Coach portlet will be deprecated. IBM no longer supports WebSphere Lombardi. November 2021 Configuring Federated Documents Picker Effective November 2021, Federated Documents Picker feature will be deprecated. HCL Digital Asset Management may be use in replacement for this feature. November 2021 Online Help Frequent Users Effective November 2021, Frequent Users portlet will be deprecated. This is an obsolete portlet and no replacement is needed. November 2021 Setting up a website Syndicated Feed Portlet Effective November 2021, Syndicated Feed portlet will be deprecated. November 2021 Integrating TPIR Configuration Viewer Effective November 2021, TPIR Configuration Viewer will be deprecated. IBM no longer supports WebSphere Lombardi. November 2021 Developing UX Screen Flow Manager - Dialog Stack Portlet Effective November 2021, Dialog Stack portlet will be deprecated. The feature was already removed on the later version of Portal. November 2021 Developing UX Screen Flow Manager - Dialog State Display Portlet Effective November 2021, Dialog State Display portlet will be deprecated. The feature was already removed on the later version of Portal. November 2021 Setting up a website Welcome to WebSphere Portal Effective November 2021, Welcome portlet will be deprecated. This is an obsolete portlet and no replacement is needed. November 2021 Integrating Watson Content Hub support Effective November 2021, integration with Watson Content Hub will be deprecated. HCL Digital Asset Management may be use in replacement for this feature. November 2021 Integrating Web Application Bridge - Microsoft SharePoint Effective November 2021, integration with Microsoft SharePoint will be deprecated. November 2021 Integrating SAP NetWeaver Effective November 2021, integration with SAP NetWeaver will be deprecated. NetWeaver is no longer supported by SAP. November 2021 Integrating Domino Effective November 2021, integration with Domino will be deprecated. The iFrame integration approach is already obsolete and not used. November 2021 Integrating iNotes portlet Effective November 2021, integration with Domino will be deprecated. The iFrame integration approach is already obsolete and not used. November 2021 Migrating IBM\u00ae\u202fJSF Bridge In WAS 9.0.5.2 and 8.5.5.17, IBM removed the JSF Bridge from WAS. To address this, an updated JSF Portlet Bridge is included in DX CF18 release. Customers installing HCL DX CF18, and using an IBM WebSphere Application Server Network Deployment version later than 8.5.5.17 or 9.0.5.2 should utilize the new JSF Portlet Bridge. The HCL JSF Portlet Bridge is built using the same class names as the IBM JSF Portlet Bridge provided in WAS 9.0.0.7 thru 9.0.5.1 and WAS 8.5.5.16 respectively. User applications should be able to continue to function without any modification. Documentation source: What's new in CF18 9.5 |December 2020| Parent topic: Deprecated features for HCL Digital Experience 9.5","title":"Deprecated features and themes for HCL Digital Experience 9.5"},{"location":"reference/newly_deprecated_features_and_themes/#deprecated-features-and-themes-for-hcl-digital-experience-95","text":"Deprecation means that the features are supported at this time but can be removed in an upcoming CF. It is recommended that deprecated items be removed as soon as possible as they can cause unpredictable behavior. Links to more information on the replacement for those items listed for deprecation will be posted as they become available to provide help as you move away from these features. Category Deprecated Recommended Action Effective Date Integrating Sametime Integration Integration with Sametime will be deprecated. The supported Sametime version 9.0 already reached EOS. November 2021 Integrating Add to Sametime List Effective November 2021, integration with Sametime will be deprecated. The supported Sametime version 9.0 already reached EOS. November 2021 Online Help Sametime Web 2.0 Contact List Effective November 2021, integration with Sametime will be deprecated. The supported Sametime version 9.0 already reached EOS. November 2021 Developing Microsoft Exchange 2010 Calendar Effective November 2021, integration with Microsoft Exchange 2010 will be deprecated. Exchange 2010 is out of support for Microsoft. November 2021 Developing Microsoft Exchange 2010 Mail Effective November 2021, integration with Microsoft Exchange 2010 will be deprecated. Exchange 2010 is out of support for Microsoft. November 2021 Online Help Coach Effective November 2021, Coach portlet will be deprecated. IBM no longer supports WebSphere Lombardi. November 2021 Online Help Dynamic Coach Effective November 2021, Dynamic Coach portlet will be deprecated. IBM no longer supports WebSphere Lombardi. November 2021 Configuring Federated Documents Picker Effective November 2021, Federated Documents Picker feature will be deprecated. HCL Digital Asset Management may be use in replacement for this feature. November 2021 Online Help Frequent Users Effective November 2021, Frequent Users portlet will be deprecated. This is an obsolete portlet and no replacement is needed. November 2021 Setting up a website Syndicated Feed Portlet Effective November 2021, Syndicated Feed portlet will be deprecated. November 2021 Integrating TPIR Configuration Viewer Effective November 2021, TPIR Configuration Viewer will be deprecated. IBM no longer supports WebSphere Lombardi. November 2021 Developing UX Screen Flow Manager - Dialog Stack Portlet Effective November 2021, Dialog Stack portlet will be deprecated. The feature was already removed on the later version of Portal. November 2021 Developing UX Screen Flow Manager - Dialog State Display Portlet Effective November 2021, Dialog State Display portlet will be deprecated. The feature was already removed on the later version of Portal. November 2021 Setting up a website Welcome to WebSphere Portal Effective November 2021, Welcome portlet will be deprecated. This is an obsolete portlet and no replacement is needed. November 2021 Integrating Watson Content Hub support Effective November 2021, integration with Watson Content Hub will be deprecated. HCL Digital Asset Management may be use in replacement for this feature. November 2021 Integrating Web Application Bridge - Microsoft SharePoint Effective November 2021, integration with Microsoft SharePoint will be deprecated. November 2021 Integrating SAP NetWeaver Effective November 2021, integration with SAP NetWeaver will be deprecated. NetWeaver is no longer supported by SAP. November 2021 Integrating Domino Effective November 2021, integration with Domino will be deprecated. The iFrame integration approach is already obsolete and not used. November 2021 Integrating iNotes portlet Effective November 2021, integration with Domino will be deprecated. The iFrame integration approach is already obsolete and not used. November 2021 Migrating IBM\u00ae\u202fJSF Bridge In WAS 9.0.5.2 and 8.5.5.17, IBM removed the JSF Bridge from WAS. To address this, an updated JSF Portlet Bridge is included in DX CF18 release. Customers installing HCL DX CF18, and using an IBM WebSphere Application Server Network Deployment version later than 8.5.5.17 or 9.0.5.2 should utilize the new JSF Portlet Bridge. The HCL JSF Portlet Bridge is built using the same class names as the IBM JSF Portlet Bridge provided in WAS 9.0.0.7 thru 9.0.5.1 and WAS 8.5.5.16 respectively. User applications should be able to continue to function without any modification. Documentation source: What's new in CF18 9.5 |December 2020| Parent topic: Deprecated features for HCL Digital Experience 9.5","title":"Deprecated features and themes for HCL Digital Experience 9.5"},{"location":"reference/newly_unsupported_features/","text":"Newly unsupported features and themes for HCL Digital Experience 8.5 and 9.0 Newly unsupported features and themes must be removed prior to migration. Category Unsupported Recommended Action Effective Date Configuring Web Content Manager Ephox EditLive! Java based Rich Text Editor The Ephox EditLive! Java based Rich Text Editor is no longer supported. You can also use the CK Editor as an alternative to Ephox EditLive! December 2020 References: WebSphere Application Server Network Deployment 8.5.5 - Deprecated features Federating the LDAP user registry Configuring authentication filters","title":"Newly unsupported features and themes for HCL Digital Experience 8.5 and 9.0"},{"location":"reference/newly_unsupported_features/#newly-unsupported-features-and-themes-for-hcl-digital-experience-85-and-90","text":"Newly unsupported features and themes must be removed prior to migration. Category Unsupported Recommended Action Effective Date Configuring Web Content Manager Ephox EditLive! Java based Rich Text Editor The Ephox EditLive! Java based Rich Text Editor is no longer supported. You can also use the CK Editor as an alternative to Ephox EditLive! December 2020 References: WebSphere Application Server Network Deployment 8.5.5 - Deprecated features Federating the LDAP user registry Configuring authentication filters","title":"Newly unsupported features and themes for HCL Digital Experience 8.5 and 9.0"},{"location":"reference/newly_unsupported_features_and_themes/","text":"Newly unsupported features and themes for HCL Digital Experience 9.5 Newly unsupported features and themes must be removed prior to migration. Category Unsupported Recommended Action Effective Date Configuring Web Content Manager Ephox EditLive! Java based Rich Text Editor The Ephox EditLive! Java based Rich Text Editor is no longer supported. You can also use the CK Editor as an alternative to Ephox EditLive! December 2020 Parent topic: Unsupported features for HCL Digital Experience 9.5","title":"Newly unsupported features and themes for HCL Digital Experience 9.5"},{"location":"reference/newly_unsupported_features_and_themes/#newly-unsupported-features-and-themes-for-hcl-digital-experience-95","text":"Newly unsupported features and themes must be removed prior to migration. Category Unsupported Recommended Action Effective Date Configuring Web Content Manager Ephox EditLive! Java based Rich Text Editor The Ephox EditLive! Java based Rich Text Editor is no longer supported. You can also use the CK Editor as an alternative to Ephox EditLive! December 2020 Parent topic: Unsupported features for HCL Digital Experience 9.5","title":"Newly unsupported features and themes for HCL Digital Experience 9.5"},{"location":"reference/previously_deprecated_features_and_themes/","text":"Previously deprecated features and themes for HCL Digital Experience 9.5 Deprecation means that the features are supported at this time but can be removed in an upcoming CF. It is recommended that deprecated items be removed as soon as possible as they can cause unpredictable behavior. Links to more information on the replacement for those items listed for deprecation will be posted as they become available to provide help as you move away from these features. Category Unsupported Recommended Action Setting up a site Running the \"Local Content Viewer\" portlet (WCM Rendering Portlet) with WSRP The Local Content View portlet has no architectural replacement. Instead, use WCM Rendering portlet locally. The feature allows customers to run the content viewer on a remote portal and integrate it into a local portal. You can run the content viewer only locally. - Documentation resource: Enabling remote rendering with WSRP and the Web Content Viewer | |Administering |Frequent Users portlet - Documentation resource: Viewing frequent users |Login filters can be used to record login activity as needed.- Documentation resource: New security APIs in HCL Portal | |Security |OpenID authentication Legacy Portal OpenID TAI (com.ibm.portal.auth.tai.OpenidTAI provided by HCL Digital Experience) Documentation resource: Integrating with OpenID authentication |For authentication in HCL Digital Experience with an external Identity Provider use SAML/OpenID Connect TAIs provided by IBM WebSphere Application Server or custom TAIs.- Documentation resource: Establishing SSO connections through SAML 2.0 tokens | |Administering |XMLAccess xsds for older releases (HCL Digital Experience Portal 5.0 - 7.0) |Use the XML configuration interface with XML input files specified according to the latest schema file:\u202fPortalConfig_8.5.0.xsd. - Documentation resource: Using the XML configuration command line client | |Developing |Enabler, Builder, and Mashups components and API |The\u202f Mashup Enabler and the Builder \u202fcomponents are deprecated. The\u202f Mashups Enabler \u202fand the\u202f Builder \u202fAPI are deprecated. - Documentation resource: Mashup integration post migration steps | |Personalization |LikeMinds |The\u202f LikeMinds \u202fservices and database domains are deprecated.- Documentation resource: Using the XML configuration commands line client Go to Active Site Analytics to learn how to configure a variety of analysis tools to support your Digital Experience platform requirements. - Documentation resource: Enabling Active Site Analytics for your Marketing Center Spot | |Personalization |Feedback |The\u202f Feedback \u202fdatabase domains are deprecated. - Documentation resource: Using the XML configuration commands line client Go to Active Site Analytics to learn how to configure a variety of analysis tools to support your Digital Experience platform requirements.- Documentation resource: Enabling Active Site Analytics for your Marketing Center Spot | |Security |Active Credentials |Active credentials are deprecated from the Credential Vault portlet. Passive credentials are still available. - Documentation resource: Credential Vault | |Administering |Shared private pages |The Sharing private pages service is deprecated. - Documentation resource: Sharing pages with other users Go to Managing Pages for the set of services available in HCL Digital Experience 8.5 and 9 releases. - Documentation resource: Managing pages | |Administering |Parallel Portlet rendering |The Parallel Portlet rendering feature is deprecated. See the\u202f HCL Digital Experience\u202fPerformance Tuning Guide \u202ffor recommendations to optimize digital experience application performance. | |Security |Stand-alone LDAP user registry |The stand-alone LDAP user registry configuration is deprecated. Instead, configure the federated LDAP user registry. If you upgraded from HCL Digital Experience 7.0 or 8.0 with a stand-alone LDAP user registry, you can continue to use your stand-alone LDAP user registry. However, run the\u202fwp-modify-federated-security\u202fto change to a federated LDAP user registry. - Documentation resource: Changing from a stand-alone repository to a federated repository | |Administering |URL mappings |URL mappings are deprecated. If you upgrade from HCL Digital Experience 8.0 to 8.5, you can continue to use your existing URL mappings, but creating new URL mappings is no longer supported. Use vanity or friendly URLs. - Documentation resource: Vanity URLs - Documentation resource: Using friendly URLs | |Installation |Full and Base installation options |Before HCL Digital Experience 8.5, a customer chose either a full deployment with all the same pages and artifacts or a base deployment to customize their portal. Starting with HCL Digital Experience 8.5, the\u202f Configuration Wizard installs the full deployment. Customers can then remove pages to customize their portal. Then, they can package their customizations as a Portal Application Archive (PAA) file. Finally, customers can install their production server, run the\u202fempty-portal\u202ftask, and install the customization PAA file. | |Security |LTPA version 1 token support |The LTPA version 1 token is deprecated.\u202fWebSphere\u00ae\u202fApplication Server\u202f8.5.5. disables the LTPA version 1 token by default. If you are integrating with third-party applications that rely on LTPA version 1, update the application to support LTPA version 2. If you cannot update the application, you must manually re-enable LTPA version 1 support after you complete the migration. For information on updating your application to support LTPA version 2, see the documentation for the application. - Documentation resource: Enabling or disabling single sign-on interoperability mode for the LTPA token for WebSphere\u00ae\u202fApplication Server\u202f8.5.5 - Documentation resource: Enabling or disabling single sign-on interoperability mode for the LTPA token for WebSphere\u00ae\u202fApplication Server\u202f9.0.0 | Parent topic: Deprecated features for HCL Digital Experience 9.5","title":"Previously deprecated features and themes for HCL Digital Experience 9.5"},{"location":"reference/previously_deprecated_features_and_themes/#previously-deprecated-features-and-themes-for-hcl-digital-experience-95","text":"Deprecation means that the features are supported at this time but can be removed in an upcoming CF. It is recommended that deprecated items be removed as soon as possible as they can cause unpredictable behavior. Links to more information on the replacement for those items listed for deprecation will be posted as they become available to provide help as you move away from these features. Category Unsupported Recommended Action Setting up a site Running the \"Local Content Viewer\" portlet (WCM Rendering Portlet) with WSRP The Local Content View portlet has no architectural replacement. Instead, use WCM Rendering portlet locally. The feature allows customers to run the content viewer on a remote portal and integrate it into a local portal. You can run the content viewer only locally. - Documentation resource: Enabling remote rendering with WSRP and the Web Content Viewer | |Administering |Frequent Users portlet - Documentation resource: Viewing frequent users |Login filters can be used to record login activity as needed.- Documentation resource: New security APIs in HCL Portal | |Security |OpenID authentication Legacy Portal OpenID TAI (com.ibm.portal.auth.tai.OpenidTAI provided by HCL Digital Experience) Documentation resource: Integrating with OpenID authentication |For authentication in HCL Digital Experience with an external Identity Provider use SAML/OpenID Connect TAIs provided by IBM WebSphere Application Server or custom TAIs.- Documentation resource: Establishing SSO connections through SAML 2.0 tokens | |Administering |XMLAccess xsds for older releases (HCL Digital Experience Portal 5.0 - 7.0) |Use the XML configuration interface with XML input files specified according to the latest schema file:\u202fPortalConfig_8.5.0.xsd. - Documentation resource: Using the XML configuration command line client | |Developing |Enabler, Builder, and Mashups components and API |The\u202f Mashup Enabler and the Builder \u202fcomponents are deprecated. The\u202f Mashups Enabler \u202fand the\u202f Builder \u202fAPI are deprecated. - Documentation resource: Mashup integration post migration steps | |Personalization |LikeMinds |The\u202f LikeMinds \u202fservices and database domains are deprecated.- Documentation resource: Using the XML configuration commands line client Go to Active Site Analytics to learn how to configure a variety of analysis tools to support your Digital Experience platform requirements. - Documentation resource: Enabling Active Site Analytics for your Marketing Center Spot | |Personalization |Feedback |The\u202f Feedback \u202fdatabase domains are deprecated. - Documentation resource: Using the XML configuration commands line client Go to Active Site Analytics to learn how to configure a variety of analysis tools to support your Digital Experience platform requirements.- Documentation resource: Enabling Active Site Analytics for your Marketing Center Spot | |Security |Active Credentials |Active credentials are deprecated from the Credential Vault portlet. Passive credentials are still available. - Documentation resource: Credential Vault | |Administering |Shared private pages |The Sharing private pages service is deprecated. - Documentation resource: Sharing pages with other users Go to Managing Pages for the set of services available in HCL Digital Experience 8.5 and 9 releases. - Documentation resource: Managing pages | |Administering |Parallel Portlet rendering |The Parallel Portlet rendering feature is deprecated. See the\u202f HCL Digital Experience\u202fPerformance Tuning Guide \u202ffor recommendations to optimize digital experience application performance. | |Security |Stand-alone LDAP user registry |The stand-alone LDAP user registry configuration is deprecated. Instead, configure the federated LDAP user registry. If you upgraded from HCL Digital Experience 7.0 or 8.0 with a stand-alone LDAP user registry, you can continue to use your stand-alone LDAP user registry. However, run the\u202fwp-modify-federated-security\u202fto change to a federated LDAP user registry. - Documentation resource: Changing from a stand-alone repository to a federated repository | |Administering |URL mappings |URL mappings are deprecated. If you upgrade from HCL Digital Experience 8.0 to 8.5, you can continue to use your existing URL mappings, but creating new URL mappings is no longer supported. Use vanity or friendly URLs. - Documentation resource: Vanity URLs - Documentation resource: Using friendly URLs | |Installation |Full and Base installation options |Before HCL Digital Experience 8.5, a customer chose either a full deployment with all the same pages and artifacts or a base deployment to customize their portal. Starting with HCL Digital Experience 8.5, the\u202f Configuration Wizard installs the full deployment. Customers can then remove pages to customize their portal. Then, they can package their customizations as a Portal Application Archive (PAA) file. Finally, customers can install their production server, run the\u202fempty-portal\u202ftask, and install the customization PAA file. | |Security |LTPA version 1 token support |The LTPA version 1 token is deprecated.\u202fWebSphere\u00ae\u202fApplication Server\u202f8.5.5. disables the LTPA version 1 token by default. If you are integrating with third-party applications that rely on LTPA version 1, update the application to support LTPA version 2. If you cannot update the application, you must manually re-enable LTPA version 1 support after you complete the migration. For information on updating your application to support LTPA version 2, see the documentation for the application. - Documentation resource: Enabling or disabling single sign-on interoperability mode for the LTPA token for WebSphere\u00ae\u202fApplication Server\u202f8.5.5 - Documentation resource: Enabling or disabling single sign-on interoperability mode for the LTPA token for WebSphere\u00ae\u202fApplication Server\u202f9.0.0 | Parent topic: Deprecated features for HCL Digital Experience 9.5","title":"Previously deprecated features and themes for HCL Digital Experience 9.5"},{"location":"reference/previously_unsupported_features_and_themes/","text":"Previously unsupported features and themes for HCL Digital Experience 9.5 Unsupported features and themes must be removed prior to migration. Category Unsupported Recommended Action Site set up Web Clipper The Web Clipper portlet is no longer supported. Use the Web Application Bridge solution instead. Developing HCL themes from a previous version The following themes are no longer supported:- Portal - PortalWeb2 - Tab Menu - Page Builder They no longer work and are no longer supported. You must manually update these themes. Merge their function into a clean copy of a Portal 8.5 theme on the target server. The PageBuilder2 and Portal 7002 themes are deprecated in 8.5.- Documentation resource: Enabling a new functionality in a migrated portal | |Administering|Composite applications|Composite applications are no longer supported. If you have a composite application in your system and you are migrating to HCL Digital Experience 8.5, the migration fails. Ensure that all composite applications are deleted before you start the migration. When you delete a composite application, you must also run the resource cleaner, otherwise pages can still exist in the database.- Documentation resource: Enabling new functionality in a migrated portal | |Developing|CAI/TAI portlets|When you are migrating from one version to another, your script can contain references to the CAI/TAI portlets. These portlets are no longer available and any reference to these portlets cause your script to fail. For more information, see\u202f Virtual Portal tasks .| |Developing|IBM Portlet API|The IBM Portlet API is no longer supported. Go to\u202f Converting HCL Digital Experience portlets (AIX IBM i Linux Solaris Windows) \u202fto learn how to convert your portlets that are based on IBM Portlet API to the Standard Portlet API. The JSR 168 standard API is still available and supported. | |Developing|Struts Portlet Framework|The historical struts-based portlet frameworks are deprecated. Both the struts-based portlet framework based on the IBM Portlet API and the struts-based portlet framework based on the JSR 168 standard API are no longer available and are removed from support. Move all struts-based portlets that are based on this HCL framework to the Apache Struts Portlet Framework. - Documentation resource: Apache Struts - Documentation resource: Portlet Plugin | |Integrating|Brightcove player|The Brightcove player is no longer supported. | |Administering|SOAP support for remote search configuration |SOAP support for remote search is no longer supported. EJB is still supported. | |Administering|Login screen|Login screens are no longer supported. If you need to customize your login process, you must use custom authentication filters instead of login screens. | |Developing|Deprecated Business portlets|The following Business portlets were removed and are no longer supported: - Reminder - Document Viewer - Webpage portlet - My Query reports - Microsoft Exchange 2003 | |Integrating|Deprecated Sametime portlets|The following Sametime portlets were removed in are no longer supported: - Who Is Here (SametimeWhoIsHere.war) - Sametime Contact List (SametimeContactList.war) | |Developing|Deprecated Themes and Tags|The following portal themes and tags were removed and are no longer supported: - All Legacy themes - <portal-core:cacheProxyUrl/> tag | Unsupported Recommended Action Policy Editor portlet for Mail CPP portlet is no longer shipped in WebSphere Portal Version 8.0 Composite applications Starting with Version 8.0, WebSphere Portal no longer supports Composite applications. You can still use the portal XML configuration interface to do this type of work. Computer Associates eTrust SiteMinder eTrust SiteMinder installations are not supported in this release. Domino Extended Product Portlet wizard The configuration wizard to configure the Domino and Extended Product portlet was supported with the InstallShield. Because the IBM Installation Manager is now supported, the Domino and Extended Product portlet configuration wizard is no longer supported. Integration with the IBM Mashup Center WebSphere Portal Version 8.0 provides direct support for widget integration to portal pages, which enables development of mashup style applications. WebSphere Portal Version 8.0 does not support promotion of assets from the IBM Mashup Center catalog directly into the portal. For information about how to add iWidgets to your portal see Managing iWidgets in your portal. For information about how to construct mashup page applications by using WebSphere Portal Version 8.0 features see the section about Managed pages of the WebSphere Portal and Web Content Manager Version 8.0 product documentation. Site management Earlier versions of WebSphere Portal provided the Resource Manager portlet for performing site management. With Version 8.0 of WebSphere Portal and Web Content Manager, this site management functionality has been replaced by the new functionality for managing pages. For more information refer to Managed pages. Session persistence on Struts portlets Struts portlets do not support session replication in WebSphere Portal Version 8.0. IBM Portlet API web content viewer portlet The web content viewer portlet based on the IBM Portlet API has been deprecated and is no longer supported. It was replaced with the JSR 286 web content viewer portlet. IBM Portlet API remote web content viewer portlet The remote web content viewer portlet based on the IBM Portlet API has been deprecated and is no longer supported. To display web content on a portal where Web Content Manager is not installed, use WSRP and the JSR 286 web content viewer. IBM API Rendering Portlet The IBM API Rendering Portlet has been deprecated and is no longer supported. Private wire APIs The WireModel artifacts referring to private wires have been deprecated and is no longer supported. Unsupported Recommended Action Exchange, Domino, and POP3 are no longer supported protocols in the Common Mail portlet. If you had been using CPP with Exchange, you can now use the Exchange portlets If you had been using CPP with Domino, you can now use the iNotes portlet. | |RSS portlet and IBM Feed Reader portlet are no longer shipped.|If you had been using RSS Portlet or IBM Feed Reader Portlet, you can now use IBM Syndicated Feed Portlet for WebSphere Portal. Alternatively, you can download the RSS portlet and IBM Feed Reader portlet from IBM WebSphere Portal Business Solutions Catalog. | |The Common Calendar portlet is no longer being shipped. |If you had been using CPP with Exchange, you can now use the Exchange portlets If you had been using CPP with Domino, you can now use the iNotes portlet. | |Document Manager|With this version of WebSphere Portal, Document Manager is no longer available. If you need to keep using a document library, then you will need to move your document library to a IBM Lotus Quickr server. See the WebSphere Portal Best Practices Wiki for further information. | |Workflow for composite applications|Workflow for composite applications is no longer supported in this version. | |Integration with WebSphere Process Server using the WebSphere Process Server Client and the My Processes and My Tasks portlets |The integration with WebSphere Process Server using the WebSphere Process Server Client and the My Processes and My Tasks portlets is being deprecated. It will be no longer supported in future releases. Instead, the integration with Process Server can be achieved using the IBM WebSphere Portal Unified Task List portlet, which simplifies the system setup and improves consumability. | |Collaborative portlets |The following collaborative portlets are no longer included with WebSphere Portal:- My Lotus QuickPlaces - Inline QuickPlace - Domino Document Manager - Lotus Web Conferencing Note: My Lotus QuickPlaces can be downloaded from the IBM WebSphere Portal Solutions Catalog. For more information, refer to the related topic IBM WebSphere Portal Solutions Catalog. | |Legacy sample portlets|The following legacy sample portlets are no longer provided: - SPFLegacyBlank.war - SPFLegacyClock.war - SPFLegacyCommandManager.war - SPFLegacyEditMode.war - SPFLegacyFileUpload.war - SPFLegacyLookupAction.war - SPFLegacyMailReader.war - SPFLegacyMultipleServletContexts.war - SPFLegacyStockQuote.war - SPFLegacyTiles.war - SPFLegacyTransformation.war | |Microsoft Exchange 2000 portlet application|The Microsoft Exchange 2000 portlet application is no longer included. This portlet application contained the following portlets: - MS Exchange 2000 Mail Portlet - MS Exchange 2000 Calendar Portlet - MS Exchange 2000 Tasks Portlet - MS Exchange 2000 Contacts Portlet - MS Exchange 2000 Notes Portlet | |Transcoding technology|The transcoding technology previously provided with WebSphere Portal has been discontinued with this version. | |Browser support|The following browsers are no longer supported in this version:- Mozilla - Netscape | |JACL syntax for the Portal Scripting Interface|The JACL syntax for the Portal Scripting Interface has been replaced by Jython syntax. The JACL syntax is still supported, but this support will be discontinued in the future.| |HP UX|HP UX is no longer supported in version 7.0. | Parent topic: Unsupported features for HCL Digital Experience 9.5","title":"Previously unsupported features and themes for HCL Digital Experience 9.5"},{"location":"reference/previously_unsupported_features_and_themes/#previously-unsupported-features-and-themes-for-hcl-digital-experience-95","text":"Unsupported features and themes must be removed prior to migration. Category Unsupported Recommended Action Site set up Web Clipper The Web Clipper portlet is no longer supported. Use the Web Application Bridge solution instead. Developing HCL themes from a previous version The following themes are no longer supported:- Portal - PortalWeb2 - Tab Menu - Page Builder They no longer work and are no longer supported. You must manually update these themes. Merge their function into a clean copy of a Portal 8.5 theme on the target server. The PageBuilder2 and Portal 7002 themes are deprecated in 8.5.- Documentation resource: Enabling a new functionality in a migrated portal | |Administering|Composite applications|Composite applications are no longer supported. If you have a composite application in your system and you are migrating to HCL Digital Experience 8.5, the migration fails. Ensure that all composite applications are deleted before you start the migration. When you delete a composite application, you must also run the resource cleaner, otherwise pages can still exist in the database.- Documentation resource: Enabling new functionality in a migrated portal | |Developing|CAI/TAI portlets|When you are migrating from one version to another, your script can contain references to the CAI/TAI portlets. These portlets are no longer available and any reference to these portlets cause your script to fail. For more information, see\u202f Virtual Portal tasks .| |Developing|IBM Portlet API|The IBM Portlet API is no longer supported. Go to\u202f Converting HCL Digital Experience portlets (AIX IBM i Linux Solaris Windows) \u202fto learn how to convert your portlets that are based on IBM Portlet API to the Standard Portlet API. The JSR 168 standard API is still available and supported. | |Developing|Struts Portlet Framework|The historical struts-based portlet frameworks are deprecated. Both the struts-based portlet framework based on the IBM Portlet API and the struts-based portlet framework based on the JSR 168 standard API are no longer available and are removed from support. Move all struts-based portlets that are based on this HCL framework to the Apache Struts Portlet Framework. - Documentation resource: Apache Struts - Documentation resource: Portlet Plugin | |Integrating|Brightcove player|The Brightcove player is no longer supported. | |Administering|SOAP support for remote search configuration |SOAP support for remote search is no longer supported. EJB is still supported. | |Administering|Login screen|Login screens are no longer supported. If you need to customize your login process, you must use custom authentication filters instead of login screens. | |Developing|Deprecated Business portlets|The following Business portlets were removed and are no longer supported: - Reminder - Document Viewer - Webpage portlet - My Query reports - Microsoft Exchange 2003 | |Integrating|Deprecated Sametime portlets|The following Sametime portlets were removed in are no longer supported: - Who Is Here (SametimeWhoIsHere.war) - Sametime Contact List (SametimeContactList.war) | |Developing|Deprecated Themes and Tags|The following portal themes and tags were removed and are no longer supported: - All Legacy themes - <portal-core:cacheProxyUrl/> tag | Unsupported Recommended Action Policy Editor portlet for Mail CPP portlet is no longer shipped in WebSphere Portal Version 8.0 Composite applications Starting with Version 8.0, WebSphere Portal no longer supports Composite applications. You can still use the portal XML configuration interface to do this type of work. Computer Associates eTrust SiteMinder eTrust SiteMinder installations are not supported in this release. Domino Extended Product Portlet wizard The configuration wizard to configure the Domino and Extended Product portlet was supported with the InstallShield. Because the IBM Installation Manager is now supported, the Domino and Extended Product portlet configuration wizard is no longer supported. Integration with the IBM Mashup Center WebSphere Portal Version 8.0 provides direct support for widget integration to portal pages, which enables development of mashup style applications. WebSphere Portal Version 8.0 does not support promotion of assets from the IBM Mashup Center catalog directly into the portal. For information about how to add iWidgets to your portal see Managing iWidgets in your portal. For information about how to construct mashup page applications by using WebSphere Portal Version 8.0 features see the section about Managed pages of the WebSphere Portal and Web Content Manager Version 8.0 product documentation. Site management Earlier versions of WebSphere Portal provided the Resource Manager portlet for performing site management. With Version 8.0 of WebSphere Portal and Web Content Manager, this site management functionality has been replaced by the new functionality for managing pages. For more information refer to Managed pages. Session persistence on Struts portlets Struts portlets do not support session replication in WebSphere Portal Version 8.0. IBM Portlet API web content viewer portlet The web content viewer portlet based on the IBM Portlet API has been deprecated and is no longer supported. It was replaced with the JSR 286 web content viewer portlet. IBM Portlet API remote web content viewer portlet The remote web content viewer portlet based on the IBM Portlet API has been deprecated and is no longer supported. To display web content on a portal where Web Content Manager is not installed, use WSRP and the JSR 286 web content viewer. IBM API Rendering Portlet The IBM API Rendering Portlet has been deprecated and is no longer supported. Private wire APIs The WireModel artifacts referring to private wires have been deprecated and is no longer supported. Unsupported Recommended Action Exchange, Domino, and POP3 are no longer supported protocols in the Common Mail portlet. If you had been using CPP with Exchange, you can now use the Exchange portlets If you had been using CPP with Domino, you can now use the iNotes portlet. | |RSS portlet and IBM Feed Reader portlet are no longer shipped.|If you had been using RSS Portlet or IBM Feed Reader Portlet, you can now use IBM Syndicated Feed Portlet for WebSphere Portal. Alternatively, you can download the RSS portlet and IBM Feed Reader portlet from IBM WebSphere Portal Business Solutions Catalog. | |The Common Calendar portlet is no longer being shipped. |If you had been using CPP with Exchange, you can now use the Exchange portlets If you had been using CPP with Domino, you can now use the iNotes portlet. | |Document Manager|With this version of WebSphere Portal, Document Manager is no longer available. If you need to keep using a document library, then you will need to move your document library to a IBM Lotus Quickr server. See the WebSphere Portal Best Practices Wiki for further information. | |Workflow for composite applications|Workflow for composite applications is no longer supported in this version. | |Integration with WebSphere Process Server using the WebSphere Process Server Client and the My Processes and My Tasks portlets |The integration with WebSphere Process Server using the WebSphere Process Server Client and the My Processes and My Tasks portlets is being deprecated. It will be no longer supported in future releases. Instead, the integration with Process Server can be achieved using the IBM WebSphere Portal Unified Task List portlet, which simplifies the system setup and improves consumability. | |Collaborative portlets |The following collaborative portlets are no longer included with WebSphere Portal:- My Lotus QuickPlaces - Inline QuickPlace - Domino Document Manager - Lotus Web Conferencing Note: My Lotus QuickPlaces can be downloaded from the IBM WebSphere Portal Solutions Catalog. For more information, refer to the related topic IBM WebSphere Portal Solutions Catalog. | |Legacy sample portlets|The following legacy sample portlets are no longer provided: - SPFLegacyBlank.war - SPFLegacyClock.war - SPFLegacyCommandManager.war - SPFLegacyEditMode.war - SPFLegacyFileUpload.war - SPFLegacyLookupAction.war - SPFLegacyMailReader.war - SPFLegacyMultipleServletContexts.war - SPFLegacyStockQuote.war - SPFLegacyTiles.war - SPFLegacyTransformation.war | |Microsoft Exchange 2000 portlet application|The Microsoft Exchange 2000 portlet application is no longer included. This portlet application contained the following portlets: - MS Exchange 2000 Mail Portlet - MS Exchange 2000 Calendar Portlet - MS Exchange 2000 Tasks Portlet - MS Exchange 2000 Contacts Portlet - MS Exchange 2000 Notes Portlet | |Transcoding technology|The transcoding technology previously provided with WebSphere Portal has been discontinued with this version. | |Browser support|The following browsers are no longer supported in this version:- Mozilla - Netscape | |JACL syntax for the Portal Scripting Interface|The JACL syntax for the Portal Scripting Interface has been replaced by Jython syntax. The JACL syntax is still supported, but this support will be discontinued in the future.| |HP UX|HP UX is no longer supported in version 7.0. | Parent topic: Unsupported features for HCL Digital Experience 9.5","title":"Previously unsupported features and themes for HCL Digital Experience 9.5"},{"location":"reference/wpsdirstr/","text":"Directory structure The topic shows the naming conventions that are used to denote the location of files on the servers and the types of resources you can find in those directories. PortalServer_root Throughout this documentation, the installation location for the portal server component of HCL Portal is noted as PortalServer_root. For the IBM\u00ae i operating system, an extra variable is used to indicate the user data directory. The user data directory is noted as PortalServer_root_user. The following information shows the default location if it is not otherwise specified during installation: AIX\u00ae /usr/HCL/WebSphere/PortalServer HP-UX /opt/HCL/WebSphere/PortalServer IBM\u00ae i portal_server_root (ProdData) /QIBM/ProdData/WebSphere/PortalServer/V85/product offering /QIBM/ProdData/WebSphere/PortalServer/V85/<product offering> Where product offering is Server or Express PortalServer_root_user (UserData) WebSphere\u00ae Application Server 8.5.5 for Network Deployment: /QIBM/UserData/WebSphere/AppServer/V85/ND/profiles/wp_profile/PortalServer Linux\u2122 /opt/HCL/WebSphere/PortalServer /opt/HCL/WebSphere/PortalExpress/PortalServer Solaris /opt/HCL/WebSphere/PortalServer Windows\u2122 C:\\Program Files\\HCL\\WebSphere\\PortalServerC:\\Program Files\\HCL\\WebSphere\\PortalExpress\\PortalServer wp_profile_root Throughout this documentation, the profile location is noted as wp_profile_root. The following information shows the default profile location if another location is not specified during installation: AIX\u00ae /usr/HCL/WebSphere/wp_profile HP-UX /opt/HCL/WebSphere/wp_profile IBM\u00ae i WebSphere\u00ae Application Server 8.5 for Network Deployment: /QIBM/UserData/WebSphere/AppServer/V85/ND/profiles/wp_profile The wp_profile is the default profile name but is used here as an example since there can be multiple profiles with self described or incremental names (for example, wp_profile1, wp_profile2). Linux\u2122 /opt/HCL/WebSphere/wp_profile /opt/HCL/WebSphere/PortalExpress/AppServer/profiles/wp_profile Solaris /opt/HCL/WebSphere/wp_profile Windows\u2122 C:\\Program Files\\HCL\\WebSphere\\wp_profile ConfigEngine_root Throughout this documentation, the installation location for the Configuration Engine component is noted as ConfigEngine_root. AIX\u00ae /usr/HCL/WebSphere/ConfigEngine HP-UX /opt/HCL/WebSphere/ConfigEngine IBM\u00ae i /QIBM/ProdData/WebSphere/PortalServer/V85/ConfigEngine Linux\u2122 /opt/HCL/WebSphere/ConfigEngine /opt/HCL/WebSphere/PortalExpress/AppServer/profiles/ConfigEngine Solaris /opt/HCL/WebSphere/ConfigEngine Windows\u2122 C:\\Program Files\\HCL\\WebSphere\\ConfigEngine Configuration Engine profile directory The Configuration Engine profile directory is the location of the ConfigEngine task. AIX\u00ae /usr/HCL/WebSphere/wp_profile/ConfigEngine HP-UX /opt/HCL/WebSphere/wp_profile/ConfigEngine IBM\u00ae i WebSphere\u00ae Application Server 8.5.5 for Network Deployment: /QIBM/UserData/WebSphere/AppServer/V85/ND/profiles/wp_profile/ConfigEngine The wp_profile is the default profile name but is used here as an example since there can be multiple profiles with self described or incremental names (for example, wp_profile1, wp_profile2). Linux\u2122 /opt/HCL/WebSphere/wp_profile/ConfigEngine /opt/HCL/WebSphere/PortalExpress/AppServer/profiles/wp_profile/ConfigEngine Solaris /opt/HCL/WebSphere/wp_profile/ConfigEngine Windows\u2122 C:\\Program Files\\HCL\\WebSphere\\wp_profile\\ConfigEngine HCL Portal directory structure after installation HCL Portal has the following directory structure after installation: Note: On the Linux and IBM i operating systems, all directories are r/o. `[PortalServer\\_root](wpsdirstr.md#wp_root)` Root directory for HCL Portal | +-- ap | +-- base | +-- bin HCL Portal tools | +-- bp | +-- doc Javadoc and sample XMLAccess input files | +-- ext | +-- filesForDmgr | +-- installer | +-- jcr Resources for the Content Repository | +-- license HCL Portal license agreement | +-- lwo | +-- lwp04.infra | +-- people | +-- prereq | +-- prereqs.infra | +-- profileTemplates | +-- properties | +-- pzn | +-- pzn.ext | +-- search | +-- shared Shared resources, including runtime JARs, TLDs, | and other resources. | The /app subdirectory is the application server's | WPSLib shared library for HCL Portal | +-- solutionInstaller +-- theme | +-- ui | +-- version Version information for various components | +-- wcm Source Web application files for web content manager | +-- wps.properties AppServer_root Throughout this documentation, the installation location for WebSphere Application Server is noted as AppServer_root. The following information shows the WebSphere Application Server installation directory: HCL Portal Configuration profile directory cw_profile_root Throughout this documentation, the configuration wizard profile location is noted as cw_profile_root. The following information shows the profile location: AIX\u00ae /usr/HCL/WebSphere/AppServer/profiles/cw_profile HP-UX /opt/HCL/WebSphere/AppServer/profiles/cw_profile IBM\u00ae i WebSphere Application Server 8.5 for Network Deployment:/QIBM/UserData/WebSphere/AppServer/V8/ND/profiles/cw_profile Linux\u2122 /opt/HCL/WebSphere/AppServer/profiles/cw_profile Solaris /opt/HCL/WebSphere/AppServer/profiles/cw_profile Windows\u2122 C:\\Program Files\\HCL\\WebSphere\\AppServer\\profiles\\cw_profile IBM\u00ae i The installation location for WebSphere\u00ae Application Server is noted as app_server_root and refers to the UserData path, unless otherwise specified in the topic where you see it. The profile_root following variable refers to the name given to the WebSphere\u00ae Application Server profile in use. The following information shows the default WebSphere Application Server installation location if it is not otherwise specified during installation: IBM\u00ae i The installation location for WebSphere\u00ae Application Server is noted as app_server_root and refers to the UserData path, unless otherwise specified in the topic where you see it. The profile_root following variable refers to the name given to the WebSphere\u00ae Application Server profile in use. Linux\u2122 /opt/HCL/WebSphere/PortalExpress/AppServer Windows\u2122 C:\\Program Files\\HCL\\WebSphere\\PortalExpress\\AppServer","title":"Directory structure"},{"location":"reference/wpsdirstr/#directory-structure","text":"The topic shows the naming conventions that are used to denote the location of files on the servers and the types of resources you can find in those directories.","title":"Directory structure"},{"location":"reference/wpsdirstr/#portalserver_root","text":"Throughout this documentation, the installation location for the portal server component of HCL Portal is noted as PortalServer_root. For the IBM\u00ae i operating system, an extra variable is used to indicate the user data directory. The user data directory is noted as PortalServer_root_user. The following information shows the default location if it is not otherwise specified during installation: AIX\u00ae /usr/HCL/WebSphere/PortalServer HP-UX /opt/HCL/WebSphere/PortalServer IBM\u00ae i portal_server_root (ProdData) /QIBM/ProdData/WebSphere/PortalServer/V85/product offering /QIBM/ProdData/WebSphere/PortalServer/V85/<product offering> Where product offering is Server or Express PortalServer_root_user (UserData) WebSphere\u00ae Application Server 8.5.5 for Network Deployment: /QIBM/UserData/WebSphere/AppServer/V85/ND/profiles/wp_profile/PortalServer Linux\u2122 /opt/HCL/WebSphere/PortalServer /opt/HCL/WebSphere/PortalExpress/PortalServer Solaris /opt/HCL/WebSphere/PortalServer Windows\u2122 C:\\Program Files\\HCL\\WebSphere\\PortalServerC:\\Program Files\\HCL\\WebSphere\\PortalExpress\\PortalServer","title":"PortalServer_root"},{"location":"reference/wpsdirstr/#wp_profile_root","text":"Throughout this documentation, the profile location is noted as wp_profile_root. The following information shows the default profile location if another location is not specified during installation: AIX\u00ae /usr/HCL/WebSphere/wp_profile HP-UX /opt/HCL/WebSphere/wp_profile IBM\u00ae i WebSphere\u00ae Application Server 8.5 for Network Deployment: /QIBM/UserData/WebSphere/AppServer/V85/ND/profiles/wp_profile The wp_profile is the default profile name but is used here as an example since there can be multiple profiles with self described or incremental names (for example, wp_profile1, wp_profile2). Linux\u2122 /opt/HCL/WebSphere/wp_profile /opt/HCL/WebSphere/PortalExpress/AppServer/profiles/wp_profile Solaris /opt/HCL/WebSphere/wp_profile Windows\u2122 C:\\Program Files\\HCL\\WebSphere\\wp_profile","title":"wp_profile_root"},{"location":"reference/wpsdirstr/#configengine_root","text":"Throughout this documentation, the installation location for the Configuration Engine component is noted as ConfigEngine_root. AIX\u00ae /usr/HCL/WebSphere/ConfigEngine HP-UX /opt/HCL/WebSphere/ConfigEngine IBM\u00ae i /QIBM/ProdData/WebSphere/PortalServer/V85/ConfigEngine Linux\u2122 /opt/HCL/WebSphere/ConfigEngine /opt/HCL/WebSphere/PortalExpress/AppServer/profiles/ConfigEngine Solaris /opt/HCL/WebSphere/ConfigEngine Windows\u2122 C:\\Program Files\\HCL\\WebSphere\\ConfigEngine","title":"ConfigEngine_root"},{"location":"reference/wpsdirstr/#configuration-engine-profile-directory","text":"The Configuration Engine profile directory is the location of the ConfigEngine task. AIX\u00ae /usr/HCL/WebSphere/wp_profile/ConfigEngine HP-UX /opt/HCL/WebSphere/wp_profile/ConfigEngine IBM\u00ae i WebSphere\u00ae Application Server 8.5.5 for Network Deployment: /QIBM/UserData/WebSphere/AppServer/V85/ND/profiles/wp_profile/ConfigEngine The wp_profile is the default profile name but is used here as an example since there can be multiple profiles with self described or incremental names (for example, wp_profile1, wp_profile2). Linux\u2122 /opt/HCL/WebSphere/wp_profile/ConfigEngine /opt/HCL/WebSphere/PortalExpress/AppServer/profiles/wp_profile/ConfigEngine Solaris /opt/HCL/WebSphere/wp_profile/ConfigEngine Windows\u2122 C:\\Program Files\\HCL\\WebSphere\\wp_profile\\ConfigEngine","title":"Configuration Engine profile directory"},{"location":"reference/wpsdirstr/#hcl-portal-directory-structure-after-installation","text":"HCL Portal has the following directory structure after installation: Note: On the Linux and IBM i operating systems, all directories are r/o. `[PortalServer\\_root](wpsdirstr.md#wp_root)` Root directory for HCL Portal | +-- ap | +-- base | +-- bin HCL Portal tools | +-- bp | +-- doc Javadoc and sample XMLAccess input files | +-- ext | +-- filesForDmgr | +-- installer | +-- jcr Resources for the Content Repository | +-- license HCL Portal license agreement | +-- lwo | +-- lwp04.infra | +-- people | +-- prereq | +-- prereqs.infra | +-- profileTemplates | +-- properties | +-- pzn | +-- pzn.ext | +-- search | +-- shared Shared resources, including runtime JARs, TLDs, | and other resources. | The /app subdirectory is the application server's | WPSLib shared library for HCL Portal | +-- solutionInstaller +-- theme | +-- ui | +-- version Version information for various components | +-- wcm Source Web application files for web content manager | +-- wps.properties","title":"HCL Portal directory structure after installation"},{"location":"reference/wpsdirstr/#appserver_root","text":"Throughout this documentation, the installation location for WebSphere Application Server is noted as AppServer_root. The following information shows the WebSphere Application Server installation directory: HCL Portal Configuration profile directory cw_profile_root Throughout this documentation, the configuration wizard profile location is noted as cw_profile_root. The following information shows the profile location: AIX\u00ae /usr/HCL/WebSphere/AppServer/profiles/cw_profile HP-UX /opt/HCL/WebSphere/AppServer/profiles/cw_profile IBM\u00ae i WebSphere Application Server 8.5 for Network Deployment:/QIBM/UserData/WebSphere/AppServer/V8/ND/profiles/cw_profile Linux\u2122 /opt/HCL/WebSphere/AppServer/profiles/cw_profile Solaris /opt/HCL/WebSphere/AppServer/profiles/cw_profile Windows\u2122 C:\\Program Files\\HCL\\WebSphere\\AppServer\\profiles\\cw_profile IBM\u00ae i The installation location for WebSphere\u00ae Application Server is noted as app_server_root and refers to the UserData path, unless otherwise specified in the topic where you see it. The profile_root following variable refers to the name given to the WebSphere\u00ae Application Server profile in use. The following information shows the default WebSphere Application Server installation location if it is not otherwise specified during installation: IBM\u00ae i The installation location for WebSphere\u00ae Application Server is noted as app_server_root and refers to the UserData path, unless otherwise specified in the topic where you see it. The profile_root following variable refers to the name given to the WebSphere\u00ae Application Server profile in use. Linux\u2122 /opt/HCL/WebSphere/PortalExpress/AppServer Windows\u2122 C:\\Program Files\\HCL\\WebSphere\\PortalExpress\\AppServer","title":"AppServer_root"},{"location":"script-portlet/script_app_improvements/","text":"Script Application Improvements In CF201, some improvements are made to the Script Applications. You can now upload minified content, use a new configuration task to set the required WCM properties for script applications such as React or Angular, and make use of the new Deferred with React theme profile. Introduction The following improvements were made for the Script Application on CF201: The issue with uploading minified content is fixed so you can now use production builds of an SPA A new configuration task is available to configure WCM properties required to run SPAs like React or Angular in script applications: ConfigEngine.sh|bat enable-wcm-spa-script-app-properties Out of the box react profile in the 8.5 theme: Deferred with React . Fix for minified content processing In CF200 and earlier, minified single line content would cause an issue with React and other SPAs due a problem with processing of the files in WCM. For example, in webpack, it was recommended to set collapseWhitespace=false . We have addressed this issue with CF201 and you can now build your script applications with collapseWhitespace=true going forward. Configuring WCM properties for SPA script apps When using an Angular, React or another SPA in a script application, it is necessary to turn off the dynamic parameter tag and shortform in DX since they may interfere with some of the syntax used. Instead of having to trigger this manually, a new configuration task was added to configure these for you. Note that a restart of DX Portal is still required for the changes to take effect. Config task: ConfigEngine.sh|bat enable-wcm-spa-script-app-properties To disable run: ConfigEngine.sh|bat disable-wcm-spa-script-app-properties Deferred with React theme profile in 8.5 theme A new Deferred with React theme profile was added that includes React v16 which can be used on pages contain React script applications.","title":"Script Application Improvements"},{"location":"script-portlet/script_app_improvements/#script-application-improvements","text":"In CF201, some improvements are made to the Script Applications. You can now upload minified content, use a new configuration task to set the required WCM properties for script applications such as React or Angular, and make use of the new Deferred with React theme profile.","title":"Script Application Improvements"},{"location":"script-portlet/script_app_improvements/#introduction","text":"The following improvements were made for the Script Application on CF201: The issue with uploading minified content is fixed so you can now use production builds of an SPA A new configuration task is available to configure WCM properties required to run SPAs like React or Angular in script applications: ConfigEngine.sh|bat enable-wcm-spa-script-app-properties Out of the box react profile in the 8.5 theme: Deferred with React .","title":"Introduction"},{"location":"script-portlet/script_app_improvements/#fix-for-minified-content-processing","text":"In CF200 and earlier, minified single line content would cause an issue with React and other SPAs due a problem with processing of the files in WCM. For example, in webpack, it was recommended to set collapseWhitespace=false . We have addressed this issue with CF201 and you can now build your script applications with collapseWhitespace=true going forward.","title":"Fix for minified content processing"},{"location":"script-portlet/script_app_improvements/#configuring-wcm-properties-for-spa-script-apps","text":"When using an Angular, React or another SPA in a script application, it is necessary to turn off the dynamic parameter tag and shortform in DX since they may interfere with some of the syntax used. Instead of having to trigger this manually, a new configuration task was added to configure these for you. Note that a restart of DX Portal is still required for the changes to take effect. Config task: ConfigEngine.sh|bat enable-wcm-spa-script-app-properties To disable run: ConfigEngine.sh|bat disable-wcm-spa-script-app-properties","title":"Configuring WCM properties for SPA script apps"},{"location":"script-portlet/script_app_improvements/#deferred-with-react-theme-profile-in-85-theme","text":"A new Deferred with React theme profile was added that includes React v16 which can be used on pages contain React script applications.","title":"Deferred with React theme profile in 8.5 theme"},{"location":"search-rest-api/search/","text":"Search REST API specification The following topics describe-s- the API calls to search HCL Digital Experience. You can search HCL Digital Experience web pages and content to find content that contains a specific text string in its title or content, or is tagged with a specific tag. Beginning with HCL DX 9.5 Container Update and CF 200 , a new API explorer is available that allows developers using the Digital Experience Search REST APIs to explore and test these APIs. See the topic Digital Experience Search REST API Explorer below for details. Context Paths There are a number of different context paths available for this API to allow for different authentication mechanisms: Context Path Authentication /PORTAL_CONTEXT/contenthandler/searchfeed/search None /PORTAL_CONTEXT/mycontenthandler/searchfeed/search Basic Parameters The order of the parameters in the requests does not matter. The parameter names are case-sensitive; they must be entered in the format documented. Any unknown or unsupported parameters that are submitted as part of a request is ignored. The request must be a standard HTTP GET or POST command. When the request is GET, the URL is formed by combining the search server's host name, port, and path; and a collection of name-value pairs (input parameters) separated by & characters. Any parameter value must be URL-escaped if in GET request. When the request is POST, the URL is formed by combining the search server's host name, port, and path; and a collection of name-value pairs (input parameters) is passed on the request as parameters. Name Description Comments locale - Locale of request client - Any message that is returned is in the client locale - Available scopes and collections; titles and description are in the client locale - Sorting method might be effected by the locale - Any additional information in the search results that are locale aware, like description |Specifies the language to use to parse the search request. See ISO-639 and ISO-3166 for valid values, for example. en_US. This parameter is optional. When specified, the appropriate dictionary for the specified language is used. Note: The dictionary for the language that is specified must be enabled for this parameter to work. | |query| |- Text to search; returns a list of results with the specified text in the title, description, or content. - Encode the strings. - By default, spaces are treated as an OR operator. The following operators are supported: AND or && Searches for items that contain both words. For example: query=red%20AND%20test returns items that contain both the word red and test. AND is the default operator. NOT or ! Excludes the word that follows the operator from the search. For example: query=test%20NOT%20red returns items that contain the word test, but not the word red. OR Searches for items that contain either of the words. For example: query=test%20OR%20red. To search for a phrase, enclose the phrase in quotation marks (\" \"). + The plus sign indicates that the word must be present in the result. For example: query=+test%20red returns only items that contain the word test and many that also contain red, but none that contain only the word red. ? Use a question mark to match individual characters. For example: query=te%3Ft returns items that contain the words test, text, tent, and others that begin with te. -: The dash prohibits the return of a word. This operator is similar to NOT. For example: query=test%20-red returns items that contain the word test, but not the wordred. Note: Wildcard searches are permitted, but wildcard only searches (*) are not. For more information about supported operators, go to the Search topic. | |queryLang|Language of the query string|Specifies the language to use to parse the query parameter. See ISO-639 and ISO-3166 for valid values, for example, en_US. This parameter is optional. When specified, the appropriate dictionary for the specified language is used. Note: The dictionary for the language that is specified must be enabled for this parameter to work. | |start|Offset to first result to return in results|Defines an offset from the first result in the set. This parameter is ignored if a page parameter is provided. The value starts from 0. The default is 0. If specified value is negative, the value is defaulted to 0; if the specified value is greater than the number of results, no results are returned.| |page|Page number|Specifies the page to be returned. The default value is 1, which returns the first page.| |pageSize|Number of results that are wanted for a single request|Specifies the number of entries to return per page. The minimum value is 0 (negative values default to 0). The default value is 10. The maximum value that you can specify is 150.| |scope|Identifier of which scope to search; the list of valid scopes is available in the Scopes API .|Default is to search all scopes.| |sortKey|The key, which controls the sorting order of the search results.|The following values are supported: date and relevance. A valid value for this parameter is one of these values, or the name of any other sortable field.| |sortOrder|Determines the order by which the results are sorted: ascending or descending.|The only valid values are asc or desc.| |constraint|Allows constraining the search results according to the provided criteria.|The provided criteria. For more information, see Constraints API .| |facet|Specifies which facets are returned for the query, in addition to search results.|Addition to search results. For more information, see Facets API .| |index|Specifies which index (collection) to use for the search|For more information, see Indexes API .| Examples /searchfeed/search?queryLang=en&locale=en&resultLang=en&query=development&scope=1345374377545&start=0&results=10 Search query with query text = development. Response Format The response is Atom-compliant. The following table describes the significance of the elements that are returned in the response: Section Remarks /feed The container element for metadata and data that is associated with the search results feed. /feed/title Descriptive title of the feed. /feed/link[@href] Reference from the feed to a web resource. For more information, see Feed Paging and Archiving . /feed/link[@rel= \"next\"|\"previous\"|\"first\"|\"last\"] first, last, next, and previous links are included, for supporting. /feed/author/name Description of the feed generator. /feed/id Permanent, universally unique identifier for the feed. /feed/updated Date and time the query was issued. The value conforms to the date-time production in RFC3339. /feed/openSearch:totalResults Total number of results for submitted query. /feed/openSearch:Query Contains information about the query that was submitted by the user. /feed/openSearch:Query[@role] The role attribute value is request. /feed/openSearch:Query[@searchTerms] Represents the user submitted query terms. /feed/openSearch:startIndex Initial result number for the search results returned in this feed. /feed/openSearch:itemsPerPage Number of search results that are returned in this feed. /feed/entry Encompasses the information for a single search result. /feed/entry/category Conveys information about a category (often corresponding to a facet) associated with an entry. /feed/entry/category@term A string that identifies the category to which the entry belongs. /feed/entry/category@scheme An IRI that identifies a categorization scheme. /feed/entry/title Text construct that conveys a human-readable title for an entry. /feed/entry/title[@type] Indicates whether the text construct is text, html, or xhtml. Text construct is text if not otherwise specified. /feed/entry/link Defines a reference to the search result resource. /feed/entry/link[@rel] Indicates the link relation type. If not present, the link relation type is alternate . /feed/entry/link[@href] URI link to document. /feed/entry/link[@type] Content type of the URI document link is an advisory media type. /feed/entry/relevance:score Indicates a relative assessment of relevance for a particular search result with regards to the search query. /feed/entry/updated Last modified date for the document. The value conforms to the date-time production in RFC3339. /feed/entry/id Unique identifier of the document. /feed/entry/summary Text construct that conveys a short summary, abstract, or excerpt of an entry. /feed/entry/summary[@type] Indicates whether the text construct is text, html, or xhtml. Text construct is text if not otherwise specified. /feed/entry/author A person construct that indicates the author of the entry or feed. /feed/entry/author/name Human-readable name for the person. /feed/entry/author/uri Identifier that is associated with the person. /feed/entry/author/email The person email address. Depending on the HCL Connections configuration settings, this value might not be returned as part of the feed. /feed/entry/wplc:field This element is used to represent the name and value of a field of a document. The id attribute represents the name of the field. The body of the element represents the value of the field. More fields are included in the search result response if specified through the includeField parameter. /feed/ibmsc:facets For more information, see Facets . The namespace in the table is http://www.w3.org/2005/Atom unless otherwise specified. The openSearch identifier is used to refer to the namespace http://a9.com/-/spec/opensearch/1.1. The relevance identifier is used to refer to the namespace http://a9.com/-/opensearch/extensions/relevance/1.0/. The ibmsc identifier is used to refer to the namespace http://www.ibm.com/search/content/2010. The spelling identifier is used to refer to the namespace http://a9.com/-/opensearch/extensions/spelling/1.0/. Example To search for all content across HCL Digital Experience that contains the text Development, send the following HTTP request: > GET /searchfeed/search?query=development&scope=com.ibm.lotus.search.ALL_SOURCES HTTP/1.1 The following content is returned by the server: <?xml version=\"1.0\" encoding=\"UTF-8\"?> <atom:feed xmlns:opensearch=\"http://a9.com/-/spec/opensearch/1.1/\" xmlns:xhtml=\"http://www.w3.org/1999/xhtml\" xmlns:wplc=\"http://www.ibm.com/wplc/atom/1.0\" xmlns:atom=\"http://www.w3.org/2005/Atom\"> <atom:title>Search results for query \"development\" on scope \"com.ibm.lotus.search.ALL_SOURCES\"</atom:title> <atom:link href=\"searchfeed:search\" rel=\"self\" type=\"application/atom+xml\"/> <atom:author> <atom:name>Enterprise Search API Web Service.</atom:name> </atom:author> <atom:id>searchfeed:search</atom:id> <atom:category term=\"com.ibm.lotus.search.ALL_SOURCES\" label=\"com.ibm.lotus.search.ALL_SOURCES\"/> <atom:updated>2013-01-14T08:35:27.482Z</atom:updated> <opensearch:totalResults exact=\"true\">412</opensearch:totalResults> <opensearch:Query role=\"request\" searchTerms=\"development\"/> <opensearch:startIndex>0</opensearch:startIndex> <opensearch:itemsPerPage>10</opensearch:itemsPerPage> <atom:entry> <atom:id>ResourceinjectionusingRationalApplicationDeveloperv7.5</atom:id> <atom:title type=\"text/html\">Resource injection using Rational Application Developer v7.5</atom:title> <atom:author> <atom:uri>Dan_Haim</atom:uri> <atom:name>Dan Haim</atom:name> </atom:author> <atom:author> <atom:uri>James_Chung</atom:uri> <atom:name>James Chung</atom:name> </atom:author> <atom:link href=\"http://www.ibm.com/developerworks/rational/library/10/resourceinjectionwithrad7-5/index.html\"/> <atom:category term=\"ContentSourceType/default\" scheme=\"com.ibm.wplc.taxonomy://feature_taxonomy\" label=\"Document\"/> <opensearch:relevance>100.0</opensearch:relevance> <atom:updated>2010-06-07T06:49:09.000Z</atom:updated> <atom:summary type=\"html\"><![CDATA[<Strong>Summary:</Strong> Java&#8482; platf....]]></atom:summary> <atom:link href=\"/wps/images/icons/Document.gif\" rel=\"icon\"/> <wplc:field id=\"name\">95c189804d4268bf8d49ede9170f1e3d</wplc:field> <wplc:field id=\"contentSourceType\">Seedlist</wplc:field> <wplc:field id=\"defaultcontext\">/poc</wplc:field> <wplc:field id=\"effectivedate\">1236246335000</wplc:field> <wplc:field id=\"modifier\">Replicator</wplc:field> <wplc:field id=\"securecontext\">/mypoc</wplc:field> <wplc:field id=\"search_controllable_uuid\">2c1e7b59-b465-49da-bc99-5aee3c00932b</wplc:field> <wplc:field id=\"locale\">en</wplc:field> <wplc:field id=\"RatingAverage\">4</wplc:field> <wplc:field id=\"author_info\">Dan_Haim<![CDATA[<Dan Haim<]]></wplc:field> <wplc:field id=\"author_info\">James_Chung<![CDATA[<James Chung<]]></wplc:field> <wplc:field id=\"acls\">public</wplc:field> <wplc:field id=\"authoringtemplate\">Blog Home</wplc:field> <wplc:field id=\"popularity\">7811</wplc:field> <wplc:field id=\"security_ids\">Z6QReDeIPO2JIT62BDIJM8CKHDAJMG6P1P2MM8C3BEIJMK61BPAMPCCG1CIJP8623</wplc:field> <wplc:field id=\"difficulty\">Advanced</wplc:field> <wplc:field id=\"contentPath\">/Blog Solo Template v70/Blog/Home/95c189804d4268bf8d49ede9170f1e3d</wplc:field> <wplc:field id=\"category\">Rational</wplc:field> </atom:entry> ... </atom:feed>","title":"Search REST API specification"},{"location":"search-rest-api/search/#search-rest-api-specification","text":"The following topics describe-s- the API calls to search HCL Digital Experience. You can search HCL Digital Experience web pages and content to find content that contains a specific text string in its title or content, or is tagged with a specific tag. Beginning with HCL DX 9.5 Container Update and CF 200 , a new API explorer is available that allows developers using the Digital Experience Search REST APIs to explore and test these APIs. See the topic Digital Experience Search REST API Explorer below for details.","title":"Search REST API specification"},{"location":"search-rest-api/search/#context-paths","text":"There are a number of different context paths available for this API to allow for different authentication mechanisms: Context Path Authentication /PORTAL_CONTEXT/contenthandler/searchfeed/search None /PORTAL_CONTEXT/mycontenthandler/searchfeed/search Basic","title":"Context Paths"},{"location":"search-rest-api/search/#parameters","text":"The order of the parameters in the requests does not matter. The parameter names are case-sensitive; they must be entered in the format documented. Any unknown or unsupported parameters that are submitted as part of a request is ignored. The request must be a standard HTTP GET or POST command. When the request is GET, the URL is formed by combining the search server's host name, port, and path; and a collection of name-value pairs (input parameters) separated by & characters. Any parameter value must be URL-escaped if in GET request. When the request is POST, the URL is formed by combining the search server's host name, port, and path; and a collection of name-value pairs (input parameters) is passed on the request as parameters. Name Description Comments locale - Locale of request client - Any message that is returned is in the client locale - Available scopes and collections; titles and description are in the client locale - Sorting method might be effected by the locale - Any additional information in the search results that are locale aware, like description |Specifies the language to use to parse the search request. See ISO-639 and ISO-3166 for valid values, for example. en_US. This parameter is optional. When specified, the appropriate dictionary for the specified language is used. Note: The dictionary for the language that is specified must be enabled for this parameter to work. | |query| |- Text to search; returns a list of results with the specified text in the title, description, or content. - Encode the strings. - By default, spaces are treated as an OR operator. The following operators are supported: AND or && Searches for items that contain both words. For example: query=red%20AND%20test returns items that contain both the word red and test. AND is the default operator. NOT or ! Excludes the word that follows the operator from the search. For example: query=test%20NOT%20red returns items that contain the word test, but not the word red. OR Searches for items that contain either of the words. For example: query=test%20OR%20red. To search for a phrase, enclose the phrase in quotation marks (\" \"). + The plus sign indicates that the word must be present in the result. For example: query=+test%20red returns only items that contain the word test and many that also contain red, but none that contain only the word red. ? Use a question mark to match individual characters. For example: query=te%3Ft returns items that contain the words test, text, tent, and others that begin with te. -: The dash prohibits the return of a word. This operator is similar to NOT. For example: query=test%20-red returns items that contain the word test, but not the wordred. Note: Wildcard searches are permitted, but wildcard only searches (*) are not. For more information about supported operators, go to the Search topic. | |queryLang|Language of the query string|Specifies the language to use to parse the query parameter. See ISO-639 and ISO-3166 for valid values, for example, en_US. This parameter is optional. When specified, the appropriate dictionary for the specified language is used. Note: The dictionary for the language that is specified must be enabled for this parameter to work. | |start|Offset to first result to return in results|Defines an offset from the first result in the set. This parameter is ignored if a page parameter is provided. The value starts from 0. The default is 0. If specified value is negative, the value is defaulted to 0; if the specified value is greater than the number of results, no results are returned.| |page|Page number|Specifies the page to be returned. The default value is 1, which returns the first page.| |pageSize|Number of results that are wanted for a single request|Specifies the number of entries to return per page. The minimum value is 0 (negative values default to 0). The default value is 10. The maximum value that you can specify is 150.| |scope|Identifier of which scope to search; the list of valid scopes is available in the Scopes API .|Default is to search all scopes.| |sortKey|The key, which controls the sorting order of the search results.|The following values are supported: date and relevance. A valid value for this parameter is one of these values, or the name of any other sortable field.| |sortOrder|Determines the order by which the results are sorted: ascending or descending.|The only valid values are asc or desc.| |constraint|Allows constraining the search results according to the provided criteria.|The provided criteria. For more information, see Constraints API .| |facet|Specifies which facets are returned for the query, in addition to search results.|Addition to search results. For more information, see Facets API .| |index|Specifies which index (collection) to use for the search|For more information, see Indexes API .|","title":"Parameters"},{"location":"search-rest-api/search/#examples","text":"/searchfeed/search?queryLang=en&locale=en&resultLang=en&query=development&scope=1345374377545&start=0&results=10 Search query with query text = development.","title":"Examples"},{"location":"search-rest-api/search/#response-format","text":"The response is Atom-compliant. The following table describes the significance of the elements that are returned in the response: Section Remarks /feed The container element for metadata and data that is associated with the search results feed. /feed/title Descriptive title of the feed. /feed/link[@href] Reference from the feed to a web resource. For more information, see Feed Paging and Archiving . /feed/link[@rel= \"next\"|\"previous\"|\"first\"|\"last\"] first, last, next, and previous links are included, for supporting. /feed/author/name Description of the feed generator. /feed/id Permanent, universally unique identifier for the feed. /feed/updated Date and time the query was issued. The value conforms to the date-time production in RFC3339. /feed/openSearch:totalResults Total number of results for submitted query. /feed/openSearch:Query Contains information about the query that was submitted by the user. /feed/openSearch:Query[@role] The role attribute value is request. /feed/openSearch:Query[@searchTerms] Represents the user submitted query terms. /feed/openSearch:startIndex Initial result number for the search results returned in this feed. /feed/openSearch:itemsPerPage Number of search results that are returned in this feed. /feed/entry Encompasses the information for a single search result. /feed/entry/category Conveys information about a category (often corresponding to a facet) associated with an entry. /feed/entry/category@term A string that identifies the category to which the entry belongs. /feed/entry/category@scheme An IRI that identifies a categorization scheme. /feed/entry/title Text construct that conveys a human-readable title for an entry. /feed/entry/title[@type] Indicates whether the text construct is text, html, or xhtml. Text construct is text if not otherwise specified. /feed/entry/link Defines a reference to the search result resource. /feed/entry/link[@rel] Indicates the link relation type. If not present, the link relation type is alternate . /feed/entry/link[@href] URI link to document. /feed/entry/link[@type] Content type of the URI document link is an advisory media type. /feed/entry/relevance:score Indicates a relative assessment of relevance for a particular search result with regards to the search query. /feed/entry/updated Last modified date for the document. The value conforms to the date-time production in RFC3339. /feed/entry/id Unique identifier of the document. /feed/entry/summary Text construct that conveys a short summary, abstract, or excerpt of an entry. /feed/entry/summary[@type] Indicates whether the text construct is text, html, or xhtml. Text construct is text if not otherwise specified. /feed/entry/author A person construct that indicates the author of the entry or feed. /feed/entry/author/name Human-readable name for the person. /feed/entry/author/uri Identifier that is associated with the person. /feed/entry/author/email The person email address. Depending on the HCL Connections configuration settings, this value might not be returned as part of the feed. /feed/entry/wplc:field This element is used to represent the name and value of a field of a document. The id attribute represents the name of the field. The body of the element represents the value of the field. More fields are included in the search result response if specified through the includeField parameter. /feed/ibmsc:facets For more information, see Facets . The namespace in the table is http://www.w3.org/2005/Atom unless otherwise specified. The openSearch identifier is used to refer to the namespace http://a9.com/-/spec/opensearch/1.1. The relevance identifier is used to refer to the namespace http://a9.com/-/opensearch/extensions/relevance/1.0/. The ibmsc identifier is used to refer to the namespace http://www.ibm.com/search/content/2010. The spelling identifier is used to refer to the namespace http://a9.com/-/opensearch/extensions/spelling/1.0/.","title":"Response Format"},{"location":"search-rest-api/search/#example","text":"To search for all content across HCL Digital Experience that contains the text Development, send the following HTTP request: > GET /searchfeed/search?query=development&scope=com.ibm.lotus.search.ALL_SOURCES HTTP/1.1 The following content is returned by the server: <?xml version=\"1.0\" encoding=\"UTF-8\"?> <atom:feed xmlns:opensearch=\"http://a9.com/-/spec/opensearch/1.1/\" xmlns:xhtml=\"http://www.w3.org/1999/xhtml\" xmlns:wplc=\"http://www.ibm.com/wplc/atom/1.0\" xmlns:atom=\"http://www.w3.org/2005/Atom\"> <atom:title>Search results for query \"development\" on scope \"com.ibm.lotus.search.ALL_SOURCES\"</atom:title> <atom:link href=\"searchfeed:search\" rel=\"self\" type=\"application/atom+xml\"/> <atom:author> <atom:name>Enterprise Search API Web Service.</atom:name> </atom:author> <atom:id>searchfeed:search</atom:id> <atom:category term=\"com.ibm.lotus.search.ALL_SOURCES\" label=\"com.ibm.lotus.search.ALL_SOURCES\"/> <atom:updated>2013-01-14T08:35:27.482Z</atom:updated> <opensearch:totalResults exact=\"true\">412</opensearch:totalResults> <opensearch:Query role=\"request\" searchTerms=\"development\"/> <opensearch:startIndex>0</opensearch:startIndex> <opensearch:itemsPerPage>10</opensearch:itemsPerPage> <atom:entry> <atom:id>ResourceinjectionusingRationalApplicationDeveloperv7.5</atom:id> <atom:title type=\"text/html\">Resource injection using Rational Application Developer v7.5</atom:title> <atom:author> <atom:uri>Dan_Haim</atom:uri> <atom:name>Dan Haim</atom:name> </atom:author> <atom:author> <atom:uri>James_Chung</atom:uri> <atom:name>James Chung</atom:name> </atom:author> <atom:link href=\"http://www.ibm.com/developerworks/rational/library/10/resourceinjectionwithrad7-5/index.html\"/> <atom:category term=\"ContentSourceType/default\" scheme=\"com.ibm.wplc.taxonomy://feature_taxonomy\" label=\"Document\"/> <opensearch:relevance>100.0</opensearch:relevance> <atom:updated>2010-06-07T06:49:09.000Z</atom:updated> <atom:summary type=\"html\"><![CDATA[<Strong>Summary:</Strong> Java&#8482; platf....]]></atom:summary> <atom:link href=\"/wps/images/icons/Document.gif\" rel=\"icon\"/> <wplc:field id=\"name\">95c189804d4268bf8d49ede9170f1e3d</wplc:field> <wplc:field id=\"contentSourceType\">Seedlist</wplc:field> <wplc:field id=\"defaultcontext\">/poc</wplc:field> <wplc:field id=\"effectivedate\">1236246335000</wplc:field> <wplc:field id=\"modifier\">Replicator</wplc:field> <wplc:field id=\"securecontext\">/mypoc</wplc:field> <wplc:field id=\"search_controllable_uuid\">2c1e7b59-b465-49da-bc99-5aee3c00932b</wplc:field> <wplc:field id=\"locale\">en</wplc:field> <wplc:field id=\"RatingAverage\">4</wplc:field> <wplc:field id=\"author_info\">Dan_Haim<![CDATA[<Dan Haim<]]></wplc:field> <wplc:field id=\"author_info\">James_Chung<![CDATA[<James Chung<]]></wplc:field> <wplc:field id=\"acls\">public</wplc:field> <wplc:field id=\"authoringtemplate\">Blog Home</wplc:field> <wplc:field id=\"popularity\">7811</wplc:field> <wplc:field id=\"security_ids\">Z6QReDeIPO2JIT62BDIJM8CKHDAJMG6P1P2MM8C3BEIJMK61BPAMPCCG1CIJP8623</wplc:field> <wplc:field id=\"difficulty\">Advanced</wplc:field> <wplc:field id=\"contentPath\">/Blog Solo Template v70/Blog/Home/95c189804d4268bf8d49ede9170f1e3d</wplc:field> <wplc:field id=\"category\">Rational</wplc:field> </atom:entry> ... </atom:feed>","title":"Example"},{"location":"security/content_security_policy/","text":"Content Security Policy The Content-Security-Policy header is used by modern browsers to enhance security of HCL Digital Experience site documents or webpages by allowing HCL Digital Experience administrators or developers declare which dynamic resources are allowed to load. Overview Content Security Policy (CSP) is a well-known defense against cross-site scripting (XSS) attacks (delivery of malicious code along with intended content). CSP provides browsers with the following capabilities: A Content-Security-Policy HTTP request header which defines an allowlist Allowlists which tell the browser what is and is not allowed Reporting of policy violations to the server The web's security model is rooted in the same-origin security policy which ensures that domain origins are kept isolated. For more information, see the introductory Google Web Fundamentals article on Content Security Policy (CSP) . With HCL Digital Experience Container Update CF192 and higher releases, developers can apply platform support and guidance to update their DX sites to verify scripts requested to execute are coming from trusted sources before rendering pages to end users. See the guidance topics for Content Security Policy as listed below. Limitations CSP has the following limitations: Dojo is unsupported. This is due to difficulties to make Dojo CSP-compliant by eliminating inline Javascript and styles. As a result, any DX artifact (modules, portlets, themes) that requires Dojo will also not be supported, including: The Default85 theme. Standard Skin makes use of Dojo for some of the menu processing, so this skin is not supported. Some context menu's in the toolbar and skins Any modules using Dojo Edit mode is not supported Semantic tagging is not supported We recommend the use of explicit styles in the rich text editor instead of the default inline styles. For more information on how to configure custom styles for Advanced Text Editor see the following resources: Documentation resource: Rich Text Editor Toolbar configuration options Documentation resource: Using your own document styles in customizing the Rich Text Editor","title":"Content Security Policy"},{"location":"security/content_security_policy/#content-security-policy","text":"The Content-Security-Policy header is used by modern browsers to enhance security of HCL Digital Experience site documents or webpages by allowing HCL Digital Experience administrators or developers declare which dynamic resources are allowed to load.","title":"Content Security Policy"},{"location":"security/content_security_policy/#overview","text":"Content Security Policy (CSP) is a well-known defense against cross-site scripting (XSS) attacks (delivery of malicious code along with intended content). CSP provides browsers with the following capabilities: A Content-Security-Policy HTTP request header which defines an allowlist Allowlists which tell the browser what is and is not allowed Reporting of policy violations to the server The web's security model is rooted in the same-origin security policy which ensures that domain origins are kept isolated. For more information, see the introductory Google Web Fundamentals article on Content Security Policy (CSP) . With HCL Digital Experience Container Update CF192 and higher releases, developers can apply platform support and guidance to update their DX sites to verify scripts requested to execute are coming from trusted sources before rendering pages to end users. See the guidance topics for Content Security Policy as listed below.","title":"Overview"},{"location":"security/content_security_policy/#limitations","text":"CSP has the following limitations: Dojo is unsupported. This is due to difficulties to make Dojo CSP-compliant by eliminating inline Javascript and styles. As a result, any DX artifact (modules, portlets, themes) that requires Dojo will also not be supported, including: The Default85 theme. Standard Skin makes use of Dojo for some of the menu processing, so this skin is not supported. Some context menu's in the toolbar and skins Any modules using Dojo Edit mode is not supported Semantic tagging is not supported We recommend the use of explicit styles in the rich text editor instead of the default inline styles. For more information on how to configure custom styles for Advanced Text Editor see the following resources: Documentation resource: Rich Text Editor Toolbar configuration options Documentation resource: Using your own document styles in customizing the Rich Text Editor","title":"Limitations"},{"location":"security/mod_fed_sec/","text":"Changing from a stand-alone repository to a federated repository If you originally configured a stand-alone LDAP user registry but require a robust security configuration, you can change to the federated user repository. In a stand-alone server environment, you can complete the following task when the servers are either stopped or started. In a clustered environment, start the deployment manager and node agent. Then, verify that they are able to synchronize. Remember: Starting with HCL Portal Version 8.5, the stand-alone LDAP repository is deprecated. Change to the federated LDAP user repository. Use the wp_security_federated.properties helper file that is in the wp_profile_root /ConfigEngine/config/helpers directory. It ensures that the correct properties are entered. In the following instructions, where the step refers to the wkplc.properties file, use your wp_security_federated.properties helper file. Go to the wp_profile_root /ConfigEngine/properties directory. Open the wkplc.properties file with a text editor. Update the following parameters in the wkplc.properties file under the VMM Federated repository properties heading: Note: Go to the properties file for specific information about the parameters. federated.primaryAdminId federated.realm federated.serverId federated.serverPassword Open a command prompt. Change to the wp_profile_root /ConfigEngine directory. Run the following task to change the configuration to use a federated repository: AIX\u00ae HP-UX Linux\u2122 Solaris z/OS\u00ae: ./ConfigEngine.sh wp-modify-federated-security -DWasPassword=password -Dskip.ldap.validation=true IBM\u00ae i: ConfigEngine.sh wp-modify-federated-security -DWasPassword=password -Dskip.ldap.validation=true Windows\u2122: ConfigEngine.bat wp-modify-federated-security -DWasPassword=password -Dskip.ldap.validation=true Stop and restart the appropriate servers to propagate the changes. For instructions, go to Starting and stopping servers, deployment managers, and node agents . Log in to HCL Portal as an administrator. Click Administration . Then, click Virtual Portals > Manage Virtual Portals . Edit each Virtual Portal using the pencil icon. Set User realm as blank. Click OK . Edit each Virtual Portal using the pencil icon. Set User realm to match the realm ID that you set for federated.realm. Click OK .","title":"Changing from a stand-alone repository to a federated repository"},{"location":"security/mod_fed_sec/#changing-from-a-stand-alone-repository-to-a-federated-repository","text":"If you originally configured a stand-alone LDAP user registry but require a robust security configuration, you can change to the federated user repository. In a stand-alone server environment, you can complete the following task when the servers are either stopped or started. In a clustered environment, start the deployment manager and node agent. Then, verify that they are able to synchronize. Remember: Starting with HCL Portal Version 8.5, the stand-alone LDAP repository is deprecated. Change to the federated LDAP user repository. Use the wp_security_federated.properties helper file that is in the wp_profile_root /ConfigEngine/config/helpers directory. It ensures that the correct properties are entered. In the following instructions, where the step refers to the wkplc.properties file, use your wp_security_federated.properties helper file. Go to the wp_profile_root /ConfigEngine/properties directory. Open the wkplc.properties file with a text editor. Update the following parameters in the wkplc.properties file under the VMM Federated repository properties heading: Note: Go to the properties file for specific information about the parameters. federated.primaryAdminId federated.realm federated.serverId federated.serverPassword Open a command prompt. Change to the wp_profile_root /ConfigEngine directory. Run the following task to change the configuration to use a federated repository: AIX\u00ae HP-UX Linux\u2122 Solaris z/OS\u00ae: ./ConfigEngine.sh wp-modify-federated-security -DWasPassword=password -Dskip.ldap.validation=true IBM\u00ae i: ConfigEngine.sh wp-modify-federated-security -DWasPassword=password -Dskip.ldap.validation=true Windows\u2122: ConfigEngine.bat wp-modify-federated-security -DWasPassword=password -Dskip.ldap.validation=true Stop and restart the appropriate servers to propagate the changes. For instructions, go to Starting and stopping servers, deployment managers, and node agents . Log in to HCL Portal as an administrator. Click Administration . Then, click Virtual Portals > Manage Virtual Portals . Edit each Virtual Portal using the pencil icon. Set User realm as blank. Click OK . Edit each Virtual Portal using the pencil icon. Set User realm to match the realm ID that you set for federated.realm. Click OK .","title":"Changing from a stand-alone repository to a federated repository"},{"location":"security/use_openid/","text":"Integrating with OpenID authentication Web applications provide information and services to public users and personalized information and services to authenticated users. Users often work with multiple web applications, which require multiple IDs and passwords. This requirement can be difficult to maintain. Integrating identity providers (Google, Yahoo, or Facebook) into your site can simplify logging in for your users. Google, Yahoo, Facebook, and other web platforms host information for users and they also provide access to their existing user communities. Reusing these communities on your website can increase acceptance of your business or services. There are multiple approaches to creating a relationship between an identity provider and a service provider (HCL Digital Experience). HCL Portal uses OpenID and OAuth to integrate a relationship to an identity provider. OpenID provides a method of decentralized user management where users can select an identity provider to host their profile information, including user ID and password. Google and Yahoo are known identity providers that use OpenID specifications. Facebook uses OAuth. HCL Portal requires that a trusted relationship exists between the identity provider and IBM\u00ae WebSphere\u00ae Application Server. Therefore, WebSphere Application Server provides a plug-in point, called a trust association interceptor (TAI), designed to create a trust based on the identity provider information. HCL Portal provides a new implementation of this plug-in point that handles the communication between the identity provider and HCL Portal as the service provider. HCL Portal trusts the identity provider and grants the user entrance. There are two options to integrate external users into the HCL Portal environment: You can require an existing binding between a local portal account and a remote identity provider account. This option provides you with the possibility to request additional validation from the users and to have internal accounts for the users. The binding is stored in a user attribute, which requires a writable user repository. You can give all users of an identity provider account access to your portal environment as an identified user. If you grant special access rights to these users, they do not need to register individually with HCL Portal. This option requires fewer steps for your business users. Complete the following tasks to configure the identity providers that are appropriate for your business requirements.","title":"Integrating with OpenID authentication"},{"location":"security/use_openid/#integrating-with-openid-authentication","text":"Web applications provide information and services to public users and personalized information and services to authenticated users. Users often work with multiple web applications, which require multiple IDs and passwords. This requirement can be difficult to maintain. Integrating identity providers (Google, Yahoo, or Facebook) into your site can simplify logging in for your users. Google, Yahoo, Facebook, and other web platforms host information for users and they also provide access to their existing user communities. Reusing these communities on your website can increase acceptance of your business or services. There are multiple approaches to creating a relationship between an identity provider and a service provider (HCL Digital Experience). HCL Portal uses OpenID and OAuth to integrate a relationship to an identity provider. OpenID provides a method of decentralized user management where users can select an identity provider to host their profile information, including user ID and password. Google and Yahoo are known identity providers that use OpenID specifications. Facebook uses OAuth. HCL Portal requires that a trusted relationship exists between the identity provider and IBM\u00ae WebSphere\u00ae Application Server. Therefore, WebSphere Application Server provides a plug-in point, called a trust association interceptor (TAI), designed to create a trust based on the identity provider information. HCL Portal provides a new implementation of this plug-in point that handles the communication between the identity provider and HCL Portal as the service provider. HCL Portal trusts the identity provider and grants the user entrance. There are two options to integrate external users into the HCL Portal environment: You can require an existing binding between a local portal account and a remote identity provider account. This option provides you with the possibility to request additional validation from the users and to have internal accounts for the users. The binding is stored in a user attribute, which requires a writable user repository. You can give all users of an identity provider account access to your portal environment as an identified user. If you grant special access rights to these users, they do not need to register individually with HCL Portal. This option requires fewer steps for your business users. Complete the following tasks to configure the identity providers that are appropriate for your business requirements.","title":"Integrating with OpenID authentication"},{"location":"trouble/cw_create_addnode/","text":"Troubleshooting: Create an additional cluster node Adding a node to a cluster is part of setting up a clustered environment. If you encounter a failure during the configuration process, determine whether you can run the step again, skip the step, or if you must clean up the step. For some failed steps, learn how to correct the issue and recover from the failure. Each potential step in the configuration is included. Because the steps vary depending on your selections, the steps are not numbered. Find the step that failed to learn more about correcting and recovering from the failure. If you need to change a value that you entered in the wizard, then you must run the configuration again. Tip: If you must go through the wizard again, download the wizard selections that you made to save time. Then, cancel the configuration. Start the process over and upload your saved selections. Correct or enter values for the parameters that caused the failure. Manual Step: Install profile templates Manual step errors occur outside the context of the wizard. Actions Notes Run the step again Not applicable Skip the step If you successfully completed the step before, then skip this step. Clean up step None required Manual Step: Install portal binary files on the server where you plan to add a node to your cluster Manual step errors occur outside the context of the wizard. Actions Notes Run the step again Not applicable Skip the step If you successfully completed the step before, then skip this step. Clean up step None required Manual Step: Copy the database drivers from the primary node to the additional node Manual step errors occur outside the context of the wizard. Actions Notes Run the step again Not applicable Skip the step If you successfully completed the step before, then skip this step. Clean up step None required Manual Step: Verify that the portal node and deployment manager system clocks are within 5 minutes of each other Manual step errors occur outside the context of the wizard. Actions Notes Run the step again Not applicable Skip the step If you successfully completed the step before, then skip this step. Clean up step None required Create the profile for the secondary portal node If the step fails, see the logs for the manageprofiles command to determine why the step failed. The wizard uses the portal profile templates to create the deployment manager profile. An error might result from a problem with the profile templates. The error message in the log provides more information. The log files are in the app_server_root/logs/manageprofiles directory. Use the following table for manual instructions on recovering from a failure. If you prefer to use the Configuration Wizard option, Remove the HCL Portal profile , to remove the profile in the event of a failure, go to More options > Remove the HCL Portal profile and remove the profile. When the profile is removed successfully, you can run the Create an Additional Cluster Node configuration again. Actions Notes Run the step again Run the step again, if it did not complete successfully before. Skip the step If this step was successful, you can skip it if you run the configuration process again. Clean up step If an unrecoverable error occurs and the create deployment manager profile step fails, remove the profile. 1. Use the manageprofiles command to remove the profile. The command file is in the app_server_root/bin directory. The command file is a script that is named manageprofiles.sh|bat. Example: ``` /opt/IBM/WebSphere/AppServer/bin/manageprofiles.sh -delete -profileName dmgr01 ``` Delete the profile directory. Then, run the Create an Additional Cluster Node again. | Federate the node If this step fails see the addNode.log to determine why the step failed. In most cases, you can correct the error condition and run the step again. You do not have to cancel or reset the configuration steps. The log is in the /wp_profile/logs directory Actions Notes Run the step again If the step did not complete successfully during the previous configuration, run it again. Skip the step If you successfully completed the step before, then skip this step. Clean up step Based on where the step failed during the addNode task, you might need to remove the node and run the step again. Run the removeNode command from the wp_profile/bin directory. Example: wp_profile/bin/removeNode.sh | Configure the dynamic cluster node If this step fails, click View Results to see the applicable section of the ConfigTrace.log. Actions Notes Run the step again You can run this step repeatedly without causing harm. Skip the step If you successfully completed the step before, then skip this step. Clean up step None required Add a secondary node to the cluster Actions Notes Run the step again You can run this step repeatedly without causing harm. Skip the step If you successfully completed the step before, then skip this step. Clean up step None required Start the portal server Actions Notes Run the step again You can run this step repeatedly without causing harm. Skip the step Not applicable Clean up step None required","title":"Troubleshooting: Create an additional cluster node"},{"location":"trouble/cw_create_addnode/#troubleshooting-create-an-additional-cluster-node","text":"Adding a node to a cluster is part of setting up a clustered environment. If you encounter a failure during the configuration process, determine whether you can run the step again, skip the step, or if you must clean up the step. For some failed steps, learn how to correct the issue and recover from the failure. Each potential step in the configuration is included. Because the steps vary depending on your selections, the steps are not numbered. Find the step that failed to learn more about correcting and recovering from the failure. If you need to change a value that you entered in the wizard, then you must run the configuration again. Tip: If you must go through the wizard again, download the wizard selections that you made to save time. Then, cancel the configuration. Start the process over and upload your saved selections. Correct or enter values for the parameters that caused the failure.","title":"Troubleshooting: Create an additional cluster node"},{"location":"trouble/cw_create_addnode/#manual-step-install-profile-templates","text":"Manual step errors occur outside the context of the wizard. Actions Notes Run the step again Not applicable Skip the step If you successfully completed the step before, then skip this step. Clean up step None required","title":"Manual Step: Install profile templates"},{"location":"trouble/cw_create_addnode/#manual-step-install-portal-binary-files-on-the-server-where-you-plan-to-add-a-node-to-your-cluster","text":"Manual step errors occur outside the context of the wizard. Actions Notes Run the step again Not applicable Skip the step If you successfully completed the step before, then skip this step. Clean up step None required","title":"Manual Step: Install portal binary files on the server where you plan to add a node to your cluster"},{"location":"trouble/cw_create_addnode/#manual-step-copy-the-database-drivers-from-the-primary-node-to-the-additional-node","text":"Manual step errors occur outside the context of the wizard. Actions Notes Run the step again Not applicable Skip the step If you successfully completed the step before, then skip this step. Clean up step None required","title":"Manual Step: Copy the database drivers from the primary node to the additional node"},{"location":"trouble/cw_create_addnode/#manual-step-verify-that-the-portal-node-and-deployment-manager-system-clocks-are-within-5-minutes-of-each-other","text":"Manual step errors occur outside the context of the wizard. Actions Notes Run the step again Not applicable Skip the step If you successfully completed the step before, then skip this step. Clean up step None required","title":"Manual Step: Verify that the portal node and deployment manager system clocks are within 5 minutes of each other"},{"location":"trouble/cw_create_addnode/#create-the-profile-for-the-secondary-portal-node","text":"If the step fails, see the logs for the manageprofiles command to determine why the step failed. The wizard uses the portal profile templates to create the deployment manager profile. An error might result from a problem with the profile templates. The error message in the log provides more information. The log files are in the app_server_root/logs/manageprofiles directory. Use the following table for manual instructions on recovering from a failure. If you prefer to use the Configuration Wizard option, Remove the HCL Portal profile , to remove the profile in the event of a failure, go to More options > Remove the HCL Portal profile and remove the profile. When the profile is removed successfully, you can run the Create an Additional Cluster Node configuration again. Actions Notes Run the step again Run the step again, if it did not complete successfully before. Skip the step If this step was successful, you can skip it if you run the configuration process again. Clean up step If an unrecoverable error occurs and the create deployment manager profile step fails, remove the profile. 1. Use the manageprofiles command to remove the profile. The command file is in the app_server_root/bin directory. The command file is a script that is named manageprofiles.sh|bat. Example: ``` /opt/IBM/WebSphere/AppServer/bin/manageprofiles.sh -delete -profileName dmgr01 ``` Delete the profile directory. Then, run the Create an Additional Cluster Node again. |","title":"Create the profile for the secondary portal node"},{"location":"trouble/cw_create_addnode/#federate-the-node","text":"If this step fails see the addNode.log to determine why the step failed. In most cases, you can correct the error condition and run the step again. You do not have to cancel or reset the configuration steps. The log is in the /wp_profile/logs directory Actions Notes Run the step again If the step did not complete successfully during the previous configuration, run it again. Skip the step If you successfully completed the step before, then skip this step. Clean up step Based on where the step failed during the addNode task, you might need to remove the node and run the step again. Run the removeNode command from the wp_profile/bin directory. Example: wp_profile/bin/removeNode.sh |","title":"Federate the node"},{"location":"trouble/cw_create_addnode/#configure-the-dynamic-cluster-node","text":"If this step fails, click View Results to see the applicable section of the ConfigTrace.log. Actions Notes Run the step again You can run this step repeatedly without causing harm. Skip the step If you successfully completed the step before, then skip this step. Clean up step None required","title":"Configure the dynamic cluster node"},{"location":"trouble/cw_create_addnode/#add-a-secondary-node-to-the-cluster","text":"Actions Notes Run the step again You can run this step repeatedly without causing harm. Skip the step If you successfully completed the step before, then skip this step. Clean up step None required","title":"Add a secondary node to the cluster"},{"location":"trouble/cw_create_addnode/#start-the-portal-server","text":"Actions Notes Run the step again You can run this step repeatedly without causing harm. Skip the step Not applicable Clean up step None required","title":"Start the portal server"},{"location":"trouble/cw_create_cluster/","text":"Troubleshooting: Create a cluster option Creating a cluster is part of setting up a clustered environment.If you encounter a failure during the configuration process, determine whether you can run the step again, skip the step, or if you must clean up the step. For some failed steps, learn how to correct the issue and recover from the failure. Each potential step in the configuration is included. Because the steps vary depending on your selections, the steps are not numbered. Find the step that failed to learn more about correcting and recovering from the failure. If you need to change a value that you entered in the wizard, then you must run the configuration again. Tip: If you must go through the wizard again, download the wizard selections that you made to save time. Then, cancel the configuration. Start the process over and upload your saved selections. Correct or enter values for the parameters that caused the failure. Manual Step: Verify that the portal node and deployment manager system clocks are within 5 minutes of each other Manual step errors occur outside the context of the wizard. Actions Notes Run the step again Not applicable Skip the step If you successfully completed the step before, then skip this step. Clean up step None required Federate the node When you federate the node, it becomes a managed node in the deployment manager cell. If this step fails see the addNode.log to determine why the step failed. In most cases, you can correct the error condition and run the step again. You do not have to cancel or reset the configuration steps. The log is in the /wp_profile/logs directory Actions Notes Run the step again If the step did not complete successfully during the previous configuration, run it again. Skip the step If you successfully completed the step before, then skip this step. Clean up step Based on where the step failed during the addNode task, you might need to remove the node and run the step again. Run the removeNode command from the wp_profile/bin directory. Example: wp_profile/bin/removeNode.sh | Configure the dynamic cluster node Applies to dynamic clusters only. Actions Notes Run the step again You can run this step repeatedly without causing harm. Skip the step If you successfully completed the step before, then skip this step. Clean up step None required Prepare the node for clustering If this step fails, click View Results to see the applicable section of the ConfigTrace.log. Actions Notes Run the step again You can run this step repeatedly without causing harm. Skip the step If you successfully completed the step before, then skip this step. Clean up step None required Complete the cluster setup Actions Notes Run the step again You can run this step repeatedly without causing harm. Skip the step If you successfully completed the step before, then skip this step. Clean up step None required","title":"Troubleshooting: Create a cluster option"},{"location":"trouble/cw_create_cluster/#troubleshooting-create-a-cluster-option","text":"Creating a cluster is part of setting up a clustered environment.If you encounter a failure during the configuration process, determine whether you can run the step again, skip the step, or if you must clean up the step. For some failed steps, learn how to correct the issue and recover from the failure. Each potential step in the configuration is included. Because the steps vary depending on your selections, the steps are not numbered. Find the step that failed to learn more about correcting and recovering from the failure. If you need to change a value that you entered in the wizard, then you must run the configuration again. Tip: If you must go through the wizard again, download the wizard selections that you made to save time. Then, cancel the configuration. Start the process over and upload your saved selections. Correct or enter values for the parameters that caused the failure.","title":"Troubleshooting: Create a cluster option"},{"location":"trouble/cw_create_cluster/#manual-step-verify-that-the-portal-node-and-deployment-manager-system-clocks-are-within-5-minutes-of-each-other","text":"Manual step errors occur outside the context of the wizard. Actions Notes Run the step again Not applicable Skip the step If you successfully completed the step before, then skip this step. Clean up step None required","title":"Manual Step: Verify that the portal node and deployment manager system clocks are within 5 minutes of each other"},{"location":"trouble/cw_create_cluster/#federate-the-node","text":"When you federate the node, it becomes a managed node in the deployment manager cell. If this step fails see the addNode.log to determine why the step failed. In most cases, you can correct the error condition and run the step again. You do not have to cancel or reset the configuration steps. The log is in the /wp_profile/logs directory Actions Notes Run the step again If the step did not complete successfully during the previous configuration, run it again. Skip the step If you successfully completed the step before, then skip this step. Clean up step Based on where the step failed during the addNode task, you might need to remove the node and run the step again. Run the removeNode command from the wp_profile/bin directory. Example: wp_profile/bin/removeNode.sh |","title":"Federate the node"},{"location":"trouble/cw_create_cluster/#configure-the-dynamic-cluster-node","text":"Applies to dynamic clusters only. Actions Notes Run the step again You can run this step repeatedly without causing harm. Skip the step If you successfully completed the step before, then skip this step. Clean up step None required","title":"Configure the dynamic cluster node"},{"location":"trouble/cw_create_cluster/#prepare-the-node-for-clustering","text":"If this step fails, click View Results to see the applicable section of the ConfigTrace.log. Actions Notes Run the step again You can run this step repeatedly without causing harm. Skip the step If you successfully completed the step before, then skip this step. Clean up step None required","title":"Prepare the node for clustering"},{"location":"trouble/cw_create_cluster/#complete-the-cluster-setup","text":"Actions Notes Run the step again You can run this step repeatedly without causing harm. Skip the step If you successfully completed the step before, then skip this step. Clean up step None required","title":"Complete the cluster setup"},{"location":"trouble/cw_create_dmgr/","text":"Troubleshooting: Create a deployment manager Create a deployment manager for clustered environments. If you encounter a failure during the configuration process, determine whether you can run the step again, skip the step, or if you must clean up the step. For some failed steps, learn how to correct the issue and recover from the failure. Each potential step in the configuration is included. Because the steps vary depending on your selections, the steps are not numbered. Find the step that failed to learn more about correcting and recovering from the failure. If you need to change a value that you entered in the wizard, then you must run the configuration again. Tip: If you must go through the wizard again, download the wizard selections that you made to save time. Then, cancel the configuration. Start the process over and upload your saved selections. Correct or enter values for the parameters that caused the failure. Manual Step: Install the deployment manager software This is a manual step; any errors that occur are outside the context of the wizard. Actions Notes Run the step again Not applicable Skip the step If you successfully completed the step before, then skip this step. Clean up step None required Create the deployment manager profile If the step fails, see the logs for the manageprofiles command to determine why the step failed. The wizard uses the portal profile templates to create the deployment manager profile. An error might result from a problem with the profile templates. The error message in the log provides more information. The log files are in the app_server_root/logs/manageprofiles directory. Actions Notes Run the step again Run the step again, if it did not complete successfully before. Skip the step If this step was successful, you can skip it if you run the configuration process again. Clean up step If an unrecoverable error occurs and the create deployment manager profile step fails, remove the profile. 1. Use the manageprofiles command to remove the profile. The command file is in the app_server_root/bin directory. The command file is a script that is named manageprofiles.sh|bat. Example: ``` /opt/IBM/WebSphere/AppServer/bin/manageprofiles.sh -delete -profileName dmgr01 ``` Delete the profile directory. Then, run the Create a Deployment Manager Profile step again. | Start the deployment manager server If the step fails, check the systemout.log for the deployment manager. The log file is in the dmgr_profile/log/dmgr01 directory. Actions Notes Run the step again Run this step again if the deployment manager is not running. Skip the step Do not skip this step if the deployment manager is not running. You cannot successfully run the step to augment the profile unless the deployment manager is running. Clean up step None required Augment the deployment manager profile with the portal profile template If the step fails, see the logs for the manageprofiles command to determine why the step failed. The wizard uses the portal profile templates to create the deployment manager profile. An error might result from a problem with the profile templates. The error message in the log provides more information. The log files are in the app_server_root/logs/manageprofiles directory. Actions Notes Run the step again Run the step again, if it did not complete successfully before. Skip the step If you successfully completed the step before, then skip this step. Clean up step If an unrecoverable error occurs and the augment deployment manager profile step fails, remove the profile. 1. Use the manageprofiles command to remove the profile. The command file is in the app_server_root/bin directory. The command file is a script that is named manageprofiles.sh|bat. Example: ``` /opt/IBM/WebSphere/AppServer/bin/manageprofiles.sh -delete -profileName dmgr01 ``` Delete the profile directory. Then, run the Create a Deployment Manger Profile step again. | Stop the deployment manager If the step fails, check the systemout.log for the deployment manager. The log file is in the dmgr_profile/log/dmgr01 directory. Actions Notes Run the step again You can run this step again. Skip the step Do not skip this step. Clean up step None required Start the deployment manager after the profile augmentation is complete If the step fails, check the systemout.log for the deployment manager. The log file is in the dmgr_profile/log/dmgr01 directory. Actions Notes Run the step again You can run this step again. Skip the step Do not skip this step. Clean up step None required","title":"Troubleshooting: Create a deployment manager"},{"location":"trouble/cw_create_dmgr/#troubleshooting-create-a-deployment-manager","text":"Create a deployment manager for clustered environments. If you encounter a failure during the configuration process, determine whether you can run the step again, skip the step, or if you must clean up the step. For some failed steps, learn how to correct the issue and recover from the failure. Each potential step in the configuration is included. Because the steps vary depending on your selections, the steps are not numbered. Find the step that failed to learn more about correcting and recovering from the failure. If you need to change a value that you entered in the wizard, then you must run the configuration again. Tip: If you must go through the wizard again, download the wizard selections that you made to save time. Then, cancel the configuration. Start the process over and upload your saved selections. Correct or enter values for the parameters that caused the failure.","title":"Troubleshooting: Create a deployment manager"},{"location":"trouble/cw_create_dmgr/#manual-step-install-the-deployment-manager-software","text":"This is a manual step; any errors that occur are outside the context of the wizard. Actions Notes Run the step again Not applicable Skip the step If you successfully completed the step before, then skip this step. Clean up step None required","title":"Manual Step: Install the deployment manager software"},{"location":"trouble/cw_create_dmgr/#create-the-deployment-manager-profile","text":"If the step fails, see the logs for the manageprofiles command to determine why the step failed. The wizard uses the portal profile templates to create the deployment manager profile. An error might result from a problem with the profile templates. The error message in the log provides more information. The log files are in the app_server_root/logs/manageprofiles directory. Actions Notes Run the step again Run the step again, if it did not complete successfully before. Skip the step If this step was successful, you can skip it if you run the configuration process again. Clean up step If an unrecoverable error occurs and the create deployment manager profile step fails, remove the profile. 1. Use the manageprofiles command to remove the profile. The command file is in the app_server_root/bin directory. The command file is a script that is named manageprofiles.sh|bat. Example: ``` /opt/IBM/WebSphere/AppServer/bin/manageprofiles.sh -delete -profileName dmgr01 ``` Delete the profile directory. Then, run the Create a Deployment Manager Profile step again. |","title":"Create the deployment manager profile"},{"location":"trouble/cw_create_dmgr/#start-the-deployment-manager-server","text":"If the step fails, check the systemout.log for the deployment manager. The log file is in the dmgr_profile/log/dmgr01 directory. Actions Notes Run the step again Run this step again if the deployment manager is not running. Skip the step Do not skip this step if the deployment manager is not running. You cannot successfully run the step to augment the profile unless the deployment manager is running. Clean up step None required","title":"Start the deployment manager server"},{"location":"trouble/cw_create_dmgr/#augment-the-deployment-manager-profile-with-the-portal-profile-template","text":"If the step fails, see the logs for the manageprofiles command to determine why the step failed. The wizard uses the portal profile templates to create the deployment manager profile. An error might result from a problem with the profile templates. The error message in the log provides more information. The log files are in the app_server_root/logs/manageprofiles directory. Actions Notes Run the step again Run the step again, if it did not complete successfully before. Skip the step If you successfully completed the step before, then skip this step. Clean up step If an unrecoverable error occurs and the augment deployment manager profile step fails, remove the profile. 1. Use the manageprofiles command to remove the profile. The command file is in the app_server_root/bin directory. The command file is a script that is named manageprofiles.sh|bat. Example: ``` /opt/IBM/WebSphere/AppServer/bin/manageprofiles.sh -delete -profileName dmgr01 ``` Delete the profile directory. Then, run the Create a Deployment Manger Profile step again. |","title":"Augment the deployment manager profile with the portal profile template"},{"location":"trouble/cw_create_dmgr/#stop-the-deployment-manager","text":"If the step fails, check the systemout.log for the deployment manager. The log file is in the dmgr_profile/log/dmgr01 directory. Actions Notes Run the step again You can run this step again. Skip the step Do not skip this step. Clean up step None required","title":"Stop the deployment manager"},{"location":"trouble/cw_create_dmgr/#start-the-deployment-manager-after-the-profile-augmentation-is-complete","text":"If the step fails, check the systemout.log for the deployment manager. The log file is in the dmgr_profile/log/dmgr01 directory. Actions Notes Run the step again You can run this step again. Skip the step Do not skip this step. Clean up step None required","title":"Start the deployment manager after the profile augmentation is complete"},{"location":"trouble/cw_dbtransfer_trouble/","text":"Troubleshooting: Database Transfer Database transfer is part of setting up a stand-alone and cluster server topologies. Learn how to troubleshoot each step in your configuration for your target database.","title":"Troubleshooting: Database Transfer"},{"location":"trouble/cw_dbtransfer_trouble/#troubleshooting-database-transfer","text":"Database transfer is part of setting up a stand-alone and cluster server topologies. Learn how to troubleshoot each step in your configuration for your target database.","title":"Troubleshooting: Database Transfer"},{"location":"trouble/cw_ldap/","text":"Troubleshooting: Enable federated security option Enabling federated security is part of many environment setups. If you encounter a failure during the configuration process, determine whether you can run the step again, skip the step, or if you must clean up the step. For some failed steps, learn how to correct the issue and recover from the failure. Each potential step in the configuration is included. Because the steps vary depending on your selections, the steps are not numbered. Find the step that failed to learn more about correcting and recovering from the failure. If you need to change a value that you entered in the wizard, then you must run the configuration again. Tip: If you must go through the wizard again, download the wizard selections that you made to save time. Then, cancel the configuration. Start the process over and upload your saved selections. Correct or enter values for the parameters that caused the failure. Attention: The Enable Federated Security option modifies the wimconfig.xml file. Make a backup copy of this file before you run any of the configuration tasks. [wp\\_profile\\_root](../reference/wpsdirstr.md#wp_profile_root)/config/cells/CellName/wim/config/wimconfig.xml Manual Step: Retrieve the SSL certificate from the SSL port Actions Notes Run the step again Not applicable Skip the step Yes, if you completed this manual step successfully, you can skip the step in subsequent configuration attempts Clean up step None required Create a backup of the HCL Portal profile before modifying cell security Actions Notes Run step again You can run the step repeatedly without causing any harm. Skip step If this step is successful, you can skip it if you run the configuration process again. Clean up step None required Validate your LDAP server settings During this step, the wizard attempts to connect to your LDAP server and authenticate by using the provided credentials and LDAP information. Actions Notes Run step again You can run the step repeatedly without causing any harm. Skip step If this step is successful, you can skip it if you run the configuration process again. Clean up step None required Verify that the values used to connect with the LDAP were entered correctly. Click View Step Command to see which values are used. Add an LDAP user registry to the default federated repository During this step, the wizard attempts to add your LDAP to the federated repository. This step uses the same parameters as the step that validates the LDAP server settings. Actions Notes Run step again You can run the step repeatedly without causing any harm. Skip step If this step is successful, you can skip it if you run the configuration process again. Clean up step Complete the following steps from the WebSphere\u00ae Integrated Solutions Console to remove the configured repository:1. Go to Security > Global Security > Configure . 2. Remove the repository from the realm. 3. Go to Manage repositories and delete the repository configuration. | Register the WebSphere Application Server scheduler tasks Actions Notes Run step again You can run this step again after you clean up the issue. Skip step If this step is successful, you can skip it if you run the configuration process again. Clean up step Log in to the WebSphere Integrated Solutions Console. Go to Resources > Schedulers and delete the WPSTaskScheduler .If this task fails because of the administrator ID, change the federated.ldap.bindDN and optionally the newAdminId value. These values must be unique. Then, rerun this task. If this action does not resolve the issue, run the wp-change-portal-admin-user and wp-change-was-admin-user tasks. These tasks change the PortalAdminId and WasUserId so that the file system administrators are different from the LDAP users. | Replace the file-based HCL Portal and WebSphere Application Server users and groups with users and groups from your LDAP server During this step, the wizard attempts to configure the portal to use the administrative user and user group that is stored in your LDAP server. The administrative ID and group must exist in your LDAP server. If the ID and group do not exist, create them and try the step again. Actions Notes Run step again You can run the step repeatedly without causing any harm. Skip step If this step is successful, you can skip it if you run the configuration process again. Clean up step You can log in to the WebSphere Integrated Solutions Console. However, the portal administrative user does not work as expected. You do not need to deactivate security with the file-based repository.If the WebSphere Application Server administrative user is not functional, it is likely that the WebSphere Integrated Solutions Console is not accessible. If you cannot log in to the WebSphere Integrated Solutions Console, disable security in the security.xml file in the wp_profile_root /config/cells/cellname directory. Restart WebSphere Application Server and log in. Then, complete the following steps: Go to Users and Groups > Administrative user roles . Validate the current administrative user ID or set a new user. Go to Resources > Resource Environment > Resource Environment Providers > WP AccessControlDataManagementService > Custom properties . Validate the values for the administrative users and groups of the different domains. If necessary, update the values to a valid user. Valid users: To find valid users, go to Users and Groups > Manage Users to search for valid users. | Update the user registry where new users and groups are stored Actions Notes Run step again You can run the step repeatedly without causing any harm. Skip step If the current user repository is correct for new users and groups, you can skip this step. Clean up step Complete the following steps from the WebSphere Integrated Solutions Console to change the repository:1. Go to Security > Global Security > Federated repositories > Supported entity types . 2. Click one of the following options to edit the Base Entry for the Default Parent to the specific Base Entry for your target repository: - Group - OrgContainer - PersonAccount | Recycle the servers after a security change During this step, the wizard stops and starts the portal server. Actions Notes Run step again Yes, run this step again under the following conditions. - If this step fails, run the step again. - If you are running the configuration again. | |Skip step|If you are running the configuration again, you can skip this step only if you skipped all the previous steps.| |Clean up step|None required| Update the search administration user The wizard updates the user ID that is used to manage the search collections. Actions Notes Run step again Yes, run this step again under the following conditions. If this step fails, run the step again. If you are running the configuration again. | |Skip step|If you are running the configuration again, you can skip this step only if you skipped all the previous steps.| |Clean up step|Log in to the WebSphere Integrated Solutions Console. Go to Security > Global security > Java Authentication and Authorization Service > J2C authentication data . Change the user ID and password for the SearchAdminUser and the alias.| After you change the security model, the servers need to be restarted During this step, the wizard stops and starts the portal server. Actions Notes Run step again Yes, run this step again under the following conditions. - If this step fails, run the step again. - If you are running the configuration again. | |Skip step|If you are running the configuration again, you can skip this step only if you skipped all the previous steps.| |Clean up step|None required| Verify that all defined attributes are available in the configured LDAP user registry Actions Notes Run step again Yes, run this step again under the following conditions: - If this step fails, run the step again. - If you are running the configuration again. | |Skip step|If you are running the configuration again, you can skip this step if both of the following conditions are true: - The step completed successfully before - You did not change any attributes when you corrected other failures | |Clean up step|None required| Manual Step: Update the appropriate MemberFixerModule.properties file with the values for your LDAP users Actions Notes Run step again Not applicable Skip step Yes, if you previously modified the properties file, you can skip this step. Clean up step None required Run the member fixer tool During this step, the wizard runs the member fixer tool to clean up the entries in the portal server. Actions Notes Run step again Yes, run this step again under the following conditions. - If this step fails, run the step again. - If you are running the configuration again. | |Skip step|If you are running the configuration again, you can skip this step only if you skipped all the previous steps.| |Clean up step|None required| Manual Step: Map attributes to ensure proper communication between HCL Portal and the LDAP server Actions Notes Run step again Not applicable Skip step If you successfully completed the step before, then skip this step. Clean up step None required","title":"Troubleshooting: Enable federated security option"},{"location":"trouble/cw_ldap/#troubleshooting-enable-federated-security-option","text":"Enabling federated security is part of many environment setups. If you encounter a failure during the configuration process, determine whether you can run the step again, skip the step, or if you must clean up the step. For some failed steps, learn how to correct the issue and recover from the failure. Each potential step in the configuration is included. Because the steps vary depending on your selections, the steps are not numbered. Find the step that failed to learn more about correcting and recovering from the failure. If you need to change a value that you entered in the wizard, then you must run the configuration again. Tip: If you must go through the wizard again, download the wizard selections that you made to save time. Then, cancel the configuration. Start the process over and upload your saved selections. Correct or enter values for the parameters that caused the failure. Attention: The Enable Federated Security option modifies the wimconfig.xml file. Make a backup copy of this file before you run any of the configuration tasks. [wp\\_profile\\_root](../reference/wpsdirstr.md#wp_profile_root)/config/cells/CellName/wim/config/wimconfig.xml","title":"Troubleshooting: Enable federated security option"},{"location":"trouble/cw_ldap/#manual-step-retrieve-the-ssl-certificate-from-the-ssl-port","text":"Actions Notes Run the step again Not applicable Skip the step Yes, if you completed this manual step successfully, you can skip the step in subsequent configuration attempts Clean up step None required","title":"Manual Step: Retrieve the SSL certificate from the SSL port"},{"location":"trouble/cw_ldap/#create-a-backup-of-the-hcl-portal-profile-before-modifying-cell-security","text":"Actions Notes Run step again You can run the step repeatedly without causing any harm. Skip step If this step is successful, you can skip it if you run the configuration process again. Clean up step None required","title":"Create a backup of the HCL Portal profile before modifying cell security"},{"location":"trouble/cw_ldap/#validate-your-ldap-server-settings","text":"During this step, the wizard attempts to connect to your LDAP server and authenticate by using the provided credentials and LDAP information. Actions Notes Run step again You can run the step repeatedly without causing any harm. Skip step If this step is successful, you can skip it if you run the configuration process again. Clean up step None required Verify that the values used to connect with the LDAP were entered correctly. Click View Step Command to see which values are used.","title":"Validate your LDAP server settings"},{"location":"trouble/cw_ldap/#add-an-ldap-user-registry-to-the-default-federated-repository","text":"During this step, the wizard attempts to add your LDAP to the federated repository. This step uses the same parameters as the step that validates the LDAP server settings. Actions Notes Run step again You can run the step repeatedly without causing any harm. Skip step If this step is successful, you can skip it if you run the configuration process again. Clean up step Complete the following steps from the WebSphere\u00ae Integrated Solutions Console to remove the configured repository:1. Go to Security > Global Security > Configure . 2. Remove the repository from the realm. 3. Go to Manage repositories and delete the repository configuration. |","title":"Add an LDAP user registry to the default federated repository"},{"location":"trouble/cw_ldap/#register-the-websphere-application-server-scheduler-tasks","text":"Actions Notes Run step again You can run this step again after you clean up the issue. Skip step If this step is successful, you can skip it if you run the configuration process again. Clean up step Log in to the WebSphere Integrated Solutions Console. Go to Resources > Schedulers and delete the WPSTaskScheduler .If this task fails because of the administrator ID, change the federated.ldap.bindDN and optionally the newAdminId value. These values must be unique. Then, rerun this task. If this action does not resolve the issue, run the wp-change-portal-admin-user and wp-change-was-admin-user tasks. These tasks change the PortalAdminId and WasUserId so that the file system administrators are different from the LDAP users. |","title":"Register the WebSphere Application Server scheduler tasks"},{"location":"trouble/cw_ldap/#replace-the-file-based-hcl-portal-and-websphere-application-server-users-and-groups-with-users-and-groups-from-your-ldap-server","text":"During this step, the wizard attempts to configure the portal to use the administrative user and user group that is stored in your LDAP server. The administrative ID and group must exist in your LDAP server. If the ID and group do not exist, create them and try the step again. Actions Notes Run step again You can run the step repeatedly without causing any harm. Skip step If this step is successful, you can skip it if you run the configuration process again. Clean up step You can log in to the WebSphere Integrated Solutions Console. However, the portal administrative user does not work as expected. You do not need to deactivate security with the file-based repository.If the WebSphere Application Server administrative user is not functional, it is likely that the WebSphere Integrated Solutions Console is not accessible. If you cannot log in to the WebSphere Integrated Solutions Console, disable security in the security.xml file in the wp_profile_root /config/cells/cellname directory. Restart WebSphere Application Server and log in. Then, complete the following steps: Go to Users and Groups > Administrative user roles . Validate the current administrative user ID or set a new user. Go to Resources > Resource Environment > Resource Environment Providers > WP AccessControlDataManagementService > Custom properties . Validate the values for the administrative users and groups of the different domains. If necessary, update the values to a valid user. Valid users: To find valid users, go to Users and Groups > Manage Users to search for valid users. |","title":"Replace the file-based HCL Portal and WebSphere Application Server users and groups with users and groups from your LDAP server"},{"location":"trouble/cw_ldap/#update-the-user-registry-where-new-users-and-groups-are-stored","text":"Actions Notes Run step again You can run the step repeatedly without causing any harm. Skip step If the current user repository is correct for new users and groups, you can skip this step. Clean up step Complete the following steps from the WebSphere Integrated Solutions Console to change the repository:1. Go to Security > Global Security > Federated repositories > Supported entity types . 2. Click one of the following options to edit the Base Entry for the Default Parent to the specific Base Entry for your target repository: - Group - OrgContainer - PersonAccount |","title":"Update the user registry where new users and groups are stored"},{"location":"trouble/cw_ldap/#recycle-the-servers-after-a-security-change","text":"During this step, the wizard stops and starts the portal server. Actions Notes Run step again Yes, run this step again under the following conditions. - If this step fails, run the step again. - If you are running the configuration again. | |Skip step|If you are running the configuration again, you can skip this step only if you skipped all the previous steps.| |Clean up step|None required|","title":"Recycle the servers after a security change"},{"location":"trouble/cw_ldap/#update-the-search-administration-user","text":"The wizard updates the user ID that is used to manage the search collections. Actions Notes Run step again Yes, run this step again under the following conditions. If this step fails, run the step again. If you are running the configuration again. | |Skip step|If you are running the configuration again, you can skip this step only if you skipped all the previous steps.| |Clean up step|Log in to the WebSphere Integrated Solutions Console. Go to Security > Global security > Java Authentication and Authorization Service > J2C authentication data . Change the user ID and password for the SearchAdminUser and the alias.|","title":"Update the search administration user"},{"location":"trouble/cw_ldap/#after-you-change-the-security-model-the-servers-need-to-be-restarted","text":"During this step, the wizard stops and starts the portal server. Actions Notes Run step again Yes, run this step again under the following conditions. - If this step fails, run the step again. - If you are running the configuration again. | |Skip step|If you are running the configuration again, you can skip this step only if you skipped all the previous steps.| |Clean up step|None required|","title":"After you change the security model, the servers need to be restarted"},{"location":"trouble/cw_ldap/#verify-that-all-defined-attributes-are-available-in-the-configured-ldap-user-registry","text":"Actions Notes Run step again Yes, run this step again under the following conditions: - If this step fails, run the step again. - If you are running the configuration again. | |Skip step|If you are running the configuration again, you can skip this step if both of the following conditions are true: - The step completed successfully before - You did not change any attributes when you corrected other failures | |Clean up step|None required|","title":"Verify that all defined attributes are available in the configured LDAP user registry"},{"location":"trouble/cw_ldap/#manual-step-update-the-appropriate-memberfixermoduleproperties-file-with-the-values-for-your-ldap-users","text":"Actions Notes Run step again Not applicable Skip step Yes, if you previously modified the properties file, you can skip this step. Clean up step None required","title":"Manual Step: Update the appropriate MemberFixerModule.properties file with the values for your LDAP users"},{"location":"trouble/cw_ldap/#run-the-member-fixer-tool","text":"During this step, the wizard runs the member fixer tool to clean up the entries in the portal server. Actions Notes Run step again Yes, run this step again under the following conditions. - If this step fails, run the step again. - If you are running the configuration again. | |Skip step|If you are running the configuration again, you can skip this step only if you skipped all the previous steps.| |Clean up step|None required|","title":"Run the member fixer tool"},{"location":"trouble/cw_ldap/#manual-step-map-attributes-to-ensure-proper-communication-between-hcl-portal-and-the-ldap-server","text":"Actions Notes Run step again Not applicable Skip step If you successfully completed the step before, then skip this step. Clean up step None required","title":"Manual Step: Map attributes to ensure proper communication between HCL Portal and the LDAP server"},{"location":"trouble/cw_migrate_cluster1/","text":"Troubleshooting: Migrate the deployment manager profile for a cluster environment If you encounter a failure during the configuration process, determine whether you can run the step again, skip the step, or if you must clean up the step. For some failed steps, learn how to correct the issue and recover from the failure. Each potential step in the configuration is included. Because the steps vary depending on your selections, the steps are not numbered. Find the step that failed to learn more about correcting and recovering from the failure. If you need to change a value that you entered in the wizard, then you must run the configuration again. Tip: If you must go through the wizard again, download the wizard selections that you made to save time. Then, cancel the configuration. Start the process over and upload your saved selections. Correct or enter values for the parameters that caused the failure. Manual Step: Disable automatic synchronization on all nodes in the cluster Since this is a manual step, any error that occurs is outside the context of the wizard. Actions Notes\u00ae Run the step again You can run this step again if it was not successful. Skip the step If this step was successful, you can skip it if you run the configuration process again. Clean up step None required Manual Step: Install the latest fix packs Since this is a manual step, any error that occurs is outside the context of the wizard. Actions Notes Run the step again If this step fails, you can run this step again after you clean up the issue. Skip the step If this step was successful, you can skip it if you run the configuration process again. Clean up step If you encounter an issue when you are installing the fix, refer to the documentation for the fix. Manual Step: Install the Portal and WebSphere binary files Since this is a manual step, any error that occurs is outside the context of the wizard. Actions Notes Run the step again If this step fails, you can run this step again after you clean up the issue. Skip the step If this step was successful, do not run this step again. Clean up step Complete an uninstall of the product, and delete the remaining file structure. Then, start the configuration from the beginning. Manual Step: Copy required portal binary files to the target deployment manager Since this is a manual step, any error that occurs is outside the context of the wizard. Actions Notes Run the step again Not applicable Skip the step If this step was successful, you can skip it if you run the configuration process again. Clean up step None required Manual Step: Generate files for remote migration on the deployment manager Since this is a manual step, any error that occurs is outside the context of the wizard. Actions Notes Run the step again If this step fails, you can run this step again after you clean up the issue. Skip the step If this step was successful, you can skip it if you run the configuration process again.This step is optional. You do not need to complete this step, if the deployment manager is in the same binary as the primary node. | |Clean up step|If this step fails, review the parameters and values that you entered in the Configuration Wizard, specifically the target temporary path and the application server path.If the parameter and values that you entered are correct, and the step fails again, use the wp-collector tool to gather the files that are needed to contact support for help. See Data collection and symptom analysis for information about using the wp-collector tool. | Manual Step: Copy the remote migration package to the source environment Since this is a manual step, any error that occurs is outside the context of the wizard. Actions Notes Run the step again Not applicable Skip the step If this step was successful, you can skip it if you run the configuration process again. Clean up step None required Manual Step: Create a backup of the source deployment manager Since this is a manual step, any error that occurs is outside the context of the wizard. Actions Notes Run the step again If this step fails, you can run this step again after you clean up the issue. Skip the step If this step was successful, you can skip it if you run the configuration process again. Clean up step If this step fails, delete the path to the temporary backup profile, and run the step again. For more information about troubleshooting the WASPreUpgrade command, see the WebSphere Application Server documentation on Troubleshooting migration . IBMi only: If this step fails, remove the oldProfile parameter and run the step again. | Manual Step: Create a default deployment manager profile Since this is a manual step, any error that occurs is outside the context of the wizard. Actions Notes Run the step again If this step fails, you can run this step again after you clean up the issue. Skip the step If this step was successful, you can skip it if you run the configuration process again. Clean up step If an unrecoverable error occurs and the create default profile step fails, remove the profile. 1. Use the manageprofiles command to remove the profile. The command file is in the app_server_root/bin directory. The command file is a script that is named manageprofiles.sh|bat. Example: ``` /opt/IBM/WebSphere/AppServer/bin/manageprofiles.sh -delete -profileName profile_name ``` Delete the profile directory. Then, run the Create a default deployment manager profile step again. | Manual Step: Import the backup profile Since this is a manual step, any error that occurs is outside the context of the wizard. Actions Notes Run the step again If this step fails, you can run this step again after you clean up the issue. Skip the step Do not skip this step, if you are running the configuration again. If you re-create the default profile from the Create a default deployment manager profile step, then you must run this step again to import the new default profile. Clean up step If an unrecoverable error occurs and the import backup profile step fails, remove the profile. 1. Use the manageprofiles command to remove the profile. The command file is in the app_server_root/bin directory. The command file is a script that is named manageprofiles.sh|bat. Example: ``` /opt/IBM/WebSphere/AppServer/bin/manageprofiles.sh -delete -profileName profile_name ``` Delete the profile directory. Then, run the Create a default deployment manager profile step again before you rerun this step. | Apply the latest Combined Cumulative Fix updates to your system. Actions Notes Run the step again If this step fails, you can run this step again after you clean up the issue. Skip the step If this step was successful, you can skip it if you run the configuration process again. Clean up step If this step fails, contact support and report the error message to get assistance on how to fix this issue before you run the step again.","title":"Troubleshooting: Migrate the deployment manager profile for a cluster environment"},{"location":"trouble/cw_migrate_cluster1/#troubleshooting-migrate-the-deployment-manager-profile-for-a-cluster-environment","text":"If you encounter a failure during the configuration process, determine whether you can run the step again, skip the step, or if you must clean up the step. For some failed steps, learn how to correct the issue and recover from the failure. Each potential step in the configuration is included. Because the steps vary depending on your selections, the steps are not numbered. Find the step that failed to learn more about correcting and recovering from the failure. If you need to change a value that you entered in the wizard, then you must run the configuration again. Tip: If you must go through the wizard again, download the wizard selections that you made to save time. Then, cancel the configuration. Start the process over and upload your saved selections. Correct or enter values for the parameters that caused the failure.","title":"Troubleshooting: Migrate the deployment manager profile for a cluster environment"},{"location":"trouble/cw_migrate_cluster1/#manual-step-disable-automatic-synchronization-on-all-nodes-in-the-cluster","text":"Since this is a manual step, any error that occurs is outside the context of the wizard. Actions Notes\u00ae Run the step again You can run this step again if it was not successful. Skip the step If this step was successful, you can skip it if you run the configuration process again. Clean up step None required","title":"Manual Step: Disable automatic synchronization on all nodes in the cluster"},{"location":"trouble/cw_migrate_cluster1/#manual-step-install-the-latest-fix-packs","text":"Since this is a manual step, any error that occurs is outside the context of the wizard. Actions Notes Run the step again If this step fails, you can run this step again after you clean up the issue. Skip the step If this step was successful, you can skip it if you run the configuration process again. Clean up step If you encounter an issue when you are installing the fix, refer to the documentation for the fix.","title":"Manual Step: Install the latest fix packs"},{"location":"trouble/cw_migrate_cluster1/#manual-step-install-the-portal-and-websphere-binary-files","text":"Since this is a manual step, any error that occurs is outside the context of the wizard. Actions Notes Run the step again If this step fails, you can run this step again after you clean up the issue. Skip the step If this step was successful, do not run this step again. Clean up step Complete an uninstall of the product, and delete the remaining file structure. Then, start the configuration from the beginning.","title":"Manual Step: Install the Portal and WebSphere binary files"},{"location":"trouble/cw_migrate_cluster1/#manual-step-copy-required-portal-binary-files-to-the-target-deployment-manager","text":"Since this is a manual step, any error that occurs is outside the context of the wizard. Actions Notes Run the step again Not applicable Skip the step If this step was successful, you can skip it if you run the configuration process again. Clean up step None required","title":"Manual Step: Copy required portal binary files to the target deployment manager"},{"location":"trouble/cw_migrate_cluster1/#manual-step-generate-files-for-remote-migration-on-the-deployment-manager","text":"Since this is a manual step, any error that occurs is outside the context of the wizard. Actions Notes Run the step again If this step fails, you can run this step again after you clean up the issue. Skip the step If this step was successful, you can skip it if you run the configuration process again.This step is optional. You do not need to complete this step, if the deployment manager is in the same binary as the primary node. | |Clean up step|If this step fails, review the parameters and values that you entered in the Configuration Wizard, specifically the target temporary path and the application server path.If the parameter and values that you entered are correct, and the step fails again, use the wp-collector tool to gather the files that are needed to contact support for help. See Data collection and symptom analysis for information about using the wp-collector tool. |","title":"Manual Step: Generate files for remote migration on the deployment manager"},{"location":"trouble/cw_migrate_cluster1/#manual-step-copy-the-remote-migration-package-to-the-source-environment","text":"Since this is a manual step, any error that occurs is outside the context of the wizard. Actions Notes Run the step again Not applicable Skip the step If this step was successful, you can skip it if you run the configuration process again. Clean up step None required","title":"Manual Step: Copy the remote migration package to the source environment"},{"location":"trouble/cw_migrate_cluster1/#manual-step-create-a-backup-of-the-source-deployment-manager","text":"Since this is a manual step, any error that occurs is outside the context of the wizard. Actions Notes Run the step again If this step fails, you can run this step again after you clean up the issue. Skip the step If this step was successful, you can skip it if you run the configuration process again. Clean up step If this step fails, delete the path to the temporary backup profile, and run the step again. For more information about troubleshooting the WASPreUpgrade command, see the WebSphere Application Server documentation on Troubleshooting migration . IBMi only: If this step fails, remove the oldProfile parameter and run the step again. |","title":"Manual Step: Create a backup of the source deployment manager"},{"location":"trouble/cw_migrate_cluster1/#manual-step-create-a-default-deployment-manager-profile","text":"Since this is a manual step, any error that occurs is outside the context of the wizard. Actions Notes Run the step again If this step fails, you can run this step again after you clean up the issue. Skip the step If this step was successful, you can skip it if you run the configuration process again. Clean up step If an unrecoverable error occurs and the create default profile step fails, remove the profile. 1. Use the manageprofiles command to remove the profile. The command file is in the app_server_root/bin directory. The command file is a script that is named manageprofiles.sh|bat. Example: ``` /opt/IBM/WebSphere/AppServer/bin/manageprofiles.sh -delete -profileName profile_name ``` Delete the profile directory. Then, run the Create a default deployment manager profile step again. |","title":"Manual Step: Create a default deployment manager profile"},{"location":"trouble/cw_migrate_cluster1/#manual-step-import-the-backup-profile","text":"Since this is a manual step, any error that occurs is outside the context of the wizard. Actions Notes Run the step again If this step fails, you can run this step again after you clean up the issue. Skip the step Do not skip this step, if you are running the configuration again. If you re-create the default profile from the Create a default deployment manager profile step, then you must run this step again to import the new default profile. Clean up step If an unrecoverable error occurs and the import backup profile step fails, remove the profile. 1. Use the manageprofiles command to remove the profile. The command file is in the app_server_root/bin directory. The command file is a script that is named manageprofiles.sh|bat. Example: ``` /opt/IBM/WebSphere/AppServer/bin/manageprofiles.sh -delete -profileName profile_name ``` Delete the profile directory. Then, run the Create a default deployment manager profile step again before you rerun this step. |","title":"Manual Step: Import the backup profile"},{"location":"trouble/cw_migrate_cluster1/#apply-the-latest-combined-cumulative-fix-updates-to-your-system","text":"Actions Notes Run the step again If this step fails, you can run this step again after you clean up the issue. Skip the step If this step was successful, you can skip it if you run the configuration process again. Clean up step If this step fails, contact support and report the error message to get assistance on how to fix this issue before you run the step again.","title":"Apply the latest Combined Cumulative Fix updates to your system."},{"location":"trouble/cw_migrate_cluster2/","text":"Troubleshooting: Migrate node profiles for a cluster environment If you encounter a failure during the migration of the node profiles for a cluster environment, learn how to correct the issue and recover from the failure. Each potential step in the migrate node profiles option is included. Since the steps vary, depending on your selections, the steps are not numbered. Find the step that failed to learn more about correcting and recovering from the failure. Manual Step: Stop the source deployment manager and node agents Since this is a manual step, any error that occurs is outside the context of the wizard. Actions Notes\u00ae Run the step again You can run this step again if it was not successful. Skip the step If this step was successful, you can skip it if you run the configuration process again. Clean up step None required Manual Step: Start the target deployment manager Since this is a manual step, any error that occurs is outside the context of the wizard. Actions Notes Run the step again You can run this step again if it was not successful. Skip the step If this step was successful, you can skip it if you run the configuration process again. Clean up step None required Generate the files for remote migration Actions Notes Run the step again If this step fails, you can run this step again after you clean up the issue. Skip the step If this step was successful, you can skip it if you run the configuration process again. Clean up step If this step fails, review the parameters and values that you entered in the Configuration Wizard, specifically the target temporary path and the application server path. If the parameter and values that you entered are correct, and the step fails again, use the wp-collector tool to gather the files that are needed to contact support for help. See Data collection and symptom analysis for information about using the wp-collector tool. | Manual Step: Copy the remote migration package to the source environment Since this is a manual step, any error that occurs is outside the context of the wizard. Actions Notes Run the step again Not applicable Skip the step If this step was successful, you can skip it if you run the configuration process again. Clean up step None required Create a backup of the source portal profile Actions Notes Run the step again If this step fails, you can run this step again after you clean up the issue. Skip the step If this step was successful, you can skip it if you run the configuration process again. Clean up step If this step fails, delete the path to the temporary backup profile, and run the step again. For more information about troubleshooting the WASPreUpgrade command, see the WebSphere\u00ae Application Server documentation on Troubleshooting migration . | Manual Step: Create a backup of the remote source portal profile Since this is a manual step, any error that occurs is outside the context of the wizard. Actions Notes Run the step again If this step fails, you can run this step again after you clean up the issue. Skip the step If this step was successful, you can skip it if you run the configuration process again. Clean up step If this step fails, delete the path to the temporary backup profile, and run the step again. For more information about troubleshooting the WASPreUpgrade command, see the WebSphere Application Server documentation on Troubleshooting migration . | Manual Step: Update the deployment manager settings Since this is a manual step, any error that occurs is outside the context of the wizard. Actions Notes Run the step again Not applicable Skip the step If this step was successful, you can skip it if you run the configuration process again. Clean up step None required Manual Step: If the backup profile is larger than 2 GB, clean up the backup profile Since this is a manual step, any error that occurs is outside the context of the wizard. Actions Notes Run the step again Not applicable Skip the step If you are running the configuration again, you can skip this step only if you skipped all the previous steps. Clean up step None required Create a default profile Actions Notes Run the step again If this step fails, you can run this step again after you clean up the issue. Skip the step If this step was successful, you can skip it if you run the configuration process again. Clean up step If an unrecoverable error occurs and the create default profile step fails, remove the profile. 1. Use the manageprofiles command to remove the profile. The command file is in the app_server_root/bin directory. The command file is a script that is named manageprofiles.sh|bat. Example: ``` /opt/IBM/WebSphere/AppServer/bin/manageprofiles.sh -delete -profileName profile_name ``` Delete the profile directory. Then, run the Create a default profile step again. | Import the backup profile Actions Notes Run the step again If this step fails, you can run this step again after you clean up the issue. Skip the step Do not skip this step, if you are running the configuration again. If you re-create the default profile from the Create a default profile step, then you must run this step again to import the new default profile. Clean up step If an unrecoverable error occurs and the import backup profile step fails, remove the profile. 1. Use the manageprofiles command to remove the profile. The command file is in the app_server_root/bin directory. The command file is a script that is named manageprofiles.sh|bat. Example: ``` /opt/IBM/WebSphere/AppServer/bin/manageprofiles.sh -delete -profileName profile_name ``` Delete the profile directory. Then, run the Create a default profile step again before you rerun this step. | Manual Step: If you cleaned up the backup profile, restore the JCR content Since this is a manual step, any error that occurs is outside the context of the wizard. Actions Notes Run the step again Not applicable Skip the step Do not skip this step, if you are running the configuration again. You must restore the JCR content, if you completed the previous manual step to clean up the backup profile that is over 2 GB. Clean up step None required","title":"Troubleshooting: Migrate node profiles for a cluster environment"},{"location":"trouble/cw_migrate_cluster2/#troubleshooting-migrate-node-profiles-for-a-cluster-environment","text":"If you encounter a failure during the migration of the node profiles for a cluster environment, learn how to correct the issue and recover from the failure. Each potential step in the migrate node profiles option is included. Since the steps vary, depending on your selections, the steps are not numbered. Find the step that failed to learn more about correcting and recovering from the failure.","title":"Troubleshooting: Migrate node profiles for a cluster environment"},{"location":"trouble/cw_migrate_cluster2/#manual-step-stop-the-source-deployment-manager-and-node-agents","text":"Since this is a manual step, any error that occurs is outside the context of the wizard. Actions Notes\u00ae Run the step again You can run this step again if it was not successful. Skip the step If this step was successful, you can skip it if you run the configuration process again. Clean up step None required","title":"Manual Step: Stop the source deployment manager and node agents"},{"location":"trouble/cw_migrate_cluster2/#manual-step-start-the-target-deployment-manager","text":"Since this is a manual step, any error that occurs is outside the context of the wizard. Actions Notes Run the step again You can run this step again if it was not successful. Skip the step If this step was successful, you can skip it if you run the configuration process again. Clean up step None required","title":"Manual Step: Start the target deployment manager"},{"location":"trouble/cw_migrate_cluster2/#generate-the-files-for-remote-migration","text":"Actions Notes Run the step again If this step fails, you can run this step again after you clean up the issue. Skip the step If this step was successful, you can skip it if you run the configuration process again. Clean up step If this step fails, review the parameters and values that you entered in the Configuration Wizard, specifically the target temporary path and the application server path. If the parameter and values that you entered are correct, and the step fails again, use the wp-collector tool to gather the files that are needed to contact support for help. See Data collection and symptom analysis for information about using the wp-collector tool. |","title":"Generate the files for remote migration"},{"location":"trouble/cw_migrate_cluster2/#manual-step-copy-the-remote-migration-package-to-the-source-environment","text":"Since this is a manual step, any error that occurs is outside the context of the wizard. Actions Notes Run the step again Not applicable Skip the step If this step was successful, you can skip it if you run the configuration process again. Clean up step None required","title":"Manual Step: Copy the remote migration package to the source environment"},{"location":"trouble/cw_migrate_cluster2/#create-a-backup-of-the-source-portal-profile","text":"Actions Notes Run the step again If this step fails, you can run this step again after you clean up the issue. Skip the step If this step was successful, you can skip it if you run the configuration process again. Clean up step If this step fails, delete the path to the temporary backup profile, and run the step again. For more information about troubleshooting the WASPreUpgrade command, see the WebSphere\u00ae Application Server documentation on Troubleshooting migration . |","title":"Create a backup of the source portal profile"},{"location":"trouble/cw_migrate_cluster2/#manual-step-create-a-backup-of-the-remote-source-portal-profile","text":"Since this is a manual step, any error that occurs is outside the context of the wizard. Actions Notes Run the step again If this step fails, you can run this step again after you clean up the issue. Skip the step If this step was successful, you can skip it if you run the configuration process again. Clean up step If this step fails, delete the path to the temporary backup profile, and run the step again. For more information about troubleshooting the WASPreUpgrade command, see the WebSphere Application Server documentation on Troubleshooting migration . |","title":"Manual Step: Create a backup of the remote source portal profile"},{"location":"trouble/cw_migrate_cluster2/#manual-step-update-the-deployment-manager-settings","text":"Since this is a manual step, any error that occurs is outside the context of the wizard. Actions Notes Run the step again Not applicable Skip the step If this step was successful, you can skip it if you run the configuration process again. Clean up step None required","title":"Manual Step: Update the deployment manager settings"},{"location":"trouble/cw_migrate_cluster2/#manual-step-if-the-backup-profile-is-larger-than-2-gb-clean-up-the-backup-profile","text":"Since this is a manual step, any error that occurs is outside the context of the wizard. Actions Notes Run the step again Not applicable Skip the step If you are running the configuration again, you can skip this step only if you skipped all the previous steps. Clean up step None required","title":"Manual Step: If the backup profile is larger than 2 GB, clean up the backup profile"},{"location":"trouble/cw_migrate_cluster2/#create-a-default-profile","text":"Actions Notes Run the step again If this step fails, you can run this step again after you clean up the issue. Skip the step If this step was successful, you can skip it if you run the configuration process again. Clean up step If an unrecoverable error occurs and the create default profile step fails, remove the profile. 1. Use the manageprofiles command to remove the profile. The command file is in the app_server_root/bin directory. The command file is a script that is named manageprofiles.sh|bat. Example: ``` /opt/IBM/WebSphere/AppServer/bin/manageprofiles.sh -delete -profileName profile_name ``` Delete the profile directory. Then, run the Create a default profile step again. |","title":"Create a default profile"},{"location":"trouble/cw_migrate_cluster2/#import-the-backup-profile","text":"Actions Notes Run the step again If this step fails, you can run this step again after you clean up the issue. Skip the step Do not skip this step, if you are running the configuration again. If you re-create the default profile from the Create a default profile step, then you must run this step again to import the new default profile. Clean up step If an unrecoverable error occurs and the import backup profile step fails, remove the profile. 1. Use the manageprofiles command to remove the profile. The command file is in the app_server_root/bin directory. The command file is a script that is named manageprofiles.sh|bat. Example: ``` /opt/IBM/WebSphere/AppServer/bin/manageprofiles.sh -delete -profileName profile_name ``` Delete the profile directory. Then, run the Create a default profile step again before you rerun this step. |","title":"Import the backup profile"},{"location":"trouble/cw_migrate_cluster2/#manual-step-if-you-cleaned-up-the-backup-profile-restore-the-jcr-content","text":"Since this is a manual step, any error that occurs is outside the context of the wizard. Actions Notes Run the step again Not applicable Skip the step Do not skip this step, if you are running the configuration again. You must restore the JCR content, if you completed the previous manual step to clean up the backup profile that is over 2 GB. Clean up step None required","title":"Manual Step: If you cleaned up the backup profile, restore the JCR content"},{"location":"trouble/cw_migrate_cluster3/","text":"Troubleshooting: Upgrade node profiles for a cluster environment If you encounter a failure while upgrading the node profiles for a cluster environment, learn how to correct the issue and recover from the failure. Each potential step in the upgrade node profiles option is included. Since the steps vary, depending on your selections, the steps are not numbered. Find the step that failed to learn more about correcting and recovering from the failure. Manual Step: Update the ports for the deployment manager and nodes Since this is a manual step, any error that occurs is outside the context of the wizard. Actions Notes\u00ae Run the step again You can run this step again if it fails. Skip the step If this step was successful, you can skip it if you run the configuration process again. Clean up step None required Upgrade the ConfigEngine Actions Notes Run the step again If this step fails, you can run this step again after you clean up the issue. Skip the step If this step was successful, you can skip it if you run the configuration process again. If you re-create your profile for any reason, you must run this step again. | |Clean up step|If this step fails, review the parameters and values that you entered in the Configuration Wizard, specifically the new host name, passwords, port numbers, and the Portal server path.If the parameter and values that you entered are correct, and the step fails again, use the wp-collector tool to gather the files that are needed to contact support for help. See Data collection and symptom analysis for information about using the wp-collector tool. | Update database settings Actions Notes Run the step again Not applicable Skip the step If this step was successful, you can skip it if you run the configuration process again.If you re-create your profile for any reason, you must run this step again. | |Clean up step|None required| Validate the database settings Actions Notes Run the step again If this step fails, you can run this step again after you clean up the issue. Skip the step If this step was successful, you can skip it if you run the configuration process again.If you re-create your profile for any reason, you must run this step again. | |Clean up step|Check your properties files to make sure that you have all of your parameters and values set correctly before you run the step again.| Connect to new databases Actions Notes Run the step again If this step fails, you can run the step again. Skip the step If this step was successful, you can skip it if you run the configuration process again.If you re-create your profile for any reason, you must run this step again. | |Clean up step|None required| Manual Step: Review database schema changes Since this is a manual step, any error that occurs is outside the context of the wizard. Actions Notes Run the step again If this step fails, you can run this step again. Skip the step This step is optional. You can skip this step if you do not want to review the database schema changes. Clean up step None required Upgrade the base portal database component Actions Notes Run the step again If this step fails, you can run this step again after you clean up the issue. Skip the step Do not skip this step, if you are running the configuration again. Clean up step If this step fails, delete the database, create a new copy, and run the step again. Manual Step: Remove check pending statuses from table spaces Since this is a manual step, any error that occurs is outside the context of the wizard. Actions Notes Run the step again If this step fails, clean up the issue and start back with the Upgrade the base portal database components step, and then run this step again. Skip the step Do not skip this step, if you are running the configuration again. Clean up step If this step fails, delete the database, create a new copy, and run the Upgrade the portal database component step again before you rerun this step again. Upgrade the remaining portal databases Actions Notes Run the step again If this step fails, clean up the issue and start back with the Upgrade the base portal database components . Skip the step Do not skip this step, if you are running the configuration again. You must complete the Upgrade the base portal database components and Remove check pending statuses from table spaces steps before you run this step again. Clean up step If this step fails, delete the database, create a new copy, and rerun the Upgrade the portal database component and Remove check pending statuses from table spaces steps before you run this step again. Upgrade the portal profile Actions Notes Run the step again If this step fails, you must contact support. Note: Contact support before you start the Portal server. | |Skip the step|Do not skip this step, if you are running the configuration again.| |Clean up step|Contact support.| When you run this step, the sub task that is named action-deploy-portlets-applyMIGStatic-wp.oob.full runs and completes successfully. However, the following error messages are shown. You can ignore these error messages: EJPXA0161W: The web module ContactList could not be activated. Please see previous messages for reasons and possible corrective actions. EJPPH0048W: The synchronization mode of all nodes in the portal cluster is not consistently set. The portlet application PA_ContactList will not be started in the Application Server. Manual synchronization is assumed for all nodes. Manually start the application after all nodes were synchronized. EJPXA0067E: The following configuration data is needed to create a content-node resource: content-parentref. Apply the latest Combined Cumulative Fix updates to your system. Actions Notes Run the step again If this step fails, you can run this step again after you clean up the issue. Skip the step If this step was successful, you can skip it if you run the configuration process again. Clean up step If this step fails, contact support and report the error message to get assistance on how to fix this issue before you run the step again.","title":"Troubleshooting: Upgrade node profiles for a cluster environment"},{"location":"trouble/cw_migrate_cluster3/#troubleshooting-upgrade-node-profiles-for-a-cluster-environment","text":"If you encounter a failure while upgrading the node profiles for a cluster environment, learn how to correct the issue and recover from the failure. Each potential step in the upgrade node profiles option is included. Since the steps vary, depending on your selections, the steps are not numbered. Find the step that failed to learn more about correcting and recovering from the failure.","title":"Troubleshooting: Upgrade node profiles for a cluster environment"},{"location":"trouble/cw_migrate_cluster3/#manual-step-update-the-ports-for-the-deployment-manager-and-nodes","text":"Since this is a manual step, any error that occurs is outside the context of the wizard. Actions Notes\u00ae Run the step again You can run this step again if it fails. Skip the step If this step was successful, you can skip it if you run the configuration process again. Clean up step None required","title":"Manual Step: Update the ports for the deployment manager and nodes"},{"location":"trouble/cw_migrate_cluster3/#upgrade-the-configengine","text":"Actions Notes Run the step again If this step fails, you can run this step again after you clean up the issue. Skip the step If this step was successful, you can skip it if you run the configuration process again. If you re-create your profile for any reason, you must run this step again. | |Clean up step|If this step fails, review the parameters and values that you entered in the Configuration Wizard, specifically the new host name, passwords, port numbers, and the Portal server path.If the parameter and values that you entered are correct, and the step fails again, use the wp-collector tool to gather the files that are needed to contact support for help. See Data collection and symptom analysis for information about using the wp-collector tool. |","title":"Upgrade the ConfigEngine"},{"location":"trouble/cw_migrate_cluster3/#update-database-settings","text":"Actions Notes Run the step again Not applicable Skip the step If this step was successful, you can skip it if you run the configuration process again.If you re-create your profile for any reason, you must run this step again. | |Clean up step|None required|","title":"Update database settings"},{"location":"trouble/cw_migrate_cluster3/#validate-the-database-settings","text":"Actions Notes Run the step again If this step fails, you can run this step again after you clean up the issue. Skip the step If this step was successful, you can skip it if you run the configuration process again.If you re-create your profile for any reason, you must run this step again. | |Clean up step|Check your properties files to make sure that you have all of your parameters and values set correctly before you run the step again.|","title":"Validate the database settings"},{"location":"trouble/cw_migrate_cluster3/#connect-to-new-databases","text":"Actions Notes Run the step again If this step fails, you can run the step again. Skip the step If this step was successful, you can skip it if you run the configuration process again.If you re-create your profile for any reason, you must run this step again. | |Clean up step|None required|","title":"Connect to new databases"},{"location":"trouble/cw_migrate_cluster3/#manual-step-review-database-schema-changes","text":"Since this is a manual step, any error that occurs is outside the context of the wizard. Actions Notes Run the step again If this step fails, you can run this step again. Skip the step This step is optional. You can skip this step if you do not want to review the database schema changes. Clean up step None required","title":"Manual Step: Review database schema changes"},{"location":"trouble/cw_migrate_cluster3/#upgrade-the-base-portal-database-component","text":"Actions Notes Run the step again If this step fails, you can run this step again after you clean up the issue. Skip the step Do not skip this step, if you are running the configuration again. Clean up step If this step fails, delete the database, create a new copy, and run the step again.","title":"Upgrade the base portal database component"},{"location":"trouble/cw_migrate_cluster3/#manual-step-remove-check-pending-statuses-from-table-spaces","text":"Since this is a manual step, any error that occurs is outside the context of the wizard. Actions Notes Run the step again If this step fails, clean up the issue and start back with the Upgrade the base portal database components step, and then run this step again. Skip the step Do not skip this step, if you are running the configuration again. Clean up step If this step fails, delete the database, create a new copy, and run the Upgrade the portal database component step again before you rerun this step again.","title":"Manual Step: Remove check pending statuses from table spaces"},{"location":"trouble/cw_migrate_cluster3/#upgrade-the-remaining-portal-databases","text":"Actions Notes Run the step again If this step fails, clean up the issue and start back with the Upgrade the base portal database components . Skip the step Do not skip this step, if you are running the configuration again. You must complete the Upgrade the base portal database components and Remove check pending statuses from table spaces steps before you run this step again. Clean up step If this step fails, delete the database, create a new copy, and rerun the Upgrade the portal database component and Remove check pending statuses from table spaces steps before you run this step again.","title":"Upgrade the remaining portal databases"},{"location":"trouble/cw_migrate_cluster3/#upgrade-the-portal-profile","text":"Actions Notes Run the step again If this step fails, you must contact support. Note: Contact support before you start the Portal server. | |Skip the step|Do not skip this step, if you are running the configuration again.| |Clean up step|Contact support.| When you run this step, the sub task that is named action-deploy-portlets-applyMIGStatic-wp.oob.full runs and completes successfully. However, the following error messages are shown. You can ignore these error messages: EJPXA0161W: The web module ContactList could not be activated. Please see previous messages for reasons and possible corrective actions. EJPPH0048W: The synchronization mode of all nodes in the portal cluster is not consistently set. The portlet application PA_ContactList will not be started in the Application Server. Manual synchronization is assumed for all nodes. Manually start the application after all nodes were synchronized. EJPXA0067E: The following configuration data is needed to create a content-node resource: content-parentref.","title":"Upgrade the portal profile"},{"location":"trouble/cw_migrate_cluster3/#apply-the-latest-combined-cumulative-fix-updates-to-your-system","text":"Actions Notes Run the step again If this step fails, you can run this step again after you clean up the issue. Skip the step If this step was successful, you can skip it if you run the configuration process again. Clean up step If this step fails, contact support and report the error message to get assistance on how to fix this issue before you run the step again.","title":"Apply the latest Combined Cumulative Fix updates to your system."},{"location":"trouble/cw_migrate_standalone/","text":"Troubleshooting: Migrate a stand-alone server If you encounter a failure during the configuration process, determine whether you can run the step again, skip the step, or if you must clean up the step. For some failed steps, learn how to correct the issue and recover from the failure. Each potential step in the configuration is included. Because the steps vary depending on your selections, the steps are not numbered. Find the step that failed to learn more about correcting and recovering from the failure. If you need to change a value that you entered in the wizard, then you must run the configuration again. Tip: If you must go through the wizard again, download the wizard selections that you made to save time. Then, cancel the configuration. Start the process over and upload your saved selections. Correct or enter values for the parameters that caused the failure. Manual Step: Install the latest fix packs Since this is a manual step, any error that occurs is outside the context of the wizard. Actions Notes\u00ae Run the step again If this step fails, you can run this step again after you clean up the issue. Skip the step If this step was successful, you can skip it if you run the configuration process again. Clean up step If you encounter an issue when you are installing the fix, refer to the documentation for the fix. Generate the files for remote migration Actions Notes Run the step again If this step fails, you can run this step again after you clean up the issue. Skip the step If this step was successful, you can skip it if you run the configuration process again. Clean up step If this step fails, review the parameters and values that you entered in the Configuration Wizard, specifically the target temporary path and the application server path.If the parameter and values that you entered are correct, and the step fails again, use the wp-collector tool to gather the files that are needed to contact support for help. See Data collection and symptom analysis for information about using the wp-collector tool. | Manual Step: Copy the remote migration package to the source environment Since this is a manual step, any error that occurs is outside the context of the wizard. Actions Notes Run the step again Not applicable Skip the step If this step was successful, you can skip it if you run the configuration process again. Clean up step None required Create a backup of the remote source portal profile Actions Notes Run the step again If this step fails, you can run this step again after you clean up the issue. Skip the step If this step was successful, you can skip it if you run the configuration process again. Clean up step If this step fails, delete the path to the temporary backup profile, and run the step again. For more information about troubleshooting the WASPreUpgrade command, see the WebSphere\u00ae Application Server documentation on Troubleshooting migration . | Create a backup profile of the source portal profile Actions Notes Run the step again If this step fails, you can run this step again after you clean up the issue. Skip the step If this step was successful, you can skip it if you run the configuration process again. Clean up step If this step fails, delete the path to the temporary backup profile, and run the step again. For more information about troubleshooting the WASPreUpgrade command, see the WebSphere Application Server documentation on Troubleshooting migration . | Manual Step: If the backup profile is larger than 2 GB, clean up the backup profile Since this is a manual step, any error that occurs is outside the context of the wizard. Actions Notes Run the step again Not applicable Skip the step If you are running the configuration again, you can skip this step only if you skipped all the previous steps. Clean up step None required Create a default profile Actions Notes Run the step again If this step fails, you can run this step again after you clean up the issue. Skip the step If this step was successful, you can skip it if you run the configuration process again. Clean up step If an unrecoverable error occurs and the create default profile step fails, remove the profile. 1. Use the manageprofiles command to remove the profile. The command file is in the app_server_root/bin directory. The command file is a script that is named manageprofiles.sh|bat. Example: ``` /opt/IBM/WebSphere/AppServer/bin/manageprofiles.sh -delete -profileName profile_name ``` Delete the profile directory. Then, run the Create a default profile step again. | Import backup profile Actions Notes Run the step again If this step fails, you can run this step again after you clean up the issue. Skip the step Do not skip this step, if you are running the configuration again. If you re-create the default profile from the Create a default profile step, then you must run this step again to import the new default profile. Clean up step If an unrecoverable error occurs and the import backup profile step fails, remove the profile. 1. Use the manageprofiles command to remove the profile. The command file is in the app_server_root/bin directory. The command file is a script that is named manageprofiles.sh|bat. Example: ``` /opt/IBM/WebSphere/AppServer/bin/manageprofiles.sh -delete -profileName profile_name ``` Delete the profile directory. Then, run the Create a default profile step again before you rerun this step. | Manual Step: If you cleaned up the backup profile, restore the JCR content Since this is a manual step, any error that occurs is outside the context of the wizard. Actions Notes Run the step again Not applicable Skip the step Do not skip this step, if you are running the configuration again. You must restore the JCR content, if you completed the previous manual step to clean up the backup profile that is over 2 GB. Clean up step None required Upgrade the ConfigEngine Actions Notes Run the step again If this step fails, you can run this step again after you clean up the issue. Skip the step Do not skip this step, if you are running the configuration again. Clean up step If this step fails, review the parameters and values that you entered in the Configuration Wizard, specifically the new host name, passwords, port numbers, and the Portal server path.If the parameter and values that you entered are correct, and the step fails again, use the wp-collector tool to gather the files that are needed to contact support for help. See Data collection and symptom analysis for information about using the wp-collector tool. | Manual Step: Update the ports on the target environment Since this is a manual step, any error that occurs is outside the context of the wizard. Actions Notes Run the step again Not applicable Skip the step Do not skip this step, if you are running the configuration again. Clean up step None required Manual Step: Update database settings Since this is a manual step, any error that occurs is outside the context of the wizard. Actions Notes Run the step again Not applicable Skip the step Do not skip this step, if you are running the configuration again. Clean up step None required Validate database settings Actions Notes Run the step again If this step fails, you can run this step again after you clean up the issue. Skip the step Do not skip this step, if you are running the configuration again. Clean up step Check your properties files to make sure that you have all of your parameters and values set correctly before you run the step again. Connect to new database copies Actions Notes Run the step again If this step fails, you can run the step again. Skip the step Do not skip this step, if you are running the configuration again. Clean up step None required. Manual Step: Review database schema changes Since this is a manual step, any error that occurs is outside the context of the wizard. Actions Notes Run the step again If this step fails, you can run this step again. Skip the step This step is optional. You can skip this step if you do not want to review the database schema changes. Clean up step None required Upgrade the base portal database component Actions Notes Run the step again If this step fails, you can run this step again after you clean up the issue. Skip the step Do not skip this step, if you are running the configuration again. Clean up step If this step fails, delete the database, create a new copy, and run the step again. Manual Step: Remove check pending statuses from table spaces Since this is a manual step, any error that occurs is outside the context of the wizard. Actions Notes Run the step again If this step fails, clean up the issue and start back with the Upgrade the base portal database components step, and then run this step again. Skip the step Do not skip this step, if you are running the configuration again. Clean up step If this step fails, delete the database, create a new copy, and rerun the Upgrade the portal database component step before you rerun this step again. Upgrade the remaining portal databases Actions Notes Run the step again If this step fails, clean up the issue and start back with the Upgrade the base portal database components . Skip the step Do not skip this step, if you are running the configuration again. You must complete the Upgrade the base portal database components and Remove check pending statuses from table spaces steps before you run this step again. Clean up step If this step fails, delete the database, create a new copy, and rerun the Upgrade the portal database component and Remove check pending statuses from table spaces steps before you run this step again. Upgrade the portal profile Actions Notes Run the step again If this step fails, you must contact support. Note: Contact support before you start the Portal server. | |Skip the step|Do not skip this step, if you are running the configuration again.| |Clean up step|Contact support.| When you run this step, the sub task that is named action-deploy-portlets-applyMIGStatic-wp.oob.full runs and completes successfully. However, the following error messages are shown. You can ignore these error messages: EJPXA0161W: The web module ContactList could not be activated. Please see previous messages for reasons and possible corrective actions. EJPPH0048W: The synchronization mode of all nodes in the portal cluster is not consistently set. The portlet application PA_ContactList will not be started in the Application Server. Manual synchronization is assumed for all nodes. Manually start the application after all nodes were synchronized. EJPXA0067E: The following configuration data is needed to create a content-node resource: content-parentref.","title":"Troubleshooting: Migrate a stand-alone server"},{"location":"trouble/cw_migrate_standalone/#troubleshooting-migrate-a-stand-alone-server","text":"If you encounter a failure during the configuration process, determine whether you can run the step again, skip the step, or if you must clean up the step. For some failed steps, learn how to correct the issue and recover from the failure. Each potential step in the configuration is included. Because the steps vary depending on your selections, the steps are not numbered. Find the step that failed to learn more about correcting and recovering from the failure. If you need to change a value that you entered in the wizard, then you must run the configuration again. Tip: If you must go through the wizard again, download the wizard selections that you made to save time. Then, cancel the configuration. Start the process over and upload your saved selections. Correct or enter values for the parameters that caused the failure.","title":"Troubleshooting: Migrate a stand-alone server"},{"location":"trouble/cw_migrate_standalone/#manual-step-install-the-latest-fix-packs","text":"Since this is a manual step, any error that occurs is outside the context of the wizard. Actions Notes\u00ae Run the step again If this step fails, you can run this step again after you clean up the issue. Skip the step If this step was successful, you can skip it if you run the configuration process again. Clean up step If you encounter an issue when you are installing the fix, refer to the documentation for the fix.","title":"Manual Step: Install the latest fix packs"},{"location":"trouble/cw_migrate_standalone/#generate-the-files-for-remote-migration","text":"Actions Notes Run the step again If this step fails, you can run this step again after you clean up the issue. Skip the step If this step was successful, you can skip it if you run the configuration process again. Clean up step If this step fails, review the parameters and values that you entered in the Configuration Wizard, specifically the target temporary path and the application server path.If the parameter and values that you entered are correct, and the step fails again, use the wp-collector tool to gather the files that are needed to contact support for help. See Data collection and symptom analysis for information about using the wp-collector tool. |","title":"Generate the files for remote migration"},{"location":"trouble/cw_migrate_standalone/#manual-step-copy-the-remote-migration-package-to-the-source-environment","text":"Since this is a manual step, any error that occurs is outside the context of the wizard. Actions Notes Run the step again Not applicable Skip the step If this step was successful, you can skip it if you run the configuration process again. Clean up step None required","title":"Manual Step: Copy the remote migration package to the source environment"},{"location":"trouble/cw_migrate_standalone/#create-a-backup-of-the-remote-source-portal-profile","text":"Actions Notes Run the step again If this step fails, you can run this step again after you clean up the issue. Skip the step If this step was successful, you can skip it if you run the configuration process again. Clean up step If this step fails, delete the path to the temporary backup profile, and run the step again. For more information about troubleshooting the WASPreUpgrade command, see the WebSphere\u00ae Application Server documentation on Troubleshooting migration . |","title":"Create a backup of the remote source portal profile"},{"location":"trouble/cw_migrate_standalone/#create-a-backup-profile-of-the-source-portal-profile","text":"Actions Notes Run the step again If this step fails, you can run this step again after you clean up the issue. Skip the step If this step was successful, you can skip it if you run the configuration process again. Clean up step If this step fails, delete the path to the temporary backup profile, and run the step again. For more information about troubleshooting the WASPreUpgrade command, see the WebSphere Application Server documentation on Troubleshooting migration . |","title":"Create a backup profile of the source portal profile"},{"location":"trouble/cw_migrate_standalone/#manual-step-if-the-backup-profile-is-larger-than-2-gb-clean-up-the-backup-profile","text":"Since this is a manual step, any error that occurs is outside the context of the wizard. Actions Notes Run the step again Not applicable Skip the step If you are running the configuration again, you can skip this step only if you skipped all the previous steps. Clean up step None required","title":"Manual Step: If the backup profile is larger than 2 GB, clean up the backup profile"},{"location":"trouble/cw_migrate_standalone/#create-a-default-profile","text":"Actions Notes Run the step again If this step fails, you can run this step again after you clean up the issue. Skip the step If this step was successful, you can skip it if you run the configuration process again. Clean up step If an unrecoverable error occurs and the create default profile step fails, remove the profile. 1. Use the manageprofiles command to remove the profile. The command file is in the app_server_root/bin directory. The command file is a script that is named manageprofiles.sh|bat. Example: ``` /opt/IBM/WebSphere/AppServer/bin/manageprofiles.sh -delete -profileName profile_name ``` Delete the profile directory. Then, run the Create a default profile step again. |","title":"Create a default profile"},{"location":"trouble/cw_migrate_standalone/#import-backup-profile","text":"Actions Notes Run the step again If this step fails, you can run this step again after you clean up the issue. Skip the step Do not skip this step, if you are running the configuration again. If you re-create the default profile from the Create a default profile step, then you must run this step again to import the new default profile. Clean up step If an unrecoverable error occurs and the import backup profile step fails, remove the profile. 1. Use the manageprofiles command to remove the profile. The command file is in the app_server_root/bin directory. The command file is a script that is named manageprofiles.sh|bat. Example: ``` /opt/IBM/WebSphere/AppServer/bin/manageprofiles.sh -delete -profileName profile_name ``` Delete the profile directory. Then, run the Create a default profile step again before you rerun this step. |","title":"Import backup profile"},{"location":"trouble/cw_migrate_standalone/#manual-step-if-you-cleaned-up-the-backup-profile-restore-the-jcr-content","text":"Since this is a manual step, any error that occurs is outside the context of the wizard. Actions Notes Run the step again Not applicable Skip the step Do not skip this step, if you are running the configuration again. You must restore the JCR content, if you completed the previous manual step to clean up the backup profile that is over 2 GB. Clean up step None required","title":"Manual Step: If you cleaned up the backup profile, restore the JCR content"},{"location":"trouble/cw_migrate_standalone/#upgrade-the-configengine","text":"Actions Notes Run the step again If this step fails, you can run this step again after you clean up the issue. Skip the step Do not skip this step, if you are running the configuration again. Clean up step If this step fails, review the parameters and values that you entered in the Configuration Wizard, specifically the new host name, passwords, port numbers, and the Portal server path.If the parameter and values that you entered are correct, and the step fails again, use the wp-collector tool to gather the files that are needed to contact support for help. See Data collection and symptom analysis for information about using the wp-collector tool. |","title":"Upgrade the ConfigEngine"},{"location":"trouble/cw_migrate_standalone/#manual-step-update-the-ports-on-the-target-environment","text":"Since this is a manual step, any error that occurs is outside the context of the wizard. Actions Notes Run the step again Not applicable Skip the step Do not skip this step, if you are running the configuration again. Clean up step None required","title":"Manual Step: Update the ports on the target environment"},{"location":"trouble/cw_migrate_standalone/#manual-step-update-database-settings","text":"Since this is a manual step, any error that occurs is outside the context of the wizard. Actions Notes Run the step again Not applicable Skip the step Do not skip this step, if you are running the configuration again. Clean up step None required","title":"Manual Step: Update database settings"},{"location":"trouble/cw_migrate_standalone/#validate-database-settings","text":"Actions Notes Run the step again If this step fails, you can run this step again after you clean up the issue. Skip the step Do not skip this step, if you are running the configuration again. Clean up step Check your properties files to make sure that you have all of your parameters and values set correctly before you run the step again.","title":"Validate database settings"},{"location":"trouble/cw_migrate_standalone/#connect-to-new-database-copies","text":"Actions Notes Run the step again If this step fails, you can run the step again. Skip the step Do not skip this step, if you are running the configuration again. Clean up step None required.","title":"Connect to new database copies"},{"location":"trouble/cw_migrate_standalone/#manual-step-review-database-schema-changes","text":"Since this is a manual step, any error that occurs is outside the context of the wizard. Actions Notes Run the step again If this step fails, you can run this step again. Skip the step This step is optional. You can skip this step if you do not want to review the database schema changes. Clean up step None required","title":"Manual Step: Review database schema changes"},{"location":"trouble/cw_migrate_standalone/#upgrade-the-base-portal-database-component","text":"Actions Notes Run the step again If this step fails, you can run this step again after you clean up the issue. Skip the step Do not skip this step, if you are running the configuration again. Clean up step If this step fails, delete the database, create a new copy, and run the step again.","title":"Upgrade the base portal database component"},{"location":"trouble/cw_migrate_standalone/#manual-step-remove-check-pending-statuses-from-table-spaces","text":"Since this is a manual step, any error that occurs is outside the context of the wizard. Actions Notes Run the step again If this step fails, clean up the issue and start back with the Upgrade the base portal database components step, and then run this step again. Skip the step Do not skip this step, if you are running the configuration again. Clean up step If this step fails, delete the database, create a new copy, and rerun the Upgrade the portal database component step before you rerun this step again.","title":"Manual Step: Remove check pending statuses from table spaces"},{"location":"trouble/cw_migrate_standalone/#upgrade-the-remaining-portal-databases","text":"Actions Notes Run the step again If this step fails, clean up the issue and start back with the Upgrade the base portal database components . Skip the step Do not skip this step, if you are running the configuration again. You must complete the Upgrade the base portal database components and Remove check pending statuses from table spaces steps before you run this step again. Clean up step If this step fails, delete the database, create a new copy, and rerun the Upgrade the portal database component and Remove check pending statuses from table spaces steps before you run this step again.","title":"Upgrade the remaining portal databases"},{"location":"trouble/cw_migrate_standalone/#upgrade-the-portal-profile","text":"Actions Notes Run the step again If this step fails, you must contact support. Note: Contact support before you start the Portal server. | |Skip the step|Do not skip this step, if you are running the configuration again.| |Clean up step|Contact support.| When you run this step, the sub task that is named action-deploy-portlets-applyMIGStatic-wp.oob.full runs and completes successfully. However, the following error messages are shown. You can ignore these error messages: EJPXA0161W: The web module ContactList could not be activated. Please see previous messages for reasons and possible corrective actions. EJPPH0048W: The synchronization mode of all nodes in the portal cluster is not consistently set. The portlet application PA_ContactList will not be started in the Application Server. Manual synchronization is assumed for all nodes. Manually start the application after all nodes were synchronized. EJPXA0067E: The following configuration data is needed to create a content-node resource: content-parentref.","title":"Upgrade the portal profile"},{"location":"trouble/cw_removeprofile/","text":"Troubleshooting: Remove a WebSphere Portal profile View troubleshooting information for creating a HCL Portal profile. Each potential step in the configuration is included. Because the steps vary depending on your selections, the steps are not numbered. Find the step that failed to learn more about correcting and recovering from the failure. If you need to change a value that you entered in the wizard, then you must run the configuration again. Tip: If you must go through the wizard again, download the wizard selections that you made to save time. Then, cancel the configuration. Start the process over and upload your saved selections. Correct or enter values for the parameters that caused the failure. Manual Step: Prepare your system Actions Notes\u00ae Run the step again Not applicable Skip the step If this step was successful, you can skip it if you run the configuration process again. Clean up step None required Remove portal node from cluster Actions Notes Run the step again If this step fails, you can run this step again after you clean up the issue. Skip the step If this step was successful, you can skip it if you run the configuration process again. Clean up step Review removeNode.log in wp_profile/logs for any failures that are indicated by the words \"exception\" or \"error.\" Remove portal profile Actions Notes Run the step again If this step fails, you can run this step again after you clean up the issue. Skip the step If this step was successful, you can skip it if you run the configuration process again. Clean up step 1. Use the manageprofiles command to remove the profile. The command file is in the app_server_root/bin directory. The command file is a script that is named manageprofiles.sh|bat. Example: ``` /opt/IBM/WebSphere/AppServer/bin/manageprofiles.sh -delete -profileName profile_name ``` Manually delete the profile directory only if the manageprofiles -delete command completes successfully. The manageprofiles command creates a log for every profile that it creates, deletes, or augments. If the manageprofiles -delete command does not complete successfully, review the logs that are named profile_name_create.log and profile_name_augment.log in install_root/logs/manageprofiles. | Stop the deployment manager Actions Notes Run the step again Run this step again, only if you are running the configuration again and removing the deployment manager profile. Skip the step Do not skip this step, if you are running the configuration again to remove the deployment manager profile. The deployment manager must be stopped to remove the deployment manager profile. Clean up step None requiredYou can check the status of the deployment manager by running server-status.sh|bat. | Remove the deployment manager profile Actions Notes Run the step again If this step fails, you can run this step again after you clean up the issue. Skip the step If this step was successful, you can skip it if you run the configuration process again. Clean up step 1. Use the manageprofiles command to remove the profile. The command file is in the app_server_root/bin directory. The command file is a script that is named manageprofiles.sh|bat. Example: ``` /opt/IBM/WebSphere/AppServer/bin/manageprofiles.sh -delete -profileName profile_name ``` Manually delete the profile directory only if the manageprofiles -delete command completes successfully. The manageprofiles command creates a log for every profile that it creates, deletes, or augments. If the manageprofiles -delete command does not complete successfully, review the log named delete.log in install_root/logs/dmgr_01. |","title":"Troubleshooting: Remove a WebSphere Portal profile"},{"location":"trouble/cw_removeprofile/#troubleshooting-remove-a-websphere-portal-profile","text":"View troubleshooting information for creating a HCL Portal profile. Each potential step in the configuration is included. Because the steps vary depending on your selections, the steps are not numbered. Find the step that failed to learn more about correcting and recovering from the failure. If you need to change a value that you entered in the wizard, then you must run the configuration again. Tip: If you must go through the wizard again, download the wizard selections that you made to save time. Then, cancel the configuration. Start the process over and upload your saved selections. Correct or enter values for the parameters that caused the failure.","title":"Troubleshooting: Remove a WebSphere Portal profile"},{"location":"trouble/cw_removeprofile/#manual-step-prepare-your-system","text":"Actions Notes\u00ae Run the step again Not applicable Skip the step If this step was successful, you can skip it if you run the configuration process again. Clean up step None required","title":"Manual Step: Prepare your system"},{"location":"trouble/cw_removeprofile/#remove-portal-node-from-cluster","text":"Actions Notes Run the step again If this step fails, you can run this step again after you clean up the issue. Skip the step If this step was successful, you can skip it if you run the configuration process again. Clean up step Review removeNode.log in wp_profile/logs for any failures that are indicated by the words \"exception\" or \"error.\"","title":"Remove portal node from cluster"},{"location":"trouble/cw_removeprofile/#remove-portal-profile","text":"Actions Notes Run the step again If this step fails, you can run this step again after you clean up the issue. Skip the step If this step was successful, you can skip it if you run the configuration process again. Clean up step 1. Use the manageprofiles command to remove the profile. The command file is in the app_server_root/bin directory. The command file is a script that is named manageprofiles.sh|bat. Example: ``` /opt/IBM/WebSphere/AppServer/bin/manageprofiles.sh -delete -profileName profile_name ``` Manually delete the profile directory only if the manageprofiles -delete command completes successfully. The manageprofiles command creates a log for every profile that it creates, deletes, or augments. If the manageprofiles -delete command does not complete successfully, review the logs that are named profile_name_create.log and profile_name_augment.log in install_root/logs/manageprofiles. |","title":"Remove portal profile"},{"location":"trouble/cw_removeprofile/#stop-the-deployment-manager","text":"Actions Notes Run the step again Run this step again, only if you are running the configuration again and removing the deployment manager profile. Skip the step Do not skip this step, if you are running the configuration again to remove the deployment manager profile. The deployment manager must be stopped to remove the deployment manager profile. Clean up step None requiredYou can check the status of the deployment manager by running server-status.sh|bat. |","title":"Stop the deployment manager"},{"location":"trouble/cw_removeprofile/#remove-the-deployment-manager-profile","text":"Actions Notes Run the step again If this step fails, you can run this step again after you clean up the issue. Skip the step If this step was successful, you can skip it if you run the configuration process again. Clean up step 1. Use the manageprofiles command to remove the profile. The command file is in the app_server_root/bin directory. The command file is a script that is named manageprofiles.sh|bat. Example: ``` /opt/IBM/WebSphere/AppServer/bin/manageprofiles.sh -delete -profileName profile_name ``` Manually delete the profile directory only if the manageprofiles -delete command completes successfully. The manageprofiles command creates a log for every profile that it creates, deletes, or augments. If the manageprofiles -delete command does not complete successfully, review the log named delete.log in install_root/logs/dmgr_01. |","title":"Remove the deployment manager profile"},{"location":"trouble/logging_tracing_containers_and_new_services/","text":"Logging and tracing for containers and new services The following table outlines the tracing options that are used to capture logging and tracing for HCL Digital Experience 9.5 container-based services with container update CF181 and later releases. This table outlines the server-side tracing available for HCL Digital Experience 9.5 CF181 and later containers. Container Log Location Default Logging Default Logging Amount DX Core /opt/HCL/wp_profile/logs/HCL Portal and HCL Web Content Manager *=info Small DX Remote Search /opt/HCL/AppServer/profiles/rs_profile/logs/server1 *=info Small Open LDAP /var/dx-openldap/log/slapd.log stats log connections/operations/results Small Cloud Operator stdout and stderr Info Large Media Library Operator stdout and stderr Info Large Ambassador stdout and stderr Info Small Experience API stdout and stderr *=Debug Extra-Large Digital Asset Management (DAM) stdout and stderr *=Debug Extra-Large Content Composer stdout and stderr *=Debug Large Postgres stdout and stderr Runtime: /var/lib/pgsql/11/data/log | *=Debug |Medium| If you're using the Experience API, Digital Asset Management, or Content Composer containers (where you have Digital Asset Management and/or Content Composer enabled) and are using a logging driver that logs to a file, you must configure log rotation for your Kubernetes environment. See the vendor documentation of your Kubernetes environment on how to configure this. Note: If you do not configure log rotation, you must frequently clean up the logs to prevent running out of disk space. Client-side browser tracing for these container environments can also be enabled when debugging user interface issues, and is described as follows. Tip: Transaction log (tranlog) . With multiple instances of Digital Experience 9.5 containers writing to a shared transaction log (tranlog) directory, data corruption could happen resulting to DX server start-up issues. To avoid data corruption, beginning with CF192, the default deployment creates individual 1 GB PersistentVolumes (pvs) and associated PersistentVolumeClaims (pvcs) for each DX 9.5 instance. This behavior is configured with the following values in the properties file used for deployment. dx.tranlogging: true - Set this value to false so that individual pvs for tranlogs are not created at the deployment time. dx.tranlogging.reclaim: Delete - Kubernetes setting for handling volumes when the deployment is removed. dx.tranlogging.stgclass: gp2 - Kubernetes default storage class for the environment. This is dependent on the Kubernetes flavor. If the value is empty, the default is gp2. dx.tranlogging.size: 4G - Size of the volume created. If the value set is invalid for the underlying storage environment, the default is 1G. Logging configuration for the DX core dx.splitlogging: true - Value examples (true, false, and empty). If the value is empty, the default is false. dx.logging.reclaim: Delete - Setting for handling volumes when the deployment is removed. dx.logging.stgclass: dx-deploy-stg - Storage class is dependent on the Kubernetes flavor. If the value is empty, the default is gp2. dx.logging.size: 2G - Maximum logging size. If the value is empty, the default is 1G. Enable the use of IBM WebSphere\u00ae Application Server trace facilities to create trace information for Content Composer and Digital Asset Management, integrated via the Digital Asset Management portlet in HCL Digital Experience 9.5 Container Update CF181 and later releases. Logging for these applications is enabled hierarchically for as much or as little of the application as needed. Note: In order to improve runtime performance, beginning with HCL Digital Experience 9.5 Container Update CF192, the DX Docker core image is revised so that the /opt/HCL/wp_profile/temp directory is a now a symbolic link to /opt/HCL/PortalServer/temp. This means that the output usually written to /opt/HCL/wp_profile/temp (including servlet cache, extensionregistry storage, and osgi_instance_location data) now writes to /opt/HCL/PortalServer/temp. Accessing this new temp location is possible only from within the DX container as the /opt/HCL/wp_profile/temp directory no longer exists in the persisted profile file system. Prerequisite: Install and configure Content Composer and Digital Asset Management to your Digital Experience 9.5 CF181 and later deployment. Documentation resource: Install Content Composer and Digital Asset Management Trace string format The trace strings must use the following format. Any text not in angled brackets (\"<>\") should not be changed: hcl.logging.<app-name>.client.<severity>.<client-hierarchy>.*=all The text strings in angled bracket placeholders must be replaced as described here. app-name The application name is configured in the Digital Asset Management shared settings. The following values are currently in use: medialibrary - for Digital Asset Management content-ui - for Content Composer severity This presents the logger severity level. The values used are: info debug client-hierarchy This specifies the subsections of the client application where tracing can be enabled. It is specified in dot-separated trace strings and is converted by the Digital Asset Management to colon-separated trace strings. The exact hierarchy depends on the client application. Examples include: app.* app.redux.* app.redux.actions.* Example trace strings Following are some examples of full trace strings for Content Composer and Digital Asset Management and their results: hcl.logging.content-ui.*=all - Enables debug message logging for all files in the DAM application user interface source folder app/redux/actions. Specifically, the debug string client:debug:app:redux:actions:* is set for the DAM client logger. This tracing is enabled either permanently or just for the current HCL Digital Experience 9.5 container. HCL Digital Experience 9.5 uses the IBM\u00ae WebSphere Application Server trace facilities to create trace information. If you need detailed trace output of Content Composer or Digital Asset Management to troubleshoot a problem, follow these steps in the succeeding sections. Permanently enable tracing Procedure Start WebSphere Application Server. Open the WebSphere Integrated Solutions Console. Go to Troubleshooting > Logs and Traces > HCL Digital Experience > Diagnostic Trace . Click Change log detail levels . Select the Enable Trace check box. Enter the trace details you would like to enable in the TraceSpecification field. For example, to trace all events, use the following value: hcl.logging.content-ui.*=all hcl.logging.medialibrary.*=all Save the changes. Restart HCL Digital Experience 9.5 container session. Enable tracing just for the current HCL Digital Experience 9.5 session Procedure Click the Administration menu icon. Then, click Portal Analysis > Enable Tracing . Enter any of the following values in the Append these trace settings field, For example, to trace all events, enter the following value: hcl.logging.content-ui.*=all hcl.logging.medialibrary.*=all Once a trace string is added or removed in the Tracing portlet, the Digital Experience platform page containing the Tracing portlet application must be refreshed in the browser. Important: WebSphere Application Server consolidates the trace strings list by removing strings that are logically contained within others. For example, if you have a string x.y.z.*=all in the list, it disappears when you add x.y.*=all","title":"Logging and tracing for containers and new services"},{"location":"trouble/logging_tracing_containers_and_new_services/#logging-and-tracing-for-containers-and-new-services","text":"The following table outlines the tracing options that are used to capture logging and tracing for HCL Digital Experience 9.5 container-based services with container update CF181 and later releases. This table outlines the server-side tracing available for HCL Digital Experience 9.5 CF181 and later containers. Container Log Location Default Logging Default Logging Amount DX Core /opt/HCL/wp_profile/logs/HCL Portal and HCL Web Content Manager *=info Small DX Remote Search /opt/HCL/AppServer/profiles/rs_profile/logs/server1 *=info Small Open LDAP /var/dx-openldap/log/slapd.log stats log connections/operations/results Small Cloud Operator stdout and stderr Info Large Media Library Operator stdout and stderr Info Large Ambassador stdout and stderr Info Small Experience API stdout and stderr *=Debug Extra-Large Digital Asset Management (DAM) stdout and stderr *=Debug Extra-Large Content Composer stdout and stderr *=Debug Large Postgres stdout and stderr Runtime: /var/lib/pgsql/11/data/log | *=Debug |Medium| If you're using the Experience API, Digital Asset Management, or Content Composer containers (where you have Digital Asset Management and/or Content Composer enabled) and are using a logging driver that logs to a file, you must configure log rotation for your Kubernetes environment. See the vendor documentation of your Kubernetes environment on how to configure this. Note: If you do not configure log rotation, you must frequently clean up the logs to prevent running out of disk space. Client-side browser tracing for these container environments can also be enabled when debugging user interface issues, and is described as follows. Tip: Transaction log (tranlog) . With multiple instances of Digital Experience 9.5 containers writing to a shared transaction log (tranlog) directory, data corruption could happen resulting to DX server start-up issues. To avoid data corruption, beginning with CF192, the default deployment creates individual 1 GB PersistentVolumes (pvs) and associated PersistentVolumeClaims (pvcs) for each DX 9.5 instance. This behavior is configured with the following values in the properties file used for deployment. dx.tranlogging: true - Set this value to false so that individual pvs for tranlogs are not created at the deployment time. dx.tranlogging.reclaim: Delete - Kubernetes setting for handling volumes when the deployment is removed. dx.tranlogging.stgclass: gp2 - Kubernetes default storage class for the environment. This is dependent on the Kubernetes flavor. If the value is empty, the default is gp2. dx.tranlogging.size: 4G - Size of the volume created. If the value set is invalid for the underlying storage environment, the default is 1G. Logging configuration for the DX core dx.splitlogging: true - Value examples (true, false, and empty). If the value is empty, the default is false. dx.logging.reclaim: Delete - Setting for handling volumes when the deployment is removed. dx.logging.stgclass: dx-deploy-stg - Storage class is dependent on the Kubernetes flavor. If the value is empty, the default is gp2. dx.logging.size: 2G - Maximum logging size. If the value is empty, the default is 1G. Enable the use of IBM WebSphere\u00ae Application Server trace facilities to create trace information for Content Composer and Digital Asset Management, integrated via the Digital Asset Management portlet in HCL Digital Experience 9.5 Container Update CF181 and later releases. Logging for these applications is enabled hierarchically for as much or as little of the application as needed. Note: In order to improve runtime performance, beginning with HCL Digital Experience 9.5 Container Update CF192, the DX Docker core image is revised so that the /opt/HCL/wp_profile/temp directory is a now a symbolic link to /opt/HCL/PortalServer/temp. This means that the output usually written to /opt/HCL/wp_profile/temp (including servlet cache, extensionregistry storage, and osgi_instance_location data) now writes to /opt/HCL/PortalServer/temp. Accessing this new temp location is possible only from within the DX container as the /opt/HCL/wp_profile/temp directory no longer exists in the persisted profile file system. Prerequisite: Install and configure Content Composer and Digital Asset Management to your Digital Experience 9.5 CF181 and later deployment. Documentation resource: Install Content Composer and Digital Asset Management Trace string format The trace strings must use the following format. Any text not in angled brackets (\"<>\") should not be changed: hcl.logging.<app-name>.client.<severity>.<client-hierarchy>.*=all The text strings in angled bracket placeholders must be replaced as described here. app-name The application name is configured in the Digital Asset Management shared settings. The following values are currently in use: medialibrary - for Digital Asset Management content-ui - for Content Composer severity This presents the logger severity level. The values used are: info debug client-hierarchy This specifies the subsections of the client application where tracing can be enabled. It is specified in dot-separated trace strings and is converted by the Digital Asset Management to colon-separated trace strings. The exact hierarchy depends on the client application. Examples include: app.* app.redux.* app.redux.actions.* Example trace strings Following are some examples of full trace strings for Content Composer and Digital Asset Management and their results: hcl.logging.content-ui.*=all - Enables debug message logging for all files in the DAM application user interface source folder app/redux/actions. Specifically, the debug string client:debug:app:redux:actions:* is set for the DAM client logger. This tracing is enabled either permanently or just for the current HCL Digital Experience 9.5 container. HCL Digital Experience 9.5 uses the IBM\u00ae WebSphere Application Server trace facilities to create trace information. If you need detailed trace output of Content Composer or Digital Asset Management to troubleshoot a problem, follow these steps in the succeeding sections.","title":"Logging and tracing for containers and new services"},{"location":"trouble/logging_tracing_containers_and_new_services/#permanently-enable-tracing","text":"Procedure Start WebSphere Application Server. Open the WebSphere Integrated Solutions Console. Go to Troubleshooting > Logs and Traces > HCL Digital Experience > Diagnostic Trace . Click Change log detail levels . Select the Enable Trace check box. Enter the trace details you would like to enable in the TraceSpecification field. For example, to trace all events, use the following value: hcl.logging.content-ui.*=all hcl.logging.medialibrary.*=all Save the changes. Restart HCL Digital Experience 9.5 container session.","title":"Permanently enable tracing"},{"location":"trouble/logging_tracing_containers_and_new_services/#enable-tracing-just-for-the-current-hcl-digital-experience-95-session","text":"Procedure Click the Administration menu icon. Then, click Portal Analysis > Enable Tracing . Enter any of the following values in the Append these trace settings field, For example, to trace all events, enter the following value: hcl.logging.content-ui.*=all hcl.logging.medialibrary.*=all Once a trace string is added or removed in the Tracing portlet, the Digital Experience platform page containing the Tracing portlet application must be refreshed in the browser. Important: WebSphere Application Server consolidates the trace strings list by removing strings that are logically contained within others. For example, if you have a string x.y.z.*=all in the list, it disappears when you add x.y.*=all","title":"Enable tracing just for the current\u00a0HCL Digital Experience 9.5\u00a0session"},{"location":"trouble/tbl_apdt_over/","text":"Data collection and symptom analysis There is one method to collect data and analyze symptoms for problem determination scenarios. You run a task that can collect and optionally send the data for you. Starting with HCL Digital Experience version 8.5, there is now a task to collect the configuration wizard logs. This task is only necessary if the wizard fails before the steps to create the wp_profile/ConfigEngine instance. wpcollector tool Complete the following steps: If the support team requested tracing, enable it now as instructed and then re-create the problem. If no tracing is requested, skip to the next step. Open a command prompt and change to the wp_profile_root /PortalServer/bin/ directory. Attention: You must run the wpcollector task from the wp_profile_root /PortalServer/bin/ directory. If you run the task from a different directory, the task fails. Run the following script to collect data: AIX\u00ae HP-UX Linux\u2122 Solaris z/OS\u00ae: ./wpcollector.sh IBM\u00ae i: wpcollector.sh Windows\u2122: wpcollector.bat If you did not automatically FTP your results, locate the wp.mustgather.zip file or the pmr-wp.mustgather-timestamp.zip file in the wp_profile_root /filesForAutoPD/ directory. Follow the instructions in \"Exchanging information with IBM Technical Support for problem determination\" to manually FTP your results. Restriction: If you try to extract the wp.mustgather.zip file, some collections might not expand properly if the path name exceeds the 256 character limitation. cwcollector tool Complete the following steps if the configuration wizard failed before it created the wp_profile/ConfigEngine instance: Open a command prompt and change to the AppServer_root /ConfigEngine directory. Run the following task to collect the configuration wizard logs: Tip: The logs are compressed and placed into the AppServer_root /filesForAutoPD directory. AIX\u00ae: ./ConfigEngine.sh collect-cw-logs -DPortalBinaryLocation=/usr/IBM/WebSphere/PortalServer -DWasPassword=password HP-UX Linux\u2122 Solaris: ./ConfigEngine.sh collect-cw-logs -DPortalBinaryLocation=/opt/IBM/WebSphere/PortalServer -DWasPassword=password IBM\u00ae i: ConfigEngine.sh collect-cw-logs -DPortalBinaryLocation=/QIBM/ProdData/WebSphere/PortalServer/V85/Server -DWasPassword=password Windows\u2122: ConfigEngine.bat collect-cw-logs -DPortalBinaryLocation=C:/IBM/WebSphere/PortalServer -DWasPassword=password z/OS\u00ae: ./ConfigEngine.sh collect-cw-logs -DPortalBinaryLocation=/usr/lpp/zPortalServer/V8R5M0 -DWasPassword=password Attention: If the collect-cw-logs task fails, run the stopserver server1 command from the AppServer_root /bin directory. Then, rerun the collect-cw-logs task. If you did not automatically FTP your results, locate the cw.mustgather.zip file or the pmr-cw.mustgather-timestamp.zip file in the AppServer_root /filesForAutoPD directory. Follow the instructions in \"Exchanging information with IBM Technical Support for problem determination\" to manually FTP your results. Troubleshooting: If the wpcollector task cannot process due to too many files, then flags can be set to collect a subset of all the files. -Dskip.XXX.XXXX= true can be set to not include files. \"collect-was-common-files-for-PD\" flag=\"skip.was.collection\" \"collect-portal-common-files-for-PD\" flag=\"skip.wp.collection\" \"collect-wp_profile-common-files-for-PD\" flag=\"skip.profile.collection\" \"action-remove-password-from-prop-files\" flag=\"skip.remove.pwd\" \"transfer-autopd-data\" flag=\"skip.file.transfer\" \"collect-trace-logs\" flag = \"skip.trace.collection\" \"collect_wps_information\" flag =\"skip.wps.collection\" \"collect_cisa_inventory_info\" flag =\"skip.cisa.collection\" \"collect-response-file\" flag=\"skip.resp.file.collection\" \"collect-iim-install-data\" flag =\"skip.iim.data\"","title":"Data collection and symptom analysis"},{"location":"trouble/tbl_apdt_over/#data-collection-and-symptom-analysis","text":"There is one method to collect data and analyze symptoms for problem determination scenarios. You run a task that can collect and optionally send the data for you. Starting with HCL Digital Experience version 8.5, there is now a task to collect the configuration wizard logs. This task is only necessary if the wizard fails before the steps to create the wp_profile/ConfigEngine instance. wpcollector tool Complete the following steps: If the support team requested tracing, enable it now as instructed and then re-create the problem. If no tracing is requested, skip to the next step. Open a command prompt and change to the wp_profile_root /PortalServer/bin/ directory. Attention: You must run the wpcollector task from the wp_profile_root /PortalServer/bin/ directory. If you run the task from a different directory, the task fails. Run the following script to collect data: AIX\u00ae HP-UX Linux\u2122 Solaris z/OS\u00ae: ./wpcollector.sh IBM\u00ae i: wpcollector.sh Windows\u2122: wpcollector.bat If you did not automatically FTP your results, locate the wp.mustgather.zip file or the pmr-wp.mustgather-timestamp.zip file in the wp_profile_root /filesForAutoPD/ directory. Follow the instructions in \"Exchanging information with IBM Technical Support for problem determination\" to manually FTP your results. Restriction: If you try to extract the wp.mustgather.zip file, some collections might not expand properly if the path name exceeds the 256 character limitation. cwcollector tool Complete the following steps if the configuration wizard failed before it created the wp_profile/ConfigEngine instance: Open a command prompt and change to the AppServer_root /ConfigEngine directory. Run the following task to collect the configuration wizard logs: Tip: The logs are compressed and placed into the AppServer_root /filesForAutoPD directory. AIX\u00ae: ./ConfigEngine.sh collect-cw-logs -DPortalBinaryLocation=/usr/IBM/WebSphere/PortalServer -DWasPassword=password HP-UX Linux\u2122 Solaris: ./ConfigEngine.sh collect-cw-logs -DPortalBinaryLocation=/opt/IBM/WebSphere/PortalServer -DWasPassword=password IBM\u00ae i: ConfigEngine.sh collect-cw-logs -DPortalBinaryLocation=/QIBM/ProdData/WebSphere/PortalServer/V85/Server -DWasPassword=password Windows\u2122: ConfigEngine.bat collect-cw-logs -DPortalBinaryLocation=C:/IBM/WebSphere/PortalServer -DWasPassword=password z/OS\u00ae: ./ConfigEngine.sh collect-cw-logs -DPortalBinaryLocation=/usr/lpp/zPortalServer/V8R5M0 -DWasPassword=password Attention: If the collect-cw-logs task fails, run the stopserver server1 command from the AppServer_root /bin directory. Then, rerun the collect-cw-logs task. If you did not automatically FTP your results, locate the cw.mustgather.zip file or the pmr-cw.mustgather-timestamp.zip file in the AppServer_root /filesForAutoPD directory. Follow the instructions in \"Exchanging information with IBM Technical Support for problem determination\" to manually FTP your results. Troubleshooting: If the wpcollector task cannot process due to too many files, then flags can be set to collect a subset of all the files. -Dskip.XXX.XXXX= true can be set to not include files. \"collect-was-common-files-for-PD\" flag=\"skip.was.collection\" \"collect-portal-common-files-for-PD\" flag=\"skip.wp.collection\" \"collect-wp_profile-common-files-for-PD\" flag=\"skip.profile.collection\" \"action-remove-password-from-prop-files\" flag=\"skip.remove.pwd\" \"transfer-autopd-data\" flag=\"skip.file.transfer\" \"collect-trace-logs\" flag = \"skip.trace.collection\" \"collect_wps_information\" flag =\"skip.wps.collection\" \"collect_cisa_inventory_info\" flag =\"skip.cisa.collection\" \"collect-response-file\" flag=\"skip.resp.file.collection\" \"collect-iim-install-data\" flag =\"skip.iim.data\"","title":"Data collection and symptom analysis"},{"location":"wcm/clear_themes_caches/","text":"How to Clear the Theme Caches The Theme Optimization Analyzer portlet which is part of the Portal administration gives users the ability to clear theme related caches. You can access the Theme Optimization Analyzer portlet in HCL Digital Experience 9.5. Log in to your HCL Digital Experience 9.5 platform, and select Themes from the Practitioner Studio navigator. Click Analyzer as follows: See Theme Optimization Analyzer for more information about the Theme Optimization Analyzer portlet. Theme Cache Invalidation API The Theme Cache Invalidation API is available with HCL DX CF192 and higher releases. This API allows the theme-related caches to be cleared via an HTTP POST to an endpoint in the Theme Optimization Analyzer . Note: Administration permissions are required to execute this request successfully. POST request URL: /wps/mycontenthandler/themeOptAnalyzerControls/invalidateCache Body content for the POST request Nothing is required in the request body. Response from the POST request If request is successful: NO_CONTENT (204) If user does not have administration permissions: FORBIDDEN (403) Caches cleared via the Request This endpoint clears theme optimization-related caches so that changes you make to the template, modules, and profiles of the theme are immediately available without restarting the server. Note: Cache replication ensures that the caches are cleared on other nodes in a cluster. This API only needs to be executed on one node of the cluster.","title":"How to Clear the Theme Caches"},{"location":"wcm/clear_themes_caches/#how-to-clear-the-theme-caches","text":"The Theme Optimization Analyzer portlet which is part of the Portal administration gives users the ability to clear theme related caches. You can access the Theme Optimization Analyzer portlet in HCL Digital Experience 9.5. Log in to your HCL Digital Experience 9.5 platform, and select Themes from the Practitioner Studio navigator. Click Analyzer as follows: See Theme Optimization Analyzer for more information about the Theme Optimization Analyzer portlet.","title":"How to Clear the Theme Caches"},{"location":"wcm/clear_themes_caches/#theme-cache-invalidation-api","text":"The Theme Cache Invalidation API is available with HCL DX CF192 and higher releases. This API allows the theme-related caches to be cleared via an HTTP POST to an endpoint in the Theme Optimization Analyzer . Note: Administration permissions are required to execute this request successfully. POST request URL: /wps/mycontenthandler/themeOptAnalyzerControls/invalidateCache Body content for the POST request Nothing is required in the request body. Response from the POST request If request is successful: NO_CONTENT (204) If user does not have administration permissions: FORBIDDEN (403) Caches cleared via the Request This endpoint clears theme optimization-related caches so that changes you make to the template, modules, and profiles of the theme are immediately available without restarting the server. Note: Cache replication ensures that the caches are cleared on other nodes in a cluster. This API only needs to be executed on one node of the cluster.","title":"Theme Cache Invalidation API"},{"location":"wcm/vanity_urls/","text":"Vanity URLs You can associate vanity URLs with portal pages and labels. Vanity URLs are short URLs that people can easily remember. They are shorter than full HCL Portal URLs. They are sometimes also called marketing URLs. You can publish vanity URLs for marketing campaigns through different channels, such as email or print. This way, you can use vanity URLs to direct customers to a specific portal page or content item. Interested site visitors who want to view your campaign can then remember or copy the short vanity URL and type it into the browser address field. Business users can create short and arbitrary URLs as vanity URLs. The vanity URLs can point to pages that marketing people can post in ads or magazines. To create vanity URLs, you use the HCL Portal toolbar. Businesses can provide URLs with the following benefits to their customers and portal site visitors: Business users can assign vanity URLs to pages or to content on pages easily and change them frequently, for example, for promotion purposes. For site visitors, vanity URLs are self-speaking, short, and easy to remember. Site visitors can easily remember and type vanity URLs. Technical and usage details about vanity URLs: Business and marketing users can easily define and manage vanity URLs by using the portal toolbar. Managing vanity URLs does not require administrator access and use of the portal administration. Vanity URLs include the host name and the vanity name. They are part of the metadata of the portal page to which they resolve. However, they are not bound to the hierarchy of the friendly name path. HCL Portal provides a new vanity URL servlet. That servlet is called if a URL contains the portion host/wps/vanityurl , followed by a vanity URL segment. For example, in the vanity URL host/wps/vanityurl/hotnews , hotnews is the vanity URL segment. The servlet resolves the vanity URL segment to the appropriate portal page. When a site visitor goes to a vanity URL, this URL does not remain in the browser URL address field. Instead, the portal resolves the vanity URL to the full portal page URL and redirects the site visitor to the appropriate portal page. Vanity URLs are part of the portal page and are syndicated with the page. They are stored in the portal page site area item. Therefore, to be able to use vanity URLs, you must enable Managed pages. You can give a portal page multiple vanity URLs. You can use a vanity URL to address one or more specific content items on the page. When a user accesses the vanity URL, the portal shows the page with the content item that you specified. You can choose a specific locale for the target page of the vanity URL. When a user accesses the page, the portal shows the page in the locale that you specified. You can also attach multiple locales to a vanity URL. This way, the user can view the page in the preferred language. In their ease of use, vanity URLs are similar to friendly URLs. However, unlike friendly URLs, they do not include the portal context. They are also not constructed as a portal navigation path; therefore portal site visitors cannot go to a vanity URL by using the portal navigation. You can make your vanity URLs even shorter by using an HTTP server rewrite rule. You can then omit the segment wps/vanityurl and reduce the vanity URL to the host name and the vanity URL segment as follows: host/hotnews . For more information, read Providing short vanity URLs . Example of a vanity URL for a portal page: A portal page can have the following friendly name path: host/wps/portal/home/products/newandexiciting . You can define a vanity URL segment that is named coolstuff . You can then post the following vanity URL to your customers: host/wps/vanityurl/coolstuff . You can reduce the vanity URL even further by using an HTTP server rewrite rule and then omitting the segment wps/vanityurl . You can now give your site visitors the shorter vanity URL: host/coolstuff . When a user enters the vanity URL in the browser address field, the vanity URL servlet resolves the vanity URL segment to the URL of the appropriate portal page. Vanity URLs and URL mappings: URL mappings were deprecated starting with HCL Portal Version 8.5. Instead, you can now use friendly URLs or Vanity URLs as an alternative to URL mapping. Vanity URLs are similar to URL mappings in that you can define them independent from the page hierarchy. However, the following differences apply between vanity URLs and URL mappings: Vanity URLs are managed by business and marketing users by using the toolbar, not by administrators by using the portal administration. This way, vanity URLs are easier to manage than URL mappings. Vanity URLs are not bound to the portal page hierarchy. Now, you can have a single path segment for the vanity URL. Vanity URLs are managed in Web Content Manager as part of a page. A vanity URL can therefore be part of a project. It can be affected by versioning, workflow and syndication. Vanity URLs do not have to contain the URL path segment /wps/portal . Additionally, if you use an HTTP server rewrite rule, you can omit the /wps/vanityurl segment as well. Vanity URLs are attached to pages and do not exist independently from pages. Vanity URLs are independent from the portal site and its content taxonomy and hierarchy. In this regard, vanity URLs are similar to URL Mappings, but they do not include the portal context. If you prefer to use URL mappings, you can continue to use existing URL mappings. You can also reinstall the old URL mapping portlet. You find the installable WAR file for the portlet under PortalServer/ap/wp.ap.urlmapping/installableApps/urlmapping.war. Deciding between vanity URLs and friendly URLs Depending on your requirements, you can use vanity URLs, or friendly URLs: If you want to have a short URL as an entry point to a specific portal page or content item, use a vanity URL. If you want to have a friendly URL that your site visitors see when the portal shows the page, use a friendly name. If you want to be able to publish the page through the Web Content Manager workflow, use a vanity URL. For example, this URL can be useful for a marketing campaign. If you want to address a specific portal page through URL generation tags or APIs, use unique name IDs. For more information, see URL generation in HCL Portal . You can create both vanity URLs and friendly URLs for the same portal page.","title":"Vanity URLs"},{"location":"wcm/vanity_urls/#vanity-urls","text":"You can associate vanity URLs with portal pages and labels. Vanity URLs are short URLs that people can easily remember. They are shorter than full HCL Portal URLs. They are sometimes also called marketing URLs. You can publish vanity URLs for marketing campaigns through different channels, such as email or print. This way, you can use vanity URLs to direct customers to a specific portal page or content item. Interested site visitors who want to view your campaign can then remember or copy the short vanity URL and type it into the browser address field. Business users can create short and arbitrary URLs as vanity URLs. The vanity URLs can point to pages that marketing people can post in ads or magazines. To create vanity URLs, you use the HCL Portal toolbar. Businesses can provide URLs with the following benefits to their customers and portal site visitors: Business users can assign vanity URLs to pages or to content on pages easily and change them frequently, for example, for promotion purposes. For site visitors, vanity URLs are self-speaking, short, and easy to remember. Site visitors can easily remember and type vanity URLs. Technical and usage details about vanity URLs: Business and marketing users can easily define and manage vanity URLs by using the portal toolbar. Managing vanity URLs does not require administrator access and use of the portal administration. Vanity URLs include the host name and the vanity name. They are part of the metadata of the portal page to which they resolve. However, they are not bound to the hierarchy of the friendly name path. HCL Portal provides a new vanity URL servlet. That servlet is called if a URL contains the portion host/wps/vanityurl , followed by a vanity URL segment. For example, in the vanity URL host/wps/vanityurl/hotnews , hotnews is the vanity URL segment. The servlet resolves the vanity URL segment to the appropriate portal page. When a site visitor goes to a vanity URL, this URL does not remain in the browser URL address field. Instead, the portal resolves the vanity URL to the full portal page URL and redirects the site visitor to the appropriate portal page. Vanity URLs are part of the portal page and are syndicated with the page. They are stored in the portal page site area item. Therefore, to be able to use vanity URLs, you must enable Managed pages. You can give a portal page multiple vanity URLs. You can use a vanity URL to address one or more specific content items on the page. When a user accesses the vanity URL, the portal shows the page with the content item that you specified. You can choose a specific locale for the target page of the vanity URL. When a user accesses the page, the portal shows the page in the locale that you specified. You can also attach multiple locales to a vanity URL. This way, the user can view the page in the preferred language. In their ease of use, vanity URLs are similar to friendly URLs. However, unlike friendly URLs, they do not include the portal context. They are also not constructed as a portal navigation path; therefore portal site visitors cannot go to a vanity URL by using the portal navigation. You can make your vanity URLs even shorter by using an HTTP server rewrite rule. You can then omit the segment wps/vanityurl and reduce the vanity URL to the host name and the vanity URL segment as follows: host/hotnews . For more information, read Providing short vanity URLs . Example of a vanity URL for a portal page: A portal page can have the following friendly name path: host/wps/portal/home/products/newandexiciting . You can define a vanity URL segment that is named coolstuff . You can then post the following vanity URL to your customers: host/wps/vanityurl/coolstuff . You can reduce the vanity URL even further by using an HTTP server rewrite rule and then omitting the segment wps/vanityurl . You can now give your site visitors the shorter vanity URL: host/coolstuff . When a user enters the vanity URL in the browser address field, the vanity URL servlet resolves the vanity URL segment to the URL of the appropriate portal page. Vanity URLs and URL mappings: URL mappings were deprecated starting with HCL Portal Version 8.5. Instead, you can now use friendly URLs or Vanity URLs as an alternative to URL mapping. Vanity URLs are similar to URL mappings in that you can define them independent from the page hierarchy. However, the following differences apply between vanity URLs and URL mappings: Vanity URLs are managed by business and marketing users by using the toolbar, not by administrators by using the portal administration. This way, vanity URLs are easier to manage than URL mappings. Vanity URLs are not bound to the portal page hierarchy. Now, you can have a single path segment for the vanity URL. Vanity URLs are managed in Web Content Manager as part of a page. A vanity URL can therefore be part of a project. It can be affected by versioning, workflow and syndication. Vanity URLs do not have to contain the URL path segment /wps/portal . Additionally, if you use an HTTP server rewrite rule, you can omit the /wps/vanityurl segment as well. Vanity URLs are attached to pages and do not exist independently from pages. Vanity URLs are independent from the portal site and its content taxonomy and hierarchy. In this regard, vanity URLs are similar to URL Mappings, but they do not include the portal context. If you prefer to use URL mappings, you can continue to use existing URL mappings. You can also reinstall the old URL mapping portlet. You find the installable WAR file for the portlet under PortalServer/ap/wp.ap.urlmapping/installableApps/urlmapping.war. Deciding between vanity URLs and friendly URLs Depending on your requirements, you can use vanity URLs, or friendly URLs: If you want to have a short URL as an entry point to a specific portal page or content item, use a vanity URL. If you want to have a friendly URL that your site visitors see when the portal shows the page, use a friendly name. If you want to be able to publish the page through the Web Content Manager workflow, use a vanity URL. For example, this URL can be useful for a marketing campaign. If you want to address a specific portal page through URL generation tags or APIs, use unique name IDs. For more information, see URL generation in HCL Portal . You can create both vanity URLs and friendly URLs for the same portal page.","title":"Vanity URLs"},{"location":"wcm/wcm_REST_web_content_manager_access_control_filter/","text":"Web Content Manager Access Control Filter REST API This API allows you to filter access control roles using the WCM Query API. All other parameters like parent or type still apply, so one can, for example, find all libraries the user has the Editor role on. Using the Web Content Manager Access Control Filter REST API Endpoint It extends the existing search query API and adds a new parameter. See REST Query service for web content and REST Query parameters for more information. GET request to: http://host:port/wps/mycontenthandler/wcmrest/query?filteraccess=... Sample URL: http://localhost:10039/wps/mycontenthandler/!ut/p/digest!rQXplcJ7_Lmlz7rU8WOpbA/wcmrest/query?parentid=wcmrest%3a04b24105-2ea0-422f-be83-e009a7766c1b&filteraccess=Editor Expected Body The body can have the basic WCM structure: <?xml version=\"1.0\" encoding=\"UTF-8\"?> <feed xmlns=\"http://www.w3.org/2005/Atom\" xmlns:wcm=\"http://www.ibm.com/xmlns/wcm/8.0\"> </feed> Expected Headers LTPA token of the user. Also work anonymously. Query Parameters filteraccess : Role to be checked. Valid roles: User, Editor, Admin, Manager, Contributor, ... Return Body The found results. Same as when calling existing query API Sample: <?xml version=\"1.0\" encoding=\"UTF-8\"?><feed xmlns=\"http://www.w3.org/2005/Atom\" xmlns:wcm=\"http://www.ibm.com/xmlns/wcm/8.0\"> <id>wcmrest:query?filteraccess=Contributor<![CDATA[&parentid=wcmrest%3A04b24105-2ea0-422f-be83-e009a7766c1b]]></id> <title>wcmrest:query?filteraccess=Contributor<![CDATA[&parentid=wcmrest%3A04b24105-2ea0-422f-be83-e009a7766c1b]]></title> <updated>2020-12-16T21:36:14.787Z</updated> <total>5</total> <entry> <id>wcmrest:37ed6e5f-f7c3-40aa-a7b3-54c31f81e9ce</id> <title xml:lang=\"en\">Sample Article</title> <wcm:displayTitle xml:lang=\"en\">Sample Article</wcm:displayTitle> <summary xml:lang=\"en\"></summary> <wcm:name>Sample Article</wcm:name> <wcm:type>Content</wcm:type> <updated>2020-11-21T09:05:47.552Z</updated> <wcm:lastModifier> <wcm:distinguishedName>uid=wpsadmin,o=defaultWIMFileBasedRealm</wcm:distinguishedName> <uri>/wps/mycontenthandler/!ut/p/digest!9fMog84Jk6tJXg_WMEMrOA/um/users/profiles/Z9eAeOHO8MQOCH1PCMMOCGHC0JMG6NHDCMM4C5BPCJM8C4RC6JOO63BPC6RK6M1</uri> <name>wpsadmin</name> <type>USER</type> </wcm:lastModifier> <link rel=\"edit\" href=\"/wps/mycontenthandler/!ut/p/digest!9fMog84Jk6tJXg_WMEMrOA/wcmrest/Content/37ed6e5f-f7c3-40aa-a7b3-54c31f81e9ce\" xml:lang=\"en\" label=\"Edit\"/> <link rel=\"alternate\" href=\"/wps/mycontenthandler/!ut/p/digest!9fMog84Jk6tJXg_WMEMrOA/wcmrest/Content/37ed6e5f-f7c3-40aa-a7b3-54c31f81e9ce\" xml:lang=\"en\" label=\"Read\"/> <link rel=\"library\" href=\"/wps/mycontenthandler/!ut/p/digest!9fMog84Jk6tJXg_WMEMrOA/wcmrest/Library/4bee8df4-0f62-427b-a40b-2b3a6ad0b415\" xml:lang=\"en\" label=\"Library\"/> <link rel=\"preview\" href=\"/wps/poc/!ut/p/digest!9fMog84Jk6tJXg_WMEMrOA/wcm/oid:37ed6e5f-f7c3-40aa-a7b3-54c31f81e9ce\" xml:lang=\"en\" label=\"Preview\"/> <category scheme=\"wcmrest:workflowState\" term=\"PUBLISHED\" label=\"Published\" xml:lang=\"en\"/> </entry> <entry> <id>wcmrest:51473374-7593-4c9e-a0f8-3ce0fe5353a0</id> <title xml:lang=\"en\">Sample Article 2</title> <wcm:displayTitle xml:lang=\"en\">Sample Article 2</wcm:displayTitle> <summary xml:lang=\"en\"></summary> <wcm:name>Sample Article 2</wcm:name> <wcm:type>Content</wcm:type> <updated>2020-11-21T09:05:47.552Z</updated> <wcm:lastModifier> <wcm:distinguishedName>uid=wpsadmin,o=defaultWIMFileBasedRealm</wcm:distinguishedName> <uri>/wps/mycontenthandler/!ut/p/digest!9fMog84Jk6tJXg_WMEMrOA/um/users/profiles/Z9eAeOHO8MQOCH1PCMMOCGHC0JMG6NHDCMM4C5BPCJM8C4RC6JOO63BPC6RK6M1</uri> <name>wpsadmin</name> <type>USER</type> </wcm:lastModifier> <link rel=\"edit\" href=\"/wps/mycontenthandler/!ut/p/digest!9fMog84Jk6tJXg_WMEMrOA/wcmrest/Content/51473374-7593-4c9e-a0f8-3ce0fe5353a0\" xml:lang=\"en\" label=\"Edit\"/> <link rel=\"alternate\" href=\"/wps/mycontenthandler/!ut/p/digest!9fMog84Jk6tJXg_WMEMrOA/wcmrest/Content/51473374-7593-4c9e-a0f8-3ce0fe5353a0\" xml:lang=\"en\" label=\"Read\"/> <link rel=\"library\" href=\"/wps/mycontenthandler/!ut/p/digest!9fMog84Jk6tJXg_WMEMrOA/wcmrest/Library/4bee8df4-0f62-427b-a40b-2b3a6ad0b415\" xml:lang=\"en\" label=\"Library\"/> <link rel=\"preview\" href=\"/wps/poc/!ut/p/digest!9fMog84Jk6tJXg_WMEMrOA/wcm/oid:51473374-7593-4c9e-a0f8-3ce0fe5353a0\" xml:lang=\"en\" label=\"Preview\"/> <category scheme=\"wcmrest:workflowState\" term=\"PUBLISHED\" label=\"Published\" xml:lang=\"en\"/> </entry> <entry> <id>wcmrest:0b5aa571-5224-4c31-b48f-6c77e50177c7</id> <title xml:lang=\"en\">file</title> <summary xml:lang=\"en\">xcvvbxv</summary> <wcm:name>file</wcm:name> <wcm:type>Content</wcm:type> <updated>2020-12-09T21:50:10.601Z</updated> <author> <wcm:distinguishedName>uid=wpsadmin,o=defaultWIMFileBasedRealm</wcm:distinguishedName> <uri>/wps/mycontenthandler/!ut/p/digest!9fMog84Jk6tJXg_WMEMrOA/um/users/profiles/Z9eAeOHO8MQOCH1PCMMOCGHC0JMG6NHDCMM4C5BPCJM8C4RC6JOO63BPC6RK6M1</uri> <name>wpsadmin</name> <type>USER</type> </author> <wcm:lastModifier> <wcm:distinguishedName>uid=wpsadmin,o=defaultWIMFileBasedRealm</wcm:distinguishedName> <uri>/wps/mycontenthandler/!ut/p/digest!9fMog84Jk6tJXg_WMEMrOA/um/users/profiles/Z9eAeOHO8MQOCH1PCMMOCGHC0JMG6NHDCMM4C5BPCJM8C4RC6JOO63BPC6RK6M1</uri> <name>wpsadmin</name> <type>USER</type> </wcm:lastModifier> <link rel=\"edit\" href=\"/wps/mycontenthandler/!ut/p/digest!9fMog84Jk6tJXg_WMEMrOA/wcmrest/Content/0b5aa571-5224-4c31-b48f-6c77e50177c7\" xml:lang=\"en\" label=\"Edit\"/> <link rel=\"alternate\" href=\"/wps/mycontenthandler/!ut/p/digest!9fMog84Jk6tJXg_WMEMrOA/wcmrest/Content/0b5aa571-5224-4c31-b48f-6c77e50177c7\" xml:lang=\"en\" label=\"Read\"/> <link rel=\"library\" href=\"/wps/mycontenthandler/!ut/p/digest!9fMog84Jk6tJXg_WMEMrOA/wcmrest/Library/4bee8df4-0f62-427b-a40b-2b3a6ad0b415\" xml:lang=\"en\" label=\"Library\"/> <link rel=\"preview\" href=\"/wps/poc/!ut/p/digest!9fMog84Jk6tJXg_WMEMrOA/wcm/oid:0b5aa571-5224-4c31-b48f-6c77e50177c7\" xml:lang=\"en\" label=\"Preview\"/> <category scheme=\"wcmrest:workflowState\" term=\"PUBLISHED\" label=\"Published\" xml:lang=\"en\"/> </entry> <entry> <id>wcmrest:6fcdb516-f5ec-4390-b9f8-4d0f26086226</id> <title xml:lang=\"en\">test</title> <summary xml:lang=\"en\"></summary> <wcm:name>test</wcm:name> <wcm:type>Content</wcm:type> <updated>2020-12-08T15:12:05.908Z</updated> <author> <wcm:distinguishedName>uid=wpsadmin,o=defaultWIMFileBasedRealm</wcm:distinguishedName> <uri>/wps/mycontenthandler/!ut/p/digest!9fMog84Jk6tJXg_WMEMrOA/um/users/profiles/Z9eAeOHO8MQOCH1PCMMOCGHC0JMG6NHDCMM4C5BPCJM8C4RC6JOO63BPC6RK6M1</uri> <name>wpsadmin</name> <type>USER</type> </author> <wcm:lastModifier> <wcm:distinguishedName>uid=wpsadmin,o=defaultWIMFileBasedRealm</wcm:distinguishedName> <uri>/wps/mycontenthandler/!ut/p/digest!9fMog84Jk6tJXg_WMEMrOA/um/users/profiles/Z9eAeOHO8MQOCH1PCMMOCGHC0JMG6NHDCMM4C5BPCJM8C4RC6JOO63BPC6RK6M1</uri> <name>wpsadmin</name> <type>USER</type> </wcm:lastModifier> <link rel=\"edit\" href=\"/wps/mycontenthandler/!ut/p/digest!9fMog84Jk6tJXg_WMEMrOA/wcmrest/Content/6fcdb516-f5ec-4390-b9f8-4d0f26086226\" xml:lang=\"en\" label=\"Edit\"/> <link rel=\"alternate\" href=\"/wps/mycontenthandler/!ut/p/digest!9fMog84Jk6tJXg_WMEMrOA/wcmrest/Content/6fcdb516-f5ec-4390-b9f8-4d0f26086226\" xml:lang=\"en\" label=\"Read\"/> <link rel=\"library\" href=\"/wps/mycontenthandler/!ut/p/digest!9fMog84Jk6tJXg_WMEMrOA/wcmrest/Library/4bee8df4-0f62-427b-a40b-2b3a6ad0b415\" xml:lang=\"en\" label=\"Library\"/> <link rel=\"preview\" href=\"/wps/poc/!ut/p/digest!9fMog84Jk6tJXg_WMEMrOA/wcm/oid:6fcdb516-f5ec-4390-b9f8-4d0f26086226\" xml:lang=\"en\" label=\"Preview\"/> <category scheme=\"wcmrest:workflowState\" term=\"EXPIRED\" label=\"Expired\" xml:lang=\"en\"/> </entry> <entry> <id>wcmrest:f04719c0-a9ba-49e0-92e2-5321f15ab2c8</id> <title xml:lang=\"en\">image</title> <summary xml:lang=\"en\"></summary> <wcm:name>image</wcm:name> <wcm:type>Content</wcm:type> <updated>2020-12-09T22:15:23.162Z</updated> <author> <wcm:distinguishedName>uid=wpsadmin,o=defaultWIMFileBasedRealm</wcm:distinguishedName> <uri>/wps/mycontenthandler/!ut/p/digest!9fMog84Jk6tJXg_WMEMrOA/um/users/profiles/Z9eAeOHO8MQOCH1PCMMOCGHC0JMG6NHDCMM4C5BPCJM8C4RC6JOO63BPC6RK6M1</uri> <name>wpsadmin</name> <type>USER</type> </author> <wcm:lastModifier> <wcm:distinguishedName>uid=wpsadmin,o=defaultWIMFileBasedRealm</wcm:distinguishedName> <uri>/wps/mycontenthandler/!ut/p/digest!9fMog84Jk6tJXg_WMEMrOA/um/users/profiles/Z9eAeOHO8MQOCH1PCMMOCGHC0JMG6NHDCMM4C5BPCJM8C4RC6JOO63BPC6RK6M1</uri> <name>wpsadmin</name> <type>USER</type> </wcm:lastModifier> <link rel=\"edit\" href=\"/wps/mycontenthandler/!ut/p/digest!9fMog84Jk6tJXg_WMEMrOA/wcmrest/Content/f04719c0-a9ba-49e0-92e2-5321f15ab2c8\" xml:lang=\"en\" label=\"Edit\"/> <link rel=\"alternate\" href=\"/wps/mycontenthandler/!ut/p/digest!9fMog84Jk6tJXg_WMEMrOA/wcmrest/Content/f04719c0-a9ba-49e0-92e2-5321f15ab2c8\" xml:lang=\"en\" label=\"Read\"/> <link rel=\"library\" href=\"/wps/mycontenthandler/!ut/p/digest!9fMog84Jk6tJXg_WMEMrOA/wcmrest/Library/4bee8df4-0f62-427b-a40b-2b3a6ad0b415\" xml:lang=\"en\" label=\"Library\"/> <link rel=\"preview\" href=\"/wps/poc/!ut/p/digest!9fMog84Jk6tJXg_WMEMrOA/wcm/oid:f04719c0-a9ba-49e0-92e2-5321f15ab2c8\" xml:lang=\"en\" label=\"Preview\"/> <category scheme=\"wcmrest:workflowState\" term=\"PUBLISHED\" label=\"Published\" xml:lang=\"en\"/> </entry> </feed>","title":"Web Content Manager Access Control Filter REST API"},{"location":"wcm/wcm_REST_web_content_manager_access_control_filter/#web-content-manager-access-control-filter-rest-api","text":"This API allows you to filter access control roles using the WCM Query API. All other parameters like parent or type still apply, so one can, for example, find all libraries the user has the Editor role on.","title":"Web Content Manager Access Control Filter REST API"},{"location":"wcm/wcm_REST_web_content_manager_access_control_filter/#using-the-web-content-manager-access-control-filter-rest-api","text":"Endpoint It extends the existing search query API and adds a new parameter. See REST Query service for web content and REST Query parameters for more information. GET request to: http://host:port/wps/mycontenthandler/wcmrest/query?filteraccess=... Sample URL: http://localhost:10039/wps/mycontenthandler/!ut/p/digest!rQXplcJ7_Lmlz7rU8WOpbA/wcmrest/query?parentid=wcmrest%3a04b24105-2ea0-422f-be83-e009a7766c1b&filteraccess=Editor Expected Body The body can have the basic WCM structure: <?xml version=\"1.0\" encoding=\"UTF-8\"?> <feed xmlns=\"http://www.w3.org/2005/Atom\" xmlns:wcm=\"http://www.ibm.com/xmlns/wcm/8.0\"> </feed> Expected Headers LTPA token of the user. Also work anonymously. Query Parameters filteraccess : Role to be checked. Valid roles: User, Editor, Admin, Manager, Contributor, ... Return Body The found results. Same as when calling existing query API Sample: <?xml version=\"1.0\" encoding=\"UTF-8\"?><feed xmlns=\"http://www.w3.org/2005/Atom\" xmlns:wcm=\"http://www.ibm.com/xmlns/wcm/8.0\"> <id>wcmrest:query?filteraccess=Contributor<![CDATA[&parentid=wcmrest%3A04b24105-2ea0-422f-be83-e009a7766c1b]]></id> <title>wcmrest:query?filteraccess=Contributor<![CDATA[&parentid=wcmrest%3A04b24105-2ea0-422f-be83-e009a7766c1b]]></title> <updated>2020-12-16T21:36:14.787Z</updated> <total>5</total> <entry> <id>wcmrest:37ed6e5f-f7c3-40aa-a7b3-54c31f81e9ce</id> <title xml:lang=\"en\">Sample Article</title> <wcm:displayTitle xml:lang=\"en\">Sample Article</wcm:displayTitle> <summary xml:lang=\"en\"></summary> <wcm:name>Sample Article</wcm:name> <wcm:type>Content</wcm:type> <updated>2020-11-21T09:05:47.552Z</updated> <wcm:lastModifier> <wcm:distinguishedName>uid=wpsadmin,o=defaultWIMFileBasedRealm</wcm:distinguishedName> <uri>/wps/mycontenthandler/!ut/p/digest!9fMog84Jk6tJXg_WMEMrOA/um/users/profiles/Z9eAeOHO8MQOCH1PCMMOCGHC0JMG6NHDCMM4C5BPCJM8C4RC6JOO63BPC6RK6M1</uri> <name>wpsadmin</name> <type>USER</type> </wcm:lastModifier> <link rel=\"edit\" href=\"/wps/mycontenthandler/!ut/p/digest!9fMog84Jk6tJXg_WMEMrOA/wcmrest/Content/37ed6e5f-f7c3-40aa-a7b3-54c31f81e9ce\" xml:lang=\"en\" label=\"Edit\"/> <link rel=\"alternate\" href=\"/wps/mycontenthandler/!ut/p/digest!9fMog84Jk6tJXg_WMEMrOA/wcmrest/Content/37ed6e5f-f7c3-40aa-a7b3-54c31f81e9ce\" xml:lang=\"en\" label=\"Read\"/> <link rel=\"library\" href=\"/wps/mycontenthandler/!ut/p/digest!9fMog84Jk6tJXg_WMEMrOA/wcmrest/Library/4bee8df4-0f62-427b-a40b-2b3a6ad0b415\" xml:lang=\"en\" label=\"Library\"/> <link rel=\"preview\" href=\"/wps/poc/!ut/p/digest!9fMog84Jk6tJXg_WMEMrOA/wcm/oid:37ed6e5f-f7c3-40aa-a7b3-54c31f81e9ce\" xml:lang=\"en\" label=\"Preview\"/> <category scheme=\"wcmrest:workflowState\" term=\"PUBLISHED\" label=\"Published\" xml:lang=\"en\"/> </entry> <entry> <id>wcmrest:51473374-7593-4c9e-a0f8-3ce0fe5353a0</id> <title xml:lang=\"en\">Sample Article 2</title> <wcm:displayTitle xml:lang=\"en\">Sample Article 2</wcm:displayTitle> <summary xml:lang=\"en\"></summary> <wcm:name>Sample Article 2</wcm:name> <wcm:type>Content</wcm:type> <updated>2020-11-21T09:05:47.552Z</updated> <wcm:lastModifier> <wcm:distinguishedName>uid=wpsadmin,o=defaultWIMFileBasedRealm</wcm:distinguishedName> <uri>/wps/mycontenthandler/!ut/p/digest!9fMog84Jk6tJXg_WMEMrOA/um/users/profiles/Z9eAeOHO8MQOCH1PCMMOCGHC0JMG6NHDCMM4C5BPCJM8C4RC6JOO63BPC6RK6M1</uri> <name>wpsadmin</name> <type>USER</type> </wcm:lastModifier> <link rel=\"edit\" href=\"/wps/mycontenthandler/!ut/p/digest!9fMog84Jk6tJXg_WMEMrOA/wcmrest/Content/51473374-7593-4c9e-a0f8-3ce0fe5353a0\" xml:lang=\"en\" label=\"Edit\"/> <link rel=\"alternate\" href=\"/wps/mycontenthandler/!ut/p/digest!9fMog84Jk6tJXg_WMEMrOA/wcmrest/Content/51473374-7593-4c9e-a0f8-3ce0fe5353a0\" xml:lang=\"en\" label=\"Read\"/> <link rel=\"library\" href=\"/wps/mycontenthandler/!ut/p/digest!9fMog84Jk6tJXg_WMEMrOA/wcmrest/Library/4bee8df4-0f62-427b-a40b-2b3a6ad0b415\" xml:lang=\"en\" label=\"Library\"/> <link rel=\"preview\" href=\"/wps/poc/!ut/p/digest!9fMog84Jk6tJXg_WMEMrOA/wcm/oid:51473374-7593-4c9e-a0f8-3ce0fe5353a0\" xml:lang=\"en\" label=\"Preview\"/> <category scheme=\"wcmrest:workflowState\" term=\"PUBLISHED\" label=\"Published\" xml:lang=\"en\"/> </entry> <entry> <id>wcmrest:0b5aa571-5224-4c31-b48f-6c77e50177c7</id> <title xml:lang=\"en\">file</title> <summary xml:lang=\"en\">xcvvbxv</summary> <wcm:name>file</wcm:name> <wcm:type>Content</wcm:type> <updated>2020-12-09T21:50:10.601Z</updated> <author> <wcm:distinguishedName>uid=wpsadmin,o=defaultWIMFileBasedRealm</wcm:distinguishedName> <uri>/wps/mycontenthandler/!ut/p/digest!9fMog84Jk6tJXg_WMEMrOA/um/users/profiles/Z9eAeOHO8MQOCH1PCMMOCGHC0JMG6NHDCMM4C5BPCJM8C4RC6JOO63BPC6RK6M1</uri> <name>wpsadmin</name> <type>USER</type> </author> <wcm:lastModifier> <wcm:distinguishedName>uid=wpsadmin,o=defaultWIMFileBasedRealm</wcm:distinguishedName> <uri>/wps/mycontenthandler/!ut/p/digest!9fMog84Jk6tJXg_WMEMrOA/um/users/profiles/Z9eAeOHO8MQOCH1PCMMOCGHC0JMG6NHDCMM4C5BPCJM8C4RC6JOO63BPC6RK6M1</uri> <name>wpsadmin</name> <type>USER</type> </wcm:lastModifier> <link rel=\"edit\" href=\"/wps/mycontenthandler/!ut/p/digest!9fMog84Jk6tJXg_WMEMrOA/wcmrest/Content/0b5aa571-5224-4c31-b48f-6c77e50177c7\" xml:lang=\"en\" label=\"Edit\"/> <link rel=\"alternate\" href=\"/wps/mycontenthandler/!ut/p/digest!9fMog84Jk6tJXg_WMEMrOA/wcmrest/Content/0b5aa571-5224-4c31-b48f-6c77e50177c7\" xml:lang=\"en\" label=\"Read\"/> <link rel=\"library\" href=\"/wps/mycontenthandler/!ut/p/digest!9fMog84Jk6tJXg_WMEMrOA/wcmrest/Library/4bee8df4-0f62-427b-a40b-2b3a6ad0b415\" xml:lang=\"en\" label=\"Library\"/> <link rel=\"preview\" href=\"/wps/poc/!ut/p/digest!9fMog84Jk6tJXg_WMEMrOA/wcm/oid:0b5aa571-5224-4c31-b48f-6c77e50177c7\" xml:lang=\"en\" label=\"Preview\"/> <category scheme=\"wcmrest:workflowState\" term=\"PUBLISHED\" label=\"Published\" xml:lang=\"en\"/> </entry> <entry> <id>wcmrest:6fcdb516-f5ec-4390-b9f8-4d0f26086226</id> <title xml:lang=\"en\">test</title> <summary xml:lang=\"en\"></summary> <wcm:name>test</wcm:name> <wcm:type>Content</wcm:type> <updated>2020-12-08T15:12:05.908Z</updated> <author> <wcm:distinguishedName>uid=wpsadmin,o=defaultWIMFileBasedRealm</wcm:distinguishedName> <uri>/wps/mycontenthandler/!ut/p/digest!9fMog84Jk6tJXg_WMEMrOA/um/users/profiles/Z9eAeOHO8MQOCH1PCMMOCGHC0JMG6NHDCMM4C5BPCJM8C4RC6JOO63BPC6RK6M1</uri> <name>wpsadmin</name> <type>USER</type> </author> <wcm:lastModifier> <wcm:distinguishedName>uid=wpsadmin,o=defaultWIMFileBasedRealm</wcm:distinguishedName> <uri>/wps/mycontenthandler/!ut/p/digest!9fMog84Jk6tJXg_WMEMrOA/um/users/profiles/Z9eAeOHO8MQOCH1PCMMOCGHC0JMG6NHDCMM4C5BPCJM8C4RC6JOO63BPC6RK6M1</uri> <name>wpsadmin</name> <type>USER</type> </wcm:lastModifier> <link rel=\"edit\" href=\"/wps/mycontenthandler/!ut/p/digest!9fMog84Jk6tJXg_WMEMrOA/wcmrest/Content/6fcdb516-f5ec-4390-b9f8-4d0f26086226\" xml:lang=\"en\" label=\"Edit\"/> <link rel=\"alternate\" href=\"/wps/mycontenthandler/!ut/p/digest!9fMog84Jk6tJXg_WMEMrOA/wcmrest/Content/6fcdb516-f5ec-4390-b9f8-4d0f26086226\" xml:lang=\"en\" label=\"Read\"/> <link rel=\"library\" href=\"/wps/mycontenthandler/!ut/p/digest!9fMog84Jk6tJXg_WMEMrOA/wcmrest/Library/4bee8df4-0f62-427b-a40b-2b3a6ad0b415\" xml:lang=\"en\" label=\"Library\"/> <link rel=\"preview\" href=\"/wps/poc/!ut/p/digest!9fMog84Jk6tJXg_WMEMrOA/wcm/oid:6fcdb516-f5ec-4390-b9f8-4d0f26086226\" xml:lang=\"en\" label=\"Preview\"/> <category scheme=\"wcmrest:workflowState\" term=\"EXPIRED\" label=\"Expired\" xml:lang=\"en\"/> </entry> <entry> <id>wcmrest:f04719c0-a9ba-49e0-92e2-5321f15ab2c8</id> <title xml:lang=\"en\">image</title> <summary xml:lang=\"en\"></summary> <wcm:name>image</wcm:name> <wcm:type>Content</wcm:type> <updated>2020-12-09T22:15:23.162Z</updated> <author> <wcm:distinguishedName>uid=wpsadmin,o=defaultWIMFileBasedRealm</wcm:distinguishedName> <uri>/wps/mycontenthandler/!ut/p/digest!9fMog84Jk6tJXg_WMEMrOA/um/users/profiles/Z9eAeOHO8MQOCH1PCMMOCGHC0JMG6NHDCMM4C5BPCJM8C4RC6JOO63BPC6RK6M1</uri> <name>wpsadmin</name> <type>USER</type> </author> <wcm:lastModifier> <wcm:distinguishedName>uid=wpsadmin,o=defaultWIMFileBasedRealm</wcm:distinguishedName> <uri>/wps/mycontenthandler/!ut/p/digest!9fMog84Jk6tJXg_WMEMrOA/um/users/profiles/Z9eAeOHO8MQOCH1PCMMOCGHC0JMG6NHDCMM4C5BPCJM8C4RC6JOO63BPC6RK6M1</uri> <name>wpsadmin</name> <type>USER</type> </wcm:lastModifier> <link rel=\"edit\" href=\"/wps/mycontenthandler/!ut/p/digest!9fMog84Jk6tJXg_WMEMrOA/wcmrest/Content/f04719c0-a9ba-49e0-92e2-5321f15ab2c8\" xml:lang=\"en\" label=\"Edit\"/> <link rel=\"alternate\" href=\"/wps/mycontenthandler/!ut/p/digest!9fMog84Jk6tJXg_WMEMrOA/wcmrest/Content/f04719c0-a9ba-49e0-92e2-5321f15ab2c8\" xml:lang=\"en\" label=\"Read\"/> <link rel=\"library\" href=\"/wps/mycontenthandler/!ut/p/digest!9fMog84Jk6tJXg_WMEMrOA/wcmrest/Library/4bee8df4-0f62-427b-a40b-2b3a6ad0b415\" xml:lang=\"en\" label=\"Library\"/> <link rel=\"preview\" href=\"/wps/poc/!ut/p/digest!9fMog84Jk6tJXg_WMEMrOA/wcm/oid:f04719c0-a9ba-49e0-92e2-5321f15ab2c8\" xml:lang=\"en\" label=\"Preview\"/> <category scheme=\"wcmrest:workflowState\" term=\"PUBLISHED\" label=\"Published\" xml:lang=\"en\"/> </entry> </feed>","title":"Using the Web Content Manager Access Control Filter REST API"},{"location":"wcm/wcm_REST_web_content_manager_control_syndication/","text":"Web Content Manager Syndication REST APIs The Web Content Manager Syndication REST APIs let you control syndication processes. Note: Developers should continue to use the Digital Experience Administration panel and options to create or delete Web Content Manager syndicator and subscriber pairs. See the Creating a syndication relationship by using the Administration view topic for further information. The following Web Content Manager REST APIs may be used to query and manage several syndication operations. Available Syndication Pairs These two Web Content Manager REST calls return a list of all defined syndicators or subscribers: GET http(s)://host:port/wps/mycontenthandler/{VP Name}/!ut/p/wcmrest/Syndication/Syndicators Sample output: ``` { \"entry\":{ \"content\":{ \"Syndicators\":{ \"SyndicatorList\":[ { \"SyndicatorName\":\"The Syndicator\", \"SyndicatorUUID\":\"23ccb6d9-3f25-4211-8861-4747527fbd4e\" }, { \"SyndicatorName\":\"The Syndicator2\", \"SyndicatorUUID\":\"e235c757-c406-4ec1-b80b-3d49a815d2f0\" }, { \"SyndicatorName\":\"The Syndicator3\", \"SyndicatorUUID\":\"8a7ad1b8-165f-444e-890b-9f5c1734a232\" } ] } } ``` GET http(s)://host:port/wps/mycontenthandler/{VP Name}/!ut/p/wcmrest/Syndication/Subscribers Sample output: ``` { \"entry\":{ \"content\":{ \"Subscribers\":{ \"SubscriberList\":[ { \"SubscriberName\":\"The Subscriber2\", \"SubscriberUUID\":\"1dd7950d-4294-40d8-95cd-ef75266d913f\" }, { \"SubscriberName\":\"The Subscriber3\", \"SubscriberUUID\":\"80a10a35-06b2-4297-9f11-7c7c0bab36eb\" }, { \"SubscriberName\":\"The Subscriber\", \"SubscriberUUID\":\"9bc95c72-edcf-4d72-af35-cfa124f0a2a4\" } ] } } } } ``` The Virtual Portal (VP) \"{VP Name}/\" may be blank for the base VP. Information returned includes: Name of Syndicator/Subscriber UUID of Syndicator/Subscriber If the VP has no syndicators or subscribers, the returned JSON or ATOM will have no list and look like this: { \"entry\":{ \"content\":{ \"Syndicators\":{} } } } Issuers of this REST call must have the DX role of \"User\" to get either of these lists. Status of a Syndicator or Subscriber Once a specific UUID of a syndicator/subscriber is obtained, the full status of that syndicator/subscriber can be obtained via the following REST call: GET http(s)://host:port/wps/mycontenthandler/{VP Name}/wcmrest/{\"Syndicator\"/\"Subscriber\"}/{UUID of syndicator/subscriber}/Status The \"{VP Name}/\" may be blank for the base Virtual Portal (VP). This WCM REST API will return the following attributes: Syndicator Status: ``` { \"entry\":{ \"content\":{ \"SyndicatorStatus\":{ \"Name\":\"The Syndicator\", \"UUID\":\"23ccb6d9-3f25-4211-8861-4747527fbd4e\", \"Description\":\"This is a test syndicator\", \"isEnabled\":\"true\", \"State\":\"idle\", \"LastRunDate\":\"2020-Sep-02 04:33:31 EDT\", \"SyndicatorLibraries\":[ \"testlibrary\" ] } } } } ``` Subscriber Status: ``` { \"entry\":{ \"content\":{ \"SyndicatorStatus\":{ \"Name\":\"The Syndicator\", \"UUID\":\"23ccb6d9-3f25-4211-8861-4747527fbd4e\", \"Description\":\"This is a test syndicator\", \"isEnabled\":\"true\", \"State\":\"idle\", \"LastRunDate\":\"2020-Sep-02 04:33:31 EDT\", \"SyndicatorLibraries\":[ \"testlibrary\" ] } } } } ``` Note that both the syndicator and its associated subscriber both have to be enabled to successfully syndicate content between the two. If the VP has no syndicators or subscribers, the returned JSON or ATOM will present no status attributes like this: ``` { \"entry\":{ \"content\":{ \"SyndicatorStatus\":{} } } } { \"entry\":{ \"content\":{ \"SubscriberStatus\":{} } } } ``` Developers must have the role of Administrator in order to retrieve these attributes. Set Enabled/Disabled Status on Syndicator/Subsriber Once a UUID is available, another set of WCM REST APIs need to be applied to set the syndication status of the Syndicator/Subscriber: PUT http(s)://host:port/wps/mycontenthandler/{VP Name}/wcmrest/{\"Syndicator\" or \"Subscriber\"}/{UUID of syndicator/subscriber}/Status Sample output: Note in this case the JSON input was exactly the same output from the corresponding GET request. However, two fields can change the status of the Syndicator: \" isEnabled \": Set the enabled state of the syndicator to either \"true\" or \"false\" \" State \": Set the overall state of the Syndicator to \"update\". When set to \"update\", this will initiate an immediate \"update now\" request on the Syndicator. The returned state will either be \"running\" or \"idle\". Sample output: Note in this case the JSON input was exactly the same output from the corresponding GET request: \" isEnabled \": Set the enabled state of the syndicator to either \"true\" or \"false\" \" State \": Set the overall state of the Subscriber to \"update\". When set to \"update\", this will initiate an immediate \"update now\" request on the Subscriber. The returned state will either be \"running\" or \"idle\". Sufficient privilege must be available for the PUT call. Typically, the issuer of this REST call will need to be an HCL DX Administrative user. Syndicate Now (Update Syndicator) See the previous command for details on how to pro grammatically issue an immediate \"update\" call on the Syndicator/Subscriber. Note that in the HCL DX Administration User interface, this action is known as \u201cupdate syndicator\u201d or \u201cupdate subscriber\u201d. The effect of this call will be to override the normal scheduled behavior of the syndicator/subscriber and initiate an immediate syndication request. It need only be done once on either the syndicator or the subscriber. It does not need to be issued on both. This will mimic the \u201csyndicate now\u201d icon on the HCL DX Administration UI for syndication/subscriber. Use of the WCM Syndication REST APIs on the Primary Virtual Portal (VP) versus all other VPs Note that on a Virtual Portal, the \u201c!ut/p/digest\u201d portion of the DX URL must be included because the content handler cannot issue the redirect when using the URL format without the portion mentioned. So, in the example URLs above, the \"!ut/p/digest!....\" portion of the DX URL is NOT included. This implies that this URL is issued in the \"main\" or primary VP of the DX Portal. A 302 redirect will take place and the \"!ut/p/digest!\" will be inserted in the final URL. This portion of the URL can also be used for the VP URL request.","title":"Web Content Manager Syndication REST APIs"},{"location":"wcm/wcm_REST_web_content_manager_control_syndication/#web-content-manager-syndication-rest-apis","text":"The Web Content Manager Syndication REST APIs let you control syndication processes. Note: Developers should continue to use the Digital Experience Administration panel and options to create or delete Web Content Manager syndicator and subscriber pairs. See the Creating a syndication relationship by using the Administration view topic for further information. The following Web Content Manager REST APIs may be used to query and manage several syndication operations.","title":"Web Content Manager Syndication REST APIs"},{"location":"wcm/wcm_REST_web_content_manager_control_syndication/#available-syndication-pairs","text":"These two Web Content Manager REST calls return a list of all defined syndicators or subscribers: GET http(s)://host:port/wps/mycontenthandler/{VP Name}/!ut/p/wcmrest/Syndication/Syndicators Sample output: ``` { \"entry\":{ \"content\":{ \"Syndicators\":{ \"SyndicatorList\":[ { \"SyndicatorName\":\"The Syndicator\", \"SyndicatorUUID\":\"23ccb6d9-3f25-4211-8861-4747527fbd4e\" }, { \"SyndicatorName\":\"The Syndicator2\", \"SyndicatorUUID\":\"e235c757-c406-4ec1-b80b-3d49a815d2f0\" }, { \"SyndicatorName\":\"The Syndicator3\", \"SyndicatorUUID\":\"8a7ad1b8-165f-444e-890b-9f5c1734a232\" } ] } } ``` GET http(s)://host:port/wps/mycontenthandler/{VP Name}/!ut/p/wcmrest/Syndication/Subscribers Sample output: ``` { \"entry\":{ \"content\":{ \"Subscribers\":{ \"SubscriberList\":[ { \"SubscriberName\":\"The Subscriber2\", \"SubscriberUUID\":\"1dd7950d-4294-40d8-95cd-ef75266d913f\" }, { \"SubscriberName\":\"The Subscriber3\", \"SubscriberUUID\":\"80a10a35-06b2-4297-9f11-7c7c0bab36eb\" }, { \"SubscriberName\":\"The Subscriber\", \"SubscriberUUID\":\"9bc95c72-edcf-4d72-af35-cfa124f0a2a4\" } ] } } } } ``` The Virtual Portal (VP) \"{VP Name}/\" may be blank for the base VP. Information returned includes: Name of Syndicator/Subscriber UUID of Syndicator/Subscriber If the VP has no syndicators or subscribers, the returned JSON or ATOM will have no list and look like this: { \"entry\":{ \"content\":{ \"Syndicators\":{} } } } Issuers of this REST call must have the DX role of \"User\" to get either of these lists.","title":"Available Syndication Pairs"},{"location":"wcm/wcm_REST_web_content_manager_control_syndication/#status-of-a-syndicator-or-subscriber","text":"Once a specific UUID of a syndicator/subscriber is obtained, the full status of that syndicator/subscriber can be obtained via the following REST call: GET http(s)://host:port/wps/mycontenthandler/{VP Name}/wcmrest/{\"Syndicator\"/\"Subscriber\"}/{UUID of syndicator/subscriber}/Status The \"{VP Name}/\" may be blank for the base Virtual Portal (VP). This WCM REST API will return the following attributes: Syndicator Status: ``` { \"entry\":{ \"content\":{ \"SyndicatorStatus\":{ \"Name\":\"The Syndicator\", \"UUID\":\"23ccb6d9-3f25-4211-8861-4747527fbd4e\", \"Description\":\"This is a test syndicator\", \"isEnabled\":\"true\", \"State\":\"idle\", \"LastRunDate\":\"2020-Sep-02 04:33:31 EDT\", \"SyndicatorLibraries\":[ \"testlibrary\" ] } } } } ``` Subscriber Status: ``` { \"entry\":{ \"content\":{ \"SyndicatorStatus\":{ \"Name\":\"The Syndicator\", \"UUID\":\"23ccb6d9-3f25-4211-8861-4747527fbd4e\", \"Description\":\"This is a test syndicator\", \"isEnabled\":\"true\", \"State\":\"idle\", \"LastRunDate\":\"2020-Sep-02 04:33:31 EDT\", \"SyndicatorLibraries\":[ \"testlibrary\" ] } } } } ``` Note that both the syndicator and its associated subscriber both have to be enabled to successfully syndicate content between the two. If the VP has no syndicators or subscribers, the returned JSON or ATOM will present no status attributes like this: ``` { \"entry\":{ \"content\":{ \"SyndicatorStatus\":{} } } } { \"entry\":{ \"content\":{ \"SubscriberStatus\":{} } } } ``` Developers must have the role of Administrator in order to retrieve these attributes.","title":"Status of a Syndicator or Subscriber"},{"location":"wcm/wcm_REST_web_content_manager_control_syndication/#set-enableddisabled-status-on-syndicatorsubsriber","text":"Once a UUID is available, another set of WCM REST APIs need to be applied to set the syndication status of the Syndicator/Subscriber: PUT http(s)://host:port/wps/mycontenthandler/{VP Name}/wcmrest/{\"Syndicator\" or \"Subscriber\"}/{UUID of syndicator/subscriber}/Status Sample output: Note in this case the JSON input was exactly the same output from the corresponding GET request. However, two fields can change the status of the Syndicator: \" isEnabled \": Set the enabled state of the syndicator to either \"true\" or \"false\" \" State \": Set the overall state of the Syndicator to \"update\". When set to \"update\", this will initiate an immediate \"update now\" request on the Syndicator. The returned state will either be \"running\" or \"idle\". Sample output: Note in this case the JSON input was exactly the same output from the corresponding GET request: \" isEnabled \": Set the enabled state of the syndicator to either \"true\" or \"false\" \" State \": Set the overall state of the Subscriber to \"update\". When set to \"update\", this will initiate an immediate \"update now\" request on the Subscriber. The returned state will either be \"running\" or \"idle\". Sufficient privilege must be available for the PUT call. Typically, the issuer of this REST call will need to be an HCL DX Administrative user.","title":"Set Enabled/Disabled Status on Syndicator/Subsriber"},{"location":"wcm/wcm_REST_web_content_manager_control_syndication/#syndicate-now-update-syndicator","text":"See the previous command for details on how to pro grammatically issue an immediate \"update\" call on the Syndicator/Subscriber. Note that in the HCL DX Administration User interface, this action is known as \u201cupdate syndicator\u201d or \u201cupdate subscriber\u201d. The effect of this call will be to override the normal scheduled behavior of the syndicator/subscriber and initiate an immediate syndication request. It need only be done once on either the syndicator or the subscriber. It does not need to be issued on both. This will mimic the \u201csyndicate now\u201d icon on the HCL DX Administration UI for syndication/subscriber.","title":"Syndicate Now (Update Syndicator)"},{"location":"wcm/wcm_REST_web_content_manager_control_syndication/#use-of-the-wcm-syndication-rest-apis-on-the-primary-virtual-portal-vp-versus-all-other-vps","text":"Note that on a Virtual Portal, the \u201c!ut/p/digest\u201d portion of the DX URL must be included because the content handler cannot issue the redirect when using the URL format without the portion mentioned. So, in the example URLs above, the \"!ut/p/digest!....\" portion of the DX URL is NOT included. This implies that this URL is issued in the \"main\" or primary VP of the DX Portal. A 302 redirect will take place and the \"!ut/p/digest!\" will be inserted in the final URL. This portion of the URL can also be used for the VP URL request.","title":"Use of the WCM Syndication REST APIs on the Primary Virtual Portal (VP) versus all other VPs"},{"location":"wcm/wcm_REST_web_content_manager_find_rendering_script_portlet_references/","text":"Web Content Manager Find Rendering and Script Portlet References This API allows you to find any page that has a WCM Rendering or Script portlet on it referencing the given WCM content UUID. Special Considerations The API is specific per virtual Portal. Limitations Currently, the API does not support finding draft references in projects. Using the Web Content Manager Find Rendering and Script Portlet References API Endpoint GET request to: http://host:port/wps/mycontenthandler/wcmrest/listPageReferences/<uuid> Sample URL: http://localhost:10039/wps/mycontenthandler/!ut/p/digest!z9Kf8ax_kfhYNQxUVA-0OQ/wcmrest/listPageReferences/42cfcfe8-764d-4733-b409-87cc83a7a4eb Expected Body The body can have the basic WCM structure or be empty: <?xml version=\"1.0\" encoding=\"UTF-8\"?> <feed xmlns=\"http://www.w3.org/2005/Atom\" xmlns:wcm=\"http://www.ibm.com/xmlns/wcm/8.0\"> </feed> Expected Headers LTPA token of the user. Also works anonymously. Return Body The found results. Sample: { \"listPageReferences\" : { \"wcmContentID\" : \"84b09a3e-9724-4f35-84ce-cad176750d2c\", \"pageReferenceList\" : [ { \"portleInstanceObjectId\" : \"Z5_N0KGGB82018R50QD5BQ20S2040\", \"pageObjectId\" : \"Z6_N0KGGB82018R50QD5BQ20S2083\", \"pageTitle\" : \"More core work\" }, { \"portleInstanceObjectId\" : \"Z5_N0KGGB820H6350QDLUV8DF24B3\", \"pageObjectId\" : \"Z6_N0KGGB82018R50QD5BQ20S2083\", \"pageTitle\" : \"More core work\" } ] } }","title":"Web Content Manager Find Rendering and Script Portlet References"},{"location":"wcm/wcm_REST_web_content_manager_find_rendering_script_portlet_references/#web-content-manager-find-rendering-and-script-portlet-references","text":"This API allows you to find any page that has a WCM Rendering or Script portlet on it referencing the given WCM content UUID.","title":"Web Content Manager Find Rendering and Script Portlet References"},{"location":"wcm/wcm_REST_web_content_manager_find_rendering_script_portlet_references/#special-considerations","text":"The API is specific per virtual Portal.","title":"Special Considerations"},{"location":"wcm/wcm_REST_web_content_manager_find_rendering_script_portlet_references/#limitations","text":"Currently, the API does not support finding draft references in projects.","title":"Limitations"},{"location":"wcm/wcm_REST_web_content_manager_find_rendering_script_portlet_references/#using-the-web-content-manager-find-rendering-and-script-portlet-references-api","text":"Endpoint GET request to: http://host:port/wps/mycontenthandler/wcmrest/listPageReferences/<uuid> Sample URL: http://localhost:10039/wps/mycontenthandler/!ut/p/digest!z9Kf8ax_kfhYNQxUVA-0OQ/wcmrest/listPageReferences/42cfcfe8-764d-4733-b409-87cc83a7a4eb Expected Body The body can have the basic WCM structure or be empty: <?xml version=\"1.0\" encoding=\"UTF-8\"?> <feed xmlns=\"http://www.w3.org/2005/Atom\" xmlns:wcm=\"http://www.ibm.com/xmlns/wcm/8.0\"> </feed> Expected Headers LTPA token of the user. Also works anonymously. Return Body The found results. Sample: { \"listPageReferences\" : { \"wcmContentID\" : \"84b09a3e-9724-4f35-84ce-cad176750d2c\", \"pageReferenceList\" : [ { \"portleInstanceObjectId\" : \"Z5_N0KGGB82018R50QD5BQ20S2040\", \"pageObjectId\" : \"Z6_N0KGGB82018R50QD5BQ20S2083\", \"pageTitle\" : \"More core work\" }, { \"portleInstanceObjectId\" : \"Z5_N0KGGB820H6350QDLUV8DF24B3\", \"pageObjectId\" : \"Z6_N0KGGB82018R50QD5BQ20S2083\", \"pageTitle\" : \"More core work\" } ] } }","title":"Using the Web Content Manager Find Rendering and Script Portlet References API"},{"location":"wcm/wcm_REST_web_content_manager_lock_unlock_api/","text":"Web Content Manager Lock/Unlock API The Web Content Manager Lock/Unlock API lets you lock and unlock WCM content components, authoring templates, and item. It also extends the WCM Query API to pass on the information if an item is locked and who locked it. It is equivalent to the functionality in the user interface (for WCM items): Using the Web Content Manager Lock/Unlock API Endpoint POST request to: http://host:port/wps/mycontenthandler/wcmrest/item/<UUID of WCM item>/lock or http://host:port/wps/mycontenthandler/wcmrest/item/<UUID of WCM item>/unlock JSON: For JSON add ?mime-type=application/json Sample URL: localhost:10039/wps/mycontenthandler/wcmrest/item/02d62efb-54ed-430d-9f67-01d8788cb6d6/lock Expected Body The body can have the basic WCM structure: ``` <?xml version=\"1.0\" encoding=\"UTF-8\"?> ``` Expected Headers LTPA token of the user. Query Parameters None. Limitations None. Return Body The updated item. Sample: ``` <?xml version=\"1.0\" encoding=\"UTF-8\"?> wcmrest:02d62efb-54ed-430d-9f67-01d8788cb6d6 test test Content 2020-07-21T01:10:03.736Z 2020-07-04T18:26:26.956Z uid=wpsadmin,o=defaultWIMFileBasedRealm /wps/mycontenthandler/!ut/p/digest!MkdRgjTjAwea4NMtxVBQGg/um/users/profiles/Z9eAe1RO8MROCP9PEJMG633CCMMG6JHP6JM07HHPEJMS6KPC4JGD6J9C63HLC13 wpsadmin uid=wpsadmin,o=defaultWIMFileBasedRealm /wps/mycontenthandler/!ut/p/digest!MkdRgjTjAwea4NMtxVBQGg/um/users/profiles/Z9eAe1RO8MROCP9PEJMG633CCMMG6JHP6JM07HHPEJMS6KPC4JGD6J9C63HLC13 wpsadmin uid=wpsadmin,o=defaultWIMFileBasedRealm /wps/mycontenthandler/!ut/p/digest!MkdRgjTjAwea4NMtxVBQGg/um/users/profiles/Z9eAe1RO8MROCP9PEJMG633CCMMG6JHP6JM07HHPEJMS6KPC4JGD6J9C63HLC13 wpsadmin uid=wpsadmin,o=defaultWIMFileBasedRealm /wps/mycontenthandler/!ut/p/digest!MkdRgjTjAwea4NMtxVBQGg/um/users/profiles/Z9eAe1RO8MROCP9PEJMG633CCMMG6JHP6JM07HHPEJMS6KPC4JGD6J9C63HLC13 wpsadmin image ImageComponent IMG_0001.jpg http://us-latest.team-q-dev.com:3000/dx/api/dam/v1/collections/6116616b-93e3-4de9-b316-f6e5c13a9621/items/b1489ff2-f466-4ee1-a6a5-aade5af64a2c/renditions/d6557d8b-c684-4f1c-973f-bf6d8a38a2ff?binary=true ``` Retrieving locked/unlocked status The Web Content Manager Item API as indicated above has the new category field for locked/unlocked status. Structure Unlocked: <category scheme=\"wcmrest:locked\" term=\"false\" label=\"\"/> Locked: <category scheme=\"wcmrest:locked\" term=\"true\" label=\"uid=wpsadmin,o=defaultWIMFileBasedRealm\"/ When using search when specifying the options=details query parameter the category is also retrieved and added to the REST result feed. Delete A content item can be deleted by sending a DELETE request to the following URI: /Content/item-uuid For example: DELETE: HTTP/1.1 DELETE http://host:port/wps/mycontenthandler/wcmrest/Content/fa2bfd32-7b2f-4394-a5ab-2e150c5ed8aa/ Response: 200 OK Asset Management asset or Web Content Manager item identified by its UUID It is equivalent to the functionality in the user interface (for finding Web Content Manager items). Note: Currently, the Web Content Manager Reference API only supports the GET operation for retrieving items. To update items, the document outlines how to use existing APIs to make updates. Using the Web Content Manager Reference GET API Endpoint GET http://host:port/wps/mycontenthandler/wcmrest/references/wcm/<UUID of WCM item> http://host:port/wps/mycontenthandler/wcmrest/references/wcm/<UUID of WCM item> JSON For JSON, add ?mime-type=application/json Sample URL: http://samplehost.com:10039/wps/mycontenthandler/!ut/p/digest!DEqoG-vlJYym_KoW9OQbyw/wcmrest/references/wcm/3d464f55-d909-41dd-b760-57667ddd290c Sample URL JSON: http://samplehost.com:10039/wps/mycontenthandler/!ut/p/digest!DEqoG-vlJYym_KoW9OQbyw/wcmrest/references/wcm/3d464f55-d909-41dd-b760-57667ddd290c?mime-type=application/json Expected Body The body can just have the basic WCM structure: BODY <?xml version=\"1.0\" encoding=\"UTF-8\"?> <feed xmlns=\"http://www.w3.org/2005/Atom\" xmlns:wcm=\"http://www.ibm.com/xmlns/wcm/8.0\"> </feed> Expected Headers LTPA token of the user. Also works anonymously. Query Parameters None. Limitations Currently, Digital Asset Management (DAM) UUID references for elements and components are found \u2013 but items are not retrieved from within Rich Text. Retrieval of UUID items in Rich Text will be supported in a later update. Return Body The found/retrieved results. Sample: ``` <?xml version=\"1.0\" encoding=\"UTF-8\"?> wcmrest:Project/3d464f55-d909-41dd-b760-57667ddd290c/project-items wcmrest:Project/3d464f55-d909-41dd-b760-57667ddd290c/project-items 2020-04-24T15:59:54.529Z 5 wcmrest:10c4700e-b25d-4609-875a-62bfdb557c88 Articles Articles Articles SiteArea 2020-04-23T19:18:35.462Z uid=wpsadmin,o=defaultWIMFileBasedRealm /wps/mycontenthandler/!ut/p/digest!DEqoG-vlJYym_KoW9OQbyw/um/users/profiles/Z9eAeO1E2MPKCIPC2MMK6HHOCJMG63BOAMM4CK9OAMMKCMPCAMPC61BOE3SC653 wpsadmin wcmrest:fb6ea2bd-47e2-4b2c-8e16-48aeff35eb4e Sample Article Sample Article Sample Article Content 2020-04-23T19:18:35.462Z uid=wpsadmin,o=defaultWIMFileBasedRealm /wps/mycontenthandler/!ut/p/digest!DEqoG-vlJYym_KoW9OQbyw/um/users/profiles/Z9eAeO1E2MPKCIPC2MMK6HHOCJMG63BOAMM4CK9OAMMKCMPCAMPC61BOE3SC653 wpsadmin wcmrest:4039c2b7-3fa6-4026-a2ed-f6320ee1f6d9 Sample Article 2 Sample Article 2 Sample Article 2 Content 2020-04-23T19:18:35.463Z uid=wpsadmin,o=defaultWIMFileBasedRealm /wps/mycontenthandler/!ut/p/digest!DEqoG-vlJYym_KoW9OQbyw/um/users/profiles/Z9eAeO1E2MPKCIPC2MMK6HHOCJMG63BOAMM4CK9OAMMKCMPCAMPC61BOE3SC653 wpsadmin wcmrest:fa77c56b-6af7-4491-bc4e-7b464c3832a3 Articles List Articles List Articles List LibraryMenuComponent 2020-04-23T19:18:35.462Z uid=wpsadmin,o=defaultWIMFileBasedRealm /wps/mycontenthandler/!ut/p/digest!DEqoG-vlJYym_KoW9OQbyw/um/users/profiles/Z9eAeO1E2MPKCIPC2MMK6HHOCJMG63BOAMM4CK9OAMMKCMPCAMPC61BOE3SC653 wpsadmin wcmrest:84efffc2-67fa-403c-b977-8ad74f81390a Article Toolbar Article Toolbar Article toolbar LibraryAuthoringToolsComponent 2020-04-23T19:18:35.462Z uid=wpsadmin,o=defaultWIMFileBasedRealm /wps/mycontenthandler/!ut/p/digest!DEqoG-vlJYym_KoW9OQbyw/um/users/profiles/Z9eAeO1E2MPKCIPC2MMK6HHOCJMG63BOAMM4CK9OAMMKCMPCAMPC61BOE3SC653 wpsadmin ``` Updating references Both Digital Asset Management and Web Content Manager references can be updated with the published APIs as documented here: How to use REST with components . Example for Digital Asset Management, to retrieve references to UUID: 7e3cb713-251a-485c-a578-1aa219411b5e. Response: ``` <?xml version=\"1.0\" encoding=\"UTF-8\"?> wcmrest:Project/7e3cb713-251a-485c-a578-1aa219411b5e/project-items wcmrest:Project/7e3cb713-251a-485c-a578-1aa219411b5e/project-items 2020-05-11T15:59:18.639Z 1 wcmrest:43174081-4f88-436a-a87b-16e6375c2e8f testmeout testmeout Content 2020-05-11T15:52:39.290Z uid=wpsadmin,o=defaultWIMFileBasedRealm /wps/mycontenthandler/!ut/p/digest!HttiyBvTxv1fgs63hc74Pw/um/users/profiles/Z9eAeHPOG3SG6HHC2JMOCG1P8MMG6OPO4JM47JHDAJM076RDG3RGCN1C66SOC53 wpsadmin uid=wpsadmin,o=defaultWIMFileBasedRealm /wps/mycontenthandler/!ut/p/digest!HttiyBvTxv1fgs63hc74Pw/um/users/profiles/Z9eAeHPOG3SG6HHC2JMOCG1P8MMG6OPO4JM47JHDAJM076RDG3RGCN1C66SOC53 wpsadmin ``` Iterating over the results will use the edit link to fetch the item: GET: ``` /wps/mycontenthandler/!ut/p/digest!HttiyBvTxv1fgs63hc74Pw/wcmrest/Content/43174081-4f88-436a-a87b-16e6375c2e8f <?xml version=\"1.0\" encoding=\"UTF-8\"?> wcmrest:43174081-4f88-436a-a87b-16e6375c2e8f testmeout testmeout Content 2020-05-11T15:52:39.290Z 2020-05-11T15:51:52.513Z uid=wpsadmin,o=defaultWIMFileBasedRealm /wps/mycontenthandler/!ut/p/digest!HttiyBvTxv1fgs63hc74Pw/um/users/profiles/Z9eAeHPOG3SG6HHC2JMOCG1P8MMG6OPO4JM47JHDAJM076RDG3RGCN1C66SOC53 wpsadmin uid=wpsadmin,o=defaultWIMFileBasedRealm /wps/mycontenthandler/!ut/p/digest!HttiyBvTxv1fgs63hc74Pw/um/users/profiles/Z9eAeHPOG3SG6HHC2JMOCG1P8MMG6OPO4JM47JHDAJM076RDG3RGCN1C66SOC53 wpsadmin uid=wpsadmin,o=defaultWIMFileBasedRealm /wps/mycontenthandler/!ut/p/digest!HttiyBvTxv1fgs63hc74Pw/um/users/profiles/Z9eAeHPOG3SG6HHC2JMOCG1P8MMG6OPO4JM47JHDAJM076RDG3RGCN1C66SOC53 wpsadmin uid=wpsadmin,o=defaultWIMFileBasedRealm /wps/mycontenthandler/!ut/p/digest!HttiyBvTxv1fgs63hc74Pw/um/users/profiles/Z9eAeHPOG3SG6HHC2JMOCG1P8MMG6OPO4JM47JHDAJM076RDG3RGCN1C66SOC53 wpsadmin test ImageComponent Screen Shot 2020-05-07 at 10.26.24 AM.png http://samplehost.com:3000/dx/api/dam/v0/collections/48839939-375e-4f07-a85d-56d13ddba3c8/items/7e3cb713-251a-485c-a578-1aa219411b5e?binary=true ``` To send an update to the item to replace the resourceUri and add fileName and type: <?xml version=\"1.0\" encoding=\"UTF-8\"?><entry xmlns=\"http://www.w3.org/2005/Atom\" xmlns:wcm=\"http://www.ibm.com/xmlns/wcm/8.0\"> <id>wcmrest:43174081-4f88-436a-a87b-16e6375c2e8f</id> <title xml:lang=\"en\">testmeout</title> <summary xml:lang=\"en\"></summary> <wcm:name>testmeout</wcm:name> <wcm:type>Content</wcm:type> <updated>2020-05-11T15:52:39.290Z</updated> <wcm:created>2020-05-11T15:51:52.513Z</wcm:created> <author> <wcm:distinguishedName>uid=wpsadmin,o=defaultWIMFileBasedRealm</wcm:distinguishedName> <uri>/wps/mycontenthandler/!ut/p/digest!HttiyBvTxv1fgs63hc74Pw/um/users/profiles/Z9eAeHPOG3SG6HHC2JMOCG1P8MMG6OPO4JM47JHDAJM076RDG3RGCN1C66SOC53</uri> <name>wpsadmin</name> </author> <wcm:owner> <wcm:distinguishedName>uid=wpsadmin,o=defaultWIMFileBasedRealm</wcm:distinguishedName> <uri>/wps/mycontenthandler/!ut/p/digest!HttiyBvTxv1fgs63hc74Pw/um/users/profiles/Z9eAeHPOG3SG6HHC2JMOCG1P8MMG6OPO4JM47JHDAJM076RDG3RGCN1C66SOC53</uri> <name>wpsadmin</name> </wcm:owner> <wcm:lastModifier> <wcm:distinguishedName>uid=wpsadmin,o=defaultWIMFileBasedRealm</wcm:distinguishedName> <uri>/wps/mycontenthandler/!ut/p/digest!HttiyBvTxv1fgs63hc74Pw/um/users/profiles/Z9eAeHPOG3SG6HHC2JMOCG1P8MMG6OPO4JM47JHDAJM076RDG3RGCN1C66SOC53</uri> <name>wpsadmin</name> </wcm:lastModifier> <wcm:creator> <wcm:distinguishedName>uid=wpsadmin,o=defaultWIMFileBasedRealm</wcm:distinguishedName> <uri>/wps/mycontenthandler/!ut/p/digest!HttiyBvTxv1fgs63hc74Pw/um/users/profiles/Z9eAeHPOG3SG6HHC2JMOCG1P8MMG6OPO4JM47JHDAJM076RDG3RGCN1C66SOC53</uri> <name>wpsadmin</name> </wcm:creator> <wcm:profile/> <link rel=\"self\" href=\"/wps/mycontenthandler/!ut/p/digest!HttiyBvTxv1fgs63hc74Pw/wcmrest/Content/43174081-4f88-436a-a87b-16e6375c2e8f\" xml:lang=\"en\" label=\"Read\"/> <link rel=\"edit\" href=\"/wps/mycontenthandler/!ut/p/digest!HttiyBvTxv1fgs63hc74Pw/wcmrest/Content/43174081-4f88-436a-a87b-16e6375c2e8f\" xml:lang=\"en\" label=\"Edit\"/> <link rel=\"delete\" href=\"/wps/mycontenthandler/!ut/p/digest!HttiyBvTxv1fgs63hc74Pw/wcmrest/Content/43174081-4f88-436a-a87b-16e6375c2e8f\" xml:lang=\"en\" label=\"Delete\"/> <link rel=\"create-draft\" href=\"/wps/mycontenthandler/!ut/p/digest!HttiyBvTxv1fgs63hc74Pw/wcmrest/item/43174081-4f88-436a-a87b-16e6375c2e8f/create-draft\" xml:lang=\"en\" label=\"Create Draft\"/> <link rel=\"change-to-draft\" href=\"/wps/mycontenthandler/!ut/p/digest!HttiyBvTxv1fgs63hc74Pw/wcmrest/item/43174081-4f88-436a-a87b-16e6375c2e8f/change-to-draft\" xml:lang=\"en\" label=\"Change To Draft\"/> <link rel=\"access-control\" href=\"/wps/mycontenthandler/!ut/p/digest!HttiyBvTxv1fgs63hc74Pw/ac/access:oid:Z6QReDeKPC2JRG6G1E2JMG663EGJMG6JHD2MM4COPD4MM46M9PCJPS6LPO4JI1763\" xml:lang=\"en\" label=\"Access Control\"/> <link rel=\"library\" href=\"/wps/mycontenthandler/!ut/p/digest!HttiyBvTxv1fgs63hc74Pw/wcmrest/Library/f7e965b1-c9e4-4c07-a0e0-de8efb5faf2a\" xml:lang=\"en\" label=\"Library\"/> <link rel=\"parent\" href=\"/wps/mycontenthandler/!ut/p/digest!HttiyBvTxv1fgs63hc74Pw/wcmrest/SiteArea/bf117c51-d2ab-4818-b2de-02e6988fe9ad\" xml:lang=\"en\" label=\"Parent\"/> <link rel=\"versions\" href=\"/wps/mycontenthandler/!ut/p/digest!HttiyBvTxv1fgs63hc74Pw/wcmrest/item/43174081-4f88-436a-a87b-16e6375c2e8f/versions\" xml:lang=\"en\" label=\"Versions\"/> <link rel=\"preview\" href=\"/wps/poc/!ut/p/digest!HttiyBvTxv1fgs63hc74Pw/wcm/oid:43174081-4f88-436a-a87b-16e6375c2e8f\" xml:lang=\"en\" label=\"Preview\"/> <link rel=\"edit-media\" href=\"/wps/mycontenthandler/!ut/p/digest!HttiyBvTxv1fgs63hc74Pw/wcmrest/Content/43174081-4f88-436a-a87b-16e6375c2e8f\" type=\"application/vnd.ibm.wcm+xml\" xml:lang=\"en\" label=\"Edit Media\"/> <link rel=\"content-template\" href=\"/wps/mycontenthandler/!ut/p/digest!HttiyBvTxv1fgs63hc74Pw/wcmrest/ContentTemplate/c7abf2c0-7eff-4396-90e5-943a096c5ab3\" xml:lang=\"en\" label=\"Content Template\"/> <link rel=\"elements\" href=\"/wps/mycontenthandler/!ut/p/digest!HttiyBvTxv1fgs63hc74Pw/wcmrest/Content/43174081-4f88-436a-a87b-16e6375c2e8f/elements\" xml:lang=\"en\" label=\"Elements\"/> <category scheme=\"wcmrest:workflowState\" term=\"PUBLISHED\" label=\"Published\" xml:lang=\"en\"/> <category scheme=\"wcmrest:favorite\" term=\"false\" xml:lang=\"en\"/> <content type=\"application/vnd.ibm.wcm+xml\"> <wcm:content xmlns=\"http://www.ibm.com/xmlns/wcm/8.0\"> <elements xmlns:atom=\"http://www.w3.org/2005/Atom\"> <element name=\"test\"> <title xml:lang=\"en\">test</title> <type>ImageComponent</type> <data type=\"application/vnd.ibm.wcm+xml\"> <image> <dimension height=\"\" width=\"\" border=\"0\"/> <altText></altText> <tagName></tagName> <fileName>Screen Shot 2020-05-07 at 10.26.24 AM.png</fileName> <resourceUri type=\"image/png\">http://samplehost.com:3000/dx/api/dam/v0/collections/48839939-375e-4f07-a85d-56d13ddba3c8/items/7e3cb713-251a-485c-a578-1aa219411b5e?binary=true</resourceUri> </image> </data> </element> </elements> </wcm:content> </content> </entry> Create A content item can be created by sending a POST request to the following URI with an Atom entry used to represent the content item: /Content A library or parent link relation must be used to define the location of the hierarchical item that is being created. An authoring template must be specified to set what authoring template to use when the item is created. For example: POST: ``` HTTP/1.1 POST http://host:port/wps/mycontenthandler/wcmrest/Content/ Content-Type: application/atom+xml Content Name Content Title ``` Response: 201 Created Create from a skeleton A \"skeleton\" representation of a content item that is created from a content template can be obtained to aid in the creation of content items. This can be obtained by using a GET request to the following URI. When the skeleton is obtained and completed a POST request can be made by using this data to create the item: /ContentTemplate/template-uuid/new-content. For example: HTTP/1.1 GET http://host:port/wps/mycontenthandler/wcmrest/ContentTemplate/b7b8b3fb-8fa1-4eb3-915e-ce7514f7067f/new-content Response 200 OK <?xml version=\"1.0\" encoding=\"UTF-8\"?> <entry xmlns=\"http://www.w3.org/2005/Atom\" xmlns:wcm=\"http://www.ibm.com/xmlns/wcm\"> <id>wcmrest:6bab48c6-1f24-454e-9bab-ae1be4cf3a0a</id> <title lang=\"en\"></title> <summary lang=\"en\"></summary> <wcm:name></wcm:name> <wcm:type>Content</wcm:type> <updated>2012-01-31T03:28:08.118Z</updated> <author> <wcm:distinguishedName>uid=wpsadmin,o=defaultWIMFileBasedRealm</ wcm:distinguishedName> <uri>/wps/mycontenthandler/!ut/p/digest!7K1PhYjxBw0jzCDqHCwg2w/um/ users/profiles/Z9eAeHPCAJG963RD2MMG6P9O6MMG66BD6MM47IHP4MMS6M1DAJQ4C1BCAMID653</uri> <name>wpsadmin</name> </author> <wcm:owner> <wcm:distinguishedName>uid=wpsadmin,o=defaultWIMFileBasedRealm</wcm:distinguishedName> <uri>/wps/mycontenthandler/!ut/p/digest!7K1PhYjxBw0jzCDqHCwg2w/um/ users/profiles/Z9eAeHPCAJG963RD2MMG6P9O6MMG66BD6MM47IHP4MMS6M1DAJQ4C1BCAMID653</uri> <name>wpsadmin</name> </wcm:owner> <link label=\"Library\" rel=\"library\" href=\"/wps/mycontenthandler/!ut/p/ digest!PQo5Yhy68oeppWcEz2sddA/wcmrest/item/a423287f-b0ce-4ee3-9c95-aa0939382228\" lang=\"en\"/> <link label=\"Content Template\" rel=\"content-template\" href=\"/wps/ mycontenthandler/!ut/p/digest!PQo5Yhy68oeppWcEz2sddA/wcmrest/Content/b7b8b3fb-8fa1-4eb3-915e-ce7514f7067f\" lang=\"en\"/> <content type=\"application/vnd.ibm.wcm+xml\"> <content xmlns=\"http://www.ibm.com/xmlns/wcm\"> <elements> <element name=\"Body\"> <title lang=\"en\">Body</title> <type>RichTextComponent</type>","title":"Web Content Manager Lock/Unlock API"},{"location":"wcm/wcm_REST_web_content_manager_lock_unlock_api/#web-content-manager-lockunlock-api","text":"The Web Content Manager Lock/Unlock API lets you lock and unlock WCM content components, authoring templates, and item. It also extends the WCM Query API to pass on the information if an item is locked and who locked it. It is equivalent to the functionality in the user interface (for WCM items):","title":"Web Content Manager Lock/Unlock API"},{"location":"wcm/wcm_REST_web_content_manager_lock_unlock_api/#using-the-web-content-manager-lockunlock-api","text":"Endpoint POST request to: http://host:port/wps/mycontenthandler/wcmrest/item/<UUID of WCM item>/lock or http://host:port/wps/mycontenthandler/wcmrest/item/<UUID of WCM item>/unlock JSON: For JSON add ?mime-type=application/json Sample URL: localhost:10039/wps/mycontenthandler/wcmrest/item/02d62efb-54ed-430d-9f67-01d8788cb6d6/lock Expected Body The body can have the basic WCM structure: ``` <?xml version=\"1.0\" encoding=\"UTF-8\"?> ``` Expected Headers LTPA token of the user. Query Parameters None. Limitations None. Return Body The updated item. Sample: ``` <?xml version=\"1.0\" encoding=\"UTF-8\"?> wcmrest:02d62efb-54ed-430d-9f67-01d8788cb6d6 test test Content 2020-07-21T01:10:03.736Z 2020-07-04T18:26:26.956Z uid=wpsadmin,o=defaultWIMFileBasedRealm /wps/mycontenthandler/!ut/p/digest!MkdRgjTjAwea4NMtxVBQGg/um/users/profiles/Z9eAe1RO8MROCP9PEJMG633CCMMG6JHP6JM07HHPEJMS6KPC4JGD6J9C63HLC13 wpsadmin uid=wpsadmin,o=defaultWIMFileBasedRealm /wps/mycontenthandler/!ut/p/digest!MkdRgjTjAwea4NMtxVBQGg/um/users/profiles/Z9eAe1RO8MROCP9PEJMG633CCMMG6JHP6JM07HHPEJMS6KPC4JGD6J9C63HLC13 wpsadmin uid=wpsadmin,o=defaultWIMFileBasedRealm /wps/mycontenthandler/!ut/p/digest!MkdRgjTjAwea4NMtxVBQGg/um/users/profiles/Z9eAe1RO8MROCP9PEJMG633CCMMG6JHP6JM07HHPEJMS6KPC4JGD6J9C63HLC13 wpsadmin uid=wpsadmin,o=defaultWIMFileBasedRealm /wps/mycontenthandler/!ut/p/digest!MkdRgjTjAwea4NMtxVBQGg/um/users/profiles/Z9eAe1RO8MROCP9PEJMG633CCMMG6JHP6JM07HHPEJMS6KPC4JGD6J9C63HLC13 wpsadmin image ImageComponent IMG_0001.jpg http://us-latest.team-q-dev.com:3000/dx/api/dam/v1/collections/6116616b-93e3-4de9-b316-f6e5c13a9621/items/b1489ff2-f466-4ee1-a6a5-aade5af64a2c/renditions/d6557d8b-c684-4f1c-973f-bf6d8a38a2ff?binary=true ```","title":"Using the Web Content Manager Lock/Unlock API"},{"location":"wcm/wcm_REST_web_content_manager_lock_unlock_api/#retrieving-lockedunlocked-status","text":"The Web Content Manager Item API as indicated above has the new category field for locked/unlocked status. Structure Unlocked: <category scheme=\"wcmrest:locked\" term=\"false\" label=\"\"/> Locked: <category scheme=\"wcmrest:locked\" term=\"true\" label=\"uid=wpsadmin,o=defaultWIMFileBasedRealm\"/ When using search when specifying the options=details query parameter the category is also retrieved and added to the REST result feed. Delete A content item can be deleted by sending a DELETE request to the following URI: /Content/item-uuid For example: DELETE: HTTP/1.1 DELETE http://host:port/wps/mycontenthandler/wcmrest/Content/fa2bfd32-7b2f-4394-a5ab-2e150c5ed8aa/ Response: 200 OK","title":"Retrieving locked/unlocked status"},{"location":"wcm/wcm_REST_web_content_manager_lock_unlock_api/#asset-management-asset-or-web-content-manager-item-identified-by-its-uuid","text":"It is equivalent to the functionality in the user interface (for finding Web Content Manager items). Note: Currently, the Web Content Manager Reference API only supports the GET operation for retrieving items. To update items, the document outlines how to use existing APIs to make updates.","title":"Asset Management asset or Web Content Manager item identified by its UUID"},{"location":"wcm/wcm_REST_web_content_manager_lock_unlock_api/#using-the-web-content-manager-reference-get-api","text":"Endpoint GET http://host:port/wps/mycontenthandler/wcmrest/references/wcm/<UUID of WCM item> http://host:port/wps/mycontenthandler/wcmrest/references/wcm/<UUID of WCM item> JSON For JSON, add ?mime-type=application/json Sample URL: http://samplehost.com:10039/wps/mycontenthandler/!ut/p/digest!DEqoG-vlJYym_KoW9OQbyw/wcmrest/references/wcm/3d464f55-d909-41dd-b760-57667ddd290c Sample URL JSON: http://samplehost.com:10039/wps/mycontenthandler/!ut/p/digest!DEqoG-vlJYym_KoW9OQbyw/wcmrest/references/wcm/3d464f55-d909-41dd-b760-57667ddd290c?mime-type=application/json Expected Body The body can just have the basic WCM structure: BODY <?xml version=\"1.0\" encoding=\"UTF-8\"?> <feed xmlns=\"http://www.w3.org/2005/Atom\" xmlns:wcm=\"http://www.ibm.com/xmlns/wcm/8.0\"> </feed> Expected Headers LTPA token of the user. Also works anonymously. Query Parameters None. Limitations Currently, Digital Asset Management (DAM) UUID references for elements and components are found \u2013 but items are not retrieved from within Rich Text. Retrieval of UUID items in Rich Text will be supported in a later update. Return Body The found/retrieved results. Sample: ``` <?xml version=\"1.0\" encoding=\"UTF-8\"?> wcmrest:Project/3d464f55-d909-41dd-b760-57667ddd290c/project-items wcmrest:Project/3d464f55-d909-41dd-b760-57667ddd290c/project-items 2020-04-24T15:59:54.529Z 5 wcmrest:10c4700e-b25d-4609-875a-62bfdb557c88 Articles Articles Articles SiteArea 2020-04-23T19:18:35.462Z uid=wpsadmin,o=defaultWIMFileBasedRealm /wps/mycontenthandler/!ut/p/digest!DEqoG-vlJYym_KoW9OQbyw/um/users/profiles/Z9eAeO1E2MPKCIPC2MMK6HHOCJMG63BOAMM4CK9OAMMKCMPCAMPC61BOE3SC653 wpsadmin wcmrest:fb6ea2bd-47e2-4b2c-8e16-48aeff35eb4e Sample Article Sample Article Sample Article Content 2020-04-23T19:18:35.462Z uid=wpsadmin,o=defaultWIMFileBasedRealm /wps/mycontenthandler/!ut/p/digest!DEqoG-vlJYym_KoW9OQbyw/um/users/profiles/Z9eAeO1E2MPKCIPC2MMK6HHOCJMG63BOAMM4CK9OAMMKCMPCAMPC61BOE3SC653 wpsadmin wcmrest:4039c2b7-3fa6-4026-a2ed-f6320ee1f6d9 Sample Article 2 Sample Article 2 Sample Article 2 Content 2020-04-23T19:18:35.463Z uid=wpsadmin,o=defaultWIMFileBasedRealm /wps/mycontenthandler/!ut/p/digest!DEqoG-vlJYym_KoW9OQbyw/um/users/profiles/Z9eAeO1E2MPKCIPC2MMK6HHOCJMG63BOAMM4CK9OAMMKCMPCAMPC61BOE3SC653 wpsadmin wcmrest:fa77c56b-6af7-4491-bc4e-7b464c3832a3 Articles List Articles List Articles List LibraryMenuComponent 2020-04-23T19:18:35.462Z uid=wpsadmin,o=defaultWIMFileBasedRealm /wps/mycontenthandler/!ut/p/digest!DEqoG-vlJYym_KoW9OQbyw/um/users/profiles/Z9eAeO1E2MPKCIPC2MMK6HHOCJMG63BOAMM4CK9OAMMKCMPCAMPC61BOE3SC653 wpsadmin wcmrest:84efffc2-67fa-403c-b977-8ad74f81390a Article Toolbar Article Toolbar Article toolbar LibraryAuthoringToolsComponent 2020-04-23T19:18:35.462Z uid=wpsadmin,o=defaultWIMFileBasedRealm /wps/mycontenthandler/!ut/p/digest!DEqoG-vlJYym_KoW9OQbyw/um/users/profiles/Z9eAeO1E2MPKCIPC2MMK6HHOCJMG63BOAMM4CK9OAMMKCMPCAMPC61BOE3SC653 wpsadmin ```","title":"Using the Web Content Manager Reference GET API"},{"location":"wcm/wcm_REST_web_content_manager_lock_unlock_api/#updating-references","text":"Both Digital Asset Management and Web Content Manager references can be updated with the published APIs as documented here: How to use REST with components . Example for Digital Asset Management, to retrieve references to UUID: 7e3cb713-251a-485c-a578-1aa219411b5e. Response: ``` <?xml version=\"1.0\" encoding=\"UTF-8\"?> wcmrest:Project/7e3cb713-251a-485c-a578-1aa219411b5e/project-items wcmrest:Project/7e3cb713-251a-485c-a578-1aa219411b5e/project-items 2020-05-11T15:59:18.639Z 1 wcmrest:43174081-4f88-436a-a87b-16e6375c2e8f testmeout testmeout Content 2020-05-11T15:52:39.290Z uid=wpsadmin,o=defaultWIMFileBasedRealm /wps/mycontenthandler/!ut/p/digest!HttiyBvTxv1fgs63hc74Pw/um/users/profiles/Z9eAeHPOG3SG6HHC2JMOCG1P8MMG6OPO4JM47JHDAJM076RDG3RGCN1C66SOC53 wpsadmin uid=wpsadmin,o=defaultWIMFileBasedRealm /wps/mycontenthandler/!ut/p/digest!HttiyBvTxv1fgs63hc74Pw/um/users/profiles/Z9eAeHPOG3SG6HHC2JMOCG1P8MMG6OPO4JM47JHDAJM076RDG3RGCN1C66SOC53 wpsadmin ``` Iterating over the results will use the edit link to fetch the item: GET: ``` /wps/mycontenthandler/!ut/p/digest!HttiyBvTxv1fgs63hc74Pw/wcmrest/Content/43174081-4f88-436a-a87b-16e6375c2e8f <?xml version=\"1.0\" encoding=\"UTF-8\"?> wcmrest:43174081-4f88-436a-a87b-16e6375c2e8f testmeout testmeout Content 2020-05-11T15:52:39.290Z 2020-05-11T15:51:52.513Z uid=wpsadmin,o=defaultWIMFileBasedRealm /wps/mycontenthandler/!ut/p/digest!HttiyBvTxv1fgs63hc74Pw/um/users/profiles/Z9eAeHPOG3SG6HHC2JMOCG1P8MMG6OPO4JM47JHDAJM076RDG3RGCN1C66SOC53 wpsadmin uid=wpsadmin,o=defaultWIMFileBasedRealm /wps/mycontenthandler/!ut/p/digest!HttiyBvTxv1fgs63hc74Pw/um/users/profiles/Z9eAeHPOG3SG6HHC2JMOCG1P8MMG6OPO4JM47JHDAJM076RDG3RGCN1C66SOC53 wpsadmin uid=wpsadmin,o=defaultWIMFileBasedRealm /wps/mycontenthandler/!ut/p/digest!HttiyBvTxv1fgs63hc74Pw/um/users/profiles/Z9eAeHPOG3SG6HHC2JMOCG1P8MMG6OPO4JM47JHDAJM076RDG3RGCN1C66SOC53 wpsadmin uid=wpsadmin,o=defaultWIMFileBasedRealm /wps/mycontenthandler/!ut/p/digest!HttiyBvTxv1fgs63hc74Pw/um/users/profiles/Z9eAeHPOG3SG6HHC2JMOCG1P8MMG6OPO4JM47JHDAJM076RDG3RGCN1C66SOC53 wpsadmin test ImageComponent Screen Shot 2020-05-07 at 10.26.24 AM.png http://samplehost.com:3000/dx/api/dam/v0/collections/48839939-375e-4f07-a85d-56d13ddba3c8/items/7e3cb713-251a-485c-a578-1aa219411b5e?binary=true ``` To send an update to the item to replace the resourceUri and add fileName and type: <?xml version=\"1.0\" encoding=\"UTF-8\"?><entry xmlns=\"http://www.w3.org/2005/Atom\" xmlns:wcm=\"http://www.ibm.com/xmlns/wcm/8.0\"> <id>wcmrest:43174081-4f88-436a-a87b-16e6375c2e8f</id> <title xml:lang=\"en\">testmeout</title> <summary xml:lang=\"en\"></summary> <wcm:name>testmeout</wcm:name> <wcm:type>Content</wcm:type> <updated>2020-05-11T15:52:39.290Z</updated> <wcm:created>2020-05-11T15:51:52.513Z</wcm:created> <author> <wcm:distinguishedName>uid=wpsadmin,o=defaultWIMFileBasedRealm</wcm:distinguishedName> <uri>/wps/mycontenthandler/!ut/p/digest!HttiyBvTxv1fgs63hc74Pw/um/users/profiles/Z9eAeHPOG3SG6HHC2JMOCG1P8MMG6OPO4JM47JHDAJM076RDG3RGCN1C66SOC53</uri> <name>wpsadmin</name> </author> <wcm:owner> <wcm:distinguishedName>uid=wpsadmin,o=defaultWIMFileBasedRealm</wcm:distinguishedName> <uri>/wps/mycontenthandler/!ut/p/digest!HttiyBvTxv1fgs63hc74Pw/um/users/profiles/Z9eAeHPOG3SG6HHC2JMOCG1P8MMG6OPO4JM47JHDAJM076RDG3RGCN1C66SOC53</uri> <name>wpsadmin</name> </wcm:owner> <wcm:lastModifier> <wcm:distinguishedName>uid=wpsadmin,o=defaultWIMFileBasedRealm</wcm:distinguishedName> <uri>/wps/mycontenthandler/!ut/p/digest!HttiyBvTxv1fgs63hc74Pw/um/users/profiles/Z9eAeHPOG3SG6HHC2JMOCG1P8MMG6OPO4JM47JHDAJM076RDG3RGCN1C66SOC53</uri> <name>wpsadmin</name> </wcm:lastModifier> <wcm:creator> <wcm:distinguishedName>uid=wpsadmin,o=defaultWIMFileBasedRealm</wcm:distinguishedName> <uri>/wps/mycontenthandler/!ut/p/digest!HttiyBvTxv1fgs63hc74Pw/um/users/profiles/Z9eAeHPOG3SG6HHC2JMOCG1P8MMG6OPO4JM47JHDAJM076RDG3RGCN1C66SOC53</uri> <name>wpsadmin</name> </wcm:creator> <wcm:profile/> <link rel=\"self\" href=\"/wps/mycontenthandler/!ut/p/digest!HttiyBvTxv1fgs63hc74Pw/wcmrest/Content/43174081-4f88-436a-a87b-16e6375c2e8f\" xml:lang=\"en\" label=\"Read\"/> <link rel=\"edit\" href=\"/wps/mycontenthandler/!ut/p/digest!HttiyBvTxv1fgs63hc74Pw/wcmrest/Content/43174081-4f88-436a-a87b-16e6375c2e8f\" xml:lang=\"en\" label=\"Edit\"/> <link rel=\"delete\" href=\"/wps/mycontenthandler/!ut/p/digest!HttiyBvTxv1fgs63hc74Pw/wcmrest/Content/43174081-4f88-436a-a87b-16e6375c2e8f\" xml:lang=\"en\" label=\"Delete\"/> <link rel=\"create-draft\" href=\"/wps/mycontenthandler/!ut/p/digest!HttiyBvTxv1fgs63hc74Pw/wcmrest/item/43174081-4f88-436a-a87b-16e6375c2e8f/create-draft\" xml:lang=\"en\" label=\"Create Draft\"/> <link rel=\"change-to-draft\" href=\"/wps/mycontenthandler/!ut/p/digest!HttiyBvTxv1fgs63hc74Pw/wcmrest/item/43174081-4f88-436a-a87b-16e6375c2e8f/change-to-draft\" xml:lang=\"en\" label=\"Change To Draft\"/> <link rel=\"access-control\" href=\"/wps/mycontenthandler/!ut/p/digest!HttiyBvTxv1fgs63hc74Pw/ac/access:oid:Z6QReDeKPC2JRG6G1E2JMG663EGJMG6JHD2MM4COPD4MM46M9PCJPS6LPO4JI1763\" xml:lang=\"en\" label=\"Access Control\"/> <link rel=\"library\" href=\"/wps/mycontenthandler/!ut/p/digest!HttiyBvTxv1fgs63hc74Pw/wcmrest/Library/f7e965b1-c9e4-4c07-a0e0-de8efb5faf2a\" xml:lang=\"en\" label=\"Library\"/> <link rel=\"parent\" href=\"/wps/mycontenthandler/!ut/p/digest!HttiyBvTxv1fgs63hc74Pw/wcmrest/SiteArea/bf117c51-d2ab-4818-b2de-02e6988fe9ad\" xml:lang=\"en\" label=\"Parent\"/> <link rel=\"versions\" href=\"/wps/mycontenthandler/!ut/p/digest!HttiyBvTxv1fgs63hc74Pw/wcmrest/item/43174081-4f88-436a-a87b-16e6375c2e8f/versions\" xml:lang=\"en\" label=\"Versions\"/> <link rel=\"preview\" href=\"/wps/poc/!ut/p/digest!HttiyBvTxv1fgs63hc74Pw/wcm/oid:43174081-4f88-436a-a87b-16e6375c2e8f\" xml:lang=\"en\" label=\"Preview\"/> <link rel=\"edit-media\" href=\"/wps/mycontenthandler/!ut/p/digest!HttiyBvTxv1fgs63hc74Pw/wcmrest/Content/43174081-4f88-436a-a87b-16e6375c2e8f\" type=\"application/vnd.ibm.wcm+xml\" xml:lang=\"en\" label=\"Edit Media\"/> <link rel=\"content-template\" href=\"/wps/mycontenthandler/!ut/p/digest!HttiyBvTxv1fgs63hc74Pw/wcmrest/ContentTemplate/c7abf2c0-7eff-4396-90e5-943a096c5ab3\" xml:lang=\"en\" label=\"Content Template\"/> <link rel=\"elements\" href=\"/wps/mycontenthandler/!ut/p/digest!HttiyBvTxv1fgs63hc74Pw/wcmrest/Content/43174081-4f88-436a-a87b-16e6375c2e8f/elements\" xml:lang=\"en\" label=\"Elements\"/> <category scheme=\"wcmrest:workflowState\" term=\"PUBLISHED\" label=\"Published\" xml:lang=\"en\"/> <category scheme=\"wcmrest:favorite\" term=\"false\" xml:lang=\"en\"/> <content type=\"application/vnd.ibm.wcm+xml\"> <wcm:content xmlns=\"http://www.ibm.com/xmlns/wcm/8.0\"> <elements xmlns:atom=\"http://www.w3.org/2005/Atom\"> <element name=\"test\"> <title xml:lang=\"en\">test</title> <type>ImageComponent</type> <data type=\"application/vnd.ibm.wcm+xml\"> <image> <dimension height=\"\" width=\"\" border=\"0\"/> <altText></altText> <tagName></tagName> <fileName>Screen Shot 2020-05-07 at 10.26.24 AM.png</fileName> <resourceUri type=\"image/png\">http://samplehost.com:3000/dx/api/dam/v0/collections/48839939-375e-4f07-a85d-56d13ddba3c8/items/7e3cb713-251a-485c-a578-1aa219411b5e?binary=true</resourceUri> </image> </data> </element> </elements> </wcm:content> </content> </entry>","title":"Updating references"},{"location":"wcm/wcm_REST_web_content_manager_lock_unlock_api/#create","text":"A content item can be created by sending a POST request to the following URI with an Atom entry used to represent the content item: /Content A library or parent link relation must be used to define the location of the hierarchical item that is being created. An authoring template must be specified to set what authoring template to use when the item is created. For example: POST: ``` HTTP/1.1 POST http://host:port/wps/mycontenthandler/wcmrest/Content/ Content-Type: application/atom+xml Content Name Content Title ``` Response: 201 Created","title":"Create"},{"location":"wcm/wcm_REST_web_content_manager_lock_unlock_api/#create-from-a-skeleton","text":"A \"skeleton\" representation of a content item that is created from a content template can be obtained to aid in the creation of content items. This can be obtained by using a GET request to the following URI. When the skeleton is obtained and completed a POST request can be made by using this data to create the item: /ContentTemplate/template-uuid/new-content. For example: HTTP/1.1 GET http://host:port/wps/mycontenthandler/wcmrest/ContentTemplate/b7b8b3fb-8fa1-4eb3-915e-ce7514f7067f/new-content Response 200 OK <?xml version=\"1.0\" encoding=\"UTF-8\"?> <entry xmlns=\"http://www.w3.org/2005/Atom\" xmlns:wcm=\"http://www.ibm.com/xmlns/wcm\"> <id>wcmrest:6bab48c6-1f24-454e-9bab-ae1be4cf3a0a</id> <title lang=\"en\"></title> <summary lang=\"en\"></summary> <wcm:name></wcm:name> <wcm:type>Content</wcm:type> <updated>2012-01-31T03:28:08.118Z</updated> <author> <wcm:distinguishedName>uid=wpsadmin,o=defaultWIMFileBasedRealm</ wcm:distinguishedName> <uri>/wps/mycontenthandler/!ut/p/digest!7K1PhYjxBw0jzCDqHCwg2w/um/ users/profiles/Z9eAeHPCAJG963RD2MMG6P9O6MMG66BD6MM47IHP4MMS6M1DAJQ4C1BCAMID653</uri> <name>wpsadmin</name> </author> <wcm:owner> <wcm:distinguishedName>uid=wpsadmin,o=defaultWIMFileBasedRealm</wcm:distinguishedName> <uri>/wps/mycontenthandler/!ut/p/digest!7K1PhYjxBw0jzCDqHCwg2w/um/ users/profiles/Z9eAeHPCAJG963RD2MMG6P9O6MMG66BD6MM47IHP4MMS6M1DAJQ4C1BCAMID653</uri> <name>wpsadmin</name> </wcm:owner> <link label=\"Library\" rel=\"library\" href=\"/wps/mycontenthandler/!ut/p/ digest!PQo5Yhy68oeppWcEz2sddA/wcmrest/item/a423287f-b0ce-4ee3-9c95-aa0939382228\" lang=\"en\"/> <link label=\"Content Template\" rel=\"content-template\" href=\"/wps/ mycontenthandler/!ut/p/digest!PQo5Yhy68oeppWcEz2sddA/wcmrest/Content/b7b8b3fb-8fa1-4eb3-915e-ce7514f7067f\" lang=\"en\"/> <content type=\"application/vnd.ibm.wcm+xml\"> <content xmlns=\"http://www.ibm.com/xmlns/wcm\"> <elements> <element name=\"Body\"> <title lang=\"en\">Body</title> <type>RichTextComponent</type>","title":"Create from a skeleton"},{"location":"wcm/wcm_config_delivery_caching_types/","text":"Web content cache types Learn about the types of caching used by HCL Web Content Manager, basic web content caching, and advanced web content caching. Basic web content caching This option is the simplest caching option. The first time a web page is rendered by the Web Content Manager application, it is stored in a cache. Users then access this page from the cache until it expires. Only then is the web page rendered afresh. The main benefit of this scenario is improved performance. Basic caching is used only on static content that does not require \"real-time\" access. Advanced web content caching There are two major differences between basic caching and advanced caching: Advanced caching can cache pages based on different user profiles. Cache parameters in connect tags and URL requests can be used to override your server's default advanced web content caching settings that allow you to set custom cache settings for individual web pages or components. Advanced caching type Details Site caching This type is the same as the basic web content cache except that cache parameters in connect tags and URL requests can be used to override your server's default advanced web content caching settings. Session caching When session caching is enabled, a copy of each web page a user visits is stored in the session cache. The User accesses the cached version of a web page until they start a new session, or until the cached web page is expired from the cache. User caching When user caching is enabled, a copy of each web page a user visits is stored in the user cache. The user accesses the cached version of a web page until the cached web page is expired from the cache. Secured caching Secured caching is used on sites where the item security features are used to grant different users access to different web pages and components based on the groups they belong to. Personalized caching Personalized caching is used to cache web pages of users who have the same \"personalization profile\". This means that users who have selected the same personalization categories and keywords, and who belong to the same group, share a single cache. Default web content caching versus custom caching Cache parameters in connect tags and URL requests can be used to override your server's default advanced web content caching settings allowing you to set custom cache settings for individual web pages or components. In most cases, basic, site and session caching would only be used as your server's default web content cache. User, secured and personalized caching would mostly be used when using custom caching in connect tags and URL requests. Note: If basic caching is used as your default web content cache, custom caching cannot be used. Cache comparisons Function Basic caching Advanced caching Memory usage per item: Medium High Performance improvement: Very High High Custom caching available: No Yes Connect tag processing: No Yes Web Content Viewer Portlet: No Yes Caching Personalization components: Web content caching can sometimes be used with Personalization components but will depend on the conditions set in the personalization rule, or the resources used to determine the rule results. Cache testing will be required to determine if the content returned by your personalization component can be cached using web content caching.","title":"Web content cache types"},{"location":"wcm/wcm_config_delivery_caching_types/#web-content-cache-types","text":"Learn about the types of caching used by HCL Web Content Manager, basic web content caching, and advanced web content caching.","title":"Web content cache types"},{"location":"wcm/wcm_config_delivery_caching_types/#basic-web-content-caching","text":"This option is the simplest caching option. The first time a web page is rendered by the Web Content Manager application, it is stored in a cache. Users then access this page from the cache until it expires. Only then is the web page rendered afresh. The main benefit of this scenario is improved performance. Basic caching is used only on static content that does not require \"real-time\" access.","title":"Basic web content caching"},{"location":"wcm/wcm_config_delivery_caching_types/#advanced-web-content-caching","text":"There are two major differences between basic caching and advanced caching: Advanced caching can cache pages based on different user profiles. Cache parameters in connect tags and URL requests can be used to override your server's default advanced web content caching settings that allow you to set custom cache settings for individual web pages or components. Advanced caching type Details Site caching This type is the same as the basic web content cache except that cache parameters in connect tags and URL requests can be used to override your server's default advanced web content caching settings. Session caching When session caching is enabled, a copy of each web page a user visits is stored in the session cache. The User accesses the cached version of a web page until they start a new session, or until the cached web page is expired from the cache. User caching When user caching is enabled, a copy of each web page a user visits is stored in the user cache. The user accesses the cached version of a web page until the cached web page is expired from the cache. Secured caching Secured caching is used on sites where the item security features are used to grant different users access to different web pages and components based on the groups they belong to. Personalized caching Personalized caching is used to cache web pages of users who have the same \"personalization profile\". This means that users who have selected the same personalization categories and keywords, and who belong to the same group, share a single cache.","title":"Advanced web content caching"},{"location":"wcm/wcm_config_delivery_caching_types/#default-web-content-caching-versus-custom-caching","text":"Cache parameters in connect tags and URL requests can be used to override your server's default advanced web content caching settings allowing you to set custom cache settings for individual web pages or components. In most cases, basic, site and session caching would only be used as your server's default web content cache. User, secured and personalized caching would mostly be used when using custom caching in connect tags and URL requests. Note: If basic caching is used as your default web content cache, custom caching cannot be used.","title":"Default web content caching versus custom caching"},{"location":"wcm/wcm_config_delivery_caching_types/#cache-comparisons","text":"Function Basic caching Advanced caching Memory usage per item: Medium High Performance improvement: Very High High Custom caching available: No Yes Connect tag processing: No Yes Web Content Viewer Portlet: No Yes Caching Personalization components: Web content caching can sometimes be used with Personalization components but will depend on the conditions set in the personalization rule, or the resources used to determine the rule results. Cache testing will be required to determine if the content returned by your personalization component can be cached using web content caching.","title":"Cache comparisons"},{"location":"wcm/wcm_config_ephox_custom/","text":"Rich text editor toolbar configuration options Run these configuration tasks to change the configuration of the rich text editor toolbar. Video : Using the advanced rich text editor in HCL Digital Experience Note: In a clustered environment, these tasks are only run on the primary server. Using a custom Textbox.io editor toolbar The Textbox.io editor uses a custom configuration file that is named tbio_config.jsp to set custom parameters for the toolbar. Copy your custom configuration file to [wp\\_profile\\_root](../reference/wpsdirstr.md#wp_profile_root) \\PortalServer\\wcm\\shared\\app\\config\\textboxio. Note: Sample configurations can be found in [PortalServer\\_root](../reference/wpsdirstr.md#wp_root) \\wcm\\prereq.wcm\\wcm\\config\\templates\\shared\\app\\config\\textboxio Open a command prompt. Run the following command from the [wp\\_profile\\_root](../reference/wpsdirstr.md#wp_profile_root)/ConfigEngine directory: Windows\u2122 ConfigEngine.bat configure-wcm-ephox-editor-custom-configuration -DWasPassword=password -DPortalAdminId=username -DPortalAdminPwd=password UNIX\u2122Linux\u2122 ./ConfigEngine.sh configure-wcm-ephox-editor-custom-configuration -DWasPassword=password -DPortalAdminId=username -DPortalAdminPwd=password IBM\u00ae i ConfigEngine.sh configure-wcm-ephox-editor-custom-configuration -DWasPassword=password -DPortalAdminId=username -DPortalAdminPwd=password Note: An administrator user name and password is not required if you already specified the portal administrator user name and password with the PortalAdminId and PortalAdminPwd settings in the wkplc.properties file. Restart the server. Note: To revert to the default editor toolbar, run the task that is named remove-wcm-ephox-editor-custom-configuration on the primary node only. With HCL Digital Experience 9.5 CF18 , in order to remediate security vulnerabilities in several open source libraries, the Rich Text Editor Textbox.io requires a minimum supported Java level of 1.8. If you are unable to move to Java 8, it is recommended that you use the out-of-the-box, default CKEditor provided with HCL Digital Experience. Enabling Textbox I/O editor To enable the new Textbox I/O editor fix using HCL Digital Experience CF18 or later, run this configuration process in the Textbox I/O editor: ConfigEngine(sh/bat) action-deploy-tiny-editors If a custom configuration is used for this editor, run this configuration process: ConfigEngine(sh/bat) configure-wcm-ephox-editor-custom-configuration Restart the WebSphere_Portal server once the configuration process is completed. Beginning with HCL DX 9.5 Container Update CF182 , the updated Textbox.io Rich Text editor is deployed out-of-box for the HCL DX 9.5 Containers. When deployed in supported Kubernetes environments, a ConfigEngine task is required to be run before the Textbox.io editor application will work correctly (i.e. before for selecting the Advanced editor for use in Web Content Manager). Run the ConfigEngine task: /opt/HCL/wp_profile/ConfigEngine/./ConfigEngine.sh action-create-was-variable-tiny-editors-cloud -DDxHost=<FQDN of the exposed DX host> -DWasUserid=wpsadmin -DWasPassword=wpsadmin with <FQDN of the exposed DX host> being the value of the hostname used to access DX. For example, if the URL for accessing DX in your cloud environment is https://dx-deployment-service-dx-home-sec.net/wps/portal, the DxHost value would be dx-deployment-service-dx-home-sec.net so the ConfigEngine command would look like: /opt/HCL/wp_profile/ConfigEngine/./ConfigEngine.sh action-create-was-variable-tiny-editors-cloud -DDxHost=dx-deployment-service-dx-home-sec.net -DWasUserid=wpsadmin -DWasPassword=wpsadmin Disabling Textbox I/O editor to use the OOB editor To disable Textbox I/O editor and to revert to an earlier version of the Rich Text editor, run the following process: ConfigEngine(sh/bat) action-remove-tiny-editors ConfigEngine(sh/bat) configure-wcm-editor ConfigEngine(sh/bat) remove-wcm-ephox-editor-custom-configuration (if a custom configuration is used) Restart the WebSphere_Portal server. Using a custom EditLive! editor toolbar Note: Ephox EditLive! is a deprecated feature as of CF11 or higher. The EditLive! editor uses a custom configuration file that is named config.xml.jsp to set custom parameters for the toolbar. Copy your custom configuration file to [wp\\_profile\\_root](../reference/wpsdirstr.md#wp_profile_root) \\PortalServer\\wcm\\shared\\app\\config\\ephox. Note: Sample configurations can be found in [PortalServer\\_root](../reference/wpsdirstr.md#wp_root) \\wcm\\prereq.wcm\\wcm\\config\\templates\\shared\\app\\config\\ephox. Open a command prompt. Run the following command from the [wp\\_profile\\_root](../reference/wpsdirstr.md#wp_profile_root)/ConfigEngine directory: Windows\u2122 ConfigEngine.bat configure-wcm-ephox-editor-custom-configuration -DWasPassword=password -DPortalAdminId=username -DPortalAdminPwd=password UNIX\u2122Linux\u2122 ./ConfigEngine.sh configure-wcm-ephox-editor-custom-configuration -DWasPassword=password -DPortalAdminId=username -DPortalAdminPwd=password IBM\u00ae i ConfigEngine.sh configure-wcm-ephox-editor-custom-configuration -DWasPassword=password -DPortalAdminId=username -DPortalAdminPwd=password Note: An administrator user name and password is not required if you already specified the portal administrator user name and password with the PortalAdminId and PortalAdminPwd settings in the wkplc.properties file. Restart the server. Note: To revert to the default editor toolbar, run the task that is named remove-wcm-ephox-editor-custom-configuration on the primary node only. Beginning with HCL Digital Experience Container Update CF182, , the updated Textbox.io Rich Text editor is deployed out-of-the-box for HCL DX 9.5 Containers. When deployed in supported Kubernetes environments, a ConfigEngine must be required to be run before the Textbox.io editor application will work correctly (i.e. before for selecting the Advanced editor for use in Web Content Manager. Reverting to the EditLive! editor version 7 toolbar Note: Ephox EditLive! is fully unsupported. Documentation resource: Newly unsupported features and themes for HCL Digital Experience 8.5 and 9.0","title":"Rich text editor toolbar configuration options"},{"location":"wcm/wcm_config_ephox_custom/#rich-text-editor-toolbar-configuration-options","text":"Run these configuration tasks to change the configuration of the rich text editor toolbar. Video : Using the advanced rich text editor in HCL Digital Experience Note: In a clustered environment, these tasks are only run on the primary server.","title":"Rich text editor toolbar configuration options"},{"location":"wcm/wcm_config_ephox_custom/#using-a-custom-textboxio-editor-toolbar","text":"The Textbox.io editor uses a custom configuration file that is named tbio_config.jsp to set custom parameters for the toolbar. Copy your custom configuration file to [wp\\_profile\\_root](../reference/wpsdirstr.md#wp_profile_root) \\PortalServer\\wcm\\shared\\app\\config\\textboxio. Note: Sample configurations can be found in [PortalServer\\_root](../reference/wpsdirstr.md#wp_root) \\wcm\\prereq.wcm\\wcm\\config\\templates\\shared\\app\\config\\textboxio Open a command prompt. Run the following command from the [wp\\_profile\\_root](../reference/wpsdirstr.md#wp_profile_root)/ConfigEngine directory: Windows\u2122 ConfigEngine.bat configure-wcm-ephox-editor-custom-configuration -DWasPassword=password -DPortalAdminId=username -DPortalAdminPwd=password UNIX\u2122Linux\u2122 ./ConfigEngine.sh configure-wcm-ephox-editor-custom-configuration -DWasPassword=password -DPortalAdminId=username -DPortalAdminPwd=password IBM\u00ae i ConfigEngine.sh configure-wcm-ephox-editor-custom-configuration -DWasPassword=password -DPortalAdminId=username -DPortalAdminPwd=password Note: An administrator user name and password is not required if you already specified the portal administrator user name and password with the PortalAdminId and PortalAdminPwd settings in the wkplc.properties file. Restart the server. Note: To revert to the default editor toolbar, run the task that is named remove-wcm-ephox-editor-custom-configuration on the primary node only. With HCL Digital Experience 9.5 CF18 , in order to remediate security vulnerabilities in several open source libraries, the Rich Text Editor Textbox.io requires a minimum supported Java level of 1.8. If you are unable to move to Java 8, it is recommended that you use the out-of-the-box, default CKEditor provided with HCL Digital Experience.","title":"Using a custom Textbox.io editor toolbar"},{"location":"wcm/wcm_config_ephox_custom/#enabling-textbox-io-editor","text":"To enable the new Textbox I/O editor fix using HCL Digital Experience CF18 or later, run this configuration process in the Textbox I/O editor: ConfigEngine(sh/bat) action-deploy-tiny-editors If a custom configuration is used for this editor, run this configuration process: ConfigEngine(sh/bat) configure-wcm-ephox-editor-custom-configuration Restart the WebSphere_Portal server once the configuration process is completed. Beginning with HCL DX 9.5 Container Update CF182 , the updated Textbox.io Rich Text editor is deployed out-of-box for the HCL DX 9.5 Containers. When deployed in supported Kubernetes environments, a ConfigEngine task is required to be run before the Textbox.io editor application will work correctly (i.e. before for selecting the Advanced editor for use in Web Content Manager). Run the ConfigEngine task: /opt/HCL/wp_profile/ConfigEngine/./ConfigEngine.sh action-create-was-variable-tiny-editors-cloud -DDxHost=<FQDN of the exposed DX host> -DWasUserid=wpsadmin -DWasPassword=wpsadmin with <FQDN of the exposed DX host> being the value of the hostname used to access DX. For example, if the URL for accessing DX in your cloud environment is https://dx-deployment-service-dx-home-sec.net/wps/portal, the DxHost value would be dx-deployment-service-dx-home-sec.net so the ConfigEngine command would look like: /opt/HCL/wp_profile/ConfigEngine/./ConfigEngine.sh action-create-was-variable-tiny-editors-cloud -DDxHost=dx-deployment-service-dx-home-sec.net -DWasUserid=wpsadmin -DWasPassword=wpsadmin","title":"Enabling Textbox I/O editor"},{"location":"wcm/wcm_config_ephox_custom/#disabling-textbox-io-editor-to-use-the-oob-editor","text":"To disable Textbox I/O editor and to revert to an earlier version of the Rich Text editor, run the following process: ConfigEngine(sh/bat) action-remove-tiny-editors ConfigEngine(sh/bat) configure-wcm-editor ConfigEngine(sh/bat) remove-wcm-ephox-editor-custom-configuration (if a custom configuration is used) Restart the WebSphere_Portal server.","title":"Disabling Textbox I/O editor to use the OOB editor"},{"location":"wcm/wcm_config_ephox_custom/#using-a-custom-editlive-editor-toolbar","text":"Note: Ephox EditLive! is a deprecated feature as of CF11 or higher. The EditLive! editor uses a custom configuration file that is named config.xml.jsp to set custom parameters for the toolbar. Copy your custom configuration file to [wp\\_profile\\_root](../reference/wpsdirstr.md#wp_profile_root) \\PortalServer\\wcm\\shared\\app\\config\\ephox. Note: Sample configurations can be found in [PortalServer\\_root](../reference/wpsdirstr.md#wp_root) \\wcm\\prereq.wcm\\wcm\\config\\templates\\shared\\app\\config\\ephox. Open a command prompt. Run the following command from the [wp\\_profile\\_root](../reference/wpsdirstr.md#wp_profile_root)/ConfigEngine directory: Windows\u2122 ConfigEngine.bat configure-wcm-ephox-editor-custom-configuration -DWasPassword=password -DPortalAdminId=username -DPortalAdminPwd=password UNIX\u2122Linux\u2122 ./ConfigEngine.sh configure-wcm-ephox-editor-custom-configuration -DWasPassword=password -DPortalAdminId=username -DPortalAdminPwd=password IBM\u00ae i ConfigEngine.sh configure-wcm-ephox-editor-custom-configuration -DWasPassword=password -DPortalAdminId=username -DPortalAdminPwd=password Note: An administrator user name and password is not required if you already specified the portal administrator user name and password with the PortalAdminId and PortalAdminPwd settings in the wkplc.properties file. Restart the server. Note: To revert to the default editor toolbar, run the task that is named remove-wcm-ephox-editor-custom-configuration on the primary node only. Beginning with HCL Digital Experience Container Update CF182, , the updated Textbox.io Rich Text editor is deployed out-of-the-box for HCL DX 9.5 Containers. When deployed in supported Kubernetes environments, a ConfigEngine must be required to be run before the Textbox.io editor application will work correctly (i.e. before for selecting the Advanced editor for use in Web Content Manager.","title":"Using a custom EditLive! editor toolbar"},{"location":"wcm/wcm_config_ephox_custom/#reverting-to-the-editlive-editor-version-7-toolbar","text":"Note: Ephox EditLive! is fully unsupported. Documentation resource: Newly unsupported features and themes for HCL Digital Experience 8.5 and 9.0","title":"Reverting to the EditLive! editor version 7 toolbar"},{"location":"wcm/wcm_config_wcmviewer_wsrp/","text":"Enabling remote rendering with WSRP and the Web Content Viewer To display web content on a portal that does not include HCL Web Content Manager, you can use the Web Content Viewer and the WSRP support in the portal. The Web Content Viewer can then retrieve and display content from a web content system on a different server. When to use remote rendering: The preferred way to render content on one server from another server is to syndicate the content to the delivery server. On the delivery server, you can then locally render the content with a Web Content Viewer. However, remote rendering with WSRP is appropriate for service-oriented architecture (SOA) scenarios where you want to incorporate specific pieces of content into your website. When you use the Web Content Viewer for remote rendering with WSRP, the following conditions apply: The remote web content server acts as the WSRP Producer. The portal with the Web Content Viewer acts as the WSRP Consumer. Note: Remote rendering with WSRP is supported only when you render content from the default virtual portal. Set up the WSRP environment between the Producer portal and the Consumer portal, as described in WSRP Services . If you plan to use the Edit Shared Settings mode or the Configure mode in the portlet with WSRP, configure web service security between the Producer and the Consumer portals. You might have basic authentication challenges when you configure the portlet on the Consumer. To avoid these challenges, customize the WSRP resource proxy for LTPA token forwarding. Go to Customizing the WSRP resource proxy for LTPA token forwarding for information. Provide the Web Content Viewer Portlet as a WSRP service hosted on the remote web content server acting as the WSRP Producer. Consume the remote Web Content Viewer that is provided as a WSRP service on the portal acting as the WSRP Consumer. Configure the Web Content Viewer to display content, just as you would configure a local Web Content Viewer. When you use the viewer with WSRP, settings for selecting content from a web content library show content from the remote web content system. Note: Depending on the configuration of the Web Content Viewer, resources like resource bundle files or content processor plug-ins might be required. In such cases, the resources must be available on the remote web content server acting as the WSRP Producer. Limitations when using WSRP with the Web Content Viewer: Because the concept of pages and web content pages does not exist in WSRP, you cannot use the dynamic link broadcasting feature with web content pages. When you specify how to broadcast links, do not select Dynamically select a web content page in the Broadcast links to field. Selecting this option has the same effect as broadcasting links to the current page. Web content inline editing for your web content is not supported with WSRP. The use of remote authoring action URLs in your web content is not supported with WSRP. Tagging and rating for web content is not supported with WSRP. Personalization elements are not supported with WSRP. Therefore, you cannot use features that require personalization rules. Examples: content targeting, federated documents, social rendering, and Digital Data Connector (DDC) for HCL Portal. Limitations when using WSRP with the Web Content Viewer with other non-HCL Digital Experience WSRP Consumers: The link broadcasting feature of the viewer is not supported for the WSRP Consumers of other vendors. This limitation is because the concept of pages and web content pages does not exist in WSRP. When you specify how to broadcast links, you can select only the option None .","title":"Enabling remote rendering with WSRP and the Web Content Viewer"},{"location":"wcm/wcm_config_wcmviewer_wsrp/#enabling-remote-rendering-with-wsrp-and-the-web-content-viewer","text":"To display web content on a portal that does not include HCL Web Content Manager, you can use the Web Content Viewer and the WSRP support in the portal. The Web Content Viewer can then retrieve and display content from a web content system on a different server. When to use remote rendering: The preferred way to render content on one server from another server is to syndicate the content to the delivery server. On the delivery server, you can then locally render the content with a Web Content Viewer. However, remote rendering with WSRP is appropriate for service-oriented architecture (SOA) scenarios where you want to incorporate specific pieces of content into your website. When you use the Web Content Viewer for remote rendering with WSRP, the following conditions apply: The remote web content server acts as the WSRP Producer. The portal with the Web Content Viewer acts as the WSRP Consumer. Note: Remote rendering with WSRP is supported only when you render content from the default virtual portal. Set up the WSRP environment between the Producer portal and the Consumer portal, as described in WSRP Services . If you plan to use the Edit Shared Settings mode or the Configure mode in the portlet with WSRP, configure web service security between the Producer and the Consumer portals. You might have basic authentication challenges when you configure the portlet on the Consumer. To avoid these challenges, customize the WSRP resource proxy for LTPA token forwarding. Go to Customizing the WSRP resource proxy for LTPA token forwarding for information. Provide the Web Content Viewer Portlet as a WSRP service hosted on the remote web content server acting as the WSRP Producer. Consume the remote Web Content Viewer that is provided as a WSRP service on the portal acting as the WSRP Consumer. Configure the Web Content Viewer to display content, just as you would configure a local Web Content Viewer. When you use the viewer with WSRP, settings for selecting content from a web content library show content from the remote web content system. Note: Depending on the configuration of the Web Content Viewer, resources like resource bundle files or content processor plug-ins might be required. In such cases, the resources must be available on the remote web content server acting as the WSRP Producer. Limitations when using WSRP with the Web Content Viewer: Because the concept of pages and web content pages does not exist in WSRP, you cannot use the dynamic link broadcasting feature with web content pages. When you specify how to broadcast links, do not select Dynamically select a web content page in the Broadcast links to field. Selecting this option has the same effect as broadcasting links to the current page. Web content inline editing for your web content is not supported with WSRP. The use of remote authoring action URLs in your web content is not supported with WSRP. Tagging and rating for web content is not supported with WSRP. Personalization elements are not supported with WSRP. Therefore, you cannot use features that require personalization rules. Examples: content targeting, federated documents, social rendering, and Digital Data Connector (DDC) for HCL Portal. Limitations when using WSRP with the Web Content Viewer with other non-HCL Digital Experience WSRP Consumers: The link broadcasting feature of the viewer is not supported for the WSRP Consumers of other vendors. This limitation is because the concept of pages and web content pages does not exist in WSRP. When you specify how to broadcast links, you can select only the option None .","title":"Enabling remote rendering with WSRP and the Web Content Viewer"},{"location":"wcm/wcm_dev_caching_cache-parameters/","text":"Cache parameters Use the cache parameters in HCL Web Content Manager tags and URLs to specify whether the retrieved data is cached or not. If it is cached, how it is cached. The cache parameter is not mandatory. Custom caching parameters can be used only when a server's default web content cache is set to none or advanced caching. If basic caching is used as your default web content cache, custom caching cannot be used. Custom caching can be used to set cache parameters for basic, advanced, and data caches. When custom caching is used in a connect tag, the caching applies to the data that is being retrieved with the connect tag. When custom caching is used in a URL request, the caching applies to the entire page that is being requested. With HCL DX 9.5 Container Update CF195 and later releases, new options are available to update the advanced cache as a result of the WCM syndication processes. Details are provided in this section. Basic caching Advanced Caching Data caching CACHE=SITE CACHE=SESSION CACHE=NONE |CONTENTCACHE=SITE CONTENTCACHE=SESSION CONTENTCACHE=USER CONTENTCACHE=SECURED CONTENTCACHE=PERSONALIZED CONTENTCACHE=NONE |CONNECTORCACHE=SITE CONNECTORCACHE=SESSION CONNECTORCACHE=NONE | Examples: <CONNECT MOD=Web SRV=HTML ACTION=http://www.ibm.com CACHE=SITE > http://host:port/wps/wcm/connect/library/sitearea/content?cache=site&contentcache=session Custom caching strategies When you apply custom caching to static content, you would mostly use CACHE=SITE , CACHE=SESSION or CONTENTCACHE=USER . When User Groups are used in implementing site security, you can use the SECURED custom caching strategy: CONTENTCACHE=SECURED . When Categories and/or Keywords, along with User Groups, are used for customization of your site, you can use the PERSONALIZED custom caching strategy: CONTENTCACHE=PERSONALIZED . If your Server's default web Content Cache is set to Advanced, you must use CONTENTCACHE=NONE to disable caching. If you retrieve external data, you must use CONNECTORCACHE=NONE to disable caching. CacheKey parameter The CacheKey parameter is used when caching content with the basic cache. A CacheKey is used as a key instead of a URL. This strategy is useful if you have multiple URLs for the same page but want it cached only once. This reduces the amount of memory that is used by the cache. Example: The following URLs use the same web page called news.html. <CONNECT MOD=Web SRV=HTML ACTION=http://www.ibm.com/news.html CACHE=SITE CACHEKEY=news > <CONNECT MOD=Web SRV=HTML ACTION=http://www.ibm.com.au/news.html CACHE=SITE CACHEKEY=news > <CONNECT MOD=Web SRV=HTML ACTION=http://www.lotus.com/news.html CACHE=SITE CACHEKEY=news > In this example, \"news\" is used as the CacheKey to store the value of the response from these connect tags. This means that news.html is cached only once instead of being cached three separate times. Caching, content updates, and syndication When an item is updated, either directly or as a result of syndication, no cache is updated. The rendered items are not updated until each configured cache is expired. It is important to choose cache timeout parameters that complement your syndication strategy. In HCL DX 9.5 Container Update CF195, CF20, and later releases, new options are available to flush the Web Content Manager advanced cache as a result of syndication operations. See the Web content cache types Help Center topic for details on Web Content Manager cache types. The Web Content Manager Advanced Cache supports the capability to store the HTML required to render that piece of content in an Advanced Cache so that WCM doesn't have to reconstruct or process it again. In the next render request, if the content exists in the Advanced Cache, then WCM renders the HTML from the Advanced Cache and doesn't reconstruct all the details of that content item, which could include one or more calls to the JCR database. The savings in render time (and CPU time) can be significant. Traditionally, the WCM Advanced Cache is only invalidated by the expiration of a timer. That timer is set when content is placed in the Advanced Cache . As long as the item is in the Advanced Cache , it is rendered from there regardless of the updates in the JCR database. Typically, these updates might happen either through syndication or a direct content edit by an author using the Web Content Manager authoring interfaces. In DX Container Update CF195 and CF20, two new Web Content Manager Advanced Cache Flush functions are available: Flush WCMAdvanced Cache on Item Update : This option enables the removal of content items existing in the Advanced Cache if that item is updated through syndication or through WCM authoring interfaces. Note: Some items in the Web Content Manager Advanced Cache can refer to higher level artifacts, such as a DX site area or a menu. If content contained in this higher-level artifact is changed, it doesn't invalidate the higher-level artifact. This pattern is common in artifacts such as Presentation Templates that might refer to all of the content inside a site area, or it might refer to a menu that would iterate over a site area and select content matching a filter in the menu. Flush WCM Advanced Cache on Subscription Event : This option enables flushing the entire Web Content Manager Advanced Cache upon any non-empty subscription event. This option must be used with care, because clearing the entire Web Content Manager Advanced Cache will cause delays in performance of any access to WCM items not in the cache. When an item is NOT in the Advanced Cache , WCM must process the reference to that item and generate any HTML needed to access it. Once the item is processed the first time, the resulting HTML is put into the Advanced Cache . This means that as long as the HTML for the item resides in the Advanced Cache , WCM doesn't need to retrieve the item from the JCR, process it, and generate the HTML to render it. Enabling and use of this option should be done with care, to ensure that non-empty syndication actions are relatively rare (for example, not more than once or twice a day). How to enable these options: To enable the Flush WCMAdvanced Cache on Item Update function, a new Resource Environment Provider entry must exist in the WCM WCMConfigService Resource Entry Provider. It is defined as follows: Name: wcm.cache.flush.advanced.cache.on.item.update Value: true If this name/value pair is defined in the WebSphere Resource Environment Provider, either an update or a rename of the content item causes a flush for that item in the Advanced Cache . Either of these two actions can take place on a syndication of that item or a simple change of that item on the DX server in which it is cached (for example, from the WCM Authoring portlet). In either case, if the item exists in the Web Content Manager Advanced Cache , that entry in the Advanced Cache is invalidated, forcing WCM to recompute the HTML for that item when next referenced. To enable Flush WCM Advanced Cache on Subscription Event function, a new Resource Environment Provider entry must be defined in the WCM WCMConfigService Resource Environment Provider, as follows: Name: wcm.cache.flush.advanced.cache.on.subscription.event Value: true Note that it is possible to have both options enabled at the same time. However, the second option flushes the whole cache, which renders the first option useless.","title":"Cache parameters"},{"location":"wcm/wcm_dev_caching_cache-parameters/#cache-parameters","text":"Use the cache parameters in HCL Web Content Manager tags and URLs to specify whether the retrieved data is cached or not. If it is cached, how it is cached. The cache parameter is not mandatory. Custom caching parameters can be used only when a server's default web content cache is set to none or advanced caching. If basic caching is used as your default web content cache, custom caching cannot be used. Custom caching can be used to set cache parameters for basic, advanced, and data caches. When custom caching is used in a connect tag, the caching applies to the data that is being retrieved with the connect tag. When custom caching is used in a URL request, the caching applies to the entire page that is being requested. With HCL DX 9.5 Container Update CF195 and later releases, new options are available to update the advanced cache as a result of the WCM syndication processes. Details are provided in this section. Basic caching Advanced Caching Data caching CACHE=SITE CACHE=SESSION CACHE=NONE |CONTENTCACHE=SITE CONTENTCACHE=SESSION CONTENTCACHE=USER CONTENTCACHE=SECURED CONTENTCACHE=PERSONALIZED CONTENTCACHE=NONE |CONNECTORCACHE=SITE CONNECTORCACHE=SESSION CONNECTORCACHE=NONE | Examples: <CONNECT MOD=Web SRV=HTML ACTION=http://www.ibm.com CACHE=SITE > http://host:port/wps/wcm/connect/library/sitearea/content?cache=site&contentcache=session","title":"Cache parameters"},{"location":"wcm/wcm_dev_caching_cache-parameters/#custom-caching-strategies","text":"When you apply custom caching to static content, you would mostly use CACHE=SITE , CACHE=SESSION or CONTENTCACHE=USER . When User Groups are used in implementing site security, you can use the SECURED custom caching strategy: CONTENTCACHE=SECURED . When Categories and/or Keywords, along with User Groups, are used for customization of your site, you can use the PERSONALIZED custom caching strategy: CONTENTCACHE=PERSONALIZED . If your Server's default web Content Cache is set to Advanced, you must use CONTENTCACHE=NONE to disable caching. If you retrieve external data, you must use CONNECTORCACHE=NONE to disable caching.","title":"Custom caching strategies"},{"location":"wcm/wcm_dev_caching_cache-parameters/#cachekey-parameter","text":"The CacheKey parameter is used when caching content with the basic cache. A CacheKey is used as a key instead of a URL. This strategy is useful if you have multiple URLs for the same page but want it cached only once. This reduces the amount of memory that is used by the cache. Example: The following URLs use the same web page called news.html. <CONNECT MOD=Web SRV=HTML ACTION=http://www.ibm.com/news.html CACHE=SITE CACHEKEY=news > <CONNECT MOD=Web SRV=HTML ACTION=http://www.ibm.com.au/news.html CACHE=SITE CACHEKEY=news > <CONNECT MOD=Web SRV=HTML ACTION=http://www.lotus.com/news.html CACHE=SITE CACHEKEY=news > In this example, \"news\" is used as the CacheKey to store the value of the response from these connect tags. This means that news.html is cached only once instead of being cached three separate times.","title":"CacheKey parameter"},{"location":"wcm/wcm_dev_caching_cache-parameters/#caching-content-updates-and-syndication","text":"When an item is updated, either directly or as a result of syndication, no cache is updated. The rendered items are not updated until each configured cache is expired. It is important to choose cache timeout parameters that complement your syndication strategy. In HCL DX 9.5 Container Update CF195, CF20, and later releases, new options are available to flush the Web Content Manager advanced cache as a result of syndication operations. See the Web content cache types Help Center topic for details on Web Content Manager cache types. The Web Content Manager Advanced Cache supports the capability to store the HTML required to render that piece of content in an Advanced Cache so that WCM doesn't have to reconstruct or process it again. In the next render request, if the content exists in the Advanced Cache, then WCM renders the HTML from the Advanced Cache and doesn't reconstruct all the details of that content item, which could include one or more calls to the JCR database. The savings in render time (and CPU time) can be significant. Traditionally, the WCM Advanced Cache is only invalidated by the expiration of a timer. That timer is set when content is placed in the Advanced Cache . As long as the item is in the Advanced Cache , it is rendered from there regardless of the updates in the JCR database. Typically, these updates might happen either through syndication or a direct content edit by an author using the Web Content Manager authoring interfaces. In DX Container Update CF195 and CF20, two new Web Content Manager Advanced Cache Flush functions are available: Flush WCMAdvanced Cache on Item Update : This option enables the removal of content items existing in the Advanced Cache if that item is updated through syndication or through WCM authoring interfaces. Note: Some items in the Web Content Manager Advanced Cache can refer to higher level artifacts, such as a DX site area or a menu. If content contained in this higher-level artifact is changed, it doesn't invalidate the higher-level artifact. This pattern is common in artifacts such as Presentation Templates that might refer to all of the content inside a site area, or it might refer to a menu that would iterate over a site area and select content matching a filter in the menu. Flush WCM Advanced Cache on Subscription Event : This option enables flushing the entire Web Content Manager Advanced Cache upon any non-empty subscription event. This option must be used with care, because clearing the entire Web Content Manager Advanced Cache will cause delays in performance of any access to WCM items not in the cache. When an item is NOT in the Advanced Cache , WCM must process the reference to that item and generate any HTML needed to access it. Once the item is processed the first time, the resulting HTML is put into the Advanced Cache . This means that as long as the HTML for the item resides in the Advanced Cache , WCM doesn't need to retrieve the item from the JCR, process it, and generate the HTML to render it. Enabling and use of this option should be done with care, to ensure that non-empty syndication actions are relatively rare (for example, not more than once or twice a day). How to enable these options: To enable the Flush WCMAdvanced Cache on Item Update function, a new Resource Environment Provider entry must exist in the WCM WCMConfigService Resource Entry Provider. It is defined as follows: Name: wcm.cache.flush.advanced.cache.on.item.update Value: true If this name/value pair is defined in the WebSphere Resource Environment Provider, either an update or a rename of the content item causes a flush for that item in the Advanced Cache . Either of these two actions can take place on a syndication of that item or a simple change of that item on the DX server in which it is cached (for example, from the WCM Authoring portlet). In either case, if the item exists in the Web Content Manager Advanced Cache , that entry in the Advanced Cache is invalidated, forcing WCM to recompute the HTML for that item when next referenced. To enable Flush WCM Advanced Cache on Subscription Event function, a new Resource Environment Provider entry must be defined in the WCM WCMConfigService Resource Environment Provider, as follows: Name: wcm.cache.flush.advanced.cache.on.subscription.event Value: true Note that it is possible to have both options enabled at the same time. However, the second option flushes the whole cache, which renders the first option useless.","title":"Caching, content updates, and syndication"},{"location":"wcm/wcm_dev_projects_approving/","text":"Project States When you use a project, the project progresses through a series of states. Active A project that has draft items in it is considered \"active\". These items can be individually approved until they reach a state of \"pending\". Syndicating If \"All items and versions\" or \"All items\" syndication is enabled for a library, a status of \"Syndicating\" is displayed on the project until all items on both the syndicator and subscriber reaches a state of pending. Review If any approvers are assigned to a project, the project can be submitted for review when all items in the project are in a pending state. If approved, the project then progresses to publishing. Pending A project that contains only items in a \"pending\" state, or is approved, is itself considered \"pending\". If the project publish option is set to automatic this state is skipped. When the project is published manually or when the publish date is reached, the project moves to the \"publishing\" state. Publishing This state is the state where all items in the project move from pending to published. Publish Failed Indicates that one or more project items failed to publish. Published When all items are published, the project achieves a state of \"published\".","title":"Project States"},{"location":"wcm/wcm_dev_projects_approving/#project-states","text":"When you use a project, the project progresses through a series of states. Active A project that has draft items in it is considered \"active\". These items can be individually approved until they reach a state of \"pending\". Syndicating If \"All items and versions\" or \"All items\" syndication is enabled for a library, a status of \"Syndicating\" is displayed on the project until all items on both the syndicator and subscriber reaches a state of pending. Review If any approvers are assigned to a project, the project can be submitted for review when all items in the project are in a pending state. If approved, the project then progresses to publishing. Pending A project that contains only items in a \"pending\" state, or is approved, is itself considered \"pending\". If the project publish option is set to automatic this state is skipped. When the project is published manually or when the publish date is reached, the project moves to the \"publishing\" state. Publishing This state is the state where all items in the project move from pending to published. Publish Failed Indicates that one or more project items failed to publish. Published When all items are published, the project achieves a state of \"published\".","title":"Project States"},{"location":"wcm/wcm_library_default_items/","text":"Web content library default items When you create a web content library, you can choose to include a set of default web content items in the new library. These items can be used as a starting point for your Web Content Manager system and website. Video : HCL Digital Experience - Create and add a WCM Library Default items The following items are created when you select Include default items in the new library when you create a library. Workflow items: A workflow that is named Express Workflow with a single workflow stage named Publish Stage by using the publish action named Publish . A workflow that is named Three Stage Workflow by using the following workflow stages: Draft Stage Publish Stage by using the publish action named Publish . Expire Stage by using the expire action that is named Expire . Authoring template: The authoring template is named Article and contains a single rich text element that is named Body and uses the Express Workflow as the default workflow for content items that are created by using this authoring template. Presentation template: The presentation template is named Article Presentation . Site area and content items: The content items that are named Sample Article and Sample Article 2 are stored in the site area named Articles . The site area that is named Articles contains a template map between the authoring template that is named Article and the presentation template named Article Presentation . Components: The authoring tool that is named Article Toolbar is used to add New and Edit functions to the rendered page. It is referenced in the presentation template named Article Presentation . The menu that is named Articles List is used to display a list of content items on the rendered page. It is referenced in the presentation template named Article Presentation . Access controls As the web content library default items are configured to inherit their access settings from the library they are stored in, users are not able to access these items until you configure the access settings of the library. Viewing default items The default items are best displayed by using a web content viewer portlet: To open the Manage Pages portlet, click the Administration menu icon. Then, click Portal User Interface > Manage Pages . Select New Page From . Under Web Content Mappings , select the site area that is named Articles from your web content library. Complete the rest of the form and click OK. Edit the page layout of the new page and add a Web Content Viewer portlet to the page. The content item that is named Sample Article is displayed on the page.","title":"Web content library default items"},{"location":"wcm/wcm_library_default_items/#web-content-library-default-items","text":"When you create a web content library, you can choose to include a set of default web content items in the new library. These items can be used as a starting point for your Web Content Manager system and website. Video : HCL Digital Experience - Create and add a WCM Library","title":"Web content library default items"},{"location":"wcm/wcm_library_default_items/#default-items","text":"The following items are created when you select Include default items in the new library when you create a library. Workflow items: A workflow that is named Express Workflow with a single workflow stage named Publish Stage by using the publish action named Publish . A workflow that is named Three Stage Workflow by using the following workflow stages: Draft Stage Publish Stage by using the publish action named Publish . Expire Stage by using the expire action that is named Expire . Authoring template: The authoring template is named Article and contains a single rich text element that is named Body and uses the Express Workflow as the default workflow for content items that are created by using this authoring template. Presentation template: The presentation template is named Article Presentation . Site area and content items: The content items that are named Sample Article and Sample Article 2 are stored in the site area named Articles . The site area that is named Articles contains a template map between the authoring template that is named Article and the presentation template named Article Presentation . Components: The authoring tool that is named Article Toolbar is used to add New and Edit functions to the rendered page. It is referenced in the presentation template named Article Presentation . The menu that is named Articles List is used to display a list of content items on the rendered page. It is referenced in the presentation template named Article Presentation .","title":"Default items"},{"location":"wcm/wcm_library_default_items/#access-controls","text":"As the web content library default items are configured to inherit their access settings from the library they are stored in, users are not able to access these items until you configure the access settings of the library.","title":"Access controls"},{"location":"wcm/wcm_library_default_items/#viewing-default-items","text":"The default items are best displayed by using a web content viewer portlet: To open the Manage Pages portlet, click the Administration menu icon. Then, click Portal User Interface > Manage Pages . Select New Page From . Under Web Content Mappings , select the site area that is named Articles from your web content library. Complete the rest of the form and click OK. Edit the page layout of the new page and add a Web Content Viewer portlet to the page. The content item that is named Sample Article is displayed on the page.","title":"Viewing default items"},{"location":"wcm/wcm_mls/","text":"HCL Web Content Manager Multilingual Solution The HCL Web Content Manager Multilingual Solution is a set of tools that are used to manage translated versions of localized and regionalized websites. The multilingual solution requires: HCL Portal 8.0.0.1 or later, or Web Content Manager 8.0.0.1 or later. See Multilingual deployment, installation, and configuration to learn more how to deploy, install, and configure the multilingual solution extensions, update and configure your system before using the HCL Web Content Manager Multilingual Solution.","title":"HCL Web Content Manager Multilingual Solution"},{"location":"wcm/wcm_mls/#hcl-web-content-manager-multilingual-solution","text":"The HCL Web Content Manager Multilingual Solution is a set of tools that are used to manage translated versions of localized and regionalized websites. The multilingual solution requires: HCL Portal 8.0.0.1 or later, or Web Content Manager 8.0.0.1 or later. See Multilingual deployment, installation, and configuration to learn more how to deploy, install, and configure the multilingual solution extensions, update and configure your system before using the HCL Web Content Manager Multilingual Solution.","title":"HCL Web Content Manager Multilingual Solution"},{"location":"wcm/wcm_mls_api/","text":"Web Content Manager Multilingual Solution API This set of APIs allow you to retrieve information about the configured Multilingual Solution (MLS) libraries and also to retrieve the translated content items for a given default language content ID (for example, from English content find translated French and Spanish strings). In the user interface of the WCM Authoring Portlet, one can see the linked translated content and this API gives a similar aggregated view: The following MLS APIs are available (as of HCL Digital Experience 9.5 Container Update CF192 and later): MLS Library Configuration API Translated Content API MLS Library Configuration API Endpoint GET request to: http://host:port/wps/mycontenthandler/wcmrest/mlsConfig/<UUID of the base library> JSON: For JSON add ?mime-type=application/json Sample URL: http://localhost:10039/wps/mycontenthandler/!ut/p/digest!-qnYtpJ-Sz3gh0FSR_oeyA/wcmrest/mlsConfig/bf855b83-8387-47a2-a909-953fef58b0af Expected Body The body can have the basic WCM structure: <?xml version=\"1.0\" encoding=\"UTF-8\"?> <feed xmlns=\"http://www.w3.org/2005/Atom\" xmlns:wcm=\"http://www.ibm.com/xmlns/wcm/8.0\"> </feed> Expected Headers LTPA token of the user. Query Parameters None. Limitations None. Return Body The base library and translated libraries. Sample: <?xml version=\"1.0\" encoding=\"UTF-8\"?><feed xmlns=\"http://www.w3.org/2005/Atom\" xmlns:wcm=\"http://www.ibm.com/xmlns/wcm/8.0\"> <id>d2b01f11-6f42-45e7-b6ee-df4d483d7c67</id> <title>ML Configuration</title> <updated>2021-02-16T18:24:57.479Z</updated> <entry> <content type=\"application/vnd.ibm.wcm+xml\"> <wcm:MLConfig xmlns=\"http://www.ibm.com/xmlns/wcm/8.0\" xmlns:atom=\"http://www.w3.org/2005/Atom\" id=\"d2b01f11-6f42-45e7-b6ee-df4d483d7c67\"> <libraries> <atom:baseLibrary>false</atom:baseLibrary> <atom:id>f151de89-9e15-4f6e-9283-cb2792734e44</atom:id> <atom:enabled>true</atom:enabled> <atom:name>basecontentfi</atom:name> <atom:language>fi</atom:language> </libraries> <libraries> <atom:baseLibrary>true</atom:baseLibrary> <atom:id>bf855b83-8387-47a2-a909-953fef58b0af</atom:id> <atom:enabled>true</atom:enabled> <atom:name>basecontenten</atom:name> <atom:language>en</atom:language> </libraries> <libraries> <atom:baseLibrary>false</atom:baseLibrary> <atom:id>90f03801-5f4d-4f4c-89e5-c1fe88377162</atom:id> <atom:enabled>true</atom:enabled> <atom:name>basecontenthe</atom:name> <atom:language>he</atom:language> </libraries> <libraries> <atom:baseLibrary>false</atom:baseLibrary> <atom:id>d73f6494-4d0d-4e61-a21e-bd9c9802fb4f</atom:id> <atom:enabled>true</atom:enabled> <atom:name>basecontentes</atom:name> <atom:language>es</atom:language> </libraries> <type>LOCALIZE</type> <baseLibrary> <atom:baseLibrary>true</atom:baseLibrary> <atom:id>bf855b83-8387-47a2-a909-953fef58b0af</atom:id> <atom:enabled>true</atom:enabled> <atom:name>basecontenten</atom:name> <atom:language>en</atom:language> </baseLibrary> </wcm:MLConfig> </content> </entry> </feed> Translated Content API Endpoint for GET GET request to: http://host:port/wps/mycontenthandler/wcmrest/translations/<UUID of the base language content item> JSON: For JSON add ?mime-type=application/json Sample URL: http://localhost:10039/wps/mycontenthandler/!ut/p/digest!-qnYtpJ-Sz3gh0FSR_oeyA/wcmrest/translations/2b287d10-d60a-43c7-9600-ec66907e635e?allAvailableLang=true&allElements=true Endpoint for PUT (From CF193 and higher) PUT request to: http://host:port/wps/mycontenthandler/wcmrest/translations/<UUID of the base language content item> JSON: For JSON add ?mime-type=application/json Sample URL: http://localhost:10039/wps/mycontenthandler/!ut/p/digest!-qnYtpJ-Sz3gh0FSR_oeyA/wcmrest/translations/2b287d10-d60a-43c7-9600-ec66907e635e?allAvailableLang=true&allElements=true Expected Body for GET The body can have the basic WCM structure: <?xml version=\"1.0\" encoding=\"UTF-8\"?> <feed xmlns=\"http://www.w3.org/2005/Atom\" xmlns:wcm=\"http://www.ibm.com/xmlns/wcm/8.0\"> </feed> Expected Body for PUT (From CF193 and higher) The body for PUT is same as the result of the GET Expected Headers LTPA token of the user. Query Parameters allAvailableLang=true - to return all languages lang=... - e.g. lang=en - to return only a specific language allElements=true|false - to return elements that are not text (like images) Limitations None. Return Body The list of languages and the content of each item in the base language and the translated languages. Sample: <?xml version=\"1.0\" encoding=\"UTF-8\"?><entry xmlns=\"http://www.w3.org/2005/Atom\" xmlns:wcm=\"http://www.ibm.com/xmlns/wcm/8.0\"> <content> <data> <source_language>en</source_language> <translated_language>fi</translated_language> <translated_language>en</translated_language> <translated_language>iw</translated_language> <translated_language>es</translated_language> <translated_items> <source_content> <elements> <wcm:element wcm:name=\"Body\"> <wcm:title xml:lang=\"en\">Body</wcm:title> <wcm:type>RichTextComponent</wcm:type> <wcm:data type=\"text/html\"><![CDATA[<p dir=\"ltr\">This is the body text for TestMLContent which lives in BaseContentEn/Articles</p>]]></wcm:data> </wcm:element> <wcm:element wcm:name=\"image\"> <wcm:title xml:lang=\"en\">image</wcm:title> <wcm:type>ImageComponent</wcm:type> <wcm:data type=\"application/vnd.ibm.wcm+xml\"> <wcm:image xmlns=\"http://www.ibm.com/xmlns/wcm/8.0\"> <dimension height=\"\" width=\"\" border=\"0\"/> <altText></altText> <tagName></tagName> <renditionList/> </wcm:image> </wcm:data> </wcm:element> </elements> <uuid>2b287d10-d60a-43c7-9600-ec66907e635e</uuid> <locale>en</locale> </source_content> <translated_content> <elements> <wcm:element wcm:name=\"Body\"> <wcm:title xml:lang=\"fi\">Body</wcm:title> <wcm:type>RichTextComponent</wcm:type> <wcm:data type=\"text/html\"><![CDATA[<p dir=\"ltr\">T\u00e4m\u00e4 on TestMLContentin rungoteksti, joka asuu BaseContentEn / Artikkelit -sivustossa</p> ]]></wcm:data> </wcm:element> </elements> <uuid>43970b4e-c66f-46a3-b612-0665c7494918</uuid> <locale>fi</locale> </translated_content> <translated_content> <elements> <wcm:element wcm:name=\"Body\"> <wcm:title xml:lang=\"es\">Body</wcm:title> <wcm:type>RichTextComponent</wcm:type> <wcm:data type=\"text/html\"><![CDATA[<p dir=\"ltr\">This is the the Spanish translated text for TestMLContent which lives in BaseContentEn/Articles</p> ]]></wcm:data> </wcm:element> </elements> <uuid>e110f518-5943-411b-b6aa-f21b8a69491a</uuid> <locale>es</locale> </translated_content> <translated_content> <elements> <wcm:element wcm:name=\"Body\"> <wcm:title xml:lang=\"he\">Body</wcm:title> <wcm:type>RichTextComponent</wcm:type> <wcm:data type=\"text/html\"><![CDATA[<p dir=\"ltr\">\u05d6\u05d4\u05d5 \u05d4\u05d8\u05e7\u05e1\u05d8 \u05dc\u05d2\u05d5\u05e3 \u05e9\u05dc TestMLContent \u05e9\u05d7\u05d9 \u05d1- BaseContentEn / Articles</p> ]]></wcm:data> </wcm:element> </elements> <uuid>39ec8ba1-d6b3-47b5-8c57-1d78489820bd</uuid> <locale>iw</locale> </translated_content> <translated_content> <elements/> <uuid>39ec8ba1-d6b3-47b5-8c57-1d78489820bd</uuid> <locale>iw</locale> </translated_content> </translated_items> </data> </content> </entry>","title":"Web Content Manager Multilingual Solution API"},{"location":"wcm/wcm_mls_api/#web-content-manager-multilingual-solution-api","text":"This set of APIs allow you to retrieve information about the configured Multilingual Solution (MLS) libraries and also to retrieve the translated content items for a given default language content ID (for example, from English content find translated French and Spanish strings). In the user interface of the WCM Authoring Portlet, one can see the linked translated content and this API gives a similar aggregated view: The following MLS APIs are available (as of HCL Digital Experience 9.5 Container Update CF192 and later): MLS Library Configuration API Translated Content API","title":"Web Content Manager Multilingual Solution API"},{"location":"wcm/wcm_mls_api/#mls-library-configuration-api","text":"Endpoint GET request to: http://host:port/wps/mycontenthandler/wcmrest/mlsConfig/<UUID of the base library> JSON: For JSON add ?mime-type=application/json Sample URL: http://localhost:10039/wps/mycontenthandler/!ut/p/digest!-qnYtpJ-Sz3gh0FSR_oeyA/wcmrest/mlsConfig/bf855b83-8387-47a2-a909-953fef58b0af Expected Body The body can have the basic WCM structure: <?xml version=\"1.0\" encoding=\"UTF-8\"?> <feed xmlns=\"http://www.w3.org/2005/Atom\" xmlns:wcm=\"http://www.ibm.com/xmlns/wcm/8.0\"> </feed> Expected Headers LTPA token of the user. Query Parameters None. Limitations None. Return Body The base library and translated libraries. Sample: <?xml version=\"1.0\" encoding=\"UTF-8\"?><feed xmlns=\"http://www.w3.org/2005/Atom\" xmlns:wcm=\"http://www.ibm.com/xmlns/wcm/8.0\"> <id>d2b01f11-6f42-45e7-b6ee-df4d483d7c67</id> <title>ML Configuration</title> <updated>2021-02-16T18:24:57.479Z</updated> <entry> <content type=\"application/vnd.ibm.wcm+xml\"> <wcm:MLConfig xmlns=\"http://www.ibm.com/xmlns/wcm/8.0\" xmlns:atom=\"http://www.w3.org/2005/Atom\" id=\"d2b01f11-6f42-45e7-b6ee-df4d483d7c67\"> <libraries> <atom:baseLibrary>false</atom:baseLibrary> <atom:id>f151de89-9e15-4f6e-9283-cb2792734e44</atom:id> <atom:enabled>true</atom:enabled> <atom:name>basecontentfi</atom:name> <atom:language>fi</atom:language> </libraries> <libraries> <atom:baseLibrary>true</atom:baseLibrary> <atom:id>bf855b83-8387-47a2-a909-953fef58b0af</atom:id> <atom:enabled>true</atom:enabled> <atom:name>basecontenten</atom:name> <atom:language>en</atom:language> </libraries> <libraries> <atom:baseLibrary>false</atom:baseLibrary> <atom:id>90f03801-5f4d-4f4c-89e5-c1fe88377162</atom:id> <atom:enabled>true</atom:enabled> <atom:name>basecontenthe</atom:name> <atom:language>he</atom:language> </libraries> <libraries> <atom:baseLibrary>false</atom:baseLibrary> <atom:id>d73f6494-4d0d-4e61-a21e-bd9c9802fb4f</atom:id> <atom:enabled>true</atom:enabled> <atom:name>basecontentes</atom:name> <atom:language>es</atom:language> </libraries> <type>LOCALIZE</type> <baseLibrary> <atom:baseLibrary>true</atom:baseLibrary> <atom:id>bf855b83-8387-47a2-a909-953fef58b0af</atom:id> <atom:enabled>true</atom:enabled> <atom:name>basecontenten</atom:name> <atom:language>en</atom:language> </baseLibrary> </wcm:MLConfig> </content> </entry> </feed>","title":"MLS Library Configuration API"},{"location":"wcm/wcm_mls_api/#translated-content-api","text":"Endpoint for GET GET request to: http://host:port/wps/mycontenthandler/wcmrest/translations/<UUID of the base language content item> JSON: For JSON add ?mime-type=application/json Sample URL: http://localhost:10039/wps/mycontenthandler/!ut/p/digest!-qnYtpJ-Sz3gh0FSR_oeyA/wcmrest/translations/2b287d10-d60a-43c7-9600-ec66907e635e?allAvailableLang=true&allElements=true Endpoint for PUT (From CF193 and higher) PUT request to: http://host:port/wps/mycontenthandler/wcmrest/translations/<UUID of the base language content item> JSON: For JSON add ?mime-type=application/json Sample URL: http://localhost:10039/wps/mycontenthandler/!ut/p/digest!-qnYtpJ-Sz3gh0FSR_oeyA/wcmrest/translations/2b287d10-d60a-43c7-9600-ec66907e635e?allAvailableLang=true&allElements=true Expected Body for GET The body can have the basic WCM structure: <?xml version=\"1.0\" encoding=\"UTF-8\"?> <feed xmlns=\"http://www.w3.org/2005/Atom\" xmlns:wcm=\"http://www.ibm.com/xmlns/wcm/8.0\"> </feed> Expected Body for PUT (From CF193 and higher) The body for PUT is same as the result of the GET Expected Headers LTPA token of the user. Query Parameters allAvailableLang=true - to return all languages lang=... - e.g. lang=en - to return only a specific language allElements=true|false - to return elements that are not text (like images) Limitations None. Return Body The list of languages and the content of each item in the base language and the translated languages. Sample: <?xml version=\"1.0\" encoding=\"UTF-8\"?><entry xmlns=\"http://www.w3.org/2005/Atom\" xmlns:wcm=\"http://www.ibm.com/xmlns/wcm/8.0\"> <content> <data> <source_language>en</source_language> <translated_language>fi</translated_language> <translated_language>en</translated_language> <translated_language>iw</translated_language> <translated_language>es</translated_language> <translated_items> <source_content> <elements> <wcm:element wcm:name=\"Body\"> <wcm:title xml:lang=\"en\">Body</wcm:title> <wcm:type>RichTextComponent</wcm:type> <wcm:data type=\"text/html\"><![CDATA[<p dir=\"ltr\">This is the body text for TestMLContent which lives in BaseContentEn/Articles</p>]]></wcm:data> </wcm:element> <wcm:element wcm:name=\"image\"> <wcm:title xml:lang=\"en\">image</wcm:title> <wcm:type>ImageComponent</wcm:type> <wcm:data type=\"application/vnd.ibm.wcm+xml\"> <wcm:image xmlns=\"http://www.ibm.com/xmlns/wcm/8.0\"> <dimension height=\"\" width=\"\" border=\"0\"/> <altText></altText> <tagName></tagName> <renditionList/> </wcm:image> </wcm:data> </wcm:element> </elements> <uuid>2b287d10-d60a-43c7-9600-ec66907e635e</uuid> <locale>en</locale> </source_content> <translated_content> <elements> <wcm:element wcm:name=\"Body\"> <wcm:title xml:lang=\"fi\">Body</wcm:title> <wcm:type>RichTextComponent</wcm:type> <wcm:data type=\"text/html\"><![CDATA[<p dir=\"ltr\">T\u00e4m\u00e4 on TestMLContentin rungoteksti, joka asuu BaseContentEn / Artikkelit -sivustossa</p> ]]></wcm:data> </wcm:element> </elements> <uuid>43970b4e-c66f-46a3-b612-0665c7494918</uuid> <locale>fi</locale> </translated_content> <translated_content> <elements> <wcm:element wcm:name=\"Body\"> <wcm:title xml:lang=\"es\">Body</wcm:title> <wcm:type>RichTextComponent</wcm:type> <wcm:data type=\"text/html\"><![CDATA[<p dir=\"ltr\">This is the the Spanish translated text for TestMLContent which lives in BaseContentEn/Articles</p> ]]></wcm:data> </wcm:element> </elements> <uuid>e110f518-5943-411b-b6aa-f21b8a69491a</uuid> <locale>es</locale> </translated_content> <translated_content> <elements> <wcm:element wcm:name=\"Body\"> <wcm:title xml:lang=\"he\">Body</wcm:title> <wcm:type>RichTextComponent</wcm:type> <wcm:data type=\"text/html\"><![CDATA[<p dir=\"ltr\">\u05d6\u05d4\u05d5 \u05d4\u05d8\u05e7\u05e1\u05d8 \u05dc\u05d2\u05d5\u05e3 \u05e9\u05dc TestMLContent \u05e9\u05d7\u05d9 \u05d1- BaseContentEn / Articles</p> ]]></wcm:data> </wcm:element> </elements> <uuid>39ec8ba1-d6b3-47b5-8c57-1d78489820bd</uuid> <locale>iw</locale> </translated_content> <translated_content> <elements/> <uuid>39ec8ba1-d6b3-47b5-8c57-1d78489820bd</uuid> <locale>iw</locale> </translated_content> </translated_items> </data> </content> </entry>","title":"Translated Content API"},{"location":"wcm/wcm_mls_export_import/","text":"How to export and import WCM library content using DXClient The HCL Multilingual Solution (MLS) export and import capability allows you to support translation of the content of a library by exporting it into a format supported by a translation service and importing the translated content back into HCL Digital Experience using the DXClient tool. Prerequisites The libraries for the other languages for translated are already existing and are filled with the content from the main language library, like with the MLS copy portlet. The DXClient tool is used to manage the library export and import functions by providing an integrated solution to export and import CSV files for translation. The DXClient export and import process works on HCL Digital Experience 9.5 only. See the DXClient Help Center topic for more information. About this task There are two separate command for handling bulk translations, export and import . These commands deal with the translation of all the WCM library contents. Note, however, that only the following WCM content elements are translated: short text , rich text , and HTML . The **export** command exports the source contents from a library into a CSV file with an auto generated file name at the location specified by the user. This command creates a new CSV file every time the command is run. The **import** command overwrites any existing translations in the content of the environment. All the default command options in this section are configured inside the - dist/src/configuration/config.json file of the tool. The options passed through command line overrides these default values. Note: Only the ShortTextComponent element type has an explicit maximum data length set at 250 characters. The **import** command validates the length of the data for this element type before importing. Errors due to custom configuration of limits are caught by the **import** and **export** during the cycle and are reported in an error log. Export command The **export** command is used to export the content of a WCM library for translation into a CSV file at the location specified by the user. Export command : dxclient mls-export Export help command : dxclient mls-export -h Export command options : -dxProtocol <value> - use this attribute to specify the protocol to use to connect to the DX server. -hostname <value> - use this attribute to specify the host name of the DX server. -dxPort <value> - use this attribute to specify the port on which to connect to the DX server. -contenthandlerPath <value> - use this attribute to specify the path to the contenthandler servlet on the DX server (for example, /wps/mycontenthandler). -dxUsername <value> - use this attribute to specify the user name required for authenticating with the server. -dxPassword <value> - use this attribute to specify the password required for authenticating with the server. -wcmLibraryId <value> - the WCM library ID to export the contents of the library. -exportPath <value> - the path to export the WCM contents of a library. -virtualPortalContext <value> - the context of the virtual portal that contains the Script Application instance you want to create or update. Usage sample : dxclient mls-export -dxProtocol <dxProtocol> -hostname <hostname> -dxPort <dxPort> -contenthandlerPath <contenthandlerPath> -dxUsername <dxUsername> -dxPassword <dxPassword> -wcmLibraryId <wcmLibraryId> -exportPath <exportPath> -virtualPortalContext <virtualPortalContext> Import command The **import** command is used to import the translated content into DX and overwrites any existing translations in the content of the environment. Import command : dxclient mls-import Import help command : dxclient mls-import -h Export command options : -dxProtocol <value> - use this attribute to specify the protocol to use to connect to the DX server. -hostname <value> - use this attribute to specify the host name of the DX server. -dxPort <value> - use this attribute to specify the port on which to connect to the DX server. -contenthandlerPath <value> - use this attribute to specify the path to the contenthandler servlet on the DX server (for example, /wps/mycontenthandler). -dxUsername <value> - use this attribute to specify the user name required for authenticating with the server. -dxPassword <value> - use this attribute to specify the password required for authenticating with the server. -importPath <value> - the path to import the translated contents into DX. -virtualPortalContext <value> - the context of the virtual portal that contains the Script Application instance you want to create or update. Usage sample : dxclient mls-import -dxProtocol <dxProtocol> -hostname <hostname> -dxPort <dxPort> -contenthandlerPath <contenthandlerPath> -dxUsername <dxUsername> -dxPassword <dxPassword> -importPath <importPath> -virtualPortalContext <virtualPortalContext> Sample pipelines You can use the sample pipelines in this section to run MLS export and import. The sample pipelines (available under the samples folder in the DXClient root folder) can be used by developers and administrators as a basis for Jenkins automation server jobs. These samples show how to install the DXClient tool in a pipeline and then export and import the MLS. These are designed to run from a Jenkins job with the parameters indicated. MLS Export Parameter Value Notes AGENT_LABEL Jenkins agent label Determines the agents the pipeline can run TOOL_PACKAGE_URL URL to DXClient zip Fetched via curl TOOL_CREDENTIALS_ID Credentials ID in Jenkins store The user name and password needed to access the tool package URL DX_CREDENTIALS_ID Credentials ID in Jenkins store The user name and password needed to access DX server DX_PROTOCOL Protocol to connect to the DX server HTTP or HTTPS DX_HOST Host name or IP address of the DX server Artifacts are deployed to this server DX_PORT Port to connect to the DX server Port for the DX main profile CONTENT_HANDLER_PATH Alternate path for the portal context root or the content handler servlet Default path: /wps/mycontenthandler/ WCM_LIBRARY_ID WCM library ID to export the contents of the library Exports the available content from this library ID EXPORT_PATH The path to export the WCM contents of a library The path where the content is exported MLS Import Parameter Value Notes AGENT_LABEL Jenkins agent label Determines the agents the pipeline can run TOOL_PACKAGE_URL URL to DXClient zip Fetched via curl TOOL_CREDENTIALS_ID Credentials ID in Jenkins store The user name and password needed to access the tool package URL DX_CREDENTIALS_ID Credentials ID in Jenkins store The user name and password needed to access DX server ARTIFACT_CREDENTIALS_ID Credentials ID in Jenkins store The user name and password needed to access artifact URLs ARTIFACT_PATH URL (except file names) for artifacts to be deployed Artifacts fetched via curl DX_PROTOCOL Protocol to connect to the DX server HTTP or HTTPS DX_HOST Host name or IP address of the DX server Artifacts are deployed to this server DX_PORT Port to connect to the DX server Port for the DX main profile CONTENT_HANDLER_PATH Alternate path for the portal context root or the content handler servlet Default path: /wps/mycontenthandler/ IMPORT_FILE_NAME File name to import the translated content into DX Imports the content from this file","title":"How to export and import WCM library content using DXClient"},{"location":"wcm/wcm_mls_export_import/#how-to-export-and-import-wcm-library-content-using-dxclient","text":"The HCL Multilingual Solution (MLS) export and import capability allows you to support translation of the content of a library by exporting it into a format supported by a translation service and importing the translated content back into HCL Digital Experience using the DXClient tool.","title":"How to export and import WCM library content using DXClient"},{"location":"wcm/wcm_mls_export_import/#prerequisites","text":"The libraries for the other languages for translated are already existing and are filled with the content from the main language library, like with the MLS copy portlet. The DXClient tool is used to manage the library export and import functions by providing an integrated solution to export and import CSV files for translation. The DXClient export and import process works on HCL Digital Experience 9.5 only. See the DXClient Help Center topic for more information.","title":"Prerequisites"},{"location":"wcm/wcm_mls_export_import/#about-this-task","text":"There are two separate command for handling bulk translations, export and import . These commands deal with the translation of all the WCM library contents. Note, however, that only the following WCM content elements are translated: short text , rich text , and HTML . The **export** command exports the source contents from a library into a CSV file with an auto generated file name at the location specified by the user. This command creates a new CSV file every time the command is run. The **import** command overwrites any existing translations in the content of the environment. All the default command options in this section are configured inside the - dist/src/configuration/config.json file of the tool. The options passed through command line overrides these default values. Note: Only the ShortTextComponent element type has an explicit maximum data length set at 250 characters. The **import** command validates the length of the data for this element type before importing. Errors due to custom configuration of limits are caught by the **import** and **export** during the cycle and are reported in an error log.","title":"About this task"},{"location":"wcm/wcm_mls_export_import/#export-command","text":"The **export** command is used to export the content of a WCM library for translation into a CSV file at the location specified by the user. Export command : dxclient mls-export Export help command : dxclient mls-export -h Export command options : -dxProtocol <value> - use this attribute to specify the protocol to use to connect to the DX server. -hostname <value> - use this attribute to specify the host name of the DX server. -dxPort <value> - use this attribute to specify the port on which to connect to the DX server. -contenthandlerPath <value> - use this attribute to specify the path to the contenthandler servlet on the DX server (for example, /wps/mycontenthandler). -dxUsername <value> - use this attribute to specify the user name required for authenticating with the server. -dxPassword <value> - use this attribute to specify the password required for authenticating with the server. -wcmLibraryId <value> - the WCM library ID to export the contents of the library. -exportPath <value> - the path to export the WCM contents of a library. -virtualPortalContext <value> - the context of the virtual portal that contains the Script Application instance you want to create or update. Usage sample : dxclient mls-export -dxProtocol <dxProtocol> -hostname <hostname> -dxPort <dxPort> -contenthandlerPath <contenthandlerPath> -dxUsername <dxUsername> -dxPassword <dxPassword> -wcmLibraryId <wcmLibraryId> -exportPath <exportPath> -virtualPortalContext <virtualPortalContext>","title":"Export command"},{"location":"wcm/wcm_mls_export_import/#import-command","text":"The **import** command is used to import the translated content into DX and overwrites any existing translations in the content of the environment. Import command : dxclient mls-import Import help command : dxclient mls-import -h Export command options : -dxProtocol <value> - use this attribute to specify the protocol to use to connect to the DX server. -hostname <value> - use this attribute to specify the host name of the DX server. -dxPort <value> - use this attribute to specify the port on which to connect to the DX server. -contenthandlerPath <value> - use this attribute to specify the path to the contenthandler servlet on the DX server (for example, /wps/mycontenthandler). -dxUsername <value> - use this attribute to specify the user name required for authenticating with the server. -dxPassword <value> - use this attribute to specify the password required for authenticating with the server. -importPath <value> - the path to import the translated contents into DX. -virtualPortalContext <value> - the context of the virtual portal that contains the Script Application instance you want to create or update. Usage sample : dxclient mls-import -dxProtocol <dxProtocol> -hostname <hostname> -dxPort <dxPort> -contenthandlerPath <contenthandlerPath> -dxUsername <dxUsername> -dxPassword <dxPassword> -importPath <importPath> -virtualPortalContext <virtualPortalContext>","title":"Import command"},{"location":"wcm/wcm_mls_export_import/#sample-pipelines","text":"You can use the sample pipelines in this section to run MLS export and import. The sample pipelines (available under the samples folder in the DXClient root folder) can be used by developers and administrators as a basis for Jenkins automation server jobs. These samples show how to install the DXClient tool in a pipeline and then export and import the MLS. These are designed to run from a Jenkins job with the parameters indicated. MLS Export Parameter Value Notes AGENT_LABEL Jenkins agent label Determines the agents the pipeline can run TOOL_PACKAGE_URL URL to DXClient zip Fetched via curl TOOL_CREDENTIALS_ID Credentials ID in Jenkins store The user name and password needed to access the tool package URL DX_CREDENTIALS_ID Credentials ID in Jenkins store The user name and password needed to access DX server DX_PROTOCOL Protocol to connect to the DX server HTTP or HTTPS DX_HOST Host name or IP address of the DX server Artifacts are deployed to this server DX_PORT Port to connect to the DX server Port for the DX main profile CONTENT_HANDLER_PATH Alternate path for the portal context root or the content handler servlet Default path: /wps/mycontenthandler/ WCM_LIBRARY_ID WCM library ID to export the contents of the library Exports the available content from this library ID EXPORT_PATH The path to export the WCM contents of a library The path where the content is exported MLS Import Parameter Value Notes AGENT_LABEL Jenkins agent label Determines the agents the pipeline can run TOOL_PACKAGE_URL URL to DXClient zip Fetched via curl TOOL_CREDENTIALS_ID Credentials ID in Jenkins store The user name and password needed to access the tool package URL DX_CREDENTIALS_ID Credentials ID in Jenkins store The user name and password needed to access DX server ARTIFACT_CREDENTIALS_ID Credentials ID in Jenkins store The user name and password needed to access artifact URLs ARTIFACT_PATH URL (except file names) for artifacts to be deployed Artifacts fetched via curl DX_PROTOCOL Protocol to connect to the DX server HTTP or HTTPS DX_HOST Host name or IP address of the DX server Artifacts are deployed to this server DX_PORT Port to connect to the DX server Port for the DX main profile CONTENT_HANDLER_PATH Alternate path for the portal context root or the content handler servlet Default path: /wps/mycontenthandler/ IMPORT_FILE_NAME File name to import the translated content into DX Imports the content from this file","title":"Sample pipelines"},{"location":"wcm/wcm_mngpages_disable_lang_switch/","text":"Disabling the language switcher The language switcher allows you to switch from any of the supported languages. This feature is available only for authenticated portal users. Introduced in Container Update CF201, you can disable the language switcher by setting disable.languageSwitcher to true at the root page level in the configuration page. When set to true , the language switcher is hidden from the portal interface for both desktop and mobile views. disable.languageSwitcher= true | false This page parameter specifies if the language switcher displays when in edit mode. By default, the parameter is set to false and the language switcher is displayed. This setting might be set for the root or on individual pages. If you are using the XML configuration interface, you can set the parameter as follows: <parameter name=\u201cdisable.languageSwitcher\u201c type=\u201cstring\u201c update=\u201cset\u201c>true</parameter>","title":"Disabling the language switcher"},{"location":"wcm/wcm_mngpages_disable_lang_switch/#disabling-the-language-switcher","text":"The language switcher allows you to switch from any of the supported languages. This feature is available only for authenticated portal users. Introduced in Container Update CF201, you can disable the language switcher by setting disable.languageSwitcher to true at the root page level in the configuration page. When set to true , the language switcher is hidden from the portal interface for both desktop and mobile views. disable.languageSwitcher= true | false This page parameter specifies if the language switcher displays when in edit mode. By default, the parameter is set to false and the language switcher is displayed. This setting might be set for the root or on individual pages. If you are using the XML configuration interface, you can set the parameter as follows: <parameter name=\u201cdisable.languageSwitcher\u201c type=\u201cstring\u201c update=\u201cset\u201c>true</parameter>","title":"Disabling the language switcher"},{"location":"wcm/wcm_overview_conceptual/","text":"Conceptual and functional divisions of a website When you build a website by using Web Content Manager, you break up your website into the following conceptual and functional divisions. Content Layout - Content items - Site areas - Components |- Presentation templates - Component designs - Page layout and portlets - Themes | Context Style - Site framework - Page hierarchy - Profiling - Current user - Personalization |- CSS - Themes | When you are developing a website by using Web Content Manager and HCL Portal, you are splitting the elements of your website between content, context, layout, and style. Content: There are two types of content: Dynamic Dynamic content is generated dynamically based on a set of pre-configured parameters, such as navigator or menu. Static Static content is content where you store markup or files directly in a component, content item, or site area. Where you store your static content depends on how the content is used: Page-specific content is stored in content items. Content that is related to a section of your site can be stored in a site area. Content that is reused in multiple sections of your site is stored in components. Layout: The layout and structure of each page in your website are defined by using these features: The overall structure of each page is determined by the theme you are using, the page layout you choose, and the web content viewer portlets you add to the page layout. The layout of the content that is displayed within each web content viewer is determined by markup that is used by the current presentation template, and by the markup that is stored within the elements and components that are referenced within the presentation template. Context: The context of the content that is displayed is also important. The layout and design of the page where a content item is displayed is different depending on: The current portal page (Different pages can use different themes, layouts, web content viewer portlets, and even different presentation templates.) The current site area (Content that is linked to different site areas can use different template maps that map to different site areas.) The current user (Different users can have different access to various page elements, including individual pages, portlets, and web content items.) Each of these contextual variables can be used to display content or components in different ways, depending on the current context. Additionally, the profile of the current portlet, content item, or current user can determine what is displayed on a page, as do any personalization features used by your website. Style: While you can place stylistic elements directly within your HTML, it is becoming increasingly common to use CSS to store and manage all the stylistic elements of a website, including: Stored server-side and referenced within a HCL Portal theme Stored directly within a content item or component One good practice is to store your CSS markup within an HTML field that is stored in a content item. This provides quick access to the CSS if you need to edit the CSS. In addition, you can use advanced features such as workflows and inline editing to help you maintain your CSS. By storing all your stylistic elements in CSS, you can quickly make stylistic changes to your website by editing a CSS file instead of editing multiple items. When a web page is rendered, Web Content Manager takes all these individual item types and combines them to build a complete web page. Parent topic: Web content","title":"Conceptual and functional divisions of a website"},{"location":"wcm/wcm_overview_conceptual/#conceptual-and-functional-divisions-of-a-website","text":"When you build a website by using Web Content Manager, you break up your website into the following conceptual and functional divisions. Content Layout - Content items - Site areas - Components |- Presentation templates - Component designs - Page layout and portlets - Themes | Context Style - Site framework - Page hierarchy - Profiling - Current user - Personalization |- CSS - Themes | When you are developing a website by using Web Content Manager and HCL Portal, you are splitting the elements of your website between content, context, layout, and style. Content: There are two types of content: Dynamic Dynamic content is generated dynamically based on a set of pre-configured parameters, such as navigator or menu. Static Static content is content where you store markup or files directly in a component, content item, or site area. Where you store your static content depends on how the content is used: Page-specific content is stored in content items. Content that is related to a section of your site can be stored in a site area. Content that is reused in multiple sections of your site is stored in components. Layout: The layout and structure of each page in your website are defined by using these features: The overall structure of each page is determined by the theme you are using, the page layout you choose, and the web content viewer portlets you add to the page layout. The layout of the content that is displayed within each web content viewer is determined by markup that is used by the current presentation template, and by the markup that is stored within the elements and components that are referenced within the presentation template. Context: The context of the content that is displayed is also important. The layout and design of the page where a content item is displayed is different depending on: The current portal page (Different pages can use different themes, layouts, web content viewer portlets, and even different presentation templates.) The current site area (Content that is linked to different site areas can use different template maps that map to different site areas.) The current user (Different users can have different access to various page elements, including individual pages, portlets, and web content items.) Each of these contextual variables can be used to display content or components in different ways, depending on the current context. Additionally, the profile of the current portlet, content item, or current user can determine what is displayed on a page, as do any personalization features used by your website. Style: While you can place stylistic elements directly within your HTML, it is becoming increasingly common to use CSS to store and manage all the stylistic elements of a website, including: Stored server-side and referenced within a HCL Portal theme Stored directly within a content item or component One good practice is to store your CSS markup within an HTML field that is stored in a content item. This provides quick access to the CSS if you need to edit the CSS. In addition, you can use advanced features such as workflows and inline editing to help you maintain your CSS. By storing all your stylistic elements in CSS, you can quickly make stylistic changes to your website by editing a CSS file instead of editing multiple items. When a web page is rendered, Web Content Manager takes all these individual item types and combines them to build a complete web page. Parent topic: Web content","title":"Conceptual and functional divisions of a website"},{"location":"wcm/wcm_rest_adhoc/","text":"Query parameters The following parameters can be used with queries. Parameter Details and examples of parameters that can be added to queries namelikeignorecase This parameter is used as a wildcard query for items with names like the specified namelike parameter. It ignores the case of the string.For example: ?namelikeignorecase=nameApproxValue% Note: Libraries cannot be queried by using this parameter. | | titlelikeignorecase |This parameter is used as a wildcard query for items with titles like the specified titlelike parameter. It ignores the case of the string.For example: ?titlelikeignorecase=nameApproxValue% | | titleornamelike |If this parameter is set instead of merging titlelike and namelike via an AND condition it will be merged via an OR condition.| Parameter Details and examples of parameters that can be added to queries textcontains: Any of the words This API lets Content Authors search for free form text in the Web Content Manager JCR. Sample URL : ``` http://host:port/wps/mycontenthandler/wcmrest/query?textcontains=... | |`textcontainsexact: Exact phrase`|This API lets Content Authors search for an exact match of text in the Web Content Manager JCR. **Sample URL**: ``` http://host:port/wps/mycontenthandler/wcmrest/query?textcontainsexact=... | Parameter Details and examples of parameters that can be added to queries approver This parameter is used to query items with a specific approver. A user ID must be specified when this parameter is used.For example: ?approver=userid | | authoringtemplateid |This parameter is used to query items with a specific authoring template ID.For example: ?authoringtemplateid=wcmrest:18cfc80c-a490-4d75-9057-fed3db89de53 | | author |This parameter is used to query items with a specific author. A user UID must be specified when this parameter is used.For example: ?author=uid=WCMUT_Editor_A,o=defaultWIMFileBasedRealm | | categoryid |This parameter is used to query items with a specific category ID.For example: ?categoryid=wcmrest:18cfc80c-a490-4d75-9057-fed3db89de53 | | createdafter |This parameter is used to query items that are created after a specific date and time.For example: ?createdafter=2011-01-11T11:43:29.0150Z | | createdbefore |This parameter is used to query items that are created before a specific date and time.For example: ?createdbefore=2011-01-11T11:43:29.0150Z | | creator |This parameter is used to query items with a specific creator. A user UID must be specified when this parameter is used.For example: ?creator=uid=WCMUT_Editor_A,o=defaultWIMFileBasedRealm | | dateformat |This parameter is used to define the date format of query parameters.For example: ?dateformat=mm-dd-yyyy&createdbefore=12-31-2011 If a date format not specified, then the default format yyyy-MM-dd'T'HH:mm:ssz is used. | | depth |This parameter is used with the parentid and is used to define whether to search for all descendants of a parent, or just the immediate children of a parent item.For example, to query only the immediate children of an item, you add &depth=CHILDREN to the query: ?parentid=wcmrest:18cfc80c-a490-4d75-9057-fed3db89de53&depth=CHILDREN To query all descendants of an item, you add &depth=DESCENDANTS to the query: ?parentid=wcmrest:18cfc80c-a490-4d75-9057-fed3db89de53&depth=DESCENDANTS | | expireafter |This parameter is used to query items that are expired after a specific date and time.For example: ?expireafter=2011-01-11T11:43:29.0150Z | | expirebefore |This parameter is used to query items that were expired before a specific date and time.For example: ?expirebefore=2011-01-11T11:43:29.0150Z | | filteraccess |This parameter is used to filter access control roles using the WCM Query API. All other parameters like parentid or type still apply, so one can, for example, find all libraries the user has the Editor role on. Valid roles: User , Editor , Admin, Manager , Contributor .For example: ?filteraccess=Contributor<![CDATA[&parentid=wcmrest%3A04b24105-2ea0-422f-be83-e009a7766c1b]] | | id |This parameter is used to query an item with a specific ID.For example: ?id=wcmrest:18cfc80c-a490-4d75-9057-fed3db89de53 | | keyword |This parameter is used to query items that are profiled with a specific keyword.For example: ?keyword=keywordValue | | lastmodifiedafter |This parameter is used to query items that were last modified after a specific date and time.For example: ?lastmodifiedafter=2011-01-11T11:43:29.0150Z | | lastmodifiedbefore |This parameter is used to query items that were last modified before a specific date and time.For example: ?lastmodifiedbefore=2011-01-11T11:43:29.0150Z | | lastmodifier |This parameter is used to query items that were last modified by a specific user. A user UID must be specified when this parameter is used.For example: ?lastmodifier=uid=WCMUT_Editor_A,o=defaultWIMFileBasedRealm | | libraryid |This parameter is used to query items that are stored in a specific library. For example: ?libraryid=wcmrest:18cfc80c-a490-4d75-9057-fed3db89de53 | | namelike |This parameter is used as a wildcard query for items with names like the specified namelike parameter.For example: ?namelike=nameApproxValue% Note: Libraries cannot be queried by using this parameter. | | name |This parameter is used to query an item with a specific name.For example: ?name=nameValue Note: Libraries cannot be queried by using this parameter. | | owner |This parameter is used to query items with a specific owner. A user UID must be specified when this parameter is used.For example: ?owner=uid=WCMUT_Editor_A,o=defaultWIMFileBasedRealm | | pagesize |This parameter is used to restrict the number of items that are returned by a query to a set number. It can be used with the page parameter to return specific pages of results.For example, to restrict the number of queries to be returned to 5: ?type=PresentationTemplate&pagesize=5 | | page |This parameter is used with the pagesize parameter to define what set of results to display. For example, if pagesize is set to 5, and the page parameter is set to 2, then only results 6 - 10 are displayed.For example: ?type=PresentationTemplate&pagesize=5&page=2 | | parentid |This parameter is used to query items that are the children of a specific parent item. For example: ?parentid=wcmrest:18cfc80c-a490-4d75-9057-fed3db89de53 You can use the depth parameter to define whether to search for all descendants of a parent, or just the immediate children of a parent item. | | projectid |This parameter is used to query items that are linked to a specific project.For example: ?projectid=wcmrest:18cfc80c-a490-4d75-9057-fed3db89de53 | | projectstate |This parameter is used to query items that are linked to a project with a specific state. Refer to the following documentation for the different values you can use for the projectstate parameter: Project States The following values can be used with this parameter: ACTIVE SYNDICATING REVIEW PENDING PUBLISHING PUBLISHED_FAILED PUBLISHED For example, to query items that are linked to projects with a state of \"ACTIVE\" you would use the following query: ?projectstate=ACTIVE | | publishafter |This parameter is used to query items that are published after a specific date and time.For example: ?publishafter=2011-01-11T11:43:29.0150Z | | publishbefore |This parameter is used to query items that were published before a specific date and time.For example: ?publishbefore=2011-01-11T11:43:29.0150Z | | sort |The sort parameter is appended to queries to determine how query results are sorted. The following values can be used with the sort parameter.- author - created - modified - name - title - parents - position The values _ascending or _descending are appended to the query to determine sort order. For example, to sort a presentation template query in ascending order of creation, you would use: ?type=PresentationTemplate&sort=created_ascending To sort a presentation template query in descending order of creation, you would use: ?type=PresentationTemplate&sort=created_descending If _ascending or _descending are not specified, the results as displayed in ascending order. | | state |This parameter is used to query items that are in a specific state. The following values can be used with this parameter:- DRAFT - PUBLISHED - EXPIRED For example: ?state=PUBLISHED | | titlelike |This parameter is used as a wildcard query for items with titles like the specified titlelike parameter.For example: ?titlelike=nameApproxValue% | | title |This parameter is used to query an item with a specific title.For example: ?title=titleValue | | type |This parameter is used to query items of a specific item type.For example, to query a list of components: ?type=LibraryHTMLComponent | | workflowid |This parameter is used to query items that use a specific workflow.For example: ?workflowid=wcmrest:8d25860b-7a5c-4015-9cd5-bdcc60ce14bb | | workflowstageid |This parameter is used to query items that are currently active within a specific workflow stage.For example: ?workflowstageid=wcmrest:18cfc80c-a490-4d75-9057-fed3db89de53 | How to use multiple parameters Multiple instances of the same parameter type in a query can be specified only as \"OR\" queries, with the following exceptions: Only one value allowed Only one instance of the following parameters can be used in a single query. If multiple instances are used, only the first instance is used by the query: categoryid dateformat depth page pagesize \"AND\" queries allowed The following queries can be used as \"AND\" queries: createdafter createdbefore expireafter expirebefore lastmodifiedafter lastmodifiedbefore publishafter publishbefore Sort values Sort values are comma-separated. For example: ?sort=created_ascending,title_descending Text Search REST API This API lets Content Authors search for free form text in the Web Content Manager JCR. It is equivalent to the functionality in the Web Content Manager user interface: Using the Text Search REST API The existing search query API is extended and two new parameters are added. See REST Query service for web content and Table 2 for more information. Endpoint GET request to: http://host:port/wps/mycontenthandler/wcmrest/query?textcontainsexact=... or http://host:port/wps/mycontenthandler/wcmrest/query?textcontains=... Sample URL: http://samplehost.team-q-dev.com:10039/wps/mycontenthandler/!ut/p/digest!2fHfKIZpm7_8BPtgSigLeg/wcmrest/query?textcontainsexact=Sample%20Article Expected Body Body can just have the basic WCM structure: http://samplehost.team-q-dev.com:10039/wps/mycontenthandler/!ut/p/digest!2fHfKIZpm7_8BPtgSigLeg/wcmrest/query?textcontainsexact=Sample%20Article Expected Headers LTPA token of the user. Also works anonymously. Query Parameters textcontains: Any of the words textcontainsexact: Exact phrase Return body The found results. Same as when calling existing query API. ``` <?xml version=\"1.0\" encoding=\"UTF-8\"?> wcmrest:query?textcontainsexact=Sample%20Article wcmrest:query?textcontainsexact=Sample%20Article 2020-04-14T12:36:14.477Z 2 wcmrest:5bfbd4e2-f203-4912-87c2-4edd3e6fc4de Sample Article 2 Sample Article 2 Sample Article 2 Content 2020-04-14T12:30:05.676Z uid=wpsadmin,o=defaultWIMFileBasedRealm /wps/mycontenthandler/!ut/p/digest!2fHfKIZpm7_8BPtgSigLeg/um/users/profiles/Z9eAeIHO0JPO64BPIJM4CPHDAMMG65JO6MM07GHO0JMOCHHC43IH6OPC63RS6M1 wpsadmin wcmrest:2209b125-a9b3-4f2a-811f-4a297017dc9e Sample Article Sample Article Sample Article Content 2020-04-14T11:44:10.229Z uid=wpsadmin,o=defaultWIMFileBasedRealm /wps/mycontenthandler/!ut/p/digest!2fHfKIZpm7_8BPtgSigLeg/um/users/profiles/Z9eAeIHO0JPO64BPIJM4CPHDAMMG65JO6MM07GHO0JMOCHHC43IH6OPC63RS6M1 wpsadmin ```","title":"Query parameters"},{"location":"wcm/wcm_rest_adhoc/#query-parameters","text":"The following parameters can be used with queries. Parameter Details and examples of parameters that can be added to queries namelikeignorecase This parameter is used as a wildcard query for items with names like the specified namelike parameter. It ignores the case of the string.For example: ?namelikeignorecase=nameApproxValue% Note: Libraries cannot be queried by using this parameter. | | titlelikeignorecase |This parameter is used as a wildcard query for items with titles like the specified titlelike parameter. It ignores the case of the string.For example: ?titlelikeignorecase=nameApproxValue% | | titleornamelike |If this parameter is set instead of merging titlelike and namelike via an AND condition it will be merged via an OR condition.| Parameter Details and examples of parameters that can be added to queries textcontains: Any of the words This API lets Content Authors search for free form text in the Web Content Manager JCR. Sample URL : ``` http://host:port/wps/mycontenthandler/wcmrest/query?textcontains=... | |`textcontainsexact: Exact phrase`|This API lets Content Authors search for an exact match of text in the Web Content Manager JCR. **Sample URL**: ``` http://host:port/wps/mycontenthandler/wcmrest/query?textcontainsexact=... | Parameter Details and examples of parameters that can be added to queries approver This parameter is used to query items with a specific approver. A user ID must be specified when this parameter is used.For example: ?approver=userid | | authoringtemplateid |This parameter is used to query items with a specific authoring template ID.For example: ?authoringtemplateid=wcmrest:18cfc80c-a490-4d75-9057-fed3db89de53 | | author |This parameter is used to query items with a specific author. A user UID must be specified when this parameter is used.For example: ?author=uid=WCMUT_Editor_A,o=defaultWIMFileBasedRealm | | categoryid |This parameter is used to query items with a specific category ID.For example: ?categoryid=wcmrest:18cfc80c-a490-4d75-9057-fed3db89de53 | | createdafter |This parameter is used to query items that are created after a specific date and time.For example: ?createdafter=2011-01-11T11:43:29.0150Z | | createdbefore |This parameter is used to query items that are created before a specific date and time.For example: ?createdbefore=2011-01-11T11:43:29.0150Z | | creator |This parameter is used to query items with a specific creator. A user UID must be specified when this parameter is used.For example: ?creator=uid=WCMUT_Editor_A,o=defaultWIMFileBasedRealm | | dateformat |This parameter is used to define the date format of query parameters.For example: ?dateformat=mm-dd-yyyy&createdbefore=12-31-2011 If a date format not specified, then the default format yyyy-MM-dd'T'HH:mm:ssz is used. | | depth |This parameter is used with the parentid and is used to define whether to search for all descendants of a parent, or just the immediate children of a parent item.For example, to query only the immediate children of an item, you add &depth=CHILDREN to the query: ?parentid=wcmrest:18cfc80c-a490-4d75-9057-fed3db89de53&depth=CHILDREN To query all descendants of an item, you add &depth=DESCENDANTS to the query: ?parentid=wcmrest:18cfc80c-a490-4d75-9057-fed3db89de53&depth=DESCENDANTS | | expireafter |This parameter is used to query items that are expired after a specific date and time.For example: ?expireafter=2011-01-11T11:43:29.0150Z | | expirebefore |This parameter is used to query items that were expired before a specific date and time.For example: ?expirebefore=2011-01-11T11:43:29.0150Z | | filteraccess |This parameter is used to filter access control roles using the WCM Query API. All other parameters like parentid or type still apply, so one can, for example, find all libraries the user has the Editor role on. Valid roles: User , Editor , Admin, Manager , Contributor .For example: ?filteraccess=Contributor<![CDATA[&parentid=wcmrest%3A04b24105-2ea0-422f-be83-e009a7766c1b]] | | id |This parameter is used to query an item with a specific ID.For example: ?id=wcmrest:18cfc80c-a490-4d75-9057-fed3db89de53 | | keyword |This parameter is used to query items that are profiled with a specific keyword.For example: ?keyword=keywordValue | | lastmodifiedafter |This parameter is used to query items that were last modified after a specific date and time.For example: ?lastmodifiedafter=2011-01-11T11:43:29.0150Z | | lastmodifiedbefore |This parameter is used to query items that were last modified before a specific date and time.For example: ?lastmodifiedbefore=2011-01-11T11:43:29.0150Z | | lastmodifier |This parameter is used to query items that were last modified by a specific user. A user UID must be specified when this parameter is used.For example: ?lastmodifier=uid=WCMUT_Editor_A,o=defaultWIMFileBasedRealm | | libraryid |This parameter is used to query items that are stored in a specific library. For example: ?libraryid=wcmrest:18cfc80c-a490-4d75-9057-fed3db89de53 | | namelike |This parameter is used as a wildcard query for items with names like the specified namelike parameter.For example: ?namelike=nameApproxValue% Note: Libraries cannot be queried by using this parameter. | | name |This parameter is used to query an item with a specific name.For example: ?name=nameValue Note: Libraries cannot be queried by using this parameter. | | owner |This parameter is used to query items with a specific owner. A user UID must be specified when this parameter is used.For example: ?owner=uid=WCMUT_Editor_A,o=defaultWIMFileBasedRealm | | pagesize |This parameter is used to restrict the number of items that are returned by a query to a set number. It can be used with the page parameter to return specific pages of results.For example, to restrict the number of queries to be returned to 5: ?type=PresentationTemplate&pagesize=5 | | page |This parameter is used with the pagesize parameter to define what set of results to display. For example, if pagesize is set to 5, and the page parameter is set to 2, then only results 6 - 10 are displayed.For example: ?type=PresentationTemplate&pagesize=5&page=2 | | parentid |This parameter is used to query items that are the children of a specific parent item. For example: ?parentid=wcmrest:18cfc80c-a490-4d75-9057-fed3db89de53 You can use the depth parameter to define whether to search for all descendants of a parent, or just the immediate children of a parent item. | | projectid |This parameter is used to query items that are linked to a specific project.For example: ?projectid=wcmrest:18cfc80c-a490-4d75-9057-fed3db89de53 | | projectstate |This parameter is used to query items that are linked to a project with a specific state. Refer to the following documentation for the different values you can use for the projectstate parameter: Project States The following values can be used with this parameter: ACTIVE SYNDICATING REVIEW PENDING PUBLISHING PUBLISHED_FAILED PUBLISHED For example, to query items that are linked to projects with a state of \"ACTIVE\" you would use the following query: ?projectstate=ACTIVE | | publishafter |This parameter is used to query items that are published after a specific date and time.For example: ?publishafter=2011-01-11T11:43:29.0150Z | | publishbefore |This parameter is used to query items that were published before a specific date and time.For example: ?publishbefore=2011-01-11T11:43:29.0150Z | | sort |The sort parameter is appended to queries to determine how query results are sorted. The following values can be used with the sort parameter.- author - created - modified - name - title - parents - position The values _ascending or _descending are appended to the query to determine sort order. For example, to sort a presentation template query in ascending order of creation, you would use: ?type=PresentationTemplate&sort=created_ascending To sort a presentation template query in descending order of creation, you would use: ?type=PresentationTemplate&sort=created_descending If _ascending or _descending are not specified, the results as displayed in ascending order. | | state |This parameter is used to query items that are in a specific state. The following values can be used with this parameter:- DRAFT - PUBLISHED - EXPIRED For example: ?state=PUBLISHED | | titlelike |This parameter is used as a wildcard query for items with titles like the specified titlelike parameter.For example: ?titlelike=nameApproxValue% | | title |This parameter is used to query an item with a specific title.For example: ?title=titleValue | | type |This parameter is used to query items of a specific item type.For example, to query a list of components: ?type=LibraryHTMLComponent | | workflowid |This parameter is used to query items that use a specific workflow.For example: ?workflowid=wcmrest:8d25860b-7a5c-4015-9cd5-bdcc60ce14bb | | workflowstageid |This parameter is used to query items that are currently active within a specific workflow stage.For example: ?workflowstageid=wcmrest:18cfc80c-a490-4d75-9057-fed3db89de53 |","title":"Query parameters"},{"location":"wcm/wcm_rest_adhoc/#how-to-use-multiple-parameters","text":"Multiple instances of the same parameter type in a query can be specified only as \"OR\" queries, with the following exceptions: Only one value allowed Only one instance of the following parameters can be used in a single query. If multiple instances are used, only the first instance is used by the query: categoryid dateformat depth page pagesize \"AND\" queries allowed The following queries can be used as \"AND\" queries: createdafter createdbefore expireafter expirebefore lastmodifiedafter lastmodifiedbefore publishafter publishbefore Sort values Sort values are comma-separated. For example: ?sort=created_ascending,title_descending","title":"How to use multiple parameters"},{"location":"wcm/wcm_rest_adhoc/#text-search-rest-api","text":"This API lets Content Authors search for free form text in the Web Content Manager JCR. It is equivalent to the functionality in the Web Content Manager user interface: Using the Text Search REST API The existing search query API is extended and two new parameters are added. See REST Query service for web content and Table 2 for more information. Endpoint GET request to: http://host:port/wps/mycontenthandler/wcmrest/query?textcontainsexact=... or http://host:port/wps/mycontenthandler/wcmrest/query?textcontains=... Sample URL: http://samplehost.team-q-dev.com:10039/wps/mycontenthandler/!ut/p/digest!2fHfKIZpm7_8BPtgSigLeg/wcmrest/query?textcontainsexact=Sample%20Article Expected Body Body can just have the basic WCM structure: http://samplehost.team-q-dev.com:10039/wps/mycontenthandler/!ut/p/digest!2fHfKIZpm7_8BPtgSigLeg/wcmrest/query?textcontainsexact=Sample%20Article Expected Headers LTPA token of the user. Also works anonymously. Query Parameters textcontains: Any of the words textcontainsexact: Exact phrase Return body The found results. Same as when calling existing query API. ``` <?xml version=\"1.0\" encoding=\"UTF-8\"?> wcmrest:query?textcontainsexact=Sample%20Article wcmrest:query?textcontainsexact=Sample%20Article 2020-04-14T12:36:14.477Z 2 wcmrest:5bfbd4e2-f203-4912-87c2-4edd3e6fc4de Sample Article 2 Sample Article 2 Sample Article 2 Content 2020-04-14T12:30:05.676Z uid=wpsadmin,o=defaultWIMFileBasedRealm /wps/mycontenthandler/!ut/p/digest!2fHfKIZpm7_8BPtgSigLeg/um/users/profiles/Z9eAeIHO0JPO64BPIJM4CPHDAMMG65JO6MM07GHO0JMOCHHC43IH6OPC63RS6M1 wpsadmin wcmrest:2209b125-a9b3-4f2a-811f-4a297017dc9e Sample Article Sample Article Sample Article Content 2020-04-14T11:44:10.229Z uid=wpsadmin,o=defaultWIMFileBasedRealm /wps/mycontenthandler/!ut/p/digest!2fHfKIZpm7_8BPtgSigLeg/um/users/profiles/Z9eAeIHO0JPO64BPIJM4CPHDAMMG65JO6MM07GHO0JMOCHHC43IH6OPC63RS6M1 wpsadmin ```","title":"Text Search REST API"},{"location":"wcm/wcm_rest_create_update_option_selection_element/","text":"How to create or update an Option Selection Element You can create or update an Option Selection Element in a Content Template. Using the Create or Update Option Selection Element Endpoint POST POST request to: http://host:port/wps/mycontenthandler/wcmrest/ContentTemplate/<UUID of WCM AT>/Prototype/elements JSON For JSON add ?mime-type=application/json Sample URL: http://localhost:10039/wps/mycontenthandler/!ut/p/digest!o1x8_lupUwLN0NZh1tKfYQ/wcmrest/ContentTemplate/154592af-1aef-44e9-8b8b-559e6a3463fc/Prototype/elements Endpoint PUT PUT request to: http://host:port/wps/mycontenthandler/wcmrest/ContentTemplate/<UUID of WCM AT>/Prototype/elements/<name of element> JSON For JSON add ?mime-type=application/json Sample URL: http://localhost:10039/wps/mycontenthandler/!ut/p/digest!ipSVM_IHNf-_uoZ3TPAgrQ/wcmrest/ContentTemplate/154592af-1aef-44e9-8b8b-559e6a3463fc/Prototype/elements/option3 Expected Body Element details. Three samples below for the different types of selection elements. ``` <?xml version=\"1.0\" encoding=\"UTF-8\"?> option1 option1 OptionSelectionComponent CheckboxesOrRadioButtons UserDefined a b c d ``` ``` <?xml version=\"1.0\" encoding=\"UTF-8\"?> option2 option2 OptionSelectionComponent Automatic UnrestrictedCategory ``` ``` <?xml version=\"1.0\" encoding=\"UTF-8\"?> option3 option3 OptionSelectionComponent Listbox RestrictedCategory cat1 cat2 ``` Expected Headers LTPA token of the user. Query Parameters None. Limitations None. Return Body The updated item. Sample: ``` <?xml version=\"1.0\" encoding=\"UTF-8\"?> option3 option3 OptionSelectionComponent CheckboxesOrRadioButtons UserDefined a b c d ```","title":"How to create or update an Option Selection Element"},{"location":"wcm/wcm_rest_create_update_option_selection_element/#how-to-create-or-update-an-option-selection-element","text":"You can create or update an Option Selection Element in a Content Template.","title":"How to create or update an Option Selection Element"},{"location":"wcm/wcm_rest_create_update_option_selection_element/#using-the-create-or-update-option-selection-element","text":"Endpoint POST POST request to: http://host:port/wps/mycontenthandler/wcmrest/ContentTemplate/<UUID of WCM AT>/Prototype/elements JSON For JSON add ?mime-type=application/json Sample URL: http://localhost:10039/wps/mycontenthandler/!ut/p/digest!o1x8_lupUwLN0NZh1tKfYQ/wcmrest/ContentTemplate/154592af-1aef-44e9-8b8b-559e6a3463fc/Prototype/elements Endpoint PUT PUT request to: http://host:port/wps/mycontenthandler/wcmrest/ContentTemplate/<UUID of WCM AT>/Prototype/elements/<name of element> JSON For JSON add ?mime-type=application/json Sample URL: http://localhost:10039/wps/mycontenthandler/!ut/p/digest!ipSVM_IHNf-_uoZ3TPAgrQ/wcmrest/ContentTemplate/154592af-1aef-44e9-8b8b-559e6a3463fc/Prototype/elements/option3 Expected Body Element details. Three samples below for the different types of selection elements. ``` <?xml version=\"1.0\" encoding=\"UTF-8\"?> option1 option1 OptionSelectionComponent CheckboxesOrRadioButtons UserDefined a b c d ``` ``` <?xml version=\"1.0\" encoding=\"UTF-8\"?> option2 option2 OptionSelectionComponent Automatic UnrestrictedCategory ``` ``` <?xml version=\"1.0\" encoding=\"UTF-8\"?> option3 option3 OptionSelectionComponent Listbox RestrictedCategory cat1 cat2 ``` Expected Headers LTPA token of the user. Query Parameters None. Limitations None. Return Body The updated item. Sample: ``` <?xml version=\"1.0\" encoding=\"UTF-8\"?> option3 option3 OptionSelectionComponent CheckboxesOrRadioButtons UserDefined a b c d ```","title":"Using the Create or Update Option Selection Element"},{"location":"wcm/wcm_rest_crud_purge_delete/","text":"How to Use REST to Work with Deleted Content Items You can use the Web Content Manager REST service to purge delete, and restore previously deleted content items.","title":"How to Use REST to Work with Deleted Content Items"},{"location":"wcm/wcm_rest_crud_purge_delete/#how-to-use-rest-to-work-with-deleted-content-items","text":"You can use the Web Content Manager REST service to purge delete, and restore previously deleted content items.","title":"How to Use REST to Work with Deleted Content Items"},{"location":"wcm/wcm_rest_crud_workflow/","text":"How to use REST with drafts and workflows You can use the REST services for HCL Web Content Manager to create drafts, approve items in a workflow, retrieve workflow comments from content items, and move items through different stages of a workflow. New with HCL Digital Experience 9.5 Container Update CF181 and higher releases, two new APIs are added to handle Process Now and Remove Workflow from an item functionality. HCL DX 9.5 CF19 and higher release adds support to retrieve workflow comments from content items. Creating a draft of an item that does not use a workflow You can create a draft of items that do not use workflows. To do that, specify explicitly the draft workflow state in the request entry data. For example, to create a link component as draft: HTTP/1.1 POST http://host:port/wps/mycontenthandler/wcmrest/LibraryLinkComponent <atom:entry xmlns:atom=\"http://www.w3.org/2005/Atom\" xmlns:wcm=\"wcm/namespace\"> <wcm:name>linkDraft_E</wcm:name> <atom:link atom:rel=\"library\" atom:href=\"/wps/mycontenthandler/!ut/p/wcmrest/item/d07f0a12-3801-465e-bc20-eaec2cecf5cb\"/> <category label=\"Draft\" scheme=\"wcmrest:workflowState\" term=\"DRAFT\"/> </atom:entry> 201 Created Creating a draft in a workflow You can use the REST service to create a new draft item. This is equivalent to using the Create Draft icon in the authoring portlet. A new draft of an item can be created by sending a POST request to the following URI: /item/item-uuid/create-draft For example: HTTP/1.1 POST http://host:port/wps/mycontenthandler/wcmrest/item/item-uuid/create-draft 201 Created Moving an item to the next stage You can use the REST service to move an item to the next stage of a workflow. This is equivalent to using the Next Stage icon in the authoring portlet. An item can be moved to the next stage by sending a POST request to the following URI: /item/item-uuid/next-stage For example: HTTP/1.1 POST http://host:port/wps/mycontenthandler/wcmrest/item/<item-uuid>/next-stage 201 Created Moving an item to the previous stage You can use the REST service to move an item to the previous stage of a workflow. This is equivalent to using the Previous Stage icon in the authoring portlet. An item can be moved to the previous stage by sending a POST request to the following URI: /item/item-uuid/previous-stage For example: HTTP/1.1 POST http://host:port/wps/mycontenthandler/wcmrest/item/item-uuid/previous-stage 201 Created Approving an item within a workflow You can use the REST service to move an item to the next stage of a workflow by approving it. This is equivalent to using the Approve icon in the authoring portlet. An item can be approved by sending a POST request to the following URI: /item/item-uuid/approve For example: HTTP/1.1 POST http://host:port/wps/mycontenthandler/wcmrest/item/item-uuid/approve 201 Created Rejecting an item within a workflow You can use the REST service to reject an item in a workflow. This is equivalent to using the Reject icon in the authoring portlet. An item can be rejected by sending a POST request to the following URI: /item/item-uuid/reject For example: HTTP/1.1 POST http://host:port/wps/mycontenthandler/wcmrest/item/item-uuid/reject 201 Created Restarting a workflow You can use the REST service to restart a workflow. This is equivalent to using the Restart icon in the authoring portlet. An item can be restarted by sending a POST request to the following URI: /item/item-uuid/restart For example: HTTP/1.1 POST http://host:port/wps/mycontenthandler/wcmrest/item/item-uuid/restart 201 Created Workflow Comments To ensure that comments are added to workflow stages that require comments, a GET request must be issued to the associated link. This will return an HTML form indicating whether a comment is required. To add the comment you either submit the form, or perform an HTTP Post request with a content type of text/plain . For example: HTTP GET /wps/mycontenthandler/wcmrest/item/84e35979-d7c4-429a-b2ab-eb79abc5debc/next-stage Accept: text/html <html> <b>Next Stage</b><br><br> <form action=\"/wps/mycontenthandler/!ut/p/digest!hp5aUN2TU2D-7ziKYRo2-g/wcmrest/item/84e35979-d7c4-429a-b2ab-eb79abc5debc/ next-stage\" enctype=\"multipart/form-data\" method=\"POST\"> <label for=\"comment\"><b>*</b>Enter Comment</label> <input id=\"comment\" name=\"comment\" type=\"text\" required/><br> <input type=\"submit\" value=\"Submit\"></input> </form> </html> Process Now and Remove Workflow APIs The Process Now and Remove Workflow from an item functionality are equivalent to their functionality in user interfaces: Using the Process Now API Endpoint POST request to: http://host:port/wps/mycontenthandler/wcmrest/item/<(UUID of the content)>/process-now Sample URL: localhost:10039/wps/mycontenthandler/wcmrest/item/02894453-b03a-4935-8078-5f8ac923a5b0/process-now Expected Body The Body can just have the basic Web Content Manager structure or be empty altogether. <?xml version=\"1.0\" encoding=\"UTF-8\"?> <feed xmlns=\"http://www.w3.org/2005/Atom\" xmlns:wcm=\"http://www.ibm.com/xmlns/wcm/8.0\"> </feed> Expected Headers LTPA token of the user. Return Body The item API for the updated item. This is the same result as when calling .../wcmrest/item/ Sample: <?xml version=\"1.0\" encoding=\"UTF-8\"?> <entry xmlns=\"http://www.w3.org/2005/Atom\" xmlns:wcm=\"http://www.ibm.com/xmlns/wcm/8.0\"> <id>wcmrest:09a555cc-05ac-466c-9c8b-80aed68e4f7b</id> <title xml:lang=\"en\">dfvdfv</title> <summary xml:lang=\"en\"></summary> <wcm:name>dfvdfv</wcm:name> <wcm:type>Content</wcm:type> <updated>2020-05-27T14:36:37.371Z</updated> <published>2020-05-27T14:36:35.689Z</published> <wcm:created>2020-05-27T14:04:59.407Z</wcm:created> <author> <wcm:distinguishedName>uid=wpsadmin,o=defaultWIMFileBasedRealm</ wcm:distinguishedName> <uri>/wps/mycontenthandler/!ut/p/digest!rsWBIQ8xIEvedYpzepFP9w/um/ users/profiles/Z9eAe4JDIJSS6G9P6MMKCJ1P6JMG6NHC6JM4CMPCAMMGCO1CCMR8CNPCGJS06M1</uri> <name>wpsadmin</name> </author> <wcm:owner> <wcm:distinguishedName>uid=wpsadmin,o=defaultWIMFileBasedRealm</ wcm:distinguishedName> <uri>/wps/mycontenthandler/!ut/p/digest!rsWBIQ8xIEvedYpzepFP9w/um/ users/profiles/Z9eAe4JDIJSS6G9P6MMKCJ1P6JMG6NHC6JM4CMPCAMMGCO1CCMR8CNPCGJS06M1</uri> <name>wpsadmin</name> </wcm:owner> <wcm:lastModifier> <wcm:distinguishedName>uid=wpsadmin,o=defaultWIMFileBasedRealm</ wcm:distinguishedName> <uri>/wps/mycontenthandler/!ut/p/digest!rsWBIQ8xIEvedYpzepFP9w/um/users/profiles/Z9eAe4JDIJSS6G9P6MMKCJ1P6JMG6NHC6JM4CMPCAMMGCO1CCMR8CNPCGJS06M1</uri> <name>wpsadmin</name> </wcm:lastModifier> <wcm:creator> <wcm:distinguishedName>uid=wpsadmin,o=defaultWIMFileBasedRealm</ wcm:distinguishedName> <uri>/wps/mycontenthandler/!ut/p/digest!rsWBIQ8xIEvedYpzepFP9w/um/ users/profiles/Z9eAe4JDIJSS6G9P6MMKCJ1P6JMG6NHC6JM4CMPCAMMGCO1CCMR8CNPCGJS06M1</uri> <name>wpsadmin</name> </wcm:creator> <wcm:profile/> <wcm:workflow> <wcm:publishDate>2020-05-30T00:00:00.000Z</wcm:publishDate> </wcm:workflow> <link rel=\"self\" href=\"/wps/mycontenthandler/!ut/p/digest!rsWBIQ8xIEvedYpzepFP9w/wcmrest/Content/ 09a555cc-05ac-466c-9c8b-80aed68e4f7b\" xml:lang=\"en\" label=\"Read\"/> <link rel=\"edit\" href=\"/wps/mycontenthandler/!ut/p/digest!rsWBIQ8xIEvedYpzepFP9w/wcmrest/Content/ 09a555cc-05ac-466c-9c8b-80aed68e4f7b\" xml:lang=\"en\" label=\"Edit\"/> <link rel=\"delete\" href=\"/wps/mycontenthandler/!ut/p/digest!rsWBIQ8xIEvedYpzepFP9w/wcmrest/Content/ 09a555cc-05ac-466c-9c8b-80aed68e4f7b\" xml:lang=\"en\" label=\"Delete\"/> <link rel=\"workflow-stage\" href=\"/wps/mycontenthandler/!ut/p/digest!rsWBIQ8xIEvedYpzepFP9w/wcmrest/ WorkflowStage/f89d88b6-b375-4a65-9b99-9befdfc721e1\" xml:lang=\"en\" label=\"Workflow Stage\"/> <link rel=\"workflow\" href=\"/wps/mycontenthandler/!ut/p/digest!rsWBIQ8xIEvedYpzepFP9w/wcmrest/ Workflow/9ed22ac1-0c5a-4236-9e44-0faefd219d89\" xml:lang=\"en\" label=\"Workflow\"/> <link rel=\"access-control\" href=\"/wps/mycontenthandler/!ut/p/digest!rsWBIQ8xIEvedYpzepFP9w/ac/ access:oid:Z6QReDeG9E2MQK6LPO6MM06L9O6MMG6MHD6MM4733E4MM07G9OA6IP6O9P83JT623\" xml:lang=\"en\" label=\"Access Control\"/> <link rel=\"library\" href=\"/wps/mycontenthandler/!ut/p/digest!rsWBIQ8xIEvedYpzepFP9w/wcmrest/Library/ bfa08d5f-1833-4e4e-9455-d23ad24d1179\" xml:lang=\"en\" label=\"Library\"/> <link rel=\"parent\" href=\"/wps/mycontenthandler/!ut/p/digest!rsWBIQ8xIEvedYpzepFP9w/wcmrest/SiteArea/ 9cedbc01-a0a8-4c3f-8051-c9395d13e769\" xml:lang=\"en\" label=\"Parent\"/> <link rel=\"versions\" href=\"/wps/mycontenthandler/!ut/p/digest!rsWBIQ8xIEvedYpzepFP9w/wcmrest/item/ 09a555cc-05ac-466c-9c8b-80aed68e4f7b/versions\" xml:lang=\"en\" label=\"Versions\"/> <link rel=\"preview\" href=\"/wps/poc/!ut/p/digest!rsWBIQ8xIEvedYpzepFP9w/wcm/ oid:09a555cc-05ac-466c-9c8b-80aed68e4f7b\" xml:lang=\"en\" label=\"Preview\"/> <link rel=\"edit-media\" href=\"/wps/mycontenthandler/!ut/p/digest!rsWBIQ8xIEvedYpzepFP9w/wcmrest/ Content/09a555cc-05ac-466c-9c8b-80aed68e4f7b\" type=\"application/vnd.ibm.wcm+xml\" xml:lang=\"en\" label=\"Edit Media\"/> <link rel=\"content-template\" href=\"/wps/mycontenthandler/!ut/p/digest!rsWBIQ8xIEvedYpzepFP9w/wcmrest/ ContentTemplate/3fdeaf06-48d4-4fee-87e7-564d210aee71\" xml:lang=\"en\" label=\"Content Template\"/> <link rel=\"elements\" href=\"/wps/mycontenthandler/!ut/p/digest!rsWBIQ8xIEvedYpzepFP9w/wcmrest/ Content/09a555cc-05ac-466c-9c8b-80aed68e4f7b/elements\" xml:lang=\"en\" label=\"Elements\"/> <category scheme=\"wcmrest:workflowState\" term=\"PUBLISHED\" label=\"Published\" xml:lang=\"en\"/> <category scheme=\"wcmrest:favorite\" term=\"false\" xml:lang=\"en\"/> <content type=\"application/vnd.ibm.wcm+xml\"> <wcm:content xmlns=\"http://www.ibm.com/xmlns/wcm/8.0\"> <elements xmlns:atom=\"http://www.w3.org/2005/Atom\"> <element name=\"Body\"> <title xml:lang=\"en\">Body</title> <type>RichTextComponent</type> <data type=\"text/html\"> <![CDATA[<p dir=\"ltr\">dfb</p> ]]> </data> </element> </elements> </wcm:content> </content> </entry> Using the Remove Workflow API Endpoint POST request to: http://host:port/wps/mycontenthandler/wcmrest/item/<(UUID of the content)>/remove-workflow Sample URL: localhost:10039/wps/mycontenthandler/wcmrest/item/02894453-b03a-4935-8078-5f8ac923a5b0/remove-workflow Expected Body The Body can just have the basic Web Content Manager structure or just be empty altogether. <?xml version=\"1.0\" encoding=\"UTF-8\"?> <feed xmlns=\"http://www.w3.org/2005/Atom\" xmlns:wcm=\"http://www.ibm.com/xmlns/wcm/8.0\"> </feed> Expected Headers LTPA token of the user. Return Body The item API for the updated item. The result is the same as when calling .../wcmrest/item/. Sample: <?xml version=\"1.0\" encoding=\"UTF-8\"?> <entry xmlns=\"http://www.w3.org/2005/Atom\" xmlns:wcm=\"http://www.ibm.com/xmlns/wcm/8.0\"> <id>wcmrest:02894453-b03a-4935-8078-5f8ac923a5b0</id> <title xml:lang=\"en\">tedst33</title> <summary xml:lang=\"en\"></summary> <wcm:name>tedst33</wcm:name> <wcm:type>Content</wcm:type> <updated>2020-05-27T13:26:07.983Z</updated> <wcm:created>2020-05-27T12:19:05.008Z</wcm:created> <author> <wcm:distinguishedName>uid=wpsadmin,o=defaultWIMFileBasedRealm</ wcm:distinguishedName> <uri>/wps/mycontenthandler/!ut/p/digest!rsWBIQ8xIEvedYpzepFP9w/um/ users/profiles/Z9eAe4JDIJSS6G9P6MMKCJ1P6JMG6NHC6JM4CMPCAMMGCO1CCMR8CNPCGJS06M1</uri> <name>wpsadmin</name> </author> <wcm:owner> <wcm:distinguishedName>uid=wpsadmin,o=defaultWIMFileBasedRealm</ wcm:distinguishedName> <uri>/wps/mycontenthandler/!ut/p/digest!rsWBIQ8xIEvedYpzepFP9w/um/ users/profiles/Z9eAe4JDIJSS6G9P6MMKCJ1P6JMG6NHC6JM4CMPCAMMGCO1CCMR8CNPCGJS06M1</uri> <name>wpsadmin</name> </wcm:owner> <wcm:lastModifier> <wcm:distinguishedName>uid=wpsadmin,o=defaultWIMFileBasedRealm</ wcm:distinguishedName> <uri>/wps/mycontenthandler/!ut/p/digest!rsWBIQ8xIEvedYpzepFP9w/um/ users/profiles/Z9eAe4JDIJSS6G9P6MMKCJ1P6JMG6NHC6JM4CMPCAMMGCO1CCMR8CNPCGJS06M1</uri> <name>wpsadmin</name> </wcm:lastModifier> <wcm:creator> <wcm:distinguishedName>uid=wpsadmin,o=defaultWIMFileBasedRealm</ wcm:distinguishedName> <uri>/wps/mycontenthandler/!ut/p/digest!rsWBIQ8xIEvedYpzepFP9w/um/ users/profiles/Z9eAe4JDIJSS6G9P6MMKCJ1P6JMG6NHC6JM4CMPCAMMGCO1CCMR8CNPCGJS06M1</uri> <name>wpsadmin</name> </wcm:creator> <wcm:profile/> <link rel=\"self\" href=\"/wps/mycontenthandler/!ut/p/digest!rsWBIQ8xIEvedYpzepFP9w/wcmrest/Content/ 02894453-b03a-4935-8078-5f8ac923a5b0\" xml:lang=\"en\" label=\"Read\"/> <link rel=\"edit\" href=\"/wps/mycontenthandler/!ut/p/digest!rsWBIQ8xIEvedYpzepFP9w/wcmrest/Content/ 02894453-b03a-4935-8078-5f8ac923a5b0\" xml:lang=\"en\" label=\"Edit\"/> <link rel=\"delete\" href=\"/wps/mycontenthandler/!ut/p/digest!rsWBIQ8xIEvedYpzepFP9w/wcmrest/Content/ 02894453-b03a-4935-8078-5f8ac923a5b0\" xml:lang=\"en\" label=\"Delete\"/> <link rel=\"create-draft\" href=\"/wps/mycontenthandler/!ut/p/digest!rsWBIQ8xIEvedYpzepFP9w/wcmrest/ item/02894453-b03a-4935-8078-5f8ac923a5b0/create-draft\" xml:lang=\"en\" label=\"Create Draft\"/> <link rel=\"change-to-draft\" href=\"/wps/mycontenthandler/!ut/p/digest!rsWBIQ8xIEvedYpzepFP9w/wcmrest/ item/02894453-b03a-4935-8078-5f8ac923a5b0/change-to-draft\" xml:lang=\"en\" label=\"Change To Draft\"/> <link rel=\"access-control\" href=\"/wps/mycontenthandler/!ut/p/digest!rsWBIQ8xIEvedYpzepFP9w/ac/ access:oid:Z6QReDeGHCGJSG6K9D6JM8CGPC2MMG6PPCAJM07GPDGJMK663E2MH57IPC2MQ8CG1\" xml:lang=\"en\" label=\"Access Control\"/> <link rel=\"library\" href=\"/wps/mycontenthandler/!ut/p/digest!rsWBIQ8xIEvedYpzepFP9w/wcmrest/Library/ bfa08d5f-1833-4e4e-9455-d23ad24d1179\" xml:lang=\"en\" label=\"Library\"/> <link rel=\"parent\" href=\"/wps/mycontenthandler/!ut/p/digest!rsWBIQ8xIEvedYpzepFP9w/wcmrest/SiteArea/ 9cedbc01-a0a8-4c3f-8051-c9395d13e769\" xml:lang=\"en\" label=\"Parent\"/> <link rel=\"versions\" href=\"/wps/mycontenthandler/!ut/p/digest!rsWBIQ8xIEvedYpzepFP9w/wcmrest/item/ 02894453-b03a-4935-8078-5f8ac923a5b0/versions\" xml:lang=\"en\" label=\"Versions\"/> <link rel=\"preview\" href=\"/wps/poc/!ut/p/digest!rsWBIQ8xIEvedYpzepFP9w/wcm/oid:02894453- b03a-4935-8078-5f8ac923a5b0\" xml:lang=\"en\" label=\"Preview\"/> <link rel=\"edit-media\" href=\"/wps/mycontenthandler/!ut/p/digest!rsWBIQ8xIEvedYpzepFP9w/wcmrest/ Content/02894453-b03a-4935-8078-5f8ac923a5b0\" type=\"application/vnd.ibm.wcm+xml\" xml:lang=\"en\" label=\"Edit Media\"/> <link rel=\"content-template\" href=\"/wps/mycontenthandler/!ut/p/digest!rsWBIQ8xIEvedYpzepFP9w/ wcmrest/ContentTemplate/3fdeaf06-48d4-4fee-87e7-564d210aee71\" xml:lang=\"en\" label=\"Content Template\"/> <link rel=\"elements\" href=\"/wps/mycontenthandler/!ut/p/digest!rsWBIQ8xIEvedYpzepFP9w/wcmrest/Content/02894453-b03a-4935-8078-5f8ac923a5b0/elements\" xml:lang=\"en\" label=\"Elements\"/> <category scheme=\"wcmrest:workflowState\" term=\"PUBLISHED\" label=\"Published\" xml:lang=\"en\"/> <category scheme=\"wcmrest:favorite\" term=\"false\" xml:lang=\"en\"/> <content type=\"application/vnd.ibm.wcm+xml\"> <wcm:content xmlns=\"http://www.ibm.com/xmlns/wcm/8.0\"> <elements xmlns:atom=\"http://www.w3.org/2005/Atom\"> <element name=\"Body\"> <title xml:lang=\"en\">Body</title> <type>RichTextComponent</type> <data type=\"text/html\"/> </element> </elements> </wcm:content> </content> </entry> Using the Workflow Comments API The Workflow Comments API supports retrieval of workflow comments for content items included in a defined workflow. Endpoint GET request to retrieve any item - e.g. Content item: http://host:port/wps/mycontenthandler/wcmrest/Content/<uuid> Sample URL: http://dx.dev.com:10039/wps/mycontenthandler/wcmrest/Content/35381882-69e2-4d06-8553-e8bed1e09e68 Expected Body With Payload: { } Expected Headers LTPA token of the user. Return body: Result: 200 if successful. Result Payload: <?xml version=\"1.0\" encoding=\"UTF-8\"?><entry xmlns=\"http://www.w3.org/2005/Atom\" xmlns:wcm=\"http://www.ibm.com/xmlns/wcm/8.0\"> <id>wcmrest:35381882-69e2-4d06-8553-e8bed1e09e68</id> <title xml:lang=\"en\">Give me comments</title> <summary xml:lang=\"en\"></summary> <wcm:name>Give me comments</wcm:name> <wcm:type>Content</wcm:type> <updated>2020-10-12T20:04:40.428Z</updated> <published>2020-10-12T20:04:11.599Z</published> <wcm:created>2020-10-12T20:03:52.213Z</wcm:created> ... <wcm:workflow> <wcm:publishDate>2020-10-12T20:03:39.000Z</wcm:publishDate> <wcm:expiryDate>2020-10-12T20:04:34.000Z</wcm:expiryDate> <wcm:workflowComments wcm:date=\"2020-10-12T20:04:11.560Z\" wcm:commenter=\"uid=wpsadmin,o=defaultWIMFileBasedRealm\" wcm:comment=\"Content is amazing - Approved!!!\"/> <wcm:workflowComments wcm:date=\"2020-10-12T20:04:34.551Z\" wcm:commenter=\"uid=wpsadmin,o=defaultWIMFileBasedRealm\" wcm:comment=\"Yeah on second thoughts maybe not that great. Retiring approved.\"/> </wcm:workflow> ... Using the WCM Add Comment API This API allows you to add a comment to an item (like content, content template, or others). Note that the item needs to be saved so a new version is created. There is no equivalent to the WCM Add Comment API functionality in the user interface. This API works similarly as the other APIs described on this page. Endpoint POST request to: http://host:port/wps/mycontenthandler/wcmrest/item/<UUID of WCM item>/comment Sample URL: http://localhost:10039/wps/mycontenthandler/!ut/p/digest!d0kIL5ON1sJd3Q8JsF2F9A/wcmrest/item/11e7dded-f65a-426c-b865-d3bc18395ee0/comment Expected Body See the section Workflow Comment section for the structure on how to submit the comment. To ensure that comments are added to workflow stages that require comments, a GET request must be issued to the associated link. This returns an HTML form indicating whether a comment is required. To add the comment, you either submit the form or perform an HTTP POST request with the content type of text/plain. Expected Headers LTPA token of the user. Query Parameters None. Limitations None. Return body: The updated item. Sample: <?xml version=\"1.0\" encoding=\"UTF-8\"?><entry xmlns=\"http://www.w3.org/2005/Atom\" xmlns:wcm=\"http://www.ibm.com/xmlns/wcm/8.0\"> <id>wcmrest:11e7dded-f65a-426c-b865-d3bc18395ee0</id> <title xml:lang=\"en\">workflow</title> <wcm:displayTitle xml:lang=\"en\">workflow</wcm:displayTitle> <wcm:titleTextProviderName>com.ibm.workplace.wcm.services.textprovider.LocalizationContent</wcm:titleTextProviderName> <wcm:titleTextProviderKey>test</wcm:titleTextProviderKey> <summary xml:lang=\"en\"></summary> <wcm:name>workflow</wcm:name> <wcm:type>Content</wcm:type> <updated>2021-01-05T01:15:45.193Z</updated> <published>2021-01-04T22:15:09.803Z</published> <wcm:created>2021-01-04T22:10:48.981Z</wcm:created> <author> <wcm:distinguishedName>uid=wpsadmin,o=defaultWIMFileBasedRealm</wcm:distinguishedName> <uri>/wps/mycontenthandler/!ut/p/digest!d0kIL5ON1sJd3Q8JsF2F9A/um/users/profiles/Z9eAe23D2JOKC4BECMM47I9P8MMG6NHD6JM4CL9EAJM0763CIJI9CG1D43PKCH1</uri> <name>wpsadmin</name> <type>USER</type> </author> <wcm:owner> <wcm:distinguishedName>uid=wpsadmin,o=defaultWIMFileBasedRealm</wcm:distinguishedName> <uri>/wps/mycontenthandler/!ut/p/digest!d0kIL5ON1sJd3Q8JsF2F9A/um/users/profiles/Z9eAe23D2JOKC4BECMM47I9P8MMG6NHD6JM4CL9EAJM0763CIJI9CG1D43PKCH1</uri> <name>wpsadmin</name> <type>USER</type> </wcm:owner> <wcm:lastModifier> <wcm:distinguishedName>uid=wpsadmin,o=defaultWIMFileBasedRealm</wcm:distinguishedName> <uri>/wps/mycontenthandler/!ut/p/digest!d0kIL5ON1sJd3Q8JsF2F9A/um/users/profiles/Z9eAe23D2JOKC4BECMM47I9P8MMG6NHD6JM4CL9EAJM0763CIJI9CG1D43PKCH1</uri> <name>wpsadmin</name> <type>USER</type> </wcm:lastModifier> <wcm:creator> <wcm:distinguishedName>uid=wpsadmin,o=defaultWIMFileBasedRealm</wcm:distinguishedName> <uri>/wps/mycontenthandler/!ut/p/digest!d0kIL5ON1sJd3Q8JsF2F9A/um/users/profiles/Z9eAe23D2JOKC4BECMM47I9P8MMG6NHD6JM4CL9EAJM0763CIJI9CG1D43PKCH1</uri> <name>wpsadmin</name> <type>USER</type> </wcm:creator> <wcm:profile/> <wcm:workflow> <wcm:publishDate>2021-01-04T22:10:48.000Z</wcm:publishDate> <wcm:workflowComments wcm:date=\"2021-01-04T22:15:09.716Z\" wcm:commenter=\"uid=wpsadmin,o=defaultWIMFileBasedRealm\" wcm:comment=\"sdvsvbf\" wcm:action=\"Moved by user wpsadmin - From stage Draft Stage to Publish Stage\"/> <wcm:workflowComments wcm:date=\"2021-01-04T22:35:22.476Z\" wcm:commenter=\"uid=wpsadmin,o=defaultWIMFileBasedRealm\" wcm:comment=\"testme22\" wcm:action=\"Document updated by wpsadmin\"/> <wcm:workflowComments wcm:date=\"2021-01-04T22:42:34.215Z\" wcm:commenter=\"uid=wpsadmin,o=defaultWIMFileBasedRealm\" wcm:comment=\"testme33\" wcm:action=\"Document updated by wpsadmin\"/> <wcm:workflowComments wcm:date=\"2021-01-05T01:13:48.176Z\" wcm:commenter=\"uid=wpsadmin,o=defaultWIMFileBasedRealm\" wcm:comment=\"testme33\" wcm:action=\"Document updated by wpsadmin\"/> <wcm:workflowComments wcm:date=\"2021-01-05T01:13:54.314Z\" wcm:commenter=\"uid=wpsadmin,o=defaultWIMFileBasedRealm\" wcm:comment=\"testme33\" wcm:action=\"Document updated by wpsadmin\"/> <wcm:workflowComments wcm:date=\"2021-01-05T01:15:45.181Z\" wcm:commenter=\"uid=wpsadmin,o=defaultWIMFileBasedRealm\" wcm:comment=\"Hello World\" wcm:action=\"Document updated by wpsadmin\"/> </wcm:workflow> <link rel=\"self\" href=\"/wps/mycontenthandler/!ut/p/digest!d0kIL5ON1sJd3Q8JsF2F9A/wcmrest/Content/11e7dded-f65a-426c-b865-d3bc18395ee0\" xml:lang=\"en\" label=\"Read\"/> <link rel=\"edit\" href=\"/wps/mycontenthandler/!ut/p/digest!d0kIL5ON1sJd3Q8JsF2F9A/wcmrest/Content/11e7dded-f65a-426c-b865-d3bc18395ee0\" xml:lang=\"en\" label=\"Edit\"/> <link rel=\"delete\" href=\"/wps/mycontenthandler/!ut/p/digest!d0kIL5ON1sJd3Q8JsF2F9A/wcmrest/Content/11e7dded-f65a-426c-b865-d3bc18395ee0\" xml:lang=\"en\" label=\"Delete\"/> <link rel=\"workflow-stage\" href=\"/wps/mycontenthandler/!ut/p/digest!d0kIL5ON1sJd3Q8JsF2F9A/wcmrest/WorkflowStage/9d0df699-ef1b-424e-b85c-0b087381872b\" xml:lang=\"en\" label=\"Workflow Stage\"/> <link rel=\"expire\" href=\"/wps/mycontenthandler/!ut/p/digest!d0kIL5ON1sJd3Q8JsF2F9A/wcmrest/item/11e7dded-f65a-426c-b865-d3bc18395ee0/next-stage\" xml:lang=\"en\" label=\"Expire\"/> <link rel=\"next-stage\" href=\"/wps/mycontenthandler/!ut/p/digest!d0kIL5ON1sJd3Q8JsF2F9A/wcmrest/item/11e7dded-f65a-426c-b865-d3bc18395ee0/next-stage\" xml:lang=\"en\" label=\"Next Stage\"/> <link rel=\"workflow\" href=\"/wps/mycontenthandler/!ut/p/digest!d0kIL5ON1sJd3Q8JsF2F9A/wcmrest/Workflow/e1b4b02a-8632-46e5-b3e3-9bc5dca51565\" xml:lang=\"en\" label=\"Workflow\"/> <link rel=\"create-draft\" href=\"/wps/mycontenthandler/!ut/p/digest!d0kIL5ON1sJd3Q8JsF2F9A/wcmrest/item/11e7dded-f65a-426c-b865-d3bc18395ee0/create-draft\" xml:lang=\"en\" label=\"Create Draft\"/> <link rel=\"previous-stage\" href=\"/wps/mycontenthandler/!ut/p/digest!d0kIL5ON1sJd3Q8JsF2F9A/wcmrest/item/11e7dded-f65a-426c-b865-d3bc18395ee0/previous-stage\" xml:lang=\"en\" label=\"Previous Stage\"/> <link rel=\"restart\" href=\"/wps/mycontenthandler/!ut/p/digest!d0kIL5ON1sJd3Q8JsF2F9A/wcmrest/item/11e7dded-f65a-426c-b865-d3bc18395ee0/restart\" xml:lang=\"en\" label=\"Restart\"/> <link rel=\"access-control\" href=\"/wps/mycontenthandler/!ut/p/digest!d0kIL5ON1sJd3Q8JsF2F9A/ac/access:oid:Z6QReDeH9CAMRGC4BP8MMOCM9D2MMG6IHD6MM8COHDAJMGCJHO6MO07J9EAJILCG1\" xml:lang=\"en\" label=\"Access Control\"/> <link rel=\"library\" href=\"/wps/mycontenthandler/!ut/p/digest!d0kIL5ON1sJd3Q8JsF2F9A/wcmrest/Library/bcc98adc-2382-4730-b669-6f3e423a1567\" xml:lang=\"en\" label=\"Library\"/> <link rel=\"parent\" href=\"/wps/mycontenthandler/!ut/p/digest!d0kIL5ON1sJd3Q8JsF2F9A/wcmrest/SiteArea/4dd55ede-5cb8-4ab1-9227-495b408834ba\" xml:lang=\"en\" label=\"Parent\"/> <link rel=\"versions\" href=\"/wps/mycontenthandler/!ut/p/digest!d0kIL5ON1sJd3Q8JsF2F9A/wcmrest/item/11e7dded-f65a-426c-b865-d3bc18395ee0/versions\" xml:lang=\"en\" label=\"Versions\"/> <link rel=\"preview\" href=\"/wps/poc/!ut/p/digest!d0kIL5ON1sJd3Q8JsF2F9A/wcm/oid:11e7dded-f65a-426c-b865-d3bc18395ee0\" xml:lang=\"en\" label=\"Preview\"/> <link rel=\"edit-media\" href=\"/wps/mycontenthandler/!ut/p/digest!d0kIL5ON1sJd3Q8JsF2F9A/wcmrest/Content/11e7dded-f65a-426c-b865-d3bc18395ee0\" type=\"application/vnd.ibm.wcm+xml\" xml:lang=\"en\" label=\"Edit Media\"/> <link rel=\"content-template\" href=\"/wps/mycontenthandler/!ut/p/digest!d0kIL5ON1sJd3Q8JsF2F9A/wcmrest/ContentTemplate/82b00940-e22a-41c7-9292-a85bd51e5f85\" xml:lang=\"en\" label=\"Content Template\"/> <link rel=\"elements\" href=\"/wps/mycontenthandler/!ut/p/digest!d0kIL5ON1sJd3Q8JsF2F9A/wcmrest/Content/11e7dded-f65a-426c-b865-d3bc18395ee0/elements\" xml:lang=\"en\" label=\"Elements\"/> <category scheme=\"wcmrest:workflowState\" term=\"PUBLISHED\" label=\"Published\" xml:lang=\"en\"/> <category scheme=\"wcmrest:favorite\" term=\"false\" xml:lang=\"en\"/> <category scheme=\"wcmrest:locked\" term=\"true\" label=\"uid=wpsadmin,o=defaultWIMFileBasedRealm\"/> <content type=\"application/vnd.ibm.wcm+xml\"> <wcm:content xmlns=\"http://www.ibm.com/xmlns/wcm/8.0\"> <elements xmlns:atom=\"http://www.w3.org/2005/Atom\"> <element name=\"Body\"> <title xml:lang=\"en\">Body</title> <type>RichTextComponent</type> <data type=\"text/html\"/> </element> </elements> </wcm:content> </content> </entry>","title":"How to use REST with drafts and workflows"},{"location":"wcm/wcm_rest_crud_workflow/#how-to-use-rest-with-drafts-and-workflows","text":"You can use the REST services for HCL Web Content Manager to create drafts, approve items in a workflow, retrieve workflow comments from content items, and move items through different stages of a workflow. New with HCL Digital Experience 9.5 Container Update CF181 and higher releases, two new APIs are added to handle Process Now and Remove Workflow from an item functionality. HCL DX 9.5 CF19 and higher release adds support to retrieve workflow comments from content items.","title":"How to use REST with drafts and workflows"},{"location":"wcm/wcm_rest_crud_workflow/#creating-a-draft-of-an-item-that-does-not-use-a-workflow","text":"You can create a draft of items that do not use workflows. To do that, specify explicitly the draft workflow state in the request entry data. For example, to create a link component as draft: HTTP/1.1 POST http://host:port/wps/mycontenthandler/wcmrest/LibraryLinkComponent <atom:entry xmlns:atom=\"http://www.w3.org/2005/Atom\" xmlns:wcm=\"wcm/namespace\"> <wcm:name>linkDraft_E</wcm:name> <atom:link atom:rel=\"library\" atom:href=\"/wps/mycontenthandler/!ut/p/wcmrest/item/d07f0a12-3801-465e-bc20-eaec2cecf5cb\"/> <category label=\"Draft\" scheme=\"wcmrest:workflowState\" term=\"DRAFT\"/> </atom:entry> 201 Created","title":"Creating a draft of an item that does not use a workflow"},{"location":"wcm/wcm_rest_crud_workflow/#creating-a-draft-in-a-workflow","text":"You can use the REST service to create a new draft item. This is equivalent to using the Create Draft icon in the authoring portlet. A new draft of an item can be created by sending a POST request to the following URI: /item/item-uuid/create-draft For example: HTTP/1.1 POST http://host:port/wps/mycontenthandler/wcmrest/item/item-uuid/create-draft 201 Created","title":"Creating a draft in a workflow"},{"location":"wcm/wcm_rest_crud_workflow/#moving-an-item-to-the-next-stage","text":"You can use the REST service to move an item to the next stage of a workflow. This is equivalent to using the Next Stage icon in the authoring portlet. An item can be moved to the next stage by sending a POST request to the following URI: /item/item-uuid/next-stage For example: HTTP/1.1 POST http://host:port/wps/mycontenthandler/wcmrest/item/<item-uuid>/next-stage 201 Created","title":"Moving an item to the next stage"},{"location":"wcm/wcm_rest_crud_workflow/#moving-an-item-to-the-previous-stage","text":"You can use the REST service to move an item to the previous stage of a workflow. This is equivalent to using the Previous Stage icon in the authoring portlet. An item can be moved to the previous stage by sending a POST request to the following URI: /item/item-uuid/previous-stage For example: HTTP/1.1 POST http://host:port/wps/mycontenthandler/wcmrest/item/item-uuid/previous-stage 201 Created","title":"Moving an item to the previous stage"},{"location":"wcm/wcm_rest_crud_workflow/#approving-an-item-within-a-workflow","text":"You can use the REST service to move an item to the next stage of a workflow by approving it. This is equivalent to using the Approve icon in the authoring portlet. An item can be approved by sending a POST request to the following URI: /item/item-uuid/approve For example: HTTP/1.1 POST http://host:port/wps/mycontenthandler/wcmrest/item/item-uuid/approve 201 Created","title":"Approving an item within a workflow"},{"location":"wcm/wcm_rest_crud_workflow/#rejecting-an-item-within-a-workflow","text":"You can use the REST service to reject an item in a workflow. This is equivalent to using the Reject icon in the authoring portlet. An item can be rejected by sending a POST request to the following URI: /item/item-uuid/reject For example: HTTP/1.1 POST http://host:port/wps/mycontenthandler/wcmrest/item/item-uuid/reject 201 Created","title":"Rejecting an item within a workflow"},{"location":"wcm/wcm_rest_crud_workflow/#restarting-a-workflow","text":"You can use the REST service to restart a workflow. This is equivalent to using the Restart icon in the authoring portlet. An item can be restarted by sending a POST request to the following URI: /item/item-uuid/restart For example: HTTP/1.1 POST http://host:port/wps/mycontenthandler/wcmrest/item/item-uuid/restart 201 Created","title":"Restarting a workflow"},{"location":"wcm/wcm_rest_crud_workflow/#workflow-comments","text":"To ensure that comments are added to workflow stages that require comments, a GET request must be issued to the associated link. This will return an HTML form indicating whether a comment is required. To add the comment you either submit the form, or perform an HTTP Post request with a content type of text/plain . For example: HTTP GET /wps/mycontenthandler/wcmrest/item/84e35979-d7c4-429a-b2ab-eb79abc5debc/next-stage Accept: text/html <html> <b>Next Stage</b><br><br> <form action=\"/wps/mycontenthandler/!ut/p/digest!hp5aUN2TU2D-7ziKYRo2-g/wcmrest/item/84e35979-d7c4-429a-b2ab-eb79abc5debc/ next-stage\" enctype=\"multipart/form-data\" method=\"POST\"> <label for=\"comment\"><b>*</b>Enter Comment</label> <input id=\"comment\" name=\"comment\" type=\"text\" required/><br> <input type=\"submit\" value=\"Submit\"></input> </form> </html>","title":"Workflow Comments"},{"location":"wcm/wcm_rest_crud_workflow/#process-now-and-remove-workflow-apis","text":"The Process Now and Remove Workflow from an item functionality are equivalent to their functionality in user interfaces:","title":"Process Now and Remove Workflow APIs"},{"location":"wcm/wcm_rest_crud_workflow/#using-the-process-now-api","text":"Endpoint POST request to: http://host:port/wps/mycontenthandler/wcmrest/item/<(UUID of the content)>/process-now Sample URL: localhost:10039/wps/mycontenthandler/wcmrest/item/02894453-b03a-4935-8078-5f8ac923a5b0/process-now Expected Body The Body can just have the basic Web Content Manager structure or be empty altogether. <?xml version=\"1.0\" encoding=\"UTF-8\"?> <feed xmlns=\"http://www.w3.org/2005/Atom\" xmlns:wcm=\"http://www.ibm.com/xmlns/wcm/8.0\"> </feed> Expected Headers LTPA token of the user. Return Body The item API for the updated item. This is the same result as when calling .../wcmrest/item/ Sample: <?xml version=\"1.0\" encoding=\"UTF-8\"?> <entry xmlns=\"http://www.w3.org/2005/Atom\" xmlns:wcm=\"http://www.ibm.com/xmlns/wcm/8.0\"> <id>wcmrest:09a555cc-05ac-466c-9c8b-80aed68e4f7b</id> <title xml:lang=\"en\">dfvdfv</title> <summary xml:lang=\"en\"></summary> <wcm:name>dfvdfv</wcm:name> <wcm:type>Content</wcm:type> <updated>2020-05-27T14:36:37.371Z</updated> <published>2020-05-27T14:36:35.689Z</published> <wcm:created>2020-05-27T14:04:59.407Z</wcm:created> <author> <wcm:distinguishedName>uid=wpsadmin,o=defaultWIMFileBasedRealm</ wcm:distinguishedName> <uri>/wps/mycontenthandler/!ut/p/digest!rsWBIQ8xIEvedYpzepFP9w/um/ users/profiles/Z9eAe4JDIJSS6G9P6MMKCJ1P6JMG6NHC6JM4CMPCAMMGCO1CCMR8CNPCGJS06M1</uri> <name>wpsadmin</name> </author> <wcm:owner> <wcm:distinguishedName>uid=wpsadmin,o=defaultWIMFileBasedRealm</ wcm:distinguishedName> <uri>/wps/mycontenthandler/!ut/p/digest!rsWBIQ8xIEvedYpzepFP9w/um/ users/profiles/Z9eAe4JDIJSS6G9P6MMKCJ1P6JMG6NHC6JM4CMPCAMMGCO1CCMR8CNPCGJS06M1</uri> <name>wpsadmin</name> </wcm:owner> <wcm:lastModifier> <wcm:distinguishedName>uid=wpsadmin,o=defaultWIMFileBasedRealm</ wcm:distinguishedName> <uri>/wps/mycontenthandler/!ut/p/digest!rsWBIQ8xIEvedYpzepFP9w/um/users/profiles/Z9eAe4JDIJSS6G9P6MMKCJ1P6JMG6NHC6JM4CMPCAMMGCO1CCMR8CNPCGJS06M1</uri> <name>wpsadmin</name> </wcm:lastModifier> <wcm:creator> <wcm:distinguishedName>uid=wpsadmin,o=defaultWIMFileBasedRealm</ wcm:distinguishedName> <uri>/wps/mycontenthandler/!ut/p/digest!rsWBIQ8xIEvedYpzepFP9w/um/ users/profiles/Z9eAe4JDIJSS6G9P6MMKCJ1P6JMG6NHC6JM4CMPCAMMGCO1CCMR8CNPCGJS06M1</uri> <name>wpsadmin</name> </wcm:creator> <wcm:profile/> <wcm:workflow> <wcm:publishDate>2020-05-30T00:00:00.000Z</wcm:publishDate> </wcm:workflow> <link rel=\"self\" href=\"/wps/mycontenthandler/!ut/p/digest!rsWBIQ8xIEvedYpzepFP9w/wcmrest/Content/ 09a555cc-05ac-466c-9c8b-80aed68e4f7b\" xml:lang=\"en\" label=\"Read\"/> <link rel=\"edit\" href=\"/wps/mycontenthandler/!ut/p/digest!rsWBIQ8xIEvedYpzepFP9w/wcmrest/Content/ 09a555cc-05ac-466c-9c8b-80aed68e4f7b\" xml:lang=\"en\" label=\"Edit\"/> <link rel=\"delete\" href=\"/wps/mycontenthandler/!ut/p/digest!rsWBIQ8xIEvedYpzepFP9w/wcmrest/Content/ 09a555cc-05ac-466c-9c8b-80aed68e4f7b\" xml:lang=\"en\" label=\"Delete\"/> <link rel=\"workflow-stage\" href=\"/wps/mycontenthandler/!ut/p/digest!rsWBIQ8xIEvedYpzepFP9w/wcmrest/ WorkflowStage/f89d88b6-b375-4a65-9b99-9befdfc721e1\" xml:lang=\"en\" label=\"Workflow Stage\"/> <link rel=\"workflow\" href=\"/wps/mycontenthandler/!ut/p/digest!rsWBIQ8xIEvedYpzepFP9w/wcmrest/ Workflow/9ed22ac1-0c5a-4236-9e44-0faefd219d89\" xml:lang=\"en\" label=\"Workflow\"/> <link rel=\"access-control\" href=\"/wps/mycontenthandler/!ut/p/digest!rsWBIQ8xIEvedYpzepFP9w/ac/ access:oid:Z6QReDeG9E2MQK6LPO6MM06L9O6MMG6MHD6MM4733E4MM07G9OA6IP6O9P83JT623\" xml:lang=\"en\" label=\"Access Control\"/> <link rel=\"library\" href=\"/wps/mycontenthandler/!ut/p/digest!rsWBIQ8xIEvedYpzepFP9w/wcmrest/Library/ bfa08d5f-1833-4e4e-9455-d23ad24d1179\" xml:lang=\"en\" label=\"Library\"/> <link rel=\"parent\" href=\"/wps/mycontenthandler/!ut/p/digest!rsWBIQ8xIEvedYpzepFP9w/wcmrest/SiteArea/ 9cedbc01-a0a8-4c3f-8051-c9395d13e769\" xml:lang=\"en\" label=\"Parent\"/> <link rel=\"versions\" href=\"/wps/mycontenthandler/!ut/p/digest!rsWBIQ8xIEvedYpzepFP9w/wcmrest/item/ 09a555cc-05ac-466c-9c8b-80aed68e4f7b/versions\" xml:lang=\"en\" label=\"Versions\"/> <link rel=\"preview\" href=\"/wps/poc/!ut/p/digest!rsWBIQ8xIEvedYpzepFP9w/wcm/ oid:09a555cc-05ac-466c-9c8b-80aed68e4f7b\" xml:lang=\"en\" label=\"Preview\"/> <link rel=\"edit-media\" href=\"/wps/mycontenthandler/!ut/p/digest!rsWBIQ8xIEvedYpzepFP9w/wcmrest/ Content/09a555cc-05ac-466c-9c8b-80aed68e4f7b\" type=\"application/vnd.ibm.wcm+xml\" xml:lang=\"en\" label=\"Edit Media\"/> <link rel=\"content-template\" href=\"/wps/mycontenthandler/!ut/p/digest!rsWBIQ8xIEvedYpzepFP9w/wcmrest/ ContentTemplate/3fdeaf06-48d4-4fee-87e7-564d210aee71\" xml:lang=\"en\" label=\"Content Template\"/> <link rel=\"elements\" href=\"/wps/mycontenthandler/!ut/p/digest!rsWBIQ8xIEvedYpzepFP9w/wcmrest/ Content/09a555cc-05ac-466c-9c8b-80aed68e4f7b/elements\" xml:lang=\"en\" label=\"Elements\"/> <category scheme=\"wcmrest:workflowState\" term=\"PUBLISHED\" label=\"Published\" xml:lang=\"en\"/> <category scheme=\"wcmrest:favorite\" term=\"false\" xml:lang=\"en\"/> <content type=\"application/vnd.ibm.wcm+xml\"> <wcm:content xmlns=\"http://www.ibm.com/xmlns/wcm/8.0\"> <elements xmlns:atom=\"http://www.w3.org/2005/Atom\"> <element name=\"Body\"> <title xml:lang=\"en\">Body</title> <type>RichTextComponent</type> <data type=\"text/html\"> <![CDATA[<p dir=\"ltr\">dfb</p> ]]> </data> </element> </elements> </wcm:content> </content> </entry>","title":"Using the Process Now API"},{"location":"wcm/wcm_rest_crud_workflow/#using-the-remove-workflow-api","text":"Endpoint POST request to: http://host:port/wps/mycontenthandler/wcmrest/item/<(UUID of the content)>/remove-workflow Sample URL: localhost:10039/wps/mycontenthandler/wcmrest/item/02894453-b03a-4935-8078-5f8ac923a5b0/remove-workflow Expected Body The Body can just have the basic Web Content Manager structure or just be empty altogether. <?xml version=\"1.0\" encoding=\"UTF-8\"?> <feed xmlns=\"http://www.w3.org/2005/Atom\" xmlns:wcm=\"http://www.ibm.com/xmlns/wcm/8.0\"> </feed> Expected Headers LTPA token of the user. Return Body The item API for the updated item. The result is the same as when calling .../wcmrest/item/. Sample: <?xml version=\"1.0\" encoding=\"UTF-8\"?> <entry xmlns=\"http://www.w3.org/2005/Atom\" xmlns:wcm=\"http://www.ibm.com/xmlns/wcm/8.0\"> <id>wcmrest:02894453-b03a-4935-8078-5f8ac923a5b0</id> <title xml:lang=\"en\">tedst33</title> <summary xml:lang=\"en\"></summary> <wcm:name>tedst33</wcm:name> <wcm:type>Content</wcm:type> <updated>2020-05-27T13:26:07.983Z</updated> <wcm:created>2020-05-27T12:19:05.008Z</wcm:created> <author> <wcm:distinguishedName>uid=wpsadmin,o=defaultWIMFileBasedRealm</ wcm:distinguishedName> <uri>/wps/mycontenthandler/!ut/p/digest!rsWBIQ8xIEvedYpzepFP9w/um/ users/profiles/Z9eAe4JDIJSS6G9P6MMKCJ1P6JMG6NHC6JM4CMPCAMMGCO1CCMR8CNPCGJS06M1</uri> <name>wpsadmin</name> </author> <wcm:owner> <wcm:distinguishedName>uid=wpsadmin,o=defaultWIMFileBasedRealm</ wcm:distinguishedName> <uri>/wps/mycontenthandler/!ut/p/digest!rsWBIQ8xIEvedYpzepFP9w/um/ users/profiles/Z9eAe4JDIJSS6G9P6MMKCJ1P6JMG6NHC6JM4CMPCAMMGCO1CCMR8CNPCGJS06M1</uri> <name>wpsadmin</name> </wcm:owner> <wcm:lastModifier> <wcm:distinguishedName>uid=wpsadmin,o=defaultWIMFileBasedRealm</ wcm:distinguishedName> <uri>/wps/mycontenthandler/!ut/p/digest!rsWBIQ8xIEvedYpzepFP9w/um/ users/profiles/Z9eAe4JDIJSS6G9P6MMKCJ1P6JMG6NHC6JM4CMPCAMMGCO1CCMR8CNPCGJS06M1</uri> <name>wpsadmin</name> </wcm:lastModifier> <wcm:creator> <wcm:distinguishedName>uid=wpsadmin,o=defaultWIMFileBasedRealm</ wcm:distinguishedName> <uri>/wps/mycontenthandler/!ut/p/digest!rsWBIQ8xIEvedYpzepFP9w/um/ users/profiles/Z9eAe4JDIJSS6G9P6MMKCJ1P6JMG6NHC6JM4CMPCAMMGCO1CCMR8CNPCGJS06M1</uri> <name>wpsadmin</name> </wcm:creator> <wcm:profile/> <link rel=\"self\" href=\"/wps/mycontenthandler/!ut/p/digest!rsWBIQ8xIEvedYpzepFP9w/wcmrest/Content/ 02894453-b03a-4935-8078-5f8ac923a5b0\" xml:lang=\"en\" label=\"Read\"/> <link rel=\"edit\" href=\"/wps/mycontenthandler/!ut/p/digest!rsWBIQ8xIEvedYpzepFP9w/wcmrest/Content/ 02894453-b03a-4935-8078-5f8ac923a5b0\" xml:lang=\"en\" label=\"Edit\"/> <link rel=\"delete\" href=\"/wps/mycontenthandler/!ut/p/digest!rsWBIQ8xIEvedYpzepFP9w/wcmrest/Content/ 02894453-b03a-4935-8078-5f8ac923a5b0\" xml:lang=\"en\" label=\"Delete\"/> <link rel=\"create-draft\" href=\"/wps/mycontenthandler/!ut/p/digest!rsWBIQ8xIEvedYpzepFP9w/wcmrest/ item/02894453-b03a-4935-8078-5f8ac923a5b0/create-draft\" xml:lang=\"en\" label=\"Create Draft\"/> <link rel=\"change-to-draft\" href=\"/wps/mycontenthandler/!ut/p/digest!rsWBIQ8xIEvedYpzepFP9w/wcmrest/ item/02894453-b03a-4935-8078-5f8ac923a5b0/change-to-draft\" xml:lang=\"en\" label=\"Change To Draft\"/> <link rel=\"access-control\" href=\"/wps/mycontenthandler/!ut/p/digest!rsWBIQ8xIEvedYpzepFP9w/ac/ access:oid:Z6QReDeGHCGJSG6K9D6JM8CGPC2MMG6PPCAJM07GPDGJMK663E2MH57IPC2MQ8CG1\" xml:lang=\"en\" label=\"Access Control\"/> <link rel=\"library\" href=\"/wps/mycontenthandler/!ut/p/digest!rsWBIQ8xIEvedYpzepFP9w/wcmrest/Library/ bfa08d5f-1833-4e4e-9455-d23ad24d1179\" xml:lang=\"en\" label=\"Library\"/> <link rel=\"parent\" href=\"/wps/mycontenthandler/!ut/p/digest!rsWBIQ8xIEvedYpzepFP9w/wcmrest/SiteArea/ 9cedbc01-a0a8-4c3f-8051-c9395d13e769\" xml:lang=\"en\" label=\"Parent\"/> <link rel=\"versions\" href=\"/wps/mycontenthandler/!ut/p/digest!rsWBIQ8xIEvedYpzepFP9w/wcmrest/item/ 02894453-b03a-4935-8078-5f8ac923a5b0/versions\" xml:lang=\"en\" label=\"Versions\"/> <link rel=\"preview\" href=\"/wps/poc/!ut/p/digest!rsWBIQ8xIEvedYpzepFP9w/wcm/oid:02894453- b03a-4935-8078-5f8ac923a5b0\" xml:lang=\"en\" label=\"Preview\"/> <link rel=\"edit-media\" href=\"/wps/mycontenthandler/!ut/p/digest!rsWBIQ8xIEvedYpzepFP9w/wcmrest/ Content/02894453-b03a-4935-8078-5f8ac923a5b0\" type=\"application/vnd.ibm.wcm+xml\" xml:lang=\"en\" label=\"Edit Media\"/> <link rel=\"content-template\" href=\"/wps/mycontenthandler/!ut/p/digest!rsWBIQ8xIEvedYpzepFP9w/ wcmrest/ContentTemplate/3fdeaf06-48d4-4fee-87e7-564d210aee71\" xml:lang=\"en\" label=\"Content Template\"/> <link rel=\"elements\" href=\"/wps/mycontenthandler/!ut/p/digest!rsWBIQ8xIEvedYpzepFP9w/wcmrest/Content/02894453-b03a-4935-8078-5f8ac923a5b0/elements\" xml:lang=\"en\" label=\"Elements\"/> <category scheme=\"wcmrest:workflowState\" term=\"PUBLISHED\" label=\"Published\" xml:lang=\"en\"/> <category scheme=\"wcmrest:favorite\" term=\"false\" xml:lang=\"en\"/> <content type=\"application/vnd.ibm.wcm+xml\"> <wcm:content xmlns=\"http://www.ibm.com/xmlns/wcm/8.0\"> <elements xmlns:atom=\"http://www.w3.org/2005/Atom\"> <element name=\"Body\"> <title xml:lang=\"en\">Body</title> <type>RichTextComponent</type> <data type=\"text/html\"/> </element> </elements> </wcm:content> </content> </entry>","title":"Using the Remove Workflow API"},{"location":"wcm/wcm_rest_crud_workflow/#using-the-workflow-comments-api","text":"The Workflow Comments API supports retrieval of workflow comments for content items included in a defined workflow. Endpoint GET request to retrieve any item - e.g. Content item: http://host:port/wps/mycontenthandler/wcmrest/Content/<uuid> Sample URL: http://dx.dev.com:10039/wps/mycontenthandler/wcmrest/Content/35381882-69e2-4d06-8553-e8bed1e09e68 Expected Body With Payload: { } Expected Headers LTPA token of the user. Return body: Result: 200 if successful. Result Payload: <?xml version=\"1.0\" encoding=\"UTF-8\"?><entry xmlns=\"http://www.w3.org/2005/Atom\" xmlns:wcm=\"http://www.ibm.com/xmlns/wcm/8.0\"> <id>wcmrest:35381882-69e2-4d06-8553-e8bed1e09e68</id> <title xml:lang=\"en\">Give me comments</title> <summary xml:lang=\"en\"></summary> <wcm:name>Give me comments</wcm:name> <wcm:type>Content</wcm:type> <updated>2020-10-12T20:04:40.428Z</updated> <published>2020-10-12T20:04:11.599Z</published> <wcm:created>2020-10-12T20:03:52.213Z</wcm:created> ... <wcm:workflow> <wcm:publishDate>2020-10-12T20:03:39.000Z</wcm:publishDate> <wcm:expiryDate>2020-10-12T20:04:34.000Z</wcm:expiryDate> <wcm:workflowComments wcm:date=\"2020-10-12T20:04:11.560Z\" wcm:commenter=\"uid=wpsadmin,o=defaultWIMFileBasedRealm\" wcm:comment=\"Content is amazing - Approved!!!\"/> <wcm:workflowComments wcm:date=\"2020-10-12T20:04:34.551Z\" wcm:commenter=\"uid=wpsadmin,o=defaultWIMFileBasedRealm\" wcm:comment=\"Yeah on second thoughts maybe not that great. Retiring approved.\"/> </wcm:workflow> ...","title":"Using the Workflow Comments API"},{"location":"wcm/wcm_rest_crud_workflow/#using-the-wcm-add-comment-api","text":"This API allows you to add a comment to an item (like content, content template, or others). Note that the item needs to be saved so a new version is created. There is no equivalent to the WCM Add Comment API functionality in the user interface. This API works similarly as the other APIs described on this page. Endpoint POST request to: http://host:port/wps/mycontenthandler/wcmrest/item/<UUID of WCM item>/comment Sample URL: http://localhost:10039/wps/mycontenthandler/!ut/p/digest!d0kIL5ON1sJd3Q8JsF2F9A/wcmrest/item/11e7dded-f65a-426c-b865-d3bc18395ee0/comment Expected Body See the section Workflow Comment section for the structure on how to submit the comment. To ensure that comments are added to workflow stages that require comments, a GET request must be issued to the associated link. This returns an HTML form indicating whether a comment is required. To add the comment, you either submit the form or perform an HTTP POST request with the content type of text/plain. Expected Headers LTPA token of the user. Query Parameters None. Limitations None. Return body: The updated item. Sample: <?xml version=\"1.0\" encoding=\"UTF-8\"?><entry xmlns=\"http://www.w3.org/2005/Atom\" xmlns:wcm=\"http://www.ibm.com/xmlns/wcm/8.0\"> <id>wcmrest:11e7dded-f65a-426c-b865-d3bc18395ee0</id> <title xml:lang=\"en\">workflow</title> <wcm:displayTitle xml:lang=\"en\">workflow</wcm:displayTitle> <wcm:titleTextProviderName>com.ibm.workplace.wcm.services.textprovider.LocalizationContent</wcm:titleTextProviderName> <wcm:titleTextProviderKey>test</wcm:titleTextProviderKey> <summary xml:lang=\"en\"></summary> <wcm:name>workflow</wcm:name> <wcm:type>Content</wcm:type> <updated>2021-01-05T01:15:45.193Z</updated> <published>2021-01-04T22:15:09.803Z</published> <wcm:created>2021-01-04T22:10:48.981Z</wcm:created> <author> <wcm:distinguishedName>uid=wpsadmin,o=defaultWIMFileBasedRealm</wcm:distinguishedName> <uri>/wps/mycontenthandler/!ut/p/digest!d0kIL5ON1sJd3Q8JsF2F9A/um/users/profiles/Z9eAe23D2JOKC4BECMM47I9P8MMG6NHD6JM4CL9EAJM0763CIJI9CG1D43PKCH1</uri> <name>wpsadmin</name> <type>USER</type> </author> <wcm:owner> <wcm:distinguishedName>uid=wpsadmin,o=defaultWIMFileBasedRealm</wcm:distinguishedName> <uri>/wps/mycontenthandler/!ut/p/digest!d0kIL5ON1sJd3Q8JsF2F9A/um/users/profiles/Z9eAe23D2JOKC4BECMM47I9P8MMG6NHD6JM4CL9EAJM0763CIJI9CG1D43PKCH1</uri> <name>wpsadmin</name> <type>USER</type> </wcm:owner> <wcm:lastModifier> <wcm:distinguishedName>uid=wpsadmin,o=defaultWIMFileBasedRealm</wcm:distinguishedName> <uri>/wps/mycontenthandler/!ut/p/digest!d0kIL5ON1sJd3Q8JsF2F9A/um/users/profiles/Z9eAe23D2JOKC4BECMM47I9P8MMG6NHD6JM4CL9EAJM0763CIJI9CG1D43PKCH1</uri> <name>wpsadmin</name> <type>USER</type> </wcm:lastModifier> <wcm:creator> <wcm:distinguishedName>uid=wpsadmin,o=defaultWIMFileBasedRealm</wcm:distinguishedName> <uri>/wps/mycontenthandler/!ut/p/digest!d0kIL5ON1sJd3Q8JsF2F9A/um/users/profiles/Z9eAe23D2JOKC4BECMM47I9P8MMG6NHD6JM4CL9EAJM0763CIJI9CG1D43PKCH1</uri> <name>wpsadmin</name> <type>USER</type> </wcm:creator> <wcm:profile/> <wcm:workflow> <wcm:publishDate>2021-01-04T22:10:48.000Z</wcm:publishDate> <wcm:workflowComments wcm:date=\"2021-01-04T22:15:09.716Z\" wcm:commenter=\"uid=wpsadmin,o=defaultWIMFileBasedRealm\" wcm:comment=\"sdvsvbf\" wcm:action=\"Moved by user wpsadmin - From stage Draft Stage to Publish Stage\"/> <wcm:workflowComments wcm:date=\"2021-01-04T22:35:22.476Z\" wcm:commenter=\"uid=wpsadmin,o=defaultWIMFileBasedRealm\" wcm:comment=\"testme22\" wcm:action=\"Document updated by wpsadmin\"/> <wcm:workflowComments wcm:date=\"2021-01-04T22:42:34.215Z\" wcm:commenter=\"uid=wpsadmin,o=defaultWIMFileBasedRealm\" wcm:comment=\"testme33\" wcm:action=\"Document updated by wpsadmin\"/> <wcm:workflowComments wcm:date=\"2021-01-05T01:13:48.176Z\" wcm:commenter=\"uid=wpsadmin,o=defaultWIMFileBasedRealm\" wcm:comment=\"testme33\" wcm:action=\"Document updated by wpsadmin\"/> <wcm:workflowComments wcm:date=\"2021-01-05T01:13:54.314Z\" wcm:commenter=\"uid=wpsadmin,o=defaultWIMFileBasedRealm\" wcm:comment=\"testme33\" wcm:action=\"Document updated by wpsadmin\"/> <wcm:workflowComments wcm:date=\"2021-01-05T01:15:45.181Z\" wcm:commenter=\"uid=wpsadmin,o=defaultWIMFileBasedRealm\" wcm:comment=\"Hello World\" wcm:action=\"Document updated by wpsadmin\"/> </wcm:workflow> <link rel=\"self\" href=\"/wps/mycontenthandler/!ut/p/digest!d0kIL5ON1sJd3Q8JsF2F9A/wcmrest/Content/11e7dded-f65a-426c-b865-d3bc18395ee0\" xml:lang=\"en\" label=\"Read\"/> <link rel=\"edit\" href=\"/wps/mycontenthandler/!ut/p/digest!d0kIL5ON1sJd3Q8JsF2F9A/wcmrest/Content/11e7dded-f65a-426c-b865-d3bc18395ee0\" xml:lang=\"en\" label=\"Edit\"/> <link rel=\"delete\" href=\"/wps/mycontenthandler/!ut/p/digest!d0kIL5ON1sJd3Q8JsF2F9A/wcmrest/Content/11e7dded-f65a-426c-b865-d3bc18395ee0\" xml:lang=\"en\" label=\"Delete\"/> <link rel=\"workflow-stage\" href=\"/wps/mycontenthandler/!ut/p/digest!d0kIL5ON1sJd3Q8JsF2F9A/wcmrest/WorkflowStage/9d0df699-ef1b-424e-b85c-0b087381872b\" xml:lang=\"en\" label=\"Workflow Stage\"/> <link rel=\"expire\" href=\"/wps/mycontenthandler/!ut/p/digest!d0kIL5ON1sJd3Q8JsF2F9A/wcmrest/item/11e7dded-f65a-426c-b865-d3bc18395ee0/next-stage\" xml:lang=\"en\" label=\"Expire\"/> <link rel=\"next-stage\" href=\"/wps/mycontenthandler/!ut/p/digest!d0kIL5ON1sJd3Q8JsF2F9A/wcmrest/item/11e7dded-f65a-426c-b865-d3bc18395ee0/next-stage\" xml:lang=\"en\" label=\"Next Stage\"/> <link rel=\"workflow\" href=\"/wps/mycontenthandler/!ut/p/digest!d0kIL5ON1sJd3Q8JsF2F9A/wcmrest/Workflow/e1b4b02a-8632-46e5-b3e3-9bc5dca51565\" xml:lang=\"en\" label=\"Workflow\"/> <link rel=\"create-draft\" href=\"/wps/mycontenthandler/!ut/p/digest!d0kIL5ON1sJd3Q8JsF2F9A/wcmrest/item/11e7dded-f65a-426c-b865-d3bc18395ee0/create-draft\" xml:lang=\"en\" label=\"Create Draft\"/> <link rel=\"previous-stage\" href=\"/wps/mycontenthandler/!ut/p/digest!d0kIL5ON1sJd3Q8JsF2F9A/wcmrest/item/11e7dded-f65a-426c-b865-d3bc18395ee0/previous-stage\" xml:lang=\"en\" label=\"Previous Stage\"/> <link rel=\"restart\" href=\"/wps/mycontenthandler/!ut/p/digest!d0kIL5ON1sJd3Q8JsF2F9A/wcmrest/item/11e7dded-f65a-426c-b865-d3bc18395ee0/restart\" xml:lang=\"en\" label=\"Restart\"/> <link rel=\"access-control\" href=\"/wps/mycontenthandler/!ut/p/digest!d0kIL5ON1sJd3Q8JsF2F9A/ac/access:oid:Z6QReDeH9CAMRGC4BP8MMOCM9D2MMG6IHD6MM8COHDAJMGCJHO6MO07J9EAJILCG1\" xml:lang=\"en\" label=\"Access Control\"/> <link rel=\"library\" href=\"/wps/mycontenthandler/!ut/p/digest!d0kIL5ON1sJd3Q8JsF2F9A/wcmrest/Library/bcc98adc-2382-4730-b669-6f3e423a1567\" xml:lang=\"en\" label=\"Library\"/> <link rel=\"parent\" href=\"/wps/mycontenthandler/!ut/p/digest!d0kIL5ON1sJd3Q8JsF2F9A/wcmrest/SiteArea/4dd55ede-5cb8-4ab1-9227-495b408834ba\" xml:lang=\"en\" label=\"Parent\"/> <link rel=\"versions\" href=\"/wps/mycontenthandler/!ut/p/digest!d0kIL5ON1sJd3Q8JsF2F9A/wcmrest/item/11e7dded-f65a-426c-b865-d3bc18395ee0/versions\" xml:lang=\"en\" label=\"Versions\"/> <link rel=\"preview\" href=\"/wps/poc/!ut/p/digest!d0kIL5ON1sJd3Q8JsF2F9A/wcm/oid:11e7dded-f65a-426c-b865-d3bc18395ee0\" xml:lang=\"en\" label=\"Preview\"/> <link rel=\"edit-media\" href=\"/wps/mycontenthandler/!ut/p/digest!d0kIL5ON1sJd3Q8JsF2F9A/wcmrest/Content/11e7dded-f65a-426c-b865-d3bc18395ee0\" type=\"application/vnd.ibm.wcm+xml\" xml:lang=\"en\" label=\"Edit Media\"/> <link rel=\"content-template\" href=\"/wps/mycontenthandler/!ut/p/digest!d0kIL5ON1sJd3Q8JsF2F9A/wcmrest/ContentTemplate/82b00940-e22a-41c7-9292-a85bd51e5f85\" xml:lang=\"en\" label=\"Content Template\"/> <link rel=\"elements\" href=\"/wps/mycontenthandler/!ut/p/digest!d0kIL5ON1sJd3Q8JsF2F9A/wcmrest/Content/11e7dded-f65a-426c-b865-d3bc18395ee0/elements\" xml:lang=\"en\" label=\"Elements\"/> <category scheme=\"wcmrest:workflowState\" term=\"PUBLISHED\" label=\"Published\" xml:lang=\"en\"/> <category scheme=\"wcmrest:favorite\" term=\"false\" xml:lang=\"en\"/> <category scheme=\"wcmrest:locked\" term=\"true\" label=\"uid=wpsadmin,o=defaultWIMFileBasedRealm\"/> <content type=\"application/vnd.ibm.wcm+xml\"> <wcm:content xmlns=\"http://www.ibm.com/xmlns/wcm/8.0\"> <elements xmlns:atom=\"http://www.w3.org/2005/Atom\"> <element name=\"Body\"> <title xml:lang=\"en\">Body</title> <type>RichTextComponent</type> <data type=\"text/html\"/> </element> </elements> </wcm:content> </content> </entry>","title":"Using the WCM Add Comment API"},{"location":"wcm/wcm_rest_query/","text":"REST Query service for web content The REST service for Web Content Manager comes with a defined set of query parameters. You can also define your own query parameters in a white list. You can also predefine a query to run more complex searches, and control the allowable filters on these searches by using a white list.","title":"REST Query service for web content"},{"location":"wcm/wcm_rest_query/#rest-query-service-for-web-content","text":"The REST service for Web Content Manager comes with a defined set of query parameters. You can also define your own query parameters in a white list. You can also predefine a query to run more complex searches, and control the allowable filters on these searches by using a white list.","title":"REST Query service for web content"},{"location":"wcm/wcm_switch_lang_portal_theme/","text":"How to Switch the languages in the Digital Experience theme| HCL Digital Experience Multilingual Solution To showcase our ongoing efforts in enhancing Multilingual support, we have now added an icon in the Woodburn Studio website to select the language of your choice in the Digital Experience theme. The currently supported languages are English, French, and Spanish. Procedure Click on the translate icon in the navigation header section. Select any of the language from the drop down option. The Digital Experience theme is updated to the corresponding language that was selected from the drop-down list. Note: This feature is available for both authenticated and non-authenticated Digital Experience users.","title":"How to Switch the languages in the Digital Experience theme\\| HCL Digital Experience Multilingual Solution"},{"location":"wcm/wcm_switch_lang_portal_theme/#how-to-switch-the-languages-in-the-digital-experience-theme-hcl-digital-experience-multilingual-solution","text":"To showcase our ongoing efforts in enhancing Multilingual support, we have now added an icon in the Woodburn Studio website to select the language of your choice in the Digital Experience theme. The currently supported languages are English, French, and Spanish.","title":"How to Switch the languages in the Digital Experience theme| HCL Digital Experience Multilingual Solution"},{"location":"wcm/wcm_switch_lang_portal_theme/#procedure","text":"Click on the translate icon in the navigation header section. Select any of the language from the drop down option. The Digital Experience theme is updated to the corresponding language that was selected from the drop-down list. Note: This feature is available for both authenticated and non-authenticated Digital Experience users.","title":"Procedure"},{"location":"whatsnew/container_update_releases/","text":"Container Update releases 9.5 The HCL Digital Experience 9.5 Cumulative Fix and Container Update releases offer new features and software fixes for the HCL Digital Experience 9.5 container releases. Beginning with Container Update release CF196, release updates for both on-premises deployments and container platforms are available. What's new in Container Update CF201? 9.5 Containers This HCL Digital Experience 9.5 Container Update and CF201 release includes updated releases of HCL DX core Portal and Web Content Manager, Content Composer, Digital Asset Management, Experience API, and Design Studio (Beta) components. The release also includes updated CICD release process artifacts, new DX Personalization REST APIs, Updated Helm deployment and logging capacity, LDAP, and environment configuration guidance, also metrics and visualization samples, Script Application updates, new React profile for the DX 8.5 sample Theme, extensibility plugin and sample for Digital Asset Management, and more. What's new in Container Update CF200? 9.5 Containers This HCL Digital Experience 9.5 Container Update and CF200 release includes updated releases of HCL DX core Portal and Web Content Manager, Content Composer, Digital Asset Management, Experience API, Design Studio (Beta), new Helm deployment operations for container deployments and migration from Operator deployments, updated CICD release process artifacts, new DX API and Explorer services for Personalization, Search and User and Groups REST APIs, new Digital Experience 9.5 Demo Packs on HCL Sofy, new \u2018How To\u2019 videos, and more. What's new in Container Update CF199? 9.5 Containers This HCL Digital Experience 9.5 Container Update and CF199 release includes new releases of HCL DX core Portal and Web Content Manager, Content Composer, Digital Asset Management, Experience API, Design Studio (Beta), new Helm deployment operations for container deployments, updated CICD release process artifacts, \u201cHow To\u201d videos, and more. What's new in Container Update CF198? 9.5 Containers This HCL Digital Experience 9.5 Container Update and CF198 release includes new releases of HCL DX core Portal and Web Content Manager, Content Composer, Digital Asset Management, Experience API, Design Studio (Beta), new Helm deployment operations for container deployments, updated CICD release process artifacts, the new Site Manager Custom Layout Editor, HCL Digital Experience Technical Articles, \u2018How To\u2019 videos, and more. What's new in Container Update CF197? 9.5 Containers This HCL Digital Experience 9.5 Container Update and CF197 release includes updated releases of HCL DX core Portal and Web Content Manager, Content Composer, Digital Asset Management and Experience API images, and an updated beta preview release of Design Studio. New and updated feature references are detailed here. What's new in Container Update CF196? 9.5 Containers This HCL Digital Experience 9.5 Container Update release includes new releases of HCL Digital Experience 9.5 core Portal and Web Content Manager, Content Composer, Digital Asset Management, and Experience API images, and a beta preview release of Design Studio. New and updated feature references are detailed here. What's new in Container Update CF195? 9.5 Containers This HCL Digital Experience 9.5 Container Update release includes new releases of Digital Experience 9.5 core Portal and Web Content Manager, Content Composer, Digital Asset Management, and Experience API images. New and updated feature references are detailed here. What's new in Container Update CF194? 9.5 Containers This HCL Digital Experience 9.5 Container Update release includes new releases of Digital Experience 9.5 core Portal and Web Content Manager, Content Composer, Digital Asset Management, and Experience API images. No new features were added in this update. What's new in Container Update CF193? 9.5 Containers This HCL Digital Experience 9.5 Container Update release includes new releases of Digital Experience 9.5 core Portal and Web Content Manager, Content Composer, Digital Asset Management, and Experience API images. New and updated feature references are detailed here. What's new in Container Update CF192? 9.5 Containers This HCL Digital Experience 9.5 Container Update release includes new releases of Digital Experience 9.5 core Portal and Web Content Manager, Content Composer, Digital Asset Management, and Experience API images. What's new in Container Update CF191? 9.5 Containers This HCL Digital Experience 9.5 Container Update release includes new releases of Digital Experience 9.5 core Portal and Web Content Manager, Content Composer, Digital Asset Management, and Experience API images, that may be used for new deployments only. Upgrading from a previous DX 9.5 Container Release to CF191 is not supported. What's new in Container Update CF19? 9.5 Containers This HCL Digital Experience 9.5 Container Update release includes updated production releases of Digital Experience 9.5 core Portal and Web Content Manager, Content Composer, Digital Asset Management, and Experience API images. New additions include additional guidance to deploy to Google Kubernetes Engine (GKE), Hybrid deployment support, Progressive Web Application delivery, Google Analytics integration, Mobile Preview, DXClient and DXConnect tooling supporting CICD release processes, Kaltura video support, new Web Content Manager REST APIs, new HCL Digital Experience \u2018How To\u2019 videos, and more. What's new in Container Update CF184? 9.5 Containers This HCL Digital Experience 9.5 Container Update release includes updated production releases of Digital Experience 9.5 core Portal and Web Content Manager, Content Composer, Digital Asset Management, and Experience API images. New additions include additional guidance to deploy to Microsoft Azure Kubernetes Service (AKS), new Web Content Manager REST APIs supporting Syndication options, HCL Digital Experience API published to HCL DX GitHub, new HCL Digital Experience \u2018How To\u2019 videos, and more. What's new in Container Update CF183? 9.5 Containers This HCL Digital Experience 9.5 Container Update release includes updated production releases of Digital Experience 9.5 core Portal and Web Content Manager, Content Composer, Digital Asset Management, and Experience API images. New additions include guidance to deploy to Microsoft Azure Kubernetes Service (AKS), new Web Content Manager REST APIs and Search Query examples, guidance to deploy the Remote Search image on Red Hat OpenShift, new HCL Digital Experience \u2018How To\u2019 videos, and more. What's new in Container Update CF182? 9.5 Containers This HCL Digital Experience 9.5 Container Update release includes updated production releases of Digital Experience 9.5 core Portal and Web Content Manager, Content Composer, Digital Asset Management, and Experience API images. This update adds new guidance to minimize downtime when updating container-based deployments with new artifacts, configuration options for Digital Asset Management storage, and more. What's new in Container Update CF181? 9.5 Containers This HCL Digital Experience 9.5 Container Update release includes new Production releases of Content Composer, Digital Asset Management, and Experience API, new WCM REST APIs, guidance to deploy OpenLDAP, Remote Search and Database transfer processes, and more. What's new in CF18? 9.5 Containers This HCL Digital Experience 9.5 Container Update release includes new WCM REST APIs, updated Tech Preview releases of Content Composer and Digital Asset Management, Rich Text Editor and Java Server Faces bridge updates, and more. What's new in Container Update CF173? 9.5 Containers This HCL Digital Experience 9.5 Container Update release include new WCM REST APIs, and Tech Previews for Content Composer and Digital Asset Management, and more. What's new in Container Update CF172? 9.5 Containers The Container Update release include new features and updates for HCL Digital Experience 9.5 container deployments, including DX tool, Support and API updates. What's new in Container Update CF171? 9.5 Containers The Container Update releases include new features and updates for HCL Digital Experience 9.5 container deployments. Parent topic: Latest Combined CF and 9.5 Container Updates","title":"Cumulative Fixes for DX Containers"},{"location":"whatsnew/container_update_releases/#container-update-releases-95","text":"The HCL Digital Experience 9.5 Cumulative Fix and Container Update releases offer new features and software fixes for the HCL Digital Experience 9.5 container releases. Beginning with Container Update release CF196, release updates for both on-premises deployments and container platforms are available. What's new in Container Update CF201? 9.5 Containers This HCL Digital Experience 9.5 Container Update and CF201 release includes updated releases of HCL DX core Portal and Web Content Manager, Content Composer, Digital Asset Management, Experience API, and Design Studio (Beta) components. The release also includes updated CICD release process artifacts, new DX Personalization REST APIs, Updated Helm deployment and logging capacity, LDAP, and environment configuration guidance, also metrics and visualization samples, Script Application updates, new React profile for the DX 8.5 sample Theme, extensibility plugin and sample for Digital Asset Management, and more. What's new in Container Update CF200? 9.5 Containers This HCL Digital Experience 9.5 Container Update and CF200 release includes updated releases of HCL DX core Portal and Web Content Manager, Content Composer, Digital Asset Management, Experience API, Design Studio (Beta), new Helm deployment operations for container deployments and migration from Operator deployments, updated CICD release process artifacts, new DX API and Explorer services for Personalization, Search and User and Groups REST APIs, new Digital Experience 9.5 Demo Packs on HCL Sofy, new \u2018How To\u2019 videos, and more. What's new in Container Update CF199? 9.5 Containers This HCL Digital Experience 9.5 Container Update and CF199 release includes new releases of HCL DX core Portal and Web Content Manager, Content Composer, Digital Asset Management, Experience API, Design Studio (Beta), new Helm deployment operations for container deployments, updated CICD release process artifacts, \u201cHow To\u201d videos, and more. What's new in Container Update CF198? 9.5 Containers This HCL Digital Experience 9.5 Container Update and CF198 release includes new releases of HCL DX core Portal and Web Content Manager, Content Composer, Digital Asset Management, Experience API, Design Studio (Beta), new Helm deployment operations for container deployments, updated CICD release process artifacts, the new Site Manager Custom Layout Editor, HCL Digital Experience Technical Articles, \u2018How To\u2019 videos, and more. What's new in Container Update CF197? 9.5 Containers This HCL Digital Experience 9.5 Container Update and CF197 release includes updated releases of HCL DX core Portal and Web Content Manager, Content Composer, Digital Asset Management and Experience API images, and an updated beta preview release of Design Studio. New and updated feature references are detailed here. What's new in Container Update CF196? 9.5 Containers This HCL Digital Experience 9.5 Container Update release includes new releases of HCL Digital Experience 9.5 core Portal and Web Content Manager, Content Composer, Digital Asset Management, and Experience API images, and a beta preview release of Design Studio. New and updated feature references are detailed here. What's new in Container Update CF195? 9.5 Containers This HCL Digital Experience 9.5 Container Update release includes new releases of Digital Experience 9.5 core Portal and Web Content Manager, Content Composer, Digital Asset Management, and Experience API images. New and updated feature references are detailed here. What's new in Container Update CF194? 9.5 Containers This HCL Digital Experience 9.5 Container Update release includes new releases of Digital Experience 9.5 core Portal and Web Content Manager, Content Composer, Digital Asset Management, and Experience API images. No new features were added in this update. What's new in Container Update CF193? 9.5 Containers This HCL Digital Experience 9.5 Container Update release includes new releases of Digital Experience 9.5 core Portal and Web Content Manager, Content Composer, Digital Asset Management, and Experience API images. New and updated feature references are detailed here. What's new in Container Update CF192? 9.5 Containers This HCL Digital Experience 9.5 Container Update release includes new releases of Digital Experience 9.5 core Portal and Web Content Manager, Content Composer, Digital Asset Management, and Experience API images. What's new in Container Update CF191? 9.5 Containers This HCL Digital Experience 9.5 Container Update release includes new releases of Digital Experience 9.5 core Portal and Web Content Manager, Content Composer, Digital Asset Management, and Experience API images, that may be used for new deployments only. Upgrading from a previous DX 9.5 Container Release to CF191 is not supported. What's new in Container Update CF19? 9.5 Containers This HCL Digital Experience 9.5 Container Update release includes updated production releases of Digital Experience 9.5 core Portal and Web Content Manager, Content Composer, Digital Asset Management, and Experience API images. New additions include additional guidance to deploy to Google Kubernetes Engine (GKE), Hybrid deployment support, Progressive Web Application delivery, Google Analytics integration, Mobile Preview, DXClient and DXConnect tooling supporting CICD release processes, Kaltura video support, new Web Content Manager REST APIs, new HCL Digital Experience \u2018How To\u2019 videos, and more. What's new in Container Update CF184? 9.5 Containers This HCL Digital Experience 9.5 Container Update release includes updated production releases of Digital Experience 9.5 core Portal and Web Content Manager, Content Composer, Digital Asset Management, and Experience API images. New additions include additional guidance to deploy to Microsoft Azure Kubernetes Service (AKS), new Web Content Manager REST APIs supporting Syndication options, HCL Digital Experience API published to HCL DX GitHub, new HCL Digital Experience \u2018How To\u2019 videos, and more. What's new in Container Update CF183? 9.5 Containers This HCL Digital Experience 9.5 Container Update release includes updated production releases of Digital Experience 9.5 core Portal and Web Content Manager, Content Composer, Digital Asset Management, and Experience API images. New additions include guidance to deploy to Microsoft Azure Kubernetes Service (AKS), new Web Content Manager REST APIs and Search Query examples, guidance to deploy the Remote Search image on Red Hat OpenShift, new HCL Digital Experience \u2018How To\u2019 videos, and more. What's new in Container Update CF182? 9.5 Containers This HCL Digital Experience 9.5 Container Update release includes updated production releases of Digital Experience 9.5 core Portal and Web Content Manager, Content Composer, Digital Asset Management, and Experience API images. This update adds new guidance to minimize downtime when updating container-based deployments with new artifacts, configuration options for Digital Asset Management storage, and more. What's new in Container Update CF181? 9.5 Containers This HCL Digital Experience 9.5 Container Update release includes new Production releases of Content Composer, Digital Asset Management, and Experience API, new WCM REST APIs, guidance to deploy OpenLDAP, Remote Search and Database transfer processes, and more. What's new in CF18? 9.5 Containers This HCL Digital Experience 9.5 Container Update release includes new WCM REST APIs, updated Tech Preview releases of Content Composer and Digital Asset Management, Rich Text Editor and Java Server Faces bridge updates, and more. What's new in Container Update CF173? 9.5 Containers This HCL Digital Experience 9.5 Container Update release include new WCM REST APIs, and Tech Previews for Content Composer and Digital Asset Management, and more. What's new in Container Update CF172? 9.5 Containers The Container Update release include new features and updates for HCL Digital Experience 9.5 container deployments, including DX tool, Support and API updates. What's new in Container Update CF171? 9.5 Containers The Container Update releases include new features and updates for HCL Digital Experience 9.5 container deployments. Parent topic: Latest Combined CF and 9.5 Container Updates","title":"Container Update releases 9.5"},{"location":"whatsnew/new_cf17/","text":"What's new in CF17? 9.5 Combined Cumulative Fix (CF17) includes new software fixes for the latest version of HCL Digital Experience. Go to the HCL Software Support Site for the list of software fixes for HCL Digital Experience. Product software can be accessed from the HCL Software Licensing Portal . Go to this Step-by-step guide to downloading DX products and accessing Customer Support for more information. Also, see the following link for Portal maintenance guidance: HCL Digital Experience Roadmap: Applying maintenance Parent topic: Latest Combined CF and 9.5 Container Updates","title":"What's new in CF17? 9.5"},{"location":"whatsnew/new_cf17/#whats-new-in-cf17-95","text":"Combined Cumulative Fix (CF17) includes new software fixes for the latest version of HCL Digital Experience. Go to the HCL Software Support Site for the list of software fixes for HCL Digital Experience. Product software can be accessed from the HCL Software Licensing Portal . Go to this Step-by-step guide to downloading DX products and accessing Customer Support for more information. Also, see the following link for Portal maintenance guidance: HCL Digital Experience Roadmap: Applying maintenance Parent topic: Latest Combined CF and 9.5 Container Updates","title":"What's new in CF17? 9.5"},{"location":"whatsnew/new_cf171/","text":"What's new in Container Update CF171? The Container Update releases include new features and updates for HCL Digital Experience 9.5 container deployments. Password override in Docker Added option to override password in Docker. See Docker deployment . Password override in OpenShift Added option to override password in OpenShift. See OpenShift deployment . Support for Kubernetes as verified in Amazon Elastic Container Service for Kubernetes (EKS) Added support for Kubernetes on AWS EKS. See Deploy HCL Digital Experience 9.5 Container to Amazon EKS . Support for Auto-scaling and Route configuration Added support for auto-scaling based on available CPU and memory utilization and route configuration. See Customizing the container deployment . Downloading DX products and accessing Customer Support You can go to the HCL Software Licensing Portal to access and download product software. See the Step-by-step guide to downloading DX products and accessing Customer Support for more information. Parent topic: Container Update releases 9.5","title":"What's new in Container Update CF171?"},{"location":"whatsnew/new_cf171/#whats-new-in-container-update-cf171","text":"The Container Update releases include new features and updates for HCL Digital Experience 9.5 container deployments.","title":"What's new in Container Update CF171?"},{"location":"whatsnew/new_cf171/#password-override-in-docker","text":"Added option to override password in Docker. See Docker deployment .","title":"Password override in Docker"},{"location":"whatsnew/new_cf171/#password-override-in-openshift","text":"Added option to override password in OpenShift. See OpenShift deployment .","title":"Password override in OpenShift"},{"location":"whatsnew/new_cf171/#support-for-kubernetes-as-verified-in-amazon-elastic-container-service-for-kubernetes-eks","text":"Added support for Kubernetes on AWS EKS. See Deploy HCL Digital Experience 9.5 Container to Amazon EKS .","title":"Support for Kubernetes as verified in Amazon Elastic Container Service for Kubernetes (EKS)"},{"location":"whatsnew/new_cf171/#support-for-auto-scaling-and-route-configuration","text":"Added support for auto-scaling based on available CPU and memory utilization and route configuration. See Customizing the container deployment .","title":"Support for Auto-scaling and Route configuration"},{"location":"whatsnew/new_cf171/#downloading-dx-products-and-accessing-customer-support","text":"You can go to the HCL Software Licensing Portal to access and download product software. See the Step-by-step guide to downloading DX products and accessing Customer Support for more information. Parent topic: Container Update releases 9.5","title":"Downloading DX products and accessing Customer Support"},{"location":"whatsnew/new_cf172/","text":"What's new in Container Update CF172? The Container Update release include new features and updates for HCL Digital Experience 9.5 container deployments, including DX tool, Support and API updates. Web Content Manager (WCM) Support Tools The HCL WCM Support Tools portlet is provided to investigate and analyze information related to the WCM Java Content Repository (JCR) nodes. The WCM Support Tools Portlet is provided in the HCL Digital Experience 9.5 CF172 Container Update release, and is accessible from the standard Digital Experience administration panel in the CF172 release. See HCL Web Content Manager Support Tools for details. New Web Content Query Parameter APIs New Web Content Query Parameter APIs are added in HCL Digital Experience 9.5 CF172. See REST Query service for web content for details. New Enhanced Content Template API The Enhanced Web Content Manager Content Template API adds the ability to retrieve the configuration details of content template elements. See How to retrieve the settings of the elements for content templates by using REST for details. Updated HCL Digital Experience 9.5 platform support statements Read the updates to HCL Digital Experience 9.5 detailed system support statements published to the HCL Digital Experience Support site. See This HCL Software Support article for details. Downloading DX products and accessing Customer Support You can go to the HCL Software Licensing Portal to access and download product software. See the Step-by-step guide to downloading DX products and accessing Customer Support for more information. Parent topic: Container Update releases 9.5","title":"What's new in Container Update CF172?"},{"location":"whatsnew/new_cf172/#whats-new-in-container-update-cf172","text":"The Container Update release include new features and updates for HCL Digital Experience 9.5 container deployments, including DX tool, Support and API updates.","title":"What's new in Container Update CF172?"},{"location":"whatsnew/new_cf172/#web-content-manager-wcm-support-tools","text":"The HCL WCM Support Tools portlet is provided to investigate and analyze information related to the WCM Java Content Repository (JCR) nodes. The WCM Support Tools Portlet is provided in the HCL Digital Experience 9.5 CF172 Container Update release, and is accessible from the standard Digital Experience administration panel in the CF172 release. See HCL Web Content Manager Support Tools for details.","title":"Web Content Manager (WCM) Support Tools"},{"location":"whatsnew/new_cf172/#new-web-content-query-parameter-apis","text":"New Web Content Query Parameter APIs are added in HCL Digital Experience 9.5 CF172. See REST Query service for web content for details.","title":"New Web Content Query Parameter APIs"},{"location":"whatsnew/new_cf172/#new-enhanced-content-template-api","text":"The Enhanced Web Content Manager Content Template API adds the ability to retrieve the configuration details of content template elements. See How to retrieve the settings of the elements for content templates by using REST for details.","title":"New Enhanced Content Template API"},{"location":"whatsnew/new_cf172/#updated-hcl-digital-experience-95-platform-support-statements","text":"Read the updates to HCL Digital Experience 9.5 detailed system support statements published to the HCL Digital Experience Support site. See This HCL Software Support article for details.","title":"Updated HCL Digital Experience 9.5 platform support statements"},{"location":"whatsnew/new_cf172/#downloading-dx-products-and-accessing-customer-support","text":"You can go to the HCL Software Licensing Portal to access and download product software. See the Step-by-step guide to downloading DX products and accessing Customer Support for more information. Parent topic: Container Update releases 9.5","title":"Downloading DX products and accessing Customer Support"},{"location":"whatsnew/new_cf173/","text":"What's new in Container Update CF173? This HCL Digital Experience 9.5 Container Update release include new WCM REST APIs, and Tech Previews for Content Composer and Digital Asset Management, and more. Web Content Manager Mirror syndication - Disable full build option An option to disable the rebuild with the WCM mirror syndication option is now available. This option can be set using the WCM Configuration service on the syndicator. See Manually syndicating items . New WCM Restore Version REST API The Restore version API supports restoring content versions to a previous level. See How to use REST with Versions . New Enhanced WCM Content Template API Element Configuration The Enhanced Content Template API Element Configuration Updates allows the configuration of template elements to be updated. See How to set default content values for content templates by using REST . New WCM Export Digital Asset Management references API The Web Content Manager Export DAM references API REST service can be used to retrieve content or components with references to externally managed resources, using the Digital Asset Manager plugin. See How to use REST with content items . New Experience API samples Two new samples are provided for use with the HCL Digital Experience 9.5 Experience API, supporting Sample login and content update process flow, and Get roles with authentication functions. See the Experience API Sample Calls . New HCL Content Composer \u2013 Tech Preview in HCL Digital Experience 9.5 CF173 Content Composer delivers simplified processes for creating and managing Digital Experience site content. Users can access a Tech Preview of the Content Composer features in HCL Digital Experience 9.5 Container Update CF173 and higher releases. See HCL Digital Experience 9.5 CF173 Content Composer \u2013 Tech Preview for details. New Digital Asset Management \u2013 Tech Preview in HCL Digital Experience 9.5 CF173 Digital Asset Management delivers a central platform to store and include rich media assets in Digital Experience site content to present engaging, consistently branded experiences across digital channels. Users can access a Tech Preview of the Digital Asset Management features in HCL Digital Experience 9.5 Container Update CF173 and higher releases. See HCL Digital Experience 9.5 CF173 Digital Asset Management \u2013 Tech Preview for details. Downloading DX products and accessing Customer Support The HCL Digital Experience 9.5 detailed system support statements are updated and published on the HCL Digital Experience Support site. You can go to the HCL Software Licensing Portal to access and download product software. For more information, see the Step-by-step guide to downloading DX products and accessing Customer Support . Parent topic: Container Update releases 9.5","title":"What's new in Container Update CF173?"},{"location":"whatsnew/new_cf173/#whats-new-in-container-update-cf173","text":"This HCL Digital Experience 9.5 Container Update release include new WCM REST APIs, and Tech Previews for Content Composer and Digital Asset Management, and more.","title":"What's new in Container Update CF173?"},{"location":"whatsnew/new_cf173/#web-content-manager-mirror-syndication-disable-full-build-option","text":"An option to disable the rebuild with the WCM mirror syndication option is now available. This option can be set using the WCM Configuration service on the syndicator. See Manually syndicating items .","title":"Web Content Manager Mirror syndication - Disable full build option"},{"location":"whatsnew/new_cf173/#new-wcm-restore-version-rest-api","text":"The Restore version API supports restoring content versions to a previous level. See How to use REST with Versions .","title":"New WCM Restore Version REST API"},{"location":"whatsnew/new_cf173/#new-enhanced-wcm-content-template-api-element-configuration","text":"The Enhanced Content Template API Element Configuration Updates allows the configuration of template elements to be updated. See How to set default content values for content templates by using REST .","title":"New Enhanced WCM Content Template API Element Configuration"},{"location":"whatsnew/new_cf173/#new-wcm-export-digital-asset-management-references-api","text":"The Web Content Manager Export DAM references API REST service can be used to retrieve content or components with references to externally managed resources, using the Digital Asset Manager plugin. See How to use REST with content items .","title":"New WCM Export Digital Asset Management references API"},{"location":"whatsnew/new_cf173/#new-experience-api-samples","text":"Two new samples are provided for use with the HCL Digital Experience 9.5 Experience API, supporting Sample login and content update process flow, and Get roles with authentication functions. See the Experience API Sample Calls .","title":"New Experience API samples"},{"location":"whatsnew/new_cf173/#new-hcl-content-composer-tech-preview-in-hcl-digital-experience-95-cf173","text":"Content Composer delivers simplified processes for creating and managing Digital Experience site content. Users can access a Tech Preview of the Content Composer features in HCL Digital Experience 9.5 Container Update CF173 and higher releases. See HCL Digital Experience 9.5 CF173 Content Composer \u2013 Tech Preview for details.","title":"New HCL Content Composer \u2013 Tech Preview in HCL Digital Experience 9.5 CF173"},{"location":"whatsnew/new_cf173/#new-digital-asset-management-tech-preview-in-hcl-digital-experience-95-cf173","text":"Digital Asset Management delivers a central platform to store and include rich media assets in Digital Experience site content to present engaging, consistently branded experiences across digital channels. Users can access a Tech Preview of the Digital Asset Management features in HCL Digital Experience 9.5 Container Update CF173 and higher releases. See HCL Digital Experience 9.5 CF173 Digital Asset Management \u2013 Tech Preview for details.","title":"New Digital Asset Management \u2013 Tech Preview in HCL Digital Experience 9.5 CF173"},{"location":"whatsnew/new_cf173/#downloading-dx-products-and-accessing-customer-support","text":"The HCL Digital Experience 9.5 detailed system support statements are updated and published on the HCL Digital Experience Support site. You can go to the HCL Software Licensing Portal to access and download product software. For more information, see the Step-by-step guide to downloading DX products and accessing Customer Support . Parent topic: Container Update releases 9.5","title":"Downloading DX products and accessing Customer Support"},{"location":"whatsnew/new_cf18/","text":"What's new in CF18? This HCL Digital Experience 9.5 Container Update release includes new WCM REST APIs, updated Tech Preview releases of Content Composer and Digital Asset Management, Rich Text Editor and Java Server Faces bridge updates, and more. Go to the HCL Software Support Site for the list of software fixes, including CF18. See What's New in CF18 for HCL Digital Experience for a list of updates in this release. Product software can be accessed from the HCL Software Licensing Portal . Go to this Step-by-step guide to downloading DX products and accessing Customer Support for more information. JavaServer Faces (JSF) Bridge With the HCL Digital Experience CF18 Container and CF update, an updated JSF Portlet Bridge is introduced and installed in the HCL Digital Experience software. Customers installing HCL Digital Experience 8.5, 9, or 9.5 CF18 or Container Update release CF18, and using an IBM WebSphere Application Server Network Deployment version later than 8.5.5.17 or 9.0.5.2 can utilize the new JSF Portlet Bridge. See JavaServer Faces implementation for more information. Apply Content Template REST API The Apply Content Template API allows a developer to apply a content template to a set of specific content items or all content items of a certain template. It is equivalent to the functionality in the user interface. See How to set default content values for content templates by using REST for details. Enhanced Content Template API The Enhanced Web Content Manager Content Template API adds the ability to retrieve the configuration details of content template elements. See How to retrieve the settings of the elements for content templates by using REST for details. Rich Text Editor Textbox I/O Updates Updates are provided for the Textbox I/O Rich Text Editor, requiring use of Java 8. See Rich text editor toolbar configuration options for details. Sample Guidance to set Storage Class and Volume to deploy HCL Digital Experience 9.5 Containers to Amazon Elastic Kubernetes Service (EKS) and Red Hat OpenShift Additional \"Sample Storage Class and Volume\" guidance is available to HCL Digital Experience 9.5 container administrators. See Sample Storage Class and Volume topic for details. HCL Content Composer \u2013 Tech Preview for HCL Digital Experience 9.5 CF173 or later Content Composer delivers simplified processes for creating and managing Digital Experience site content. Users can access a Tech Preview of the Content Composer features in HCL Digital Experience 9.5 Container Update CF173 and higher releases. See HCL Digital Experience 9.5 Content Composer \u2013 Tech Preview for details. Digital Asset Management \u2013 Tech Preview for HCL Digital Experience 9.5 CF173 or later Digital Asset Management delivers a central platform to store and include rich media assets in Digital Experience site content to present engaging, consistently branded experiences across digital channels. Users can access a Tech Preview of the Digital Asset Management features in HCL Digital Experience 9.5 Container Update CF173 and higher releases. See HCL Digital Experience 9.5 Digital Asset Management \u2013 Tech Preview for details. Updated HCL Digital Experience 9.5 platform support statements See the updates to the HCL Digital Experience 9.5 detailed system support statements published to the HCL Digital Experience Support site. Parent topic: Container Update releases 9.5","title":"What's new in CF18?"},{"location":"whatsnew/new_cf18/#whats-new-in-cf18","text":"This HCL Digital Experience 9.5 Container Update release includes new WCM REST APIs, updated Tech Preview releases of Content Composer and Digital Asset Management, Rich Text Editor and Java Server Faces bridge updates, and more. Go to the HCL Software Support Site for the list of software fixes, including CF18. See What's New in CF18 for HCL Digital Experience for a list of updates in this release. Product software can be accessed from the HCL Software Licensing Portal . Go to this Step-by-step guide to downloading DX products and accessing Customer Support for more information.","title":"What's new in CF18?"},{"location":"whatsnew/new_cf18/#javaserver-faces-jsf-bridge","text":"With the HCL Digital Experience CF18 Container and CF update, an updated JSF Portlet Bridge is introduced and installed in the HCL Digital Experience software. Customers installing HCL Digital Experience 8.5, 9, or 9.5 CF18 or Container Update release CF18, and using an IBM WebSphere Application Server Network Deployment version later than 8.5.5.17 or 9.0.5.2 can utilize the new JSF Portlet Bridge. See JavaServer Faces implementation for more information.","title":"JavaServer Faces (JSF) Bridge"},{"location":"whatsnew/new_cf18/#apply-content-template-rest-api","text":"The Apply Content Template API allows a developer to apply a content template to a set of specific content items or all content items of a certain template. It is equivalent to the functionality in the user interface. See How to set default content values for content templates by using REST for details.","title":"Apply Content Template REST API"},{"location":"whatsnew/new_cf18/#enhanced-content-template-api","text":"The Enhanced Web Content Manager Content Template API adds the ability to retrieve the configuration details of content template elements. See How to retrieve the settings of the elements for content templates by using REST for details.","title":"Enhanced Content Template API"},{"location":"whatsnew/new_cf18/#rich-text-editor-textbox-io-updates","text":"Updates are provided for the Textbox I/O Rich Text Editor, requiring use of Java 8. See Rich text editor toolbar configuration options for details.","title":"Rich Text Editor Textbox I/O Updates"},{"location":"whatsnew/new_cf18/#sample-guidance-to-set-storage-class-and-volume-to-deploy-hcl-digital-experience-95-containers-to-amazon-elastic-kubernetes-service-eks-and-red-hat-openshift","text":"Additional \"Sample Storage Class and Volume\" guidance is available to HCL Digital Experience 9.5 container administrators. See Sample Storage Class and Volume topic for details.","title":"Sample Guidance to set Storage Class and Volume to deploy HCL Digital Experience 9.5 Containers to Amazon Elastic Kubernetes Service (EKS) and Red Hat OpenShift"},{"location":"whatsnew/new_cf18/#hcl-content-composer-tech-preview-for-hcl-digital-experience-95-cf173-or-later","text":"Content Composer delivers simplified processes for creating and managing Digital Experience site content. Users can access a Tech Preview of the Content Composer features in HCL Digital Experience 9.5 Container Update CF173 and higher releases. See HCL Digital Experience 9.5 Content Composer \u2013 Tech Preview for details.","title":"HCL Content Composer \u2013 Tech Preview for HCL Digital Experience 9.5 CF173 or later"},{"location":"whatsnew/new_cf18/#digital-asset-management-tech-preview-for-hcl-digital-experience-95-cf173-or-later","text":"Digital Asset Management delivers a central platform to store and include rich media assets in Digital Experience site content to present engaging, consistently branded experiences across digital channels. Users can access a Tech Preview of the Digital Asset Management features in HCL Digital Experience 9.5 Container Update CF173 and higher releases. See HCL Digital Experience 9.5 Digital Asset Management \u2013 Tech Preview for details.","title":"Digital Asset Management \u2013 Tech Preview for HCL Digital Experience 9.5 CF173 or later"},{"location":"whatsnew/new_cf18/#updated-hcl-digital-experience-95-platform-support-statements","text":"See the updates to the HCL Digital Experience 9.5 detailed system support statements published to the HCL Digital Experience Support site. Parent topic: Container Update releases 9.5","title":"Updated HCL Digital Experience 9.5 platform support statements"},{"location":"whatsnew/new_cf181/","text":"What's new in Container Update CF181? This HCL Digital Experience 9.5 Container Update release includes new Production releases of Content Composer, Digital Asset Management, and Experience API, new WCM REST APIs, guidance to deploy OpenLDAP, Remote Search and Database transfer processes, and more. Go to the HCL Software Support Site for the list of software fixes, including Container Update releases. Product software can be accessed from the HCL Software Licensing Portal . Go to this Step-by-step guide to downloading DX products and accessing Customer Support for more information. Content Composer Content Composer delivers simplified processes for creating and managing Digital Experience site content. Users can work with Content Composer features in HCL Digital Experience 9.5 Container Update CF181 and higher releases. See HCL Digital Experience 9.5 Content Composer for details. Digital Asset Management Digital Asset Management delivers a central platform to store and include rich media assets in Digital Experience site content to present engaging, consistently branded experiences across digital channels. Users can access the Digital Asset Management features in HCL Digital Experience 9.5 Container Update CF181 and higher releases. See HCL Digital Experience 9.5 Digital Asset Management for details. Experience API The HCL Experience API is a set of OpenAPI compliant REST APIs available for customers deploying HCL Digital Experience 9.5 containers on supported Kubernetes platforms. It supports the integration and management of HCL Digital Experience content and functionality to any digital channel using any front-end development framework. The HCL Experience API includes REST APIs that serve as a wrapper around previously published HCL Digital Experience HTTP based APIs. See HCL Experience API for details. OpenLDAP Container integration OpenLDAP Software is an open source implementation of the Lightweight Directory Access Protocol. The HCL Digital Experience 9.5 Container Update release CF181 and higher includes an OpenLDAP container and a customization of the operator to deploy and configure the LDAP container to the HCL Digital Experience 9.5 container deployment. See Configure the OpenLDAP container image to the HCL Digital Experience 9.5 Container Deployment for details. Transfer default Container database to IBM DB2 HCL Digital Experience 9.5 installs a copy of Derby as the default database. HCL Digital Experience administrators can apply guidance to transfer the default database configuration to IBM DB2, if preferred for use as the relational database for Digital Experience 9.5 Container deployment data. See Transfer Digital Experience 9.5 Container default database to IBM DB2 for details. Remote Search services Docker deployment To support search services when deployed to Docker, Digital Experience administrators can configure Remote search services. This will require some different setup and configuration steps than used to set up remote search on a non-Docker container platform. See Deploy Remote Search services on Docker for details. New Digital Experience WCM Workflow REST APIs Two new WCM REST APIs are added to handle Process Now and Remove Workflow from an item functionality. See How to use REST with drafts and workflows for details. New Web Content Manager Reference REST API The new WCM Content Manager Reference REST API can be used by developers to find references to a Web Content or Digital Asset Management item identified by its UUID. See How to use REST with content items for details. New Web Content Text Search REST API The Text Search REST API Content Authors search for free form text in the Web Content Manager JCR. It is equivalent to the functionality in the Web Content Manager user interface. See REST Query service for web content - Query parameters for details. New Digital Experience Core Configuration REST API The Digital Experience Core Configuration API allows developers to retrieve Digital Experience deployment configuration settings. See Generic reading by using REST services for Web Content Manager for details. Web Developer Toolkit The Web Developer toolkit for HCL Digital Experience provides the ability to sync themes, content and script portlets (also known as Script Applications). It is available on the HCL Digital Experience GitHub repository. See Web Developer Toolkit for details. Parent topic: Container Update releases 9.5","title":"What's new in Container Update CF181?"},{"location":"whatsnew/new_cf181/#whats-new-in-container-update-cf181","text":"This HCL Digital Experience 9.5 Container Update release includes new Production releases of Content Composer, Digital Asset Management, and Experience API, new WCM REST APIs, guidance to deploy OpenLDAP, Remote Search and Database transfer processes, and more. Go to the HCL Software Support Site for the list of software fixes, including Container Update releases. Product software can be accessed from the HCL Software Licensing Portal . Go to this Step-by-step guide to downloading DX products and accessing Customer Support for more information.","title":"What's new in Container Update CF181?"},{"location":"whatsnew/new_cf181/#content-composer","text":"Content Composer delivers simplified processes for creating and managing Digital Experience site content. Users can work with Content Composer features in HCL Digital Experience 9.5 Container Update CF181 and higher releases. See HCL Digital Experience 9.5 Content Composer for details.","title":"Content Composer"},{"location":"whatsnew/new_cf181/#digital-asset-management","text":"Digital Asset Management delivers a central platform to store and include rich media assets in Digital Experience site content to present engaging, consistently branded experiences across digital channels. Users can access the Digital Asset Management features in HCL Digital Experience 9.5 Container Update CF181 and higher releases. See HCL Digital Experience 9.5 Digital Asset Management for details.","title":"Digital Asset Management"},{"location":"whatsnew/new_cf181/#experience-api","text":"The HCL Experience API is a set of OpenAPI compliant REST APIs available for customers deploying HCL Digital Experience 9.5 containers on supported Kubernetes platforms. It supports the integration and management of HCL Digital Experience content and functionality to any digital channel using any front-end development framework. The HCL Experience API includes REST APIs that serve as a wrapper around previously published HCL Digital Experience HTTP based APIs. See HCL Experience API for details.","title":"Experience API"},{"location":"whatsnew/new_cf181/#openldap-container-integration","text":"OpenLDAP Software is an open source implementation of the Lightweight Directory Access Protocol. The HCL Digital Experience 9.5 Container Update release CF181 and higher includes an OpenLDAP container and a customization of the operator to deploy and configure the LDAP container to the HCL Digital Experience 9.5 container deployment. See Configure the OpenLDAP container image to the HCL Digital Experience 9.5 Container Deployment for details.","title":"OpenLDAP Container integration"},{"location":"whatsnew/new_cf181/#transfer-default-container-database-to-ibm-db2","text":"HCL Digital Experience 9.5 installs a copy of Derby as the default database. HCL Digital Experience administrators can apply guidance to transfer the default database configuration to IBM DB2, if preferred for use as the relational database for Digital Experience 9.5 Container deployment data. See Transfer Digital Experience 9.5 Container default database to IBM DB2 for details.","title":"Transfer default Container database to IBM DB2"},{"location":"whatsnew/new_cf181/#remote-search-services-docker-deployment","text":"To support search services when deployed to Docker, Digital Experience administrators can configure Remote search services. This will require some different setup and configuration steps than used to set up remote search on a non-Docker container platform. See Deploy Remote Search services on Docker for details.","title":"Remote Search services Docker deployment"},{"location":"whatsnew/new_cf181/#new-digital-experience-wcm-workflow-rest-apis","text":"Two new WCM REST APIs are added to handle Process Now and Remove Workflow from an item functionality. See How to use REST with drafts and workflows for details.","title":"New Digital Experience WCM Workflow REST APIs"},{"location":"whatsnew/new_cf181/#new-web-content-manager-reference-rest-api","text":"The new WCM Content Manager Reference REST API can be used by developers to find references to a Web Content or Digital Asset Management item identified by its UUID. See How to use REST with content items for details.","title":"New Web Content Manager Reference REST API"},{"location":"whatsnew/new_cf181/#new-web-content-text-search-rest-api","text":"The Text Search REST API Content Authors search for free form text in the Web Content Manager JCR. It is equivalent to the functionality in the Web Content Manager user interface. See REST Query service for web content - Query parameters for details.","title":"New Web Content Text Search REST API"},{"location":"whatsnew/new_cf181/#new-digital-experience-core-configuration-rest-api","text":"The Digital Experience Core Configuration API allows developers to retrieve Digital Experience deployment configuration settings. See Generic reading by using REST services for Web Content Manager for details.","title":"New Digital Experience Core Configuration REST API"},{"location":"whatsnew/new_cf181/#web-developer-toolkit","text":"The Web Developer toolkit for HCL Digital Experience provides the ability to sync themes, content and script portlets (also known as Script Applications). It is available on the HCL Digital Experience GitHub repository. See Web Developer Toolkit for details. Parent topic: Container Update releases 9.5","title":"Web Developer Toolkit"},{"location":"whatsnew/new_cf_95/","text":"Latest Combined CF and 9.5 Container Updates Learn what's new in the HCL Digital Experience Combined Cumulative Fix and HCL Digital Experience Version 9.5 Container Update releases. What's new in CF201? Combined Cumulative Fix (CF201) includes new features and software fixes for the latest version of HCL Digital Experience. Release updates for both on-premises platforms and container deployments are available. What's new in CF200? Combined Cumulative Fix (CF200) includes new features and software fixes for the latest version of HCL Digital Experience. Release updates for both on-premises platforms and container deployments are available. What's new in CF199? Combined Cumulative Fix (CF199) includes new features and software fixes for the latest version of HCL Digital Experience. Release updates for both on-premises platforms and container deployments are available. What's new in CF198? Combined Cumulative Fix (CF198) includes new features and software fixes for the latest version of HCL Digital Experience. Release updates for both on-premises platforms and container deployments are available. What's new in CF197? Combined Cumulative Fix (CF197) includes new features and software fixes for the latest version of HCL Digital Experience. Release updates for both on \u2013 premises platforms and container deployments are available. What's new in CF196? Combined Cumulative Fix (CF196) includes new features and software fixes for the latest version of HCL Digital Experience. Beginning with CF19 and Container Update release CF196, release updates for both on\u2013premises platforms and container deployments will be available. What's new in CF19? Combined Cumulative Fix (CF19) includes new features and software fixes for the latest version of HCL Digital Experience. What's new in CF18? 9.5 This HCL Digital Experience 9.5 CF18 release includes new WCM REST APIs, updated releases of Content Composer and Digital Asset Management Tech Preview releases, Rich Text Editor and JavaServer Faces bridge updates, and more. What's new in CF17? 9.5 Combined Cumulative Fix (CF17) includes new software fixes for the latest version of HCL Digital Experience. Container Update releases 9.5 The HCL Digital Experience 9.5 Cumulative Fix and Container Update releases offer new features and software fixes for the HCL Digital Experience 9.5 container releases. Beginning with Container Update release CF196, release updates for both on-premises deployments and container platforms are available. Parent topic: What's new in HCL Digital Experience?","title":"Latest Combined CF and 9.5 Container Updates"},{"location":"whatsnew/new_cf_95/#latest-combined-cf-and-95-container-updates","text":"Learn what's new in the HCL Digital Experience Combined Cumulative Fix and HCL Digital Experience Version 9.5 Container Update releases. What's new in CF201? Combined Cumulative Fix (CF201) includes new features and software fixes for the latest version of HCL Digital Experience. Release updates for both on-premises platforms and container deployments are available. What's new in CF200? Combined Cumulative Fix (CF200) includes new features and software fixes for the latest version of HCL Digital Experience. Release updates for both on-premises platforms and container deployments are available. What's new in CF199? Combined Cumulative Fix (CF199) includes new features and software fixes for the latest version of HCL Digital Experience. Release updates for both on-premises platforms and container deployments are available. What's new in CF198? Combined Cumulative Fix (CF198) includes new features and software fixes for the latest version of HCL Digital Experience. Release updates for both on-premises platforms and container deployments are available. What's new in CF197? Combined Cumulative Fix (CF197) includes new features and software fixes for the latest version of HCL Digital Experience. Release updates for both on \u2013 premises platforms and container deployments are available. What's new in CF196? Combined Cumulative Fix (CF196) includes new features and software fixes for the latest version of HCL Digital Experience. Beginning with CF19 and Container Update release CF196, release updates for both on\u2013premises platforms and container deployments will be available. What's new in CF19? Combined Cumulative Fix (CF19) includes new features and software fixes for the latest version of HCL Digital Experience. What's new in CF18? 9.5 This HCL Digital Experience 9.5 CF18 release includes new WCM REST APIs, updated releases of Content Composer and Digital Asset Management Tech Preview releases, Rich Text Editor and JavaServer Faces bridge updates, and more. What's new in CF17? 9.5 Combined Cumulative Fix (CF17) includes new software fixes for the latest version of HCL Digital Experience. Container Update releases 9.5 The HCL Digital Experience 9.5 Cumulative Fix and Container Update releases offer new features and software fixes for the HCL Digital Experience 9.5 container releases. Beginning with Container Update release CF196, release updates for both on-premises deployments and container platforms are available. Parent topic: What's new in HCL Digital Experience?","title":"Latest Combined CF and 9.5 Container Updates"},{"location":"whatsnew/newcf182/","text":"What's new in Container Update CF182? This HCL Digital Experience 9.5 Container Update release includes updated production releases of Digital Experience 9.5 core Portal and Web Content Manager, Content Composer, Digital Asset Management, and Experience API images. This update adds new guidance to minimize downtime when updating container-based deployments with new artifacts, configuration options for Digital Asset Management storage, and more. Go to the HCL Software Support Site for the list of software fixes, including Container Update releases. Product software can be accessed from the HCL Software Licensing Portal . Go to this Step-by-step guide to downloading DX products and accessing Customer Support for more information. Deploy HCL DX 9.5 Container updates with minimal operations downtime This topic provides guidance to update artifacts in HCL Digital Experience 9.5 container deployments while minimizing operations downtime, and notes how processes and tools to support these efforts differ across Kubernetes container-based and non-Kubernetes HCL Digital Experience platform deployments. See Deploying HCL DX 9.5 Container artifact updates with minimal operations downtime for details. Optional Digital Asset Management Storage Configuration Settings This topic outlines optional configuration steps to tune Digital Asset Management storage services Storage Class and Volume. See Optional Digital Asset Management Storage Configuration Settings for details. Parent topic: Container Update releases 9.5","title":"What's new in Container Update CF182?"},{"location":"whatsnew/newcf182/#whats-new-in-container-update-cf182","text":"This HCL Digital Experience 9.5 Container Update release includes updated production releases of Digital Experience 9.5 core Portal and Web Content Manager, Content Composer, Digital Asset Management, and Experience API images. This update adds new guidance to minimize downtime when updating container-based deployments with new artifacts, configuration options for Digital Asset Management storage, and more. Go to the HCL Software Support Site for the list of software fixes, including Container Update releases. Product software can be accessed from the HCL Software Licensing Portal . Go to this Step-by-step guide to downloading DX products and accessing Customer Support for more information.","title":"What's new in Container Update CF182?"},{"location":"whatsnew/newcf182/#deploy-hcl-dx-95-container-updates-with-minimal-operations-downtime","text":"This topic provides guidance to update artifacts in HCL Digital Experience 9.5 container deployments while minimizing operations downtime, and notes how processes and tools to support these efforts differ across Kubernetes container-based and non-Kubernetes HCL Digital Experience platform deployments. See Deploying HCL DX 9.5 Container artifact updates with minimal operations downtime for details.","title":"Deploy HCL DX 9.5 Container updates with minimal operations downtime"},{"location":"whatsnew/newcf182/#optional-digital-asset-management-storage-configuration-settings","text":"This topic outlines optional configuration steps to tune Digital Asset Management storage services Storage Class and Volume. See Optional Digital Asset Management Storage Configuration Settings for details. Parent topic: Container Update releases 9.5","title":"Optional Digital Asset Management Storage Configuration Settings"},{"location":"whatsnew/newcf183/","text":"What's new in Container Update CF183? This HCL Digital Experience 9.5 Container Update release includes updated production releases of Digital Experience 9.5 core Portal and Web Content Manager, Content Composer, Digital Asset Management, and Experience API images. New additions include guidance to deploy to Microsoft Azure Kubernetes Service (AKS), new Web Content Manager REST APIs and Search Query examples, guidance to deploy the Remote Search image on Red Hat OpenShift, new HCL Digital Experience \u2018How To\u2019 videos, and more. Go to the HCL Software Support Site for the list of software fixes, including Container Update release CF183. Product software can be accessed from the HCL Software Licensing Portal . Go to this Step-by-step guide to downloading DX products and accessing Customer Support for more information. The latest Software Requirements and Updates supporting HCL Digital Experience solutions may be accessed from the HCL Support pages, HCL Digital Experience V9.5, V9.0, and V8.5 detailed system requirements topic. Deploy HCL DX 9.5 Container CF182 or higher to Microsoft Azure Kubernetes Service (AKS) Learn how to deploy HCL Digital Experience (DX) 9.5 CF182 and higher container releases along with Ambassador to Kubernetes, as verified in Microsoft Azure Kubernetes Service (AKS). See the HCL Digital Experience 9.5 Deployment and Deploy HCL Digital Experience 9.5 Container to Microsoft Azure Kubernetes Service (AKS) topics for more information. Web Content Manager Lock/Unlock API The Web Content Manager Lock/Unlock API lets you lock and unlock WCM content components, authoring templates, and item. It can also extend the WCM Query API. See the Web Content Manager Lock/Unlock AP I topic for more information. Content Template Create/Update Option Element Selection API The Web Content Manager Create/Update Option Element Selection API lets you create or update an Option Selection Element in a Content Template. See the Create or update an Option Selection Element topic for more information. Search Component Results Display examples A search element defines the layout of a form that is used to display search results. See the Search Component Results Display topic for examples of how to design your search results. New HCL Digital Experience \u2018How To\u2019 Videos Take advantage of new step by step guidance for HCL Digital Experience practitioners presented in several new videos. See the following HCL Digital Experience Help Center topics: Remote Search Service Transfer HCL Digital Experience 9.5 Container default database to IBM DB2 Create a web content library Virtual portals Backup and restore Configuration Wizard Combined Cumulative Fix Install Rich text editor toolbar configuration options Data collection and symptom analysis Parent topic: Container Update releases 9.5","title":"What's new in Container Update CF183?"},{"location":"whatsnew/newcf183/#whats-new-in-container-update-cf183","text":"This HCL Digital Experience 9.5 Container Update release includes updated production releases of Digital Experience 9.5 core Portal and Web Content Manager, Content Composer, Digital Asset Management, and Experience API images. New additions include guidance to deploy to Microsoft Azure Kubernetes Service (AKS), new Web Content Manager REST APIs and Search Query examples, guidance to deploy the Remote Search image on Red Hat OpenShift, new HCL Digital Experience \u2018How To\u2019 videos, and more. Go to the HCL Software Support Site for the list of software fixes, including Container Update release CF183. Product software can be accessed from the HCL Software Licensing Portal . Go to this Step-by-step guide to downloading DX products and accessing Customer Support for more information. The latest Software Requirements and Updates supporting HCL Digital Experience solutions may be accessed from the HCL Support pages, HCL Digital Experience V9.5, V9.0, and V8.5 detailed system requirements topic.","title":"What's new in Container Update CF183?"},{"location":"whatsnew/newcf183/#deploy-hcl-dx-95-container-cf182-or-higher-to-microsoft-azure-kubernetes-service-aks","text":"Learn how to deploy HCL Digital Experience (DX) 9.5 CF182 and higher container releases along with Ambassador to Kubernetes, as verified in Microsoft Azure Kubernetes Service (AKS). See the HCL Digital Experience 9.5 Deployment and Deploy HCL Digital Experience 9.5 Container to Microsoft Azure Kubernetes Service (AKS) topics for more information.","title":"Deploy HCL DX 9.5 Container CF182 or higher to Microsoft Azure Kubernetes Service (AKS)"},{"location":"whatsnew/newcf183/#web-content-manager-lockunlock-api","text":"The Web Content Manager Lock/Unlock API lets you lock and unlock WCM content components, authoring templates, and item. It can also extend the WCM Query API. See the Web Content Manager Lock/Unlock AP I topic for more information.","title":"Web Content Manager Lock/Unlock API"},{"location":"whatsnew/newcf183/#content-template-createupdate-option-element-selection-api","text":"The Web Content Manager Create/Update Option Element Selection API lets you create or update an Option Selection Element in a Content Template. See the Create or update an Option Selection Element topic for more information.","title":"Content Template Create/Update Option Element Selection API"},{"location":"whatsnew/newcf183/#search-component-results-display-examples","text":"A search element defines the layout of a form that is used to display search results. See the Search Component Results Display topic for examples of how to design your search results.","title":"Search Component Results Display examples"},{"location":"whatsnew/newcf183/#new-hcl-digital-experience-how-to-videos","text":"Take advantage of new step by step guidance for HCL Digital Experience practitioners presented in several new videos. See the following HCL Digital Experience Help Center topics: Remote Search Service Transfer HCL Digital Experience 9.5 Container default database to IBM DB2 Create a web content library Virtual portals Backup and restore Configuration Wizard Combined Cumulative Fix Install Rich text editor toolbar configuration options Data collection and symptom analysis Parent topic: Container Update releases 9.5","title":"New HCL Digital Experience \u2018How To\u2019 Videos"},{"location":"whatsnew/newcf184/","text":"What's new in Container Update CF184? This HCL Digital Experience 9.5 Container Update release includes updated production releases of Digital Experience 9.5 core Portal and Web Content Manager, Content Composer, Digital Asset Management, and Experience API images. New additions include additional guidance to deploy to Microsoft Azure Kubernetes Service (AKS), new Web Content Manager REST APIs supporting Syndication options, HCL Digital Experience API published to HCL DX GitHub, new HCL Digital Experience \u2018How To\u2019 videos, and more. Go to the HCL Software Support Site for the list of software fixes, including Container Update releases. Product software can be accessed from the HCL Software Licensing Portal . Go to this Step-by-step guide to downloading DX products and accessing Customer Support for more information. The latest Software Requirements and Updates supporting HCL Digital Experience solutions may be accessed from the HCL Support pages, HCL Digital Experience V9.5, V9.0, and V8.5 detailed system requirements topic. Web Content Manager Syndication REST APIs The Web Content Manager Syndication REST APIs let you control syndication processes. See the Web Content Manager Syndication REST APIs topic for more information. Access the HCL Experience API in HCL DX GitHub The HCL Experience API is a set of OpenAPI-compliant REST APIs available for customers deploying HCL Digital Experience 9.5 containers on supported Kubernetes platforms. It supports the integration and management of HCL Digital Experience content and functionality to any digital channel using any front-end development framework. Developers may also now access this API published to the HCL DX GitHub repository. See the Experience API topic for more information. New HCL Digital Experience \u2018How To\u2019 Videos Take advantage of new step by step guidance for HCL Digital Experience practitioners presented in several new videos. See the following HCL Digital Experience Help Center topics: HCL Digital Experience Combined Cumulative Fix (CF) Installation Deploy HCL Digital Experience 9.5 to Red Hat OpenShift Deploy Digital Asset Management, Content Composer and Experience API to Red Hat OpenShift Parent topic: Container Update releases 9.5","title":"What's new in Container Update CF184?"},{"location":"whatsnew/newcf184/#whats-new-in-container-update-cf184","text":"This HCL Digital Experience 9.5 Container Update release includes updated production releases of Digital Experience 9.5 core Portal and Web Content Manager, Content Composer, Digital Asset Management, and Experience API images. New additions include additional guidance to deploy to Microsoft Azure Kubernetes Service (AKS), new Web Content Manager REST APIs supporting Syndication options, HCL Digital Experience API published to HCL DX GitHub, new HCL Digital Experience \u2018How To\u2019 videos, and more. Go to the HCL Software Support Site for the list of software fixes, including Container Update releases. Product software can be accessed from the HCL Software Licensing Portal . Go to this Step-by-step guide to downloading DX products and accessing Customer Support for more information. The latest Software Requirements and Updates supporting HCL Digital Experience solutions may be accessed from the HCL Support pages, HCL Digital Experience V9.5, V9.0, and V8.5 detailed system requirements topic.","title":"What's new in Container Update CF184?"},{"location":"whatsnew/newcf184/#web-content-manager-syndication-rest-apis","text":"The Web Content Manager Syndication REST APIs let you control syndication processes. See the Web Content Manager Syndication REST APIs topic for more information.","title":"Web Content Manager Syndication REST APIs"},{"location":"whatsnew/newcf184/#access-the-hcl-experience-api-in-hcl-dx-github","text":"The HCL Experience API is a set of OpenAPI-compliant REST APIs available for customers deploying HCL Digital Experience 9.5 containers on supported Kubernetes platforms. It supports the integration and management of HCL Digital Experience content and functionality to any digital channel using any front-end development framework. Developers may also now access this API published to the HCL DX GitHub repository. See the Experience API topic for more information.","title":"Access the HCL Experience API in HCL DX GitHub"},{"location":"whatsnew/newcf184/#new-hcl-digital-experience-how-to-videos","text":"Take advantage of new step by step guidance for HCL Digital Experience practitioners presented in several new videos. See the following HCL Digital Experience Help Center topics: HCL Digital Experience Combined Cumulative Fix (CF) Installation Deploy HCL Digital Experience 9.5 to Red Hat OpenShift Deploy Digital Asset Management, Content Composer and Experience API to Red Hat OpenShift Parent topic: Container Update releases 9.5","title":"New HCL Digital Experience \u2018How To\u2019 Videos"},{"location":"whatsnew/newcf19/","text":"What's new in Container Update CF19? This HCL Digital Experience 9.5 Container Update release includes updated production releases of Digital Experience 9.5 core Portal and Web Content Manager, Content Composer, Digital Asset Management, and Experience API images. New additions include additional guidance to deploy to Google Kubernetes Engine (GKE), Hybrid deployment support, Progressive Web Application delivery, Google Analytics integration, Mobile Preview, DXClient and DXConnect tooling supporting CICD release processes, Kaltura video support, new Web Content Manager REST APIs, new HCL Digital Experience \u2018How To\u2019 videos, and more. Go to the HCL Software Support Site for the list of software fixes, including Container Update releases. Product software can be accessed from the HCL Software Licensing Portal. Go to this Step-by-step guide to downloading DX products and accessing Customer Support for more information. The latest Software Requirements and Updates supporting HCL Digital Experience solutions may be accessed from the HCL Support pages, HCL Digital Experience V9.5, V9.0, and V8.5 detailed system requirements topic. Deploy HCL Digital Experience 9.5 Container to Google Kubernetes Engine (GKE) Learn how to deploy HCL Digital Experience (DX) 9.5 CF19 and higher container release along with Ambassador to Kubernetes, as verified in Google Kubernetes Engine (GKE) . See the Deploy HCL Digital Experience 9.5 Container to Google Kubernetes Engine (GKE) topic for more information. Hybrid Deployment The HCL Digital Experience 9.5 Hybrid deployment and topics deliver capability to deploy and manage HCL Digital Experience 9.5 core Portal Server and Web Content Manager services on premises, and connect to cloud native components Digital Asset Management, Content Composer, Experience API and related services in a production environment. See the Hybrid Deployment topic for more information. Progressive Web Application support Develop support that adds native mobile application experience and performance to your web site using browser-based functionality. See the Progressive Web Application topic for more information. Google Analytics integration Learn how to set up integration of Digital Experience sites with Google Analytics and view the resulting web analytics tracking to assess the effectiveness of your DX site pages with end user audiences. See the Integrate Google Analytics with HCL Digital Experience topic for more information. Mobile Preview Use the Mobile Preview simulator to view the presentation of Digital Experience site page components on select mobile devices. See the Mobile Preview topic for more information. DXClient and DXConnect tooling supporting CICD release processes HCL Digital Experience CF19 and higher includes a DXClient toolset, and DX Connect servlet that provides developers and administrators with an approach to deploy changes or improvements to the HCL Digital Experience platform,and automate processes in the development and delivery process. Note: The DXClient tool is not supported for use with HCL DX 9.5 deployments in Red Hat OpenShift or supported Kubernetes platforms. Use of the DXClient tool with those platforms will be available in future HCL DX 9.5 update releases. See the DXClient and DXConnect tooling supporting CICD release processes topic for more information. Digital Asset Management and Kaltura Integration Learn how to configure Kaltura Video Content Management System integration to accelerate HCL Digital Asset Management rich media integration to HCL Digital Experience site pages and content. See the Configure DAM - Kaltura integration topic for more information. New Digital Experience REST APIs New HCL DX APIs are introduced with the HCL DX CF19 release: Web content image renditions interactions REST API Web Content Library Locale Query Workflow Comments API Using XML Access to export and import Digital Asset Management assets New HCL Digital Experience \u2018How To\u2019 Videos Take advantage of new step by step guidance for HCL Digital Experience practitioners presented in several new videos. See the following HCL Digital Experience Help Center topics: Configure the OpenLDAP container image to the HCL DX 9.5 Container Deployment How to manage syndicators and subscribers Parent topic: Container Update releases 9.5","title":"What's new in Container Update CF19?"},{"location":"whatsnew/newcf19/#whats-new-in-container-update-cf19","text":"This HCL Digital Experience 9.5 Container Update release includes updated production releases of Digital Experience 9.5 core Portal and Web Content Manager, Content Composer, Digital Asset Management, and Experience API images. New additions include additional guidance to deploy to Google Kubernetes Engine (GKE), Hybrid deployment support, Progressive Web Application delivery, Google Analytics integration, Mobile Preview, DXClient and DXConnect tooling supporting CICD release processes, Kaltura video support, new Web Content Manager REST APIs, new HCL Digital Experience \u2018How To\u2019 videos, and more. Go to the HCL Software Support Site for the list of software fixes, including Container Update releases. Product software can be accessed from the HCL Software Licensing Portal. Go to this Step-by-step guide to downloading DX products and accessing Customer Support for more information. The latest Software Requirements and Updates supporting HCL Digital Experience solutions may be accessed from the HCL Support pages, HCL Digital Experience V9.5, V9.0, and V8.5 detailed system requirements topic.","title":"What's new in Container Update CF19?"},{"location":"whatsnew/newcf19/#deploy-hcl-digital-experience-95-container-to-google-kubernetes-engine-gke","text":"Learn how to deploy HCL Digital Experience (DX) 9.5 CF19 and higher container release along with Ambassador to Kubernetes, as verified in Google Kubernetes Engine (GKE) . See the Deploy HCL Digital Experience 9.5 Container to Google Kubernetes Engine (GKE) topic for more information.","title":"Deploy HCL Digital Experience 9.5 Container to Google Kubernetes Engine (GKE)"},{"location":"whatsnew/newcf19/#hybrid-deployment","text":"The HCL Digital Experience 9.5 Hybrid deployment and topics deliver capability to deploy and manage HCL Digital Experience 9.5 core Portal Server and Web Content Manager services on premises, and connect to cloud native components Digital Asset Management, Content Composer, Experience API and related services in a production environment. See the Hybrid Deployment topic for more information.","title":"Hybrid Deployment"},{"location":"whatsnew/newcf19/#progressive-web-application-support","text":"Develop support that adds native mobile application experience and performance to your web site using browser-based functionality. See the Progressive Web Application topic for more information.","title":"Progressive Web Application support"},{"location":"whatsnew/newcf19/#google-analytics-integration","text":"Learn how to set up integration of Digital Experience sites with Google Analytics and view the resulting web analytics tracking to assess the effectiveness of your DX site pages with end user audiences. See the Integrate Google Analytics with HCL Digital Experience topic for more information.","title":"Google Analytics integration"},{"location":"whatsnew/newcf19/#mobile-preview","text":"Use the Mobile Preview simulator to view the presentation of Digital Experience site page components on select mobile devices. See the Mobile Preview topic for more information.","title":"Mobile Preview"},{"location":"whatsnew/newcf19/#dxclient-and-dxconnect-tooling-supporting-cicd-release-processes","text":"HCL Digital Experience CF19 and higher includes a DXClient toolset, and DX Connect servlet that provides developers and administrators with an approach to deploy changes or improvements to the HCL Digital Experience platform,and automate processes in the development and delivery process. Note: The DXClient tool is not supported for use with HCL DX 9.5 deployments in Red Hat OpenShift or supported Kubernetes platforms. Use of the DXClient tool with those platforms will be available in future HCL DX 9.5 update releases. See the DXClient and DXConnect tooling supporting CICD release processes topic for more information.","title":"DXClient and DXConnect tooling supporting CICD release processes"},{"location":"whatsnew/newcf19/#digital-asset-management-and-kaltura-integration","text":"Learn how to configure Kaltura Video Content Management System integration to accelerate HCL Digital Asset Management rich media integration to HCL Digital Experience site pages and content. See the Configure DAM - Kaltura integration topic for more information.","title":"Digital Asset Management and Kaltura Integration"},{"location":"whatsnew/newcf19/#new-digital-experience-rest-apis","text":"New HCL DX APIs are introduced with the HCL DX CF19 release: Web content image renditions interactions REST API Web Content Library Locale Query Workflow Comments API Using XML Access to export and import Digital Asset Management assets","title":"New Digital Experience REST APIs"},{"location":"whatsnew/newcf19/#new-hcl-digital-experience-how-to-videos","text":"Take advantage of new step by step guidance for HCL Digital Experience practitioners presented in several new videos. See the following HCL Digital Experience Help Center topics: Configure the OpenLDAP container image to the HCL DX 9.5 Container Deployment How to manage syndicators and subscribers Parent topic: Container Update releases 9.5","title":"New HCL Digital Experience \u2018How To\u2019 Videos"},{"location":"whatsnew/newcf191/","text":"What's new in Container Update CF191? This HCL Digital Experience 9.5 Container Update release includes new releases of Digital Experience 9.5 core Portal and Web Content Manager, Content Composer, Digital Asset Management, and Experience API images, that may be used for new deployments only. Upgrading from a previous DX 9.5 Container Release to CF191 is not supported. Go to the HCL Software Support Site for the list of software fixes, including Container Update releases. Product software can be accessed from the HCL Software Licensing Portal . Go to this Step-by-step guide to downloading DX products and accessing Customer Support for more information. The latest Software Requirements and Updates supporting HCL Digital Experience solutions may be accessed from the HCL Support pages, HCL Digital Experience V9.5, V9.0, and V8.5 detailed system requirements topic. Deploy HCL Digital Experience 9.5 on HCL Solution Factory The HCL Solution Factory platform offers the ability for organizations to quickly prototype and test assets and can enable organizations to speed cloud-native adoption. Visit HCL Solution Factory to access HCL Digital Experience 9.5 and other HCL software offerings to quickly assess and test cloud-native strategies to see what best fits adoption plans. View this online tutorial \u201c Deploy HCL Digital Experience in Minutes with HCL SoFy \u201d HCL Digital Experience 9.5 Integration with HCL Commerce HCL Commerce integration with HCL Digital Experience allows content and digital assets managed within HCL Digital Experience to be utilized in any Commerce store. Visit the HCL Commerce Help Center Digital Experience integration for more information and pre-requisites. Parent topic: Container Update releases 9.5","title":"What's new in Container Update CF191?"},{"location":"whatsnew/newcf191/#whats-new-in-container-update-cf191","text":"This HCL Digital Experience 9.5 Container Update release includes new releases of Digital Experience 9.5 core Portal and Web Content Manager, Content Composer, Digital Asset Management, and Experience API images, that may be used for new deployments only. Upgrading from a previous DX 9.5 Container Release to CF191 is not supported. Go to the HCL Software Support Site for the list of software fixes, including Container Update releases. Product software can be accessed from the HCL Software Licensing Portal . Go to this Step-by-step guide to downloading DX products and accessing Customer Support for more information. The latest Software Requirements and Updates supporting HCL Digital Experience solutions may be accessed from the HCL Support pages, HCL Digital Experience V9.5, V9.0, and V8.5 detailed system requirements topic.","title":"What's new in Container Update CF191?"},{"location":"whatsnew/newcf191/#deploy-hcl-digital-experience-95-on-hcl-solution-factory","text":"The HCL Solution Factory platform offers the ability for organizations to quickly prototype and test assets and can enable organizations to speed cloud-native adoption. Visit HCL Solution Factory to access HCL Digital Experience 9.5 and other HCL software offerings to quickly assess and test cloud-native strategies to see what best fits adoption plans. View this online tutorial \u201c Deploy HCL Digital Experience in Minutes with HCL SoFy \u201d","title":"Deploy HCL Digital Experience 9.5 on HCL Solution Factory"},{"location":"whatsnew/newcf191/#hcl-digital-experience-95-integration-with-hcl-commerce","text":"HCL Commerce integration with HCL Digital Experience allows content and digital assets managed within HCL Digital Experience to be utilized in any Commerce store. Visit the HCL Commerce Help Center Digital Experience integration for more information and pre-requisites. Parent topic: Container Update releases 9.5","title":"HCL Digital Experience 9.5 Integration with HCL Commerce"},{"location":"whatsnew/newcf192/","text":"What's new in Container Update CF192? This HCL Digital Experience 9.5 Container Update release includes new releases of Digital Experience 9.5 core Portal and Web Content Manager, Content Composer, Digital Asset Management, and Experience API images. Go to the HCL Software Support Site for the list of software fixes, including Container Update releases. Product software can be accessed from the HCL Software Licensing Portal . Go to this Step-by-step guide to downloading DX products and accessing Customer Support for more information. The latest Software Requirements and Updates supporting HCL Digital Experience solutions may be accessed from the HCL Support pages, HCL Digital Experience V9.5, V9.0, and V8.5 detailed system requirements topic. HCL Digital Experience 9.5 Docker and Container Initialization Performance Beginning with the HCL Digital Experience 9.5 Container Update CF192 release, DX 9.5 Docker and container initialization performance is improved. See the HCL Digital Experience 9.5 Docker and Container Initialization Performance Help Center topic for more information. HCL Digital Experience 9.5 Container Core Transaction Logging Beginning with the HCL Digital Experience 9.5 Container Update CF192 release, transaction logging for the DX Docker Core image is updated to improve performance. See the Logging and tracing for Containers and new services Help Center topic for more information. New HCL Digital Experience 9.5 Release Artifacts supporting CICD release processes The HCL Digital Experience 9.5 DXClient and DXConnect servlet provides developers and administrators an approach to deploy changes or improvements to the HCL Digital Experience platform,and automate processes in the development and delivery process. New release artifact types supporting Script Application Undeploy and Restore, and Deploy Theme. See the DXClient and DXConnect tooling supporting CICD release processes topic for more information. New Content Composer Features New Content Composer features are added with HCL Digital Experience Container Update CF192, including a new Version Comparison interface and capabilities to View and Filter Workflow comments, and more. See the HCL Content Composer Help Center topic for additional information. New Digital Asset Management Features New Digital Asset Management Features are added with HCL Digital Experience Container Update CF192, including enhanced crop functionality, Kaltura video player support, thumbnail preview support, asset size filter, Renditions and Versioning support, and more. See the HCL Digital Asset Management Help Center topic for additional information. HCL Digital Experience 9.5 Integration with HCL Unica Discover Integration of HCL Digital Experience 9.5 sites with HCL Unica Discover enables DX site managers and marketers to access deep insight analytics and session replay services to assess the effectiveness of DX site pages with end user audiences. See the Integrate HCL Unica Discover with HCL Digital Experience topic for more information. Content Security Policy The Content-Security-Policy header is used by modern browsers to enhance the security of HCL Digital Experience site documents or web pages by allowing HCL Digital Experience administrators or developers declare which dynamic resources are allowed to load. With HCL Digital Experience Container Update CF192 and later releases, developers can apply platform support and guidance to update their DX sites to validate trusted sources before rendering pages to end users. See the Content Security Policy Help Center topic for more information. New Digital Experience REST APIs New HCL DX APIs are introduced with the HCL DX CF192 Container Update release: Using the WCM Add Comment API Web Content Manager Find Rendering and Script Portlet References Web Content Manager Access Control Filter REST API Clear Theme Cache API Work with Deleted Web Content Items Web Content Manager Multilingual Solution APIs New HCL Digital Experience \u2018How To\u2019 Videos Take advantage of new step-by-step guidance for HCL Digital Experience practitioners presented in new videos and webinars. See the following HCL Digital Experience Help Center topics: HCL Digital Experience 9.5 Container Deployment Using the dxctl tool to deploy Digital Experience 9.5 on Red Hat OpenShift Create a WAR-based theme copy on HCL Digital Experience 9.5 Parent topic: Container Update releases 9.5","title":"What's new in Container Update CF192?"},{"location":"whatsnew/newcf192/#whats-new-in-container-update-cf192","text":"This HCL Digital Experience 9.5 Container Update release includes new releases of Digital Experience 9.5 core Portal and Web Content Manager, Content Composer, Digital Asset Management, and Experience API images. Go to the HCL Software Support Site for the list of software fixes, including Container Update releases. Product software can be accessed from the HCL Software Licensing Portal . Go to this Step-by-step guide to downloading DX products and accessing Customer Support for more information. The latest Software Requirements and Updates supporting HCL Digital Experience solutions may be accessed from the HCL Support pages, HCL Digital Experience V9.5, V9.0, and V8.5 detailed system requirements topic.","title":"What's new in Container Update CF192?"},{"location":"whatsnew/newcf192/#hcl-digital-experience-95-docker-and-container-initialization-performance","text":"Beginning with the HCL Digital Experience 9.5 Container Update CF192 release, DX 9.5 Docker and container initialization performance is improved. See the HCL Digital Experience 9.5 Docker and Container Initialization Performance Help Center topic for more information.","title":"HCL Digital Experience 9.5 Docker and Container Initialization Performance"},{"location":"whatsnew/newcf192/#hcl-digital-experience-95-container-core-transaction-logging","text":"Beginning with the HCL Digital Experience 9.5 Container Update CF192 release, transaction logging for the DX Docker Core image is updated to improve performance. See the Logging and tracing for Containers and new services Help Center topic for more information.","title":"HCL Digital Experience 9.5 Container Core Transaction Logging"},{"location":"whatsnew/newcf192/#new-hcl-digital-experience-95-release-artifacts-supporting-cicd-release-processes","text":"The HCL Digital Experience 9.5 DXClient and DXConnect servlet provides developers and administrators an approach to deploy changes or improvements to the HCL Digital Experience platform,and automate processes in the development and delivery process. New release artifact types supporting Script Application Undeploy and Restore, and Deploy Theme. See the DXClient and DXConnect tooling supporting CICD release processes topic for more information.","title":"New HCL Digital Experience 9.5 Release Artifacts supporting CICD release processes"},{"location":"whatsnew/newcf192/#new-content-composer-features","text":"New Content Composer features are added with HCL Digital Experience Container Update CF192, including a new Version Comparison interface and capabilities to View and Filter Workflow comments, and more. See the HCL Content Composer Help Center topic for additional information.","title":"New Content Composer Features"},{"location":"whatsnew/newcf192/#new-digital-asset-management-features","text":"New Digital Asset Management Features are added with HCL Digital Experience Container Update CF192, including enhanced crop functionality, Kaltura video player support, thumbnail preview support, asset size filter, Renditions and Versioning support, and more. See the HCL Digital Asset Management Help Center topic for additional information.","title":"New Digital Asset Management Features"},{"location":"whatsnew/newcf192/#hcl-digital-experience-95-integration-with-hcl-unica-discover","text":"Integration of HCL Digital Experience 9.5 sites with HCL Unica Discover enables DX site managers and marketers to access deep insight analytics and session replay services to assess the effectiveness of DX site pages with end user audiences. See the Integrate HCL Unica Discover with HCL Digital Experience topic for more information.","title":"HCL Digital Experience 9.5 Integration with HCL Unica Discover"},{"location":"whatsnew/newcf192/#content-security-policy","text":"The Content-Security-Policy header is used by modern browsers to enhance the security of HCL Digital Experience site documents or web pages by allowing HCL Digital Experience administrators or developers declare which dynamic resources are allowed to load. With HCL Digital Experience Container Update CF192 and later releases, developers can apply platform support and guidance to update their DX sites to validate trusted sources before rendering pages to end users. See the Content Security Policy Help Center topic for more information.","title":"Content Security Policy"},{"location":"whatsnew/newcf192/#new-digital-experience-rest-apis","text":"New HCL DX APIs are introduced with the HCL DX CF192 Container Update release: Using the WCM Add Comment API Web Content Manager Find Rendering and Script Portlet References Web Content Manager Access Control Filter REST API Clear Theme Cache API Work with Deleted Web Content Items Web Content Manager Multilingual Solution APIs","title":"New Digital Experience REST APIs"},{"location":"whatsnew/newcf192/#new-hcl-digital-experience-how-to-videos","text":"Take advantage of new step-by-step guidance for HCL Digital Experience practitioners presented in new videos and webinars. See the following HCL Digital Experience Help Center topics: HCL Digital Experience 9.5 Container Deployment Using the dxctl tool to deploy Digital Experience 9.5 on Red Hat OpenShift Create a WAR-based theme copy on HCL Digital Experience 9.5 Parent topic: Container Update releases 9.5","title":"New HCL Digital Experience \u2018How To\u2019 Videos"},{"location":"whatsnew/newcf193/","text":"What's new in Container Update CF193? This HCL Digital Experience 9.5 Container Update release includes new releases of Digital Experience 9.5 core Portal and Web Content Manager, Content Composer, Digital Asset Management, and Experience API images. New and updated feature references are detailed here. Go to the HCL Software Support Site for the list of software fixes, including Container Update releases. Product software can be accessed from the HCL Software Licensing Portal . Go to this Step-by-step guide to downloading DX products and accessing Customer Support for more information. The latest Software Requirements and Updates supporting HCL Digital Experience solutions may be accessed from the HCL Support pages, HCL Digital Experience V9.5, V9.0, and V8.5 detailed system requirements topic. Enable Presentation of Locales in Friendly URLs Beginning with the HCL Digital Experience 9.5 Container Update CF193 release, enablement is provided to present friendly URLs with locale specific definitions when multi-lingual page versions are requested. This enablement can also improve SEO results when users search for language-specific DX page topics. See the Enabling presentation of locales in friendly URLs topic for more information. Theme Editor Portlet The Theme Editor portlet is a new addition to HCL Digital Experience Container Update CF193 and higher release capabilities. The portlet allows an administrator to edit static theme resources in WebDAV without the use of a WebDAV client or tool. See the Theme Editor Portlet topic for more information. HCL Digital Experience 9.5 Container Custom Context Root URL Beginning with HCL DX 9.5 Container Update CF193 release, you can define the custom context root URLs when deploying your DX 9.5 software to the supported container platforms. See the Customizing the Digital Experience Portal URL when deployed to Container platforms topic for more information. New Digital Asset Management Features New Digital Asset Management Features are added with HCL Digital Experience Container Update CF193, and include the ability to filter Digital Assets by size. See the HCL Digital Asset Management Help Center topic for additional information. Change language presented in the HCL Digital Experience Theme Beginning with HCL DX 9.5 Container Update CF193 release, you can switch the language presented in your Digital Experience theme. An example is provided in the Woodburn Studio demo site supporting presentations for French, Spanish, and English languages. See the How to switch the languages in the Digital Experience theme topic for more information. New HCL Digital Experience 9.5 Release Artifacts supporting CICD release processes The HCL Digital Experience 9.5 DXClient and DXConnect servlet provides developers and administrators an approach to deploy changes or improvements to the HCL Digital Experience platform, and automate processes in the development and delivery process. New release artifact types supporting Deploy DX Core, Manage Syndicator, and Manage Subscriber tasks are provided in Container Update CF193. See the DXClient and DXConnect tooling supporting CICD release processes topic for more information. New Digital Experience REST APIs New and updated HCL DX APIs are introduced with the HCL DX CF193 Container Update release: Web Content Manager Multilingual Solution APIs HCL Digital Experience 9.5 Container Platform Support Matrix View the latest Kubernetes and OpenShift platforms tested and supported for specific HCL Digital Experience 9.5 Container Update deployments. See the HCL Digital Experience 9.5 Container Platform Support Matrix Help Center topic for more information. New HCL Digital Experience \u2018How To\u2019 Videos Take advantage of new step-by-step guidance for HCL Digital Experience practitioners presented in new videos and webinars. See the following HCL Digital Experience Help Center topics: Deploy HCL Digital Experience in Minutes using HCL Solution Factory Using the dxctl tool to Update Digital Experience 9.5 on Red Hat OpenShift How to Upload HCL Digital Experience 9.5 CF Container Images to a Private Repository Parent topic: Container Update releases 9.5","title":"What's new in Container Update CF193?"},{"location":"whatsnew/newcf193/#whats-new-in-container-update-cf193","text":"This HCL Digital Experience 9.5 Container Update release includes new releases of Digital Experience 9.5 core Portal and Web Content Manager, Content Composer, Digital Asset Management, and Experience API images. New and updated feature references are detailed here. Go to the HCL Software Support Site for the list of software fixes, including Container Update releases. Product software can be accessed from the HCL Software Licensing Portal . Go to this Step-by-step guide to downloading DX products and accessing Customer Support for more information. The latest Software Requirements and Updates supporting HCL Digital Experience solutions may be accessed from the HCL Support pages, HCL Digital Experience V9.5, V9.0, and V8.5 detailed system requirements topic.","title":"What's new in Container Update CF193?"},{"location":"whatsnew/newcf193/#enable-presentation-of-locales-in-friendly-urls","text":"Beginning with the HCL Digital Experience 9.5 Container Update CF193 release, enablement is provided to present friendly URLs with locale specific definitions when multi-lingual page versions are requested. This enablement can also improve SEO results when users search for language-specific DX page topics. See the Enabling presentation of locales in friendly URLs topic for more information.","title":"Enable Presentation of Locales in Friendly URLs"},{"location":"whatsnew/newcf193/#theme-editor-portlet","text":"The Theme Editor portlet is a new addition to HCL Digital Experience Container Update CF193 and higher release capabilities. The portlet allows an administrator to edit static theme resources in WebDAV without the use of a WebDAV client or tool. See the Theme Editor Portlet topic for more information.","title":"Theme Editor Portlet"},{"location":"whatsnew/newcf193/#hcl-digital-experience-95-container-custom-context-root-url","text":"Beginning with HCL DX 9.5 Container Update CF193 release, you can define the custom context root URLs when deploying your DX 9.5 software to the supported container platforms. See the Customizing the Digital Experience Portal URL when deployed to Container platforms topic for more information.","title":"HCL Digital Experience 9.5 Container Custom Context Root URL"},{"location":"whatsnew/newcf193/#new-digital-asset-management-features","text":"New Digital Asset Management Features are added with HCL Digital Experience Container Update CF193, and include the ability to filter Digital Assets by size. See the HCL Digital Asset Management Help Center topic for additional information.","title":"New Digital Asset Management Features"},{"location":"whatsnew/newcf193/#change-language-presented-in-the-hcl-digital-experience-theme","text":"Beginning with HCL DX 9.5 Container Update CF193 release, you can switch the language presented in your Digital Experience theme. An example is provided in the Woodburn Studio demo site supporting presentations for French, Spanish, and English languages. See the How to switch the languages in the Digital Experience theme topic for more information.","title":"Change language presented in the HCL Digital Experience Theme"},{"location":"whatsnew/newcf193/#new-hcl-digital-experience-95-release-artifacts-supporting-cicd-release-processes","text":"The HCL Digital Experience 9.5 DXClient and DXConnect servlet provides developers and administrators an approach to deploy changes or improvements to the HCL Digital Experience platform, and automate processes in the development and delivery process. New release artifact types supporting Deploy DX Core, Manage Syndicator, and Manage Subscriber tasks are provided in Container Update CF193. See the DXClient and DXConnect tooling supporting CICD release processes topic for more information.","title":"New HCL Digital Experience 9.5 Release Artifacts supporting CICD release processes"},{"location":"whatsnew/newcf193/#new-digital-experience-rest-apis","text":"New and updated HCL DX APIs are introduced with the HCL DX CF193 Container Update release: Web Content Manager Multilingual Solution APIs","title":"New Digital Experience REST APIs"},{"location":"whatsnew/newcf193/#hcl-digital-experience-95-container-platform-support-matrix","text":"View the latest Kubernetes and OpenShift platforms tested and supported for specific HCL Digital Experience 9.5 Container Update deployments. See the HCL Digital Experience 9.5 Container Platform Support Matrix Help Center topic for more information.","title":"HCL Digital Experience 9.5 Container Platform Support Matrix"},{"location":"whatsnew/newcf193/#new-hcl-digital-experience-how-to-videos","text":"Take advantage of new step-by-step guidance for HCL Digital Experience practitioners presented in new videos and webinars. See the following HCL Digital Experience Help Center topics: Deploy HCL Digital Experience in Minutes using HCL Solution Factory Using the dxctl tool to Update Digital Experience 9.5 on Red Hat OpenShift How to Upload HCL Digital Experience 9.5 CF Container Images to a Private Repository Parent topic: Container Update releases 9.5","title":"New HCL Digital Experience \u2018How To\u2019 Videos"},{"location":"whatsnew/newcf194/","text":"What's new in Container Update CF194? This HCL Digital Experience 9.5 Container Update release includes new releases of Digital Experience 9.5 core Portal and Web Content Manager, Content Composer, Digital Asset Management, and Experience API images. No new features were added in this update. Important note: The default IBM WebSphere Application Server certificate that ships with HCL Digital Experience 9.5 Docker images expires on April 26, 2021. Access to HCL Digital Experience 9.5 container deployments is not adversely affected. However, scripts executed against the DX 9.5 deployed servers, like stopServer or some ConfigEngine tasks, will fail. To address this, HCL Digital Experience 9.5 customers deploying to container platforms can use either of the following options to update the certificate: Apply the HCL Digital Experience 9.5 Container Update CF194, available from the HCL Software Licensing Portal on April 19, 2021. Renew the certificate on your DX 9.5 Container Deployment by following the steps outlined in the following HCL DX Support Knowledge Base article: Manual Steps to Apply the Digital Experience 9.5 Container Deployment Core Certificate Update . Go to the HCL Software Support Site for the list of software fixes, including Container Update release CF194. Product software can be accessed from the HCL Software Licensing Portal . Go to this Step-by-step guide to downloading DX products and accessing Customer Support for more information. The latest Software Requirements and Updates supporting HCL Digital Experience solutions may be accessed from the HCL Support pages, HCL Digital Experience V9.5, V9.0, and V8.5 detailed system requirements topic. Parent topic: Container Update releases 9.5","title":"What's new in Container Update CF194?"},{"location":"whatsnew/newcf194/#whats-new-in-container-update-cf194","text":"This HCL Digital Experience 9.5 Container Update release includes new releases of Digital Experience 9.5 core Portal and Web Content Manager, Content Composer, Digital Asset Management, and Experience API images. No new features were added in this update. Important note: The default IBM WebSphere Application Server certificate that ships with HCL Digital Experience 9.5 Docker images expires on April 26, 2021. Access to HCL Digital Experience 9.5 container deployments is not adversely affected. However, scripts executed against the DX 9.5 deployed servers, like stopServer or some ConfigEngine tasks, will fail. To address this, HCL Digital Experience 9.5 customers deploying to container platforms can use either of the following options to update the certificate: Apply the HCL Digital Experience 9.5 Container Update CF194, available from the HCL Software Licensing Portal on April 19, 2021. Renew the certificate on your DX 9.5 Container Deployment by following the steps outlined in the following HCL DX Support Knowledge Base article: Manual Steps to Apply the Digital Experience 9.5 Container Deployment Core Certificate Update . Go to the HCL Software Support Site for the list of software fixes, including Container Update release CF194. Product software can be accessed from the HCL Software Licensing Portal . Go to this Step-by-step guide to downloading DX products and accessing Customer Support for more information. The latest Software Requirements and Updates supporting HCL Digital Experience solutions may be accessed from the HCL Support pages, HCL Digital Experience V9.5, V9.0, and V8.5 detailed system requirements topic. Parent topic: Container Update releases 9.5","title":"What's new in Container Update CF194?"},{"location":"whatsnew/newcf195/","text":"What's new in Container Update CF195? This HCL Digital Experience 9.5 Container Update release includes new releases of Digital Experience 9.5 core Portal and Web Content Manager, Content Composer, Digital Asset Management, and Experience API images. New and updated feature references are detailed here. Go to the HCL Software Support Site and HCL DX Software Fix list for the list of software fixes, including Container Update releases. Product software can be accessed from the HCL Software Licensing Portal . Go to this Step-by-step guide to downloading DX products and accessing Customer Support for more information. The latest Software Requirements and Updates supporting HCL Digital Experience solutions may be accessed from the HCL Support pages, HCL Digital Experience V9.5, V9.0, and V8.5 detailed system requirements topic. Web Content Manager Multilingual Solution Library Export and Import The HCL Web Content Manager Multilingual Solution is a set of tools used to manage translated versions Web Content Manager content for localized and regionalized websites. Beginning with the HCL Digital Experience 9.5 Container Update CF195 release, a new export and import capability allows you to support translation of the content of a library by exporting it into a format supported by a translation service and importing the translated content back into the content library using the DXClient tool. See the How to export and import WCM library content using DXClient topic for more information. Web Content Manager Advanced Cache Options New options are available to flush the Web Content Manager Advanced cache, as a result of syndication operations, to help improve performance and reliability. See the Web Content Manager Cache Parameters topic for more information. Enhanced Cross Origin Resource Sharing Configuration Enhanced Cross Origin Resource Sharing Configuration adds new options for HCL Digital Experience administrators to set configuration for CORS using a WP configuration service in the IBM WebSphere Application Server resource environment provider. See the Enhanced Cross Origin Resource Sharing Configuration for more information. New HCL Digital Experience 9.5 Release Artifacts supporting CICD release processes The HCL Digital Experience 9.5 DXClient and DXConnect servlet provides developers and administrators an approach to deploy changes or improvements to the HCL Digital Experience platform, and automate processes in the development and delivery process. New release artifact types supporting Undeploy Themes, and Export/Import Web Content Manager Library content are provided in Container Update CF195. See the DXClient and DXConnect tooling supporting CICD release processes topic for more information. Remote Search Configuration for HCL Digital Experience 9.5 deployments on Kubernetes platforms Beginning with HCL DX 9.5 Container Update CF195 release, Remote Search can be configured for deployment on supported Kubernetes platforms. See the Configure Remote Search in Red Hat OpenShift and Kubernetes topic for more information. Define No Context Root in for HCL Digital Experience 9.5 container deployments Beginning with HCL DX 9.5 Container Update CF195 release, administrators can define custom context root URLs, or no context root URL, when deploying HCL DX 9.5 software to the supported container platforms. See the Customizing the Digital Experience URL when deployed to Container platforms topic for more information. HCL Digital Experience 9.5 Container Platform Support Matrix View the latest Kubernetes and OpenShift platforms tested and supported for specific HCL Digital Experience 9.5 Container Update deployments. See the HCL Digital Experience 9.5 Container Platform Support Matrix Help Center topic for more information. New HCL Digital Experience \u2018How To\u2019 Videos Take advantage of new step-by-step guidance for HCL Digital Experience practitioners presented in new videos and webinars. See the following HCL Digital Experience Help Center topics: Getting Started with DXClient on Red Hat OpenShift using HCL Digital Experience CF194 Understanding the Core Persistent Volumes in HCL Digital Experience Container Update CF194 Create a WebDAV Theme copy using HCL Digital Experience 9.5 Create and apply A/B personalized scenarios with HCL Digital Experience Parent topic: Container Update releases 9.5","title":"What's new in Container Update CF195?"},{"location":"whatsnew/newcf195/#whats-new-in-container-update-cf195","text":"This HCL Digital Experience 9.5 Container Update release includes new releases of Digital Experience 9.5 core Portal and Web Content Manager, Content Composer, Digital Asset Management, and Experience API images. New and updated feature references are detailed here. Go to the HCL Software Support Site and HCL DX Software Fix list for the list of software fixes, including Container Update releases. Product software can be accessed from the HCL Software Licensing Portal . Go to this Step-by-step guide to downloading DX products and accessing Customer Support for more information. The latest Software Requirements and Updates supporting HCL Digital Experience solutions may be accessed from the HCL Support pages, HCL Digital Experience V9.5, V9.0, and V8.5 detailed system requirements topic.","title":"What's new in Container Update CF195?"},{"location":"whatsnew/newcf195/#web-content-manager-multilingual-solution-library-export-and-import","text":"The HCL Web Content Manager Multilingual Solution is a set of tools used to manage translated versions Web Content Manager content for localized and regionalized websites. Beginning with the HCL Digital Experience 9.5 Container Update CF195 release, a new export and import capability allows you to support translation of the content of a library by exporting it into a format supported by a translation service and importing the translated content back into the content library using the DXClient tool. See the How to export and import WCM library content using DXClient topic for more information.","title":"Web Content Manager Multilingual Solution Library Export and Import"},{"location":"whatsnew/newcf195/#web-content-manager-advanced-cache-options","text":"New options are available to flush the Web Content Manager Advanced cache, as a result of syndication operations, to help improve performance and reliability. See the Web Content Manager Cache Parameters topic for more information.","title":"Web Content Manager Advanced Cache Options"},{"location":"whatsnew/newcf195/#enhanced-cross-origin-resource-sharing-configuration","text":"Enhanced Cross Origin Resource Sharing Configuration adds new options for HCL Digital Experience administrators to set configuration for CORS using a WP configuration service in the IBM WebSphere Application Server resource environment provider. See the Enhanced Cross Origin Resource Sharing Configuration for more information.","title":"Enhanced Cross Origin Resource Sharing Configuration"},{"location":"whatsnew/newcf195/#new-hcl-digital-experience-95-release-artifacts-supporting-cicd-release-processes","text":"The HCL Digital Experience 9.5 DXClient and DXConnect servlet provides developers and administrators an approach to deploy changes or improvements to the HCL Digital Experience platform, and automate processes in the development and delivery process. New release artifact types supporting Undeploy Themes, and Export/Import Web Content Manager Library content are provided in Container Update CF195. See the DXClient and DXConnect tooling supporting CICD release processes topic for more information.","title":"New HCL Digital Experience 9.5 Release Artifacts supporting CICD release processes"},{"location":"whatsnew/newcf195/#remote-search-configuration-for-hcl-digital-experience-95-deployments-on-kubernetes-platforms","text":"Beginning with HCL DX 9.5 Container Update CF195 release, Remote Search can be configured for deployment on supported Kubernetes platforms. See the Configure Remote Search in Red Hat OpenShift and Kubernetes topic for more information.","title":"Remote Search Configuration for HCL Digital Experience 9.5 deployments on Kubernetes platforms"},{"location":"whatsnew/newcf195/#define-no-context-root-in-for-hcl-digital-experience-95-container-deployments","text":"Beginning with HCL DX 9.5 Container Update CF195 release, administrators can define custom context root URLs, or no context root URL, when deploying HCL DX 9.5 software to the supported container platforms. See the Customizing the Digital Experience URL when deployed to Container platforms topic for more information.","title":"Define No Context Root in for HCL Digital Experience 9.5 container deployments"},{"location":"whatsnew/newcf195/#hcl-digital-experience-95-container-platform-support-matrix","text":"View the latest Kubernetes and OpenShift platforms tested and supported for specific HCL Digital Experience 9.5 Container Update deployments. See the HCL Digital Experience 9.5 Container Platform Support Matrix Help Center topic for more information.","title":"HCL Digital Experience 9.5 Container Platform Support Matrix"},{"location":"whatsnew/newcf195/#new-hcl-digital-experience-how-to-videos","text":"Take advantage of new step-by-step guidance for HCL Digital Experience practitioners presented in new videos and webinars. See the following HCL Digital Experience Help Center topics: Getting Started with DXClient on Red Hat OpenShift using HCL Digital Experience CF194 Understanding the Core Persistent Volumes in HCL Digital Experience Container Update CF194 Create a WebDAV Theme copy using HCL Digital Experience 9.5 Create and apply A/B personalized scenarios with HCL Digital Experience Parent topic: Container Update releases 9.5","title":"New HCL Digital Experience \u2018How To\u2019 Videos"},{"location":"whatsnew/newcf196/","text":"What's new in Container Update CF196? This HCL Digital Experience 9.5 Container Update release includes new releases of HCL Digital Experience 9.5 core Portal and Web Content Manager, Content Composer, Digital Asset Management, and Experience API images, and a beta preview release of Design Studio. New and updated feature references are detailed here. Go to the HCL Software Support Site and HCL DX Software Fix list for the list of software fixes, including Container Update releases. Product software can be accessed from the HCL Software Licensing Portal . Go to this Step-by-step guide to downloading DX products and accessing Customer Support for more information. The latest Software Requirements and Updates supporting HCL Digital Experience solutions may be accessed from the HCL Support pages, HCL Digital Experience V9.5, V9.0, and V8.5 detailed system requirements topic. Note: For new capabilities that are available for HCL DX on-premise deployments, see What's new in the CF196 topic. Design Studio (Beta) Design Studio enables content managers and designers to build and style their digital site properties quickly. Available for use with DX 9.5 container-based deployments, Design Studio presents a modern, intuitive, and role-based tool aggregating all needed functions to visually assemble, curate, design, and model pages, content, and applications in DX sites. Note: Design Studio is provided for beta evaluation with HCL Digital Experience 9.5 Container Update CF196. It is not yet supported for use in production deployments . See the Design Studio (Beta) topic for more information. Deploy HCL DX CF196 to container platforms using Helm Beginning with HCL Digital Experience 9.5 Container Update CF196, administrators can deploy HCL DX 9.5 CF196 and later images to supported container platforms using Helm. Using a Helm Chart deployment can provide administrators a larger degree of transparency and control in deployment operations, and is available for use with the Google Kubernetes Engine (GKE) platform with Container Update CF196. See the HCL DX 9.5 Helm deployment topic for more information. Deploy HCL DX 9.5 using Docker Compose Beginning with HCL DX 9.5 Container Update CF196, administrators and developers can deploy HCL DX 9.5 using Docker Compose, for non-production use. Docker Compose scripts for HCL DX 9.5, installation, and configuration instructions for non-production use are available in the HCL Software Github page. See the Docker image deployment using Docker Compose topic for more information. Web Content Manager Multilingual Solution Enhancements The HCL Web Content Manager Multilingual Solution is a set of tools used to manage translated versions Web Content Manager content for localized and regionalized websites. Beginning with the HCL Digital Experience 9.5 Container Update CF196 release, support is added to import and export multiple libraries to a format supported by a translation service, support a maximum field length, export changed contents from a library, and export to projects. A new option to switch the language in an HCL DX 9.5 mobile view is also available. See the How to export and import WCM library content using DXClient and The Woodburn Studio demo site topics for more information. New HCL Digital Experience 9.5 Release Artifacts supporting CICD release processes The HCL Digital Experience 9.5 DXClient and DXConnect servlet provides developers and administrators an approach to deploy changes or improvements to the HCL Digital Experience platform, and automate processes in the development and delivery process. Updates include a new DXClient Docker image, and new release artifact types supporting shared libraries, obtain failed syndication reports are provided in Container Update CF196. See the DXClient and DXConnect tooling supporting CICD release processes topic for more information. HCL Digital Experience 9.5 Container Platform Support Matrix View the latest Kubernetes and OpenShift platforms tested and supported for specific HCL Digital Experience 9.5 Container Update deployments. See the HCL Digital Experience 9.5 Container Platform Support Matrix Help Center topic for more information. New HCL Digital Experience \u2018How To\u2019 Videos Take advantage of new step-by-step guidance for HCL Digital Experience practitioners presented in new videos and webinars. See the following HCL Digital Experience Help Center topics: Configuring user access permissions to Digital Asset Management assets Deep dive: Progressive Web Applications with HCL DX 9.5 Content Security Policy with HCL DX 9.5 Parent topic: Container Update releases 9.5","title":"What's new in Container Update CF196?"},{"location":"whatsnew/newcf196/#whats-new-in-container-update-cf196","text":"This HCL Digital Experience 9.5 Container Update release includes new releases of HCL Digital Experience 9.5 core Portal and Web Content Manager, Content Composer, Digital Asset Management, and Experience API images, and a beta preview release of Design Studio. New and updated feature references are detailed here. Go to the HCL Software Support Site and HCL DX Software Fix list for the list of software fixes, including Container Update releases. Product software can be accessed from the HCL Software Licensing Portal . Go to this Step-by-step guide to downloading DX products and accessing Customer Support for more information. The latest Software Requirements and Updates supporting HCL Digital Experience solutions may be accessed from the HCL Support pages, HCL Digital Experience V9.5, V9.0, and V8.5 detailed system requirements topic. Note: For new capabilities that are available for HCL DX on-premise deployments, see What's new in the CF196 topic.","title":"What's new in Container Update CF196?"},{"location":"whatsnew/newcf196/#design-studio-beta","text":"Design Studio enables content managers and designers to build and style their digital site properties quickly. Available for use with DX 9.5 container-based deployments, Design Studio presents a modern, intuitive, and role-based tool aggregating all needed functions to visually assemble, curate, design, and model pages, content, and applications in DX sites. Note: Design Studio is provided for beta evaluation with HCL Digital Experience 9.5 Container Update CF196. It is not yet supported for use in production deployments . See the Design Studio (Beta) topic for more information.","title":"Design Studio (Beta)"},{"location":"whatsnew/newcf196/#deploy-hcl-dx-cf196-to-container-platforms-using-helm","text":"Beginning with HCL Digital Experience 9.5 Container Update CF196, administrators can deploy HCL DX 9.5 CF196 and later images to supported container platforms using Helm. Using a Helm Chart deployment can provide administrators a larger degree of transparency and control in deployment operations, and is available for use with the Google Kubernetes Engine (GKE) platform with Container Update CF196. See the HCL DX 9.5 Helm deployment topic for more information.","title":"Deploy HCL DX CF196 to container platforms using Helm"},{"location":"whatsnew/newcf196/#deploy-hcl-dx-95-using-docker-compose","text":"Beginning with HCL DX 9.5 Container Update CF196, administrators and developers can deploy HCL DX 9.5 using Docker Compose, for non-production use. Docker Compose scripts for HCL DX 9.5, installation, and configuration instructions for non-production use are available in the HCL Software Github page. See the Docker image deployment using Docker Compose topic for more information.","title":"Deploy HCL DX 9.5 using Docker Compose"},{"location":"whatsnew/newcf196/#web-content-manager-multilingual-solution-enhancements","text":"The HCL Web Content Manager Multilingual Solution is a set of tools used to manage translated versions Web Content Manager content for localized and regionalized websites. Beginning with the HCL Digital Experience 9.5 Container Update CF196 release, support is added to import and export multiple libraries to a format supported by a translation service, support a maximum field length, export changed contents from a library, and export to projects. A new option to switch the language in an HCL DX 9.5 mobile view is also available. See the How to export and import WCM library content using DXClient and The Woodburn Studio demo site topics for more information.","title":"Web Content Manager Multilingual Solution Enhancements"},{"location":"whatsnew/newcf196/#new-hcl-digital-experience-95-release-artifacts-supporting-cicd-release-processes","text":"The HCL Digital Experience 9.5 DXClient and DXConnect servlet provides developers and administrators an approach to deploy changes or improvements to the HCL Digital Experience platform, and automate processes in the development and delivery process. Updates include a new DXClient Docker image, and new release artifact types supporting shared libraries, obtain failed syndication reports are provided in Container Update CF196. See the DXClient and DXConnect tooling supporting CICD release processes topic for more information.","title":"New HCL Digital Experience 9.5 Release Artifacts supporting CICD release processes"},{"location":"whatsnew/newcf196/#hcl-digital-experience-95-container-platform-support-matrix","text":"View the latest Kubernetes and OpenShift platforms tested and supported for specific HCL Digital Experience 9.5 Container Update deployments. See the HCL Digital Experience 9.5 Container Platform Support Matrix Help Center topic for more information.","title":"HCL Digital Experience 9.5 Container Platform Support Matrix"},{"location":"whatsnew/newcf196/#new-hcl-digital-experience-how-to-videos","text":"Take advantage of new step-by-step guidance for HCL Digital Experience practitioners presented in new videos and webinars. See the following HCL Digital Experience Help Center topics: Configuring user access permissions to Digital Asset Management assets Deep dive: Progressive Web Applications with HCL DX 9.5 Content Security Policy with HCL DX 9.5 Parent topic: Container Update releases 9.5","title":"New HCL Digital Experience \u2018How To\u2019 Videos"},{"location":"whatsnew/newcf197/","text":"What's new in Container Update CF197? This HCL Digital Experience 9.5 Container Update and CF197 release includes updated releases of HCL DX core Portal and Web Content Manager, Content Composer, Digital Asset Management and Experience API images, and an updated beta preview release of Design Studio. New and updated feature references are detailed here. Go to the HCL Software Support Site and HCL DX Software Fix list for the list of software fixes, including Container Update releases. Product software can be accessed from the HCL Software Licensing Portal . Go to this Step-by-step guide to downloading DX products and accessing Customer Support for more information. The latest Software Requirements and Updates supporting HCL Digital Experience solutions may be accessed from the HCL Support pages, HCL Digital Experience V9.5, V9.0, and V8.5 detailed system requirements topic. Design Studio (Beta) Design Studio enables content managers and designers to build and style their digital site properties quickly. Available for use with DX 9.5 container-based deployments, Design Studio presents a modern, intuitive, and role-based tool aggregating all needed functions to visually assemble, curate, design, and model pages, content, and applications in DX sites. New services available with the Container Update CF197 release include ability to render DX site pages and updates using the sample site, Ability to use the page editor to edit elements inline and update metadata, set locations for sites, set html tags for text elements, and more. Note: Design Studio is provided for beta evaluation with HCL Digital Experience 9.5 Container Update CF197, and includes a sample DX site. It is not yet supported for use in production deployments. See the Design Studio (Beta) topic for more information. Deploy HCL DX CF197 to container platforms using Helm Beginning with HCL Digital Experience 9.5 Container Update CF196, administrators can deploy HCL DX 9.5 CF196 and later images to supported container platforms using Helm. Using a Helm Chart deployment can provide administrators a larger degree of transparency and control in deployment operations. Support for new HCL DX 9.5 CF197 deployments to Red Hat OpenShift, Microsoft Azure Elastic Kubernetes Service (AKS) and Amazon Elastic Kubernetes Service (EKS),and ability to update from HCL DX 9.5 version CF196 to CF197 is supported with the Google Kubernetes Engine (GKE) platform. See the HCL DX 9.5 Helm deployment topic for more information. New HCL Digital Experience 9.5 Release Artifacts supporting CICD release processes The HCL Digital Experience 9.5 DXClient and DXConnect servlet provides developers and administrators an approach to deploy changes or improvements to the HCL Digital Experience platform, and automate processes in the development and delivery process. Updates include new release artifact types supporting, Obtain failed Syndication reports for single or multiple items, and delete Digital Asset Management inactive schema from Persistence are provided in CF197. See the DXClient and DXConnect tooling supporting CICD release processes topic for more information. HCL Digital Experience 9.5 Container Platform Support Matrix View the latest Kubernetes and OpenShift platforms tested and supported for specific HCL Digital Experience 9.5 Container Update deployments. See the HCL Digital Experience 9.5 Container Platform Support Matrix topic for more information. New HCL Digital Experience \u2018How To\u2019 Videos Take advantage of new step-by-step guidance for HCL Digital Experience practitioners presented in new videos and webinars. See the following HCL Digital Experience Help Center topics: Updating the HCL DX 9.5 Portal & IBM WebSphere Application Server Administrator Secrets in OpenShift and Kubernetes Use Docker Compose to install HCL DX 9.5 with Cloud Components for Developer Use Parent topic: Container Update releases 9.5","title":"What's new in Container Update CF197?"},{"location":"whatsnew/newcf197/#whats-new-in-container-update-cf197","text":"This HCL Digital Experience 9.5 Container Update and CF197 release includes updated releases of HCL DX core Portal and Web Content Manager, Content Composer, Digital Asset Management and Experience API images, and an updated beta preview release of Design Studio. New and updated feature references are detailed here. Go to the HCL Software Support Site and HCL DX Software Fix list for the list of software fixes, including Container Update releases. Product software can be accessed from the HCL Software Licensing Portal . Go to this Step-by-step guide to downloading DX products and accessing Customer Support for more information. The latest Software Requirements and Updates supporting HCL Digital Experience solutions may be accessed from the HCL Support pages, HCL Digital Experience V9.5, V9.0, and V8.5 detailed system requirements topic.","title":"What's new in Container Update CF197?"},{"location":"whatsnew/newcf197/#design-studio-beta","text":"Design Studio enables content managers and designers to build and style their digital site properties quickly. Available for use with DX 9.5 container-based deployments, Design Studio presents a modern, intuitive, and role-based tool aggregating all needed functions to visually assemble, curate, design, and model pages, content, and applications in DX sites. New services available with the Container Update CF197 release include ability to render DX site pages and updates using the sample site, Ability to use the page editor to edit elements inline and update metadata, set locations for sites, set html tags for text elements, and more. Note: Design Studio is provided for beta evaluation with HCL Digital Experience 9.5 Container Update CF197, and includes a sample DX site. It is not yet supported for use in production deployments. See the Design Studio (Beta) topic for more information.","title":"Design Studio (Beta)"},{"location":"whatsnew/newcf197/#deploy-hcl-dx-cf197-to-container-platforms-using-helm","text":"Beginning with HCL Digital Experience 9.5 Container Update CF196, administrators can deploy HCL DX 9.5 CF196 and later images to supported container platforms using Helm. Using a Helm Chart deployment can provide administrators a larger degree of transparency and control in deployment operations. Support for new HCL DX 9.5 CF197 deployments to Red Hat OpenShift, Microsoft Azure Elastic Kubernetes Service (AKS) and Amazon Elastic Kubernetes Service (EKS),and ability to update from HCL DX 9.5 version CF196 to CF197 is supported with the Google Kubernetes Engine (GKE) platform. See the HCL DX 9.5 Helm deployment topic for more information.","title":"Deploy HCL DX CF197 to container platforms using Helm"},{"location":"whatsnew/newcf197/#new-hcl-digital-experience-95-release-artifacts-supporting-cicd-release-processes","text":"The HCL Digital Experience 9.5 DXClient and DXConnect servlet provides developers and administrators an approach to deploy changes or improvements to the HCL Digital Experience platform, and automate processes in the development and delivery process. Updates include new release artifact types supporting, Obtain failed Syndication reports for single or multiple items, and delete Digital Asset Management inactive schema from Persistence are provided in CF197. See the DXClient and DXConnect tooling supporting CICD release processes topic for more information.","title":"New HCL Digital Experience 9.5 Release Artifacts supporting CICD release processes"},{"location":"whatsnew/newcf197/#hcl-digital-experience-95-container-platform-support-matrix","text":"View the latest Kubernetes and OpenShift platforms tested and supported for specific HCL Digital Experience 9.5 Container Update deployments. See the HCL Digital Experience 9.5 Container Platform Support Matrix topic for more information.","title":"HCL Digital Experience 9.5 Container Platform Support Matrix"},{"location":"whatsnew/newcf197/#new-hcl-digital-experience-how-to-videos","text":"Take advantage of new step-by-step guidance for HCL Digital Experience practitioners presented in new videos and webinars. See the following HCL Digital Experience Help Center topics: Updating the HCL DX 9.5 Portal & IBM WebSphere Application Server Administrator Secrets in OpenShift and Kubernetes Use Docker Compose to install HCL DX 9.5 with Cloud Components for Developer Use Parent topic: Container Update releases 9.5","title":"New HCL Digital Experience \u2018How To\u2019 Videos"},{"location":"whatsnew/newcf198/","text":"What's new in Container Update CF198? This HCL Digital Experience 9.5 Container Update and CF198 release includes new releases of HCL DX core Portal and Web Content Manager, Content Composer, Digital Asset Management, Experience API, Design Studio (Beta), new Helm deployment operations for container deployments, updated CICD release process artifacts, the new Site Manager Custom Layout Editor, HCL Digital Experience Technical Articles, \u2018How To\u2019 videos, and more. Go to the HCL Software Support Site and HCL DX Software Fix list for the list of software fixes, including Container Update releases. Product software can be accessed from the HCL Software Licensing Portal . Go to this Step-by-step guide to downloading DX products and accessing Customer Support for more information. The latest Software Requirements and Updates supporting HCL Digital Experience solutions may be accessed from the HCL Support pages, HCL Digital Experience V9.5, V9.0, and V8.5 detailed system requirements topic. Design Studio (Beta) Design Studio enables content managers and designers to build and style their digital site properties quickly. Available for use with DX 9.5 container-based deployments, Design Studio presents a modern, intuitive, and role-based tool aggregating all needed functions to visually assemble, curate, design, and model pages, content, and applications in DX sites. New features available with the Container Update CF198 release include the ability to create new DX sites, reading and updating site metadata, accessing site and page UUID and URLs, and client-side logging services. Note: Design Studio is provided for beta evaluation with HCL Digital Experience 9.5 Container Update CF198, and includes a sample DX site. It is not yet supported for use in production deployments. See the Design Studio (Beta) topic for more information. Deploy HCL DX CF198 to container platforms using Helm Beginning with HCL Digital Experience 9.5 Container Update CF196, administrators can deploy HCL DX 9.5 CF196 and later images to supported container platforms using Helm. Using a Helm Chart deployment can provide administrators more transparency and control in deployment operations. Support for hybrid deployments is provided, enabling to update from HCL DX 9.5 CF197 to CF198 in the Red Hat OpenShift, Microsoft Azure Elastic Kubernetes Service (AKS) and Amazon Elastic Kubernetes Service (EKS) platforms. See the HCL DX 9.5 Helm deployment topic for more information. New HCL Digital Experience 9.5 Release Artifacts supporting CICD release processes The HCL Digital Experience 9.5 DXClient and DXConnect servlet provides developers and administrators an approach to deploy changes or improvements to the HCL Digital Experience platform, and automate processes in the development and delivery process. Updates delivered in CF198 include process definitions to automate select IBM WebSphere Application Server settings during deployment, generate import and export lists of virtual portals, and import and export personalization rules. See the DXClient and DXConnect tooling supporting CICD release processes topic for more information. New HCL Digital Experience Site Manager Custom Layout Editor Beginning with HCL Digital Experience CF198, a Custom Layout Editor is available for use with HCL DX Site Manager capabilities, reducing custom development requirements for site designers implementing custom layouts in DX site pages. See the Using the Digital Experience Custom Layout Editor topic for more information. New Experience APIs New HCL Experience Web Content Manager REST APIs are available for new menu component update, collection responses conversion utilities, the ability to use the page editor to edit elements inline and update metadata, set locations for sites, set HTML tags for text elements, and more. See the HCL DX Experience API topic for more information Rationalized CF release versioning Beginning with HCL Digital Experience CF196, single versioning is used for both container and on-premise Combined Cumulative Fixes (CFs). This means that fixes for both deployments are included into one CF deliverable. And although the versioning is the same, CFs are packaged separately for on-premises and container deployments. See the CF release versioning and update path topic for more information. New HCL Digital Experience \u2018How To\u2019 Videos Take advantage of new step-by-step guidance for HCL Digital Experience practitioners presented in articles and videos from the following HCL Digital Experience Help Center topics: Video: Creating an HCL Digital Experience 9.5 CF196 cluster Step-by-step guide: How to deploy HCL DX Container update CF197 and later to Microsoft Azure Kubernetes Service HCL Digital Experience 9.5 Container Platform Support Matrix View the latest Kubernetes and OpenShift platforms tested and supported for specific HCL Digital Experience 9.5 Container Update deployments. See the HCL Digital Experience 9.5 Container Platform Support Matrix topic for more information. Parent topic: Container Update releases 9.5","title":"What's new in Container Update CF198?"},{"location":"whatsnew/newcf198/#whats-new-in-container-update-cf198","text":"This HCL Digital Experience 9.5 Container Update and CF198 release includes new releases of HCL DX core Portal and Web Content Manager, Content Composer, Digital Asset Management, Experience API, Design Studio (Beta), new Helm deployment operations for container deployments, updated CICD release process artifacts, the new Site Manager Custom Layout Editor, HCL Digital Experience Technical Articles, \u2018How To\u2019 videos, and more. Go to the HCL Software Support Site and HCL DX Software Fix list for the list of software fixes, including Container Update releases. Product software can be accessed from the HCL Software Licensing Portal . Go to this Step-by-step guide to downloading DX products and accessing Customer Support for more information. The latest Software Requirements and Updates supporting HCL Digital Experience solutions may be accessed from the HCL Support pages, HCL Digital Experience V9.5, V9.0, and V8.5 detailed system requirements topic.","title":"What's new in Container Update CF198?"},{"location":"whatsnew/newcf198/#design-studio-beta","text":"Design Studio enables content managers and designers to build and style their digital site properties quickly. Available for use with DX 9.5 container-based deployments, Design Studio presents a modern, intuitive, and role-based tool aggregating all needed functions to visually assemble, curate, design, and model pages, content, and applications in DX sites. New features available with the Container Update CF198 release include the ability to create new DX sites, reading and updating site metadata, accessing site and page UUID and URLs, and client-side logging services. Note: Design Studio is provided for beta evaluation with HCL Digital Experience 9.5 Container Update CF198, and includes a sample DX site. It is not yet supported for use in production deployments. See the Design Studio (Beta) topic for more information.","title":"Design Studio (Beta)"},{"location":"whatsnew/newcf198/#deploy-hcl-dx-cf198-to-container-platforms-using-helm","text":"Beginning with HCL Digital Experience 9.5 Container Update CF196, administrators can deploy HCL DX 9.5 CF196 and later images to supported container platforms using Helm. Using a Helm Chart deployment can provide administrators more transparency and control in deployment operations. Support for hybrid deployments is provided, enabling to update from HCL DX 9.5 CF197 to CF198 in the Red Hat OpenShift, Microsoft Azure Elastic Kubernetes Service (AKS) and Amazon Elastic Kubernetes Service (EKS) platforms. See the HCL DX 9.5 Helm deployment topic for more information.","title":"Deploy HCL DX CF198 to container platforms using Helm"},{"location":"whatsnew/newcf198/#new-hcl-digital-experience-95-release-artifacts-supporting-cicd-release-processes","text":"The HCL Digital Experience 9.5 DXClient and DXConnect servlet provides developers and administrators an approach to deploy changes or improvements to the HCL Digital Experience platform, and automate processes in the development and delivery process. Updates delivered in CF198 include process definitions to automate select IBM WebSphere Application Server settings during deployment, generate import and export lists of virtual portals, and import and export personalization rules. See the DXClient and DXConnect tooling supporting CICD release processes topic for more information.","title":"New HCL Digital Experience 9.5 Release Artifacts supporting CICD release processes"},{"location":"whatsnew/newcf198/#new-hcl-digital-experience-site-manager-custom-layout-editor","text":"Beginning with HCL Digital Experience CF198, a Custom Layout Editor is available for use with HCL DX Site Manager capabilities, reducing custom development requirements for site designers implementing custom layouts in DX site pages. See the Using the Digital Experience Custom Layout Editor topic for more information.","title":"New HCL Digital Experience Site Manager Custom Layout Editor"},{"location":"whatsnew/newcf198/#new-experience-apis","text":"New HCL Experience Web Content Manager REST APIs are available for new menu component update, collection responses conversion utilities, the ability to use the page editor to edit elements inline and update metadata, set locations for sites, set HTML tags for text elements, and more. See the HCL DX Experience API topic for more information","title":"New Experience APIs"},{"location":"whatsnew/newcf198/#rationalized-cf-release-versioning","text":"Beginning with HCL Digital Experience CF196, single versioning is used for both container and on-premise Combined Cumulative Fixes (CFs). This means that fixes for both deployments are included into one CF deliverable. And although the versioning is the same, CFs are packaged separately for on-premises and container deployments. See the CF release versioning and update path topic for more information.","title":"Rationalized CF release versioning"},{"location":"whatsnew/newcf198/#new-hcl-digital-experience-how-to-videos","text":"Take advantage of new step-by-step guidance for HCL Digital Experience practitioners presented in articles and videos from the following HCL Digital Experience Help Center topics: Video: Creating an HCL Digital Experience 9.5 CF196 cluster Step-by-step guide: How to deploy HCL DX Container update CF197 and later to Microsoft Azure Kubernetes Service","title":"New HCL Digital Experience \u2018How To\u2019 Videos"},{"location":"whatsnew/newcf198/#hcl-digital-experience-95-container-platform-support-matrix","text":"View the latest Kubernetes and OpenShift platforms tested and supported for specific HCL Digital Experience 9.5 Container Update deployments. See the HCL Digital Experience 9.5 Container Platform Support Matrix topic for more information. Parent topic: Container Update releases 9.5","title":"HCL Digital Experience 9.5 Container Platform Support Matrix"},{"location":"whatsnew/newcf199/","text":"What's new in Container Update CF199? This HCL Digital Experience 9.5 Container Update and CF199 release includes new releases of HCL DX core Portal and Web Content Manager, Content Composer, Digital Asset Management, Experience API, Design Studio (Beta), new Helm deployment operations for container deployments, updated CICD release process artifacts, \u201cHow To\u201d videos, and more. Go to the HCL Software Support Site and HCL DX Software Fix list for the list of software fixes, including Container Update releases. Product software can be accessed from the HCL Software Licensing Portal . Go to this Step-by-step guide to downloading DX products and accessing Customer Support for more information. The latest Software Requirements and Updates supporting HCL Digital Experience solutions may be accessed from the HCL Support pages, HCL Digital Experience V9.5, V9.0, and V8.5 detailed system requirements topic. Design Studio (Beta) Design Studio enables content managers and designers to build and style their digital site properties quickly. Available for use with DX 9.5 container-based deployments, Design Studio presents a modern, intuitive, and role-based tool aggregating all needed functions to visually assemble, curate, design, and model pages, content, and applications in DX sites. New features available with the Container Update CF199 release include the ability to select Web Content Manager library assets when creating sites, UI globalization, support for alternate and no context root when defining sites, and more. Note: Design Studio is provided for beta evaluation with HCL Digital Experience 9.5 Container Update CF196, and includes a sample DX site. It is not yet supported for use in production deployments. See the Design Studio (Beta) topic for more information. Migrate from HCL DX 9.5 Operator to Helm Deployments Beginning with HCL Digital Experience 9.5 Container Update CF196, administrators can deploy HCL DX 9.5 CF196 and later images to supported container platforms using Helm. Using a Helm Chart deployment can provide administrators more transparency and control in deployment operations. Beginning with Container Update CF199, support for migration from Operator-based (dxctl) to Helm-based deployments is provided. See the HCL DX 9.5 Helm deployment topic for more information. Digital Asset Management Staging New Digital Asset Management (DAM) staging support enables administrators to stage and synchronize DAM assets from an authoring environment (source environment/publisher) to multiple rendering environments (target environment/subscriber), using DXClient. See the DAM staging topic for more information. New HCL Digital Experience 9.5 Release Artifacts supporting CICD release processes The HCL Digital Experience 9.5 DXClient and DXConnect servlet provides developers and administrators an approach to deploy changes or improvements to the HCL Digital Experience platform, and to automate processes in the development and delivery process. Updates include process definitions to automate Export and Import of select IBM WebSphere Application Server Resource Provider settings during deployment, and to create Syndication relationships and credential vault settings. See the DXClient and DXConnect tooling supporting CICD release processes topic for more information. End of Support for HCL Digital Experience Deprecated Features The following list of HCL Digital Experience deprecated features will reach end of support beginning with Container update and CF200 release. Refer to the Deprecated features and themes for HCL Digital Experience 9.5 topic in the Help Center. New Experience APIs New HCL Experience APIs are available for creating, updating and deleting Design Studio (Beta) sites, pages, and containers. New Web Content Manager REST V2 APIs are available for creating content templates, categories, and more. See the HCL Experience API topic for more information. New REST APIs to Configure Remote Search Beginning with HCL Digital Experience CF and Container Update CF199, additional REST services enable administrators and developers to programatically configure remote search in on-premises and container-based Digital Experience deployments. See the Configure Remote Search using REST APIs topic for more information. New HCL Digital Experience \u2018How To\u2019 Videos Take advantage of new step-by-step guidance for HCL Digital Experience practitioners presented in articles and videos from the following HCL Digital Experience Help Center topics: Video: Deploy HCL DX 9.5 Container Update using Helm Video: Experience API V2 Web Content Manager REST APIs Parent topic: Container Update releases 9.5","title":"What's new in Container Update CF199?"},{"location":"whatsnew/newcf199/#whats-new-in-container-update-cf199","text":"This HCL Digital Experience 9.5 Container Update and CF199 release includes new releases of HCL DX core Portal and Web Content Manager, Content Composer, Digital Asset Management, Experience API, Design Studio (Beta), new Helm deployment operations for container deployments, updated CICD release process artifacts, \u201cHow To\u201d videos, and more. Go to the HCL Software Support Site and HCL DX Software Fix list for the list of software fixes, including Container Update releases. Product software can be accessed from the HCL Software Licensing Portal . Go to this Step-by-step guide to downloading DX products and accessing Customer Support for more information. The latest Software Requirements and Updates supporting HCL Digital Experience solutions may be accessed from the HCL Support pages, HCL Digital Experience V9.5, V9.0, and V8.5 detailed system requirements topic.","title":"What's new in Container Update CF199?"},{"location":"whatsnew/newcf199/#design-studio-beta","text":"Design Studio enables content managers and designers to build and style their digital site properties quickly. Available for use with DX 9.5 container-based deployments, Design Studio presents a modern, intuitive, and role-based tool aggregating all needed functions to visually assemble, curate, design, and model pages, content, and applications in DX sites. New features available with the Container Update CF199 release include the ability to select Web Content Manager library assets when creating sites, UI globalization, support for alternate and no context root when defining sites, and more. Note: Design Studio is provided for beta evaluation with HCL Digital Experience 9.5 Container Update CF196, and includes a sample DX site. It is not yet supported for use in production deployments. See the Design Studio (Beta) topic for more information.","title":"Design Studio (Beta)"},{"location":"whatsnew/newcf199/#migrate-from-hcl-dx-95-operator-to-helm-deployments","text":"Beginning with HCL Digital Experience 9.5 Container Update CF196, administrators can deploy HCL DX 9.5 CF196 and later images to supported container platforms using Helm. Using a Helm Chart deployment can provide administrators more transparency and control in deployment operations. Beginning with Container Update CF199, support for migration from Operator-based (dxctl) to Helm-based deployments is provided. See the HCL DX 9.5 Helm deployment topic for more information.","title":"Migrate from HCL DX 9.5 Operator to Helm Deployments"},{"location":"whatsnew/newcf199/#digital-asset-management-staging","text":"New Digital Asset Management (DAM) staging support enables administrators to stage and synchronize DAM assets from an authoring environment (source environment/publisher) to multiple rendering environments (target environment/subscriber), using DXClient. See the DAM staging topic for more information.","title":"Digital Asset Management Staging"},{"location":"whatsnew/newcf199/#new-hcl-digital-experience-95-release-artifacts-supporting-cicd-release-processes","text":"The HCL Digital Experience 9.5 DXClient and DXConnect servlet provides developers and administrators an approach to deploy changes or improvements to the HCL Digital Experience platform, and to automate processes in the development and delivery process. Updates include process definitions to automate Export and Import of select IBM WebSphere Application Server Resource Provider settings during deployment, and to create Syndication relationships and credential vault settings. See the DXClient and DXConnect tooling supporting CICD release processes topic for more information.","title":"New HCL Digital Experience 9.5 Release Artifacts supporting CICD release processes"},{"location":"whatsnew/newcf199/#end-of-support-for-hcl-digital-experience-deprecated-features","text":"The following list of HCL Digital Experience deprecated features will reach end of support beginning with Container update and CF200 release. Refer to the Deprecated features and themes for HCL Digital Experience 9.5 topic in the Help Center.","title":"End of Support for HCL Digital Experience Deprecated Features"},{"location":"whatsnew/newcf199/#new-experience-apis","text":"New HCL Experience APIs are available for creating, updating and deleting Design Studio (Beta) sites, pages, and containers. New Web Content Manager REST V2 APIs are available for creating content templates, categories, and more. See the HCL Experience API topic for more information.","title":"New Experience APIs"},{"location":"whatsnew/newcf199/#new-rest-apis-to-configure-remote-search","text":"Beginning with HCL Digital Experience CF and Container Update CF199, additional REST services enable administrators and developers to programatically configure remote search in on-premises and container-based Digital Experience deployments. See the Configure Remote Search using REST APIs topic for more information.","title":"New REST APIs to Configure Remote Search"},{"location":"whatsnew/newcf199/#new-hcl-digital-experience-how-to-videos","text":"Take advantage of new step-by-step guidance for HCL Digital Experience practitioners presented in articles and videos from the following HCL Digital Experience Help Center topics: Video: Deploy HCL DX 9.5 Container Update using Helm Video: Experience API V2 Web Content Manager REST APIs Parent topic: Container Update releases 9.5","title":"New HCL Digital Experience \u2018How To\u2019 Videos"},{"location":"whatsnew/newcf200/","text":"What's new in Container Update CF200? This HCL Digital Experience 9.5 Container Update and CF200 release includes updated releases of HCL DX core Portal and Web Content Manager, Content Composer, Digital Asset Management, Experience API, Design Studio (Beta), new Helm deployment operations for container deployments and migration from Operator deployments, updated CICD release process artifacts, new DX API and Explorer services for Personalization, Search and User and Groups REST APIs, new Digital Experience 9.5 Demo Packs on HCL Sofy, new \u2018How To\u2019 videos, and more. Go to the HCL Software Support Site and HCL DX Software Fix list for the list of software fixes, including Container Update releases. Product software can be accessed from the HCL Software Licensing Portal . Go to this Step-by-step guide to downloading DX products and accessing Customer Support for more information. The latest Software Requirements and Updates supporting HCL Digital Experience solutions may be accessed from the HCL Support pages, HCL Digital Experience V9.5, V9.0, and V8.5 detailed system requirements topic. Design Studio (Beta) Design Studio enables content managers and designers to build and style their digital site properties quickly. Available for use with DX 9.5 container-based deployments, Design Studio presents a modern, intuitive, and role-based tool aggregating all needed functions to visually assemble, curate, design, and model pages, content, and applications in DX sites. New features available with Container Update CF200 include Page creation shortcuts, Delete Site from Overview menu, Define Site base stylesheet, Rename Content container and more. Note: Note: Design Studio is provided for beta evaluation with HCL Digital Experience 9.5 Container Update CF200, and includes a sample DX site. It is not yet supported for use in production deployments. See the Design Studio (Beta) Help Center topic for more information. Deploy HCL DX 9.5 Container Update to container platforms using Helm Beginning with HCL Digital Experience 9.5 Container Update CF196, administrators can deploy HCL DX 9.5 CF196 and later images to supported container platforms using Helm. Using a Helm Chart deployment can provide administrators more transparency and control in deployment operations. Beginning with Container Update CF200, new servies and updates include support for Sidecars for logging of Remote Search, define central logs location, Incubator section for future DX 9.5 Container Update features, Configuration of labels and annotations, also environment variables for different DX resources, Use of Persistent Volumes for DX 9.5 Core, Digital Asset Management, and Persistence services file storage, migration process for the Core profile from Operator to Helm deployment, and Helm based Version to Version Update process. Important: Beginning with HCL DX Container Update CF200, use of the Operator (dxctl) method of container deployment is not supported. Customers should use Helm deployments and migrate existing Operator-based deployments to Helm. See the HCL DX 9.5 Helm deployment topic for more information. Digital Asset Management New Digital Asset Management (DAM) staging support enables administrators to stage and synchronize DAM assets from an authoring environment (source environment/publisher) to multiple rendering environments (target environment/subscriber), using DXClient. See the DAM staging Help Center topic for more information. Support to migrate from the old to new Digital Asset Management database in the Helm-based deployments. See the Migrate to new DAM DB in Helm-based deployments Help Center topic for more information. New HCL Digital Experience 9.5 Release Artifacts supporting CICD release processes The HCL Digital Experience 9.5 DXClient and DXConnect servlet provides developers and administrators an approach to deploy changes or improvements to the HCL Digital Experience platform, and to automate processes in the development and delivery process. Updates include process definitions to automate Export or Import of Web Content Manager libraries from source server to target server location, also ability to generate differential reports for DX Server configurations. See the DXClient and DXConnect tooling supporting CICD release processes topic for more information. New User and Groups REST API Explorer The remote PUMA SPI gives you access to user profiles through REST services. It provides a remote interface for user and group management for the configured HCL DX user repository. Beginning with HCL DX 9.5 Container Update and CF 199, a new API explorer is available that allows developers using the Portal User Interface APIs to explore and test these APIs. See the Help Center topic Remote REST service for PUMA for additional information. New Personalization REST APIs and Explorer Beginning with HCL DX 9.5 Container Update and CF200 , a new API explorer is available that allows developers using the new Digital Experience Personalization REST APIs to explore and test these APIs. See the Digital Experience Personalization Help Center topic for more information. New Search REST APIs Explorer The Digital Experience Search REST API provides developers programmatic access to search indexed Digital Experience content and web pages. Beginning with Container and CF Update CF200, a new Digital Experience Search REST API Explorer allows developers to explore and test the Digital Experience Search REST APIs. See the HCL Digital Experience Search REST API Specification Help Center topic for more information. Access and Deploy HCL Digital Experience 9.5 on HCL Sofy HCL SoFy is a next generation software development platform that accelerates deployment and integration of cloud-native products through the application of cloud-centered technologies and practices. Using HCL SoFy to access and deploy HCL Digital Experience 9.5, and other HCL software offerings and demo packs, you can quickly gain hands-on experience working with these cloud-native solutions. See the Deploying HCL Digital Experience 9.5 with HCL Solution Factory (SoFy) Help Center topic for more information. New How-To Video Take advantage of step-by-step guidance for HCL Digital Experience practitioners presented in articles and videos included in HCL Digital Experience Help Center topics. New : Learn how to manage and monitor HCL DX 9.5 Container Deployment Liveliness and Readiness probes. See the Help Center topic: Operations using Helm . End of Support for HCL Digital Experience Deprecated Features The following list of HCL Digital Experience deprecated features will reach end of support beginning with HCL Digital Experience Container update and CF 200. Reference the Help Center topic Deprecated features and themes for HCL Digital Experience 9.5 . Parent topic: Container Update releases 9.5","title":"What's new in Container Update CF200?"},{"location":"whatsnew/newcf200/#whats-new-in-container-update-cf200","text":"This HCL Digital Experience 9.5 Container Update and CF200 release includes updated releases of HCL DX core Portal and Web Content Manager, Content Composer, Digital Asset Management, Experience API, Design Studio (Beta), new Helm deployment operations for container deployments and migration from Operator deployments, updated CICD release process artifacts, new DX API and Explorer services for Personalization, Search and User and Groups REST APIs, new Digital Experience 9.5 Demo Packs on HCL Sofy, new \u2018How To\u2019 videos, and more. Go to the HCL Software Support Site and HCL DX Software Fix list for the list of software fixes, including Container Update releases. Product software can be accessed from the HCL Software Licensing Portal . Go to this Step-by-step guide to downloading DX products and accessing Customer Support for more information. The latest Software Requirements and Updates supporting HCL Digital Experience solutions may be accessed from the HCL Support pages, HCL Digital Experience V9.5, V9.0, and V8.5 detailed system requirements topic.","title":"What's new in Container Update CF200?"},{"location":"whatsnew/newcf200/#design-studio-beta","text":"Design Studio enables content managers and designers to build and style their digital site properties quickly. Available for use with DX 9.5 container-based deployments, Design Studio presents a modern, intuitive, and role-based tool aggregating all needed functions to visually assemble, curate, design, and model pages, content, and applications in DX sites. New features available with Container Update CF200 include Page creation shortcuts, Delete Site from Overview menu, Define Site base stylesheet, Rename Content container and more. Note: Note: Design Studio is provided for beta evaluation with HCL Digital Experience 9.5 Container Update CF200, and includes a sample DX site. It is not yet supported for use in production deployments. See the Design Studio (Beta) Help Center topic for more information.","title":"Design Studio (Beta)"},{"location":"whatsnew/newcf200/#deploy-hcl-dx-95-container-update-to-container-platforms-using-helm","text":"Beginning with HCL Digital Experience 9.5 Container Update CF196, administrators can deploy HCL DX 9.5 CF196 and later images to supported container platforms using Helm. Using a Helm Chart deployment can provide administrators more transparency and control in deployment operations. Beginning with Container Update CF200, new servies and updates include support for Sidecars for logging of Remote Search, define central logs location, Incubator section for future DX 9.5 Container Update features, Configuration of labels and annotations, also environment variables for different DX resources, Use of Persistent Volumes for DX 9.5 Core, Digital Asset Management, and Persistence services file storage, migration process for the Core profile from Operator to Helm deployment, and Helm based Version to Version Update process. Important: Beginning with HCL DX Container Update CF200, use of the Operator (dxctl) method of container deployment is not supported. Customers should use Helm deployments and migrate existing Operator-based deployments to Helm. See the HCL DX 9.5 Helm deployment topic for more information.","title":"Deploy HCL DX 9.5 Container Update to container platforms using Helm"},{"location":"whatsnew/newcf200/#digital-asset-management","text":"New Digital Asset Management (DAM) staging support enables administrators to stage and synchronize DAM assets from an authoring environment (source environment/publisher) to multiple rendering environments (target environment/subscriber), using DXClient. See the DAM staging Help Center topic for more information. Support to migrate from the old to new Digital Asset Management database in the Helm-based deployments. See the Migrate to new DAM DB in Helm-based deployments Help Center topic for more information.","title":"Digital Asset Management"},{"location":"whatsnew/newcf200/#new-hcl-digital-experience-95-release-artifacts-supporting-cicd-release-processes","text":"The HCL Digital Experience 9.5 DXClient and DXConnect servlet provides developers and administrators an approach to deploy changes or improvements to the HCL Digital Experience platform, and to automate processes in the development and delivery process. Updates include process definitions to automate Export or Import of Web Content Manager libraries from source server to target server location, also ability to generate differential reports for DX Server configurations. See the DXClient and DXConnect tooling supporting CICD release processes topic for more information.","title":"New HCL Digital Experience 9.5 Release Artifacts supporting CICD release processes"},{"location":"whatsnew/newcf200/#new-user-and-groups-rest-api-explorer","text":"The remote PUMA SPI gives you access to user profiles through REST services. It provides a remote interface for user and group management for the configured HCL DX user repository. Beginning with HCL DX 9.5 Container Update and CF 199, a new API explorer is available that allows developers using the Portal User Interface APIs to explore and test these APIs. See the Help Center topic Remote REST service for PUMA for additional information.","title":"New User and Groups REST API Explorer"},{"location":"whatsnew/newcf200/#new-personalization-rest-apis-and-explorer","text":"Beginning with HCL DX 9.5 Container Update and CF200 , a new API explorer is available that allows developers using the new Digital Experience Personalization REST APIs to explore and test these APIs. See the Digital Experience Personalization Help Center topic for more information.","title":"New Personalization REST APIs and Explorer"},{"location":"whatsnew/newcf200/#new-search-rest-apis-explorer","text":"The Digital Experience Search REST API provides developers programmatic access to search indexed Digital Experience content and web pages. Beginning with Container and CF Update CF200, a new Digital Experience Search REST API Explorer allows developers to explore and test the Digital Experience Search REST APIs. See the HCL Digital Experience Search REST API Specification Help Center topic for more information.","title":"New Search REST APIs Explorer"},{"location":"whatsnew/newcf200/#access-and-deploy-hcl-digital-experience-95-on-hcl-sofy","text":"HCL SoFy is a next generation software development platform that accelerates deployment and integration of cloud-native products through the application of cloud-centered technologies and practices. Using HCL SoFy to access and deploy HCL Digital Experience 9.5, and other HCL software offerings and demo packs, you can quickly gain hands-on experience working with these cloud-native solutions. See the Deploying HCL Digital Experience 9.5 with HCL Solution Factory (SoFy) Help Center topic for more information.","title":"Access and Deploy HCL Digital Experience 9.5 on HCL Sofy"},{"location":"whatsnew/newcf200/#new-how-to-video","text":"Take advantage of step-by-step guidance for HCL Digital Experience practitioners presented in articles and videos included in HCL Digital Experience Help Center topics. New : Learn how to manage and monitor HCL DX 9.5 Container Deployment Liveliness and Readiness probes. See the Help Center topic: Operations using Helm .","title":"New How-To Video"},{"location":"whatsnew/newcf200/#end-of-support-for-hcl-digital-experience-deprecated-features","text":"The following list of HCL Digital Experience deprecated features will reach end of support beginning with HCL Digital Experience Container update and CF 200. Reference the Help Center topic Deprecated features and themes for HCL Digital Experience 9.5 . Parent topic: Container Update releases 9.5","title":"End of Support for HCL Digital Experience Deprecated Features"},{"location":"whatsnew/newcf201/","text":"What's new in Container Update CF201? This HCL Digital Experience 9.5 Container Update and CF201 release includes updated releases of HCL DX core Portal and Web Content Manager, Content Composer, Digital Asset Management, Experience API, and Design Studio (Beta) components. The release also includes updated CICD release process artifacts, new DX Personalization REST APIs, Updated Helm deployment and logging capacity, LDAP, and environment configuration guidance, also metrics and visualization samples, Script Application updates, new React profile for the DX 8.5 sample Theme, extensibility plugin and sample for Digital Asset Management, and more. Go to the HCL Software Support Site and HCL DX Software Fix list for the list of software fixes, including Container Update releases. Product software can be accessed from the HCL Software Licensing Portal . Go to this Step-by-step guide to downloading DX products and accessing Customer Support for more information. The latest Software Requirements and Updates supporting HCL Digital Experience solutions may be accessed from the HCL Support pages, HCL Digital Experience V9.5, V9.0, and V8.5 detailed system requirements topic. The following features and updates are available to customers installing HCL Digital Experience on supported on-premises and container platforms, effective with HCL Digital Experience CF201: Deploy HCL DX 9.5 Container Update to container platforms using Helm Beginning with HCL Digital Experience 9.5 Container Update CF196, administrators can deploy HCL DX 9.5 CF196 and later images to supported container platforms using Helm. Using a Helm Chart deployment can provide administrators more transparency and control in deployment operations. Beginning with Container Update CF201, updated capacity requirements are published for Digital Experience components, services, and logging. Options to configure environment values, expanded LDAP configuration guidance, and Prometheus metrics and Grafana visualization dashboard samples are provided for administrators to manage, monitor and optimize their deployments. See the following Help Center topics for more information: HCL DX 9.5 Helm deployment Containerization Requirements and Limitations Additional Helm Tasks Monitor the HCL Digital Experience Container Deployment using Metrics Digital Asset Management New Digital Asset Management (DAM) capability enables developers to use and customize an extensibility plugin, with a customized sample provided use with Digital Asset Management. The DAM Extensibility capability adds support DAM to process user-defined custom renditions and transformations for images. This feature can be used to integrate with third-party plug-ins for custom asset processing, for example, to resize, crop, rotate, or other custom operations, while also supporting default and custom renditions. See the Using DAM Extensibility Help Center topic for more information. Script Application Updates New features and updates available for the Script Application include a new configuration task for use to configure Web Content Manager properties used to run Single Page Applications (SPAs) that use React or Angular. Improvements are added to support uploads of minified content for use in production SPAs. An out-of-the-box React profile, \u201cDeferred with React,\u201d is added for use with the Digital Experience 8.5 Theme . See the Script Application Improvements topic in the HCL Digital Experience 9.5 or HCL Digital Experience 8.5 Help center pages, as applicable to your HCL DX deployment, for more information. New HCL Digital Experience 9.5 Release Artifacts supporting CICD release processes The HCL Digital Experience 9.5 DXClient and DXConnect servlet provides developers and administrators an approach to deploy changes or improvements to the HCL Digital Experience platform, and to automate processes in the development and delivery process. Updates include ability to view and manipulate custom Resource Environment Provider (REP) settings, with examples. See the DXClient and DXConnect tooling supporting CICD release processes topic for more information. New Personalization REST APIs New Personalization REST APIs supporting Personalization Folder operations are available with HCL Digital Experience Container Update and CF201. See the Help Center topic Personalization Folder APIs for more information. Language switcher update Introduced in Container Update CF201, you can disable the language switcher by setting disable.languageSwitcher to true at the root page level in the configuration page. When set to true , the language switcher is hidden from the portal interface. See the Help Center topic Disabling the language switcher for more information. Access the latest HCL Digital Experience 9.5 Education Materials on HCL Software Academy The HCL Software Academy offers technical education for the HCL Software portfolio of products, organized by practitioner role. New modules are available for Digital Experience developers and administrators. See the HCL Digital Experience section of the HCL Software Academy for more information. Parent topic: Container Update releases 9.5","title":"What's new in Container Update CF201?"},{"location":"whatsnew/newcf201/#whats-new-in-container-update-cf201","text":"This HCL Digital Experience 9.5 Container Update and CF201 release includes updated releases of HCL DX core Portal and Web Content Manager, Content Composer, Digital Asset Management, Experience API, and Design Studio (Beta) components. The release also includes updated CICD release process artifacts, new DX Personalization REST APIs, Updated Helm deployment and logging capacity, LDAP, and environment configuration guidance, also metrics and visualization samples, Script Application updates, new React profile for the DX 8.5 sample Theme, extensibility plugin and sample for Digital Asset Management, and more. Go to the HCL Software Support Site and HCL DX Software Fix list for the list of software fixes, including Container Update releases. Product software can be accessed from the HCL Software Licensing Portal . Go to this Step-by-step guide to downloading DX products and accessing Customer Support for more information. The latest Software Requirements and Updates supporting HCL Digital Experience solutions may be accessed from the HCL Support pages, HCL Digital Experience V9.5, V9.0, and V8.5 detailed system requirements topic. The following features and updates are available to customers installing HCL Digital Experience on supported on-premises and container platforms, effective with HCL Digital Experience CF201:","title":"What's new in Container Update CF201?"},{"location":"whatsnew/newcf201/#deploy-hcl-dx-95-container-update-to-container-platforms-using-helm","text":"Beginning with HCL Digital Experience 9.5 Container Update CF196, administrators can deploy HCL DX 9.5 CF196 and later images to supported container platforms using Helm. Using a Helm Chart deployment can provide administrators more transparency and control in deployment operations. Beginning with Container Update CF201, updated capacity requirements are published for Digital Experience components, services, and logging. Options to configure environment values, expanded LDAP configuration guidance, and Prometheus metrics and Grafana visualization dashboard samples are provided for administrators to manage, monitor and optimize their deployments. See the following Help Center topics for more information: HCL DX 9.5 Helm deployment Containerization Requirements and Limitations Additional Helm Tasks Monitor the HCL Digital Experience Container Deployment using Metrics","title":"Deploy HCL DX 9.5 Container Update to container platforms using Helm"},{"location":"whatsnew/newcf201/#digital-asset-management","text":"New Digital Asset Management (DAM) capability enables developers to use and customize an extensibility plugin, with a customized sample provided use with Digital Asset Management. The DAM Extensibility capability adds support DAM to process user-defined custom renditions and transformations for images. This feature can be used to integrate with third-party plug-ins for custom asset processing, for example, to resize, crop, rotate, or other custom operations, while also supporting default and custom renditions. See the Using DAM Extensibility Help Center topic for more information.","title":"Digital Asset Management"},{"location":"whatsnew/newcf201/#script-application-updates","text":"New features and updates available for the Script Application include a new configuration task for use to configure Web Content Manager properties used to run Single Page Applications (SPAs) that use React or Angular. Improvements are added to support uploads of minified content for use in production SPAs. An out-of-the-box React profile, \u201cDeferred with React,\u201d is added for use with the Digital Experience 8.5 Theme . See the Script Application Improvements topic in the HCL Digital Experience 9.5 or HCL Digital Experience 8.5 Help center pages, as applicable to your HCL DX deployment, for more information.","title":"Script Application Updates"},{"location":"whatsnew/newcf201/#new-hcl-digital-experience-95-release-artifacts-supporting-cicd-release-processes","text":"The HCL Digital Experience 9.5 DXClient and DXConnect servlet provides developers and administrators an approach to deploy changes or improvements to the HCL Digital Experience platform, and to automate processes in the development and delivery process. Updates include ability to view and manipulate custom Resource Environment Provider (REP) settings, with examples. See the DXClient and DXConnect tooling supporting CICD release processes topic for more information.","title":"New HCL Digital Experience 9.5 Release Artifacts supporting CICD release processes"},{"location":"whatsnew/newcf201/#new-personalization-rest-apis","text":"New Personalization REST APIs supporting Personalization Folder operations are available with HCL Digital Experience Container Update and CF201. See the Help Center topic Personalization Folder APIs for more information.","title":"New Personalization REST APIs"},{"location":"whatsnew/newcf201/#language-switcher-update","text":"Introduced in Container Update CF201, you can disable the language switcher by setting disable.languageSwitcher to true at the root page level in the configuration page. When set to true , the language switcher is hidden from the portal interface. See the Help Center topic Disabling the language switcher for more information.","title":"Language switcher update"},{"location":"whatsnew/newcf201/#access-the-latest-hcl-digital-experience-95-education-materials-on-hcl-software-academy","text":"The HCL Software Academy offers technical education for the HCL Software portfolio of products, organized by practitioner role. New modules are available for Digital Experience developers and administrators. See the HCL Digital Experience section of the HCL Software Academy for more information. Parent topic: Container Update releases 9.5","title":"Access the latest HCL Digital Experience 9.5 Education Materials on HCL Software Academy"},{"location":"woodburn_studio/woodburn_studio/","text":"The Woodburn Studio demo site The Woodburn Studio is a website that demonstrates the use of some of the popular HCL Digital Experience features. Included in HCL Digital Experience 9.5, Woodburn Studio is a demo site for a fictional organization. Its intent is to show some of the themes that exist within HCL Digital Experience. Woodburn Studio leverages in-line editing and site management tools, as well as role and device-based controls on some parts of the site. It is not recommended to use Woodburn Studio for anything but a demo site. Woodburn Studio currently does not have E-commerce functionality. The Woodburn Studio demo site has a home page and several other microsites with one or more pages. Many of the elements are reused across the demo site, which is styled for the page on which they appear. Working with Woodburn Studio Woodburn Studio is not deployed by default. You can deploy, configure, and disable Woodburn Studio the same way you deploy Practitioner Studio. Go to Working with Practitioner Studio for more information. Note: Upon initial deployment, the HCL Digital Experience search indexes are not yet built. Therefore, search will not yield results for pages and content in the Woodburn Studio demonstration site until the search indexing services have run the first time. This will automatically occur with 24 hours of the initial deployment of DX. However, one can immediately force the indexer to run manually from the Search Collections screen in Administration > Search > Search Collections from the Practitioner Studio interface: From your HCL Digital Experience 9.5 Practitioner Studio interface, click Administration from the navigation menu as shown below. Click Search , then Search Collections . Click Default Search Collection from the Search Collection list. To start the crawler for the WCM Content Source, click the Play icon. To start the crawler for the Portal Content Source, click the Play icon. Go to Configuring a crawler to search your local portal site for more information about configuring and running a search crawler on your local portal site.","title":"The Woodburn Studio demo site"},{"location":"woodburn_studio/woodburn_studio/#the-woodburn-studio-demo-site","text":"The Woodburn Studio is a website that demonstrates the use of some of the popular HCL Digital Experience features. Included in HCL Digital Experience 9.5, Woodburn Studio is a demo site for a fictional organization. Its intent is to show some of the themes that exist within HCL Digital Experience. Woodburn Studio leverages in-line editing and site management tools, as well as role and device-based controls on some parts of the site. It is not recommended to use Woodburn Studio for anything but a demo site. Woodburn Studio currently does not have E-commerce functionality. The Woodburn Studio demo site has a home page and several other microsites with one or more pages. Many of the elements are reused across the demo site, which is styled for the page on which they appear.","title":"The Woodburn Studio demo site"},{"location":"woodburn_studio/woodburn_studio/#working-with-woodburn-studio","text":"Woodburn Studio is not deployed by default. You can deploy, configure, and disable Woodburn Studio the same way you deploy Practitioner Studio. Go to Working with Practitioner Studio for more information. Note: Upon initial deployment, the HCL Digital Experience search indexes are not yet built. Therefore, search will not yield results for pages and content in the Woodburn Studio demonstration site until the search indexing services have run the first time. This will automatically occur with 24 hours of the initial deployment of DX. However, one can immediately force the indexer to run manually from the Search Collections screen in Administration > Search > Search Collections from the Practitioner Studio interface: From your HCL Digital Experience 9.5 Practitioner Studio interface, click Administration from the navigation menu as shown below. Click Search , then Search Collections . Click Default Search Collection from the Search Collection list. To start the crawler for the WCM Content Source, click the Play icon. To start the crawler for the Portal Content Source, click the Play icon. Go to Configuring a crawler to search your local portal site for more information about configuring and running a search crawler on your local portal site.","title":"Working with Woodburn Studio"}]}